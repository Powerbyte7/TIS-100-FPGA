
tis_microc.elf:     file format elf32-littlenios2
tis_microc.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x001001c0

Program Header:
    LOAD off    0x00001000 vaddr 0x00100000 paddr 0x00100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00100020 paddr 0x00100020 align 2**12
         filesz 0x00024174 memsz 0x00024174 flags r-x
    LOAD off    0x00025194 vaddr 0x00124194 paddr 0x00125d74 align 2**12
         filesz 0x00001be0 memsz 0x00001be0 flags rw-
    LOAD off    0x00027954 vaddr 0x00127954 paddr 0x00127954 align 2**12
         filesz 0x00000000 memsz 0x00007408 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00100000  00100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  00100020  00100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00023370  001001c0  001001c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000c64  00123530  00123530  00024530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001be0  00124194  00125d74  00025194  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00007408  00127954  00127954  00027954  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0012ed5c  0012ed5c  00026d74  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00026d74  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000014c0  00000000  00000000  00026d98  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003caa7  00000000  00000000  00028258  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000e370  00000000  00000000  00064cff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013853  00000000  00000000  0007306f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003c18  00000000  00000000  000868c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000053ed  00000000  00000000  0008a4dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000261c3  00000000  00000000  0008f8c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000b5a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002218  00000000  00000000  000b5aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000bd0ee  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000bd0f4  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000bd100  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000bd101  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000bd102  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000bd10d  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000bd118  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  000bd123  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001c  00000000  00000000  000bd12d  2**0
                  CONTENTS, READONLY
 26 .jdi          00004fc5  00000000  00000000  000bd149  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00045780  00000000  00000000  000c210e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00100000 l    d  .entry	00000000 .entry
00100020 l    d  .exceptions	00000000 .exceptions
001001c0 l    d  .text	00000000 .text
00123530 l    d  .rodata	00000000 .rodata
00124194 l    d  .rwdata	00000000 .rwdata
00127954 l    d  .bss	00000000 .bss
0012ed5c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../tis_microc_bsp//obj/HAL/src/crt0.o
001001f8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00100094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00127954 l     O .bss	00000004 cnt.3367
001279f0 l     O .bss	00000010 number.3366
00127a00 l     O .bss	00000010 number.3372
00000000 l    df *ABS*	00000000 tis_asm.c
00124194 l     O .rwdata	00000020 regs
001241b4 l     O .rwdata	00000034 opcodes_str
001241e8 l     O .rwdata	0000000d asm_operands
00123660 l     O .rodata	0000001a asm_codes
00000000 l    df *ABS*	00000000 tis_node.c
00000000 l    df *ABS*	00000000 fgets.c
00000000 l    df *ABS*	00000000 findfp.c
001018f0 l     F .text	00000008 __fp_unlock
00101904 l     F .text	0000019c __sinit.part.1
00101aa0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
001241f8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00102ac8 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
0012394a l     O .rodata	00000010 zeroes.4389
0012395a l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfscanf.c
00123972 l     O .rodata	00000022 basefix.4340
00000000 l    df *ABS*	00000000 vfprintf.c
00123994 l     O .rodata	00000010 zeroes.4404
0010926c l     F .text	000000bc __sbprintf
001239a4 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
00123ab5 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00109530 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
00124a44 l     O .rwdata	00000020 lc_ctype_charset
00124a24 l     O .rwdata	00000020 lc_message_charset
00124a64 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00123c54 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strtod.c
0010d8f8 l     F .text	00000064 sulp
00123d88 l     O .rodata	00000014 fpinan.2773
00123d9c l     O .rodata	00000014 fpi.2737
00123db0 l     O .rodata	00000028 tinytens
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
00123dd8 l     O .rodata	00000010 zeroes.4333
00123de8 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 vfscanf.c
00123df8 l     O .rodata	00000022 basefix.3791
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
00112738 l     F .text	000000fc __sprint_r.part.0
00123e1a l     O .rodata	00000010 zeroes.4349
00113d74 l     F .text	000000bc __sbprintf
00123e2a l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
00114170 l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00118ce4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00118df8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00118e24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00118f18 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00119000 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
001190ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
001192c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00125ce8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00119534 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00125cec l     O .rwdata	00000004 lockid
00127984 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00125cf0 l     O .rwdata	00000004 lockid
0012798c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0011af6c l     F .text	00000048 OS_InitMisc
0011afb4 l     F .text	0000006c OS_InitRdyList
0011b120 l     F .text	000000e4 OS_InitTCBList
0011ae8c l     F .text	000000e0 OS_InitEventList
0011b020 l     F .text	00000080 OS_InitTaskIdle
0011b0a0 l     F .text	00000080 OS_InitTaskStat
0011b390 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0011d0a0 l     F .text	000000f4 OS_FlagTaskRdy
0011ce60 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00121178 l     F .text	00000034 alt_dev_reg
00124c44 l     O .rwdata	0000106c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
001214ec l     F .text	000002a4 altera_avalon_jtag_uart_irq
00121790 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00121f6c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
001221ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0012260c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0012276c l     F .text	0000003c alt_get_errno
001227a8 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0010d070 g     F .text	00000074 _mprec_log10
00125d3e g     O .rwdata	00000002 OSTaskNameSize
0010d15c g     F .text	0000008c __any_on
00114d1c g     F .text	00000054 _isatty_r
00123c60 g     O .rodata	00000028 __mprec_tinytens
00119204 g     F .text	000000bc alt_main
00103160 g     F .text	00000090 strcpy
001029f4 g     F .text	000000c0 _puts_r
0012ec5c g     O .bss	00000100 alt_irq
0010bb94 g     F .text	00000060 _lseek_r
0011d8c0 g     F .text	000000d8 OS_MemInit
00125d74 g       *ABS*	00000000 __flash_rwdata_start
00121118 g     F .text	00000060 OSTimeSet
00117514 g     F .text	00000088 .hidden __eqdf2
001015b8 g     F .text	000000b4 configure_node
00119be0 g     F .text	00000610 OSEventPendMulti
0012ed5c g       *ABS*	00000000 __alt_heap_start
00122de4 g     F .text	00000024 OSTaskCreateHook
00103324 g     F .text	00000008 strtok_r
00127a38 g     O .bss	00002000 task1_stk
001029b8 g     F .text	0000003c printf
00125d16 g     O .rwdata	00000002 OSMboxEn
0011a248 g     F .text	0000004c OSIntEnter
00114f98 g     F .text	0000009c _wcrtomb_r
00102f9c g     F .text	0000005c __sseek
00101c50 g     F .text	00000010 __sinit
00114e40 g     F .text	00000140 __swbuf_r
00125d26 g     O .rwdata	00000002 OSQEn
0010bab8 g     F .text	0000007c _setlocale_r
00101aa8 g     F .text	00000078 __sfmoreglue
00112720 g     F .text	00000018 ungetc
001198b4 g     F .text	000000cc __malloc_unlock
00122e4c g     F .text	00000020 OSTaskStatHook
00127994 g     O .bss	00000001 OSLockNesting
0010d95c g     F .text	000015e4 _strtod_r
00125d64 g     O .rwdata	00000002 OSDataSize
00127995 g     O .bss	00000001 OSRunning
0011126c g     F .text	00000100 _sfread_r
0010bfd4 g     F .text	0000015c memmove
00122e8c g     F .text	00000020 OSInitHookBegin
00125d5c g     O .rwdata	00000002 OSTmrSize
00101c38 g     F .text	00000018 _cleanup
0010c130 g     F .text	000000a8 _Balloc
00103288 g     F .text	0000009c __strtok_r
00127998 g     O .bss	00000004 OSIdleCtr
0011759c g     F .text	000000dc .hidden __gtdf2
00122c64 g       .text	00000000 OSStartTsk
0011b6c0 g     F .text	000002d4 OS_TCBInit
00101434 g     F .text	00000184 tis_assembler_test
00100000 g     F .entry	0000000c __reset
00125d62 g     O .rwdata	00000002 OSTmrWheelTblSize
00100020 g       *ABS*	00000000 __flash_exceptions_start
00125d02 g     O .rwdata	00000002 OSEventSize
0012799c g     O .bss	00000001 OSPrioHighRdy
00114114 g     F .text	0000005c _fstat_r
00122e08 g     F .text	00000024 OSTaskDelHook
00127964 g     O .bss	00000004 errno
00102f18 g     F .text	00000008 __seofread
00122c44 g       .text	00000000 OSStartHighRdy
0011fb98 g     F .text	000001e4 OSTaskCreateExt
0010fd54 g     F .text	000013a0 ___svfiprintf_internal_r
0011c9a8 g     F .text	00000060 OSFlagPendGetFlagsRdy
00125d42 g     O .rwdata	00000002 OSTaskStatStkSize
0011bb24 g     F .text	00000308 OSFlagAccept
0011df04 g     F .text	000000b8 OSQFlush
0011d998 g     F .text	00000140 OSQAccept
0012797c g     O .bss	00000004 alt_argv
0012dcb0 g       *ABS*	00000000 _gp
0011f9ec g     F .text	000001ac OSTaskCreate
0011f4fc g     F .text	000004f0 OSTaskChangePrio
00127990 g     O .bss	00000004 alt_heapsem
0011b994 g     F .text	00000190 OSDebugInit
0011fd7c g     F .text	00000344 OSTaskDel
001018d4 g     F .text	0000001c fgets
00100268 g     F .text	0000006c output
00124ac4 g     O .rwdata	00000180 alt_fd_list
0012ba38 g     O .bss	00000370 OSFlagTbl
0011ac6c g     F .text	000000b8 OS_EventTaskRemove
00122f10 g     F .text	00000090 alt_find_dev
00102718 g     F .text	00000148 memcpy
00114ac0 g     F .text	0000025c __hexnan
00125d2c g     O .rwdata	00000002 OSRdyTblSize
001018f8 g     F .text	0000000c _cleanup_r
00118954 g     F .text	000000dc .hidden __floatsidf
001226f0 g     F .text	0000007c alt_io_redirect
00117678 g     F .text	000000f4 .hidden __ltdf2
00123530 g       *ABS*	00000000 __DTOR_END__
00102ab4 g     F .text	00000014 puts
00119980 g     F .text	00000120 OSEventNameGet
00125d10 g     O .rwdata	00000002 OSFlagMax
0010be5c g     F .text	000000d8 mbrtowc
0010d7ac g     F .text	00000074 __fpclassifyd
0010cfcc g     F .text	000000a4 __ratio
0011a294 g     F .text	000000f8 OSIntExit
00113d58 g     F .text	0000001c __vfiprintf_internal
00125d4a g     O .rwdata	00000002 OSTCBSize
0012799d g     O .bss	00000001 OSPrioCur
001219ec g     F .text	000002bc altera_avalon_jtag_uart_read
00102988 g     F .text	00000030 _printf_r
00100000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00115fb8 g     F .text	00000064 .hidden __udivsi3
00118f54 g     F .text	000000ac isatty
00125d30 g     O .rwdata	00000002 OSStkWidth
0010ba88 g     F .text	00000030 iswspace
00123cb0 g     O .rodata	000000c8 __mprec_tens
00125d24 g     O .rwdata	00000002 OSPtrSize
0010bb34 g     F .text	0000000c __locale_charset
001161d0 g     F .text	000000c8 .hidden __lesf2
00125d04 g     O .rwdata	00000002 OSEventTblSize
0011528c g     F .text	00000074 .hidden __fixunsdfsi
00122bb8 g       .text	00000000 OSCtxSw
00127960 g     O .bss	00000004 __malloc_top_pad
001001fc g     F .text	0000006c input
001111fc g     F .text	00000070 __ssrefill_r
001279a0 g     O .bss	00000004 OSTCBList
00127974 g     O .bss	00000004 alt_fd_list_lock
0010f848 g     F .text	0000001c strtoul
00125cc4 g     O .rwdata	00000004 __mb_cur_max
0010bb64 g     F .text	0000000c _localeconv_r
0010f864 g     F .text	00000320 _strtoull_r
0010c564 g     F .text	0000003c __i2b
0010b5c0 g     F .text	000004c8 __sfvwrite_r
0012bda8 g     O .bss	00000c30 OSMemTbl
001279a4 g     O .bss	00000001 OSTickStepState
00102cb8 g     F .text	00000054 _sbrk_r
00125d28 g     O .rwdata	00000002 OSQMax
0012c9d8 g     O .bss	00000800 OSTaskStatStk
0011d4fc g     F .text	000000f0 OSMemNameGet
00125d08 g     O .rwdata	00000002 OSFlagEn
0010d1e8 g     F .text	00000060 _read_r
00125d4e g     O .rwdata	00000002 OSTimeTickHookEn
0011e3b4 g     F .text	00000168 OSQPost
0011d194 g     F .text	000000a4 OS_FlagUnlink
00125ce0 g     O .rwdata	00000004 alt_max_fd
0011b258 g     F .text	00000068 OS_MemCopy
0011b2c0 g     F .text	000000d0 OS_Sched
0010ade0 g     F .text	000000f0 _fclose_r
0011d40c g     F .text	000000f0 OSMemGet
001203a8 g     F .text	000001b4 OSTaskNameSet
0010b15c g     F .text	00000030 fflush
0012795c g     O .bss	00000004 __malloc_max_sbrked_mem
001279a8 g     O .bss	00000004 OSCtxSwCtr
00122e6c g     F .text	00000020 OSTimeTickHook
00125d12 g     O .rwdata	00000002 OSFlagNameSize
001055e8 g     F .text	0000198c __ssvfscanf_r
0011ad24 g     F .text	00000100 OS_EventTaskRemoveMulti
00116298 g     F .text	000008ac .hidden __adddf3
0011609c g     F .text	00000078 .hidden __nesf2
0011ab1c g     F .text	00000150 OS_EventTaskWaitMulti
0010cd74 g     F .text	0000010c __b2d
00125d2a g     O .rwdata	00000002 OSQSize
001158fc g     F .text	000005c4 .hidden __umoddi3
00119128 g     F .text	000000dc lseek
0011ee64 g     F .text	0000020c OSSemPend
00125cb0 g     O .rwdata	00000004 _global_impure_ptr
0010d248 g     F .text	00000564 _realloc_r
00125d14 g     O .rwdata	00000002 OSLowestPrio
0012ed5c g       *ABS*	00000000 __bss_end
0012251c g     F .text	000000f0 alt_iic_isr_register
00122eec g     F .text	00000024 OSTCBInitHook
00125d5a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00122a8c g     F .text	00000108 alt_tick
00123e3a g     O .rodata	00000100 __hexdig
00115300 g     F .text	000005fc .hidden __udivdi3
00114070 g     F .text	00000024 _fputwc_r
00125cfc g     O .rwdata	00000002 OSEventEn
00123c88 g     O .rodata	00000028 __mprec_bigtens
0010c348 g     F .text	00000104 __s2b
00125d56 g     O .rwdata	00000002 OSTmrCfgNameSize
00118a30 g     F .text	000000a8 .hidden __floatunsidf
0010cab4 g     F .text	00000060 __mcmp
00101c70 g     F .text	00000018 __fp_lock_all
001224d0 g     F .text	0000004c alt_ic_irq_enabled
0011cfc0 g     F .text	000000e0 OS_FlagInit
001229f0 g     F .text	0000009c alt_alarm_stop
0010f2b0 g     F .text	0000001c strtol
00125d38 g     O .rwdata	00000002 OSTaskIdleStkSize
001279e4 g     O .bss	00000004 alt_irq_active
0011ea9c g     F .text	000000b0 OSSemAccept
0011d700 g     F .text	000000d8 OSMemPut
0011d238 g     F .text	000001d4 OSMemCreate
001279ac g     O .bss	00000004 OSIdleCtrMax
001000ec g     F .exceptions	000000d4 alt_irq_handler
00124a9c g     O .rwdata	00000028 alt_dev_null
00125d4c g     O .rwdata	00000002 OSTicksPerSec
00122bb8 g       .text	00000000 OSIntCtxSw
0012218c g     F .text	00000020 alt_dcache_flush_all
0010c44c g     F .text	00000068 __hi0bits
0010122c g     F .text	00000208 tis_disassembler_test
001188d4 g     F .text	00000080 .hidden __fixdfsi
0010ef40 g     F .text	00000018 strtod
001279b0 g     O .bss	00000004 OSTCBFreeList
00125d74 g       *ABS*	00000000 __ram_rwdata_end
0011f070 g     F .text	0000016c OSSemPendAbort
00125cd8 g     O .rwdata	00000008 alt_dev_list
00119570 g     F .text	00000100 write
00125d50 g     O .rwdata	00000002 OSVersionNbr
00116114 g     F .text	000000bc .hidden __gtsf2
00124194 g       *ABS*	00000000 __ram_rodata_end
00118e60 g     F .text	000000b8 fstat
00117678 g     F .text	000000f4 .hidden __ledf2
00103000 g     F .text	00000084 strcat
00125cf8 g     O .rwdata	00000004 OSEndiannessTest
0010c82c g     F .text	00000140 __pow5mult
0011284c g     F .text	0000150c ___vfiprintf_internal_r
00127970 g     O .bss	00000004 __nlocale_changed
0011601c g     F .text	00000058 .hidden __umodsi3
00125d0a g     O .rwdata	00000002 OSFlagGrpSize
0012ed5c g       *ABS*	00000000 end
001213a4 g     F .text	00000148 altera_avalon_jtag_uart_init
0011b528 g     F .text	000000cc OS_TaskStat
00123530 g       *ABS*	00000000 __CTOR_LIST__
00140000 g       *ABS*	00000000 __alt_stack_pointer
00121fe4 g     F .text	0000007c alt_avalon_timer_sc_init
00118c80 g     F .text	00000064 .hidden __clzsi2
00121ca8 g     F .text	000002c4 altera_avalon_jtag_uart_write
00101c60 g     F .text	00000004 __sfp_lock_acquire
00102634 g     F .text	000000e4 memchr
0011b204 g     F .text	00000054 OS_MemClr
00106f74 g     F .text	000022dc ___vfprintf_internal_r
00122c88 g     F .text	0000015c OSTaskStkInit
00102d0c g     F .text	00000058 _sprintf_r
0010b2b0 g     F .text	00000310 _free_r
0010bb40 g     F .text	00000010 __locale_mb_cur_max
0011a874 g     F .text	00000198 OS_EventTaskRdy
0012337c g     F .text	00000180 __call_exitprocs
001279b4 g     O .bss	00000001 OSCPUUsage
001110f4 g     F .text	00000108 _sungetc_r
0012796c g     O .bss	00000004 __mlocale_changed
00125cb8 g     O .rwdata	00000004 __malloc_sbrk_base
001001c0 g     F .text	0000003c _start
001279e8 g     O .bss	00000004 _alt_tick_rate
0011dfbc g     F .text	0000028c OSQPend
0010f2cc g     F .text	00000304 _strtoll_r
00120c68 g     F .text	00000104 OSTimeDly
0010c96c g     F .text	00000148 __lshift
001279ec g     O .bss	00000004 _alt_nticks
001192fc g     F .text	00000104 read
001211e4 g     F .text	0000005c alt_sys_init
0010fb84 g     F .text	000001d0 __ssprint_r
00123264 g     F .text	00000118 __register_exitproc
001279b5 g     O .bss	00000001 OSTaskCtr
00114d70 g     F .text	000000d0 strncmp
00120d6c g     F .text	0000017c OSTimeDlyHMSM
0010c5a0 g     F .text	0000028c __multiply
00121894 g     F .text	00000068 altera_avalon_jtag_uart_close
00116074 g     F .text	00000028 .hidden __mulsi3
00124194 g       *ABS*	00000000 __ram_rwdata_start
00123530 g       *ABS*	00000000 __ram_rodata_start
00127a10 g     O .bss	00000028 __malloc_current_mallinfo
00125cfe g     O .rwdata	00000002 OSEventMax
0011609c g     F .text	00000078 .hidden __eqsf2
0010ce80 g     F .text	0000014c __d2b
0011f1dc g     F .text	00000110 OSSemPost
0011a418 g     F .text	000000dc OSSchedUnlock
00121240 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0010f5d0 g     F .text	00000278 _strtoul_r
001230a8 g     F .text	000000f4 alt_get_fd
001279b8 g     O .bss	00000004 OSMemFreeList
0011a564 g     F .text	000000b0 OSStatInit
0011cd9c g     F .text	000000c4 OSFlagQuery
00125d34 g     O .rwdata	00000002 OSTaskCreateExtEn
001094dc g     F .text	00000054 _close_r
001231e8 g     F .text	0000007c memcmp
0011a854 g     F .text	00000020 OS_Dummy
00121300 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0012ed5c g       *ABS*	00000000 __alt_stack_base
00121350 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00102dd0 g     F .text	0000007c sscanf
00109388 g     F .text	00000154 __swsetup_r
0012d1d8 g     O .bss	000001e0 OSQTbl
00116b44 g     F .text	000009d0 .hidden __divdf3
00101b20 g     F .text	00000118 __sfp
0010d0e4 g     F .text	00000078 __copybits
0012461c g     O .rwdata	00000408 __malloc_av_
00101c6c g     F .text	00000004 __sinit_lock_release
001279bc g     O .bss	00000004 OSTCBHighRdy
0011776c g     F .text	0000086c .hidden __muldf3
00102ec4 g     F .text	00000054 __sread
001279c0 g     O .bss	00000004 OSQFreeList
00122fa0 g     F .text	00000108 alt_find_file
001221e8 g     F .text	000000a4 alt_dev_llist_insert
00119794 g     F .text	00000120 __malloc_lock
00119484 g     F .text	000000b0 sbrk
0010332c g     F .text	000022bc ___svfprintf_internal_r
00119aa0 g     F .text	00000140 OSEventNameSet
0010b100 g     F .text	0000005c _fflush_r
00113e30 g     F .text	000000dc _calloc_r
001279c4 g     O .bss	00000001 OSRdyGrp
00127954 g       *ABS*	00000000 __bss_start
00102860 g     F .text	00000128 memset
001002d4 g     F .text	000002ac main
00127980 g     O .bss	00000004 alt_envp
00127958 g     O .bss	00000004 __malloc_max_total_mem
001212a0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00100980 g     F .text	00000080 tis_register_encode
00114f80 g     F .text	00000018 __swbuf
0012405c g     O .rodata	00000100 OSUnMapTbl
001161d0 g     F .text	000000c8 .hidden __ltsf2
00125d2e g     O .rwdata	00000002 OSSemEn
0011ca08 g     F .text	00000394 OSFlagPost
00102ff8 g     F .text	00000008 __sclose
00140000 g       *ABS*	00000000 __alt_heap_limit
0010aed0 g     F .text	00000014 fclose
0011aa0c g     F .text	00000110 OS_EventTaskWait
00129a38 g     O .bss	00002000 task2_stk
0010f058 g     F .text	00000258 _strtol_r
00118ad8 g     F .text	000001a8 .hidden __truncdfsf2
0011b5f4 g     F .text	000000cc OS_TaskStatStkChk
001200c0 g     F .text	00000150 OSTaskDelReq
00109758 g     F .text	00001688 _dtoa_r
00101e28 g     F .text	0000080c _malloc_r
001150f4 g     F .text	00000030 __ascii_wctomb
00125ce4 g     O .rwdata	00000004 alt_errno
0011a4f4 g     F .text	00000070 OSStart
001124b8 g     F .text	000000d4 __submore
00119734 g     F .text	00000060 __env_unlock
00101ca0 g     F .text	000000c4 _fwalk
0012055c g     F .text	000001d4 OSTaskResume
0011d7d8 g     F .text	000000e8 OSMemQuery
00100a98 g     F .text	00000064 tis_imm11_encode
00125d40 g     O .rwdata	00000002 OSTaskStatEn
00101790 g     F .text	00000144 _fgets_r
0010bf78 g     F .text	0000005c _mbtowc_r
00125d1a g     O .rwdata	00000002 OSMemMax
0011e51c g     F .text	00000170 OSQPostFront
00115ec0 g     F .text	00000084 .hidden __divsi3
001279c5 g     O .bss	00000003 OSRdyTbl
00125cf4 g     O .rwdata	00000002 OSDebugEn
0010b18c g     F .text	00000124 _malloc_trim_r
00123530 g       *ABS*	00000000 __CTOR_END__
00125d0c g     O .rwdata	00000002 OSFlagNodeSize
00125d54 g     O .rwdata	00000002 OSTmrCfgMax
00103084 g     F .text	000000dc strcmp
0011dad8 g     F .text	000001ac OSQCreate
00120210 g     F .text	00000198 OSTaskNameGet
00123530 g       *ABS*	00000000 __flash_rodata_start
0011e68c g     F .text	0000020c OSQPostOpt
0011a614 g     F .text	00000220 OSTimeTick
00125d3c g     O .rwdata	00000002 OSTaskMax
00123530 g       *ABS*	00000000 __DTOR_LIST__
00100580 g     F .text	00000400 tis_dissassemble
0011eb4c g     F .text	000000d8 OSSemCreate
00125d60 g     O .rwdata	00000002 OSTmrWheelSize
00100afc g     F .text	00000730 tis_assemble_program
00117514 g     F .text	00000088 .hidden __nedf2
00125d36 g     O .rwdata	00000002 OSTaskDelEn
0011f2ec g     F .text	00000110 OSSemQuery
0011dc84 g     F .text	00000280 OSQDel
0011e248 g     F .text	0000016c OSQPendAbort
001211ac g     F .text	00000038 alt_irq_init
00119400 g     F .text	00000084 alt_release_fd
00102d64 g     F .text	0000006c sprintf
00123f3a g     O .rodata	00000100 .hidden __clz_tab
00127968 g     O .bss	00000004 _PathLocale
0010ef58 g     F .text	00000100 strtof
0012319c g     F .text	00000014 atexit
00116114 g     F .text	000000bc .hidden __gesf2
00109328 g     F .text	00000060 _write_r
0011a38c g     F .text	0000008c OSSchedLock
0010bb70 g     F .text	00000018 setlocale
0011be2c g     F .text	00000108 OSFlagCreate
00100a00 g     F .text	00000098 tis_opcode_encode
0010d8f0 g     F .text	00000008 nanf
00125cb4 g     O .rwdata	00000004 _impure_ptr
00127978 g     O .bss	00000004 alt_argc
0010aee4 g     F .text	0000021c __sflush_r
0010bdb0 g     F .text	000000ac _mbrtowc_r
001222ec g     F .text	00000060 _do_dtors
0010bb5c g     F .text	00000008 __locale_cjk_lang
00125d06 g     O .rwdata	00000002 OSEventMultiEn
00102ae4 g     F .text	000001d4 __srefill_r
0011bf34 g     F .text	00000248 OSFlagDel
001279c8 g     O .bss	00000004 OSEventFreeList
00100020 g       .exceptions	00000000 alt_irq_entry
0010bf34 g     F .text	00000044 __ascii_mbtowc
0010cd10 g     F .text	00000064 __ulp
0011c3f0 g     F .text	000005b8 OSFlagPend
00125d52 g     O .rwdata	00000002 OSTmrEn
00101c88 g     F .text	00000018 __fp_unlock_all
00125cd0 g     O .rwdata	00000008 alt_fs_list
0011b404 g     F .text	00000074 OS_StrCopy
00125d1c g     O .rwdata	00000002 OSMemNameSize
00122eac g     F .text	00000020 OSInitHookEnd
0011136c g     F .text	0000114c __ssvfiscanf_r
00100020 g       *ABS*	00000000 __ram_exceptions_start
00125d48 g     O .rwdata	00000002 OSTCBPrioTblMax
0010bb88 g     F .text	0000000c localeconv
00125d44 g     O .rwdata	00000002 OSTaskStatStkChkEn
0012236c g     F .text	00000050 alt_ic_isr_register
00125d18 g     O .rwdata	00000002 OSMemEn
00102e4c g     F .text	00000078 _sscanf_r
00125d22 g     O .rwdata	00000002 OSMutexEn
00125d74 g       *ABS*	00000000 _edata
0012ed5c g       *ABS*	00000000 _end
001279cc g     O .bss	00000001 OSIntNesting
00113f0c g     F .text	00000164 __fputwc
001001c0 g       *ABS*	00000000 __ram_exceptions_end
001218fc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00120ee8 g     F .text	000001d4 OSTimeDlyResume
0011c2a4 g     F .text	0000014c OSFlagNameSet
00120730 g     F .text	000001c0 OSTaskStkChk
00122444 g     F .text	0000008c alt_ic_irq_disable
00125d1e g     O .rwdata	00000002 OSMemSize
00102f20 g     F .text	0000007c __swrite
00125cbc g     O .rwdata	00000004 __malloc_trim_threshold
00122b94 g     F .text	00000024 altera_nios2_qsys_irq_init
0010bb50 g     F .text	0000000c __locale_msgcharset
001279d0 g     O .bss	00000004 OSTCBCur
001231b0 g     F .text	00000038 exit
00125d20 g     O .rwdata	00000002 OSMemTblSize
00101d64 g     F .text	000000c4 _fwalk_reent
0010cb14 g     F .text	000001fc __mdiff
00115f44 g     F .text	00000074 .hidden __modsi3
00125cc0 g     O .rwdata	00000004 __ctype_ptr__
00140000 g       *ABS*	00000000 __alt_data_end
00100020 g     F .exceptions	00000000 alt_exception
00101c64 g     F .text	00000004 __sfp_lock_release
0011a1f0 g     F .text	00000058 OSInit
00120ad4 g     F .text	00000124 OSTaskQuery
0011e9f4 g     F .text	000000a8 OS_QInit
0010d820 g     F .text	000000d0 __sccl
0011b478 g     F .text	00000054 OS_StrLen
0011d5ec g     F .text	00000114 OSMemNameSet
001239b4 g     O .rodata	00000101 _ctype_
00125d3a g     O .rwdata	00000002 OSTaskProfileEn
001279d4 g     O .bss	00000004 OSTime
00125cc8 g     O .rwdata	00000004 __mbtowc
0012d3b8 g     O .bss	00000800 OSTaskIdleStk
001234fc g     F .text	00000034 _exit
00122060 g     F .text	0000012c alt_alarm_start
0011c17c g     F .text	00000128 OSFlagNameGet
001210bc g     F .text	0000005c OSTimeGet
0010166c g     F .text	00000124 node_info
00115180 g     F .text	0000010c .hidden __muldi3
0010bbf4 g     F .text	000001bc __smakebuf_r
001031f0 g     F .text	00000098 strlen
00122e2c g     F .text	00000020 OSTaskSwHook
00122894 g     F .text	0000015c open
0012dbb8 g     O .bss	00000b40 OSEventTbl
0011759c g     F .text	000000dc .hidden __gedf2
0012e6f8 g     O .bss	00000510 OSTCBTbl
00114270 g     F .text	00000850 __gethex
0011f3fc g     F .text	00000100 OSSemSet
00125ccc g     O .rwdata	00000004 __wctomb
00112834 g     F .text	00000018 __sprint_r
0012234c g     F .text	00000020 alt_icache_flush_all
00125d68 g     O .rwdata	00000004 alt_priority_mask
0011ec24 g     F .text	00000240 OSSemDel
001279d8 g     O .bss	00000004 OSFlagFreeList
001223bc g     F .text	00000088 alt_ic_irq_enable
00125d00 g     O .rwdata	00000002 OSEventNameSize
00109250 g     F .text	0000001c __vfprintf_internal
001279dc g     O .bss	00000001 OSStatRdy
0012ec08 g     O .bss	00000054 OSTCBPrioTbl
00115124 g     F .text	0000005c _wctomb_r
00119670 g     F .text	000000c4 __env_lock
00125d46 g     O .rwdata	00000002 OSTaskSwHookEn
00117fd8 g     F .text	000008fc .hidden __subdf3
0010c4b4 g     F .text	000000b0 __lo0bits
00125d6c g     O .rwdata	00000008 alt_alarm_list
0011258c g     F .text	00000194 _ungetc_r
00125d0e g     O .rwdata	00000002 OSFlagWidth
0012228c g     F .text	00000060 _do_ctors
00115034 g     F .text	000000c0 wcrtomb
00118d20 g     F .text	000000d8 close
00127988 g     O .bss	00000004 alt_envsem
001279e0 g     O .bss	00000004 OSIdleCtrRun
0011a834 g     F .text	00000020 OSVersion
00125d58 g     O .rwdata	00000002 OSTmrCfgWheelSize
00119068 g     F .text	00000084 alt_load
00120bf8 g     F .text	00000070 OS_TaskStkClr
00125d32 g     O .rwdata	00000002 OSTaskCreateEn
0011ae24 g     F .text	00000068 OS_EventWaitListInit
00114094 g     F .text	00000080 fputwc
00122ecc g     F .text	00000020 OSTaskIdleHook
00101c68 g     F .text	00000004 __sinit_lock_acquire
0010c200 g     F .text	00000148 __multadd
001208f0 g     F .text	000001e4 OSTaskSuspend
0010c1d8 g     F .text	00000028 _Bfree
0011b4cc g     F .text	0000005c OS_TaskIdle
00125d5e g     O .rwdata	00000002 OSTmrTblSize
0011e898 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00100000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  100000:	00400434 	movhi	at,16
    ori r1, r1, %lo(_start)
  100004:	08407014 	ori	at,at,448
    jmp r1
  100008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  10002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  10003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  10004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  10005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  10006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  10007c:	10000326 	beq	r2,zero,10008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  100080:	20000226 	beq	r4,zero,10008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  100084:	01000ec0 	call	1000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  100088:	00000306 	br	100098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  10008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  100090:	e8bfff17 	ldw	r2,-4(ea)

00100094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  100094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  100098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  10009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  1000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  1000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  1000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  1000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  1000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  1000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  1000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  1000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  1000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  1000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  1000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  1000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  1000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  1000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  1000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  1000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  1000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  1000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  1000e8:	ef80083a 	eret

001000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  1000ec:	defff904 	addi	sp,sp,-28
  1000f0:	dfc00615 	stw	ra,24(sp)
  1000f4:	df000515 	stw	fp,20(sp)
  1000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  1000fc:	011a2480 	call	11a248 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  100100:	0005313a 	rdctl	r2,ipending
  100104:	e0bffe15 	stw	r2,-8(fp)

  return active;
  100108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  10010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  100110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  100114:	00800044 	movi	r2,1
  100118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  10011c:	e0fffb17 	ldw	r3,-20(fp)
  100120:	e0bffc17 	ldw	r2,-16(fp)
  100124:	1884703a 	and	r2,r3,r2
  100128:	10001426 	beq	r2,zero,10017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  10012c:	008004f4 	movhi	r2,19
  100130:	10bb1704 	addi	r2,r2,-5028
  100134:	e0fffd17 	ldw	r3,-12(fp)
  100138:	180690fa 	slli	r3,r3,3
  10013c:	10c5883a 	add	r2,r2,r3
  100140:	10c00017 	ldw	r3,0(r2)
  100144:	008004f4 	movhi	r2,19
  100148:	10bb1704 	addi	r2,r2,-5028
  10014c:	e13ffd17 	ldw	r4,-12(fp)
  100150:	200890fa 	slli	r4,r4,3
  100154:	1105883a 	add	r2,r2,r4
  100158:	10800104 	addi	r2,r2,4
  10015c:	10800017 	ldw	r2,0(r2)
  100160:	1009883a 	mov	r4,r2
  100164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  100168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  10016c:	0005313a 	rdctl	r2,ipending
  100170:	e0bfff15 	stw	r2,-4(fp)

  return active;
  100174:	e0bfff17 	ldw	r2,-4(fp)
  100178:	00000706 	br	100198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  10017c:	e0bffc17 	ldw	r2,-16(fp)
  100180:	1085883a 	add	r2,r2,r2
  100184:	e0bffc15 	stw	r2,-16(fp)
      i++;
  100188:	e0bffd17 	ldw	r2,-12(fp)
  10018c:	10800044 	addi	r2,r2,1
  100190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  100194:	003fe106 	br	10011c <__alt_data_end+0xfffc011c>

    active = alt_irq_pending ();
  100198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  10019c:	e0bffb17 	ldw	r2,-20(fp)
  1001a0:	103fdb1e 	bne	r2,zero,100110 <__alt_data_end+0xfffc0110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  1001a4:	011a2940 	call	11a294 <OSIntExit>
}
  1001a8:	0001883a 	nop
  1001ac:	e037883a 	mov	sp,fp
  1001b0:	dfc00117 	ldw	ra,4(sp)
  1001b4:	df000017 	ldw	fp,0(sp)
  1001b8:	dec00204 	addi	sp,sp,8
  1001bc:	f800283a 	ret

Disassembly of section .text:

001001c0 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  1001c0:	06c00534 	movhi	sp,20
    ori sp, sp, %lo(__alt_stack_pointer)
  1001c4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  1001c8:	068004b4 	movhi	gp,18
    ori gp, gp, %lo(_gp)
  1001cc:	d6b72c14 	ori	gp,gp,56496
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  1001d0:	008004b4 	movhi	r2,18
    ori r2, r2, %lo(__bss_start)
  1001d4:	109e5514 	ori	r2,r2,31060

    movhi r3, %hi(__bss_end)
  1001d8:	00c004b4 	movhi	r3,18
    ori r3, r3, %lo(__bss_end)
  1001dc:	18fb5714 	ori	r3,r3,60764

    beq r2, r3, 1f
  1001e0:	10c00326 	beq	r2,r3,1001f0 <_start+0x30>

0:
    stw zero, (r2)
  1001e4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  1001e8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  1001ec:	10fffd36 	bltu	r2,r3,1001e4 <__alt_data_end+0xfffc01e4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  1001f0:	01190680 	call	119068 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  1001f4:	01192040 	call	119204 <alt_main>

001001f8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  1001f8:	003fff06 	br	1001f8 <__alt_data_end+0xfffc01f8>

001001fc <input>:
#define TIS_INPUT ((volatile uint16_t*) (TIS_STACK_INPUT_BASE+0x2))
#define TIS_OUTPUT ((volatile uint16_t*) (TIS_STACK_OUTPUT_BASE+0x2))


void input(void* pdata)
{
  1001fc:	defffd04 	addi	sp,sp,-12
  100200:	dfc00215 	stw	ra,8(sp)
  100204:	df000115 	stw	fp,4(sp)
  100208:	df000104 	addi	fp,sp,4
  10020c:	e13fff15 	stw	r4,-4(fp)
  static char number[16] = "";
  static int cnt = 0;
  while (1)
  { 
	  sprintf(number, "> %d", cnt);
  100210:	d0a72917 	ldw	r2,-25436(gp)
  100214:	100d883a 	mov	r6,r2
  100218:	014004b4 	movhi	r5,18
  10021c:	294d4c04 	addi	r5,r5,13616
  100220:	010004b4 	movhi	r4,18
  100224:	211e7c04 	addi	r4,r4,31216
  100228:	0102d640 	call	102d64 <sprintf>
	  puts(number);
  10022c:	010004b4 	movhi	r4,18
  100230:	211e7c04 	addi	r4,r4,31216
  100234:	0102ab40 	call	102ab4 <puts>
	  *TIS_INPUT = cnt;
  100238:	00801584 	movi	r2,86
  10023c:	d0e72917 	ldw	r3,-25436(gp)
  100240:	10c0000d 	sth	r3,0(r2)
	  cnt += 1;
  100244:	d0a72917 	ldw	r2,-25436(gp)
  100248:	10800044 	addi	r2,r2,1
  10024c:	d0a72915 	stw	r2,-25436(gp)
    OSTimeDlyHMSM(0, 0, 1, 0);
  100250:	000f883a 	mov	r7,zero
  100254:	01800044 	movi	r6,1
  100258:	000b883a 	mov	r5,zero
  10025c:	0009883a 	mov	r4,zero
  100260:	0120d6c0 	call	120d6c <OSTimeDlyHMSM>
  }
  100264:	003fea06 	br	100210 <__alt_data_end+0xfffc0210>

00100268 <output>:
}

void output(void* pdata)
{
  100268:	defffc04 	addi	sp,sp,-16
  10026c:	dfc00315 	stw	ra,12(sp)
  100270:	df000215 	stw	fp,8(sp)
  100274:	df000204 	addi	fp,sp,8
  100278:	e13fff15 	stw	r4,-4(fp)
  static char number[16] = "";
  while (1)
  { 
    OSTimeDlyHMSM(0, 0, 0, 100);
  10027c:	01c01904 	movi	r7,100
  100280:	000d883a 	mov	r6,zero
  100284:	000b883a 	mov	r5,zero
  100288:	0009883a 	mov	r4,zero
  10028c:	0120d6c0 	call	120d6c <OSTimeDlyHMSM>
    // Read stack
    int val = *TIS_OUTPUT;
  100290:	00801484 	movi	r2,82
  100294:	1080000b 	ldhu	r2,0(r2)
  100298:	10bfffcc 	andi	r2,r2,65535
  10029c:	e0bffe15 	stw	r2,-8(fp)

    if (val != 0xFFFF) {
  1002a0:	e0fffe17 	ldw	r3,-8(fp)
  1002a4:	00bfffd4 	movui	r2,65535
  1002a8:	18bff426 	beq	r3,r2,10027c <__alt_data_end+0xfffc027c>
    	sprintf(number, "< %d", val);
  1002ac:	e1bffe17 	ldw	r6,-8(fp)
  1002b0:	014004b4 	movhi	r5,18
  1002b4:	294d4e04 	addi	r5,r5,13624
  1002b8:	010004b4 	movhi	r4,18
  1002bc:	211e8004 	addi	r4,r4,31232
  1002c0:	0102d640 	call	102d64 <sprintf>
    	puts(number);
  1002c4:	010004b4 	movhi	r4,18
  1002c8:	211e8004 	addi	r4,r4,31232
  1002cc:	0102ab40 	call	102ab4 <puts>
    }
  }
  1002d0:	003fea06 	br	10027c <__alt_data_end+0xfffc027c>

001002d4 <main>:
#define ASM_SIZE 512
#define LINE_SIZE 20

/* The main function creates two task and starts multi-tasking */
int main(void)
{
  1002d4:	deff6804 	addi	sp,sp,-608
  1002d8:	dfc09715 	stw	ra,604(sp)
  1002dc:	df009615 	stw	fp,600(sp)
  1002e0:	dc009515 	stw	r16,596(sp)
  1002e4:	df009604 	addi	fp,sp,600
//	*TIS_NODE_CONFIG = 2; // 3 Instructions
//	 TIS_NODE_INSTR[0] = 0xC802; // MOV UP, ACC
//	 TIS_NODE_INSTR[1] = 0x0801; // ADD ACC (Multiply each number by 2)
//	 TIS_NODE_INSTR[2] = 0xD801; // MOV ACC, DOWN

	 char buffer[ASM_SIZE] = ""; // Main buffer to store all input
  1002e8:	e03f7215 	stw	zero,-568(fp)
  1002ec:	e0bf7304 	addi	r2,fp,-564
  1002f0:	00c07f04 	movi	r3,508
  1002f4:	180d883a 	mov	r6,r3
  1002f8:	000b883a 	mov	r5,zero
  1002fc:	1009883a 	mov	r4,r2
  100300:	01028600 	call	102860 <memset>
	 char line[LINE_SIZE];         // Temporary buffer for each line
	 uint16_t program[16] = {0};
  100304:	e03ff715 	stw	zero,-36(fp)
  100308:	e03ff815 	stw	zero,-32(fp)
  10030c:	e03ff915 	stw	zero,-28(fp)
  100310:	e03ffa15 	stw	zero,-24(fp)
  100314:	e03ffb15 	stw	zero,-20(fp)
  100318:	e03ffc15 	stw	zero,-16(fp)
  10031c:	e03ffd15 	stw	zero,-12(fp)
  100320:	e03ffe15 	stw	zero,-8(fp)

	 puts("Enter an assembly program");
  100324:	010004b4 	movhi	r4,18
  100328:	210d5004 	addi	r4,r4,13632
  10032c:	0102ab40 	call	102ab4 <puts>

	 while (1) {
		 // Read a line from standard input
		 if (fgets(line, LINE_SIZE, stdin) == NULL) {
  100330:	d0a00117 	ldw	r2,-32764(gp)
  100334:	10c00117 	ldw	r3,4(r2)
  100338:	e0bff204 	addi	r2,fp,-56
  10033c:	180d883a 	mov	r6,r3
  100340:	01400504 	movi	r5,20
  100344:	1009883a 	mov	r4,r2
  100348:	01018d40 	call	1018d4 <fgets>
  10034c:	10006326 	beq	r2,zero,1004dc <main+0x208>
			 break; // Stop if there's an error or EOF
		 }

		 // Remove the trailing newline character, if any
		 size_t len = strlen(line);
  100350:	e0bff204 	addi	r2,fp,-56
  100354:	1009883a 	mov	r4,r2
  100358:	01031f00 	call	1031f0 <strlen>
  10035c:	e0bf7015 	stw	r2,-576(fp)
		 if (len > 0 && line[len - 1] == '\n') {
  100360:	e0bf7017 	ldw	r2,-576(fp)
  100364:	10000f26 	beq	r2,zero,1003a4 <main+0xd0>
  100368:	e0bf7017 	ldw	r2,-576(fp)
  10036c:	10bfffc4 	addi	r2,r2,-1
  100370:	e0fff204 	addi	r3,fp,-56
  100374:	1885883a 	add	r2,r3,r2
  100378:	10800003 	ldbu	r2,0(r2)
  10037c:	10803fcc 	andi	r2,r2,255
  100380:	1080201c 	xori	r2,r2,128
  100384:	10bfe004 	addi	r2,r2,-128
  100388:	10800298 	cmpnei	r2,r2,10
  10038c:	1000051e 	bne	r2,zero,1003a4 <main+0xd0>
			 line[len - 1] = '\0';
  100390:	e0bf7017 	ldw	r2,-576(fp)
  100394:	10bfffc4 	addi	r2,r2,-1
  100398:	e0fff204 	addi	r3,fp,-56
  10039c:	1885883a 	add	r2,r3,r2
  1003a0:	10000005 	stb	zero,0(r2)
		 }

		 // Check for an empty line
		 if (line[0] == '\0') {
  1003a4:	e0bff203 	ldbu	r2,-56(fp)
  1003a8:	10803fcc 	andi	r2,r2,255
  1003ac:	1080201c 	xori	r2,r2,128
  1003b0:	10bfe004 	addi	r2,r2,-128
  1003b4:	1000261e 	bne	r2,zero,100450 <main+0x17c>
			 int instruction_cnt = tis_assemble_program(buffer, program);
  1003b8:	e0fff704 	addi	r3,fp,-36
  1003bc:	e0bf7204 	addi	r2,fp,-568
  1003c0:	180b883a 	mov	r5,r3
  1003c4:	1009883a 	mov	r4,r2
  1003c8:	0100afc0 	call	100afc <tis_assemble_program>
  1003cc:	e0bf7115 	stw	r2,-572(fp)
			 if (instruction_cnt != -1) {
  1003d0:	e0bf7117 	ldw	r2,-572(fp)
  1003d4:	10bfffe0 	cmpeqi	r2,r2,-1
  1003d8:	10001a1e 	bne	r2,zero,100444 <main+0x170>
				 puts("Writing program to node");
  1003dc:	010004b4 	movhi	r4,18
  1003e0:	210d5704 	addi	r4,r4,13660
  1003e4:	0102ab40 	call	102ab4 <puts>
				 *TIS_NODE_CONFIG = instruction_cnt - 1;
  1003e8:	00800804 	movi	r2,32
  1003ec:	e0ff7117 	ldw	r3,-572(fp)
  1003f0:	18ffffc4 	addi	r3,r3,-1
  1003f4:	10c0000d 	sth	r3,0(r2)
				 for (int i = 0; i < instruction_cnt; i++) {
  1003f8:	e03f6f15 	stw	zero,-580(fp)
  1003fc:	00000d06 	br	100434 <main+0x160>
					 TIS_NODE_INSTR[i] = program[i];
  100400:	e0bf6f17 	ldw	r2,-580(fp)
  100404:	1085883a 	add	r2,r2,r2
  100408:	10c00884 	addi	r3,r2,34
  10040c:	e0bf6f17 	ldw	r2,-580(fp)
  100410:	1085883a 	add	r2,r2,r2
  100414:	e13f6f04 	addi	r4,fp,-580
  100418:	2085883a 	add	r2,r4,r2
  10041c:	10808804 	addi	r2,r2,544
  100420:	1080000b 	ldhu	r2,0(r2)
  100424:	1880000d 	sth	r2,0(r3)
		 if (line[0] == '\0') {
			 int instruction_cnt = tis_assemble_program(buffer, program);
			 if (instruction_cnt != -1) {
				 puts("Writing program to node");
				 *TIS_NODE_CONFIG = instruction_cnt - 1;
				 for (int i = 0; i < instruction_cnt; i++) {
  100428:	e0bf6f17 	ldw	r2,-580(fp)
  10042c:	10800044 	addi	r2,r2,1
  100430:	e0bf6f15 	stw	r2,-580(fp)
  100434:	e0ff6f17 	ldw	r3,-580(fp)
  100438:	e0bf7117 	ldw	r2,-572(fp)
  10043c:	18bff016 	blt	r3,r2,100400 <__alt_data_end+0xfffc0400>
					 TIS_NODE_INSTR[i] = program[i];
				 }

				 break;
  100440:	00002706 	br	1004e0 <main+0x20c>
			 }
			 puts("Error: assembler failed");
  100444:	010004b4 	movhi	r4,18
  100448:	210d5d04 	addi	r4,r4,13684
  10044c:	0102ab40 	call	102ab4 <puts>
		 }

		 // Check if adding the line would exceed the buffer size
		 if (strlen(buffer) + strlen(line) + 1 >= ASM_SIZE) {
  100450:	e0bf7204 	addi	r2,fp,-568
  100454:	1009883a 	mov	r4,r2
  100458:	01031f00 	call	1031f0 <strlen>
  10045c:	1021883a 	mov	r16,r2
  100460:	e0bff204 	addi	r2,fp,-56
  100464:	1009883a 	mov	r4,r2
  100468:	01031f00 	call	1031f0 <strlen>
  10046c:	8085883a 	add	r2,r16,r2
  100470:	10800044 	addi	r2,r2,1
  100474:	10808030 	cmpltui	r2,r2,512
  100478:	1000091e 	bne	r2,zero,1004a0 <main+0x1cc>
			 puts("Error: Buffer overflow, try again");
  10047c:	010004b4 	movhi	r4,18
  100480:	210d6304 	addi	r4,r4,13708
  100484:	0102ab40 	call	102ab4 <puts>
			 memset(buffer, 0, sizeof(buffer));
  100488:	e0bf7204 	addi	r2,fp,-568
  10048c:	01808004 	movi	r6,512
  100490:	000b883a 	mov	r5,zero
  100494:	1009883a 	mov	r4,r2
  100498:	01028600 	call	102860 <memset>
			 continue;
  10049c:	00000e06 	br	1004d8 <main+0x204>
		 }

		 // Add the line to the buffer
		 strcat(buffer, line);
  1004a0:	e0fff204 	addi	r3,fp,-56
  1004a4:	e0bf7204 	addi	r2,fp,-568
  1004a8:	180b883a 	mov	r5,r3
  1004ac:	1009883a 	mov	r4,r2
  1004b0:	01030000 	call	103000 <strcat>
		 strcat(buffer, "\n"); // Add newline to separate lines in the buffer
  1004b4:	e0bf7204 	addi	r2,fp,-568
  1004b8:	1009883a 	mov	r4,r2
  1004bc:	01031f00 	call	1031f0 <strlen>
  1004c0:	1007883a 	mov	r3,r2
  1004c4:	e0bf7204 	addi	r2,fp,-568
  1004c8:	10c5883a 	add	r2,r2,r3
  1004cc:	00c00284 	movi	r3,10
  1004d0:	10c00005 	stb	r3,0(r2)
  1004d4:	10000045 	stb	zero,1(r2)
	 }
  1004d8:	003f9506 	br	100330 <__alt_data_end+0xfffc0330>
	 puts("Enter an assembly program");

	 while (1) {
		 // Read a line from standard input
		 if (fgets(line, LINE_SIZE, stdin) == NULL) {
			 break; // Stop if there's an error or EOF
  1004dc:	0001883a 	nop





  OSTaskCreateExt(input,
  1004e0:	d8000415 	stw	zero,16(sp)
  1004e4:	d8000315 	stw	zero,12(sp)
  1004e8:	00820004 	movi	r2,2048
  1004ec:	d8800215 	stw	r2,8(sp)
  1004f0:	008004b4 	movhi	r2,18
  1004f4:	109e8e04 	addi	r2,r2,31288
  1004f8:	d8800115 	stw	r2,4(sp)
  1004fc:	00800044 	movi	r2,1
  100500:	d8800015 	stw	r2,0(sp)
  100504:	01c00044 	movi	r7,1
  100508:	018004f4 	movhi	r6,19
  10050c:	31a68d04 	addi	r6,r6,-26060
  100510:	000b883a 	mov	r5,zero
  100514:	01000434 	movhi	r4,16
  100518:	21007f04 	addi	r4,r4,508
  10051c:	011fb980 	call	11fb98 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSTaskCreateExt(output,
  100520:	d8000415 	stw	zero,16(sp)
  100524:	d8000315 	stw	zero,12(sp)
  100528:	00820004 	movi	r2,2048
  10052c:	d8800215 	stw	r2,8(sp)
  100530:	008004f4 	movhi	r2,19
  100534:	10a68e04 	addi	r2,r2,-26056
  100538:	d8800115 	stw	r2,4(sp)
  10053c:	00800084 	movi	r2,2
  100540:	d8800015 	stw	r2,0(sp)
  100544:	01c00084 	movi	r7,2
  100548:	018004f4 	movhi	r6,19
  10054c:	31ae8d04 	addi	r6,r6,-17868
  100550:	000b883a 	mov	r5,zero
  100554:	01000434 	movhi	r4,16
  100558:	21009a04 	addi	r4,r4,616
  10055c:	011fb980 	call	11fb98 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSStart();
  100560:	011a4f40 	call	11a4f4 <OSStart>
  return 0;
  100564:	0005883a 	mov	r2,zero
}
  100568:	e6ffff04 	addi	sp,fp,-4
  10056c:	dfc00217 	ldw	ra,8(sp)
  100570:	df000117 	ldw	fp,4(sp)
  100574:	dc000017 	ldw	r16,0(sp)
  100578:	dec00304 	addi	sp,sp,12
  10057c:	f800283a 	ret

00100580 <tis_dissassemble>:
    [NOP] = "NOP", [MOV] = "MOV", [ADD] = "ADD", [SUB] = "SUB", [SWP] = "SWP",
    [SAV] = "SAV", [NEG] = "NEG", [JMP] = "JMP", [JEZ] = "JEZ", [JNZ] = "JNZ",
    [JGZ] = "JGZ", [JLZ] = "JLZ", [JRO] = "JRO",
};

int tis_dissassemble(uint16_t instruction, char *buffer) {
  100580:	defff304 	addi	sp,sp,-52
  100584:	dfc00c15 	stw	ra,48(sp)
  100588:	df000b15 	stw	fp,44(sp)
  10058c:	df000b04 	addi	fp,sp,44
  100590:	2005883a 	mov	r2,r4
  100594:	e17fff15 	stw	r5,-4(fp)
  100598:	e0bffe0d 	sth	r2,-8(fp)
    if (instruction == 0) {
  10059c:	e0bffe0b 	ldhu	r2,-8(fp)
  1005a0:	10000a1e 	bne	r2,zero,1005cc <tis_dissassemble+0x4c>
        return sprintf(buffer, "NOP");
  1005a4:	e0bfff17 	ldw	r2,-4(fp)
  1005a8:	00c01384 	movi	r3,78
  1005ac:	10c00005 	stb	r3,0(r2)
  1005b0:	00c013c4 	movi	r3,79
  1005b4:	10c00045 	stb	r3,1(r2)
  1005b8:	00c01404 	movi	r3,80
  1005bc:	10c00085 	stb	r3,2(r2)
  1005c0:	100000c5 	stb	zero,3(r2)
  1005c4:	008000c4 	movi	r2,3
  1005c8:	0000e806 	br	10096c <tis_dissassemble+0x3ec>
    } 
    
    // MOV instructions
    if (instruction & 0x8000 && instruction & 0x4000) {
  1005cc:	e0bffe0b 	ldhu	r2,-8(fp)
  1005d0:	10bfffcc 	andi	r2,r2,65535
  1005d4:	10a0001c 	xori	r2,r2,32768
  1005d8:	10a00004 	addi	r2,r2,-32768
  1005dc:	1000200e 	bge	r2,zero,100660 <tis_dissassemble+0xe0>
  1005e0:	e0bffe0b 	ldhu	r2,-8(fp)
  1005e4:	1090000c 	andi	r2,r2,16384
  1005e8:	10001d26 	beq	r2,zero,100660 <tis_dissassemble+0xe0>
        // MOV <SRC>, <DST>
        tis_reg_t src = instruction & register_mask;
  1005ec:	e0bffe0b 	ldhu	r2,-8(fp)
  1005f0:	108001cc 	andi	r2,r2,7
  1005f4:	e0bff715 	stw	r2,-36(fp)
        tis_reg_t dst = (instruction >> 11) & register_mask;
  1005f8:	e0bffe0b 	ldhu	r2,-8(fp)
  1005fc:	1004d2fa 	srli	r2,r2,11
  100600:	10bfffcc 	andi	r2,r2,65535
  100604:	108001cc 	andi	r2,r2,7
  100608:	e0bff815 	stw	r2,-32(fp)
        return sprintf(buffer, "MOV %s, %s", regs[src], regs[dst]);
  10060c:	008004b4 	movhi	r2,18
  100610:	10906504 	addi	r2,r2,16788
  100614:	e0fff717 	ldw	r3,-36(fp)
  100618:	18c7883a 	add	r3,r3,r3
  10061c:	18c7883a 	add	r3,r3,r3
  100620:	10c5883a 	add	r2,r2,r3
  100624:	11000017 	ldw	r4,0(r2)
  100628:	008004b4 	movhi	r2,18
  10062c:	10906504 	addi	r2,r2,16788
  100630:	e0fff817 	ldw	r3,-32(fp)
  100634:	18c7883a 	add	r3,r3,r3
  100638:	18c7883a 	add	r3,r3,r3
  10063c:	10c5883a 	add	r2,r2,r3
  100640:	10800017 	ldw	r2,0(r2)
  100644:	100f883a 	mov	r7,r2
  100648:	200d883a 	mov	r6,r4
  10064c:	014004b4 	movhi	r5,18
  100650:	294d8504 	addi	r5,r5,13844
  100654:	e13fff17 	ldw	r4,-4(fp)
  100658:	0102d640 	call	102d64 <sprintf>
  10065c:	0000c306 	br	10096c <tis_dissassemble+0x3ec>
    } else if (instruction & 0x8000) {
  100660:	e0bffe0b 	ldhu	r2,-8(fp)
  100664:	10bfffcc 	andi	r2,r2,65535
  100668:	10a0001c 	xori	r2,r2,32768
  10066c:	10a00004 	addi	r2,r2,-32768
  100670:	1000150e 	bge	r2,zero,1006c8 <tis_dissassemble+0x148>
        // MOV #<imm11>, <DST>
        tis_reg_t dst = (instruction >> 11) & register_mask;
  100674:	e0bffe0b 	ldhu	r2,-8(fp)
  100678:	1004d2fa 	srli	r2,r2,11
  10067c:	10bfffcc 	andi	r2,r2,65535
  100680:	108001cc 	andi	r2,r2,7
  100684:	e0bff915 	stw	r2,-28(fp)
        return sprintf(buffer, "MOV %d, %s", instruction & imm11_mask,
  100688:	e0bffe0b 	ldhu	r2,-8(fp)
  10068c:	1101ffcc 	andi	r4,r2,2047
  100690:	008004b4 	movhi	r2,18
  100694:	10906504 	addi	r2,r2,16788
  100698:	e0fff917 	ldw	r3,-28(fp)
  10069c:	18c7883a 	add	r3,r3,r3
  1006a0:	18c7883a 	add	r3,r3,r3
  1006a4:	10c5883a 	add	r2,r2,r3
  1006a8:	10800017 	ldw	r2,0(r2)
  1006ac:	100f883a 	mov	r7,r2
  1006b0:	200d883a 	mov	r6,r4
  1006b4:	014004b4 	movhi	r5,18
  1006b8:	294d8804 	addi	r5,r5,13856
  1006bc:	e13fff17 	ldw	r4,-4(fp)
  1006c0:	0102d640 	call	102d64 <sprintf>
  1006c4:	0000a906 	br	10096c <tis_dissassemble+0x3ec>
                       regs[dst]);
    } 
    
    // Jump instructions
    if (instruction & 0x4000 && instruction & 0x2000) {
  1006c8:	e0bffe0b 	ldhu	r2,-8(fp)
  1006cc:	1090000c 	andi	r2,r2,16384
  1006d0:	10004826 	beq	r2,zero,1007f4 <tis_dissassemble+0x274>
  1006d4:	e0bffe0b 	ldhu	r2,-8(fp)
  1006d8:	1088000c 	andi	r2,r2,8192
  1006dc:	10004526 	beq	r2,zero,1007f4 <tis_dissassemble+0x274>
        if (instruction & 0x1000) {
  1006e0:	e0bffe0b 	ldhu	r2,-8(fp)
  1006e4:	1084000c 	andi	r2,r2,4096
  1006e8:	10003226 	beq	r2,zero,1007b4 <tis_dissassemble+0x234>
            // JMP, JEZ, JNZ, JLZ, JGZ
            tis_opcode_t opcode;
            switch (instruction & (~imm6_mask)) {
  1006ec:	e0fffe0b 	ldhu	r3,-8(fp)
  1006f0:	00bff004 	movi	r2,-64
  1006f4:	1884703a 	and	r2,r3,r2
  1006f8:	10dc2020 	cmpeqi	r3,r2,28800
  1006fc:	1800181e 	bne	r3,zero,100760 <tis_dissassemble+0x1e0>
  100700:	10dc2048 	cmpgei	r3,r2,28801
  100704:	1800051e 	bne	r3,zero,10071c <tis_dissassemble+0x19c>
  100708:	10dc0020 	cmpeqi	r3,r2,28672
  10070c:	1800081e 	bne	r3,zero,100730 <tis_dissassemble+0x1b0>
  100710:	109c1020 	cmpeqi	r2,r2,28736
  100714:	1000091e 	bne	r2,zero,10073c <tis_dissassemble+0x1bc>
  100718:	00001406 	br	10076c <tis_dissassemble+0x1ec>
  10071c:	10dc4020 	cmpeqi	r3,r2,28928
  100720:	18000c1e 	bne	r3,zero,100754 <tis_dissassemble+0x1d4>
  100724:	109c4420 	cmpeqi	r2,r2,28944
  100728:	1000071e 	bne	r2,zero,100748 <tis_dissassemble+0x1c8>
  10072c:	00000f06 	br	10076c <tis_dissassemble+0x1ec>
                case 0x7000:
                    opcode = JMP;
  100730:	008001c4 	movi	r2,7
  100734:	e0bff515 	stw	r2,-44(fp)
                    break;
  100738:	00000e06 	br	100774 <tis_dissassemble+0x1f4>
                case 0x7040:
                    opcode = JEZ;
  10073c:	00800204 	movi	r2,8
  100740:	e0bff515 	stw	r2,-44(fp)
                    break;
  100744:	00000b06 	br	100774 <tis_dissassemble+0x1f4>
                case 0x7110:
                    opcode = JNZ;
  100748:	00800244 	movi	r2,9
  10074c:	e0bff515 	stw	r2,-44(fp)
                    break;
  100750:	00000806 	br	100774 <tis_dissassemble+0x1f4>
                case 0x7100:
                    opcode = JLZ;
  100754:	008002c4 	movi	r2,11
  100758:	e0bff515 	stw	r2,-44(fp)
                    break;
  10075c:	00000506 	br	100774 <tis_dissassemble+0x1f4>
                case 0x7080:
                    opcode = JLZ;
  100760:	008002c4 	movi	r2,11
  100764:	e0bff515 	stw	r2,-44(fp)
                    break;
  100768:	00000206 	br	100774 <tis_dissassemble+0x1f4>
                default:
                    return -1;
  10076c:	00bfffc4 	movi	r2,-1
  100770:	00007e06 	br	10096c <tis_dissassemble+0x3ec>
            }
            // Shows instruction address, not label
            return sprintf(buffer, "%s 0x%x", opcodes_str[opcode], instruction & imm6_mask);
  100774:	008004b4 	movhi	r2,18
  100778:	10906d04 	addi	r2,r2,16820
  10077c:	e0fff517 	ldw	r3,-44(fp)
  100780:	18c7883a 	add	r3,r3,r3
  100784:	18c7883a 	add	r3,r3,r3
  100788:	10c5883a 	add	r2,r2,r3
  10078c:	10c00017 	ldw	r3,0(r2)
  100790:	e0bffe0b 	ldhu	r2,-8(fp)
  100794:	10800fcc 	andi	r2,r2,63
  100798:	100f883a 	mov	r7,r2
  10079c:	180d883a 	mov	r6,r3
  1007a0:	014004b4 	movhi	r5,18
  1007a4:	294d8b04 	addi	r5,r5,13868
  1007a8:	e13fff17 	ldw	r4,-4(fp)
  1007ac:	0102d640 	call	102d64 <sprintf>
  1007b0:	00006e06 	br	10096c <tis_dissassemble+0x3ec>
        } else {
            // JRO
            tis_reg_t src = instruction & register_mask;
  1007b4:	e0bffe0b 	ldhu	r2,-8(fp)
  1007b8:	108001cc 	andi	r2,r2,7
  1007bc:	e0bffa15 	stw	r2,-24(fp)
            return sprintf(buffer, "JRO %s", regs[src]);
  1007c0:	008004b4 	movhi	r2,18
  1007c4:	10906504 	addi	r2,r2,16788
  1007c8:	e0fffa17 	ldw	r3,-24(fp)
  1007cc:	18c7883a 	add	r3,r3,r3
  1007d0:	18c7883a 	add	r3,r3,r3
  1007d4:	10c5883a 	add	r2,r2,r3
  1007d8:	10800017 	ldw	r2,0(r2)
  1007dc:	100d883a 	mov	r6,r2
  1007e0:	014004b4 	movhi	r5,18
  1007e4:	294d8d04 	addi	r5,r5,13876
  1007e8:	e13fff17 	ldw	r4,-4(fp)
  1007ec:	0102d640 	call	102d64 <sprintf>
  1007f0:	00005e06 	br	10096c <tis_dissassemble+0x3ec>
        }
    }

    // NEG, SWP, SAV
    if (instruction & 0x4000) {
  1007f4:	e0bffe0b 	ldhu	r2,-8(fp)
  1007f8:	1090000c 	andi	r2,r2,16384
  1007fc:	10002026 	beq	r2,zero,100880 <tis_dissassemble+0x300>
        tis_opcode_t opcode;
        switch (instruction) {
  100800:	e0bffe0b 	ldhu	r2,-8(fp)
  100804:	10d20020 	cmpeqi	r3,r2,18432
  100808:	1800051e 	bne	r3,zero,100820 <tis_dissassemble+0x2a0>
  10080c:	10d40020 	cmpeqi	r3,r2,20480
  100810:	1800061e 	bne	r3,zero,10082c <tis_dissassemble+0x2ac>
  100814:	10900020 	cmpeqi	r2,r2,16384
  100818:	1000071e 	bne	r2,zero,100838 <tis_dissassemble+0x2b8>
  10081c:	00000906 	br	100844 <tis_dissassemble+0x2c4>
            case 0x4800:
                opcode = NEG;
  100820:	00800184 	movi	r2,6
  100824:	e0bff615 	stw	r2,-40(fp)
                break;
  100828:	00000806 	br	10084c <tis_dissassemble+0x2cc>
            case 0x5000:
                opcode = SWP;
  10082c:	00800104 	movi	r2,4
  100830:	e0bff615 	stw	r2,-40(fp)
                break;
  100834:	00000506 	br	10084c <tis_dissassemble+0x2cc>
            case 0x4000:
                opcode = SAV;
  100838:	00800144 	movi	r2,5
  10083c:	e0bff615 	stw	r2,-40(fp)
                break;
  100840:	00000206 	br	10084c <tis_dissassemble+0x2cc>
            default:
                return -1;
  100844:	00bfffc4 	movi	r2,-1
  100848:	00004806 	br	10096c <tis_dissassemble+0x3ec>
        }
        return sprintf(buffer, "%s", opcodes_str[opcode]);
  10084c:	008004b4 	movhi	r2,18
  100850:	10906d04 	addi	r2,r2,16820
  100854:	e0fff617 	ldw	r3,-40(fp)
  100858:	18c7883a 	add	r3,r3,r3
  10085c:	18c7883a 	add	r3,r3,r3
  100860:	10c5883a 	add	r2,r2,r3
  100864:	10800017 	ldw	r2,0(r2)
  100868:	100d883a 	mov	r6,r2
  10086c:	014004b4 	movhi	r5,18
  100870:	294d8f04 	addi	r5,r5,13884
  100874:	e13fff17 	ldw	r4,-4(fp)
  100878:	0102d640 	call	102d64 <sprintf>
  10087c:	00003b06 	br	10096c <tis_dissassemble+0x3ec>
    } 

    // ADD, SUB
    uint16_t negative = instruction & 0x400;
  100880:	e0bffe0b 	ldhu	r2,-8(fp)
  100884:	1081000c 	andi	r2,r2,1024
  100888:	e0bffb0d 	sth	r2,-20(fp)
    uint16_t use_register = instruction & 0x800;
  10088c:	e0bffe0b 	ldhu	r2,-8(fp)
  100890:	1082000c 	andi	r2,r2,2048
  100894:	e0bffb8d 	sth	r2,-18(fp)
    if (negative) {
  100898:	e0bffb0b 	ldhu	r2,-20(fp)
  10089c:	10001a26 	beq	r2,zero,100908 <tis_dissassemble+0x388>
        if (use_register) {
  1008a0:	e0bffb8b 	ldhu	r2,-18(fp)
  1008a4:	10001026 	beq	r2,zero,1008e8 <tis_dissassemble+0x368>
            // SUB <SRC>
            tis_reg_t src = instruction & register_mask;
  1008a8:	e0bffe0b 	ldhu	r2,-8(fp)
  1008ac:	108001cc 	andi	r2,r2,7
  1008b0:	e0bffc15 	stw	r2,-16(fp)
            return sprintf(buffer, "SUB %s", regs[src]);
  1008b4:	008004b4 	movhi	r2,18
  1008b8:	10906504 	addi	r2,r2,16788
  1008bc:	e0fffc17 	ldw	r3,-16(fp)
  1008c0:	18c7883a 	add	r3,r3,r3
  1008c4:	18c7883a 	add	r3,r3,r3
  1008c8:	10c5883a 	add	r2,r2,r3
  1008cc:	10800017 	ldw	r2,0(r2)
  1008d0:	100d883a 	mov	r6,r2
  1008d4:	014004b4 	movhi	r5,18
  1008d8:	294d9004 	addi	r5,r5,13888
  1008dc:	e13fff17 	ldw	r4,-4(fp)
  1008e0:	0102d640 	call	102d64 <sprintf>
  1008e4:	00002106 	br	10096c <tis_dissassemble+0x3ec>
        } else {
            // SUB #<imm10>
            return sprintf(buffer, "SUB %d", instruction & imm10_mask);
  1008e8:	e0bffe0b 	ldhu	r2,-8(fp)
  1008ec:	1080ffcc 	andi	r2,r2,1023
  1008f0:	100d883a 	mov	r6,r2
  1008f4:	014004b4 	movhi	r5,18
  1008f8:	294d9204 	addi	r5,r5,13896
  1008fc:	e13fff17 	ldw	r4,-4(fp)
  100900:	0102d640 	call	102d64 <sprintf>
  100904:	00001906 	br	10096c <tis_dissassemble+0x3ec>
        }
    } else {
        if (use_register) {
  100908:	e0bffb8b 	ldhu	r2,-18(fp)
  10090c:	10001026 	beq	r2,zero,100950 <tis_dissassemble+0x3d0>
            // SUB <SRC>
            tis_reg_t src = instruction & register_mask;
  100910:	e0bffe0b 	ldhu	r2,-8(fp)
  100914:	108001cc 	andi	r2,r2,7
  100918:	e0bffd15 	stw	r2,-12(fp)
            return sprintf(buffer, "ADD %s", regs[src]);
  10091c:	008004b4 	movhi	r2,18
  100920:	10906504 	addi	r2,r2,16788
  100924:	e0fffd17 	ldw	r3,-12(fp)
  100928:	18c7883a 	add	r3,r3,r3
  10092c:	18c7883a 	add	r3,r3,r3
  100930:	10c5883a 	add	r2,r2,r3
  100934:	10800017 	ldw	r2,0(r2)
  100938:	100d883a 	mov	r6,r2
  10093c:	014004b4 	movhi	r5,18
  100940:	294d9404 	addi	r5,r5,13904
  100944:	e13fff17 	ldw	r4,-4(fp)
  100948:	0102d640 	call	102d64 <sprintf>
  10094c:	00000706 	br	10096c <tis_dissassemble+0x3ec>
        } else {
            // SUB #<imm10>
            return sprintf(buffer, "ADD %d", instruction & imm10_mask);
  100950:	e0bffe0b 	ldhu	r2,-8(fp)
  100954:	1080ffcc 	andi	r2,r2,1023
  100958:	100d883a 	mov	r6,r2
  10095c:	014004b4 	movhi	r5,18
  100960:	294d9604 	addi	r5,r5,13912
  100964:	e13fff17 	ldw	r4,-4(fp)
  100968:	0102d640 	call	102d64 <sprintf>
        }
    }
    
}
  10096c:	e037883a 	mov	sp,fp
  100970:	dfc00117 	ldw	ra,4(sp)
  100974:	df000017 	ldw	fp,0(sp)
  100978:	dec00204 	addi	sp,sp,8
  10097c:	f800283a 	ret

00100980 <tis_register_encode>:

tis_reg_t tis_register_encode(const char *str) {
  100980:	defffc04 	addi	sp,sp,-16
  100984:	dfc00315 	stw	ra,12(sp)
  100988:	df000215 	stw	fp,8(sp)
  10098c:	df000204 	addi	fp,sp,8
  100990:	e13fff15 	stw	r4,-4(fp)
    for (unsigned char i = 0; i < (sizeof(regs) / sizeof(regs[0])); i++) {
  100994:	e03ffe05 	stb	zero,-8(fp)
  100998:	00001006 	br	1009dc <tis_register_encode+0x5c>
        if (strcmp(str, regs[i]) == 0) {
  10099c:	e0fffe03 	ldbu	r3,-8(fp)
  1009a0:	008004b4 	movhi	r2,18
  1009a4:	10906504 	addi	r2,r2,16788
  1009a8:	18c7883a 	add	r3,r3,r3
  1009ac:	18c7883a 	add	r3,r3,r3
  1009b0:	10c5883a 	add	r2,r2,r3
  1009b4:	10800017 	ldw	r2,0(r2)
  1009b8:	100b883a 	mov	r5,r2
  1009bc:	e13fff17 	ldw	r4,-4(fp)
  1009c0:	01030840 	call	103084 <strcmp>
  1009c4:	1000021e 	bne	r2,zero,1009d0 <tis_register_encode+0x50>
            return (tis_reg_t)i;
  1009c8:	e0bffe03 	ldbu	r2,-8(fp)
  1009cc:	00000706 	br	1009ec <tis_register_encode+0x6c>
    }
    
}

tis_reg_t tis_register_encode(const char *str) {
    for (unsigned char i = 0; i < (sizeof(regs) / sizeof(regs[0])); i++) {
  1009d0:	e0bffe03 	ldbu	r2,-8(fp)
  1009d4:	10800044 	addi	r2,r2,1
  1009d8:	e0bffe05 	stb	r2,-8(fp)
  1009dc:	e0bffe03 	ldbu	r2,-8(fp)
  1009e0:	10800230 	cmpltui	r2,r2,8
  1009e4:	103fed1e 	bne	r2,zero,10099c <__alt_data_end+0xfffc099c>
        if (strcmp(str, regs[i]) == 0) {
            return (tis_reg_t)i;
        }
    }
    return INVALID;
  1009e8:	00bfffc4 	movi	r2,-1
}
  1009ec:	e037883a 	mov	sp,fp
  1009f0:	dfc00117 	ldw	ra,4(sp)
  1009f4:	df000017 	ldw	fp,0(sp)
  1009f8:	dec00204 	addi	sp,sp,8
  1009fc:	f800283a 	ret

00100a00 <tis_opcode_encode>:
    [JLZ] = 0x7080,
    [JRO] = 0x6000,
};

// Decode
tis_opcode_t tis_opcode_encode(const char *str) {
  100a00:	defffc04 	addi	sp,sp,-16
  100a04:	dfc00315 	stw	ra,12(sp)
  100a08:	df000215 	stw	fp,8(sp)
  100a0c:	df000204 	addi	fp,sp,8
  100a10:	e13fff15 	stw	r4,-4(fp)
    // All opcodes are 3 characters
    if (strlen(str) != 3) {
  100a14:	e13fff17 	ldw	r4,-4(fp)
  100a18:	01031f00 	call	1031f0 <strlen>
  100a1c:	108000e0 	cmpeqi	r2,r2,3
  100a20:	1000021e 	bne	r2,zero,100a2c <tis_opcode_encode+0x2c>
        return INVALID;
  100a24:	00bfffc4 	movi	r2,-1
  100a28:	00001606 	br	100a84 <tis_opcode_encode+0x84>
    }

    for (unsigned char i = 0; i < (sizeof(opcodes_str) / sizeof(opcodes_str[0])); i++) {
  100a2c:	e03ffe05 	stb	zero,-8(fp)
  100a30:	00001006 	br	100a74 <tis_opcode_encode+0x74>
        if (strcmp(str, opcodes_str[i]) == 0) {
  100a34:	e0fffe03 	ldbu	r3,-8(fp)
  100a38:	008004b4 	movhi	r2,18
  100a3c:	10906d04 	addi	r2,r2,16820
  100a40:	18c7883a 	add	r3,r3,r3
  100a44:	18c7883a 	add	r3,r3,r3
  100a48:	10c5883a 	add	r2,r2,r3
  100a4c:	10800017 	ldw	r2,0(r2)
  100a50:	100b883a 	mov	r5,r2
  100a54:	e13fff17 	ldw	r4,-4(fp)
  100a58:	01030840 	call	103084 <strcmp>
  100a5c:	1000021e 	bne	r2,zero,100a68 <tis_opcode_encode+0x68>
            return i;
  100a60:	e0bffe03 	ldbu	r2,-8(fp)
  100a64:	00000706 	br	100a84 <tis_opcode_encode+0x84>
    // All opcodes are 3 characters
    if (strlen(str) != 3) {
        return INVALID;
    }

    for (unsigned char i = 0; i < (sizeof(opcodes_str) / sizeof(opcodes_str[0])); i++) {
  100a68:	e0bffe03 	ldbu	r2,-8(fp)
  100a6c:	10800044 	addi	r2,r2,1
  100a70:	e0bffe05 	stb	r2,-8(fp)
  100a74:	e0bffe03 	ldbu	r2,-8(fp)
  100a78:	10800370 	cmpltui	r2,r2,13
  100a7c:	103fed1e 	bne	r2,zero,100a34 <__alt_data_end+0xfffc0a34>
        if (strcmp(str, opcodes_str[i]) == 0) {
            return i;
        }
    }
    return INVALID;
  100a80:	00bfffc4 	movi	r2,-1
}
  100a84:	e037883a 	mov	sp,fp
  100a88:	dfc00117 	ldw	ra,4(sp)
  100a8c:	df000017 	ldw	fp,0(sp)
  100a90:	dec00204 	addi	sp,sp,8
  100a94:	f800283a 	ret

00100a98 <tis_imm11_encode>:

// Encodes an imm11 operand from int
int tis_imm11_encode(int integer) {
  100a98:	defffe04 	addi	sp,sp,-8
  100a9c:	df000115 	stw	fp,4(sp)
  100aa0:	df000104 	addi	fp,sp,4
  100aa4:	e13fff15 	stw	r4,-4(fp)
    if (integer < -999) {
  100aa8:	e0bfff17 	ldw	r2,-4(fp)
  100aac:	10bf0648 	cmpgei	r2,r2,-999
  100ab0:	1000021e 	bne	r2,zero,100abc <tis_imm11_encode+0x24>
        return 999 | imm11_sign_bit;
  100ab4:	0081f9c4 	movi	r2,2023
  100ab8:	00000c06 	br	100aec <tis_imm11_encode+0x54>
    } else if (integer < 0) {
  100abc:	e0bfff17 	ldw	r2,-4(fp)
  100ac0:	1000040e 	bge	r2,zero,100ad4 <tis_imm11_encode+0x3c>
        return (integer*-1) | imm11_sign_bit;
  100ac4:	e0bfff17 	ldw	r2,-4(fp)
  100ac8:	0085c83a 	sub	r2,zero,r2
  100acc:	10810014 	ori	r2,r2,1024
  100ad0:	00000606 	br	100aec <tis_imm11_encode+0x54>
    } else if (integer < 999) {
  100ad4:	e0bfff17 	ldw	r2,-4(fp)
  100ad8:	1080f9c8 	cmpgei	r2,r2,999
  100adc:	1000021e 	bne	r2,zero,100ae8 <tis_imm11_encode+0x50>
        return integer;
  100ae0:	e0bfff17 	ldw	r2,-4(fp)
  100ae4:	00000106 	br	100aec <tis_imm11_encode+0x54>
    }
    return 999;
  100ae8:	0080f9c4 	movi	r2,999
}
  100aec:	e037883a 	mov	sp,fp
  100af0:	df000017 	ldw	fp,0(sp)
  100af4:	dec00104 	addi	sp,sp,4
  100af8:	f800283a 	ret

00100afc <tis_assemble_program>:

// Returns number of instructions written, or -1 on error
int tis_assemble_program(char *program, uint16_t *instructions) {
  100afc:	deffc904 	addi	sp,sp,-220
  100b00:	dfc03615 	stw	ra,216(sp)
  100b04:	df003515 	stw	fp,212(sp)
  100b08:	df003504 	addi	fp,sp,212
  100b0c:	e13ffe15 	stw	r4,-8(fp)
  100b10:	e17fff15 	stw	r5,-4(fp)

    // Split on newlines
    const char token_delimiter[] = "\t ,";
  100b14:	00800b34 	movhi	r2,44
  100b18:	10880244 	addi	r2,r2,8201
  100b1c:	e0bfd915 	stw	r2,-156(fp)

    // PC to increase after every parsed instruction
    int pc = 0;
  100b20:	e03fcb15 	stw	zero,-212(fp)
    // Store label pointers for later linking
    char *labels_pos[16] = {0};
  100b24:	e0bfda04 	addi	r2,fp,-152
  100b28:	00c01004 	movi	r3,64
  100b2c:	180d883a 	mov	r6,r3
  100b30:	000b883a 	mov	r5,zero
  100b34:	1009883a 	mov	r4,r2
  100b38:	01028600 	call	102860 <memset>
    char *labels_ref[16] = {0};
  100b3c:	e0bfea04 	addi	r2,fp,-88
  100b40:	00c01004 	movi	r3,64
  100b44:	180d883a 	mov	r6,r3
  100b48:	000b883a 	mov	r5,zero
  100b4c:	1009883a 	mov	r4,r2
  100b50:	01028600 	call	102860 <memset>

    // Pointer to current line
    char *line;
    // strtok_r pointer
    char *nextline = program;
  100b54:	e0bffe17 	ldw	r2,-8(fp)
  100b58:	e0bffa15 	stw	r2,-24(fp)
    
    // Parse every line
    while ((line = strtok_r(nextline, "\n", &nextline)) != NULL) {
  100b5c:	00015d06 	br	1010d4 <tis_assemble_program+0x5d8>

        // Check for maximum line length
        int line_len = strlen(line);
  100b60:	e13fcf17 	ldw	r4,-196(fp)
  100b64:	01031f00 	call	1031f0 <strlen>
  100b68:	e0bfd015 	stw	r2,-192(fp)
        if (line_len > 18) {
  100b6c:	e0bfd017 	ldw	r2,-192(fp)
  100b70:	108004d0 	cmplti	r2,r2,19
  100b74:	1000071e 	bne	r2,zero,100b94 <tis_assemble_program+0x98>
            puts("Line exceeded maximum length of 18 characters:");
  100b78:	010004b4 	movhi	r4,18
  100b7c:	210d9f04 	addi	r4,r4,13948
  100b80:	0102ab40 	call	102ab4 <puts>
            puts(line);
  100b84:	e13fcf17 	ldw	r4,-196(fp)
  100b88:	0102ab40 	call	102ab4 <puts>
            return -1; 
  100b8c:	00bfffc4 	movi	r2,-1
  100b90:	0001a106 	br	101218 <tis_assemble_program+0x71c>
        }

        // Divide line in code and comment
        char* comment;
        strtok_r(line, "#", &comment);
  100b94:	e0bffb04 	addi	r2,fp,-20
  100b98:	100d883a 	mov	r6,r2
  100b9c:	014004b4 	movhi	r5,18
  100ba0:	294dab04 	addi	r5,r5,13996
  100ba4:	e13fcf17 	ldw	r4,-196(fp)
  100ba8:	01033240 	call	103324 <strtok_r>

        // First token is either label, opcode, or empty
        char *strtok_ptr = NULL;
  100bac:	e03ffc15 	stw	zero,-16(fp)
        char *token = strtok_r(line, token_delimiter, &strtok_ptr);
  100bb0:	e0fffc04 	addi	r3,fp,-16
  100bb4:	e0bfd904 	addi	r2,fp,-156
  100bb8:	180d883a 	mov	r6,r3
  100bbc:	100b883a 	mov	r5,r2
  100bc0:	e13fcf17 	ldw	r4,-196(fp)
  100bc4:	01033240 	call	103324 <strtok_r>
  100bc8:	e0bfcc15 	stw	r2,-208(fp)

        // Check for empty line
        if (token == NULL) {
  100bcc:	e0bfcc17 	ldw	r2,-208(fp)
  100bd0:	10013d26 	beq	r2,zero,1010c8 <tis_assemble_program+0x5cc>
            continue;
        }

        // Check for label which ends with ':'
        int token_len = strlen(token);
  100bd4:	e13fcc17 	ldw	r4,-208(fp)
  100bd8:	01031f00 	call	1031f0 <strlen>
  100bdc:	e0bfd115 	stw	r2,-188(fp)
        if (token[token_len-1] == ':') {
  100be0:	e0bfd117 	ldw	r2,-188(fp)
  100be4:	10bfffc4 	addi	r2,r2,-1
  100be8:	e0ffcc17 	ldw	r3,-208(fp)
  100bec:	1885883a 	add	r2,r3,r2
  100bf0:	10800003 	ldbu	r2,0(r2)
  100bf4:	10803fcc 	andi	r2,r2,255
  100bf8:	1080201c 	xori	r2,r2,128
  100bfc:	10bfe004 	addi	r2,r2,-128
  100c00:	10800e98 	cmpnei	r2,r2,58
  100c04:	10002c1e 	bne	r2,zero,100cb8 <tis_assemble_program+0x1bc>
            // Avoid replacing existing label
            if (labels_pos[pc]) {
  100c08:	e0bfcb17 	ldw	r2,-212(fp)
  100c0c:	1085883a 	add	r2,r2,r2
  100c10:	1085883a 	add	r2,r2,r2
  100c14:	e0ffcb04 	addi	r3,fp,-212
  100c18:	1885883a 	add	r2,r3,r2
  100c1c:	10800f04 	addi	r2,r2,60
  100c20:	10800017 	ldw	r2,0(r2)
  100c24:	10000e26 	beq	r2,zero,100c60 <tis_assemble_program+0x164>
                printf("Multiple labels to instruction (%s, %s) \n", token, labels_pos[pc]);
  100c28:	e0bfcb17 	ldw	r2,-212(fp)
  100c2c:	1085883a 	add	r2,r2,r2
  100c30:	1085883a 	add	r2,r2,r2
  100c34:	e13fcb04 	addi	r4,fp,-212
  100c38:	2085883a 	add	r2,r4,r2
  100c3c:	10800f04 	addi	r2,r2,60
  100c40:	10800017 	ldw	r2,0(r2)
  100c44:	100d883a 	mov	r6,r2
  100c48:	e17fcc17 	ldw	r5,-208(fp)
  100c4c:	010004b4 	movhi	r4,18
  100c50:	210dac04 	addi	r4,r4,14000
  100c54:	01029b80 	call	1029b8 <printf>
                return -1;
  100c58:	00bfffc4 	movi	r2,-1
  100c5c:	00016e06 	br	101218 <tis_assemble_program+0x71c>
            }

            // Save label without ':'
            token[token_len-1] = '\0';
  100c60:	e0bfd117 	ldw	r2,-188(fp)
  100c64:	10bfffc4 	addi	r2,r2,-1
  100c68:	e0ffcc17 	ldw	r3,-208(fp)
  100c6c:	1885883a 	add	r2,r3,r2
  100c70:	10000005 	stb	zero,0(r2)
            labels_pos[pc] = token;
  100c74:	e0bfcb17 	ldw	r2,-212(fp)
  100c78:	1085883a 	add	r2,r2,r2
  100c7c:	1085883a 	add	r2,r2,r2
  100c80:	e0ffcb04 	addi	r3,fp,-212
  100c84:	1885883a 	add	r2,r3,r2
  100c88:	10800f04 	addi	r2,r2,60
  100c8c:	e0ffcc17 	ldw	r3,-208(fp)
  100c90:	10c00015 	stw	r3,0(r2)

            // Get next token
            token = strtok_r(NULL, token_delimiter, &strtok_ptr);
  100c94:	e0fffc04 	addi	r3,fp,-16
  100c98:	e0bfd904 	addi	r2,fp,-156
  100c9c:	180d883a 	mov	r6,r3
  100ca0:	100b883a 	mov	r5,r2
  100ca4:	0009883a 	mov	r4,zero
  100ca8:	01033240 	call	103324 <strtok_r>
  100cac:	e0bfcc15 	stw	r2,-208(fp)
            if (token == NULL) {
  100cb0:	e0bfcc17 	ldw	r2,-208(fp)
  100cb4:	10010626 	beq	r2,zero,1010d0 <tis_assemble_program+0x5d4>
                continue;
            }
        }

        // Check for valid opcode
        tis_opcode_t opcode = tis_opcode_encode(token);
  100cb8:	e13fcc17 	ldw	r4,-208(fp)
  100cbc:	0100a000 	call	100a00 <tis_opcode_encode>
  100cc0:	e0bfd215 	stw	r2,-184(fp)
        if (opcode == -1) {
  100cc4:	e0bfd217 	ldw	r2,-184(fp)
  100cc8:	10bfffd8 	cmpnei	r2,r2,-1
  100ccc:	1000061e 	bne	r2,zero,100ce8 <tis_assemble_program+0x1ec>
            printf("Invalid opcode (%s) \n", token);
  100cd0:	e17fcc17 	ldw	r5,-208(fp)
  100cd4:	010004b4 	movhi	r4,18
  100cd8:	210db704 	addi	r4,r4,14044
  100cdc:	01029b80 	call	1029b8 <printf>
            return -1;
  100ce0:	00bfffc4 	movi	r2,-1
  100ce4:	00014c06 	br	101218 <tis_assemble_program+0x71c>
        }

        // Set instruction identifying bits
        instructions[pc] = asm_codes[opcode]; 
  100ce8:	e0bfcb17 	ldw	r2,-212(fp)
  100cec:	1085883a 	add	r2,r2,r2
  100cf0:	1007883a 	mov	r3,r2
  100cf4:	e0bfff17 	ldw	r2,-4(fp)
  100cf8:	10c9883a 	add	r4,r2,r3
  100cfc:	008004b4 	movhi	r2,18
  100d00:	108d9804 	addi	r2,r2,13920
  100d04:	e0ffd217 	ldw	r3,-184(fp)
  100d08:	18c7883a 	add	r3,r3,r3
  100d0c:	10c5883a 	add	r2,r2,r3
  100d10:	1080000b 	ldhu	r2,0(r2)
  100d14:	2080000d 	sth	r2,0(r4)

        // End if no further operands
        int opcount = asm_operands[opcode];
  100d18:	008004b4 	movhi	r2,18
  100d1c:	10907a04 	addi	r2,r2,16872
  100d20:	e0ffd217 	ldw	r3,-184(fp)
  100d24:	10c5883a 	add	r2,r2,r3
  100d28:	10800003 	ldbu	r2,0(r2)
  100d2c:	10803fcc 	andi	r2,r2,255
  100d30:	1080201c 	xori	r2,r2,128
  100d34:	10bfe004 	addi	r2,r2,-128
  100d38:	e0bfd315 	stw	r2,-180(fp)
        if (opcount == 0) {
  100d3c:	e0bfd317 	ldw	r2,-180(fp)
  100d40:	1000041e 	bne	r2,zero,100d54 <tis_assemble_program+0x258>
            pc++;
  100d44:	e0bfcb17 	ldw	r2,-212(fp)
  100d48:	10800044 	addi	r2,r2,1
  100d4c:	e0bfcb15 	stw	r2,-212(fp)
            continue;
  100d50:	0000e006 	br	1010d4 <tis_assemble_program+0x5d8>
        }

        // Get <SRC>
        char *src = strtok_r(NULL, token_delimiter, &strtok_ptr);
  100d54:	e0fffc04 	addi	r3,fp,-16
  100d58:	e0bfd904 	addi	r2,fp,-156
  100d5c:	180d883a 	mov	r6,r3
  100d60:	100b883a 	mov	r5,r2
  100d64:	0009883a 	mov	r4,zero
  100d68:	01033240 	call	103324 <strtok_r>
  100d6c:	e0bfd415 	stw	r2,-176(fp)
        if (src == NULL) {
  100d70:	e0bfd417 	ldw	r2,-176(fp)
  100d74:	1000051e 	bne	r2,zero,100d8c <tis_assemble_program+0x290>
            puts("Missing <SRC> operand");
  100d78:	010004b4 	movhi	r4,18
  100d7c:	210dbd04 	addi	r4,r4,14068
  100d80:	0102ab40 	call	102ab4 <puts>
            return -1;
  100d84:	00bfffc4 	movi	r2,-1
  100d88:	00012306 	br	101218 <tis_assemble_program+0x71c>
        }

        // Check if <SRC> is register
        tis_reg_t src_reg = tis_register_encode(src);
  100d8c:	e13fd417 	ldw	r4,-176(fp)
  100d90:	01009800 	call	100980 <tis_register_encode>
  100d94:	e0bfd515 	stw	r2,-172(fp)
        if (opcode == JMP || opcode == JEZ || opcode == JGZ || opcode == JLZ || opcode == JNZ) {
  100d98:	e0bfd217 	ldw	r2,-184(fp)
  100d9c:	108001e0 	cmpeqi	r2,r2,7
  100da0:	10000c1e 	bne	r2,zero,100dd4 <tis_assemble_program+0x2d8>
  100da4:	e0bfd217 	ldw	r2,-184(fp)
  100da8:	10800220 	cmpeqi	r2,r2,8
  100dac:	1000091e 	bne	r2,zero,100dd4 <tis_assemble_program+0x2d8>
  100db0:	e0bfd217 	ldw	r2,-184(fp)
  100db4:	108002a0 	cmpeqi	r2,r2,10
  100db8:	1000061e 	bne	r2,zero,100dd4 <tis_assemble_program+0x2d8>
  100dbc:	e0bfd217 	ldw	r2,-184(fp)
  100dc0:	108002e0 	cmpeqi	r2,r2,11
  100dc4:	1000031e 	bne	r2,zero,100dd4 <tis_assemble_program+0x2d8>
  100dc8:	e0bfd217 	ldw	r2,-184(fp)
  100dcc:	10800258 	cmpnei	r2,r2,9
  100dd0:	1000091e 	bne	r2,zero,100df8 <tis_assemble_program+0x2fc>
            // Store label string for later linking
            labels_ref[pc] = src;
  100dd4:	e0bfcb17 	ldw	r2,-212(fp)
  100dd8:	1085883a 	add	r2,r2,r2
  100ddc:	1085883a 	add	r2,r2,r2
  100de0:	e13fcb04 	addi	r4,fp,-212
  100de4:	2085883a 	add	r2,r4,r2
  100de8:	10801f04 	addi	r2,r2,124
  100dec:	e0ffd417 	ldw	r3,-176(fp)
  100df0:	10c00015 	stw	r3,0(r2)
  100df4:	00007106 	br	100fbc <tis_assemble_program+0x4c0>
        } else if (src_reg != INVALID) {
  100df8:	e0bfd517 	ldw	r2,-172(fp)
  100dfc:	10bfffe0 	cmpeqi	r2,r2,-1
  100e00:	1000421e 	bne	r2,zero,100f0c <tis_assemble_program+0x410>
            // Place <SRC> in first 3 bits
            instructions[pc] &= ~register_mask;
  100e04:	e0bfcb17 	ldw	r2,-212(fp)
  100e08:	1085883a 	add	r2,r2,r2
  100e0c:	1007883a 	mov	r3,r2
  100e10:	e0bfff17 	ldw	r2,-4(fp)
  100e14:	10c7883a 	add	r3,r2,r3
  100e18:	e0bfcb17 	ldw	r2,-212(fp)
  100e1c:	1085883a 	add	r2,r2,r2
  100e20:	1009883a 	mov	r4,r2
  100e24:	e0bfff17 	ldw	r2,-4(fp)
  100e28:	1105883a 	add	r2,r2,r4
  100e2c:	1100000b 	ldhu	r4,0(r2)
  100e30:	00bffe04 	movi	r2,-8
  100e34:	2084703a 	and	r2,r4,r2
  100e38:	1880000d 	sth	r2,0(r3)
            instructions[pc] |= src_reg; 
  100e3c:	e0bfcb17 	ldw	r2,-212(fp)
  100e40:	1085883a 	add	r2,r2,r2
  100e44:	1007883a 	mov	r3,r2
  100e48:	e0bfff17 	ldw	r2,-4(fp)
  100e4c:	10c7883a 	add	r3,r2,r3
  100e50:	e0bfcb17 	ldw	r2,-212(fp)
  100e54:	1085883a 	add	r2,r2,r2
  100e58:	1009883a 	mov	r4,r2
  100e5c:	e0bfff17 	ldw	r2,-4(fp)
  100e60:	1105883a 	add	r2,r2,r4
  100e64:	1080000b 	ldhu	r2,0(r2)
  100e68:	1009883a 	mov	r4,r2
  100e6c:	e0bfd517 	ldw	r2,-172(fp)
  100e70:	2084b03a 	or	r2,r4,r2
  100e74:	1880000d 	sth	r2,0(r3)

            if (opcode == MOV) {
  100e78:	e0bfd217 	ldw	r2,-184(fp)
  100e7c:	10800058 	cmpnei	r2,r2,1
  100e80:	10000e1e 	bne	r2,zero,100ebc <tis_assemble_program+0x3c0>
            	instructions[pc] |= 0xC000;
  100e84:	e0bfcb17 	ldw	r2,-212(fp)
  100e88:	1085883a 	add	r2,r2,r2
  100e8c:	1007883a 	mov	r3,r2
  100e90:	e0bfff17 	ldw	r2,-4(fp)
  100e94:	10c7883a 	add	r3,r2,r3
  100e98:	e0bfcb17 	ldw	r2,-212(fp)
  100e9c:	1085883a 	add	r2,r2,r2
  100ea0:	1009883a 	mov	r4,r2
  100ea4:	e0bfff17 	ldw	r2,-4(fp)
  100ea8:	1105883a 	add	r2,r2,r4
  100eac:	1100000b 	ldhu	r4,0(r2)
  100eb0:	00b00004 	movi	r2,-16384
  100eb4:	2084b03a 	or	r2,r4,r2
  100eb8:	1880000d 	sth	r2,0(r3)
            }

            if (opcode == SUB || opcode == ADD) {
  100ebc:	e0bfd217 	ldw	r2,-184(fp)
  100ec0:	108000e0 	cmpeqi	r2,r2,3
  100ec4:	1000031e 	bne	r2,zero,100ed4 <tis_assemble_program+0x3d8>
  100ec8:	e0bfd217 	ldw	r2,-184(fp)
  100ecc:	10800098 	cmpnei	r2,r2,2
  100ed0:	10003a1e 	bne	r2,zero,100fbc <tis_assemble_program+0x4c0>
                instructions[pc] |= 0x800;
  100ed4:	e0bfcb17 	ldw	r2,-212(fp)
  100ed8:	1085883a 	add	r2,r2,r2
  100edc:	1007883a 	mov	r3,r2
  100ee0:	e0bfff17 	ldw	r2,-4(fp)
  100ee4:	10c7883a 	add	r3,r2,r3
  100ee8:	e0bfcb17 	ldw	r2,-212(fp)
  100eec:	1085883a 	add	r2,r2,r2
  100ef0:	1009883a 	mov	r4,r2
  100ef4:	e0bfff17 	ldw	r2,-4(fp)
  100ef8:	1105883a 	add	r2,r2,r4
  100efc:	1080000b 	ldhu	r2,0(r2)
  100f00:	10820014 	ori	r2,r2,2048
  100f04:	1880000d 	sth	r2,0(r3)
  100f08:	00002c06 	br	100fbc <tis_assemble_program+0x4c0>
            }
        } else {
            // Check if <SRC> is integer
            int integer;
            int result = sscanf(src, "%d", &integer);
  100f0c:	e0bffd04 	addi	r2,fp,-12
  100f10:	100d883a 	mov	r6,r2
  100f14:	014004b4 	movhi	r5,18
  100f18:	294dc304 	addi	r5,r5,14092
  100f1c:	e13fd417 	ldw	r4,-176(fp)
  100f20:	0102dd00 	call	102dd0 <sscanf>
  100f24:	e0bfd615 	stw	r2,-168(fp)
            if (result != 1) {
  100f28:	e0bfd617 	ldw	r2,-168(fp)
  100f2c:	10800060 	cmpeqi	r2,r2,1
  100f30:	1000061e 	bne	r2,zero,100f4c <tis_assemble_program+0x450>
                // Couldn't parse register nor number
                printf("Unable to parse <SRC> (%s)", src);
  100f34:	e17fd417 	ldw	r5,-176(fp)
  100f38:	010004b4 	movhi	r4,18
  100f3c:	210dc404 	addi	r4,r4,14096
  100f40:	01029b80 	call	1029b8 <printf>
                return -1;
  100f44:	00bfffc4 	movi	r2,-1
        // Check for maximum line length
        int line_len = strlen(line);
        if (line_len > 18) {
            puts("Line exceeded maximum length of 18 characters:");
            puts(line);
            return -1; 
  100f48:	0000b306 	br	101218 <tis_assemble_program+0x71c>
            if (result != 1) {
                // Couldn't parse register nor number
                printf("Unable to parse <SRC> (%s)", src);
                return -1;
            }
            if (opcode == MOV || opcode == SUB || opcode == ADD ) {
  100f4c:	e0bfd217 	ldw	r2,-184(fp)
  100f50:	10800060 	cmpeqi	r2,r2,1
  100f54:	1000061e 	bne	r2,zero,100f70 <tis_assemble_program+0x474>
  100f58:	e0bfd217 	ldw	r2,-184(fp)
  100f5c:	108000e0 	cmpeqi	r2,r2,3
  100f60:	1000031e 	bne	r2,zero,100f70 <tis_assemble_program+0x474>
  100f64:	e0bfd217 	ldw	r2,-184(fp)
  100f68:	10800098 	cmpnei	r2,r2,2
  100f6c:	1000131e 	bne	r2,zero,100fbc <tis_assemble_program+0x4c0>
                // Integer goes in first 11 bits.
                // Uses XOR to flip sign bit in case of SUB.
                instructions[pc] ^= tis_imm11_encode(integer);
  100f70:	e0bffd17 	ldw	r2,-12(fp)
  100f74:	1009883a 	mov	r4,r2
  100f78:	0100a980 	call	100a98 <tis_imm11_encode>
  100f7c:	100b883a 	mov	r5,r2
  100f80:	e0bfcb17 	ldw	r2,-212(fp)
  100f84:	1085883a 	add	r2,r2,r2
  100f88:	1007883a 	mov	r3,r2
  100f8c:	e0bfff17 	ldw	r2,-4(fp)
  100f90:	10c7883a 	add	r3,r2,r3
  100f94:	e0bfcb17 	ldw	r2,-212(fp)
  100f98:	1085883a 	add	r2,r2,r2
  100f9c:	1009883a 	mov	r4,r2
  100fa0:	e0bfff17 	ldw	r2,-4(fp)
  100fa4:	1105883a 	add	r2,r2,r4
  100fa8:	1080000b 	ldhu	r2,0(r2)
  100fac:	1009883a 	mov	r4,r2
  100fb0:	2805883a 	mov	r2,r5
  100fb4:	2084f03a 	xor	r2,r4,r2
  100fb8:	1880000d 	sth	r2,0(r3)
            }
        }

        // End if no further operands
        if (opcount == 1) {
  100fbc:	e0bfd317 	ldw	r2,-180(fp)
  100fc0:	10800058 	cmpnei	r2,r2,1
  100fc4:	1000041e 	bne	r2,zero,100fd8 <tis_assemble_program+0x4dc>
            pc++;
  100fc8:	e0bfcb17 	ldw	r2,-212(fp)
  100fcc:	10800044 	addi	r2,r2,1
  100fd0:	e0bfcb15 	stw	r2,-212(fp)
            continue;
  100fd4:	00003f06 	br	1010d4 <tis_assemble_program+0x5d8>
        }

        // Get <DST>
        char *dst = strtok_r(NULL, token_delimiter, &strtok_ptr);
  100fd8:	e0fffc04 	addi	r3,fp,-16
  100fdc:	e0bfd904 	addi	r2,fp,-156
  100fe0:	180d883a 	mov	r6,r3
  100fe4:	100b883a 	mov	r5,r2
  100fe8:	0009883a 	mov	r4,zero
  100fec:	01033240 	call	103324 <strtok_r>
  100ff0:	e0bfd715 	stw	r2,-164(fp)
        if (dst == NULL) {
  100ff4:	e0bfd717 	ldw	r2,-164(fp)
  100ff8:	1000051e 	bne	r2,zero,101010 <tis_assemble_program+0x514>
            puts("Missing <DST> operand");
  100ffc:	010004b4 	movhi	r4,18
  101000:	210dcb04 	addi	r4,r4,14124
  101004:	0102ab40 	call	102ab4 <puts>
            return -1;
  101008:	00bfffc4 	movi	r2,-1
  10100c:	00008206 	br	101218 <tis_assemble_program+0x71c>
        }

        // Check if <DST> is register
        tis_reg_t dst_reg = tis_register_encode(dst);
  101010:	e13fd717 	ldw	r4,-164(fp)
  101014:	01009800 	call	100980 <tis_register_encode>
  101018:	e0bfd815 	stw	r2,-160(fp)
        if (dst_reg != INVALID) {
  10101c:	e0bfd817 	ldw	r2,-160(fp)
  101020:	10bfffe0 	cmpeqi	r2,r2,-1
  101024:	1000221e 	bne	r2,zero,1010b0 <tis_assemble_program+0x5b4>
            // Place <DST> in bytes 13-11 
            instructions[pc] &= ~(register_mask<<11);
  101028:	e0bfcb17 	ldw	r2,-212(fp)
  10102c:	1085883a 	add	r2,r2,r2
  101030:	1007883a 	mov	r3,r2
  101034:	e0bfff17 	ldw	r2,-4(fp)
  101038:	10c7883a 	add	r3,r2,r3
  10103c:	e0bfcb17 	ldw	r2,-212(fp)
  101040:	1085883a 	add	r2,r2,r2
  101044:	1009883a 	mov	r4,r2
  101048:	e0bfff17 	ldw	r2,-4(fp)
  10104c:	1105883a 	add	r2,r2,r4
  101050:	1100000b 	ldhu	r4,0(r2)
  101054:	00b1ffc4 	movi	r2,-14337
  101058:	2084703a 	and	r2,r4,r2
  10105c:	1880000d 	sth	r2,0(r3)
            instructions[pc] |= dst_reg << 11; 
  101060:	e0bfcb17 	ldw	r2,-212(fp)
  101064:	1085883a 	add	r2,r2,r2
  101068:	1007883a 	mov	r3,r2
  10106c:	e0bfff17 	ldw	r2,-4(fp)
  101070:	10c7883a 	add	r3,r2,r3
  101074:	e0bfcb17 	ldw	r2,-212(fp)
  101078:	1085883a 	add	r2,r2,r2
  10107c:	1009883a 	mov	r4,r2
  101080:	e0bfff17 	ldw	r2,-4(fp)
  101084:	1105883a 	add	r2,r2,r4
  101088:	1080000b 	ldhu	r2,0(r2)
  10108c:	1009883a 	mov	r4,r2
  101090:	e0bfd817 	ldw	r2,-160(fp)
  101094:	100492fa 	slli	r2,r2,11
  101098:	2084b03a 	or	r2,r4,r2
  10109c:	1880000d 	sth	r2,0(r3)
            printf("Unable to parse <DST> (%s)", dst);
            return -1;
        }

        // Increase after every line
        pc++;
  1010a0:	e0bfcb17 	ldw	r2,-212(fp)
  1010a4:	10800044 	addi	r2,r2,1
  1010a8:	e0bfcb15 	stw	r2,-212(fp)
  1010ac:	00000906 	br	1010d4 <tis_assemble_program+0x5d8>
        if (dst_reg != INVALID) {
            // Place <DST> in bytes 13-11 
            instructions[pc] &= ~(register_mask<<11);
            instructions[pc] |= dst_reg << 11; 
        } else {
            printf("Unable to parse <DST> (%s)", dst);
  1010b0:	e17fd717 	ldw	r5,-164(fp)
  1010b4:	010004b4 	movhi	r4,18
  1010b8:	210dd104 	addi	r4,r4,14148
  1010bc:	01029b80 	call	1029b8 <printf>
            return -1;
  1010c0:	00bfffc4 	movi	r2,-1
  1010c4:	00005406 	br	101218 <tis_assemble_program+0x71c>
        char *strtok_ptr = NULL;
        char *token = strtok_r(line, token_delimiter, &strtok_ptr);

        // Check for empty line
        if (token == NULL) {
            continue;
  1010c8:	0001883a 	nop
  1010cc:	00000106 	br	1010d4 <tis_assemble_program+0x5d8>
            labels_pos[pc] = token;

            // Get next token
            token = strtok_r(NULL, token_delimiter, &strtok_ptr);
            if (token == NULL) {
                continue;
  1010d0:	0001883a 	nop
    char *line;
    // strtok_r pointer
    char *nextline = program;
    
    // Parse every line
    while ((line = strtok_r(nextline, "\n", &nextline)) != NULL) {
  1010d4:	e0bffa17 	ldw	r2,-24(fp)
  1010d8:	e0fffa04 	addi	r3,fp,-24
  1010dc:	180d883a 	mov	r6,r3
  1010e0:	014004b4 	movhi	r5,18
  1010e4:	294dd804 	addi	r5,r5,14176
  1010e8:	1009883a 	mov	r4,r2
  1010ec:	01033240 	call	103324 <strtok_r>
  1010f0:	e0bfcf15 	stw	r2,-196(fp)
  1010f4:	e0bfcf17 	ldw	r2,-196(fp)
  1010f8:	103e991e 	bne	r2,zero,100b60 <__alt_data_end+0xfffc0b60>
        // Increase after every line
        pc++;
    }

    // Link jump labels
    for (int ref_pc = 0; ref_pc < (sizeof(labels_ref) / sizeof(labels_ref[0])); ref_pc++) {
  1010fc:	e03fcd15 	stw	zero,-204(fp)
  101100:	00004106 	br	101208 <tis_assemble_program+0x70c>
        // Skip empty
        if (labels_ref[ref_pc] == NULL) {
  101104:	e0bfcd17 	ldw	r2,-204(fp)
  101108:	1085883a 	add	r2,r2,r2
  10110c:	1085883a 	add	r2,r2,r2
  101110:	e0ffcb04 	addi	r3,fp,-212
  101114:	1885883a 	add	r2,r3,r2
  101118:	10801f04 	addi	r2,r2,124
  10111c:	10800017 	ldw	r2,0(r2)
  101120:	10003526 	beq	r2,zero,1011f8 <tis_assemble_program+0x6fc>
            continue;
        }

        for (int pos_pc = 0; pos_pc < (sizeof(labels_pos) / sizeof(labels_pos[0])); pos_pc++) {
  101124:	e03fce15 	stw	zero,-200(fp)
  101128:	00002f06 	br	1011e8 <tis_assemble_program+0x6ec>
            // Skip empty
            if (labels_pos[pos_pc] == NULL) {
  10112c:	e0bfce17 	ldw	r2,-200(fp)
  101130:	1085883a 	add	r2,r2,r2
  101134:	1085883a 	add	r2,r2,r2
  101138:	e13fcb04 	addi	r4,fp,-212
  10113c:	2085883a 	add	r2,r4,r2
  101140:	10800f04 	addi	r2,r2,60
  101144:	10800017 	ldw	r2,0(r2)
  101148:	10002326 	beq	r2,zero,1011d8 <tis_assemble_program+0x6dc>
                continue;
            }

            // Check if labels match
            if (strcmp(labels_pos[pos_pc], labels_ref[ref_pc]) == 0) {
  10114c:	e0bfce17 	ldw	r2,-200(fp)
  101150:	1085883a 	add	r2,r2,r2
  101154:	1085883a 	add	r2,r2,r2
  101158:	e0ffcb04 	addi	r3,fp,-212
  10115c:	1885883a 	add	r2,r3,r2
  101160:	10800f04 	addi	r2,r2,60
  101164:	10c00017 	ldw	r3,0(r2)
  101168:	e0bfcd17 	ldw	r2,-204(fp)
  10116c:	1085883a 	add	r2,r2,r2
  101170:	1085883a 	add	r2,r2,r2
  101174:	e13fcb04 	addi	r4,fp,-212
  101178:	2085883a 	add	r2,r4,r2
  10117c:	10801f04 	addi	r2,r2,124
  101180:	10800017 	ldw	r2,0(r2)
  101184:	100b883a 	mov	r5,r2
  101188:	1809883a 	mov	r4,r3
  10118c:	01030840 	call	103084 <strcmp>
  101190:	1000121e 	bne	r2,zero,1011dc <tis_assemble_program+0x6e0>
                // Edit instruction referencing label
                instructions[ref_pc] |= pos_pc & imm6_mask;
  101194:	e0bfcd17 	ldw	r2,-204(fp)
  101198:	1085883a 	add	r2,r2,r2
  10119c:	1007883a 	mov	r3,r2
  1011a0:	e0bfff17 	ldw	r2,-4(fp)
  1011a4:	10c7883a 	add	r3,r2,r3
  1011a8:	e0bfcd17 	ldw	r2,-204(fp)
  1011ac:	1085883a 	add	r2,r2,r2
  1011b0:	1009883a 	mov	r4,r2
  1011b4:	e0bfff17 	ldw	r2,-4(fp)
  1011b8:	1105883a 	add	r2,r2,r4
  1011bc:	1080000b 	ldhu	r2,0(r2)
  1011c0:	1009883a 	mov	r4,r2
  1011c4:	e0bfce17 	ldw	r2,-200(fp)
  1011c8:	10800fcc 	andi	r2,r2,63
  1011cc:	2084b03a 	or	r2,r4,r2
  1011d0:	1880000d 	sth	r2,0(r3)
  1011d4:	00000106 	br	1011dc <tis_assemble_program+0x6e0>
        }

        for (int pos_pc = 0; pos_pc < (sizeof(labels_pos) / sizeof(labels_pos[0])); pos_pc++) {
            // Skip empty
            if (labels_pos[pos_pc] == NULL) {
                continue;
  1011d8:	0001883a 	nop
        // Skip empty
        if (labels_ref[ref_pc] == NULL) {
            continue;
        }

        for (int pos_pc = 0; pos_pc < (sizeof(labels_pos) / sizeof(labels_pos[0])); pos_pc++) {
  1011dc:	e0bfce17 	ldw	r2,-200(fp)
  1011e0:	10800044 	addi	r2,r2,1
  1011e4:	e0bfce15 	stw	r2,-200(fp)
  1011e8:	e0bfce17 	ldw	r2,-200(fp)
  1011ec:	10800430 	cmpltui	r2,r2,16
  1011f0:	103fce1e 	bne	r2,zero,10112c <__alt_data_end+0xfffc112c>
  1011f4:	00000106 	br	1011fc <tis_assemble_program+0x700>

    // Link jump labels
    for (int ref_pc = 0; ref_pc < (sizeof(labels_ref) / sizeof(labels_ref[0])); ref_pc++) {
        // Skip empty
        if (labels_ref[ref_pc] == NULL) {
            continue;
  1011f8:	0001883a 	nop
        // Increase after every line
        pc++;
    }

    // Link jump labels
    for (int ref_pc = 0; ref_pc < (sizeof(labels_ref) / sizeof(labels_ref[0])); ref_pc++) {
  1011fc:	e0bfcd17 	ldw	r2,-204(fp)
  101200:	10800044 	addi	r2,r2,1
  101204:	e0bfcd15 	stw	r2,-204(fp)
  101208:	e0bfcd17 	ldw	r2,-204(fp)
  10120c:	10800430 	cmpltui	r2,r2,16
  101210:	103fbc1e 	bne	r2,zero,101104 <__alt_data_end+0xfffc1104>
            } 
        }
    }
    
    // Number of instructions written
    return pc;
  101214:	e0bfcb17 	ldw	r2,-212(fp)
}
  101218:	e037883a 	mov	sp,fp
  10121c:	dfc00117 	ldw	ra,4(sp)
  101220:	df000017 	ldw	fp,0(sp)
  101224:	dec00204 	addi	sp,sp,8
  101228:	f800283a 	ret

0010122c <tis_disassembler_test>:

void tis_disassembler_test() {
  10122c:	deffe004 	addi	sp,sp,-128
  101230:	dfc01f15 	stw	ra,124(sp)
  101234:	df001e15 	stw	fp,120(sp)
  101238:	df001e04 	addi	fp,sp,120
    const uint16_t instructions_bin[] = {
  10123c:	e03fe30d 	sth	zero,-116(fp)
  101240:	00806944 	movi	r2,421
  101244:	e0bfe38d 	sth	r2,-114(fp)
  101248:	00816944 	movi	r2,1445
  10124c:	e0bfe40d 	sth	r2,-112(fp)
  101250:	00820184 	movi	r2,2054
  101254:	e0bfe48d 	sth	r2,-110(fp)
  101258:	00830004 	movi	r2,3072
  10125c:	e0bfe50d 	sth	r2,-108(fp)
  101260:	00a2ba04 	movi	r2,-29976
  101264:	e0bfe58d 	sth	r2,-106(fp)
  101268:	00a8d604 	movi	r2,-23720
  10126c:	e0bfe60d 	sth	r2,-104(fp)
  101270:	00ba0104 	movi	r2,-6140
  101274:	e0bfe68d 	sth	r2,-102(fp)
  101278:	00b60084 	movi	r2,-10238
  10127c:	e0bfe70d 	sth	r2,-100(fp)
  101280:	00920004 	movi	r2,18432
  101284:	e0bfe78d 	sth	r2,-98(fp)
  101288:	00940004 	movi	r2,20480
  10128c:	e0bfe80d 	sth	r2,-96(fp)
  101290:	00900004 	movi	r2,16384
  101294:	e0bfe88d 	sth	r2,-94(fp)
  101298:	00980044 	movi	r2,24577
  10129c:	e0bfe90d 	sth	r2,-92(fp)
        0x0C00, 0x8AE8, 0xA358, 0xE804, 
        0xD802, 0x4800, 0x5000, 0x4000, 
        0x6001, 
    };

    const char *instructions_str[] = {
  1012a0:	008004b4 	movhi	r2,18
  1012a4:	108d7804 	addi	r2,r2,13792
  1012a8:	e0bfea15 	stw	r2,-88(fp)
  1012ac:	008004b4 	movhi	r2,18
  1012b0:	108dd904 	addi	r2,r2,14180
  1012b4:	e0bfeb15 	stw	r2,-84(fp)
  1012b8:	008004b4 	movhi	r2,18
  1012bc:	108ddb04 	addi	r2,r2,14188
  1012c0:	e0bfec15 	stw	r2,-80(fp)
  1012c4:	008004b4 	movhi	r2,18
  1012c8:	108ddd04 	addi	r2,r2,14196
  1012cc:	e0bfed15 	stw	r2,-76(fp)
  1012d0:	008004b4 	movhi	r2,18
  1012d4:	108ddf04 	addi	r2,r2,14204
  1012d8:	e0bfee15 	stw	r2,-72(fp)
  1012dc:	008004b4 	movhi	r2,18
  1012e0:	108de104 	addi	r2,r2,14212
  1012e4:	e0bfef15 	stw	r2,-68(fp)
  1012e8:	008004b4 	movhi	r2,18
  1012ec:	108de504 	addi	r2,r2,14228
  1012f0:	e0bff015 	stw	r2,-64(fp)
  1012f4:	008004b4 	movhi	r2,18
  1012f8:	108de904 	addi	r2,r2,14244
  1012fc:	e0bff115 	stw	r2,-60(fp)
  101300:	008004b4 	movhi	r2,18
  101304:	108ded04 	addi	r2,r2,14260
  101308:	e0bff215 	stw	r2,-56(fp)
  10130c:	008004b4 	movhi	r2,18
  101310:	108d7e04 	addi	r2,r2,13816
  101314:	e0bff315 	stw	r2,-52(fp)
  101318:	008004b4 	movhi	r2,18
  10131c:	108d7c04 	addi	r2,r2,13808
  101320:	e0bff415 	stw	r2,-48(fp)
  101324:	008004b4 	movhi	r2,18
  101328:	108d7d04 	addi	r2,r2,13812
  10132c:	e0bff515 	stw	r2,-44(fp)
  101330:	008004b4 	movhi	r2,18
  101334:	108df104 	addi	r2,r2,14276
  101338:	e0bff615 	stw	r2,-40(fp)
  10133c:	008004b4 	movhi	r2,18
  101340:	108df304 	addi	r2,r2,14284
  101344:	e0bff715 	stw	r2,-36(fp)
        "SUB NIL",      "MOV 744, ACC", "MOV 856, LEFT", "MOV LEFT, RIGHT",
        "MOV UP, DOWN", "NEG",          "SWP",           "SAV",
        "JRO ACC",      "JEZ 0x0"
    };

    for (int i = 0; i < (sizeof(instructions_bin) / sizeof(instructions_bin[0])); i++) {
  101348:	e03fe215 	stw	zero,-120(fp)
  10134c:	00003006 	br	101410 <tis_disassembler_test+0x1e4>
        char result[32] = {0};
  101350:	e03ff815 	stw	zero,-32(fp)
  101354:	e03ff915 	stw	zero,-28(fp)
  101358:	e03ffa15 	stw	zero,-24(fp)
  10135c:	e03ffb15 	stw	zero,-20(fp)
  101360:	e03ffc15 	stw	zero,-16(fp)
  101364:	e03ffd15 	stw	zero,-12(fp)
  101368:	e03ffe15 	stw	zero,-8(fp)
  10136c:	e03fff15 	stw	zero,-4(fp)
        tis_dissassemble(instructions_bin[i], result);
  101370:	e0bfe217 	ldw	r2,-120(fp)
  101374:	1085883a 	add	r2,r2,r2
  101378:	e0ffe204 	addi	r3,fp,-120
  10137c:	1885883a 	add	r2,r3,r2
  101380:	10800104 	addi	r2,r2,4
  101384:	1080000b 	ldhu	r2,0(r2)
  101388:	10bfffcc 	andi	r2,r2,65535
  10138c:	e0fff804 	addi	r3,fp,-32
  101390:	180b883a 	mov	r5,r3
  101394:	1009883a 	mov	r4,r2
  101398:	01005800 	call	100580 <tis_dissassemble>

        if (strcmp(result, instructions_str[i])) {
  10139c:	e0bfe217 	ldw	r2,-120(fp)
  1013a0:	1085883a 	add	r2,r2,r2
  1013a4:	1085883a 	add	r2,r2,r2
  1013a8:	e0ffe204 	addi	r3,fp,-120
  1013ac:	1885883a 	add	r2,r3,r2
  1013b0:	10800804 	addi	r2,r2,32
  1013b4:	10c00017 	ldw	r3,0(r2)
  1013b8:	e0bff804 	addi	r2,fp,-32
  1013bc:	180b883a 	mov	r5,r3
  1013c0:	1009883a 	mov	r4,r2
  1013c4:	01030840 	call	103084 <strcmp>
  1013c8:	10000e26 	beq	r2,zero,101404 <tis_disassembler_test+0x1d8>
            printf("Failed at %d\nExpected: %s\nResult: %s\n", i, instructions_str[i], result);
  1013cc:	e0bfe217 	ldw	r2,-120(fp)
  1013d0:	1085883a 	add	r2,r2,r2
  1013d4:	1085883a 	add	r2,r2,r2
  1013d8:	e0ffe204 	addi	r3,fp,-120
  1013dc:	1885883a 	add	r2,r3,r2
  1013e0:	10800804 	addi	r2,r2,32
  1013e4:	10800017 	ldw	r2,0(r2)
  1013e8:	e0fff804 	addi	r3,fp,-32
  1013ec:	180f883a 	mov	r7,r3
  1013f0:	100d883a 	mov	r6,r2
  1013f4:	e17fe217 	ldw	r5,-120(fp)
  1013f8:	010004b4 	movhi	r4,18
  1013fc:	210df504 	addi	r4,r4,14292
  101400:	01029b80 	call	1029b8 <printf>
        "SUB NIL",      "MOV 744, ACC", "MOV 856, LEFT", "MOV LEFT, RIGHT",
        "MOV UP, DOWN", "NEG",          "SWP",           "SAV",
        "JRO ACC",      "JEZ 0x0"
    };

    for (int i = 0; i < (sizeof(instructions_bin) / sizeof(instructions_bin[0])); i++) {
  101404:	e0bfe217 	ldw	r2,-120(fp)
  101408:	10800044 	addi	r2,r2,1
  10140c:	e0bfe215 	stw	r2,-120(fp)
  101410:	e0bfe217 	ldw	r2,-120(fp)
  101414:	10800370 	cmpltui	r2,r2,13
  101418:	103fcd1e 	bne	r2,zero,101350 <__alt_data_end+0xfffc1350>

        if (strcmp(result, instructions_str[i])) {
            printf("Failed at %d\nExpected: %s\nResult: %s\n", i, instructions_str[i], result);
        }
    }
}
  10141c:	0001883a 	nop
  101420:	e037883a 	mov	sp,fp
  101424:	dfc00117 	ldw	ra,4(sp)
  101428:	df000017 	ldw	fp,0(sp)
  10142c:	dec00204 	addi	sp,sp,8
  101430:	f800283a 	ret

00101434 <tis_assembler_test>:

void tis_assembler_test() {
  101434:	defff204 	addi	sp,sp,-56
  101438:	dfc00d15 	stw	ra,52(sp)
  10143c:	df000c15 	stw	fp,48(sp)
  101440:	df000c04 	addi	fp,sp,48
	puts("Starting assembler test");
  101444:	010004b4 	movhi	r4,18
  101448:	210dff04 	addi	r4,r4,14332
  10144c:	0102ab40 	call	102ab4 <puts>

    char* assembly =
  101450:	008004b4 	movhi	r2,18
  101454:	108e0504 	addi	r2,r2,14356
  101458:	e0bff615 	stw	r2,-40(fp)
        "SUB NIL\n"
        "MOV 744, ACC\n"
        "JEZ TWO\n"
        "JRO ACC";

    uint16_t expected[] = {
  10145c:	e03ff80d 	sth	zero,-32(fp)
  101460:	00806944 	movi	r2,421
  101464:	e0bff88d 	sth	r2,-30(fp)
  101468:	00816944 	movi	r2,1445
  10146c:	e0bff90d 	sth	r2,-28(fp)
  101470:	00820184 	movi	r2,2054
  101474:	e0bff98d 	sth	r2,-26(fp)
  101478:	00830004 	movi	r2,3072
  10147c:	e0bffa0d 	sth	r2,-24(fp)
  101480:	00a2ba04 	movi	r2,-29976
  101484:	e0bffa8d 	sth	r2,-22(fp)
  101488:	009c1084 	movi	r2,28738
  10148c:	e0bffb0d 	sth	r2,-20(fp)
  101490:	00980044 	movi	r2,24577
  101494:	e0bffb8d 	sth	r2,-18(fp)
        0x0000, 0x01A5, 0x05A5, 0x0806, 0x0C00, 0x8AE8, 0x7042, 0x6001
    };

    uint16_t result[8];
    int count = tis_assemble_program(assembly, result);
  101498:	e0bffc04 	addi	r2,fp,-16
  10149c:	100b883a 	mov	r5,r2
  1014a0:	e13ff617 	ldw	r4,-40(fp)
  1014a4:	0100afc0 	call	100afc <tis_assemble_program>
  1014a8:	e0bff715 	stw	r2,-36(fp)

    printf("Encoded %d instructions\n", count);
  1014ac:	e17ff717 	ldw	r5,-36(fp)
  1014b0:	010004b4 	movhi	r4,18
  1014b4:	210e1a04 	addi	r4,r4,14440
  1014b8:	01029b80 	call	1029b8 <printf>

    int failures = 0;
  1014bc:	e03ff415 	stw	zero,-48(fp)
    for (int i = 0; i < (sizeof(expected)/sizeof(expected[0])); i++) {
  1014c0:	e03ff515 	stw	zero,-44(fp)
  1014c4:	00002906 	br	10156c <tis_assembler_test+0x138>
        if (expected[i] != result[i]) {
  1014c8:	e0bff517 	ldw	r2,-44(fp)
  1014cc:	1085883a 	add	r2,r2,r2
  1014d0:	e0fff404 	addi	r3,fp,-48
  1014d4:	1885883a 	add	r2,r3,r2
  1014d8:	10800404 	addi	r2,r2,16
  1014dc:	10c0000b 	ldhu	r3,0(r2)
  1014e0:	e0bff517 	ldw	r2,-44(fp)
  1014e4:	1085883a 	add	r2,r2,r2
  1014e8:	e13ff404 	addi	r4,fp,-48
  1014ec:	2085883a 	add	r2,r4,r2
  1014f0:	10800804 	addi	r2,r2,32
  1014f4:	1080000b 	ldhu	r2,0(r2)
  1014f8:	18ffffcc 	andi	r3,r3,65535
  1014fc:	10bfffcc 	andi	r2,r2,65535
  101500:	18801726 	beq	r3,r2,101560 <tis_assembler_test+0x12c>
            printf("Failed at %d\nExpected: %X\nResult: %X\n", i, expected[i], result[i]);
  101504:	e0bff517 	ldw	r2,-44(fp)
  101508:	1085883a 	add	r2,r2,r2
  10150c:	e0fff404 	addi	r3,fp,-48
  101510:	1885883a 	add	r2,r3,r2
  101514:	10800404 	addi	r2,r2,16
  101518:	1080000b 	ldhu	r2,0(r2)
  10151c:	10ffffcc 	andi	r3,r2,65535
  101520:	e0bff517 	ldw	r2,-44(fp)
  101524:	1085883a 	add	r2,r2,r2
  101528:	e13ff404 	addi	r4,fp,-48
  10152c:	2085883a 	add	r2,r4,r2
  101530:	10800804 	addi	r2,r2,32
  101534:	1080000b 	ldhu	r2,0(r2)
  101538:	10bfffcc 	andi	r2,r2,65535
  10153c:	100f883a 	mov	r7,r2
  101540:	180d883a 	mov	r6,r3
  101544:	e17ff517 	ldw	r5,-44(fp)
  101548:	010004b4 	movhi	r4,18
  10154c:	210e2104 	addi	r4,r4,14468
  101550:	01029b80 	call	1029b8 <printf>
            failures++;
  101554:	e0bff417 	ldw	r2,-48(fp)
  101558:	10800044 	addi	r2,r2,1
  10155c:	e0bff415 	stw	r2,-48(fp)
    int count = tis_assemble_program(assembly, result);

    printf("Encoded %d instructions\n", count);

    int failures = 0;
    for (int i = 0; i < (sizeof(expected)/sizeof(expected[0])); i++) {
  101560:	e0bff517 	ldw	r2,-44(fp)
  101564:	10800044 	addi	r2,r2,1
  101568:	e0bff515 	stw	r2,-44(fp)
  10156c:	e0bff517 	ldw	r2,-44(fp)
  101570:	10800230 	cmpltui	r2,r2,8
  101574:	103fd41e 	bne	r2,zero,1014c8 <__alt_data_end+0xfffc14c8>
        if (expected[i] != result[i]) {
            printf("Failed at %d\nExpected: %X\nResult: %X\n", i, expected[i], result[i]);
            failures++;
        }
    }
    if (failures) {
  101578:	e0bff417 	ldw	r2,-48(fp)
  10157c:	10000526 	beq	r2,zero,101594 <tis_assembler_test+0x160>
        printf("Found %d failures", failures);
  101580:	e17ff417 	ldw	r5,-48(fp)
  101584:	010004b4 	movhi	r4,18
  101588:	210e2b04 	addi	r4,r4,14508
  10158c:	01029b80 	call	1029b8 <printf>
    } else {
        puts("Assembler success! :)");
    }
}
  101590:	00000306 	br	1015a0 <tis_assembler_test+0x16c>
        }
    }
    if (failures) {
        printf("Found %d failures", failures);
    } else {
        puts("Assembler success! :)");
  101594:	010004b4 	movhi	r4,18
  101598:	210e3004 	addi	r4,r4,14528
  10159c:	0102ab40 	call	102ab4 <puts>
    }
}
  1015a0:	0001883a 	nop
  1015a4:	e037883a 	mov	sp,fp
  1015a8:	dfc00117 	ldw	ra,4(sp)
  1015ac:	df000017 	ldw	fp,0(sp)
  1015b0:	dec00204 	addi	sp,sp,8
  1015b4:	f800283a 	ret

001015b8 <configure_node>:
#include <stdio.h>

#include "tis_node.h"
#include "tis_asm.h"

struct tis_node* configure_node(void* base, const uint16_t instructions[], char instruction_count) {
  1015b8:	defffa04 	addi	sp,sp,-24
  1015bc:	df000515 	stw	fp,20(sp)
  1015c0:	df000504 	addi	fp,sp,20
  1015c4:	e13ffd15 	stw	r4,-12(fp)
  1015c8:	e17ffe15 	stw	r5,-8(fp)
  1015cc:	3005883a 	mov	r2,r6
  1015d0:	e0bfff05 	stb	r2,-4(fp)
    struct tis_node *node = (struct tis_node*) base;
  1015d4:	e0bffd17 	ldw	r2,-12(fp)
  1015d8:	e0bffc15 	stw	r2,-16(fp)

    node->config = instruction_count & 0xF;
  1015dc:	e0bfff03 	ldbu	r2,-4(fp)
  1015e0:	10803fcc 	andi	r2,r2,255
  1015e4:	108003cc 	andi	r2,r2,15
  1015e8:	1007883a 	mov	r3,r2
  1015ec:	e0bffc17 	ldw	r2,-16(fp)
  1015f0:	10c0000d 	sth	r3,0(r2)

    if (instruction_count > 15) {
  1015f4:	e0bfff07 	ldb	r2,-4(fp)
  1015f8:	10800410 	cmplti	r2,r2,16
  1015fc:	1000021e 	bne	r2,zero,101608 <configure_node+0x50>
        return (struct tis_node*)0;
  101600:	0005883a 	mov	r2,zero
  101604:	00001506 	br	10165c <configure_node+0xa4>
    }

    for (int i = 0; i < instruction_count; i++) {
  101608:	e03ffb15 	stw	zero,-20(fp)
  10160c:	00000f06 	br	10164c <configure_node+0x94>
        node->instructions[i] = instructions[i];
  101610:	e0bffb17 	ldw	r2,-20(fp)
  101614:	1085883a 	add	r2,r2,r2
  101618:	1007883a 	mov	r3,r2
  10161c:	e0bffe17 	ldw	r2,-8(fp)
  101620:	10c5883a 	add	r2,r2,r3
  101624:	10c0000b 	ldhu	r3,0(r2)
  101628:	e13ffc17 	ldw	r4,-16(fp)
  10162c:	e0bffb17 	ldw	r2,-20(fp)
  101630:	1085883a 	add	r2,r2,r2
  101634:	2085883a 	add	r2,r4,r2
  101638:	10800084 	addi	r2,r2,2
  10163c:	10c0000d 	sth	r3,0(r2)

    if (instruction_count > 15) {
        return (struct tis_node*)0;
    }

    for (int i = 0; i < instruction_count; i++) {
  101640:	e0bffb17 	ldw	r2,-20(fp)
  101644:	10800044 	addi	r2,r2,1
  101648:	e0bffb15 	stw	r2,-20(fp)
  10164c:	e0bfff07 	ldb	r2,-4(fp)
  101650:	e0fffb17 	ldw	r3,-20(fp)
  101654:	18bfee16 	blt	r3,r2,101610 <__alt_data_end+0xfffc1610>
        node->instructions[i] = instructions[i];
    }

    return node;
  101658:	e0bffc17 	ldw	r2,-16(fp)
}
  10165c:	e037883a 	mov	sp,fp
  101660:	df000017 	ldw	fp,0(sp)
  101664:	dec00104 	addi	sp,sp,4
  101668:	f800283a 	ret

0010166c <node_info>:

int node_info(struct tis_node* node, char buffer[]) {
  10166c:	defff904 	addi	sp,sp,-28
  101670:	dfc00615 	stw	ra,24(sp)
  101674:	df000515 	stw	fp,20(sp)
  101678:	df000504 	addi	fp,sp,20
  10167c:	e13ffe15 	stw	r4,-8(fp)
  101680:	e17fff15 	stw	r5,-4(fp)
    char instruction_count = node->config & 0xF;
  101684:	e0bffe17 	ldw	r2,-8(fp)
  101688:	1080000b 	ldhu	r2,0(r2)
  10168c:	108003cc 	andi	r2,r2,15
  101690:	e0bffd05 	stb	r2,-12(fp)

    if (!instruction_count) {
  101694:	e0bffd07 	ldb	r2,-12(fp)
  101698:	10000b1e 	bne	r2,zero,1016c8 <node_info+0x5c>
        return sprintf(buffer, "Node unconfigured\n");
  10169c:	e0ffff17 	ldw	r3,-4(fp)
  1016a0:	008004b4 	movhi	r2,18
  1016a4:	108e3604 	addi	r2,r2,14552
  1016a8:	1009883a 	mov	r4,r2
  1016ac:	008004c4 	movi	r2,19
  1016b0:	100d883a 	mov	r6,r2
  1016b4:	200b883a 	mov	r5,r4
  1016b8:	1809883a 	mov	r4,r3
  1016bc:	01027180 	call	102718 <memcpy>
  1016c0:	00800484 	movi	r2,18
  1016c4:	00002d06 	br	10177c <node_info+0x110>
    }

    int ptr_offset = 0;
  1016c8:	e03ffb15 	stw	zero,-20(fp)

    ptr_offset += sprintf(buffer, "%d instruction(s):\n", instruction_count);
  1016cc:	e0bffd07 	ldb	r2,-12(fp)
  1016d0:	100d883a 	mov	r6,r2
  1016d4:	014004b4 	movhi	r5,18
  1016d8:	294e3b04 	addi	r5,r5,14572
  1016dc:	e13fff17 	ldw	r4,-4(fp)
  1016e0:	0102d640 	call	102d64 <sprintf>
  1016e4:	1007883a 	mov	r3,r2
  1016e8:	e0bffb17 	ldw	r2,-20(fp)
  1016ec:	10c5883a 	add	r2,r2,r3
  1016f0:	e0bffb15 	stw	r2,-20(fp)

    for (int i = 0; i < instruction_count; i++) {
  1016f4:	e03ffc15 	stw	zero,-16(fp)
  1016f8:	00001c06 	br	10176c <node_info+0x100>
        uint16_t instruction = node->instructions[i];
  1016fc:	e0fffe17 	ldw	r3,-8(fp)
  101700:	e0bffc17 	ldw	r2,-16(fp)
  101704:	1085883a 	add	r2,r2,r2
  101708:	1885883a 	add	r2,r3,r2
  10170c:	10800084 	addi	r2,r2,2
  101710:	1080000b 	ldhu	r2,0(r2)
  101714:	e0bffd8d 	sth	r2,-10(fp)
        ptr_offset += tis_dissassemble(instruction, &buffer[ptr_offset]);
  101718:	e13ffd8b 	ldhu	r4,-10(fp)
  10171c:	e0bffb17 	ldw	r2,-20(fp)
  101720:	e0ffff17 	ldw	r3,-4(fp)
  101724:	1885883a 	add	r2,r3,r2
  101728:	100b883a 	mov	r5,r2
  10172c:	01005800 	call	100580 <tis_dissassemble>
  101730:	1007883a 	mov	r3,r2
  101734:	e0bffb17 	ldw	r2,-20(fp)
  101738:	10c5883a 	add	r2,r2,r3
  10173c:	e0bffb15 	stw	r2,-20(fp)
        buffer[ptr_offset] = '\n';
  101740:	e0bffb17 	ldw	r2,-20(fp)
  101744:	e0ffff17 	ldw	r3,-4(fp)
  101748:	1885883a 	add	r2,r3,r2
  10174c:	00c00284 	movi	r3,10
  101750:	10c00005 	stb	r3,0(r2)
        ptr_offset += 1;
  101754:	e0bffb17 	ldw	r2,-20(fp)
  101758:	10800044 	addi	r2,r2,1
  10175c:	e0bffb15 	stw	r2,-20(fp)

    int ptr_offset = 0;

    ptr_offset += sprintf(buffer, "%d instruction(s):\n", instruction_count);

    for (int i = 0; i < instruction_count; i++) {
  101760:	e0bffc17 	ldw	r2,-16(fp)
  101764:	10800044 	addi	r2,r2,1
  101768:	e0bffc15 	stw	r2,-16(fp)
  10176c:	e0bffd07 	ldb	r2,-12(fp)
  101770:	e0fffc17 	ldw	r3,-16(fp)
  101774:	18bfe116 	blt	r3,r2,1016fc <__alt_data_end+0xfffc16fc>
        uint16_t instruction = node->instructions[i];
        ptr_offset += tis_dissassemble(instruction, &buffer[ptr_offset]);
        buffer[ptr_offset] = '\n';
        ptr_offset += 1;
    }
    return ptr_offset;
  101778:	e0bffb17 	ldw	r2,-20(fp)
}
  10177c:	e037883a 	mov	sp,fp
  101780:	dfc00117 	ldw	ra,4(sp)
  101784:	df000017 	ldw	fp,0(sp)
  101788:	dec00204 	addi	sp,sp,8
  10178c:	f800283a 	ret

00101790 <_fgets_r>:
  101790:	00c00044 	movi	r3,1
  101794:	19804d0e 	bge	r3,r6,1018cc <_fgets_r+0x13c>
  101798:	defff804 	addi	sp,sp,-32
  10179c:	dd000415 	stw	r20,16(sp)
  1017a0:	dcc00315 	stw	r19,12(sp)
  1017a4:	dc800215 	stw	r18,8(sp)
  1017a8:	dc400115 	stw	r17,4(sp)
  1017ac:	dfc00715 	stw	ra,28(sp)
  1017b0:	dd800615 	stw	r22,24(sp)
  1017b4:	dd400515 	stw	r21,20(sp)
  1017b8:	dc000015 	stw	r16,0(sp)
  1017bc:	2027883a 	mov	r19,r4
  1017c0:	3823883a 	mov	r17,r7
  1017c4:	2829883a 	mov	r20,r5
  1017c8:	3025883a 	mov	r18,r6
  1017cc:	20000226 	beq	r4,zero,1017d8 <_fgets_r+0x48>
  1017d0:	20800e17 	ldw	r2,56(r4)
  1017d4:	10003926 	beq	r2,zero,1018bc <_fgets_r+0x12c>
  1017d8:	94bfffc4 	addi	r18,r18,-1
  1017dc:	a02b883a 	mov	r21,r20
  1017e0:	00001506 	br	101838 <_fgets_r+0xa8>
  1017e4:	01400284 	movi	r5,10
  1017e8:	8d800017 	ldw	r22,0(r17)
  1017ec:	9400012e 	bgeu	r18,r16,1017f4 <_fgets_r+0x64>
  1017f0:	9021883a 	mov	r16,r18
  1017f4:	800d883a 	mov	r6,r16
  1017f8:	b009883a 	mov	r4,r22
  1017fc:	01026340 	call	102634 <memchr>
  101800:	a809883a 	mov	r4,r21
  101804:	800d883a 	mov	r6,r16
  101808:	b00b883a 	mov	r5,r22
  10180c:	9425c83a 	sub	r18,r18,r16
  101810:	10001e1e 	bne	r2,zero,10188c <_fgets_r+0xfc>
  101814:	88800117 	ldw	r2,4(r17)
  101818:	88c00017 	ldw	r3,0(r17)
  10181c:	ac2b883a 	add	r21,r21,r16
  101820:	1405c83a 	sub	r2,r2,r16
  101824:	1c21883a 	add	r16,r3,r16
  101828:	88800115 	stw	r2,4(r17)
  10182c:	8c000015 	stw	r16,0(r17)
  101830:	01027180 	call	102718 <memcpy>
  101834:	90000926 	beq	r18,zero,10185c <_fgets_r+0xcc>
  101838:	8c000117 	ldw	r16,4(r17)
  10183c:	803fe91e 	bne	r16,zero,1017e4 <__alt_data_end+0xfffc17e4>
  101840:	880b883a 	mov	r5,r17
  101844:	9809883a 	mov	r4,r19
  101848:	0102ae40 	call	102ae4 <__srefill_r>
  10184c:	1000021e 	bne	r2,zero,101858 <_fgets_r+0xc8>
  101850:	8c000117 	ldw	r16,4(r17)
  101854:	003fe306 	br	1017e4 <__alt_data_end+0xfffc17e4>
  101858:	ad001a26 	beq	r21,r20,1018c4 <_fgets_r+0x134>
  10185c:	a8000005 	stb	zero,0(r21)
  101860:	a005883a 	mov	r2,r20
  101864:	dfc00717 	ldw	ra,28(sp)
  101868:	dd800617 	ldw	r22,24(sp)
  10186c:	dd400517 	ldw	r21,20(sp)
  101870:	dd000417 	ldw	r20,16(sp)
  101874:	dcc00317 	ldw	r19,12(sp)
  101878:	dc800217 	ldw	r18,8(sp)
  10187c:	dc400117 	ldw	r17,4(sp)
  101880:	dc000017 	ldw	r16,0(sp)
  101884:	dec00804 	addi	sp,sp,32
  101888:	f800283a 	ret
  10188c:	88c00117 	ldw	r3,4(r17)
  101890:	10800044 	addi	r2,r2,1
  101894:	15a1c83a 	sub	r16,r2,r22
  101898:	1c07c83a 	sub	r3,r3,r16
  10189c:	88c00115 	stw	r3,4(r17)
  1018a0:	88800015 	stw	r2,0(r17)
  1018a4:	800d883a 	mov	r6,r16
  1018a8:	01027180 	call	102718 <memcpy>
  1018ac:	ac2b883a 	add	r21,r21,r16
  1018b0:	a8000005 	stb	zero,0(r21)
  1018b4:	a005883a 	mov	r2,r20
  1018b8:	003fea06 	br	101864 <__alt_data_end+0xfffc1864>
  1018bc:	0101c500 	call	101c50 <__sinit>
  1018c0:	003fc506 	br	1017d8 <__alt_data_end+0xfffc17d8>
  1018c4:	0005883a 	mov	r2,zero
  1018c8:	003fe606 	br	101864 <__alt_data_end+0xfffc1864>
  1018cc:	0005883a 	mov	r2,zero
  1018d0:	f800283a 	ret

001018d4 <fgets>:
  1018d4:	008004b4 	movhi	r2,18
  1018d8:	10972d04 	addi	r2,r2,23732
  1018dc:	300f883a 	mov	r7,r6
  1018e0:	280d883a 	mov	r6,r5
  1018e4:	200b883a 	mov	r5,r4
  1018e8:	11000017 	ldw	r4,0(r2)
  1018ec:	01017901 	jmpi	101790 <_fgets_r>

001018f0 <__fp_unlock>:
  1018f0:	0005883a 	mov	r2,zero
  1018f4:	f800283a 	ret

001018f8 <_cleanup_r>:
  1018f8:	01400474 	movhi	r5,17
  1018fc:	296b7804 	addi	r5,r5,-21024
  101900:	0101d641 	jmpi	101d64 <_fwalk_reent>

00101904 <__sinit.part.1>:
  101904:	defff704 	addi	sp,sp,-36
  101908:	00c00434 	movhi	r3,16
  10190c:	dfc00815 	stw	ra,32(sp)
  101910:	ddc00715 	stw	r23,28(sp)
  101914:	dd800615 	stw	r22,24(sp)
  101918:	dd400515 	stw	r21,20(sp)
  10191c:	dd000415 	stw	r20,16(sp)
  101920:	dcc00315 	stw	r19,12(sp)
  101924:	dc800215 	stw	r18,8(sp)
  101928:	dc400115 	stw	r17,4(sp)
  10192c:	dc000015 	stw	r16,0(sp)
  101930:	18c63e04 	addi	r3,r3,6392
  101934:	24000117 	ldw	r16,4(r4)
  101938:	20c00f15 	stw	r3,60(r4)
  10193c:	2080bb04 	addi	r2,r4,748
  101940:	00c000c4 	movi	r3,3
  101944:	20c0b915 	stw	r3,740(r4)
  101948:	2080ba15 	stw	r2,744(r4)
  10194c:	2000b815 	stw	zero,736(r4)
  101950:	05c00204 	movi	r23,8
  101954:	00800104 	movi	r2,4
  101958:	2025883a 	mov	r18,r4
  10195c:	b80d883a 	mov	r6,r23
  101960:	81001704 	addi	r4,r16,92
  101964:	000b883a 	mov	r5,zero
  101968:	80000015 	stw	zero,0(r16)
  10196c:	80000115 	stw	zero,4(r16)
  101970:	80000215 	stw	zero,8(r16)
  101974:	8080030d 	sth	r2,12(r16)
  101978:	80001915 	stw	zero,100(r16)
  10197c:	8000038d 	sth	zero,14(r16)
  101980:	80000415 	stw	zero,16(r16)
  101984:	80000515 	stw	zero,20(r16)
  101988:	80000615 	stw	zero,24(r16)
  10198c:	01028600 	call	102860 <memset>
  101990:	05800434 	movhi	r22,16
  101994:	94400217 	ldw	r17,8(r18)
  101998:	05400434 	movhi	r21,16
  10199c:	05000434 	movhi	r20,16
  1019a0:	04c00434 	movhi	r19,16
  1019a4:	b58bb104 	addi	r22,r22,11972
  1019a8:	ad4bc804 	addi	r21,r21,12064
  1019ac:	a50be704 	addi	r20,r20,12188
  1019b0:	9ccbfe04 	addi	r19,r19,12280
  1019b4:	85800815 	stw	r22,32(r16)
  1019b8:	85400915 	stw	r21,36(r16)
  1019bc:	85000a15 	stw	r20,40(r16)
  1019c0:	84c00b15 	stw	r19,44(r16)
  1019c4:	84000715 	stw	r16,28(r16)
  1019c8:	00800284 	movi	r2,10
  1019cc:	8880030d 	sth	r2,12(r17)
  1019d0:	00800044 	movi	r2,1
  1019d4:	b80d883a 	mov	r6,r23
  1019d8:	89001704 	addi	r4,r17,92
  1019dc:	000b883a 	mov	r5,zero
  1019e0:	88000015 	stw	zero,0(r17)
  1019e4:	88000115 	stw	zero,4(r17)
  1019e8:	88000215 	stw	zero,8(r17)
  1019ec:	88001915 	stw	zero,100(r17)
  1019f0:	8880038d 	sth	r2,14(r17)
  1019f4:	88000415 	stw	zero,16(r17)
  1019f8:	88000515 	stw	zero,20(r17)
  1019fc:	88000615 	stw	zero,24(r17)
  101a00:	01028600 	call	102860 <memset>
  101a04:	94000317 	ldw	r16,12(r18)
  101a08:	00800484 	movi	r2,18
  101a0c:	8c400715 	stw	r17,28(r17)
  101a10:	8d800815 	stw	r22,32(r17)
  101a14:	8d400915 	stw	r21,36(r17)
  101a18:	8d000a15 	stw	r20,40(r17)
  101a1c:	8cc00b15 	stw	r19,44(r17)
  101a20:	8080030d 	sth	r2,12(r16)
  101a24:	00800084 	movi	r2,2
  101a28:	80000015 	stw	zero,0(r16)
  101a2c:	80000115 	stw	zero,4(r16)
  101a30:	80000215 	stw	zero,8(r16)
  101a34:	80001915 	stw	zero,100(r16)
  101a38:	8080038d 	sth	r2,14(r16)
  101a3c:	80000415 	stw	zero,16(r16)
  101a40:	80000515 	stw	zero,20(r16)
  101a44:	80000615 	stw	zero,24(r16)
  101a48:	b80d883a 	mov	r6,r23
  101a4c:	000b883a 	mov	r5,zero
  101a50:	81001704 	addi	r4,r16,92
  101a54:	01028600 	call	102860 <memset>
  101a58:	00800044 	movi	r2,1
  101a5c:	84000715 	stw	r16,28(r16)
  101a60:	85800815 	stw	r22,32(r16)
  101a64:	85400915 	stw	r21,36(r16)
  101a68:	85000a15 	stw	r20,40(r16)
  101a6c:	84c00b15 	stw	r19,44(r16)
  101a70:	90800e15 	stw	r2,56(r18)
  101a74:	dfc00817 	ldw	ra,32(sp)
  101a78:	ddc00717 	ldw	r23,28(sp)
  101a7c:	dd800617 	ldw	r22,24(sp)
  101a80:	dd400517 	ldw	r21,20(sp)
  101a84:	dd000417 	ldw	r20,16(sp)
  101a88:	dcc00317 	ldw	r19,12(sp)
  101a8c:	dc800217 	ldw	r18,8(sp)
  101a90:	dc400117 	ldw	r17,4(sp)
  101a94:	dc000017 	ldw	r16,0(sp)
  101a98:	dec00904 	addi	sp,sp,36
  101a9c:	f800283a 	ret

00101aa0 <__fp_lock>:
  101aa0:	0005883a 	mov	r2,zero
  101aa4:	f800283a 	ret

00101aa8 <__sfmoreglue>:
  101aa8:	defffc04 	addi	sp,sp,-16
  101aac:	dc800215 	stw	r18,8(sp)
  101ab0:	2825883a 	mov	r18,r5
  101ab4:	dc000015 	stw	r16,0(sp)
  101ab8:	01401a04 	movi	r5,104
  101abc:	2021883a 	mov	r16,r4
  101ac0:	913fffc4 	addi	r4,r18,-1
  101ac4:	dfc00315 	stw	ra,12(sp)
  101ac8:	dc400115 	stw	r17,4(sp)
  101acc:	01160740 	call	116074 <__mulsi3>
  101ad0:	8009883a 	mov	r4,r16
  101ad4:	11401d04 	addi	r5,r2,116
  101ad8:	1023883a 	mov	r17,r2
  101adc:	0101e280 	call	101e28 <_malloc_r>
  101ae0:	1021883a 	mov	r16,r2
  101ae4:	10000726 	beq	r2,zero,101b04 <__sfmoreglue+0x5c>
  101ae8:	11000304 	addi	r4,r2,12
  101aec:	10000015 	stw	zero,0(r2)
  101af0:	14800115 	stw	r18,4(r2)
  101af4:	11000215 	stw	r4,8(r2)
  101af8:	89801a04 	addi	r6,r17,104
  101afc:	000b883a 	mov	r5,zero
  101b00:	01028600 	call	102860 <memset>
  101b04:	8005883a 	mov	r2,r16
  101b08:	dfc00317 	ldw	ra,12(sp)
  101b0c:	dc800217 	ldw	r18,8(sp)
  101b10:	dc400117 	ldw	r17,4(sp)
  101b14:	dc000017 	ldw	r16,0(sp)
  101b18:	dec00404 	addi	sp,sp,16
  101b1c:	f800283a 	ret

00101b20 <__sfp>:
  101b20:	defffb04 	addi	sp,sp,-20
  101b24:	dc000015 	stw	r16,0(sp)
  101b28:	040004b4 	movhi	r16,18
  101b2c:	84172c04 	addi	r16,r16,23728
  101b30:	dcc00315 	stw	r19,12(sp)
  101b34:	2027883a 	mov	r19,r4
  101b38:	81000017 	ldw	r4,0(r16)
  101b3c:	dfc00415 	stw	ra,16(sp)
  101b40:	dc800215 	stw	r18,8(sp)
  101b44:	20800e17 	ldw	r2,56(r4)
  101b48:	dc400115 	stw	r17,4(sp)
  101b4c:	1000021e 	bne	r2,zero,101b58 <__sfp+0x38>
  101b50:	01019040 	call	101904 <__sinit.part.1>
  101b54:	81000017 	ldw	r4,0(r16)
  101b58:	2480b804 	addi	r18,r4,736
  101b5c:	047fffc4 	movi	r17,-1
  101b60:	91000117 	ldw	r4,4(r18)
  101b64:	94000217 	ldw	r16,8(r18)
  101b68:	213fffc4 	addi	r4,r4,-1
  101b6c:	20000a16 	blt	r4,zero,101b98 <__sfp+0x78>
  101b70:	8080030f 	ldh	r2,12(r16)
  101b74:	10000c26 	beq	r2,zero,101ba8 <__sfp+0x88>
  101b78:	80c01d04 	addi	r3,r16,116
  101b7c:	00000206 	br	101b88 <__sfp+0x68>
  101b80:	18bfe60f 	ldh	r2,-104(r3)
  101b84:	10000826 	beq	r2,zero,101ba8 <__sfp+0x88>
  101b88:	213fffc4 	addi	r4,r4,-1
  101b8c:	1c3ffd04 	addi	r16,r3,-12
  101b90:	18c01a04 	addi	r3,r3,104
  101b94:	247ffa1e 	bne	r4,r17,101b80 <__alt_data_end+0xfffc1b80>
  101b98:	90800017 	ldw	r2,0(r18)
  101b9c:	10001d26 	beq	r2,zero,101c14 <__sfp+0xf4>
  101ba0:	1025883a 	mov	r18,r2
  101ba4:	003fee06 	br	101b60 <__alt_data_end+0xfffc1b60>
  101ba8:	00bfffc4 	movi	r2,-1
  101bac:	8080038d 	sth	r2,14(r16)
  101bb0:	00800044 	movi	r2,1
  101bb4:	8080030d 	sth	r2,12(r16)
  101bb8:	80001915 	stw	zero,100(r16)
  101bbc:	80000015 	stw	zero,0(r16)
  101bc0:	80000215 	stw	zero,8(r16)
  101bc4:	80000115 	stw	zero,4(r16)
  101bc8:	80000415 	stw	zero,16(r16)
  101bcc:	80000515 	stw	zero,20(r16)
  101bd0:	80000615 	stw	zero,24(r16)
  101bd4:	01800204 	movi	r6,8
  101bd8:	000b883a 	mov	r5,zero
  101bdc:	81001704 	addi	r4,r16,92
  101be0:	01028600 	call	102860 <memset>
  101be4:	8005883a 	mov	r2,r16
  101be8:	80000c15 	stw	zero,48(r16)
  101bec:	80000d15 	stw	zero,52(r16)
  101bf0:	80001115 	stw	zero,68(r16)
  101bf4:	80001215 	stw	zero,72(r16)
  101bf8:	dfc00417 	ldw	ra,16(sp)
  101bfc:	dcc00317 	ldw	r19,12(sp)
  101c00:	dc800217 	ldw	r18,8(sp)
  101c04:	dc400117 	ldw	r17,4(sp)
  101c08:	dc000017 	ldw	r16,0(sp)
  101c0c:	dec00504 	addi	sp,sp,20
  101c10:	f800283a 	ret
  101c14:	01400104 	movi	r5,4
  101c18:	9809883a 	mov	r4,r19
  101c1c:	0101aa80 	call	101aa8 <__sfmoreglue>
  101c20:	90800015 	stw	r2,0(r18)
  101c24:	103fde1e 	bne	r2,zero,101ba0 <__alt_data_end+0xfffc1ba0>
  101c28:	00800304 	movi	r2,12
  101c2c:	98800015 	stw	r2,0(r19)
  101c30:	0005883a 	mov	r2,zero
  101c34:	003ff006 	br	101bf8 <__alt_data_end+0xfffc1bf8>

00101c38 <_cleanup>:
  101c38:	008004b4 	movhi	r2,18
  101c3c:	10972c04 	addi	r2,r2,23728
  101c40:	11000017 	ldw	r4,0(r2)
  101c44:	01400474 	movhi	r5,17
  101c48:	296b7804 	addi	r5,r5,-21024
  101c4c:	0101d641 	jmpi	101d64 <_fwalk_reent>

00101c50 <__sinit>:
  101c50:	20800e17 	ldw	r2,56(r4)
  101c54:	10000126 	beq	r2,zero,101c5c <__sinit+0xc>
  101c58:	f800283a 	ret
  101c5c:	01019041 	jmpi	101904 <__sinit.part.1>

00101c60 <__sfp_lock_acquire>:
  101c60:	f800283a 	ret

00101c64 <__sfp_lock_release>:
  101c64:	f800283a 	ret

00101c68 <__sinit_lock_acquire>:
  101c68:	f800283a 	ret

00101c6c <__sinit_lock_release>:
  101c6c:	f800283a 	ret

00101c70 <__fp_lock_all>:
  101c70:	008004b4 	movhi	r2,18
  101c74:	10972d04 	addi	r2,r2,23732
  101c78:	11000017 	ldw	r4,0(r2)
  101c7c:	01400434 	movhi	r5,16
  101c80:	2946a804 	addi	r5,r5,6816
  101c84:	0101ca01 	jmpi	101ca0 <_fwalk>

00101c88 <__fp_unlock_all>:
  101c88:	008004b4 	movhi	r2,18
  101c8c:	10972d04 	addi	r2,r2,23732
  101c90:	11000017 	ldw	r4,0(r2)
  101c94:	01400434 	movhi	r5,16
  101c98:	29463c04 	addi	r5,r5,6384
  101c9c:	0101ca01 	jmpi	101ca0 <_fwalk>

00101ca0 <_fwalk>:
  101ca0:	defff704 	addi	sp,sp,-36
  101ca4:	dd000415 	stw	r20,16(sp)
  101ca8:	dfc00815 	stw	ra,32(sp)
  101cac:	ddc00715 	stw	r23,28(sp)
  101cb0:	dd800615 	stw	r22,24(sp)
  101cb4:	dd400515 	stw	r21,20(sp)
  101cb8:	dcc00315 	stw	r19,12(sp)
  101cbc:	dc800215 	stw	r18,8(sp)
  101cc0:	dc400115 	stw	r17,4(sp)
  101cc4:	dc000015 	stw	r16,0(sp)
  101cc8:	2500b804 	addi	r20,r4,736
  101ccc:	a0002326 	beq	r20,zero,101d5c <_fwalk+0xbc>
  101cd0:	282b883a 	mov	r21,r5
  101cd4:	002f883a 	mov	r23,zero
  101cd8:	05800044 	movi	r22,1
  101cdc:	04ffffc4 	movi	r19,-1
  101ce0:	a4400117 	ldw	r17,4(r20)
  101ce4:	a4800217 	ldw	r18,8(r20)
  101ce8:	8c7fffc4 	addi	r17,r17,-1
  101cec:	88000d16 	blt	r17,zero,101d24 <_fwalk+0x84>
  101cf0:	94000304 	addi	r16,r18,12
  101cf4:	94800384 	addi	r18,r18,14
  101cf8:	8080000b 	ldhu	r2,0(r16)
  101cfc:	8c7fffc4 	addi	r17,r17,-1
  101d00:	813ffd04 	addi	r4,r16,-12
  101d04:	b080042e 	bgeu	r22,r2,101d18 <_fwalk+0x78>
  101d08:	9080000f 	ldh	r2,0(r18)
  101d0c:	14c00226 	beq	r2,r19,101d18 <_fwalk+0x78>
  101d10:	a83ee83a 	callr	r21
  101d14:	b8aeb03a 	or	r23,r23,r2
  101d18:	84001a04 	addi	r16,r16,104
  101d1c:	94801a04 	addi	r18,r18,104
  101d20:	8cfff51e 	bne	r17,r19,101cf8 <__alt_data_end+0xfffc1cf8>
  101d24:	a5000017 	ldw	r20,0(r20)
  101d28:	a03fed1e 	bne	r20,zero,101ce0 <__alt_data_end+0xfffc1ce0>
  101d2c:	b805883a 	mov	r2,r23
  101d30:	dfc00817 	ldw	ra,32(sp)
  101d34:	ddc00717 	ldw	r23,28(sp)
  101d38:	dd800617 	ldw	r22,24(sp)
  101d3c:	dd400517 	ldw	r21,20(sp)
  101d40:	dd000417 	ldw	r20,16(sp)
  101d44:	dcc00317 	ldw	r19,12(sp)
  101d48:	dc800217 	ldw	r18,8(sp)
  101d4c:	dc400117 	ldw	r17,4(sp)
  101d50:	dc000017 	ldw	r16,0(sp)
  101d54:	dec00904 	addi	sp,sp,36
  101d58:	f800283a 	ret
  101d5c:	002f883a 	mov	r23,zero
  101d60:	003ff206 	br	101d2c <__alt_data_end+0xfffc1d2c>

00101d64 <_fwalk_reent>:
  101d64:	defff704 	addi	sp,sp,-36
  101d68:	dd000415 	stw	r20,16(sp)
  101d6c:	dfc00815 	stw	ra,32(sp)
  101d70:	ddc00715 	stw	r23,28(sp)
  101d74:	dd800615 	stw	r22,24(sp)
  101d78:	dd400515 	stw	r21,20(sp)
  101d7c:	dcc00315 	stw	r19,12(sp)
  101d80:	dc800215 	stw	r18,8(sp)
  101d84:	dc400115 	stw	r17,4(sp)
  101d88:	dc000015 	stw	r16,0(sp)
  101d8c:	2500b804 	addi	r20,r4,736
  101d90:	a0002326 	beq	r20,zero,101e20 <_fwalk_reent+0xbc>
  101d94:	282b883a 	mov	r21,r5
  101d98:	2027883a 	mov	r19,r4
  101d9c:	002f883a 	mov	r23,zero
  101da0:	05800044 	movi	r22,1
  101da4:	04bfffc4 	movi	r18,-1
  101da8:	a4400117 	ldw	r17,4(r20)
  101dac:	a4000217 	ldw	r16,8(r20)
  101db0:	8c7fffc4 	addi	r17,r17,-1
  101db4:	88000c16 	blt	r17,zero,101de8 <_fwalk_reent+0x84>
  101db8:	84000304 	addi	r16,r16,12
  101dbc:	8080000b 	ldhu	r2,0(r16)
  101dc0:	8c7fffc4 	addi	r17,r17,-1
  101dc4:	817ffd04 	addi	r5,r16,-12
  101dc8:	b080052e 	bgeu	r22,r2,101de0 <_fwalk_reent+0x7c>
  101dcc:	8080008f 	ldh	r2,2(r16)
  101dd0:	9809883a 	mov	r4,r19
  101dd4:	14800226 	beq	r2,r18,101de0 <_fwalk_reent+0x7c>
  101dd8:	a83ee83a 	callr	r21
  101ddc:	b8aeb03a 	or	r23,r23,r2
  101de0:	84001a04 	addi	r16,r16,104
  101de4:	8cbff51e 	bne	r17,r18,101dbc <__alt_data_end+0xfffc1dbc>
  101de8:	a5000017 	ldw	r20,0(r20)
  101dec:	a03fee1e 	bne	r20,zero,101da8 <__alt_data_end+0xfffc1da8>
  101df0:	b805883a 	mov	r2,r23
  101df4:	dfc00817 	ldw	ra,32(sp)
  101df8:	ddc00717 	ldw	r23,28(sp)
  101dfc:	dd800617 	ldw	r22,24(sp)
  101e00:	dd400517 	ldw	r21,20(sp)
  101e04:	dd000417 	ldw	r20,16(sp)
  101e08:	dcc00317 	ldw	r19,12(sp)
  101e0c:	dc800217 	ldw	r18,8(sp)
  101e10:	dc400117 	ldw	r17,4(sp)
  101e14:	dc000017 	ldw	r16,0(sp)
  101e18:	dec00904 	addi	sp,sp,36
  101e1c:	f800283a 	ret
  101e20:	002f883a 	mov	r23,zero
  101e24:	003ff206 	br	101df0 <__alt_data_end+0xfffc1df0>

00101e28 <_malloc_r>:
  101e28:	defff504 	addi	sp,sp,-44
  101e2c:	dc800315 	stw	r18,12(sp)
  101e30:	dfc00a15 	stw	ra,40(sp)
  101e34:	df000915 	stw	fp,36(sp)
  101e38:	ddc00815 	stw	r23,32(sp)
  101e3c:	dd800715 	stw	r22,28(sp)
  101e40:	dd400615 	stw	r21,24(sp)
  101e44:	dd000515 	stw	r20,20(sp)
  101e48:	dcc00415 	stw	r19,16(sp)
  101e4c:	dc400215 	stw	r17,8(sp)
  101e50:	dc000115 	stw	r16,4(sp)
  101e54:	288002c4 	addi	r2,r5,11
  101e58:	00c00584 	movi	r3,22
  101e5c:	2025883a 	mov	r18,r4
  101e60:	18807f2e 	bgeu	r3,r2,102060 <_malloc_r+0x238>
  101e64:	047ffe04 	movi	r17,-8
  101e68:	1462703a 	and	r17,r2,r17
  101e6c:	8800a316 	blt	r17,zero,1020fc <_malloc_r+0x2d4>
  101e70:	8940a236 	bltu	r17,r5,1020fc <_malloc_r+0x2d4>
  101e74:	01197940 	call	119794 <__malloc_lock>
  101e78:	00807dc4 	movi	r2,503
  101e7c:	1441e92e 	bgeu	r2,r17,102624 <_malloc_r+0x7fc>
  101e80:	8804d27a 	srli	r2,r17,9
  101e84:	1000a126 	beq	r2,zero,10210c <_malloc_r+0x2e4>
  101e88:	00c00104 	movi	r3,4
  101e8c:	18811e36 	bltu	r3,r2,102308 <_malloc_r+0x4e0>
  101e90:	8804d1ba 	srli	r2,r17,6
  101e94:	12000e44 	addi	r8,r2,57
  101e98:	11c00e04 	addi	r7,r2,56
  101e9c:	4209883a 	add	r4,r8,r8
  101ea0:	04c004b4 	movhi	r19,18
  101ea4:	2109883a 	add	r4,r4,r4
  101ea8:	9cd18704 	addi	r19,r19,17948
  101eac:	2109883a 	add	r4,r4,r4
  101eb0:	9909883a 	add	r4,r19,r4
  101eb4:	24000117 	ldw	r16,4(r4)
  101eb8:	213ffe04 	addi	r4,r4,-8
  101ebc:	24009726 	beq	r4,r16,10211c <_malloc_r+0x2f4>
  101ec0:	80800117 	ldw	r2,4(r16)
  101ec4:	01bfff04 	movi	r6,-4
  101ec8:	014003c4 	movi	r5,15
  101ecc:	1184703a 	and	r2,r2,r6
  101ed0:	1447c83a 	sub	r3,r2,r17
  101ed4:	28c00716 	blt	r5,r3,101ef4 <_malloc_r+0xcc>
  101ed8:	1800920e 	bge	r3,zero,102124 <_malloc_r+0x2fc>
  101edc:	84000317 	ldw	r16,12(r16)
  101ee0:	24008e26 	beq	r4,r16,10211c <_malloc_r+0x2f4>
  101ee4:	80800117 	ldw	r2,4(r16)
  101ee8:	1184703a 	and	r2,r2,r6
  101eec:	1447c83a 	sub	r3,r2,r17
  101ef0:	28fff90e 	bge	r5,r3,101ed8 <__alt_data_end+0xfffc1ed8>
  101ef4:	3809883a 	mov	r4,r7
  101ef8:	018004b4 	movhi	r6,18
  101efc:	9c000417 	ldw	r16,16(r19)
  101f00:	31918704 	addi	r6,r6,17948
  101f04:	32000204 	addi	r8,r6,8
  101f08:	82013426 	beq	r16,r8,1023dc <_malloc_r+0x5b4>
  101f0c:	80c00117 	ldw	r3,4(r16)
  101f10:	00bfff04 	movi	r2,-4
  101f14:	188e703a 	and	r7,r3,r2
  101f18:	3c45c83a 	sub	r2,r7,r17
  101f1c:	00c003c4 	movi	r3,15
  101f20:	18811f16 	blt	r3,r2,1023a0 <_malloc_r+0x578>
  101f24:	32000515 	stw	r8,20(r6)
  101f28:	32000415 	stw	r8,16(r6)
  101f2c:	10007f0e 	bge	r2,zero,10212c <_malloc_r+0x304>
  101f30:	00807fc4 	movi	r2,511
  101f34:	11c0fd36 	bltu	r2,r7,10232c <_malloc_r+0x504>
  101f38:	3806d0fa 	srli	r3,r7,3
  101f3c:	01c00044 	movi	r7,1
  101f40:	30800117 	ldw	r2,4(r6)
  101f44:	19400044 	addi	r5,r3,1
  101f48:	294b883a 	add	r5,r5,r5
  101f4c:	1807d0ba 	srai	r3,r3,2
  101f50:	294b883a 	add	r5,r5,r5
  101f54:	294b883a 	add	r5,r5,r5
  101f58:	298b883a 	add	r5,r5,r6
  101f5c:	38c6983a 	sll	r3,r7,r3
  101f60:	29c00017 	ldw	r7,0(r5)
  101f64:	2a7ffe04 	addi	r9,r5,-8
  101f68:	1886b03a 	or	r3,r3,r2
  101f6c:	82400315 	stw	r9,12(r16)
  101f70:	81c00215 	stw	r7,8(r16)
  101f74:	30c00115 	stw	r3,4(r6)
  101f78:	2c000015 	stw	r16,0(r5)
  101f7c:	3c000315 	stw	r16,12(r7)
  101f80:	2005d0ba 	srai	r2,r4,2
  101f84:	01400044 	movi	r5,1
  101f88:	288a983a 	sll	r5,r5,r2
  101f8c:	19406f36 	bltu	r3,r5,10214c <_malloc_r+0x324>
  101f90:	28c4703a 	and	r2,r5,r3
  101f94:	10000a1e 	bne	r2,zero,101fc0 <_malloc_r+0x198>
  101f98:	00bfff04 	movi	r2,-4
  101f9c:	294b883a 	add	r5,r5,r5
  101fa0:	2088703a 	and	r4,r4,r2
  101fa4:	28c4703a 	and	r2,r5,r3
  101fa8:	21000104 	addi	r4,r4,4
  101fac:	1000041e 	bne	r2,zero,101fc0 <_malloc_r+0x198>
  101fb0:	294b883a 	add	r5,r5,r5
  101fb4:	28c4703a 	and	r2,r5,r3
  101fb8:	21000104 	addi	r4,r4,4
  101fbc:	103ffc26 	beq	r2,zero,101fb0 <__alt_data_end+0xfffc1fb0>
  101fc0:	02bfff04 	movi	r10,-4
  101fc4:	024003c4 	movi	r9,15
  101fc8:	21800044 	addi	r6,r4,1
  101fcc:	318d883a 	add	r6,r6,r6
  101fd0:	318d883a 	add	r6,r6,r6
  101fd4:	318d883a 	add	r6,r6,r6
  101fd8:	998d883a 	add	r6,r19,r6
  101fdc:	333ffe04 	addi	r12,r6,-8
  101fe0:	2017883a 	mov	r11,r4
  101fe4:	31800104 	addi	r6,r6,4
  101fe8:	34000017 	ldw	r16,0(r6)
  101fec:	31fffd04 	addi	r7,r6,-12
  101ff0:	81c0041e 	bne	r16,r7,102004 <_malloc_r+0x1dc>
  101ff4:	0000fb06 	br	1023e4 <_malloc_r+0x5bc>
  101ff8:	1801030e 	bge	r3,zero,102408 <_malloc_r+0x5e0>
  101ffc:	84000317 	ldw	r16,12(r16)
  102000:	81c0f826 	beq	r16,r7,1023e4 <_malloc_r+0x5bc>
  102004:	80800117 	ldw	r2,4(r16)
  102008:	1284703a 	and	r2,r2,r10
  10200c:	1447c83a 	sub	r3,r2,r17
  102010:	48fff90e 	bge	r9,r3,101ff8 <__alt_data_end+0xfffc1ff8>
  102014:	80800317 	ldw	r2,12(r16)
  102018:	81000217 	ldw	r4,8(r16)
  10201c:	89400054 	ori	r5,r17,1
  102020:	81400115 	stw	r5,4(r16)
  102024:	20800315 	stw	r2,12(r4)
  102028:	11000215 	stw	r4,8(r2)
  10202c:	8463883a 	add	r17,r16,r17
  102030:	9c400515 	stw	r17,20(r19)
  102034:	9c400415 	stw	r17,16(r19)
  102038:	18800054 	ori	r2,r3,1
  10203c:	88800115 	stw	r2,4(r17)
  102040:	8a000315 	stw	r8,12(r17)
  102044:	8a000215 	stw	r8,8(r17)
  102048:	88e3883a 	add	r17,r17,r3
  10204c:	88c00015 	stw	r3,0(r17)
  102050:	9009883a 	mov	r4,r18
  102054:	01198b40 	call	1198b4 <__malloc_unlock>
  102058:	80800204 	addi	r2,r16,8
  10205c:	00001b06 	br	1020cc <_malloc_r+0x2a4>
  102060:	04400404 	movi	r17,16
  102064:	89402536 	bltu	r17,r5,1020fc <_malloc_r+0x2d4>
  102068:	01197940 	call	119794 <__malloc_lock>
  10206c:	00800184 	movi	r2,6
  102070:	01000084 	movi	r4,2
  102074:	04c004b4 	movhi	r19,18
  102078:	1085883a 	add	r2,r2,r2
  10207c:	9cd18704 	addi	r19,r19,17948
  102080:	1085883a 	add	r2,r2,r2
  102084:	9885883a 	add	r2,r19,r2
  102088:	14000117 	ldw	r16,4(r2)
  10208c:	10fffe04 	addi	r3,r2,-8
  102090:	80c0d926 	beq	r16,r3,1023f8 <_malloc_r+0x5d0>
  102094:	80c00117 	ldw	r3,4(r16)
  102098:	81000317 	ldw	r4,12(r16)
  10209c:	00bfff04 	movi	r2,-4
  1020a0:	1884703a 	and	r2,r3,r2
  1020a4:	81400217 	ldw	r5,8(r16)
  1020a8:	8085883a 	add	r2,r16,r2
  1020ac:	10c00117 	ldw	r3,4(r2)
  1020b0:	29000315 	stw	r4,12(r5)
  1020b4:	21400215 	stw	r5,8(r4)
  1020b8:	18c00054 	ori	r3,r3,1
  1020bc:	10c00115 	stw	r3,4(r2)
  1020c0:	9009883a 	mov	r4,r18
  1020c4:	01198b40 	call	1198b4 <__malloc_unlock>
  1020c8:	80800204 	addi	r2,r16,8
  1020cc:	dfc00a17 	ldw	ra,40(sp)
  1020d0:	df000917 	ldw	fp,36(sp)
  1020d4:	ddc00817 	ldw	r23,32(sp)
  1020d8:	dd800717 	ldw	r22,28(sp)
  1020dc:	dd400617 	ldw	r21,24(sp)
  1020e0:	dd000517 	ldw	r20,20(sp)
  1020e4:	dcc00417 	ldw	r19,16(sp)
  1020e8:	dc800317 	ldw	r18,12(sp)
  1020ec:	dc400217 	ldw	r17,8(sp)
  1020f0:	dc000117 	ldw	r16,4(sp)
  1020f4:	dec00b04 	addi	sp,sp,44
  1020f8:	f800283a 	ret
  1020fc:	00800304 	movi	r2,12
  102100:	90800015 	stw	r2,0(r18)
  102104:	0005883a 	mov	r2,zero
  102108:	003ff006 	br	1020cc <__alt_data_end+0xfffc20cc>
  10210c:	01002004 	movi	r4,128
  102110:	02001004 	movi	r8,64
  102114:	01c00fc4 	movi	r7,63
  102118:	003f6106 	br	101ea0 <__alt_data_end+0xfffc1ea0>
  10211c:	4009883a 	mov	r4,r8
  102120:	003f7506 	br	101ef8 <__alt_data_end+0xfffc1ef8>
  102124:	81000317 	ldw	r4,12(r16)
  102128:	003fde06 	br	1020a4 <__alt_data_end+0xfffc20a4>
  10212c:	81c5883a 	add	r2,r16,r7
  102130:	11400117 	ldw	r5,4(r2)
  102134:	9009883a 	mov	r4,r18
  102138:	29400054 	ori	r5,r5,1
  10213c:	11400115 	stw	r5,4(r2)
  102140:	01198b40 	call	1198b4 <__malloc_unlock>
  102144:	80800204 	addi	r2,r16,8
  102148:	003fe006 	br	1020cc <__alt_data_end+0xfffc20cc>
  10214c:	9c000217 	ldw	r16,8(r19)
  102150:	00bfff04 	movi	r2,-4
  102154:	85800117 	ldw	r22,4(r16)
  102158:	b0ac703a 	and	r22,r22,r2
  10215c:	b4400336 	bltu	r22,r17,10216c <_malloc_r+0x344>
  102160:	b445c83a 	sub	r2,r22,r17
  102164:	00c003c4 	movi	r3,15
  102168:	18805d16 	blt	r3,r2,1022e0 <_malloc_r+0x4b8>
  10216c:	05c004b4 	movhi	r23,18
  102170:	008004b4 	movhi	r2,18
  102174:	109e5804 	addi	r2,r2,31072
  102178:	bdd72e04 	addi	r23,r23,23736
  10217c:	15400017 	ldw	r21,0(r2)
  102180:	b8c00017 	ldw	r3,0(r23)
  102184:	00bfffc4 	movi	r2,-1
  102188:	858d883a 	add	r6,r16,r22
  10218c:	8d6b883a 	add	r21,r17,r21
  102190:	1880ea26 	beq	r3,r2,10253c <_malloc_r+0x714>
  102194:	ad4403c4 	addi	r21,r21,4111
  102198:	00bc0004 	movi	r2,-4096
  10219c:	a8aa703a 	and	r21,r21,r2
  1021a0:	a80b883a 	mov	r5,r21
  1021a4:	9009883a 	mov	r4,r18
  1021a8:	d9800015 	stw	r6,0(sp)
  1021ac:	0102cb80 	call	102cb8 <_sbrk_r>
  1021b0:	1029883a 	mov	r20,r2
  1021b4:	00bfffc4 	movi	r2,-1
  1021b8:	d9800017 	ldw	r6,0(sp)
  1021bc:	a080e826 	beq	r20,r2,102560 <_malloc_r+0x738>
  1021c0:	a180a636 	bltu	r20,r6,10245c <_malloc_r+0x634>
  1021c4:	070004b4 	movhi	fp,18
  1021c8:	e71e8404 	addi	fp,fp,31248
  1021cc:	e0800017 	ldw	r2,0(fp)
  1021d0:	a887883a 	add	r3,r21,r2
  1021d4:	e0c00015 	stw	r3,0(fp)
  1021d8:	3500e626 	beq	r6,r20,102574 <_malloc_r+0x74c>
  1021dc:	b9000017 	ldw	r4,0(r23)
  1021e0:	00bfffc4 	movi	r2,-1
  1021e4:	2080ee26 	beq	r4,r2,1025a0 <_malloc_r+0x778>
  1021e8:	a185c83a 	sub	r2,r20,r6
  1021ec:	10c5883a 	add	r2,r2,r3
  1021f0:	e0800015 	stw	r2,0(fp)
  1021f4:	a0c001cc 	andi	r3,r20,7
  1021f8:	1800bc26 	beq	r3,zero,1024ec <_malloc_r+0x6c4>
  1021fc:	a0e9c83a 	sub	r20,r20,r3
  102200:	00840204 	movi	r2,4104
  102204:	a5000204 	addi	r20,r20,8
  102208:	10c7c83a 	sub	r3,r2,r3
  10220c:	a545883a 	add	r2,r20,r21
  102210:	1083ffcc 	andi	r2,r2,4095
  102214:	18abc83a 	sub	r21,r3,r2
  102218:	a80b883a 	mov	r5,r21
  10221c:	9009883a 	mov	r4,r18
  102220:	0102cb80 	call	102cb8 <_sbrk_r>
  102224:	00ffffc4 	movi	r3,-1
  102228:	10c0e126 	beq	r2,r3,1025b0 <_malloc_r+0x788>
  10222c:	1505c83a 	sub	r2,r2,r20
  102230:	1545883a 	add	r2,r2,r21
  102234:	10800054 	ori	r2,r2,1
  102238:	e0c00017 	ldw	r3,0(fp)
  10223c:	9d000215 	stw	r20,8(r19)
  102240:	a0800115 	stw	r2,4(r20)
  102244:	a8c7883a 	add	r3,r21,r3
  102248:	e0c00015 	stw	r3,0(fp)
  10224c:	84c00e26 	beq	r16,r19,102288 <_malloc_r+0x460>
  102250:	018003c4 	movi	r6,15
  102254:	3580a72e 	bgeu	r6,r22,1024f4 <_malloc_r+0x6cc>
  102258:	81400117 	ldw	r5,4(r16)
  10225c:	013ffe04 	movi	r4,-8
  102260:	b0bffd04 	addi	r2,r22,-12
  102264:	1104703a 	and	r2,r2,r4
  102268:	2900004c 	andi	r4,r5,1
  10226c:	2088b03a 	or	r4,r4,r2
  102270:	81000115 	stw	r4,4(r16)
  102274:	01400144 	movi	r5,5
  102278:	8089883a 	add	r4,r16,r2
  10227c:	21400115 	stw	r5,4(r4)
  102280:	21400215 	stw	r5,8(r4)
  102284:	3080cd36 	bltu	r6,r2,1025bc <_malloc_r+0x794>
  102288:	008004b4 	movhi	r2,18
  10228c:	109e5704 	addi	r2,r2,31068
  102290:	11000017 	ldw	r4,0(r2)
  102294:	20c0012e 	bgeu	r4,r3,10229c <_malloc_r+0x474>
  102298:	10c00015 	stw	r3,0(r2)
  10229c:	008004b4 	movhi	r2,18
  1022a0:	109e5604 	addi	r2,r2,31064
  1022a4:	11000017 	ldw	r4,0(r2)
  1022a8:	9c000217 	ldw	r16,8(r19)
  1022ac:	20c0012e 	bgeu	r4,r3,1022b4 <_malloc_r+0x48c>
  1022b0:	10c00015 	stw	r3,0(r2)
  1022b4:	80c00117 	ldw	r3,4(r16)
  1022b8:	00bfff04 	movi	r2,-4
  1022bc:	1886703a 	and	r3,r3,r2
  1022c0:	1c45c83a 	sub	r2,r3,r17
  1022c4:	1c400236 	bltu	r3,r17,1022d0 <_malloc_r+0x4a8>
  1022c8:	00c003c4 	movi	r3,15
  1022cc:	18800416 	blt	r3,r2,1022e0 <_malloc_r+0x4b8>
  1022d0:	9009883a 	mov	r4,r18
  1022d4:	01198b40 	call	1198b4 <__malloc_unlock>
  1022d8:	0005883a 	mov	r2,zero
  1022dc:	003f7b06 	br	1020cc <__alt_data_end+0xfffc20cc>
  1022e0:	88c00054 	ori	r3,r17,1
  1022e4:	80c00115 	stw	r3,4(r16)
  1022e8:	8463883a 	add	r17,r16,r17
  1022ec:	10800054 	ori	r2,r2,1
  1022f0:	9c400215 	stw	r17,8(r19)
  1022f4:	88800115 	stw	r2,4(r17)
  1022f8:	9009883a 	mov	r4,r18
  1022fc:	01198b40 	call	1198b4 <__malloc_unlock>
  102300:	80800204 	addi	r2,r16,8
  102304:	003f7106 	br	1020cc <__alt_data_end+0xfffc20cc>
  102308:	00c00504 	movi	r3,20
  10230c:	18804a2e 	bgeu	r3,r2,102438 <_malloc_r+0x610>
  102310:	00c01504 	movi	r3,84
  102314:	18806e36 	bltu	r3,r2,1024d0 <_malloc_r+0x6a8>
  102318:	8804d33a 	srli	r2,r17,12
  10231c:	12001bc4 	addi	r8,r2,111
  102320:	11c01b84 	addi	r7,r2,110
  102324:	4209883a 	add	r4,r8,r8
  102328:	003edd06 	br	101ea0 <__alt_data_end+0xfffc1ea0>
  10232c:	3804d27a 	srli	r2,r7,9
  102330:	00c00104 	movi	r3,4
  102334:	1880442e 	bgeu	r3,r2,102448 <_malloc_r+0x620>
  102338:	00c00504 	movi	r3,20
  10233c:	18808136 	bltu	r3,r2,102544 <_malloc_r+0x71c>
  102340:	11401704 	addi	r5,r2,92
  102344:	10c016c4 	addi	r3,r2,91
  102348:	294b883a 	add	r5,r5,r5
  10234c:	294b883a 	add	r5,r5,r5
  102350:	294b883a 	add	r5,r5,r5
  102354:	994b883a 	add	r5,r19,r5
  102358:	28800017 	ldw	r2,0(r5)
  10235c:	018004b4 	movhi	r6,18
  102360:	297ffe04 	addi	r5,r5,-8
  102364:	31918704 	addi	r6,r6,17948
  102368:	28806526 	beq	r5,r2,102500 <_malloc_r+0x6d8>
  10236c:	01bfff04 	movi	r6,-4
  102370:	10c00117 	ldw	r3,4(r2)
  102374:	1986703a 	and	r3,r3,r6
  102378:	38c0022e 	bgeu	r7,r3,102384 <_malloc_r+0x55c>
  10237c:	10800217 	ldw	r2,8(r2)
  102380:	28bffb1e 	bne	r5,r2,102370 <__alt_data_end+0xfffc2370>
  102384:	11400317 	ldw	r5,12(r2)
  102388:	98c00117 	ldw	r3,4(r19)
  10238c:	81400315 	stw	r5,12(r16)
  102390:	80800215 	stw	r2,8(r16)
  102394:	2c000215 	stw	r16,8(r5)
  102398:	14000315 	stw	r16,12(r2)
  10239c:	003ef806 	br	101f80 <__alt_data_end+0xfffc1f80>
  1023a0:	88c00054 	ori	r3,r17,1
  1023a4:	80c00115 	stw	r3,4(r16)
  1023a8:	8463883a 	add	r17,r16,r17
  1023ac:	34400515 	stw	r17,20(r6)
  1023b0:	34400415 	stw	r17,16(r6)
  1023b4:	10c00054 	ori	r3,r2,1
  1023b8:	8a000315 	stw	r8,12(r17)
  1023bc:	8a000215 	stw	r8,8(r17)
  1023c0:	88c00115 	stw	r3,4(r17)
  1023c4:	88a3883a 	add	r17,r17,r2
  1023c8:	88800015 	stw	r2,0(r17)
  1023cc:	9009883a 	mov	r4,r18
  1023d0:	01198b40 	call	1198b4 <__malloc_unlock>
  1023d4:	80800204 	addi	r2,r16,8
  1023d8:	003f3c06 	br	1020cc <__alt_data_end+0xfffc20cc>
  1023dc:	30c00117 	ldw	r3,4(r6)
  1023e0:	003ee706 	br	101f80 <__alt_data_end+0xfffc1f80>
  1023e4:	5ac00044 	addi	r11,r11,1
  1023e8:	588000cc 	andi	r2,r11,3
  1023ec:	31800204 	addi	r6,r6,8
  1023f0:	103efd1e 	bne	r2,zero,101fe8 <__alt_data_end+0xfffc1fe8>
  1023f4:	00002406 	br	102488 <_malloc_r+0x660>
  1023f8:	14000317 	ldw	r16,12(r2)
  1023fc:	143f251e 	bne	r2,r16,102094 <__alt_data_end+0xfffc2094>
  102400:	21000084 	addi	r4,r4,2
  102404:	003ebc06 	br	101ef8 <__alt_data_end+0xfffc1ef8>
  102408:	8085883a 	add	r2,r16,r2
  10240c:	10c00117 	ldw	r3,4(r2)
  102410:	81000317 	ldw	r4,12(r16)
  102414:	81400217 	ldw	r5,8(r16)
  102418:	18c00054 	ori	r3,r3,1
  10241c:	10c00115 	stw	r3,4(r2)
  102420:	29000315 	stw	r4,12(r5)
  102424:	21400215 	stw	r5,8(r4)
  102428:	9009883a 	mov	r4,r18
  10242c:	01198b40 	call	1198b4 <__malloc_unlock>
  102430:	80800204 	addi	r2,r16,8
  102434:	003f2506 	br	1020cc <__alt_data_end+0xfffc20cc>
  102438:	12001704 	addi	r8,r2,92
  10243c:	11c016c4 	addi	r7,r2,91
  102440:	4209883a 	add	r4,r8,r8
  102444:	003e9606 	br	101ea0 <__alt_data_end+0xfffc1ea0>
  102448:	3804d1ba 	srli	r2,r7,6
  10244c:	11400e44 	addi	r5,r2,57
  102450:	10c00e04 	addi	r3,r2,56
  102454:	294b883a 	add	r5,r5,r5
  102458:	003fbc06 	br	10234c <__alt_data_end+0xfffc234c>
  10245c:	84ff5926 	beq	r16,r19,1021c4 <__alt_data_end+0xfffc21c4>
  102460:	008004b4 	movhi	r2,18
  102464:	10918704 	addi	r2,r2,17948
  102468:	14000217 	ldw	r16,8(r2)
  10246c:	00bfff04 	movi	r2,-4
  102470:	80c00117 	ldw	r3,4(r16)
  102474:	1886703a 	and	r3,r3,r2
  102478:	003f9106 	br	1022c0 <__alt_data_end+0xfffc22c0>
  10247c:	60800217 	ldw	r2,8(r12)
  102480:	213fffc4 	addi	r4,r4,-1
  102484:	1300651e 	bne	r2,r12,10261c <_malloc_r+0x7f4>
  102488:	208000cc 	andi	r2,r4,3
  10248c:	633ffe04 	addi	r12,r12,-8
  102490:	103ffa1e 	bne	r2,zero,10247c <__alt_data_end+0xfffc247c>
  102494:	98800117 	ldw	r2,4(r19)
  102498:	0146303a 	nor	r3,zero,r5
  10249c:	1884703a 	and	r2,r3,r2
  1024a0:	98800115 	stw	r2,4(r19)
  1024a4:	294b883a 	add	r5,r5,r5
  1024a8:	117f2836 	bltu	r2,r5,10214c <__alt_data_end+0xfffc214c>
  1024ac:	283f2726 	beq	r5,zero,10214c <__alt_data_end+0xfffc214c>
  1024b0:	2886703a 	and	r3,r5,r2
  1024b4:	5809883a 	mov	r4,r11
  1024b8:	183ec31e 	bne	r3,zero,101fc8 <__alt_data_end+0xfffc1fc8>
  1024bc:	294b883a 	add	r5,r5,r5
  1024c0:	2886703a 	and	r3,r5,r2
  1024c4:	21000104 	addi	r4,r4,4
  1024c8:	183ffc26 	beq	r3,zero,1024bc <__alt_data_end+0xfffc24bc>
  1024cc:	003ebe06 	br	101fc8 <__alt_data_end+0xfffc1fc8>
  1024d0:	00c05504 	movi	r3,340
  1024d4:	18801236 	bltu	r3,r2,102520 <_malloc_r+0x6f8>
  1024d8:	8804d3fa 	srli	r2,r17,15
  1024dc:	12001e04 	addi	r8,r2,120
  1024e0:	11c01dc4 	addi	r7,r2,119
  1024e4:	4209883a 	add	r4,r8,r8
  1024e8:	003e6d06 	br	101ea0 <__alt_data_end+0xfffc1ea0>
  1024ec:	00c40004 	movi	r3,4096
  1024f0:	003f4606 	br	10220c <__alt_data_end+0xfffc220c>
  1024f4:	00800044 	movi	r2,1
  1024f8:	a0800115 	stw	r2,4(r20)
  1024fc:	003f7406 	br	1022d0 <__alt_data_end+0xfffc22d0>
  102500:	1805d0ba 	srai	r2,r3,2
  102504:	01c00044 	movi	r7,1
  102508:	30c00117 	ldw	r3,4(r6)
  10250c:	388e983a 	sll	r7,r7,r2
  102510:	2805883a 	mov	r2,r5
  102514:	38c6b03a 	or	r3,r7,r3
  102518:	30c00115 	stw	r3,4(r6)
  10251c:	003f9b06 	br	10238c <__alt_data_end+0xfffc238c>
  102520:	00c15504 	movi	r3,1364
  102524:	18801a36 	bltu	r3,r2,102590 <_malloc_r+0x768>
  102528:	8804d4ba 	srli	r2,r17,18
  10252c:	12001f44 	addi	r8,r2,125
  102530:	11c01f04 	addi	r7,r2,124
  102534:	4209883a 	add	r4,r8,r8
  102538:	003e5906 	br	101ea0 <__alt_data_end+0xfffc1ea0>
  10253c:	ad400404 	addi	r21,r21,16
  102540:	003f1706 	br	1021a0 <__alt_data_end+0xfffc21a0>
  102544:	00c01504 	movi	r3,84
  102548:	18802336 	bltu	r3,r2,1025d8 <_malloc_r+0x7b0>
  10254c:	3804d33a 	srli	r2,r7,12
  102550:	11401bc4 	addi	r5,r2,111
  102554:	10c01b84 	addi	r3,r2,110
  102558:	294b883a 	add	r5,r5,r5
  10255c:	003f7b06 	br	10234c <__alt_data_end+0xfffc234c>
  102560:	9c000217 	ldw	r16,8(r19)
  102564:	00bfff04 	movi	r2,-4
  102568:	80c00117 	ldw	r3,4(r16)
  10256c:	1886703a 	and	r3,r3,r2
  102570:	003f5306 	br	1022c0 <__alt_data_end+0xfffc22c0>
  102574:	3083ffcc 	andi	r2,r6,4095
  102578:	103f181e 	bne	r2,zero,1021dc <__alt_data_end+0xfffc21dc>
  10257c:	99000217 	ldw	r4,8(r19)
  102580:	b545883a 	add	r2,r22,r21
  102584:	10800054 	ori	r2,r2,1
  102588:	20800115 	stw	r2,4(r4)
  10258c:	003f3e06 	br	102288 <__alt_data_end+0xfffc2288>
  102590:	01003f84 	movi	r4,254
  102594:	02001fc4 	movi	r8,127
  102598:	01c01f84 	movi	r7,126
  10259c:	003e4006 	br	101ea0 <__alt_data_end+0xfffc1ea0>
  1025a0:	008004b4 	movhi	r2,18
  1025a4:	10972e04 	addi	r2,r2,23736
  1025a8:	15000015 	stw	r20,0(r2)
  1025ac:	003f1106 	br	1021f4 <__alt_data_end+0xfffc21f4>
  1025b0:	00800044 	movi	r2,1
  1025b4:	002b883a 	mov	r21,zero
  1025b8:	003f1f06 	br	102238 <__alt_data_end+0xfffc2238>
  1025bc:	81400204 	addi	r5,r16,8
  1025c0:	9009883a 	mov	r4,r18
  1025c4:	010b2b00 	call	10b2b0 <_free_r>
  1025c8:	008004b4 	movhi	r2,18
  1025cc:	109e8404 	addi	r2,r2,31248
  1025d0:	10c00017 	ldw	r3,0(r2)
  1025d4:	003f2c06 	br	102288 <__alt_data_end+0xfffc2288>
  1025d8:	00c05504 	movi	r3,340
  1025dc:	18800536 	bltu	r3,r2,1025f4 <_malloc_r+0x7cc>
  1025e0:	3804d3fa 	srli	r2,r7,15
  1025e4:	11401e04 	addi	r5,r2,120
  1025e8:	10c01dc4 	addi	r3,r2,119
  1025ec:	294b883a 	add	r5,r5,r5
  1025f0:	003f5606 	br	10234c <__alt_data_end+0xfffc234c>
  1025f4:	00c15504 	movi	r3,1364
  1025f8:	18800536 	bltu	r3,r2,102610 <_malloc_r+0x7e8>
  1025fc:	3804d4ba 	srli	r2,r7,18
  102600:	11401f44 	addi	r5,r2,125
  102604:	10c01f04 	addi	r3,r2,124
  102608:	294b883a 	add	r5,r5,r5
  10260c:	003f4f06 	br	10234c <__alt_data_end+0xfffc234c>
  102610:	01403f84 	movi	r5,254
  102614:	00c01f84 	movi	r3,126
  102618:	003f4c06 	br	10234c <__alt_data_end+0xfffc234c>
  10261c:	98800117 	ldw	r2,4(r19)
  102620:	003fa006 	br	1024a4 <__alt_data_end+0xfffc24a4>
  102624:	8808d0fa 	srli	r4,r17,3
  102628:	20800044 	addi	r2,r4,1
  10262c:	1085883a 	add	r2,r2,r2
  102630:	003e9006 	br	102074 <__alt_data_end+0xfffc2074>

00102634 <memchr>:
  102634:	208000cc 	andi	r2,r4,3
  102638:	280f883a 	mov	r7,r5
  10263c:	10003426 	beq	r2,zero,102710 <memchr+0xdc>
  102640:	30bfffc4 	addi	r2,r6,-1
  102644:	30001a26 	beq	r6,zero,1026b0 <memchr+0x7c>
  102648:	20c00003 	ldbu	r3,0(r4)
  10264c:	29803fcc 	andi	r6,r5,255
  102650:	30c0051e 	bne	r6,r3,102668 <memchr+0x34>
  102654:	00001806 	br	1026b8 <memchr+0x84>
  102658:	10001526 	beq	r2,zero,1026b0 <memchr+0x7c>
  10265c:	20c00003 	ldbu	r3,0(r4)
  102660:	10bfffc4 	addi	r2,r2,-1
  102664:	30c01426 	beq	r6,r3,1026b8 <memchr+0x84>
  102668:	21000044 	addi	r4,r4,1
  10266c:	20c000cc 	andi	r3,r4,3
  102670:	183ff91e 	bne	r3,zero,102658 <__alt_data_end+0xfffc2658>
  102674:	020000c4 	movi	r8,3
  102678:	40801136 	bltu	r8,r2,1026c0 <memchr+0x8c>
  10267c:	10000c26 	beq	r2,zero,1026b0 <memchr+0x7c>
  102680:	20c00003 	ldbu	r3,0(r4)
  102684:	29403fcc 	andi	r5,r5,255
  102688:	28c00b26 	beq	r5,r3,1026b8 <memchr+0x84>
  10268c:	20c00044 	addi	r3,r4,1
  102690:	39803fcc 	andi	r6,r7,255
  102694:	2089883a 	add	r4,r4,r2
  102698:	00000306 	br	1026a8 <memchr+0x74>
  10269c:	18c00044 	addi	r3,r3,1
  1026a0:	197fffc3 	ldbu	r5,-1(r3)
  1026a4:	31400526 	beq	r6,r5,1026bc <memchr+0x88>
  1026a8:	1805883a 	mov	r2,r3
  1026ac:	20fffb1e 	bne	r4,r3,10269c <__alt_data_end+0xfffc269c>
  1026b0:	0005883a 	mov	r2,zero
  1026b4:	f800283a 	ret
  1026b8:	2005883a 	mov	r2,r4
  1026bc:	f800283a 	ret
  1026c0:	28c03fcc 	andi	r3,r5,255
  1026c4:	1812923a 	slli	r9,r3,8
  1026c8:	02ffbff4 	movhi	r11,65279
  1026cc:	02a02074 	movhi	r10,32897
  1026d0:	48d2b03a 	or	r9,r9,r3
  1026d4:	4806943a 	slli	r3,r9,16
  1026d8:	5affbfc4 	addi	r11,r11,-257
  1026dc:	52a02004 	addi	r10,r10,-32640
  1026e0:	48d2b03a 	or	r9,r9,r3
  1026e4:	20c00017 	ldw	r3,0(r4)
  1026e8:	48c6f03a 	xor	r3,r9,r3
  1026ec:	1acd883a 	add	r6,r3,r11
  1026f0:	00c6303a 	nor	r3,zero,r3
  1026f4:	30c6703a 	and	r3,r6,r3
  1026f8:	1a86703a 	and	r3,r3,r10
  1026fc:	183fe01e 	bne	r3,zero,102680 <__alt_data_end+0xfffc2680>
  102700:	10bfff04 	addi	r2,r2,-4
  102704:	21000104 	addi	r4,r4,4
  102708:	40bff636 	bltu	r8,r2,1026e4 <__alt_data_end+0xfffc26e4>
  10270c:	003fdb06 	br	10267c <__alt_data_end+0xfffc267c>
  102710:	3005883a 	mov	r2,r6
  102714:	003fd706 	br	102674 <__alt_data_end+0xfffc2674>

00102718 <memcpy>:
  102718:	defffd04 	addi	sp,sp,-12
  10271c:	dfc00215 	stw	ra,8(sp)
  102720:	dc400115 	stw	r17,4(sp)
  102724:	dc000015 	stw	r16,0(sp)
  102728:	00c003c4 	movi	r3,15
  10272c:	2005883a 	mov	r2,r4
  102730:	1980452e 	bgeu	r3,r6,102848 <memcpy+0x130>
  102734:	2906b03a 	or	r3,r5,r4
  102738:	18c000cc 	andi	r3,r3,3
  10273c:	1800441e 	bne	r3,zero,102850 <memcpy+0x138>
  102740:	347ffc04 	addi	r17,r6,-16
  102744:	8822d13a 	srli	r17,r17,4
  102748:	28c00104 	addi	r3,r5,4
  10274c:	23400104 	addi	r13,r4,4
  102750:	8820913a 	slli	r16,r17,4
  102754:	2b000204 	addi	r12,r5,8
  102758:	22c00204 	addi	r11,r4,8
  10275c:	84000504 	addi	r16,r16,20
  102760:	2a800304 	addi	r10,r5,12
  102764:	22400304 	addi	r9,r4,12
  102768:	2c21883a 	add	r16,r5,r16
  10276c:	2811883a 	mov	r8,r5
  102770:	200f883a 	mov	r7,r4
  102774:	41000017 	ldw	r4,0(r8)
  102778:	1fc00017 	ldw	ra,0(r3)
  10277c:	63c00017 	ldw	r15,0(r12)
  102780:	39000015 	stw	r4,0(r7)
  102784:	53800017 	ldw	r14,0(r10)
  102788:	6fc00015 	stw	ra,0(r13)
  10278c:	5bc00015 	stw	r15,0(r11)
  102790:	4b800015 	stw	r14,0(r9)
  102794:	18c00404 	addi	r3,r3,16
  102798:	39c00404 	addi	r7,r7,16
  10279c:	42000404 	addi	r8,r8,16
  1027a0:	6b400404 	addi	r13,r13,16
  1027a4:	63000404 	addi	r12,r12,16
  1027a8:	5ac00404 	addi	r11,r11,16
  1027ac:	52800404 	addi	r10,r10,16
  1027b0:	4a400404 	addi	r9,r9,16
  1027b4:	1c3fef1e 	bne	r3,r16,102774 <__alt_data_end+0xfffc2774>
  1027b8:	89c00044 	addi	r7,r17,1
  1027bc:	380e913a 	slli	r7,r7,4
  1027c0:	310003cc 	andi	r4,r6,15
  1027c4:	02c000c4 	movi	r11,3
  1027c8:	11c7883a 	add	r3,r2,r7
  1027cc:	29cb883a 	add	r5,r5,r7
  1027d0:	5900212e 	bgeu	r11,r4,102858 <memcpy+0x140>
  1027d4:	1813883a 	mov	r9,r3
  1027d8:	2811883a 	mov	r8,r5
  1027dc:	200f883a 	mov	r7,r4
  1027e0:	42800017 	ldw	r10,0(r8)
  1027e4:	4a400104 	addi	r9,r9,4
  1027e8:	39ffff04 	addi	r7,r7,-4
  1027ec:	4abfff15 	stw	r10,-4(r9)
  1027f0:	42000104 	addi	r8,r8,4
  1027f4:	59fffa36 	bltu	r11,r7,1027e0 <__alt_data_end+0xfffc27e0>
  1027f8:	213fff04 	addi	r4,r4,-4
  1027fc:	2008d0ba 	srli	r4,r4,2
  102800:	318000cc 	andi	r6,r6,3
  102804:	21000044 	addi	r4,r4,1
  102808:	2109883a 	add	r4,r4,r4
  10280c:	2109883a 	add	r4,r4,r4
  102810:	1907883a 	add	r3,r3,r4
  102814:	290b883a 	add	r5,r5,r4
  102818:	30000626 	beq	r6,zero,102834 <memcpy+0x11c>
  10281c:	198d883a 	add	r6,r3,r6
  102820:	29c00003 	ldbu	r7,0(r5)
  102824:	18c00044 	addi	r3,r3,1
  102828:	29400044 	addi	r5,r5,1
  10282c:	19ffffc5 	stb	r7,-1(r3)
  102830:	19bffb1e 	bne	r3,r6,102820 <__alt_data_end+0xfffc2820>
  102834:	dfc00217 	ldw	ra,8(sp)
  102838:	dc400117 	ldw	r17,4(sp)
  10283c:	dc000017 	ldw	r16,0(sp)
  102840:	dec00304 	addi	sp,sp,12
  102844:	f800283a 	ret
  102848:	2007883a 	mov	r3,r4
  10284c:	003ff206 	br	102818 <__alt_data_end+0xfffc2818>
  102850:	2007883a 	mov	r3,r4
  102854:	003ff106 	br	10281c <__alt_data_end+0xfffc281c>
  102858:	200d883a 	mov	r6,r4
  10285c:	003fee06 	br	102818 <__alt_data_end+0xfffc2818>

00102860 <memset>:
  102860:	20c000cc 	andi	r3,r4,3
  102864:	2005883a 	mov	r2,r4
  102868:	18004426 	beq	r3,zero,10297c <memset+0x11c>
  10286c:	31ffffc4 	addi	r7,r6,-1
  102870:	30004026 	beq	r6,zero,102974 <memset+0x114>
  102874:	2813883a 	mov	r9,r5
  102878:	200d883a 	mov	r6,r4
  10287c:	2007883a 	mov	r3,r4
  102880:	00000406 	br	102894 <memset+0x34>
  102884:	3a3fffc4 	addi	r8,r7,-1
  102888:	31800044 	addi	r6,r6,1
  10288c:	38003926 	beq	r7,zero,102974 <memset+0x114>
  102890:	400f883a 	mov	r7,r8
  102894:	18c00044 	addi	r3,r3,1
  102898:	32400005 	stb	r9,0(r6)
  10289c:	1a0000cc 	andi	r8,r3,3
  1028a0:	403ff81e 	bne	r8,zero,102884 <__alt_data_end+0xfffc2884>
  1028a4:	010000c4 	movi	r4,3
  1028a8:	21c02d2e 	bgeu	r4,r7,102960 <memset+0x100>
  1028ac:	29003fcc 	andi	r4,r5,255
  1028b0:	200c923a 	slli	r6,r4,8
  1028b4:	3108b03a 	or	r4,r6,r4
  1028b8:	200c943a 	slli	r6,r4,16
  1028bc:	218cb03a 	or	r6,r4,r6
  1028c0:	010003c4 	movi	r4,15
  1028c4:	21c0182e 	bgeu	r4,r7,102928 <memset+0xc8>
  1028c8:	3b3ffc04 	addi	r12,r7,-16
  1028cc:	6018d13a 	srli	r12,r12,4
  1028d0:	1a000104 	addi	r8,r3,4
  1028d4:	1ac00204 	addi	r11,r3,8
  1028d8:	6008913a 	slli	r4,r12,4
  1028dc:	1a800304 	addi	r10,r3,12
  1028e0:	1813883a 	mov	r9,r3
  1028e4:	21000504 	addi	r4,r4,20
  1028e8:	1909883a 	add	r4,r3,r4
  1028ec:	49800015 	stw	r6,0(r9)
  1028f0:	41800015 	stw	r6,0(r8)
  1028f4:	59800015 	stw	r6,0(r11)
  1028f8:	51800015 	stw	r6,0(r10)
  1028fc:	42000404 	addi	r8,r8,16
  102900:	4a400404 	addi	r9,r9,16
  102904:	5ac00404 	addi	r11,r11,16
  102908:	52800404 	addi	r10,r10,16
  10290c:	413ff71e 	bne	r8,r4,1028ec <__alt_data_end+0xfffc28ec>
  102910:	63000044 	addi	r12,r12,1
  102914:	6018913a 	slli	r12,r12,4
  102918:	39c003cc 	andi	r7,r7,15
  10291c:	010000c4 	movi	r4,3
  102920:	1b07883a 	add	r3,r3,r12
  102924:	21c00e2e 	bgeu	r4,r7,102960 <memset+0x100>
  102928:	1813883a 	mov	r9,r3
  10292c:	3811883a 	mov	r8,r7
  102930:	010000c4 	movi	r4,3
  102934:	49800015 	stw	r6,0(r9)
  102938:	423fff04 	addi	r8,r8,-4
  10293c:	4a400104 	addi	r9,r9,4
  102940:	223ffc36 	bltu	r4,r8,102934 <__alt_data_end+0xfffc2934>
  102944:	393fff04 	addi	r4,r7,-4
  102948:	2008d0ba 	srli	r4,r4,2
  10294c:	39c000cc 	andi	r7,r7,3
  102950:	21000044 	addi	r4,r4,1
  102954:	2109883a 	add	r4,r4,r4
  102958:	2109883a 	add	r4,r4,r4
  10295c:	1907883a 	add	r3,r3,r4
  102960:	38000526 	beq	r7,zero,102978 <memset+0x118>
  102964:	19cf883a 	add	r7,r3,r7
  102968:	19400005 	stb	r5,0(r3)
  10296c:	18c00044 	addi	r3,r3,1
  102970:	38fffd1e 	bne	r7,r3,102968 <__alt_data_end+0xfffc2968>
  102974:	f800283a 	ret
  102978:	f800283a 	ret
  10297c:	2007883a 	mov	r3,r4
  102980:	300f883a 	mov	r7,r6
  102984:	003fc706 	br	1028a4 <__alt_data_end+0xfffc28a4>

00102988 <_printf_r>:
  102988:	defffd04 	addi	sp,sp,-12
  10298c:	2805883a 	mov	r2,r5
  102990:	dfc00015 	stw	ra,0(sp)
  102994:	d9800115 	stw	r6,4(sp)
  102998:	d9c00215 	stw	r7,8(sp)
  10299c:	21400217 	ldw	r5,8(r4)
  1029a0:	d9c00104 	addi	r7,sp,4
  1029a4:	100d883a 	mov	r6,r2
  1029a8:	0106f740 	call	106f74 <___vfprintf_internal_r>
  1029ac:	dfc00017 	ldw	ra,0(sp)
  1029b0:	dec00304 	addi	sp,sp,12
  1029b4:	f800283a 	ret

001029b8 <printf>:
  1029b8:	defffc04 	addi	sp,sp,-16
  1029bc:	dfc00015 	stw	ra,0(sp)
  1029c0:	d9400115 	stw	r5,4(sp)
  1029c4:	d9800215 	stw	r6,8(sp)
  1029c8:	d9c00315 	stw	r7,12(sp)
  1029cc:	008004b4 	movhi	r2,18
  1029d0:	10972d04 	addi	r2,r2,23732
  1029d4:	10800017 	ldw	r2,0(r2)
  1029d8:	200b883a 	mov	r5,r4
  1029dc:	d9800104 	addi	r6,sp,4
  1029e0:	11000217 	ldw	r4,8(r2)
  1029e4:	01092500 	call	109250 <__vfprintf_internal>
  1029e8:	dfc00017 	ldw	ra,0(sp)
  1029ec:	dec00404 	addi	sp,sp,16
  1029f0:	f800283a 	ret

001029f4 <_puts_r>:
  1029f4:	defff604 	addi	sp,sp,-40
  1029f8:	dc000715 	stw	r16,28(sp)
  1029fc:	2021883a 	mov	r16,r4
  102a00:	2809883a 	mov	r4,r5
  102a04:	dc400815 	stw	r17,32(sp)
  102a08:	dfc00915 	stw	ra,36(sp)
  102a0c:	2823883a 	mov	r17,r5
  102a10:	01031f00 	call	1031f0 <strlen>
  102a14:	10c00044 	addi	r3,r2,1
  102a18:	d8800115 	stw	r2,4(sp)
  102a1c:	008004b4 	movhi	r2,18
  102a20:	108e4104 	addi	r2,r2,14596
  102a24:	d8800215 	stw	r2,8(sp)
  102a28:	00800044 	movi	r2,1
  102a2c:	d8800315 	stw	r2,12(sp)
  102a30:	00800084 	movi	r2,2
  102a34:	dc400015 	stw	r17,0(sp)
  102a38:	d8c00615 	stw	r3,24(sp)
  102a3c:	dec00415 	stw	sp,16(sp)
  102a40:	d8800515 	stw	r2,20(sp)
  102a44:	80000226 	beq	r16,zero,102a50 <_puts_r+0x5c>
  102a48:	80800e17 	ldw	r2,56(r16)
  102a4c:	10001426 	beq	r2,zero,102aa0 <_puts_r+0xac>
  102a50:	81400217 	ldw	r5,8(r16)
  102a54:	2880030b 	ldhu	r2,12(r5)
  102a58:	10c8000c 	andi	r3,r2,8192
  102a5c:	1800061e 	bne	r3,zero,102a78 <_puts_r+0x84>
  102a60:	29001917 	ldw	r4,100(r5)
  102a64:	00f7ffc4 	movi	r3,-8193
  102a68:	10880014 	ori	r2,r2,8192
  102a6c:	20c6703a 	and	r3,r4,r3
  102a70:	2880030d 	sth	r2,12(r5)
  102a74:	28c01915 	stw	r3,100(r5)
  102a78:	d9800404 	addi	r6,sp,16
  102a7c:	8009883a 	mov	r4,r16
  102a80:	010b5c00 	call	10b5c0 <__sfvwrite_r>
  102a84:	1000091e 	bne	r2,zero,102aac <_puts_r+0xb8>
  102a88:	00800284 	movi	r2,10
  102a8c:	dfc00917 	ldw	ra,36(sp)
  102a90:	dc400817 	ldw	r17,32(sp)
  102a94:	dc000717 	ldw	r16,28(sp)
  102a98:	dec00a04 	addi	sp,sp,40
  102a9c:	f800283a 	ret
  102aa0:	8009883a 	mov	r4,r16
  102aa4:	0101c500 	call	101c50 <__sinit>
  102aa8:	003fe906 	br	102a50 <__alt_data_end+0xfffc2a50>
  102aac:	00bfffc4 	movi	r2,-1
  102ab0:	003ff606 	br	102a8c <__alt_data_end+0xfffc2a8c>

00102ab4 <puts>:
  102ab4:	008004b4 	movhi	r2,18
  102ab8:	10972d04 	addi	r2,r2,23732
  102abc:	200b883a 	mov	r5,r4
  102ac0:	11000017 	ldw	r4,0(r2)
  102ac4:	01029f41 	jmpi	1029f4 <_puts_r>

00102ac8 <lflush>:
  102ac8:	2080030b 	ldhu	r2,12(r4)
  102acc:	00c00244 	movi	r3,9
  102ad0:	1080024c 	andi	r2,r2,9
  102ad4:	10c00226 	beq	r2,r3,102ae0 <lflush+0x18>
  102ad8:	0005883a 	mov	r2,zero
  102adc:	f800283a 	ret
  102ae0:	010b15c1 	jmpi	10b15c <fflush>

00102ae4 <__srefill_r>:
  102ae4:	defffc04 	addi	sp,sp,-16
  102ae8:	dc400115 	stw	r17,4(sp)
  102aec:	dc000015 	stw	r16,0(sp)
  102af0:	dfc00315 	stw	ra,12(sp)
  102af4:	dc800215 	stw	r18,8(sp)
  102af8:	2023883a 	mov	r17,r4
  102afc:	2821883a 	mov	r16,r5
  102b00:	20000226 	beq	r4,zero,102b0c <__srefill_r+0x28>
  102b04:	20800e17 	ldw	r2,56(r4)
  102b08:	10003c26 	beq	r2,zero,102bfc <__srefill_r+0x118>
  102b0c:	80c0030b 	ldhu	r3,12(r16)
  102b10:	1908000c 	andi	r4,r3,8192
  102b14:	1805883a 	mov	r2,r3
  102b18:	2000071e 	bne	r4,zero,102b38 <__srefill_r+0x54>
  102b1c:	81001917 	ldw	r4,100(r16)
  102b20:	18880014 	ori	r2,r3,8192
  102b24:	00f7ffc4 	movi	r3,-8193
  102b28:	20c8703a 	and	r4,r4,r3
  102b2c:	8080030d 	sth	r2,12(r16)
  102b30:	1007883a 	mov	r3,r2
  102b34:	81001915 	stw	r4,100(r16)
  102b38:	80000115 	stw	zero,4(r16)
  102b3c:	1100080c 	andi	r4,r2,32
  102b40:	2000571e 	bne	r4,zero,102ca0 <__srefill_r+0x1bc>
  102b44:	1100010c 	andi	r4,r2,4
  102b48:	20001f26 	beq	r4,zero,102bc8 <__srefill_r+0xe4>
  102b4c:	81400c17 	ldw	r5,48(r16)
  102b50:	28000826 	beq	r5,zero,102b74 <__srefill_r+0x90>
  102b54:	80801004 	addi	r2,r16,64
  102b58:	28800226 	beq	r5,r2,102b64 <__srefill_r+0x80>
  102b5c:	8809883a 	mov	r4,r17
  102b60:	010b2b00 	call	10b2b0 <_free_r>
  102b64:	80800f17 	ldw	r2,60(r16)
  102b68:	80000c15 	stw	zero,48(r16)
  102b6c:	80800115 	stw	r2,4(r16)
  102b70:	1000391e 	bne	r2,zero,102c58 <__srefill_r+0x174>
  102b74:	80800417 	ldw	r2,16(r16)
  102b78:	10004b26 	beq	r2,zero,102ca8 <__srefill_r+0x1c4>
  102b7c:	8480030b 	ldhu	r18,12(r16)
  102b80:	908000cc 	andi	r2,r18,3
  102b84:	10001f1e 	bne	r2,zero,102c04 <__srefill_r+0x120>
  102b88:	81800417 	ldw	r6,16(r16)
  102b8c:	80800817 	ldw	r2,32(r16)
  102b90:	81c00517 	ldw	r7,20(r16)
  102b94:	81400717 	ldw	r5,28(r16)
  102b98:	81800015 	stw	r6,0(r16)
  102b9c:	8809883a 	mov	r4,r17
  102ba0:	103ee83a 	callr	r2
  102ba4:	80800115 	stw	r2,4(r16)
  102ba8:	00800e0e 	bge	zero,r2,102be4 <__srefill_r+0x100>
  102bac:	0005883a 	mov	r2,zero
  102bb0:	dfc00317 	ldw	ra,12(sp)
  102bb4:	dc800217 	ldw	r18,8(sp)
  102bb8:	dc400117 	ldw	r17,4(sp)
  102bbc:	dc000017 	ldw	r16,0(sp)
  102bc0:	dec00404 	addi	sp,sp,16
  102bc4:	f800283a 	ret
  102bc8:	1100040c 	andi	r4,r2,16
  102bcc:	20003026 	beq	r4,zero,102c90 <__srefill_r+0x1ac>
  102bd0:	1080020c 	andi	r2,r2,8
  102bd4:	1000241e 	bne	r2,zero,102c68 <__srefill_r+0x184>
  102bd8:	18c00114 	ori	r3,r3,4
  102bdc:	80c0030d 	sth	r3,12(r16)
  102be0:	003fe406 	br	102b74 <__alt_data_end+0xfffc2b74>
  102be4:	80c0030b 	ldhu	r3,12(r16)
  102be8:	1000161e 	bne	r2,zero,102c44 <__srefill_r+0x160>
  102bec:	18c00814 	ori	r3,r3,32
  102bf0:	00bfffc4 	movi	r2,-1
  102bf4:	80c0030d 	sth	r3,12(r16)
  102bf8:	003fed06 	br	102bb0 <__alt_data_end+0xfffc2bb0>
  102bfc:	0101c500 	call	101c50 <__sinit>
  102c00:	003fc206 	br	102b0c <__alt_data_end+0xfffc2b0c>
  102c04:	008004b4 	movhi	r2,18
  102c08:	10972c04 	addi	r2,r2,23728
  102c0c:	11000017 	ldw	r4,0(r2)
  102c10:	01400434 	movhi	r5,16
  102c14:	00800044 	movi	r2,1
  102c18:	294ab204 	addi	r5,r5,10952
  102c1c:	8080030d 	sth	r2,12(r16)
  102c20:	0101ca00 	call	101ca0 <_fwalk>
  102c24:	00800244 	movi	r2,9
  102c28:	8480030d 	sth	r18,12(r16)
  102c2c:	9480024c 	andi	r18,r18,9
  102c30:	90bfd51e 	bne	r18,r2,102b88 <__alt_data_end+0xfffc2b88>
  102c34:	800b883a 	mov	r5,r16
  102c38:	8809883a 	mov	r4,r17
  102c3c:	010aee40 	call	10aee4 <__sflush_r>
  102c40:	003fd106 	br	102b88 <__alt_data_end+0xfffc2b88>
  102c44:	18c01014 	ori	r3,r3,64
  102c48:	80000115 	stw	zero,4(r16)
  102c4c:	00bfffc4 	movi	r2,-1
  102c50:	80c0030d 	sth	r3,12(r16)
  102c54:	003fd606 	br	102bb0 <__alt_data_end+0xfffc2bb0>
  102c58:	80c00e17 	ldw	r3,56(r16)
  102c5c:	0005883a 	mov	r2,zero
  102c60:	80c00015 	stw	r3,0(r16)
  102c64:	003fd206 	br	102bb0 <__alt_data_end+0xfffc2bb0>
  102c68:	800b883a 	mov	r5,r16
  102c6c:	8809883a 	mov	r4,r17
  102c70:	010b1000 	call	10b100 <_fflush_r>
  102c74:	10000a1e 	bne	r2,zero,102ca0 <__srefill_r+0x1bc>
  102c78:	8080030b 	ldhu	r2,12(r16)
  102c7c:	00fffdc4 	movi	r3,-9
  102c80:	80000215 	stw	zero,8(r16)
  102c84:	1886703a 	and	r3,r3,r2
  102c88:	80000615 	stw	zero,24(r16)
  102c8c:	003fd206 	br	102bd8 <__alt_data_end+0xfffc2bd8>
  102c90:	00800244 	movi	r2,9
  102c94:	88800015 	stw	r2,0(r17)
  102c98:	18c01014 	ori	r3,r3,64
  102c9c:	80c0030d 	sth	r3,12(r16)
  102ca0:	00bfffc4 	movi	r2,-1
  102ca4:	003fc206 	br	102bb0 <__alt_data_end+0xfffc2bb0>
  102ca8:	800b883a 	mov	r5,r16
  102cac:	8809883a 	mov	r4,r17
  102cb0:	010bbf40 	call	10bbf4 <__smakebuf_r>
  102cb4:	003fb106 	br	102b7c <__alt_data_end+0xfffc2b7c>

00102cb8 <_sbrk_r>:
  102cb8:	defffd04 	addi	sp,sp,-12
  102cbc:	dc000015 	stw	r16,0(sp)
  102cc0:	040004b4 	movhi	r16,18
  102cc4:	dc400115 	stw	r17,4(sp)
  102cc8:	841e5904 	addi	r16,r16,31076
  102ccc:	2023883a 	mov	r17,r4
  102cd0:	2809883a 	mov	r4,r5
  102cd4:	dfc00215 	stw	ra,8(sp)
  102cd8:	80000015 	stw	zero,0(r16)
  102cdc:	01194840 	call	119484 <sbrk>
  102ce0:	00ffffc4 	movi	r3,-1
  102ce4:	10c00526 	beq	r2,r3,102cfc <_sbrk_r+0x44>
  102ce8:	dfc00217 	ldw	ra,8(sp)
  102cec:	dc400117 	ldw	r17,4(sp)
  102cf0:	dc000017 	ldw	r16,0(sp)
  102cf4:	dec00304 	addi	sp,sp,12
  102cf8:	f800283a 	ret
  102cfc:	80c00017 	ldw	r3,0(r16)
  102d00:	183ff926 	beq	r3,zero,102ce8 <__alt_data_end+0xfffc2ce8>
  102d04:	88c00015 	stw	r3,0(r17)
  102d08:	003ff706 	br	102ce8 <__alt_data_end+0xfffc2ce8>

00102d0c <_sprintf_r>:
  102d0c:	deffe404 	addi	sp,sp,-112
  102d10:	2807883a 	mov	r3,r5
  102d14:	dfc01a15 	stw	ra,104(sp)
  102d18:	d9c01b15 	stw	r7,108(sp)
  102d1c:	00a00034 	movhi	r2,32768
  102d20:	10bfffc4 	addi	r2,r2,-1
  102d24:	02008204 	movi	r8,520
  102d28:	d8800215 	stw	r2,8(sp)
  102d2c:	d8800515 	stw	r2,20(sp)
  102d30:	d9c01b04 	addi	r7,sp,108
  102d34:	d80b883a 	mov	r5,sp
  102d38:	00bfffc4 	movi	r2,-1
  102d3c:	d8c00015 	stw	r3,0(sp)
  102d40:	d8c00415 	stw	r3,16(sp)
  102d44:	da00030d 	sth	r8,12(sp)
  102d48:	d880038d 	sth	r2,14(sp)
  102d4c:	010332c0 	call	10332c <___svfprintf_internal_r>
  102d50:	d8c00017 	ldw	r3,0(sp)
  102d54:	18000005 	stb	zero,0(r3)
  102d58:	dfc01a17 	ldw	ra,104(sp)
  102d5c:	dec01c04 	addi	sp,sp,112
  102d60:	f800283a 	ret

00102d64 <sprintf>:
  102d64:	deffe304 	addi	sp,sp,-116
  102d68:	2007883a 	mov	r3,r4
  102d6c:	dfc01a15 	stw	ra,104(sp)
  102d70:	d9801b15 	stw	r6,108(sp)
  102d74:	d9c01c15 	stw	r7,112(sp)
  102d78:	010004b4 	movhi	r4,18
  102d7c:	21172d04 	addi	r4,r4,23732
  102d80:	21000017 	ldw	r4,0(r4)
  102d84:	00a00034 	movhi	r2,32768
  102d88:	10bfffc4 	addi	r2,r2,-1
  102d8c:	280d883a 	mov	r6,r5
  102d90:	02008204 	movi	r8,520
  102d94:	d8800215 	stw	r2,8(sp)
  102d98:	d8800515 	stw	r2,20(sp)
  102d9c:	d9c01b04 	addi	r7,sp,108
  102da0:	d80b883a 	mov	r5,sp
  102da4:	00bfffc4 	movi	r2,-1
  102da8:	d8c00015 	stw	r3,0(sp)
  102dac:	d8c00415 	stw	r3,16(sp)
  102db0:	da00030d 	sth	r8,12(sp)
  102db4:	d880038d 	sth	r2,14(sp)
  102db8:	010332c0 	call	10332c <___svfprintf_internal_r>
  102dbc:	d8c00017 	ldw	r3,0(sp)
  102dc0:	18000005 	stb	zero,0(r3)
  102dc4:	dfc01a17 	ldw	ra,104(sp)
  102dc8:	dec01d04 	addi	sp,sp,116
  102dcc:	f800283a 	ret

00102dd0 <sscanf>:
  102dd0:	deffe204 	addi	sp,sp,-120
  102dd4:	dc001a15 	stw	r16,104(sp)
  102dd8:	2821883a 	mov	r16,r5
  102ddc:	dfc01b15 	stw	ra,108(sp)
  102de0:	d9801c15 	stw	r6,112(sp)
  102de4:	d9c01d15 	stw	r7,116(sp)
  102de8:	00c08104 	movi	r3,516
  102dec:	d8c0030d 	sth	r3,12(sp)
  102df0:	d9000015 	stw	r4,0(sp)
  102df4:	d9000415 	stw	r4,16(sp)
  102df8:	01031f00 	call	1031f0 <strlen>
  102dfc:	00c004b4 	movhi	r3,18
  102e00:	18d72d04 	addi	r3,r3,23732
  102e04:	d8800115 	stw	r2,4(sp)
  102e08:	d8800515 	stw	r2,20(sp)
  102e0c:	19000017 	ldw	r4,0(r3)
  102e10:	00800434 	movhi	r2,16
  102e14:	108bc604 	addi	r2,r2,12056
  102e18:	d8800815 	stw	r2,32(sp)
  102e1c:	d9c01c04 	addi	r7,sp,112
  102e20:	800d883a 	mov	r6,r16
  102e24:	d80b883a 	mov	r5,sp
  102e28:	00bfffc4 	movi	r2,-1
  102e2c:	d8000c15 	stw	zero,48(sp)
  102e30:	d8001115 	stw	zero,68(sp)
  102e34:	d880038d 	sth	r2,14(sp)
  102e38:	01055e80 	call	1055e8 <__ssvfscanf_r>
  102e3c:	dfc01b17 	ldw	ra,108(sp)
  102e40:	dc001a17 	ldw	r16,104(sp)
  102e44:	dec01e04 	addi	sp,sp,120
  102e48:	f800283a 	ret

00102e4c <_sscanf_r>:
  102e4c:	deffe204 	addi	sp,sp,-120
  102e50:	dc001b15 	stw	r16,108(sp)
  102e54:	2021883a 	mov	r16,r4
  102e58:	dfc01c15 	stw	ra,112(sp)
  102e5c:	d9c01d15 	stw	r7,116(sp)
  102e60:	00808104 	movi	r2,516
  102e64:	2809883a 	mov	r4,r5
  102e68:	d9400015 	stw	r5,0(sp)
  102e6c:	d9400415 	stw	r5,16(sp)
  102e70:	d9801a15 	stw	r6,104(sp)
  102e74:	d880030d 	sth	r2,12(sp)
  102e78:	01031f00 	call	1031f0 <strlen>
  102e7c:	d8800115 	stw	r2,4(sp)
  102e80:	d8800515 	stw	r2,20(sp)
  102e84:	d9801a17 	ldw	r6,104(sp)
  102e88:	00800434 	movhi	r2,16
  102e8c:	108bc604 	addi	r2,r2,12056
  102e90:	d8800815 	stw	r2,32(sp)
  102e94:	d9c01d04 	addi	r7,sp,116
  102e98:	d80b883a 	mov	r5,sp
  102e9c:	8009883a 	mov	r4,r16
  102ea0:	00bfffc4 	movi	r2,-1
  102ea4:	d8000c15 	stw	zero,48(sp)
  102ea8:	d8001115 	stw	zero,68(sp)
  102eac:	d880038d 	sth	r2,14(sp)
  102eb0:	01055e80 	call	1055e8 <__ssvfscanf_r>
  102eb4:	dfc01c17 	ldw	ra,112(sp)
  102eb8:	dc001b17 	ldw	r16,108(sp)
  102ebc:	dec01e04 	addi	sp,sp,120
  102ec0:	f800283a 	ret

00102ec4 <__sread>:
  102ec4:	defffe04 	addi	sp,sp,-8
  102ec8:	dc000015 	stw	r16,0(sp)
  102ecc:	2821883a 	mov	r16,r5
  102ed0:	2940038f 	ldh	r5,14(r5)
  102ed4:	dfc00115 	stw	ra,4(sp)
  102ed8:	010d1e80 	call	10d1e8 <_read_r>
  102edc:	10000716 	blt	r2,zero,102efc <__sread+0x38>
  102ee0:	80c01417 	ldw	r3,80(r16)
  102ee4:	1887883a 	add	r3,r3,r2
  102ee8:	80c01415 	stw	r3,80(r16)
  102eec:	dfc00117 	ldw	ra,4(sp)
  102ef0:	dc000017 	ldw	r16,0(sp)
  102ef4:	dec00204 	addi	sp,sp,8
  102ef8:	f800283a 	ret
  102efc:	80c0030b 	ldhu	r3,12(r16)
  102f00:	18fbffcc 	andi	r3,r3,61439
  102f04:	80c0030d 	sth	r3,12(r16)
  102f08:	dfc00117 	ldw	ra,4(sp)
  102f0c:	dc000017 	ldw	r16,0(sp)
  102f10:	dec00204 	addi	sp,sp,8
  102f14:	f800283a 	ret

00102f18 <__seofread>:
  102f18:	0005883a 	mov	r2,zero
  102f1c:	f800283a 	ret

00102f20 <__swrite>:
  102f20:	2880030b 	ldhu	r2,12(r5)
  102f24:	defffb04 	addi	sp,sp,-20
  102f28:	dcc00315 	stw	r19,12(sp)
  102f2c:	dc800215 	stw	r18,8(sp)
  102f30:	dc400115 	stw	r17,4(sp)
  102f34:	dc000015 	stw	r16,0(sp)
  102f38:	dfc00415 	stw	ra,16(sp)
  102f3c:	10c0400c 	andi	r3,r2,256
  102f40:	2821883a 	mov	r16,r5
  102f44:	2023883a 	mov	r17,r4
  102f48:	3025883a 	mov	r18,r6
  102f4c:	3827883a 	mov	r19,r7
  102f50:	18000526 	beq	r3,zero,102f68 <__swrite+0x48>
  102f54:	2940038f 	ldh	r5,14(r5)
  102f58:	01c00084 	movi	r7,2
  102f5c:	000d883a 	mov	r6,zero
  102f60:	010bb940 	call	10bb94 <_lseek_r>
  102f64:	8080030b 	ldhu	r2,12(r16)
  102f68:	8140038f 	ldh	r5,14(r16)
  102f6c:	10bbffcc 	andi	r2,r2,61439
  102f70:	980f883a 	mov	r7,r19
  102f74:	900d883a 	mov	r6,r18
  102f78:	8809883a 	mov	r4,r17
  102f7c:	8080030d 	sth	r2,12(r16)
  102f80:	dfc00417 	ldw	ra,16(sp)
  102f84:	dcc00317 	ldw	r19,12(sp)
  102f88:	dc800217 	ldw	r18,8(sp)
  102f8c:	dc400117 	ldw	r17,4(sp)
  102f90:	dc000017 	ldw	r16,0(sp)
  102f94:	dec00504 	addi	sp,sp,20
  102f98:	01093281 	jmpi	109328 <_write_r>

00102f9c <__sseek>:
  102f9c:	defffe04 	addi	sp,sp,-8
  102fa0:	dc000015 	stw	r16,0(sp)
  102fa4:	2821883a 	mov	r16,r5
  102fa8:	2940038f 	ldh	r5,14(r5)
  102fac:	dfc00115 	stw	ra,4(sp)
  102fb0:	010bb940 	call	10bb94 <_lseek_r>
  102fb4:	00ffffc4 	movi	r3,-1
  102fb8:	10c00826 	beq	r2,r3,102fdc <__sseek+0x40>
  102fbc:	80c0030b 	ldhu	r3,12(r16)
  102fc0:	80801415 	stw	r2,80(r16)
  102fc4:	18c40014 	ori	r3,r3,4096
  102fc8:	80c0030d 	sth	r3,12(r16)
  102fcc:	dfc00117 	ldw	ra,4(sp)
  102fd0:	dc000017 	ldw	r16,0(sp)
  102fd4:	dec00204 	addi	sp,sp,8
  102fd8:	f800283a 	ret
  102fdc:	80c0030b 	ldhu	r3,12(r16)
  102fe0:	18fbffcc 	andi	r3,r3,61439
  102fe4:	80c0030d 	sth	r3,12(r16)
  102fe8:	dfc00117 	ldw	ra,4(sp)
  102fec:	dc000017 	ldw	r16,0(sp)
  102ff0:	dec00204 	addi	sp,sp,8
  102ff4:	f800283a 	ret

00102ff8 <__sclose>:
  102ff8:	2940038f 	ldh	r5,14(r5)
  102ffc:	01094dc1 	jmpi	1094dc <_close_r>

00103000 <strcat>:
  103000:	defffe04 	addi	sp,sp,-8
  103004:	dc000015 	stw	r16,0(sp)
  103008:	dfc00115 	stw	ra,4(sp)
  10300c:	208000cc 	andi	r2,r4,3
  103010:	2021883a 	mov	r16,r4
  103014:	1000131e 	bne	r2,zero,103064 <strcat+0x64>
  103018:	20800017 	ldw	r2,0(r4)
  10301c:	01ffbff4 	movhi	r7,65279
  103020:	39ffbfc4 	addi	r7,r7,-257
  103024:	0086303a 	nor	r3,zero,r2
  103028:	01a02074 	movhi	r6,32897
  10302c:	11c5883a 	add	r2,r2,r7
  103030:	31a02004 	addi	r6,r6,-32640
  103034:	10c4703a 	and	r2,r2,r3
  103038:	1184703a 	and	r2,r2,r6
  10303c:	1000091e 	bne	r2,zero,103064 <strcat+0x64>
  103040:	21000104 	addi	r4,r4,4
  103044:	20800017 	ldw	r2,0(r4)
  103048:	11c7883a 	add	r3,r2,r7
  10304c:	0084303a 	nor	r2,zero,r2
  103050:	1884703a 	and	r2,r3,r2
  103054:	1184703a 	and	r2,r2,r6
  103058:	103ff926 	beq	r2,zero,103040 <__alt_data_end+0xfffc3040>
  10305c:	00000106 	br	103064 <strcat+0x64>
  103060:	21000044 	addi	r4,r4,1
  103064:	20800007 	ldb	r2,0(r4)
  103068:	103ffd1e 	bne	r2,zero,103060 <__alt_data_end+0xfffc3060>
  10306c:	01031600 	call	103160 <strcpy>
  103070:	8005883a 	mov	r2,r16
  103074:	dfc00117 	ldw	ra,4(sp)
  103078:	dc000017 	ldw	r16,0(sp)
  10307c:	dec00204 	addi	sp,sp,8
  103080:	f800283a 	ret

00103084 <strcmp>:
  103084:	2144b03a 	or	r2,r4,r5
  103088:	108000cc 	andi	r2,r2,3
  10308c:	1000171e 	bne	r2,zero,1030ec <strcmp+0x68>
  103090:	20800017 	ldw	r2,0(r4)
  103094:	28c00017 	ldw	r3,0(r5)
  103098:	10c0141e 	bne	r2,r3,1030ec <strcmp+0x68>
  10309c:	027fbff4 	movhi	r9,65279
  1030a0:	4a7fbfc4 	addi	r9,r9,-257
  1030a4:	0086303a 	nor	r3,zero,r2
  1030a8:	02202074 	movhi	r8,32897
  1030ac:	1245883a 	add	r2,r2,r9
  1030b0:	42202004 	addi	r8,r8,-32640
  1030b4:	10c4703a 	and	r2,r2,r3
  1030b8:	1204703a 	and	r2,r2,r8
  1030bc:	10000226 	beq	r2,zero,1030c8 <strcmp+0x44>
  1030c0:	00002306 	br	103150 <strcmp+0xcc>
  1030c4:	1000221e 	bne	r2,zero,103150 <strcmp+0xcc>
  1030c8:	21000104 	addi	r4,r4,4
  1030cc:	20c00017 	ldw	r3,0(r4)
  1030d0:	29400104 	addi	r5,r5,4
  1030d4:	29800017 	ldw	r6,0(r5)
  1030d8:	1a4f883a 	add	r7,r3,r9
  1030dc:	00c4303a 	nor	r2,zero,r3
  1030e0:	3884703a 	and	r2,r7,r2
  1030e4:	1204703a 	and	r2,r2,r8
  1030e8:	19bff626 	beq	r3,r6,1030c4 <__alt_data_end+0xfffc30c4>
  1030ec:	20800003 	ldbu	r2,0(r4)
  1030f0:	10c03fcc 	andi	r3,r2,255
  1030f4:	18c0201c 	xori	r3,r3,128
  1030f8:	18ffe004 	addi	r3,r3,-128
  1030fc:	18000c26 	beq	r3,zero,103130 <strcmp+0xac>
  103100:	29800007 	ldb	r6,0(r5)
  103104:	19800326 	beq	r3,r6,103114 <strcmp+0x90>
  103108:	00001306 	br	103158 <strcmp+0xd4>
  10310c:	29800007 	ldb	r6,0(r5)
  103110:	11800b1e 	bne	r2,r6,103140 <strcmp+0xbc>
  103114:	21000044 	addi	r4,r4,1
  103118:	20c00003 	ldbu	r3,0(r4)
  10311c:	29400044 	addi	r5,r5,1
  103120:	18803fcc 	andi	r2,r3,255
  103124:	1080201c 	xori	r2,r2,128
  103128:	10bfe004 	addi	r2,r2,-128
  10312c:	103ff71e 	bne	r2,zero,10310c <__alt_data_end+0xfffc310c>
  103130:	0007883a 	mov	r3,zero
  103134:	28800003 	ldbu	r2,0(r5)
  103138:	1885c83a 	sub	r2,r3,r2
  10313c:	f800283a 	ret
  103140:	28800003 	ldbu	r2,0(r5)
  103144:	18c03fcc 	andi	r3,r3,255
  103148:	1885c83a 	sub	r2,r3,r2
  10314c:	f800283a 	ret
  103150:	0005883a 	mov	r2,zero
  103154:	f800283a 	ret
  103158:	10c03fcc 	andi	r3,r2,255
  10315c:	003ff506 	br	103134 <__alt_data_end+0xfffc3134>

00103160 <strcpy>:
  103160:	2906b03a 	or	r3,r5,r4
  103164:	18c000cc 	andi	r3,r3,3
  103168:	2005883a 	mov	r2,r4
  10316c:	1800161e 	bne	r3,zero,1031c8 <strcpy+0x68>
  103170:	29c00017 	ldw	r7,0(r5)
  103174:	02ffbff4 	movhi	r11,65279
  103178:	5affbfc4 	addi	r11,r11,-257
  10317c:	02a02074 	movhi	r10,32897
  103180:	01c6303a 	nor	r3,zero,r7
  103184:	3ac9883a 	add	r4,r7,r11
  103188:	52a02004 	addi	r10,r10,-32640
  10318c:	20c6703a 	and	r3,r4,r3
  103190:	1a86703a 	and	r3,r3,r10
  103194:	18000c1e 	bne	r3,zero,1031c8 <strcpy+0x68>
  103198:	1011883a 	mov	r8,r2
  10319c:	41c00015 	stw	r7,0(r8)
  1031a0:	29400104 	addi	r5,r5,4
  1031a4:	29c00017 	ldw	r7,0(r5)
  1031a8:	41800104 	addi	r6,r8,4
  1031ac:	3011883a 	mov	r8,r6
  1031b0:	3ad3883a 	add	r9,r7,r11
  1031b4:	01c6303a 	nor	r3,zero,r7
  1031b8:	48c6703a 	and	r3,r9,r3
  1031bc:	1a86703a 	and	r3,r3,r10
  1031c0:	183ff626 	beq	r3,zero,10319c <__alt_data_end+0xfffc319c>
  1031c4:	00000106 	br	1031cc <strcpy+0x6c>
  1031c8:	100d883a 	mov	r6,r2
  1031cc:	28c00003 	ldbu	r3,0(r5)
  1031d0:	31800044 	addi	r6,r6,1
  1031d4:	29400044 	addi	r5,r5,1
  1031d8:	30ffffc5 	stb	r3,-1(r6)
  1031dc:	18c03fcc 	andi	r3,r3,255
  1031e0:	18c0201c 	xori	r3,r3,128
  1031e4:	18ffe004 	addi	r3,r3,-128
  1031e8:	183ff81e 	bne	r3,zero,1031cc <__alt_data_end+0xfffc31cc>
  1031ec:	f800283a 	ret

001031f0 <strlen>:
  1031f0:	208000cc 	andi	r2,r4,3
  1031f4:	10002026 	beq	r2,zero,103278 <strlen+0x88>
  1031f8:	20800007 	ldb	r2,0(r4)
  1031fc:	10002026 	beq	r2,zero,103280 <strlen+0x90>
  103200:	2005883a 	mov	r2,r4
  103204:	00000206 	br	103210 <strlen+0x20>
  103208:	10c00007 	ldb	r3,0(r2)
  10320c:	18001826 	beq	r3,zero,103270 <strlen+0x80>
  103210:	10800044 	addi	r2,r2,1
  103214:	10c000cc 	andi	r3,r2,3
  103218:	183ffb1e 	bne	r3,zero,103208 <__alt_data_end+0xfffc3208>
  10321c:	10c00017 	ldw	r3,0(r2)
  103220:	01ffbff4 	movhi	r7,65279
  103224:	39ffbfc4 	addi	r7,r7,-257
  103228:	00ca303a 	nor	r5,zero,r3
  10322c:	01a02074 	movhi	r6,32897
  103230:	19c7883a 	add	r3,r3,r7
  103234:	31a02004 	addi	r6,r6,-32640
  103238:	1946703a 	and	r3,r3,r5
  10323c:	1986703a 	and	r3,r3,r6
  103240:	1800091e 	bne	r3,zero,103268 <strlen+0x78>
  103244:	10800104 	addi	r2,r2,4
  103248:	10c00017 	ldw	r3,0(r2)
  10324c:	19cb883a 	add	r5,r3,r7
  103250:	00c6303a 	nor	r3,zero,r3
  103254:	28c6703a 	and	r3,r5,r3
  103258:	1986703a 	and	r3,r3,r6
  10325c:	183ff926 	beq	r3,zero,103244 <__alt_data_end+0xfffc3244>
  103260:	00000106 	br	103268 <strlen+0x78>
  103264:	10800044 	addi	r2,r2,1
  103268:	10c00007 	ldb	r3,0(r2)
  10326c:	183ffd1e 	bne	r3,zero,103264 <__alt_data_end+0xfffc3264>
  103270:	1105c83a 	sub	r2,r2,r4
  103274:	f800283a 	ret
  103278:	2005883a 	mov	r2,r4
  10327c:	003fe706 	br	10321c <__alt_data_end+0xfffc321c>
  103280:	0005883a 	mov	r2,zero
  103284:	f800283a 	ret

00103288 <__strtok_r>:
  103288:	20001f26 	beq	r4,zero,103308 <__strtok_r+0x80>
  10328c:	2005883a 	mov	r2,r4
  103290:	22400007 	ldb	r9,0(r4)
  103294:	2807883a 	mov	r3,r5
  103298:	21000044 	addi	r4,r4,1
  10329c:	00000106 	br	1032a4 <__strtok_r+0x1c>
  1032a0:	4a001226 	beq	r9,r8,1032ec <__strtok_r+0x64>
  1032a4:	1a000007 	ldb	r8,0(r3)
  1032a8:	18c00044 	addi	r3,r3,1
  1032ac:	403ffc1e 	bne	r8,zero,1032a0 <__alt_data_end+0xfffc32a0>
  1032b0:	48001926 	beq	r9,zero,103318 <__strtok_r+0x90>
  1032b4:	22000007 	ldb	r8,0(r4)
  1032b8:	2013883a 	mov	r9,r4
  1032bc:	21000044 	addi	r4,r4,1
  1032c0:	2015883a 	mov	r10,r4
  1032c4:	2807883a 	mov	r3,r5
  1032c8:	00000106 	br	1032d0 <__strtok_r+0x48>
  1032cc:	383ff926 	beq	r7,zero,1032b4 <__alt_data_end+0xfffc32b4>
  1032d0:	19c00007 	ldb	r7,0(r3)
  1032d4:	18c00044 	addi	r3,r3,1
  1032d8:	41fffc1e 	bne	r8,r7,1032cc <__alt_data_end+0xfffc32cc>
  1032dc:	40000726 	beq	r8,zero,1032fc <__strtok_r+0x74>
  1032e0:	48000005 	stb	zero,0(r9)
  1032e4:	32800015 	stw	r10,0(r6)
  1032e8:	f800283a 	ret
  1032ec:	383fe71e 	bne	r7,zero,10328c <__alt_data_end+0xfffc328c>
  1032f0:	31000015 	stw	r4,0(r6)
  1032f4:	10000005 	stb	zero,0(r2)
  1032f8:	f800283a 	ret
  1032fc:	0015883a 	mov	r10,zero
  103300:	32800015 	stw	r10,0(r6)
  103304:	f800283a 	ret
  103308:	31000017 	ldw	r4,0(r6)
  10330c:	203fdf1e 	bne	r4,zero,10328c <__alt_data_end+0xfffc328c>
  103310:	0005883a 	mov	r2,zero
  103314:	f800283a 	ret
  103318:	30000015 	stw	zero,0(r6)
  10331c:	0005883a 	mov	r2,zero
  103320:	f800283a 	ret

00103324 <strtok_r>:
  103324:	01c00044 	movi	r7,1
  103328:	01032881 	jmpi	103288 <__strtok_r>

0010332c <___svfprintf_internal_r>:
  10332c:	deffb704 	addi	sp,sp,-292
  103330:	dfc04815 	stw	ra,288(sp)
  103334:	ddc04615 	stw	r23,280(sp)
  103338:	d9402d15 	stw	r5,180(sp)
  10333c:	d9003915 	stw	r4,228(sp)
  103340:	302f883a 	mov	r23,r6
  103344:	d9c02e15 	stw	r7,184(sp)
  103348:	df004715 	stw	fp,284(sp)
  10334c:	dd804515 	stw	r22,276(sp)
  103350:	dd404415 	stw	r21,272(sp)
  103354:	dd004315 	stw	r20,268(sp)
  103358:	dcc04215 	stw	r19,264(sp)
  10335c:	dc804115 	stw	r18,260(sp)
  103360:	dc404015 	stw	r17,256(sp)
  103364:	dc003f15 	stw	r16,252(sp)
  103368:	010bb640 	call	10bb64 <_localeconv_r>
  10336c:	10800017 	ldw	r2,0(r2)
  103370:	1009883a 	mov	r4,r2
  103374:	d8803415 	stw	r2,208(sp)
  103378:	01031f00 	call	1031f0 <strlen>
  10337c:	d8c02d17 	ldw	r3,180(sp)
  103380:	d8803815 	stw	r2,224(sp)
  103384:	1880030b 	ldhu	r2,12(r3)
  103388:	1080200c 	andi	r2,r2,128
  10338c:	10000226 	beq	r2,zero,103398 <___svfprintf_internal_r+0x6c>
  103390:	18800417 	ldw	r2,16(r3)
  103394:	1006b126 	beq	r2,zero,104e5c <___svfprintf_internal_r+0x1b30>
  103398:	dcc03917 	ldw	r19,228(sp)
  10339c:	d8c00404 	addi	r3,sp,16
  1033a0:	054004b4 	movhi	r21,18
  1033a4:	d9001e04 	addi	r4,sp,120
  1033a8:	ad4e5284 	addi	r21,r21,14666
  1033ac:	d8c01e15 	stw	r3,120(sp)
  1033b0:	d8002015 	stw	zero,128(sp)
  1033b4:	d8001f15 	stw	zero,124(sp)
  1033b8:	d8003315 	stw	zero,204(sp)
  1033bc:	d8003615 	stw	zero,216(sp)
  1033c0:	d8003715 	stw	zero,220(sp)
  1033c4:	1811883a 	mov	r8,r3
  1033c8:	d8003a15 	stw	zero,232(sp)
  1033cc:	d8003b15 	stw	zero,236(sp)
  1033d0:	d8002f15 	stw	zero,188(sp)
  1033d4:	d9002815 	stw	r4,160(sp)
  1033d8:	b8800007 	ldb	r2,0(r23)
  1033dc:	10027726 	beq	r2,zero,103dbc <___svfprintf_internal_r+0xa90>
  1033e0:	00c00944 	movi	r3,37
  1033e4:	b823883a 	mov	r17,r23
  1033e8:	10c0021e 	bne	r2,r3,1033f4 <___svfprintf_internal_r+0xc8>
  1033ec:	00001406 	br	103440 <___svfprintf_internal_r+0x114>
  1033f0:	10c00326 	beq	r2,r3,103400 <___svfprintf_internal_r+0xd4>
  1033f4:	8c400044 	addi	r17,r17,1
  1033f8:	88800007 	ldb	r2,0(r17)
  1033fc:	103ffc1e 	bne	r2,zero,1033f0 <__alt_data_end+0xfffc33f0>
  103400:	8de1c83a 	sub	r16,r17,r23
  103404:	80000e26 	beq	r16,zero,103440 <___svfprintf_internal_r+0x114>
  103408:	d8c02017 	ldw	r3,128(sp)
  10340c:	d8801f17 	ldw	r2,124(sp)
  103410:	45c00015 	stw	r23,0(r8)
  103414:	1c07883a 	add	r3,r3,r16
  103418:	10800044 	addi	r2,r2,1
  10341c:	d8c02015 	stw	r3,128(sp)
  103420:	44000115 	stw	r16,4(r8)
  103424:	d8801f15 	stw	r2,124(sp)
  103428:	00c001c4 	movi	r3,7
  10342c:	18809916 	blt	r3,r2,103694 <___svfprintf_internal_r+0x368>
  103430:	42000204 	addi	r8,r8,8
  103434:	d9402f17 	ldw	r5,188(sp)
  103438:	2c0b883a 	add	r5,r5,r16
  10343c:	d9402f15 	stw	r5,188(sp)
  103440:	88800007 	ldb	r2,0(r17)
  103444:	10009a26 	beq	r2,zero,1036b0 <___svfprintf_internal_r+0x384>
  103448:	8dc00044 	addi	r23,r17,1
  10344c:	8c400047 	ldb	r17,1(r17)
  103450:	0021883a 	mov	r16,zero
  103454:	00bfffc4 	movi	r2,-1
  103458:	0025883a 	mov	r18,zero
  10345c:	dc002905 	stb	r16,164(sp)
  103460:	d8002785 	stb	zero,158(sp)
  103464:	d8002b05 	stb	zero,172(sp)
  103468:	d8802a15 	stw	r2,168(sp)
  10346c:	d8003115 	stw	zero,196(sp)
  103470:	05001604 	movi	r20,88
  103474:	05800244 	movi	r22,9
  103478:	4039883a 	mov	fp,r8
  10347c:	9021883a 	mov	r16,r18
  103480:	bdc00044 	addi	r23,r23,1
  103484:	88bff804 	addi	r2,r17,-32
  103488:	a0831e36 	bltu	r20,r2,104104 <___svfprintf_internal_r+0xdd8>
  10348c:	100490ba 	slli	r2,r2,2
  103490:	00c00434 	movhi	r3,16
  103494:	18cd2904 	addi	r3,r3,13476
  103498:	10c5883a 	add	r2,r2,r3
  10349c:	10800017 	ldw	r2,0(r2)
  1034a0:	1000683a 	jmp	r2
  1034a4:	0010404c 	andi	zero,zero,16641
  1034a8:	00104104 	movi	zero,16644
  1034ac:	00104104 	movi	zero,16644
  1034b0:	00104040 	call	10404 <OSCtxSw_SWITCH_PC+0x103c4>
  1034b4:	00104104 	movi	zero,16644
  1034b8:	00104104 	movi	zero,16644
  1034bc:	00104104 	movi	zero,16644
  1034c0:	00104104 	movi	zero,16644
  1034c4:	00104104 	movi	zero,16644
  1034c8:	00104104 	movi	zero,16644
  1034cc:	0010370c 	andi	zero,zero,16604
  1034d0:	00103f50 	cmplti	zero,zero,16637
  1034d4:	00104104 	movi	zero,16644
  1034d8:	00103618 	cmpnei	zero,zero,16600
  1034dc:	00103730 	cmpltui	zero,zero,16604
  1034e0:	00104104 	movi	zero,16644
  1034e4:	001037bc 	xorhi	zero,zero,16606
  1034e8:	00103780 	call	10378 <OSCtxSw_SWITCH_PC+0x10338>
  1034ec:	00103780 	call	10378 <OSCtxSw_SWITCH_PC+0x10338>
  1034f0:	00103780 	call	10378 <OSCtxSw_SWITCH_PC+0x10338>
  1034f4:	00103780 	call	10378 <OSCtxSw_SWITCH_PC+0x10338>
  1034f8:	00103780 	call	10378 <OSCtxSw_SWITCH_PC+0x10338>
  1034fc:	00103780 	call	10378 <OSCtxSw_SWITCH_PC+0x10338>
  103500:	00103780 	call	10378 <OSCtxSw_SWITCH_PC+0x10338>
  103504:	00103780 	call	10378 <OSCtxSw_SWITCH_PC+0x10338>
  103508:	00103780 	call	10378 <OSCtxSw_SWITCH_PC+0x10338>
  10350c:	00104104 	movi	zero,16644
  103510:	00104104 	movi	zero,16644
  103514:	00104104 	movi	zero,16644
  103518:	00104104 	movi	zero,16644
  10351c:	00104104 	movi	zero,16644
  103520:	00104104 	movi	zero,16644
  103524:	00104104 	movi	zero,16644
  103528:	00104104 	movi	zero,16644
  10352c:	00104104 	movi	zero,16644
  103530:	00104104 	movi	zero,16644
  103534:	00103880 	call	10388 <OSCtxSw_SWITCH_PC+0x10348>
  103538:	001037c8 	cmpgei	zero,zero,16607
  10353c:	00104104 	movi	zero,16644
  103540:	001037c8 	cmpgei	zero,zero,16607
  103544:	00104104 	movi	zero,16644
  103548:	00104104 	movi	zero,16644
  10354c:	00104104 	movi	zero,16644
  103550:	00104104 	movi	zero,16644
  103554:	00103874 	movhi	zero,16609
  103558:	00104104 	movi	zero,16644
  10355c:	00104104 	movi	zero,16644
  103560:	00103948 	cmpgei	zero,zero,16613
  103564:	00104104 	movi	zero,16644
  103568:	00104104 	movi	zero,16644
  10356c:	00104104 	movi	zero,16644
  103570:	00104104 	movi	zero,16644
  103574:	00104104 	movi	zero,16644
  103578:	00103dc4 	movi	zero,16631
  10357c:	00104104 	movi	zero,16644
  103580:	00104104 	movi	zero,16644
  103584:	00103e30 	cmpltui	zero,zero,16632
  103588:	00104104 	movi	zero,16644
  10358c:	00104104 	movi	zero,16644
  103590:	00104104 	movi	zero,16644
  103594:	00104104 	movi	zero,16644
  103598:	00104104 	movi	zero,16644
  10359c:	00104104 	movi	zero,16644
  1035a0:	00104104 	movi	zero,16644
  1035a4:	00104104 	movi	zero,16644
  1035a8:	00104104 	movi	zero,16644
  1035ac:	00104104 	movi	zero,16644
  1035b0:	00103eec 	andhi	zero,zero,16635
  1035b4:	0010406c 	andhi	zero,zero,16641
  1035b8:	001037c8 	cmpgei	zero,zero,16607
  1035bc:	001037c8 	cmpgei	zero,zero,16607
  1035c0:	001037c8 	cmpgei	zero,zero,16607
  1035c4:	001040e0 	cmpeqi	zero,zero,16643
  1035c8:	0010406c 	andhi	zero,zero,16641
  1035cc:	00104104 	movi	zero,16644
  1035d0:	00104104 	movi	zero,16644
  1035d4:	0010408c 	andi	zero,zero,16642
  1035d8:	00104104 	movi	zero,16644
  1035dc:	001040a0 	cmpeqi	zero,zero,16642
  1035e0:	00103f30 	cmpltui	zero,zero,16636
  1035e4:	00103624 	muli	zero,zero,16600
  1035e8:	00103f68 	cmpgeui	zero,zero,16637
  1035ec:	00104104 	movi	zero,16644
  1035f0:	00103f74 	movhi	zero,16637
  1035f4:	00104104 	movi	zero,16644
  1035f8:	00103fd8 	cmpnei	zero,zero,16639
  1035fc:	00104104 	movi	zero,16644
  103600:	00104104 	movi	zero,16644
  103604:	00103ff8 	rdprs	zero,zero,16639
  103608:	d8c03117 	ldw	r3,196(sp)
  10360c:	d8802e15 	stw	r2,184(sp)
  103610:	00c7c83a 	sub	r3,zero,r3
  103614:	d8c03115 	stw	r3,196(sp)
  103618:	84000114 	ori	r16,r16,4
  10361c:	bc400007 	ldb	r17,0(r23)
  103620:	003f9706 	br	103480 <__alt_data_end+0xfffc3480>
  103624:	00800c04 	movi	r2,48
  103628:	d8802705 	stb	r2,156(sp)
  10362c:	00801e04 	movi	r2,120
  103630:	d8802745 	stb	r2,157(sp)
  103634:	d9002a17 	ldw	r4,168(sp)
  103638:	d8802e17 	ldw	r2,184(sp)
  10363c:	d8002785 	stb	zero,158(sp)
  103640:	e011883a 	mov	r8,fp
  103644:	10c00104 	addi	r3,r2,4
  103648:	15000017 	ldw	r20,0(r2)
  10364c:	002d883a 	mov	r22,zero
  103650:	80800094 	ori	r2,r16,2
  103654:	2002b616 	blt	r4,zero,104130 <___svfprintf_internal_r+0xe04>
  103658:	00bfdfc4 	movi	r2,-129
  10365c:	80a4703a 	and	r18,r16,r2
  103660:	d8c02e15 	stw	r3,184(sp)
  103664:	94800094 	ori	r18,r18,2
  103668:	a002a01e 	bne	r20,zero,1040ec <___svfprintf_internal_r+0xdc0>
  10366c:	014004b4 	movhi	r5,18
  103670:	294e4b04 	addi	r5,r5,14636
  103674:	d9403a15 	stw	r5,232(sp)
  103678:	04401e04 	movi	r17,120
  10367c:	d8c02a17 	ldw	r3,168(sp)
  103680:	0039883a 	mov	fp,zero
  103684:	1801e626 	beq	r3,zero,103e20 <___svfprintf_internal_r+0xaf4>
  103688:	0029883a 	mov	r20,zero
  10368c:	002d883a 	mov	r22,zero
  103690:	00020506 	br	103ea8 <___svfprintf_internal_r+0xb7c>
  103694:	d9402d17 	ldw	r5,180(sp)
  103698:	d9801e04 	addi	r6,sp,120
  10369c:	9809883a 	mov	r4,r19
  1036a0:	010fb840 	call	10fb84 <__ssprint_r>
  1036a4:	1000081e 	bne	r2,zero,1036c8 <___svfprintf_internal_r+0x39c>
  1036a8:	da000404 	addi	r8,sp,16
  1036ac:	003f6106 	br	103434 <__alt_data_end+0xfffc3434>
  1036b0:	d8802017 	ldw	r2,128(sp)
  1036b4:	10000426 	beq	r2,zero,1036c8 <___svfprintf_internal_r+0x39c>
  1036b8:	d9402d17 	ldw	r5,180(sp)
  1036bc:	d9003917 	ldw	r4,228(sp)
  1036c0:	d9801e04 	addi	r6,sp,120
  1036c4:	010fb840 	call	10fb84 <__ssprint_r>
  1036c8:	d8802d17 	ldw	r2,180(sp)
  1036cc:	10c0030b 	ldhu	r3,12(r2)
  1036d0:	d8802f17 	ldw	r2,188(sp)
  1036d4:	18c0100c 	andi	r3,r3,64
  1036d8:	1806251e 	bne	r3,zero,104f70 <___svfprintf_internal_r+0x1c44>
  1036dc:	dfc04817 	ldw	ra,288(sp)
  1036e0:	df004717 	ldw	fp,284(sp)
  1036e4:	ddc04617 	ldw	r23,280(sp)
  1036e8:	dd804517 	ldw	r22,276(sp)
  1036ec:	dd404417 	ldw	r21,272(sp)
  1036f0:	dd004317 	ldw	r20,268(sp)
  1036f4:	dcc04217 	ldw	r19,264(sp)
  1036f8:	dc804117 	ldw	r18,260(sp)
  1036fc:	dc404017 	ldw	r17,256(sp)
  103700:	dc003f17 	ldw	r16,252(sp)
  103704:	dec04904 	addi	sp,sp,292
  103708:	f800283a 	ret
  10370c:	d9002e17 	ldw	r4,184(sp)
  103710:	d9402e17 	ldw	r5,184(sp)
  103714:	21000017 	ldw	r4,0(r4)
  103718:	28800104 	addi	r2,r5,4
  10371c:	d9003115 	stw	r4,196(sp)
  103720:	203fb916 	blt	r4,zero,103608 <__alt_data_end+0xfffc3608>
  103724:	d8802e15 	stw	r2,184(sp)
  103728:	bc400007 	ldb	r17,0(r23)
  10372c:	003f5406 	br	103480 <__alt_data_end+0xfffc3480>
  103730:	bc400007 	ldb	r17,0(r23)
  103734:	01000a84 	movi	r4,42
  103738:	b8c00044 	addi	r3,r23,1
  10373c:	89076926 	beq	r17,r4,1054e4 <___svfprintf_internal_r+0x21b8>
  103740:	8cbff404 	addi	r18,r17,-48
  103744:	b486b936 	bltu	r22,r18,10522c <___svfprintf_internal_r+0x1f00>
  103748:	0009883a 	mov	r4,zero
  10374c:	1823883a 	mov	r17,r3
  103750:	01400284 	movi	r5,10
  103754:	01160740 	call	116074 <__mulsi3>
  103758:	88c00007 	ldb	r3,0(r17)
  10375c:	1489883a 	add	r4,r2,r18
  103760:	8dc00044 	addi	r23,r17,1
  103764:	1cbff404 	addi	r18,r3,-48
  103768:	b823883a 	mov	r17,r23
  10376c:	b4bff82e 	bgeu	r22,r18,103750 <__alt_data_end+0xfffc3750>
  103770:	1823883a 	mov	r17,r3
  103774:	20060416 	blt	r4,zero,104f88 <___svfprintf_internal_r+0x1c5c>
  103778:	d9002a15 	stw	r4,168(sp)
  10377c:	003f4106 	br	103484 <__alt_data_end+0xfffc3484>
  103780:	8cbff404 	addi	r18,r17,-48
  103784:	d8003115 	stw	zero,196(sp)
  103788:	0009883a 	mov	r4,zero
  10378c:	b823883a 	mov	r17,r23
  103790:	01400284 	movi	r5,10
  103794:	01160740 	call	116074 <__mulsi3>
  103798:	88c00007 	ldb	r3,0(r17)
  10379c:	9089883a 	add	r4,r18,r2
  1037a0:	bdc00044 	addi	r23,r23,1
  1037a4:	1cbff404 	addi	r18,r3,-48
  1037a8:	b823883a 	mov	r17,r23
  1037ac:	b4bff82e 	bgeu	r22,r18,103790 <__alt_data_end+0xfffc3790>
  1037b0:	1823883a 	mov	r17,r3
  1037b4:	d9003115 	stw	r4,196(sp)
  1037b8:	003f3206 	br	103484 <__alt_data_end+0xfffc3484>
  1037bc:	84002014 	ori	r16,r16,128
  1037c0:	bc400007 	ldb	r17,0(r23)
  1037c4:	003f2e06 	br	103480 <__alt_data_end+0xfffc3480>
  1037c8:	8025883a 	mov	r18,r16
  1037cc:	dc002903 	ldbu	r16,164(sp)
  1037d0:	e011883a 	mov	r8,fp
  1037d4:	84003fcc 	andi	r16,r16,255
  1037d8:	8007721e 	bne	r16,zero,1055a4 <___svfprintf_internal_r+0x2278>
  1037dc:	9080020c 	andi	r2,r18,8
  1037e0:	1004a526 	beq	r2,zero,104a78 <___svfprintf_internal_r+0x174c>
  1037e4:	d9002e17 	ldw	r4,184(sp)
  1037e8:	d9402e17 	ldw	r5,184(sp)
  1037ec:	d8802e17 	ldw	r2,184(sp)
  1037f0:	21000017 	ldw	r4,0(r4)
  1037f4:	29400117 	ldw	r5,4(r5)
  1037f8:	10800204 	addi	r2,r2,8
  1037fc:	d9003615 	stw	r4,216(sp)
  103800:	d9403715 	stw	r5,220(sp)
  103804:	d8802e15 	stw	r2,184(sp)
  103808:	d9003617 	ldw	r4,216(sp)
  10380c:	d9403717 	ldw	r5,220(sp)
  103810:	da003e15 	stw	r8,248(sp)
  103814:	04000044 	movi	r16,1
  103818:	010d7ac0 	call	10d7ac <__fpclassifyd>
  10381c:	da003e17 	ldw	r8,248(sp)
  103820:	1404731e 	bne	r2,r16,1049f0 <___svfprintf_internal_r+0x16c4>
  103824:	d9003617 	ldw	r4,216(sp)
  103828:	d9403717 	ldw	r5,220(sp)
  10382c:	000d883a 	mov	r6,zero
  103830:	000f883a 	mov	r7,zero
  103834:	01176780 	call	117678 <__ledf2>
  103838:	da003e17 	ldw	r8,248(sp)
  10383c:	10061b16 	blt	r2,zero,1050ac <___svfprintf_internal_r+0x1d80>
  103840:	df002783 	ldbu	fp,158(sp)
  103844:	008011c4 	movi	r2,71
  103848:	1445810e 	bge	r2,r17,104e50 <___svfprintf_internal_r+0x1b24>
  10384c:	040004b4 	movhi	r16,18
  103850:	840e4304 	addi	r16,r16,14604
  103854:	00c000c4 	movi	r3,3
  103858:	00bfdfc4 	movi	r2,-129
  10385c:	d8c02915 	stw	r3,164(sp)
  103860:	90a4703a 	and	r18,r18,r2
  103864:	d8c02b15 	stw	r3,172(sp)
  103868:	d8002a15 	stw	zero,168(sp)
  10386c:	d8003215 	stw	zero,200(sp)
  103870:	00006c06 	br	103a24 <___svfprintf_internal_r+0x6f8>
  103874:	84000214 	ori	r16,r16,8
  103878:	bc400007 	ldb	r17,0(r23)
  10387c:	003f0006 	br	103480 <__alt_data_end+0xfffc3480>
  103880:	8025883a 	mov	r18,r16
  103884:	dc002903 	ldbu	r16,164(sp)
  103888:	e011883a 	mov	r8,fp
  10388c:	84003fcc 	andi	r16,r16,255
  103890:	80073f1e 	bne	r16,zero,105590 <___svfprintf_internal_r+0x2264>
  103894:	94800414 	ori	r18,r18,16
  103898:	9080080c 	andi	r2,r18,32
  10389c:	1003bb26 	beq	r2,zero,10478c <___svfprintf_internal_r+0x1460>
  1038a0:	d9002e17 	ldw	r4,184(sp)
  1038a4:	20800117 	ldw	r2,4(r4)
  1038a8:	25000017 	ldw	r20,0(r4)
  1038ac:	21000204 	addi	r4,r4,8
  1038b0:	d9002e15 	stw	r4,184(sp)
  1038b4:	102d883a 	mov	r22,r2
  1038b8:	1003bd16 	blt	r2,zero,1047b0 <___svfprintf_internal_r+0x1484>
  1038bc:	d9002a17 	ldw	r4,168(sp)
  1038c0:	df002783 	ldbu	fp,158(sp)
  1038c4:	2003d016 	blt	r4,zero,104808 <___svfprintf_internal_r+0x14dc>
  1038c8:	00ffdfc4 	movi	r3,-129
  1038cc:	a584b03a 	or	r2,r20,r22
  1038d0:	90e4703a 	and	r18,r18,r3
  1038d4:	10015026 	beq	r2,zero,103e18 <___svfprintf_internal_r+0xaec>
  1038d8:	b0037026 	beq	r22,zero,10469c <___svfprintf_internal_r+0x1370>
  1038dc:	dc402915 	stw	r17,164(sp)
  1038e0:	dc001e04 	addi	r16,sp,120
  1038e4:	b023883a 	mov	r17,r22
  1038e8:	402d883a 	mov	r22,r8
  1038ec:	a009883a 	mov	r4,r20
  1038f0:	880b883a 	mov	r5,r17
  1038f4:	01800284 	movi	r6,10
  1038f8:	000f883a 	mov	r7,zero
  1038fc:	01158fc0 	call	1158fc <__umoddi3>
  103900:	10800c04 	addi	r2,r2,48
  103904:	843fffc4 	addi	r16,r16,-1
  103908:	a009883a 	mov	r4,r20
  10390c:	880b883a 	mov	r5,r17
  103910:	80800005 	stb	r2,0(r16)
  103914:	01800284 	movi	r6,10
  103918:	000f883a 	mov	r7,zero
  10391c:	01153000 	call	115300 <__udivdi3>
  103920:	1029883a 	mov	r20,r2
  103924:	10c4b03a 	or	r2,r2,r3
  103928:	1823883a 	mov	r17,r3
  10392c:	103fef1e 	bne	r2,zero,1038ec <__alt_data_end+0xfffc38ec>
  103930:	d8c02817 	ldw	r3,160(sp)
  103934:	dc402917 	ldw	r17,164(sp)
  103938:	b011883a 	mov	r8,r22
  10393c:	1c07c83a 	sub	r3,r3,r16
  103940:	d8c02b15 	stw	r3,172(sp)
  103944:	00003106 	br	103a0c <___svfprintf_internal_r+0x6e0>
  103948:	8025883a 	mov	r18,r16
  10394c:	dc002903 	ldbu	r16,164(sp)
  103950:	e011883a 	mov	r8,fp
  103954:	84003fcc 	andi	r16,r16,255
  103958:	80070a1e 	bne	r16,zero,105584 <___svfprintf_internal_r+0x2258>
  10395c:	94800414 	ori	r18,r18,16
  103960:	9080080c 	andi	r2,r18,32
  103964:	1002f626 	beq	r2,zero,104540 <___svfprintf_internal_r+0x1214>
  103968:	d9002e17 	ldw	r4,184(sp)
  10396c:	d9402a17 	ldw	r5,168(sp)
  103970:	d8002785 	stb	zero,158(sp)
  103974:	20800204 	addi	r2,r4,8
  103978:	25000017 	ldw	r20,0(r4)
  10397c:	25800117 	ldw	r22,4(r4)
  103980:	28043716 	blt	r5,zero,104a60 <___svfprintf_internal_r+0x1734>
  103984:	013fdfc4 	movi	r4,-129
  103988:	a586b03a 	or	r3,r20,r22
  10398c:	d8802e15 	stw	r2,184(sp)
  103990:	9124703a 	and	r18,r18,r4
  103994:	1802f71e 	bne	r3,zero,104574 <___svfprintf_internal_r+0x1248>
  103998:	d9402a17 	ldw	r5,168(sp)
  10399c:	0039883a 	mov	fp,zero
  1039a0:	2806df26 	beq	r5,zero,105520 <___svfprintf_internal_r+0x21f4>
  1039a4:	0029883a 	mov	r20,zero
  1039a8:	002d883a 	mov	r22,zero
  1039ac:	dc001e04 	addi	r16,sp,120
  1039b0:	a006d0fa 	srli	r3,r20,3
  1039b4:	b008977a 	slli	r4,r22,29
  1039b8:	b02cd0fa 	srli	r22,r22,3
  1039bc:	a50001cc 	andi	r20,r20,7
  1039c0:	a0800c04 	addi	r2,r20,48
  1039c4:	843fffc4 	addi	r16,r16,-1
  1039c8:	20e8b03a 	or	r20,r4,r3
  1039cc:	80800005 	stb	r2,0(r16)
  1039d0:	a586b03a 	or	r3,r20,r22
  1039d4:	183ff61e 	bne	r3,zero,1039b0 <__alt_data_end+0xfffc39b0>
  1039d8:	90c0004c 	andi	r3,r18,1
  1039dc:	18013f26 	beq	r3,zero,103edc <___svfprintf_internal_r+0xbb0>
  1039e0:	10803fcc 	andi	r2,r2,255
  1039e4:	1080201c 	xori	r2,r2,128
  1039e8:	10bfe004 	addi	r2,r2,-128
  1039ec:	00c00c04 	movi	r3,48
  1039f0:	10c13a26 	beq	r2,r3,103edc <___svfprintf_internal_r+0xbb0>
  1039f4:	80ffffc5 	stb	r3,-1(r16)
  1039f8:	d8c02817 	ldw	r3,160(sp)
  1039fc:	80bfffc4 	addi	r2,r16,-1
  103a00:	1021883a 	mov	r16,r2
  103a04:	1887c83a 	sub	r3,r3,r2
  103a08:	d8c02b15 	stw	r3,172(sp)
  103a0c:	d8802b17 	ldw	r2,172(sp)
  103a10:	d9002a17 	ldw	r4,168(sp)
  103a14:	1100010e 	bge	r2,r4,103a1c <___svfprintf_internal_r+0x6f0>
  103a18:	2005883a 	mov	r2,r4
  103a1c:	d8802915 	stw	r2,164(sp)
  103a20:	d8003215 	stw	zero,200(sp)
  103a24:	e7003fcc 	andi	fp,fp,255
  103a28:	e700201c 	xori	fp,fp,128
  103a2c:	e73fe004 	addi	fp,fp,-128
  103a30:	e0000326 	beq	fp,zero,103a40 <___svfprintf_internal_r+0x714>
  103a34:	d8c02917 	ldw	r3,164(sp)
  103a38:	18c00044 	addi	r3,r3,1
  103a3c:	d8c02915 	stw	r3,164(sp)
  103a40:	90c0008c 	andi	r3,r18,2
  103a44:	d8c02c15 	stw	r3,176(sp)
  103a48:	18000326 	beq	r3,zero,103a58 <___svfprintf_internal_r+0x72c>
  103a4c:	d8c02917 	ldw	r3,164(sp)
  103a50:	18c00084 	addi	r3,r3,2
  103a54:	d8c02915 	stw	r3,164(sp)
  103a58:	90c0210c 	andi	r3,r18,132
  103a5c:	d8c03015 	stw	r3,192(sp)
  103a60:	1801c31e 	bne	r3,zero,104170 <___svfprintf_internal_r+0xe44>
  103a64:	d9003117 	ldw	r4,196(sp)
  103a68:	d8c02917 	ldw	r3,164(sp)
  103a6c:	20e9c83a 	sub	r20,r4,r3
  103a70:	0501bf0e 	bge	zero,r20,104170 <___svfprintf_internal_r+0xe44>
  103a74:	02400404 	movi	r9,16
  103a78:	d8c02017 	ldw	r3,128(sp)
  103a7c:	d8801f17 	ldw	r2,124(sp)
  103a80:	4d053d0e 	bge	r9,r20,104f78 <___svfprintf_internal_r+0x1c4c>
  103a84:	014004b4 	movhi	r5,18
  103a88:	294e5684 	addi	r5,r5,14682
  103a8c:	dc403c15 	stw	r17,240(sp)
  103a90:	d9403515 	stw	r5,212(sp)
  103a94:	a023883a 	mov	r17,r20
  103a98:	482d883a 	mov	r22,r9
  103a9c:	9029883a 	mov	r20,r18
  103aa0:	070001c4 	movi	fp,7
  103aa4:	8025883a 	mov	r18,r16
  103aa8:	dc002d17 	ldw	r16,180(sp)
  103aac:	00000306 	br	103abc <___svfprintf_internal_r+0x790>
  103ab0:	8c7ffc04 	addi	r17,r17,-16
  103ab4:	42000204 	addi	r8,r8,8
  103ab8:	b440130e 	bge	r22,r17,103b08 <___svfprintf_internal_r+0x7dc>
  103abc:	010004b4 	movhi	r4,18
  103ac0:	18c00404 	addi	r3,r3,16
  103ac4:	10800044 	addi	r2,r2,1
  103ac8:	210e5684 	addi	r4,r4,14682
  103acc:	41000015 	stw	r4,0(r8)
  103ad0:	45800115 	stw	r22,4(r8)
  103ad4:	d8c02015 	stw	r3,128(sp)
  103ad8:	d8801f15 	stw	r2,124(sp)
  103adc:	e0bff40e 	bge	fp,r2,103ab0 <__alt_data_end+0xfffc3ab0>
  103ae0:	d9801e04 	addi	r6,sp,120
  103ae4:	800b883a 	mov	r5,r16
  103ae8:	9809883a 	mov	r4,r19
  103aec:	010fb840 	call	10fb84 <__ssprint_r>
  103af0:	103ef51e 	bne	r2,zero,1036c8 <__alt_data_end+0xfffc36c8>
  103af4:	8c7ffc04 	addi	r17,r17,-16
  103af8:	d8c02017 	ldw	r3,128(sp)
  103afc:	d8801f17 	ldw	r2,124(sp)
  103b00:	da000404 	addi	r8,sp,16
  103b04:	b47fed16 	blt	r22,r17,103abc <__alt_data_end+0xfffc3abc>
  103b08:	9021883a 	mov	r16,r18
  103b0c:	a025883a 	mov	r18,r20
  103b10:	8829883a 	mov	r20,r17
  103b14:	dc403c17 	ldw	r17,240(sp)
  103b18:	d9403517 	ldw	r5,212(sp)
  103b1c:	a0c7883a 	add	r3,r20,r3
  103b20:	10800044 	addi	r2,r2,1
  103b24:	41400015 	stw	r5,0(r8)
  103b28:	45000115 	stw	r20,4(r8)
  103b2c:	d8c02015 	stw	r3,128(sp)
  103b30:	d8801f15 	stw	r2,124(sp)
  103b34:	010001c4 	movi	r4,7
  103b38:	2082c116 	blt	r4,r2,104640 <___svfprintf_internal_r+0x1314>
  103b3c:	df002787 	ldb	fp,158(sp)
  103b40:	42000204 	addi	r8,r8,8
  103b44:	e0000c26 	beq	fp,zero,103b78 <___svfprintf_internal_r+0x84c>
  103b48:	d8801f17 	ldw	r2,124(sp)
  103b4c:	d9002784 	addi	r4,sp,158
  103b50:	18c00044 	addi	r3,r3,1
  103b54:	10800044 	addi	r2,r2,1
  103b58:	41000015 	stw	r4,0(r8)
  103b5c:	01000044 	movi	r4,1
  103b60:	41000115 	stw	r4,4(r8)
  103b64:	d8c02015 	stw	r3,128(sp)
  103b68:	d8801f15 	stw	r2,124(sp)
  103b6c:	010001c4 	movi	r4,7
  103b70:	20825a16 	blt	r4,r2,1044dc <___svfprintf_internal_r+0x11b0>
  103b74:	42000204 	addi	r8,r8,8
  103b78:	d8802c17 	ldw	r2,176(sp)
  103b7c:	10000c26 	beq	r2,zero,103bb0 <___svfprintf_internal_r+0x884>
  103b80:	d8801f17 	ldw	r2,124(sp)
  103b84:	d9002704 	addi	r4,sp,156
  103b88:	18c00084 	addi	r3,r3,2
  103b8c:	10800044 	addi	r2,r2,1
  103b90:	41000015 	stw	r4,0(r8)
  103b94:	01000084 	movi	r4,2
  103b98:	41000115 	stw	r4,4(r8)
  103b9c:	d8c02015 	stw	r3,128(sp)
  103ba0:	d8801f15 	stw	r2,124(sp)
  103ba4:	010001c4 	movi	r4,7
  103ba8:	20825416 	blt	r4,r2,1044fc <___svfprintf_internal_r+0x11d0>
  103bac:	42000204 	addi	r8,r8,8
  103bb0:	d9003017 	ldw	r4,192(sp)
  103bb4:	00802004 	movi	r2,128
  103bb8:	2081b926 	beq	r4,r2,1042a0 <___svfprintf_internal_r+0xf74>
  103bbc:	d9402a17 	ldw	r5,168(sp)
  103bc0:	d8802b17 	ldw	r2,172(sp)
  103bc4:	28adc83a 	sub	r22,r5,r2
  103bc8:	05802f0e 	bge	zero,r22,103c88 <___svfprintf_internal_r+0x95c>
  103bcc:	07000404 	movi	fp,16
  103bd0:	d8801f17 	ldw	r2,124(sp)
  103bd4:	e583e20e 	bge	fp,r22,104b60 <___svfprintf_internal_r+0x1834>
  103bd8:	014004b4 	movhi	r5,18
  103bdc:	294e5284 	addi	r5,r5,14666
  103be0:	dc402a15 	stw	r17,168(sp)
  103be4:	d9402c15 	stw	r5,176(sp)
  103be8:	b023883a 	mov	r17,r22
  103bec:	050001c4 	movi	r20,7
  103bf0:	902d883a 	mov	r22,r18
  103bf4:	8025883a 	mov	r18,r16
  103bf8:	dc002d17 	ldw	r16,180(sp)
  103bfc:	00000306 	br	103c0c <___svfprintf_internal_r+0x8e0>
  103c00:	8c7ffc04 	addi	r17,r17,-16
  103c04:	42000204 	addi	r8,r8,8
  103c08:	e440110e 	bge	fp,r17,103c50 <___svfprintf_internal_r+0x924>
  103c0c:	18c00404 	addi	r3,r3,16
  103c10:	10800044 	addi	r2,r2,1
  103c14:	45400015 	stw	r21,0(r8)
  103c18:	47000115 	stw	fp,4(r8)
  103c1c:	d8c02015 	stw	r3,128(sp)
  103c20:	d8801f15 	stw	r2,124(sp)
  103c24:	a0bff60e 	bge	r20,r2,103c00 <__alt_data_end+0xfffc3c00>
  103c28:	d9801e04 	addi	r6,sp,120
  103c2c:	800b883a 	mov	r5,r16
  103c30:	9809883a 	mov	r4,r19
  103c34:	010fb840 	call	10fb84 <__ssprint_r>
  103c38:	103ea31e 	bne	r2,zero,1036c8 <__alt_data_end+0xfffc36c8>
  103c3c:	8c7ffc04 	addi	r17,r17,-16
  103c40:	d8c02017 	ldw	r3,128(sp)
  103c44:	d8801f17 	ldw	r2,124(sp)
  103c48:	da000404 	addi	r8,sp,16
  103c4c:	e47fef16 	blt	fp,r17,103c0c <__alt_data_end+0xfffc3c0c>
  103c50:	9021883a 	mov	r16,r18
  103c54:	b025883a 	mov	r18,r22
  103c58:	882d883a 	mov	r22,r17
  103c5c:	dc402a17 	ldw	r17,168(sp)
  103c60:	d9002c17 	ldw	r4,176(sp)
  103c64:	1d87883a 	add	r3,r3,r22
  103c68:	10800044 	addi	r2,r2,1
  103c6c:	41000015 	stw	r4,0(r8)
  103c70:	45800115 	stw	r22,4(r8)
  103c74:	d8c02015 	stw	r3,128(sp)
  103c78:	d8801f15 	stw	r2,124(sp)
  103c7c:	010001c4 	movi	r4,7
  103c80:	20820e16 	blt	r4,r2,1044bc <___svfprintf_internal_r+0x1190>
  103c84:	42000204 	addi	r8,r8,8
  103c88:	9080400c 	andi	r2,r18,256
  103c8c:	10013a1e 	bne	r2,zero,104178 <___svfprintf_internal_r+0xe4c>
  103c90:	d9402b17 	ldw	r5,172(sp)
  103c94:	d8801f17 	ldw	r2,124(sp)
  103c98:	44000015 	stw	r16,0(r8)
  103c9c:	1947883a 	add	r3,r3,r5
  103ca0:	10800044 	addi	r2,r2,1
  103ca4:	41400115 	stw	r5,4(r8)
  103ca8:	d8c02015 	stw	r3,128(sp)
  103cac:	d8801f15 	stw	r2,124(sp)
  103cb0:	010001c4 	movi	r4,7
  103cb4:	2081f316 	blt	r4,r2,104484 <___svfprintf_internal_r+0x1158>
  103cb8:	42000204 	addi	r8,r8,8
  103cbc:	9480010c 	andi	r18,r18,4
  103cc0:	90003226 	beq	r18,zero,103d8c <___svfprintf_internal_r+0xa60>
  103cc4:	d9403117 	ldw	r5,196(sp)
  103cc8:	d8802917 	ldw	r2,164(sp)
  103ccc:	28a1c83a 	sub	r16,r5,r2
  103cd0:	04002e0e 	bge	zero,r16,103d8c <___svfprintf_internal_r+0xa60>
  103cd4:	04400404 	movi	r17,16
  103cd8:	d8801f17 	ldw	r2,124(sp)
  103cdc:	8c04db0e 	bge	r17,r16,10504c <___svfprintf_internal_r+0x1d20>
  103ce0:	014004b4 	movhi	r5,18
  103ce4:	294e5684 	addi	r5,r5,14682
  103ce8:	d9403515 	stw	r5,212(sp)
  103cec:	048001c4 	movi	r18,7
  103cf0:	dd002d17 	ldw	r20,180(sp)
  103cf4:	00000306 	br	103d04 <___svfprintf_internal_r+0x9d8>
  103cf8:	843ffc04 	addi	r16,r16,-16
  103cfc:	42000204 	addi	r8,r8,8
  103d00:	8c00130e 	bge	r17,r16,103d50 <___svfprintf_internal_r+0xa24>
  103d04:	010004b4 	movhi	r4,18
  103d08:	18c00404 	addi	r3,r3,16
  103d0c:	10800044 	addi	r2,r2,1
  103d10:	210e5684 	addi	r4,r4,14682
  103d14:	41000015 	stw	r4,0(r8)
  103d18:	44400115 	stw	r17,4(r8)
  103d1c:	d8c02015 	stw	r3,128(sp)
  103d20:	d8801f15 	stw	r2,124(sp)
  103d24:	90bff40e 	bge	r18,r2,103cf8 <__alt_data_end+0xfffc3cf8>
  103d28:	d9801e04 	addi	r6,sp,120
  103d2c:	a00b883a 	mov	r5,r20
  103d30:	9809883a 	mov	r4,r19
  103d34:	010fb840 	call	10fb84 <__ssprint_r>
  103d38:	103e631e 	bne	r2,zero,1036c8 <__alt_data_end+0xfffc36c8>
  103d3c:	843ffc04 	addi	r16,r16,-16
  103d40:	d8c02017 	ldw	r3,128(sp)
  103d44:	d8801f17 	ldw	r2,124(sp)
  103d48:	da000404 	addi	r8,sp,16
  103d4c:	8c3fed16 	blt	r17,r16,103d04 <__alt_data_end+0xfffc3d04>
  103d50:	d9403517 	ldw	r5,212(sp)
  103d54:	1c07883a 	add	r3,r3,r16
  103d58:	10800044 	addi	r2,r2,1
  103d5c:	41400015 	stw	r5,0(r8)
  103d60:	44000115 	stw	r16,4(r8)
  103d64:	d8c02015 	stw	r3,128(sp)
  103d68:	d8801f15 	stw	r2,124(sp)
  103d6c:	010001c4 	movi	r4,7
  103d70:	2080060e 	bge	r4,r2,103d8c <___svfprintf_internal_r+0xa60>
  103d74:	d9402d17 	ldw	r5,180(sp)
  103d78:	d9801e04 	addi	r6,sp,120
  103d7c:	9809883a 	mov	r4,r19
  103d80:	010fb840 	call	10fb84 <__ssprint_r>
  103d84:	103e501e 	bne	r2,zero,1036c8 <__alt_data_end+0xfffc36c8>
  103d88:	d8c02017 	ldw	r3,128(sp)
  103d8c:	d8803117 	ldw	r2,196(sp)
  103d90:	d9002917 	ldw	r4,164(sp)
  103d94:	1100010e 	bge	r2,r4,103d9c <___svfprintf_internal_r+0xa70>
  103d98:	2005883a 	mov	r2,r4
  103d9c:	d9402f17 	ldw	r5,188(sp)
  103da0:	288b883a 	add	r5,r5,r2
  103da4:	d9402f15 	stw	r5,188(sp)
  103da8:	1801be1e 	bne	r3,zero,1044a4 <___svfprintf_internal_r+0x1178>
  103dac:	b8800007 	ldb	r2,0(r23)
  103db0:	d8001f15 	stw	zero,124(sp)
  103db4:	da000404 	addi	r8,sp,16
  103db8:	103d891e 	bne	r2,zero,1033e0 <__alt_data_end+0xfffc33e0>
  103dbc:	b823883a 	mov	r17,r23
  103dc0:	003d9f06 	br	103440 <__alt_data_end+0xfffc3440>
  103dc4:	8025883a 	mov	r18,r16
  103dc8:	dc002903 	ldbu	r16,164(sp)
  103dcc:	e011883a 	mov	r8,fp
  103dd0:	84003fcc 	andi	r16,r16,255
  103dd4:	8005e61e 	bne	r16,zero,105570 <___svfprintf_internal_r+0x2244>
  103dd8:	94800414 	ori	r18,r18,16
  103ddc:	9080080c 	andi	r2,r18,32
  103de0:	10022026 	beq	r2,zero,104664 <___svfprintf_internal_r+0x1338>
  103de4:	d9002e17 	ldw	r4,184(sp)
  103de8:	d9402a17 	ldw	r5,168(sp)
  103dec:	d8002785 	stb	zero,158(sp)
  103df0:	20c00204 	addi	r3,r4,8
  103df4:	25000017 	ldw	r20,0(r4)
  103df8:	25800117 	ldw	r22,4(r4)
  103dfc:	2803ad16 	blt	r5,zero,104cb4 <___svfprintf_internal_r+0x1988>
  103e00:	013fdfc4 	movi	r4,-129
  103e04:	a584b03a 	or	r2,r20,r22
  103e08:	d8c02e15 	stw	r3,184(sp)
  103e0c:	9124703a 	and	r18,r18,r4
  103e10:	0039883a 	mov	fp,zero
  103e14:	103eb01e 	bne	r2,zero,1038d8 <__alt_data_end+0xfffc38d8>
  103e18:	d8802a17 	ldw	r2,168(sp)
  103e1c:	1002e71e 	bne	r2,zero,1049bc <___svfprintf_internal_r+0x1690>
  103e20:	d8002a15 	stw	zero,168(sp)
  103e24:	d8002b15 	stw	zero,172(sp)
  103e28:	dc001e04 	addi	r16,sp,120
  103e2c:	003ef706 	br	103a0c <__alt_data_end+0xfffc3a0c>
  103e30:	8025883a 	mov	r18,r16
  103e34:	dc002903 	ldbu	r16,164(sp)
  103e38:	e011883a 	mov	r8,fp
  103e3c:	84003fcc 	andi	r16,r16,255
  103e40:	8005c81e 	bne	r16,zero,105564 <___svfprintf_internal_r+0x2238>
  103e44:	010004b4 	movhi	r4,18
  103e48:	210e4604 	addi	r4,r4,14616
  103e4c:	d9003a15 	stw	r4,232(sp)
  103e50:	9080080c 	andi	r2,r18,32
  103e54:	10007226 	beq	r2,zero,104020 <___svfprintf_internal_r+0xcf4>
  103e58:	d9402e17 	ldw	r5,184(sp)
  103e5c:	2d000017 	ldw	r20,0(r5)
  103e60:	2d800117 	ldw	r22,4(r5)
  103e64:	29400204 	addi	r5,r5,8
  103e68:	d9402e15 	stw	r5,184(sp)
  103e6c:	9080004c 	andi	r2,r18,1
  103e70:	1001aa26 	beq	r2,zero,10451c <___svfprintf_internal_r+0x11f0>
  103e74:	a584b03a 	or	r2,r20,r22
  103e78:	10032526 	beq	r2,zero,104b10 <___svfprintf_internal_r+0x17e4>
  103e7c:	d8c02a17 	ldw	r3,168(sp)
  103e80:	00800c04 	movi	r2,48
  103e84:	d8802705 	stb	r2,156(sp)
  103e88:	dc402745 	stb	r17,157(sp)
  103e8c:	d8002785 	stb	zero,158(sp)
  103e90:	90800094 	ori	r2,r18,2
  103e94:	1804a316 	blt	r3,zero,105124 <___svfprintf_internal_r+0x1df8>
  103e98:	00bfdfc4 	movi	r2,-129
  103e9c:	90a4703a 	and	r18,r18,r2
  103ea0:	94800094 	ori	r18,r18,2
  103ea4:	0039883a 	mov	fp,zero
  103ea8:	d9003a17 	ldw	r4,232(sp)
  103eac:	dc001e04 	addi	r16,sp,120
  103eb0:	a08003cc 	andi	r2,r20,15
  103eb4:	b006973a 	slli	r3,r22,28
  103eb8:	2085883a 	add	r2,r4,r2
  103ebc:	a028d13a 	srli	r20,r20,4
  103ec0:	10800003 	ldbu	r2,0(r2)
  103ec4:	b02cd13a 	srli	r22,r22,4
  103ec8:	843fffc4 	addi	r16,r16,-1
  103ecc:	1d28b03a 	or	r20,r3,r20
  103ed0:	80800005 	stb	r2,0(r16)
  103ed4:	a584b03a 	or	r2,r20,r22
  103ed8:	103ff51e 	bne	r2,zero,103eb0 <__alt_data_end+0xfffc3eb0>
  103edc:	d8c02817 	ldw	r3,160(sp)
  103ee0:	1c07c83a 	sub	r3,r3,r16
  103ee4:	d8c02b15 	stw	r3,172(sp)
  103ee8:	003ec806 	br	103a0c <__alt_data_end+0xfffc3a0c>
  103eec:	d8c02e17 	ldw	r3,184(sp)
  103ef0:	d9002e17 	ldw	r4,184(sp)
  103ef4:	8025883a 	mov	r18,r16
  103ef8:	18800017 	ldw	r2,0(r3)
  103efc:	21000104 	addi	r4,r4,4
  103f00:	00c00044 	movi	r3,1
  103f04:	e011883a 	mov	r8,fp
  103f08:	d8c02915 	stw	r3,164(sp)
  103f0c:	d8002785 	stb	zero,158(sp)
  103f10:	d8801405 	stb	r2,80(sp)
  103f14:	d9002e15 	stw	r4,184(sp)
  103f18:	d8c02b15 	stw	r3,172(sp)
  103f1c:	d8002a15 	stw	zero,168(sp)
  103f20:	d8003215 	stw	zero,200(sp)
  103f24:	dc001404 	addi	r16,sp,80
  103f28:	0039883a 	mov	fp,zero
  103f2c:	003ec406 	br	103a40 <__alt_data_end+0xfffc3a40>
  103f30:	8025883a 	mov	r18,r16
  103f34:	dc002903 	ldbu	r16,164(sp)
  103f38:	e011883a 	mov	r8,fp
  103f3c:	84003fcc 	andi	r16,r16,255
  103f40:	803e8726 	beq	r16,zero,103960 <__alt_data_end+0xfffc3960>
  103f44:	d8c02b03 	ldbu	r3,172(sp)
  103f48:	d8c02785 	stb	r3,158(sp)
  103f4c:	003e8406 	br	103960 <__alt_data_end+0xfffc3960>
  103f50:	00c00044 	movi	r3,1
  103f54:	d8c02905 	stb	r3,164(sp)
  103f58:	00c00ac4 	movi	r3,43
  103f5c:	d8c02b05 	stb	r3,172(sp)
  103f60:	bc400007 	ldb	r17,0(r23)
  103f64:	003d4606 	br	103480 <__alt_data_end+0xfffc3480>
  103f68:	84000814 	ori	r16,r16,32
  103f6c:	bc400007 	ldb	r17,0(r23)
  103f70:	003d4306 	br	103480 <__alt_data_end+0xfffc3480>
  103f74:	d8802e17 	ldw	r2,184(sp)
  103f78:	8025883a 	mov	r18,r16
  103f7c:	d8002785 	stb	zero,158(sp)
  103f80:	14000017 	ldw	r16,0(r2)
  103f84:	e011883a 	mov	r8,fp
  103f88:	15000104 	addi	r20,r2,4
  103f8c:	80042126 	beq	r16,zero,105014 <___svfprintf_internal_r+0x1ce8>
  103f90:	d8c02a17 	ldw	r3,168(sp)
  103f94:	1803ee16 	blt	r3,zero,104f50 <___svfprintf_internal_r+0x1c24>
  103f98:	180d883a 	mov	r6,r3
  103f9c:	000b883a 	mov	r5,zero
  103fa0:	8009883a 	mov	r4,r16
  103fa4:	df003e15 	stw	fp,248(sp)
  103fa8:	01026340 	call	102634 <memchr>
  103fac:	da003e17 	ldw	r8,248(sp)
  103fb0:	10046a26 	beq	r2,zero,10515c <___svfprintf_internal_r+0x1e30>
  103fb4:	1405c83a 	sub	r2,r2,r16
  103fb8:	d8802b15 	stw	r2,172(sp)
  103fbc:	1003ea16 	blt	r2,zero,104f68 <___svfprintf_internal_r+0x1c3c>
  103fc0:	df002783 	ldbu	fp,158(sp)
  103fc4:	d8802915 	stw	r2,164(sp)
  103fc8:	dd002e15 	stw	r20,184(sp)
  103fcc:	d8002a15 	stw	zero,168(sp)
  103fd0:	d8003215 	stw	zero,200(sp)
  103fd4:	003e9306 	br	103a24 <__alt_data_end+0xfffc3a24>
  103fd8:	8025883a 	mov	r18,r16
  103fdc:	dc002903 	ldbu	r16,164(sp)
  103fe0:	e011883a 	mov	r8,fp
  103fe4:	84003fcc 	andi	r16,r16,255
  103fe8:	803f7c26 	beq	r16,zero,103ddc <__alt_data_end+0xfffc3ddc>
  103fec:	d8c02b03 	ldbu	r3,172(sp)
  103ff0:	d8c02785 	stb	r3,158(sp)
  103ff4:	003f7906 	br	103ddc <__alt_data_end+0xfffc3ddc>
  103ff8:	8025883a 	mov	r18,r16
  103ffc:	dc002903 	ldbu	r16,164(sp)
  104000:	e011883a 	mov	r8,fp
  104004:	84003fcc 	andi	r16,r16,255
  104008:	8005741e 	bne	r16,zero,1055dc <___svfprintf_internal_r+0x22b0>
  10400c:	010004b4 	movhi	r4,18
  104010:	210e4b04 	addi	r4,r4,14636
  104014:	d9003a15 	stw	r4,232(sp)
  104018:	9080080c 	andi	r2,r18,32
  10401c:	103f8e1e 	bne	r2,zero,103e58 <__alt_data_end+0xfffc3e58>
  104020:	9080040c 	andi	r2,r18,16
  104024:	1002a726 	beq	r2,zero,104ac4 <___svfprintf_internal_r+0x1798>
  104028:	d8802e17 	ldw	r2,184(sp)
  10402c:	002d883a 	mov	r22,zero
  104030:	15000017 	ldw	r20,0(r2)
  104034:	10800104 	addi	r2,r2,4
  104038:	d8802e15 	stw	r2,184(sp)
  10403c:	003f8b06 	br	103e6c <__alt_data_end+0xfffc3e6c>
  104040:	84000054 	ori	r16,r16,1
  104044:	bc400007 	ldb	r17,0(r23)
  104048:	003d0d06 	br	103480 <__alt_data_end+0xfffc3480>
  10404c:	d8802b07 	ldb	r2,172(sp)
  104050:	1002a41e 	bne	r2,zero,104ae4 <___svfprintf_internal_r+0x17b8>
  104054:	00c00044 	movi	r3,1
  104058:	d8c02905 	stb	r3,164(sp)
  10405c:	00c00804 	movi	r3,32
  104060:	d8c02b05 	stb	r3,172(sp)
  104064:	bc400007 	ldb	r17,0(r23)
  104068:	003d0506 	br	103480 <__alt_data_end+0xfffc3480>
  10406c:	8025883a 	mov	r18,r16
  104070:	dc002903 	ldbu	r16,164(sp)
  104074:	e011883a 	mov	r8,fp
  104078:	84003fcc 	andi	r16,r16,255
  10407c:	803e0626 	beq	r16,zero,103898 <__alt_data_end+0xfffc3898>
  104080:	d8c02b03 	ldbu	r3,172(sp)
  104084:	d8c02785 	stb	r3,158(sp)
  104088:	003e0306 	br	103898 <__alt_data_end+0xfffc3898>
  10408c:	bc400007 	ldb	r17,0(r23)
  104090:	00801b04 	movi	r2,108
  104094:	88830a26 	beq	r17,r2,104cc0 <___svfprintf_internal_r+0x1994>
  104098:	84000414 	ori	r16,r16,16
  10409c:	003cf806 	br	103480 <__alt_data_end+0xfffc3480>
  1040a0:	8025883a 	mov	r18,r16
  1040a4:	dc002903 	ldbu	r16,164(sp)
  1040a8:	e011883a 	mov	r8,fp
  1040ac:	84003fcc 	andi	r16,r16,255
  1040b0:	8005471e 	bne	r16,zero,1055d0 <___svfprintf_internal_r+0x22a4>
  1040b4:	9080080c 	andi	r2,r18,32
  1040b8:	10028c26 	beq	r2,zero,104aec <___svfprintf_internal_r+0x17c0>
  1040bc:	d9002e17 	ldw	r4,184(sp)
  1040c0:	d9402f17 	ldw	r5,188(sp)
  1040c4:	20800017 	ldw	r2,0(r4)
  1040c8:	2807d7fa 	srai	r3,r5,31
  1040cc:	21000104 	addi	r4,r4,4
  1040d0:	d9002e15 	stw	r4,184(sp)
  1040d4:	11400015 	stw	r5,0(r2)
  1040d8:	10c00115 	stw	r3,4(r2)
  1040dc:	003cbe06 	br	1033d8 <__alt_data_end+0xfffc33d8>
  1040e0:	84001014 	ori	r16,r16,64
  1040e4:	bc400007 	ldb	r17,0(r23)
  1040e8:	003ce506 	br	103480 <__alt_data_end+0xfffc3480>
  1040ec:	010004b4 	movhi	r4,18
  1040f0:	210e4b04 	addi	r4,r4,14636
  1040f4:	0039883a 	mov	fp,zero
  1040f8:	d9003a15 	stw	r4,232(sp)
  1040fc:	04401e04 	movi	r17,120
  104100:	003f6906 	br	103ea8 <__alt_data_end+0xfffc3ea8>
  104104:	8025883a 	mov	r18,r16
  104108:	dc002903 	ldbu	r16,164(sp)
  10410c:	e011883a 	mov	r8,fp
  104110:	84003fcc 	andi	r16,r16,255
  104114:	8005261e 	bne	r16,zero,1055b0 <___svfprintf_internal_r+0x2284>
  104118:	883d6526 	beq	r17,zero,1036b0 <__alt_data_end+0xfffc36b0>
  10411c:	00c00044 	movi	r3,1
  104120:	d8c02915 	stw	r3,164(sp)
  104124:	dc401405 	stb	r17,80(sp)
  104128:	d8002785 	stb	zero,158(sp)
  10412c:	003f7a06 	br	103f18 <__alt_data_end+0xfffc3f18>
  104130:	010004b4 	movhi	r4,18
  104134:	210e4b04 	addi	r4,r4,14636
  104138:	d9003a15 	stw	r4,232(sp)
  10413c:	d8c02e15 	stw	r3,184(sp)
  104140:	1025883a 	mov	r18,r2
  104144:	04401e04 	movi	r17,120
  104148:	a584b03a 	or	r2,r20,r22
  10414c:	1000fa1e 	bne	r2,zero,104538 <___svfprintf_internal_r+0x120c>
  104150:	0039883a 	mov	fp,zero
  104154:	00800084 	movi	r2,2
  104158:	10803fcc 	andi	r2,r2,255
  10415c:	00c00044 	movi	r3,1
  104160:	10c21626 	beq	r2,r3,1049bc <___svfprintf_internal_r+0x1690>
  104164:	00c00084 	movi	r3,2
  104168:	10fe0e1e 	bne	r2,r3,1039a4 <__alt_data_end+0xfffc39a4>
  10416c:	003d4606 	br	103688 <__alt_data_end+0xfffc3688>
  104170:	d8c02017 	ldw	r3,128(sp)
  104174:	003e7306 	br	103b44 <__alt_data_end+0xfffc3b44>
  104178:	00801944 	movi	r2,101
  10417c:	14407c0e 	bge	r2,r17,104370 <___svfprintf_internal_r+0x1044>
  104180:	d9003617 	ldw	r4,216(sp)
  104184:	d9403717 	ldw	r5,220(sp)
  104188:	000d883a 	mov	r6,zero
  10418c:	000f883a 	mov	r7,zero
  104190:	d8c03d15 	stw	r3,244(sp)
  104194:	da003e15 	stw	r8,248(sp)
  104198:	01175140 	call	117514 <__eqdf2>
  10419c:	d8c03d17 	ldw	r3,244(sp)
  1041a0:	da003e17 	ldw	r8,248(sp)
  1041a4:	1000f51e 	bne	r2,zero,10457c <___svfprintf_internal_r+0x1250>
  1041a8:	d8801f17 	ldw	r2,124(sp)
  1041ac:	010004b4 	movhi	r4,18
  1041b0:	210e5204 	addi	r4,r4,14664
  1041b4:	18c00044 	addi	r3,r3,1
  1041b8:	10800044 	addi	r2,r2,1
  1041bc:	41000015 	stw	r4,0(r8)
  1041c0:	01000044 	movi	r4,1
  1041c4:	41000115 	stw	r4,4(r8)
  1041c8:	d8c02015 	stw	r3,128(sp)
  1041cc:	d8801f15 	stw	r2,124(sp)
  1041d0:	010001c4 	movi	r4,7
  1041d4:	20826616 	blt	r4,r2,104b70 <___svfprintf_internal_r+0x1844>
  1041d8:	42000204 	addi	r8,r8,8
  1041dc:	d8802617 	ldw	r2,152(sp)
  1041e0:	d9403317 	ldw	r5,204(sp)
  1041e4:	11400216 	blt	r2,r5,1041f0 <___svfprintf_internal_r+0xec4>
  1041e8:	9080004c 	andi	r2,r18,1
  1041ec:	103eb326 	beq	r2,zero,103cbc <__alt_data_end+0xfffc3cbc>
  1041f0:	d8803817 	ldw	r2,224(sp)
  1041f4:	d9003417 	ldw	r4,208(sp)
  1041f8:	d9403817 	ldw	r5,224(sp)
  1041fc:	1887883a 	add	r3,r3,r2
  104200:	d8801f17 	ldw	r2,124(sp)
  104204:	41000015 	stw	r4,0(r8)
  104208:	41400115 	stw	r5,4(r8)
  10420c:	10800044 	addi	r2,r2,1
  104210:	d8c02015 	stw	r3,128(sp)
  104214:	d8801f15 	stw	r2,124(sp)
  104218:	010001c4 	movi	r4,7
  10421c:	2082af16 	blt	r4,r2,104cdc <___svfprintf_internal_r+0x19b0>
  104220:	42000204 	addi	r8,r8,8
  104224:	d8803317 	ldw	r2,204(sp)
  104228:	143fffc4 	addi	r16,r2,-1
  10422c:	043ea30e 	bge	zero,r16,103cbc <__alt_data_end+0xfffc3cbc>
  104230:	04400404 	movi	r17,16
  104234:	d8801f17 	ldw	r2,124(sp)
  104238:	8c00860e 	bge	r17,r16,104454 <___svfprintf_internal_r+0x1128>
  10423c:	014004b4 	movhi	r5,18
  104240:	294e5284 	addi	r5,r5,14666
  104244:	d9402c15 	stw	r5,176(sp)
  104248:	058001c4 	movi	r22,7
  10424c:	dd002d17 	ldw	r20,180(sp)
  104250:	00000306 	br	104260 <___svfprintf_internal_r+0xf34>
  104254:	42000204 	addi	r8,r8,8
  104258:	843ffc04 	addi	r16,r16,-16
  10425c:	8c00800e 	bge	r17,r16,104460 <___svfprintf_internal_r+0x1134>
  104260:	18c00404 	addi	r3,r3,16
  104264:	10800044 	addi	r2,r2,1
  104268:	45400015 	stw	r21,0(r8)
  10426c:	44400115 	stw	r17,4(r8)
  104270:	d8c02015 	stw	r3,128(sp)
  104274:	d8801f15 	stw	r2,124(sp)
  104278:	b0bff60e 	bge	r22,r2,104254 <__alt_data_end+0xfffc4254>
  10427c:	d9801e04 	addi	r6,sp,120
  104280:	a00b883a 	mov	r5,r20
  104284:	9809883a 	mov	r4,r19
  104288:	010fb840 	call	10fb84 <__ssprint_r>
  10428c:	103d0e1e 	bne	r2,zero,1036c8 <__alt_data_end+0xfffc36c8>
  104290:	d8c02017 	ldw	r3,128(sp)
  104294:	d8801f17 	ldw	r2,124(sp)
  104298:	da000404 	addi	r8,sp,16
  10429c:	003fee06 	br	104258 <__alt_data_end+0xfffc4258>
  1042a0:	d9403117 	ldw	r5,196(sp)
  1042a4:	d8802917 	ldw	r2,164(sp)
  1042a8:	28adc83a 	sub	r22,r5,r2
  1042ac:	05be430e 	bge	zero,r22,103bbc <__alt_data_end+0xfffc3bbc>
  1042b0:	07000404 	movi	fp,16
  1042b4:	d8801f17 	ldw	r2,124(sp)
  1042b8:	e583a20e 	bge	fp,r22,105144 <___svfprintf_internal_r+0x1e18>
  1042bc:	014004b4 	movhi	r5,18
  1042c0:	294e5284 	addi	r5,r5,14666
  1042c4:	dc403015 	stw	r17,192(sp)
  1042c8:	d9402c15 	stw	r5,176(sp)
  1042cc:	b023883a 	mov	r17,r22
  1042d0:	050001c4 	movi	r20,7
  1042d4:	902d883a 	mov	r22,r18
  1042d8:	8025883a 	mov	r18,r16
  1042dc:	dc002d17 	ldw	r16,180(sp)
  1042e0:	00000306 	br	1042f0 <___svfprintf_internal_r+0xfc4>
  1042e4:	8c7ffc04 	addi	r17,r17,-16
  1042e8:	42000204 	addi	r8,r8,8
  1042ec:	e440110e 	bge	fp,r17,104334 <___svfprintf_internal_r+0x1008>
  1042f0:	18c00404 	addi	r3,r3,16
  1042f4:	10800044 	addi	r2,r2,1
  1042f8:	45400015 	stw	r21,0(r8)
  1042fc:	47000115 	stw	fp,4(r8)
  104300:	d8c02015 	stw	r3,128(sp)
  104304:	d8801f15 	stw	r2,124(sp)
  104308:	a0bff60e 	bge	r20,r2,1042e4 <__alt_data_end+0xfffc42e4>
  10430c:	d9801e04 	addi	r6,sp,120
  104310:	800b883a 	mov	r5,r16
  104314:	9809883a 	mov	r4,r19
  104318:	010fb840 	call	10fb84 <__ssprint_r>
  10431c:	103cea1e 	bne	r2,zero,1036c8 <__alt_data_end+0xfffc36c8>
  104320:	8c7ffc04 	addi	r17,r17,-16
  104324:	d8c02017 	ldw	r3,128(sp)
  104328:	d8801f17 	ldw	r2,124(sp)
  10432c:	da000404 	addi	r8,sp,16
  104330:	e47fef16 	blt	fp,r17,1042f0 <__alt_data_end+0xfffc42f0>
  104334:	9021883a 	mov	r16,r18
  104338:	b025883a 	mov	r18,r22
  10433c:	882d883a 	mov	r22,r17
  104340:	dc403017 	ldw	r17,192(sp)
  104344:	d9002c17 	ldw	r4,176(sp)
  104348:	1d87883a 	add	r3,r3,r22
  10434c:	10800044 	addi	r2,r2,1
  104350:	41000015 	stw	r4,0(r8)
  104354:	45800115 	stw	r22,4(r8)
  104358:	d8c02015 	stw	r3,128(sp)
  10435c:	d8801f15 	stw	r2,124(sp)
  104360:	010001c4 	movi	r4,7
  104364:	20819a16 	blt	r4,r2,1049d0 <___svfprintf_internal_r+0x16a4>
  104368:	42000204 	addi	r8,r8,8
  10436c:	003e1306 	br	103bbc <__alt_data_end+0xfffc3bbc>
  104370:	d9403317 	ldw	r5,204(sp)
  104374:	00800044 	movi	r2,1
  104378:	18c00044 	addi	r3,r3,1
  10437c:	1141710e 	bge	r2,r5,104944 <___svfprintf_internal_r+0x1618>
  104380:	dc401f17 	ldw	r17,124(sp)
  104384:	00800044 	movi	r2,1
  104388:	40800115 	stw	r2,4(r8)
  10438c:	8c400044 	addi	r17,r17,1
  104390:	44000015 	stw	r16,0(r8)
  104394:	d8c02015 	stw	r3,128(sp)
  104398:	dc401f15 	stw	r17,124(sp)
  10439c:	008001c4 	movi	r2,7
  1043a0:	14417416 	blt	r2,r17,104974 <___svfprintf_internal_r+0x1648>
  1043a4:	42000204 	addi	r8,r8,8
  1043a8:	d8803817 	ldw	r2,224(sp)
  1043ac:	d9003417 	ldw	r4,208(sp)
  1043b0:	8c400044 	addi	r17,r17,1
  1043b4:	10c7883a 	add	r3,r2,r3
  1043b8:	40800115 	stw	r2,4(r8)
  1043bc:	41000015 	stw	r4,0(r8)
  1043c0:	d8c02015 	stw	r3,128(sp)
  1043c4:	dc401f15 	stw	r17,124(sp)
  1043c8:	008001c4 	movi	r2,7
  1043cc:	14417216 	blt	r2,r17,104998 <___svfprintf_internal_r+0x166c>
  1043d0:	45800204 	addi	r22,r8,8
  1043d4:	d9003617 	ldw	r4,216(sp)
  1043d8:	d9403717 	ldw	r5,220(sp)
  1043dc:	000d883a 	mov	r6,zero
  1043e0:	000f883a 	mov	r7,zero
  1043e4:	d8c03d15 	stw	r3,244(sp)
  1043e8:	01175140 	call	117514 <__eqdf2>
  1043ec:	d8c03d17 	ldw	r3,244(sp)
  1043f0:	1000b326 	beq	r2,zero,1046c0 <___svfprintf_internal_r+0x1394>
  1043f4:	d9403317 	ldw	r5,204(sp)
  1043f8:	84000044 	addi	r16,r16,1
  1043fc:	8c400044 	addi	r17,r17,1
  104400:	28bfffc4 	addi	r2,r5,-1
  104404:	1887883a 	add	r3,r3,r2
  104408:	b0800115 	stw	r2,4(r22)
  10440c:	b4000015 	stw	r16,0(r22)
  104410:	d8c02015 	stw	r3,128(sp)
  104414:	dc401f15 	stw	r17,124(sp)
  104418:	008001c4 	movi	r2,7
  10441c:	1440d216 	blt	r2,r17,104768 <___svfprintf_internal_r+0x143c>
  104420:	b5800204 	addi	r22,r22,8
  104424:	d9003b17 	ldw	r4,236(sp)
  104428:	df0022c4 	addi	fp,sp,139
  10442c:	8c400044 	addi	r17,r17,1
  104430:	20c7883a 	add	r3,r4,r3
  104434:	b7000015 	stw	fp,0(r22)
  104438:	b1000115 	stw	r4,4(r22)
  10443c:	d8c02015 	stw	r3,128(sp)
  104440:	dc401f15 	stw	r17,124(sp)
  104444:	008001c4 	movi	r2,7
  104448:	14400e16 	blt	r2,r17,104484 <___svfprintf_internal_r+0x1158>
  10444c:	b2000204 	addi	r8,r22,8
  104450:	003e1a06 	br	103cbc <__alt_data_end+0xfffc3cbc>
  104454:	010004b4 	movhi	r4,18
  104458:	210e5284 	addi	r4,r4,14666
  10445c:	d9002c15 	stw	r4,176(sp)
  104460:	d9002c17 	ldw	r4,176(sp)
  104464:	1c07883a 	add	r3,r3,r16
  104468:	44000115 	stw	r16,4(r8)
  10446c:	41000015 	stw	r4,0(r8)
  104470:	10800044 	addi	r2,r2,1
  104474:	d8c02015 	stw	r3,128(sp)
  104478:	d8801f15 	stw	r2,124(sp)
  10447c:	010001c4 	movi	r4,7
  104480:	20be0d0e 	bge	r4,r2,103cb8 <__alt_data_end+0xfffc3cb8>
  104484:	d9402d17 	ldw	r5,180(sp)
  104488:	d9801e04 	addi	r6,sp,120
  10448c:	9809883a 	mov	r4,r19
  104490:	010fb840 	call	10fb84 <__ssprint_r>
  104494:	103c8c1e 	bne	r2,zero,1036c8 <__alt_data_end+0xfffc36c8>
  104498:	d8c02017 	ldw	r3,128(sp)
  10449c:	da000404 	addi	r8,sp,16
  1044a0:	003e0606 	br	103cbc <__alt_data_end+0xfffc3cbc>
  1044a4:	d9402d17 	ldw	r5,180(sp)
  1044a8:	d9801e04 	addi	r6,sp,120
  1044ac:	9809883a 	mov	r4,r19
  1044b0:	010fb840 	call	10fb84 <__ssprint_r>
  1044b4:	103e3d26 	beq	r2,zero,103dac <__alt_data_end+0xfffc3dac>
  1044b8:	003c8306 	br	1036c8 <__alt_data_end+0xfffc36c8>
  1044bc:	d9402d17 	ldw	r5,180(sp)
  1044c0:	d9801e04 	addi	r6,sp,120
  1044c4:	9809883a 	mov	r4,r19
  1044c8:	010fb840 	call	10fb84 <__ssprint_r>
  1044cc:	103c7e1e 	bne	r2,zero,1036c8 <__alt_data_end+0xfffc36c8>
  1044d0:	d8c02017 	ldw	r3,128(sp)
  1044d4:	da000404 	addi	r8,sp,16
  1044d8:	003deb06 	br	103c88 <__alt_data_end+0xfffc3c88>
  1044dc:	d9402d17 	ldw	r5,180(sp)
  1044e0:	d9801e04 	addi	r6,sp,120
  1044e4:	9809883a 	mov	r4,r19
  1044e8:	010fb840 	call	10fb84 <__ssprint_r>
  1044ec:	103c761e 	bne	r2,zero,1036c8 <__alt_data_end+0xfffc36c8>
  1044f0:	d8c02017 	ldw	r3,128(sp)
  1044f4:	da000404 	addi	r8,sp,16
  1044f8:	003d9f06 	br	103b78 <__alt_data_end+0xfffc3b78>
  1044fc:	d9402d17 	ldw	r5,180(sp)
  104500:	d9801e04 	addi	r6,sp,120
  104504:	9809883a 	mov	r4,r19
  104508:	010fb840 	call	10fb84 <__ssprint_r>
  10450c:	103c6e1e 	bne	r2,zero,1036c8 <__alt_data_end+0xfffc36c8>
  104510:	d8c02017 	ldw	r3,128(sp)
  104514:	da000404 	addi	r8,sp,16
  104518:	003da506 	br	103bb0 <__alt_data_end+0xfffc3bb0>
  10451c:	d9402a17 	ldw	r5,168(sp)
  104520:	d8002785 	stb	zero,158(sp)
  104524:	283f0816 	blt	r5,zero,104148 <__alt_data_end+0xfffc4148>
  104528:	00ffdfc4 	movi	r3,-129
  10452c:	a584b03a 	or	r2,r20,r22
  104530:	90e4703a 	and	r18,r18,r3
  104534:	103c5126 	beq	r2,zero,10367c <__alt_data_end+0xfffc367c>
  104538:	0039883a 	mov	fp,zero
  10453c:	003e5a06 	br	103ea8 <__alt_data_end+0xfffc3ea8>
  104540:	9080040c 	andi	r2,r18,16
  104544:	10013d26 	beq	r2,zero,104a3c <___svfprintf_internal_r+0x1710>
  104548:	d8c02e17 	ldw	r3,184(sp)
  10454c:	d9002a17 	ldw	r4,168(sp)
  104550:	d8002785 	stb	zero,158(sp)
  104554:	18800104 	addi	r2,r3,4
  104558:	1d000017 	ldw	r20,0(r3)
  10455c:	002d883a 	mov	r22,zero
  104560:	20013f16 	blt	r4,zero,104a60 <___svfprintf_internal_r+0x1734>
  104564:	00ffdfc4 	movi	r3,-129
  104568:	d8802e15 	stw	r2,184(sp)
  10456c:	90e4703a 	and	r18,r18,r3
  104570:	a03d0926 	beq	r20,zero,103998 <__alt_data_end+0xfffc3998>
  104574:	0039883a 	mov	fp,zero
  104578:	003d0c06 	br	1039ac <__alt_data_end+0xfffc39ac>
  10457c:	dc402617 	ldw	r17,152(sp)
  104580:	0441830e 	bge	zero,r17,104b90 <___svfprintf_internal_r+0x1864>
  104584:	dc403217 	ldw	r17,200(sp)
  104588:	d8803317 	ldw	r2,204(sp)
  10458c:	1440010e 	bge	r2,r17,104594 <___svfprintf_internal_r+0x1268>
  104590:	1023883a 	mov	r17,r2
  104594:	04400a0e 	bge	zero,r17,1045c0 <___svfprintf_internal_r+0x1294>
  104598:	d8801f17 	ldw	r2,124(sp)
  10459c:	1c47883a 	add	r3,r3,r17
  1045a0:	44000015 	stw	r16,0(r8)
  1045a4:	10800044 	addi	r2,r2,1
  1045a8:	44400115 	stw	r17,4(r8)
  1045ac:	d8c02015 	stw	r3,128(sp)
  1045b0:	d8801f15 	stw	r2,124(sp)
  1045b4:	010001c4 	movi	r4,7
  1045b8:	20827516 	blt	r4,r2,104f90 <___svfprintf_internal_r+0x1c64>
  1045bc:	42000204 	addi	r8,r8,8
  1045c0:	88027b16 	blt	r17,zero,104fb0 <___svfprintf_internal_r+0x1c84>
  1045c4:	d9003217 	ldw	r4,200(sp)
  1045c8:	2463c83a 	sub	r17,r4,r17
  1045cc:	0440990e 	bge	zero,r17,104834 <___svfprintf_internal_r+0x1508>
  1045d0:	05800404 	movi	r22,16
  1045d4:	d8801f17 	ldw	r2,124(sp)
  1045d8:	b441530e 	bge	r22,r17,104b28 <___svfprintf_internal_r+0x17fc>
  1045dc:	010004b4 	movhi	r4,18
  1045e0:	210e5284 	addi	r4,r4,14666
  1045e4:	d9002c15 	stw	r4,176(sp)
  1045e8:	070001c4 	movi	fp,7
  1045ec:	dd002d17 	ldw	r20,180(sp)
  1045f0:	00000306 	br	104600 <___svfprintf_internal_r+0x12d4>
  1045f4:	42000204 	addi	r8,r8,8
  1045f8:	8c7ffc04 	addi	r17,r17,-16
  1045fc:	b4414d0e 	bge	r22,r17,104b34 <___svfprintf_internal_r+0x1808>
  104600:	18c00404 	addi	r3,r3,16
  104604:	10800044 	addi	r2,r2,1
  104608:	45400015 	stw	r21,0(r8)
  10460c:	45800115 	stw	r22,4(r8)
  104610:	d8c02015 	stw	r3,128(sp)
  104614:	d8801f15 	stw	r2,124(sp)
  104618:	e0bff60e 	bge	fp,r2,1045f4 <__alt_data_end+0xfffc45f4>
  10461c:	d9801e04 	addi	r6,sp,120
  104620:	a00b883a 	mov	r5,r20
  104624:	9809883a 	mov	r4,r19
  104628:	010fb840 	call	10fb84 <__ssprint_r>
  10462c:	103c261e 	bne	r2,zero,1036c8 <__alt_data_end+0xfffc36c8>
  104630:	d8c02017 	ldw	r3,128(sp)
  104634:	d8801f17 	ldw	r2,124(sp)
  104638:	da000404 	addi	r8,sp,16
  10463c:	003fee06 	br	1045f8 <__alt_data_end+0xfffc45f8>
  104640:	d9402d17 	ldw	r5,180(sp)
  104644:	d9801e04 	addi	r6,sp,120
  104648:	9809883a 	mov	r4,r19
  10464c:	010fb840 	call	10fb84 <__ssprint_r>
  104650:	103c1d1e 	bne	r2,zero,1036c8 <__alt_data_end+0xfffc36c8>
  104654:	d8c02017 	ldw	r3,128(sp)
  104658:	df002787 	ldb	fp,158(sp)
  10465c:	da000404 	addi	r8,sp,16
  104660:	003d3806 	br	103b44 <__alt_data_end+0xfffc3b44>
  104664:	9080040c 	andi	r2,r18,16
  104668:	10005c26 	beq	r2,zero,1047dc <___svfprintf_internal_r+0x14b0>
  10466c:	d8c02e17 	ldw	r3,184(sp)
  104670:	d9002a17 	ldw	r4,168(sp)
  104674:	d8002785 	stb	zero,158(sp)
  104678:	18800104 	addi	r2,r3,4
  10467c:	1d000017 	ldw	r20,0(r3)
  104680:	002d883a 	mov	r22,zero
  104684:	20005e16 	blt	r4,zero,104800 <___svfprintf_internal_r+0x14d4>
  104688:	00ffdfc4 	movi	r3,-129
  10468c:	d8802e15 	stw	r2,184(sp)
  104690:	90e4703a 	and	r18,r18,r3
  104694:	0039883a 	mov	fp,zero
  104698:	a03ddf26 	beq	r20,zero,103e18 <__alt_data_end+0xfffc3e18>
  10469c:	00800244 	movi	r2,9
  1046a0:	153c8e36 	bltu	r2,r20,1038dc <__alt_data_end+0xfffc38dc>
  1046a4:	a5000c04 	addi	r20,r20,48
  1046a8:	dc001dc4 	addi	r16,sp,119
  1046ac:	dd001dc5 	stb	r20,119(sp)
  1046b0:	d8c02817 	ldw	r3,160(sp)
  1046b4:	1c07c83a 	sub	r3,r3,r16
  1046b8:	d8c02b15 	stw	r3,172(sp)
  1046bc:	003cd306 	br	103a0c <__alt_data_end+0xfffc3a0c>
  1046c0:	d8803317 	ldw	r2,204(sp)
  1046c4:	143fffc4 	addi	r16,r2,-1
  1046c8:	043f560e 	bge	zero,r16,104424 <__alt_data_end+0xfffc4424>
  1046cc:	07000404 	movi	fp,16
  1046d0:	e403530e 	bge	fp,r16,105420 <___svfprintf_internal_r+0x20f4>
  1046d4:	014004b4 	movhi	r5,18
  1046d8:	294e5284 	addi	r5,r5,14666
  1046dc:	d9402c15 	stw	r5,176(sp)
  1046e0:	01c001c4 	movi	r7,7
  1046e4:	dd002d17 	ldw	r20,180(sp)
  1046e8:	00000306 	br	1046f8 <___svfprintf_internal_r+0x13cc>
  1046ec:	843ffc04 	addi	r16,r16,-16
  1046f0:	b5800204 	addi	r22,r22,8
  1046f4:	e400130e 	bge	fp,r16,104744 <___svfprintf_internal_r+0x1418>
  1046f8:	18c00404 	addi	r3,r3,16
  1046fc:	8c400044 	addi	r17,r17,1
  104700:	b5400015 	stw	r21,0(r22)
  104704:	b7000115 	stw	fp,4(r22)
  104708:	d8c02015 	stw	r3,128(sp)
  10470c:	dc401f15 	stw	r17,124(sp)
  104710:	3c7ff60e 	bge	r7,r17,1046ec <__alt_data_end+0xfffc46ec>
  104714:	d9801e04 	addi	r6,sp,120
  104718:	a00b883a 	mov	r5,r20
  10471c:	9809883a 	mov	r4,r19
  104720:	d9c03d15 	stw	r7,244(sp)
  104724:	010fb840 	call	10fb84 <__ssprint_r>
  104728:	d9c03d17 	ldw	r7,244(sp)
  10472c:	103be61e 	bne	r2,zero,1036c8 <__alt_data_end+0xfffc36c8>
  104730:	843ffc04 	addi	r16,r16,-16
  104734:	d8c02017 	ldw	r3,128(sp)
  104738:	dc401f17 	ldw	r17,124(sp)
  10473c:	dd800404 	addi	r22,sp,16
  104740:	e43fed16 	blt	fp,r16,1046f8 <__alt_data_end+0xfffc46f8>
  104744:	d8802c17 	ldw	r2,176(sp)
  104748:	1c07883a 	add	r3,r3,r16
  10474c:	8c400044 	addi	r17,r17,1
  104750:	b0800015 	stw	r2,0(r22)
  104754:	b4000115 	stw	r16,4(r22)
  104758:	d8c02015 	stw	r3,128(sp)
  10475c:	dc401f15 	stw	r17,124(sp)
  104760:	008001c4 	movi	r2,7
  104764:	147f2e0e 	bge	r2,r17,104420 <__alt_data_end+0xfffc4420>
  104768:	d9402d17 	ldw	r5,180(sp)
  10476c:	d9801e04 	addi	r6,sp,120
  104770:	9809883a 	mov	r4,r19
  104774:	010fb840 	call	10fb84 <__ssprint_r>
  104778:	103bd31e 	bne	r2,zero,1036c8 <__alt_data_end+0xfffc36c8>
  10477c:	d8c02017 	ldw	r3,128(sp)
  104780:	dc401f17 	ldw	r17,124(sp)
  104784:	dd800404 	addi	r22,sp,16
  104788:	003f2606 	br	104424 <__alt_data_end+0xfffc4424>
  10478c:	9080040c 	andi	r2,r18,16
  104790:	1000c326 	beq	r2,zero,104aa0 <___svfprintf_internal_r+0x1774>
  104794:	d9402e17 	ldw	r5,184(sp)
  104798:	2d000017 	ldw	r20,0(r5)
  10479c:	29400104 	addi	r5,r5,4
  1047a0:	d9402e15 	stw	r5,184(sp)
  1047a4:	a02dd7fa 	srai	r22,r20,31
  1047a8:	b005883a 	mov	r2,r22
  1047ac:	103c430e 	bge	r2,zero,1038bc <__alt_data_end+0xfffc38bc>
  1047b0:	d9402a17 	ldw	r5,168(sp)
  1047b4:	0529c83a 	sub	r20,zero,r20
  1047b8:	07000b44 	movi	fp,45
  1047bc:	a004c03a 	cmpne	r2,r20,zero
  1047c0:	05adc83a 	sub	r22,zero,r22
  1047c4:	df002785 	stb	fp,158(sp)
  1047c8:	b0adc83a 	sub	r22,r22,r2
  1047cc:	28022e16 	blt	r5,zero,105088 <___svfprintf_internal_r+0x1d5c>
  1047d0:	00bfdfc4 	movi	r2,-129
  1047d4:	90a4703a 	and	r18,r18,r2
  1047d8:	003c3f06 	br	1038d8 <__alt_data_end+0xfffc38d8>
  1047dc:	9080100c 	andi	r2,r18,64
  1047e0:	d8002785 	stb	zero,158(sp)
  1047e4:	10012526 	beq	r2,zero,104c7c <___svfprintf_internal_r+0x1950>
  1047e8:	d9402e17 	ldw	r5,184(sp)
  1047ec:	d8c02a17 	ldw	r3,168(sp)
  1047f0:	002d883a 	mov	r22,zero
  1047f4:	28800104 	addi	r2,r5,4
  1047f8:	2d00000b 	ldhu	r20,0(r5)
  1047fc:	183fa20e 	bge	r3,zero,104688 <__alt_data_end+0xfffc4688>
  104800:	d8802e15 	stw	r2,184(sp)
  104804:	0039883a 	mov	fp,zero
  104808:	a584b03a 	or	r2,r20,r22
  10480c:	103c321e 	bne	r2,zero,1038d8 <__alt_data_end+0xfffc38d8>
  104810:	00800044 	movi	r2,1
  104814:	003e5006 	br	104158 <__alt_data_end+0xfffc4158>
  104818:	d9402d17 	ldw	r5,180(sp)
  10481c:	d9801e04 	addi	r6,sp,120
  104820:	9809883a 	mov	r4,r19
  104824:	010fb840 	call	10fb84 <__ssprint_r>
  104828:	103ba71e 	bne	r2,zero,1036c8 <__alt_data_end+0xfffc36c8>
  10482c:	d8c02017 	ldw	r3,128(sp)
  104830:	da000404 	addi	r8,sp,16
  104834:	d9003217 	ldw	r4,200(sp)
  104838:	d8802617 	ldw	r2,152(sp)
  10483c:	d9403317 	ldw	r5,204(sp)
  104840:	8123883a 	add	r17,r16,r4
  104844:	11400216 	blt	r2,r5,104850 <___svfprintf_internal_r+0x1524>
  104848:	9100004c 	andi	r4,r18,1
  10484c:	20000d26 	beq	r4,zero,104884 <___svfprintf_internal_r+0x1558>
  104850:	d9003817 	ldw	r4,224(sp)
  104854:	d9403417 	ldw	r5,208(sp)
  104858:	1907883a 	add	r3,r3,r4
  10485c:	d9001f17 	ldw	r4,124(sp)
  104860:	41400015 	stw	r5,0(r8)
  104864:	d9403817 	ldw	r5,224(sp)
  104868:	21000044 	addi	r4,r4,1
  10486c:	d8c02015 	stw	r3,128(sp)
  104870:	41400115 	stw	r5,4(r8)
  104874:	d9001f15 	stw	r4,124(sp)
  104878:	014001c4 	movi	r5,7
  10487c:	2901dc16 	blt	r5,r4,104ff0 <___svfprintf_internal_r+0x1cc4>
  104880:	42000204 	addi	r8,r8,8
  104884:	d9003317 	ldw	r4,204(sp)
  104888:	8121883a 	add	r16,r16,r4
  10488c:	2085c83a 	sub	r2,r4,r2
  104890:	8461c83a 	sub	r16,r16,r17
  104894:	1400010e 	bge	r2,r16,10489c <___svfprintf_internal_r+0x1570>
  104898:	1021883a 	mov	r16,r2
  10489c:	04000a0e 	bge	zero,r16,1048c8 <___svfprintf_internal_r+0x159c>
  1048a0:	d9001f17 	ldw	r4,124(sp)
  1048a4:	1c07883a 	add	r3,r3,r16
  1048a8:	44400015 	stw	r17,0(r8)
  1048ac:	21000044 	addi	r4,r4,1
  1048b0:	44000115 	stw	r16,4(r8)
  1048b4:	d8c02015 	stw	r3,128(sp)
  1048b8:	d9001f15 	stw	r4,124(sp)
  1048bc:	014001c4 	movi	r5,7
  1048c0:	2901e616 	blt	r5,r4,10505c <___svfprintf_internal_r+0x1d30>
  1048c4:	42000204 	addi	r8,r8,8
  1048c8:	8001f616 	blt	r16,zero,1050a4 <___svfprintf_internal_r+0x1d78>
  1048cc:	1421c83a 	sub	r16,r2,r16
  1048d0:	043cfa0e 	bge	zero,r16,103cbc <__alt_data_end+0xfffc3cbc>
  1048d4:	04400404 	movi	r17,16
  1048d8:	d8801f17 	ldw	r2,124(sp)
  1048dc:	8c3edd0e 	bge	r17,r16,104454 <__alt_data_end+0xfffc4454>
  1048e0:	014004b4 	movhi	r5,18
  1048e4:	294e5284 	addi	r5,r5,14666
  1048e8:	d9402c15 	stw	r5,176(sp)
  1048ec:	058001c4 	movi	r22,7
  1048f0:	dd002d17 	ldw	r20,180(sp)
  1048f4:	00000306 	br	104904 <___svfprintf_internal_r+0x15d8>
  1048f8:	42000204 	addi	r8,r8,8
  1048fc:	843ffc04 	addi	r16,r16,-16
  104900:	8c3ed70e 	bge	r17,r16,104460 <__alt_data_end+0xfffc4460>
  104904:	18c00404 	addi	r3,r3,16
  104908:	10800044 	addi	r2,r2,1
  10490c:	45400015 	stw	r21,0(r8)
  104910:	44400115 	stw	r17,4(r8)
  104914:	d8c02015 	stw	r3,128(sp)
  104918:	d8801f15 	stw	r2,124(sp)
  10491c:	b0bff60e 	bge	r22,r2,1048f8 <__alt_data_end+0xfffc48f8>
  104920:	d9801e04 	addi	r6,sp,120
  104924:	a00b883a 	mov	r5,r20
  104928:	9809883a 	mov	r4,r19
  10492c:	010fb840 	call	10fb84 <__ssprint_r>
  104930:	103b651e 	bne	r2,zero,1036c8 <__alt_data_end+0xfffc36c8>
  104934:	d8c02017 	ldw	r3,128(sp)
  104938:	d8801f17 	ldw	r2,124(sp)
  10493c:	da000404 	addi	r8,sp,16
  104940:	003fee06 	br	1048fc <__alt_data_end+0xfffc48fc>
  104944:	9088703a 	and	r4,r18,r2
  104948:	203e8d1e 	bne	r4,zero,104380 <__alt_data_end+0xfffc4380>
  10494c:	dc401f17 	ldw	r17,124(sp)
  104950:	40800115 	stw	r2,4(r8)
  104954:	44000015 	stw	r16,0(r8)
  104958:	8c400044 	addi	r17,r17,1
  10495c:	d8c02015 	stw	r3,128(sp)
  104960:	dc401f15 	stw	r17,124(sp)
  104964:	008001c4 	movi	r2,7
  104968:	147f7f16 	blt	r2,r17,104768 <__alt_data_end+0xfffc4768>
  10496c:	45800204 	addi	r22,r8,8
  104970:	003eac06 	br	104424 <__alt_data_end+0xfffc4424>
  104974:	d9402d17 	ldw	r5,180(sp)
  104978:	d9801e04 	addi	r6,sp,120
  10497c:	9809883a 	mov	r4,r19
  104980:	010fb840 	call	10fb84 <__ssprint_r>
  104984:	103b501e 	bne	r2,zero,1036c8 <__alt_data_end+0xfffc36c8>
  104988:	d8c02017 	ldw	r3,128(sp)
  10498c:	dc401f17 	ldw	r17,124(sp)
  104990:	da000404 	addi	r8,sp,16
  104994:	003e8406 	br	1043a8 <__alt_data_end+0xfffc43a8>
  104998:	d9402d17 	ldw	r5,180(sp)
  10499c:	d9801e04 	addi	r6,sp,120
  1049a0:	9809883a 	mov	r4,r19
  1049a4:	010fb840 	call	10fb84 <__ssprint_r>
  1049a8:	103b471e 	bne	r2,zero,1036c8 <__alt_data_end+0xfffc36c8>
  1049ac:	d8c02017 	ldw	r3,128(sp)
  1049b0:	dc401f17 	ldw	r17,124(sp)
  1049b4:	dd800404 	addi	r22,sp,16
  1049b8:	003e8606 	br	1043d4 <__alt_data_end+0xfffc43d4>
  1049bc:	0029883a 	mov	r20,zero
  1049c0:	a5000c04 	addi	r20,r20,48
  1049c4:	dc001dc4 	addi	r16,sp,119
  1049c8:	dd001dc5 	stb	r20,119(sp)
  1049cc:	003f3806 	br	1046b0 <__alt_data_end+0xfffc46b0>
  1049d0:	d9402d17 	ldw	r5,180(sp)
  1049d4:	d9801e04 	addi	r6,sp,120
  1049d8:	9809883a 	mov	r4,r19
  1049dc:	010fb840 	call	10fb84 <__ssprint_r>
  1049e0:	103b391e 	bne	r2,zero,1036c8 <__alt_data_end+0xfffc36c8>
  1049e4:	d8c02017 	ldw	r3,128(sp)
  1049e8:	da000404 	addi	r8,sp,16
  1049ec:	003c7306 	br	103bbc <__alt_data_end+0xfffc3bbc>
  1049f0:	d9003617 	ldw	r4,216(sp)
  1049f4:	d9403717 	ldw	r5,220(sp)
  1049f8:	da003e15 	stw	r8,248(sp)
  1049fc:	010d7ac0 	call	10d7ac <__fpclassifyd>
  104a00:	da003e17 	ldw	r8,248(sp)
  104a04:	1000bd1e 	bne	r2,zero,104cfc <___svfprintf_internal_r+0x19d0>
  104a08:	008011c4 	movi	r2,71
  104a0c:	14411e0e 	bge	r2,r17,104e88 <___svfprintf_internal_r+0x1b5c>
  104a10:	040004b4 	movhi	r16,18
  104a14:	840e4504 	addi	r16,r16,14612
  104a18:	00c000c4 	movi	r3,3
  104a1c:	00bfdfc4 	movi	r2,-129
  104a20:	d8c02915 	stw	r3,164(sp)
  104a24:	90a4703a 	and	r18,r18,r2
  104a28:	df002783 	ldbu	fp,158(sp)
  104a2c:	d8c02b15 	stw	r3,172(sp)
  104a30:	d8002a15 	stw	zero,168(sp)
  104a34:	d8003215 	stw	zero,200(sp)
  104a38:	003bfa06 	br	103a24 <__alt_data_end+0xfffc3a24>
  104a3c:	9080100c 	andi	r2,r18,64
  104a40:	d8002785 	stb	zero,158(sp)
  104a44:	10009426 	beq	r2,zero,104c98 <___svfprintf_internal_r+0x196c>
  104a48:	d9402e17 	ldw	r5,184(sp)
  104a4c:	d8c02a17 	ldw	r3,168(sp)
  104a50:	002d883a 	mov	r22,zero
  104a54:	28800104 	addi	r2,r5,4
  104a58:	2d00000b 	ldhu	r20,0(r5)
  104a5c:	183ec10e 	bge	r3,zero,104564 <__alt_data_end+0xfffc4564>
  104a60:	a586b03a 	or	r3,r20,r22
  104a64:	d8802e15 	stw	r2,184(sp)
  104a68:	183ec21e 	bne	r3,zero,104574 <__alt_data_end+0xfffc4574>
  104a6c:	0039883a 	mov	fp,zero
  104a70:	0005883a 	mov	r2,zero
  104a74:	003db806 	br	104158 <__alt_data_end+0xfffc4158>
  104a78:	d8c02e17 	ldw	r3,184(sp)
  104a7c:	d9002e17 	ldw	r4,184(sp)
  104a80:	d9402e17 	ldw	r5,184(sp)
  104a84:	18c00017 	ldw	r3,0(r3)
  104a88:	21000117 	ldw	r4,4(r4)
  104a8c:	29400204 	addi	r5,r5,8
  104a90:	d8c03615 	stw	r3,216(sp)
  104a94:	d9003715 	stw	r4,220(sp)
  104a98:	d9402e15 	stw	r5,184(sp)
  104a9c:	003b5a06 	br	103808 <__alt_data_end+0xfffc3808>
  104aa0:	9080100c 	andi	r2,r18,64
  104aa4:	10010726 	beq	r2,zero,104ec4 <___svfprintf_internal_r+0x1b98>
  104aa8:	d8802e17 	ldw	r2,184(sp)
  104aac:	1500000f 	ldh	r20,0(r2)
  104ab0:	10800104 	addi	r2,r2,4
  104ab4:	d8802e15 	stw	r2,184(sp)
  104ab8:	a02dd7fa 	srai	r22,r20,31
  104abc:	b005883a 	mov	r2,r22
  104ac0:	003b7d06 	br	1038b8 <__alt_data_end+0xfffc38b8>
  104ac4:	9080100c 	andi	r2,r18,64
  104ac8:	10010526 	beq	r2,zero,104ee0 <___svfprintf_internal_r+0x1bb4>
  104acc:	d8c02e17 	ldw	r3,184(sp)
  104ad0:	002d883a 	mov	r22,zero
  104ad4:	1d00000b 	ldhu	r20,0(r3)
  104ad8:	18c00104 	addi	r3,r3,4
  104adc:	d8c02e15 	stw	r3,184(sp)
  104ae0:	003ce206 	br	103e6c <__alt_data_end+0xfffc3e6c>
  104ae4:	bc400007 	ldb	r17,0(r23)
  104ae8:	003a6506 	br	103480 <__alt_data_end+0xfffc3480>
  104aec:	9080040c 	andi	r2,r18,16
  104af0:	10010126 	beq	r2,zero,104ef8 <___svfprintf_internal_r+0x1bcc>
  104af4:	d8c02e17 	ldw	r3,184(sp)
  104af8:	d9002f17 	ldw	r4,188(sp)
  104afc:	18800017 	ldw	r2,0(r3)
  104b00:	18c00104 	addi	r3,r3,4
  104b04:	d8c02e15 	stw	r3,184(sp)
  104b08:	11000015 	stw	r4,0(r2)
  104b0c:	003a3206 	br	1033d8 <__alt_data_end+0xfffc33d8>
  104b10:	d9002a17 	ldw	r4,168(sp)
  104b14:	d8002785 	stb	zero,158(sp)
  104b18:	203d8d16 	blt	r4,zero,104150 <__alt_data_end+0xfffc4150>
  104b1c:	00bfdfc4 	movi	r2,-129
  104b20:	90a4703a 	and	r18,r18,r2
  104b24:	003ad506 	br	10367c <__alt_data_end+0xfffc367c>
  104b28:	014004b4 	movhi	r5,18
  104b2c:	294e5284 	addi	r5,r5,14666
  104b30:	d9402c15 	stw	r5,176(sp)
  104b34:	d9402c17 	ldw	r5,176(sp)
  104b38:	1c47883a 	add	r3,r3,r17
  104b3c:	10800044 	addi	r2,r2,1
  104b40:	41400015 	stw	r5,0(r8)
  104b44:	44400115 	stw	r17,4(r8)
  104b48:	d8c02015 	stw	r3,128(sp)
  104b4c:	d8801f15 	stw	r2,124(sp)
  104b50:	010001c4 	movi	r4,7
  104b54:	20bf3016 	blt	r4,r2,104818 <__alt_data_end+0xfffc4818>
  104b58:	42000204 	addi	r8,r8,8
  104b5c:	003f3506 	br	104834 <__alt_data_end+0xfffc4834>
  104b60:	010004b4 	movhi	r4,18
  104b64:	210e5284 	addi	r4,r4,14666
  104b68:	d9002c15 	stw	r4,176(sp)
  104b6c:	003c3c06 	br	103c60 <__alt_data_end+0xfffc3c60>
  104b70:	d9402d17 	ldw	r5,180(sp)
  104b74:	d9801e04 	addi	r6,sp,120
  104b78:	9809883a 	mov	r4,r19
  104b7c:	010fb840 	call	10fb84 <__ssprint_r>
  104b80:	103ad11e 	bne	r2,zero,1036c8 <__alt_data_end+0xfffc36c8>
  104b84:	d8c02017 	ldw	r3,128(sp)
  104b88:	da000404 	addi	r8,sp,16
  104b8c:	003d9306 	br	1041dc <__alt_data_end+0xfffc41dc>
  104b90:	d8801f17 	ldw	r2,124(sp)
  104b94:	014004b4 	movhi	r5,18
  104b98:	01000044 	movi	r4,1
  104b9c:	18c00044 	addi	r3,r3,1
  104ba0:	10800044 	addi	r2,r2,1
  104ba4:	294e5204 	addi	r5,r5,14664
  104ba8:	41000115 	stw	r4,4(r8)
  104bac:	41400015 	stw	r5,0(r8)
  104bb0:	d8c02015 	stw	r3,128(sp)
  104bb4:	d8801f15 	stw	r2,124(sp)
  104bb8:	010001c4 	movi	r4,7
  104bbc:	2080b516 	blt	r4,r2,104e94 <___svfprintf_internal_r+0x1b68>
  104bc0:	42000204 	addi	r8,r8,8
  104bc4:	8800041e 	bne	r17,zero,104bd8 <___svfprintf_internal_r+0x18ac>
  104bc8:	d8803317 	ldw	r2,204(sp)
  104bcc:	1000021e 	bne	r2,zero,104bd8 <___svfprintf_internal_r+0x18ac>
  104bd0:	9080004c 	andi	r2,r18,1
  104bd4:	103c3926 	beq	r2,zero,103cbc <__alt_data_end+0xfffc3cbc>
  104bd8:	d9003817 	ldw	r4,224(sp)
  104bdc:	d8801f17 	ldw	r2,124(sp)
  104be0:	d9403417 	ldw	r5,208(sp)
  104be4:	20c7883a 	add	r3,r4,r3
  104be8:	10800044 	addi	r2,r2,1
  104bec:	41000115 	stw	r4,4(r8)
  104bf0:	41400015 	stw	r5,0(r8)
  104bf4:	d8c02015 	stw	r3,128(sp)
  104bf8:	d8801f15 	stw	r2,124(sp)
  104bfc:	010001c4 	movi	r4,7
  104c00:	20818016 	blt	r4,r2,105204 <___svfprintf_internal_r+0x1ed8>
  104c04:	42000204 	addi	r8,r8,8
  104c08:	0463c83a 	sub	r17,zero,r17
  104c0c:	0440cb0e 	bge	zero,r17,104f3c <___svfprintf_internal_r+0x1c10>
  104c10:	05800404 	movi	r22,16
  104c14:	b440e80e 	bge	r22,r17,104fb8 <___svfprintf_internal_r+0x1c8c>
  104c18:	014004b4 	movhi	r5,18
  104c1c:	294e5284 	addi	r5,r5,14666
  104c20:	d9402c15 	stw	r5,176(sp)
  104c24:	070001c4 	movi	fp,7
  104c28:	dd002d17 	ldw	r20,180(sp)
  104c2c:	00000306 	br	104c3c <___svfprintf_internal_r+0x1910>
  104c30:	42000204 	addi	r8,r8,8
  104c34:	8c7ffc04 	addi	r17,r17,-16
  104c38:	b440e20e 	bge	r22,r17,104fc4 <___svfprintf_internal_r+0x1c98>
  104c3c:	18c00404 	addi	r3,r3,16
  104c40:	10800044 	addi	r2,r2,1
  104c44:	45400015 	stw	r21,0(r8)
  104c48:	45800115 	stw	r22,4(r8)
  104c4c:	d8c02015 	stw	r3,128(sp)
  104c50:	d8801f15 	stw	r2,124(sp)
  104c54:	e0bff60e 	bge	fp,r2,104c30 <__alt_data_end+0xfffc4c30>
  104c58:	d9801e04 	addi	r6,sp,120
  104c5c:	a00b883a 	mov	r5,r20
  104c60:	9809883a 	mov	r4,r19
  104c64:	010fb840 	call	10fb84 <__ssprint_r>
  104c68:	103a971e 	bne	r2,zero,1036c8 <__alt_data_end+0xfffc36c8>
  104c6c:	d8c02017 	ldw	r3,128(sp)
  104c70:	d8801f17 	ldw	r2,124(sp)
  104c74:	da000404 	addi	r8,sp,16
  104c78:	003fee06 	br	104c34 <__alt_data_end+0xfffc4c34>
  104c7c:	d9002e17 	ldw	r4,184(sp)
  104c80:	d9402a17 	ldw	r5,168(sp)
  104c84:	002d883a 	mov	r22,zero
  104c88:	20800104 	addi	r2,r4,4
  104c8c:	25000017 	ldw	r20,0(r4)
  104c90:	283e7d0e 	bge	r5,zero,104688 <__alt_data_end+0xfffc4688>
  104c94:	003eda06 	br	104800 <__alt_data_end+0xfffc4800>
  104c98:	d9002e17 	ldw	r4,184(sp)
  104c9c:	d9402a17 	ldw	r5,168(sp)
  104ca0:	002d883a 	mov	r22,zero
  104ca4:	20800104 	addi	r2,r4,4
  104ca8:	25000017 	ldw	r20,0(r4)
  104cac:	283e2d0e 	bge	r5,zero,104564 <__alt_data_end+0xfffc4564>
  104cb0:	003f6b06 	br	104a60 <__alt_data_end+0xfffc4a60>
  104cb4:	d8c02e15 	stw	r3,184(sp)
  104cb8:	0039883a 	mov	fp,zero
  104cbc:	003ed206 	br	104808 <__alt_data_end+0xfffc4808>
  104cc0:	bc400043 	ldbu	r17,1(r23)
  104cc4:	84000814 	ori	r16,r16,32
  104cc8:	bdc00044 	addi	r23,r23,1
  104ccc:	8c403fcc 	andi	r17,r17,255
  104cd0:	8c40201c 	xori	r17,r17,128
  104cd4:	8c7fe004 	addi	r17,r17,-128
  104cd8:	0039e906 	br	103480 <__alt_data_end+0xfffc3480>
  104cdc:	d9402d17 	ldw	r5,180(sp)
  104ce0:	d9801e04 	addi	r6,sp,120
  104ce4:	9809883a 	mov	r4,r19
  104ce8:	010fb840 	call	10fb84 <__ssprint_r>
  104cec:	103a761e 	bne	r2,zero,1036c8 <__alt_data_end+0xfffc36c8>
  104cf0:	d8c02017 	ldw	r3,128(sp)
  104cf4:	da000404 	addi	r8,sp,16
  104cf8:	003d4a06 	br	104224 <__alt_data_end+0xfffc4224>
  104cfc:	d9002a17 	ldw	r4,168(sp)
  104d00:	05bff7c4 	movi	r22,-33
  104d04:	00bfffc4 	movi	r2,-1
  104d08:	8dac703a 	and	r22,r17,r22
  104d0c:	20806a26 	beq	r4,r2,104eb8 <___svfprintf_internal_r+0x1b8c>
  104d10:	008011c4 	movi	r2,71
  104d14:	b0813726 	beq	r22,r2,1051f4 <___svfprintf_internal_r+0x1ec8>
  104d18:	d9003717 	ldw	r4,220(sp)
  104d1c:	90c04014 	ori	r3,r18,256
  104d20:	d8c02c15 	stw	r3,176(sp)
  104d24:	20015d16 	blt	r4,zero,10529c <___svfprintf_internal_r+0x1f70>
  104d28:	dd003717 	ldw	r20,220(sp)
  104d2c:	d8002905 	stb	zero,164(sp)
  104d30:	00801984 	movi	r2,102
  104d34:	88814026 	beq	r17,r2,105238 <___svfprintf_internal_r+0x1f0c>
  104d38:	00801184 	movi	r2,70
  104d3c:	88817126 	beq	r17,r2,105304 <___svfprintf_internal_r+0x1fd8>
  104d40:	00801144 	movi	r2,69
  104d44:	b0816226 	beq	r22,r2,1052d0 <___svfprintf_internal_r+0x1fa4>
  104d48:	d8c02a17 	ldw	r3,168(sp)
  104d4c:	d8802104 	addi	r2,sp,132
  104d50:	d8800315 	stw	r2,12(sp)
  104d54:	d9403617 	ldw	r5,216(sp)
  104d58:	d8802504 	addi	r2,sp,148
  104d5c:	d8800215 	stw	r2,8(sp)
  104d60:	d8802604 	addi	r2,sp,152
  104d64:	d8c00015 	stw	r3,0(sp)
  104d68:	d8800115 	stw	r2,4(sp)
  104d6c:	01c00084 	movi	r7,2
  104d70:	a00d883a 	mov	r6,r20
  104d74:	9809883a 	mov	r4,r19
  104d78:	d8c03d15 	stw	r3,244(sp)
  104d7c:	da003e15 	stw	r8,248(sp)
  104d80:	01097580 	call	109758 <_dtoa_r>
  104d84:	1021883a 	mov	r16,r2
  104d88:	008019c4 	movi	r2,103
  104d8c:	d8c03d17 	ldw	r3,244(sp)
  104d90:	da003e17 	ldw	r8,248(sp)
  104d94:	8880e726 	beq	r17,r2,105134 <___svfprintf_internal_r+0x1e08>
  104d98:	008011c4 	movi	r2,71
  104d9c:	8880d426 	beq	r17,r2,1050f0 <___svfprintf_internal_r+0x1dc4>
  104da0:	80f9883a 	add	fp,r16,r3
  104da4:	d9003617 	ldw	r4,216(sp)
  104da8:	000d883a 	mov	r6,zero
  104dac:	000f883a 	mov	r7,zero
  104db0:	a00b883a 	mov	r5,r20
  104db4:	da003e15 	stw	r8,248(sp)
  104db8:	01175140 	call	117514 <__eqdf2>
  104dbc:	da003e17 	ldw	r8,248(sp)
  104dc0:	1000e426 	beq	r2,zero,105154 <___svfprintf_internal_r+0x1e28>
  104dc4:	d8802117 	ldw	r2,132(sp)
  104dc8:	1700062e 	bgeu	r2,fp,104de4 <___svfprintf_internal_r+0x1ab8>
  104dcc:	01000c04 	movi	r4,48
  104dd0:	10c00044 	addi	r3,r2,1
  104dd4:	d8c02115 	stw	r3,132(sp)
  104dd8:	11000005 	stb	r4,0(r2)
  104ddc:	d8802117 	ldw	r2,132(sp)
  104de0:	173ffb36 	bltu	r2,fp,104dd0 <__alt_data_end+0xfffc4dd0>
  104de4:	1405c83a 	sub	r2,r2,r16
  104de8:	d8803315 	stw	r2,204(sp)
  104dec:	008011c4 	movi	r2,71
  104df0:	b080c526 	beq	r22,r2,105108 <___svfprintf_internal_r+0x1ddc>
  104df4:	00801944 	movi	r2,101
  104df8:	1441d80e 	bge	r2,r17,10555c <___svfprintf_internal_r+0x2230>
  104dfc:	d8c02617 	ldw	r3,152(sp)
  104e00:	00801984 	movi	r2,102
  104e04:	d8c03215 	stw	r3,200(sp)
  104e08:	88813426 	beq	r17,r2,1052dc <___svfprintf_internal_r+0x1fb0>
  104e0c:	d8c03217 	ldw	r3,200(sp)
  104e10:	d9003317 	ldw	r4,204(sp)
  104e14:	19012516 	blt	r3,r4,1052ac <___svfprintf_internal_r+0x1f80>
  104e18:	9480004c 	andi	r18,r18,1
  104e1c:	9001841e 	bne	r18,zero,105430 <___svfprintf_internal_r+0x2104>
  104e20:	1805883a 	mov	r2,r3
  104e24:	1801cb16 	blt	r3,zero,105554 <___svfprintf_internal_r+0x2228>
  104e28:	d8c03217 	ldw	r3,200(sp)
  104e2c:	044019c4 	movi	r17,103
  104e30:	d8c02b15 	stw	r3,172(sp)
  104e34:	df002907 	ldb	fp,164(sp)
  104e38:	e000a61e 	bne	fp,zero,1050d4 <___svfprintf_internal_r+0x1da8>
  104e3c:	df002783 	ldbu	fp,158(sp)
  104e40:	d8802915 	stw	r2,164(sp)
  104e44:	dc802c17 	ldw	r18,176(sp)
  104e48:	d8002a15 	stw	zero,168(sp)
  104e4c:	003af506 	br	103a24 <__alt_data_end+0xfffc3a24>
  104e50:	040004b4 	movhi	r16,18
  104e54:	840e4204 	addi	r16,r16,14600
  104e58:	003a7e06 	br	103854 <__alt_data_end+0xfffc3854>
  104e5c:	d9003917 	ldw	r4,228(sp)
  104e60:	04001004 	movi	r16,64
  104e64:	800b883a 	mov	r5,r16
  104e68:	0101e280 	call	101e28 <_malloc_r>
  104e6c:	d9002d17 	ldw	r4,180(sp)
  104e70:	20800015 	stw	r2,0(r4)
  104e74:	20800415 	stw	r2,16(r4)
  104e78:	1001d026 	beq	r2,zero,1055bc <___svfprintf_internal_r+0x2290>
  104e7c:	d8802d17 	ldw	r2,180(sp)
  104e80:	14000515 	stw	r16,20(r2)
  104e84:	00394406 	br	103398 <__alt_data_end+0xfffc3398>
  104e88:	040004b4 	movhi	r16,18
  104e8c:	840e4404 	addi	r16,r16,14608
  104e90:	003ee106 	br	104a18 <__alt_data_end+0xfffc4a18>
  104e94:	d9402d17 	ldw	r5,180(sp)
  104e98:	d9801e04 	addi	r6,sp,120
  104e9c:	9809883a 	mov	r4,r19
  104ea0:	010fb840 	call	10fb84 <__ssprint_r>
  104ea4:	103a081e 	bne	r2,zero,1036c8 <__alt_data_end+0xfffc36c8>
  104ea8:	dc402617 	ldw	r17,152(sp)
  104eac:	d8c02017 	ldw	r3,128(sp)
  104eb0:	da000404 	addi	r8,sp,16
  104eb4:	003f4306 	br	104bc4 <__alt_data_end+0xfffc4bc4>
  104eb8:	01400184 	movi	r5,6
  104ebc:	d9402a15 	stw	r5,168(sp)
  104ec0:	003f9506 	br	104d18 <__alt_data_end+0xfffc4d18>
  104ec4:	d8c02e17 	ldw	r3,184(sp)
  104ec8:	1d000017 	ldw	r20,0(r3)
  104ecc:	18c00104 	addi	r3,r3,4
  104ed0:	d8c02e15 	stw	r3,184(sp)
  104ed4:	a02dd7fa 	srai	r22,r20,31
  104ed8:	b005883a 	mov	r2,r22
  104edc:	003a7606 	br	1038b8 <__alt_data_end+0xfffc38b8>
  104ee0:	d9002e17 	ldw	r4,184(sp)
  104ee4:	002d883a 	mov	r22,zero
  104ee8:	25000017 	ldw	r20,0(r4)
  104eec:	21000104 	addi	r4,r4,4
  104ef0:	d9002e15 	stw	r4,184(sp)
  104ef4:	003bdd06 	br	103e6c <__alt_data_end+0xfffc3e6c>
  104ef8:	9480100c 	andi	r18,r18,64
  104efc:	90006e26 	beq	r18,zero,1050b8 <___svfprintf_internal_r+0x1d8c>
  104f00:	d9402e17 	ldw	r5,184(sp)
  104f04:	d8c02f17 	ldw	r3,188(sp)
  104f08:	28800017 	ldw	r2,0(r5)
  104f0c:	29400104 	addi	r5,r5,4
  104f10:	d9402e15 	stw	r5,184(sp)
  104f14:	10c0000d 	sth	r3,0(r2)
  104f18:	00392f06 	br	1033d8 <__alt_data_end+0xfffc33d8>
  104f1c:	d9402d17 	ldw	r5,180(sp)
  104f20:	d9801e04 	addi	r6,sp,120
  104f24:	9809883a 	mov	r4,r19
  104f28:	010fb840 	call	10fb84 <__ssprint_r>
  104f2c:	1039e61e 	bne	r2,zero,1036c8 <__alt_data_end+0xfffc36c8>
  104f30:	d8c02017 	ldw	r3,128(sp)
  104f34:	d8801f17 	ldw	r2,124(sp)
  104f38:	da000404 	addi	r8,sp,16
  104f3c:	d9403317 	ldw	r5,204(sp)
  104f40:	10800044 	addi	r2,r2,1
  104f44:	44000015 	stw	r16,0(r8)
  104f48:	28c7883a 	add	r3,r5,r3
  104f4c:	003b5506 	br	103ca4 <__alt_data_end+0xfffc3ca4>
  104f50:	8009883a 	mov	r4,r16
  104f54:	df003e15 	stw	fp,248(sp)
  104f58:	01031f00 	call	1031f0 <strlen>
  104f5c:	d8802b15 	stw	r2,172(sp)
  104f60:	da003e17 	ldw	r8,248(sp)
  104f64:	103c160e 	bge	r2,zero,103fc0 <__alt_data_end+0xfffc3fc0>
  104f68:	0005883a 	mov	r2,zero
  104f6c:	003c1406 	br	103fc0 <__alt_data_end+0xfffc3fc0>
  104f70:	00bfffc4 	movi	r2,-1
  104f74:	0039d906 	br	1036dc <__alt_data_end+0xfffc36dc>
  104f78:	010004b4 	movhi	r4,18
  104f7c:	210e5684 	addi	r4,r4,14682
  104f80:	d9003515 	stw	r4,212(sp)
  104f84:	003ae406 	br	103b18 <__alt_data_end+0xfffc3b18>
  104f88:	013fffc4 	movi	r4,-1
  104f8c:	0039fa06 	br	103778 <__alt_data_end+0xfffc3778>
  104f90:	d9402d17 	ldw	r5,180(sp)
  104f94:	d9801e04 	addi	r6,sp,120
  104f98:	9809883a 	mov	r4,r19
  104f9c:	010fb840 	call	10fb84 <__ssprint_r>
  104fa0:	1039c91e 	bne	r2,zero,1036c8 <__alt_data_end+0xfffc36c8>
  104fa4:	d8c02017 	ldw	r3,128(sp)
  104fa8:	da000404 	addi	r8,sp,16
  104fac:	003d8406 	br	1045c0 <__alt_data_end+0xfffc45c0>
  104fb0:	0023883a 	mov	r17,zero
  104fb4:	003d8306 	br	1045c4 <__alt_data_end+0xfffc45c4>
  104fb8:	010004b4 	movhi	r4,18
  104fbc:	210e5284 	addi	r4,r4,14666
  104fc0:	d9002c15 	stw	r4,176(sp)
  104fc4:	d9002c17 	ldw	r4,176(sp)
  104fc8:	1c47883a 	add	r3,r3,r17
  104fcc:	10800044 	addi	r2,r2,1
  104fd0:	41000015 	stw	r4,0(r8)
  104fd4:	44400115 	stw	r17,4(r8)
  104fd8:	d8c02015 	stw	r3,128(sp)
  104fdc:	d8801f15 	stw	r2,124(sp)
  104fe0:	010001c4 	movi	r4,7
  104fe4:	20bfcd16 	blt	r4,r2,104f1c <__alt_data_end+0xfffc4f1c>
  104fe8:	42000204 	addi	r8,r8,8
  104fec:	003fd306 	br	104f3c <__alt_data_end+0xfffc4f3c>
  104ff0:	d9402d17 	ldw	r5,180(sp)
  104ff4:	d9801e04 	addi	r6,sp,120
  104ff8:	9809883a 	mov	r4,r19
  104ffc:	010fb840 	call	10fb84 <__ssprint_r>
  105000:	1039b11e 	bne	r2,zero,1036c8 <__alt_data_end+0xfffc36c8>
  105004:	d8802617 	ldw	r2,152(sp)
  105008:	d8c02017 	ldw	r3,128(sp)
  10500c:	da000404 	addi	r8,sp,16
  105010:	003e1c06 	br	104884 <__alt_data_end+0xfffc4884>
  105014:	d8802a17 	ldw	r2,168(sp)
  105018:	00c00184 	movi	r3,6
  10501c:	1880012e 	bgeu	r3,r2,105024 <___svfprintf_internal_r+0x1cf8>
  105020:	1805883a 	mov	r2,r3
  105024:	d8802b15 	stw	r2,172(sp)
  105028:	1000f316 	blt	r2,zero,1053f8 <___svfprintf_internal_r+0x20cc>
  10502c:	040004b4 	movhi	r16,18
  105030:	d8802915 	stw	r2,164(sp)
  105034:	dd002e15 	stw	r20,184(sp)
  105038:	d8002a15 	stw	zero,168(sp)
  10503c:	d8003215 	stw	zero,200(sp)
  105040:	840e5004 	addi	r16,r16,14656
  105044:	0039883a 	mov	fp,zero
  105048:	003a7d06 	br	103a40 <__alt_data_end+0xfffc3a40>
  10504c:	010004b4 	movhi	r4,18
  105050:	210e5684 	addi	r4,r4,14682
  105054:	d9003515 	stw	r4,212(sp)
  105058:	003b3d06 	br	103d50 <__alt_data_end+0xfffc3d50>
  10505c:	d9402d17 	ldw	r5,180(sp)
  105060:	d9801e04 	addi	r6,sp,120
  105064:	9809883a 	mov	r4,r19
  105068:	010fb840 	call	10fb84 <__ssprint_r>
  10506c:	1039961e 	bne	r2,zero,1036c8 <__alt_data_end+0xfffc36c8>
  105070:	d8802617 	ldw	r2,152(sp)
  105074:	d9403317 	ldw	r5,204(sp)
  105078:	d8c02017 	ldw	r3,128(sp)
  10507c:	da000404 	addi	r8,sp,16
  105080:	2885c83a 	sub	r2,r5,r2
  105084:	003e1006 	br	1048c8 <__alt_data_end+0xfffc48c8>
  105088:	00800044 	movi	r2,1
  10508c:	10803fcc 	andi	r2,r2,255
  105090:	00c00044 	movi	r3,1
  105094:	10fa1026 	beq	r2,r3,1038d8 <__alt_data_end+0xfffc38d8>
  105098:	00c00084 	movi	r3,2
  10509c:	10fb8226 	beq	r2,r3,103ea8 <__alt_data_end+0xfffc3ea8>
  1050a0:	003a4206 	br	1039ac <__alt_data_end+0xfffc39ac>
  1050a4:	0021883a 	mov	r16,zero
  1050a8:	003e0806 	br	1048cc <__alt_data_end+0xfffc48cc>
  1050ac:	07000b44 	movi	fp,45
  1050b0:	df002785 	stb	fp,158(sp)
  1050b4:	0039e306 	br	103844 <__alt_data_end+0xfffc3844>
  1050b8:	d9002e17 	ldw	r4,184(sp)
  1050bc:	d9402f17 	ldw	r5,188(sp)
  1050c0:	20800017 	ldw	r2,0(r4)
  1050c4:	21000104 	addi	r4,r4,4
  1050c8:	d9002e15 	stw	r4,184(sp)
  1050cc:	11400015 	stw	r5,0(r2)
  1050d0:	0038c106 	br	1033d8 <__alt_data_end+0xfffc33d8>
  1050d4:	00c00b44 	movi	r3,45
  1050d8:	d8c02785 	stb	r3,158(sp)
  1050dc:	d8802915 	stw	r2,164(sp)
  1050e0:	dc802c17 	ldw	r18,176(sp)
  1050e4:	d8002a15 	stw	zero,168(sp)
  1050e8:	07000b44 	movi	fp,45
  1050ec:	003a5106 	br	103a34 <__alt_data_end+0xfffc3a34>
  1050f0:	9080004c 	andi	r2,r18,1
  1050f4:	1000941e 	bne	r2,zero,105348 <___svfprintf_internal_r+0x201c>
  1050f8:	d8802117 	ldw	r2,132(sp)
  1050fc:	1405c83a 	sub	r2,r2,r16
  105100:	d8803315 	stw	r2,204(sp)
  105104:	b441151e 	bne	r22,r17,10555c <___svfprintf_internal_r+0x2230>
  105108:	dd802617 	ldw	r22,152(sp)
  10510c:	00bfff44 	movi	r2,-3
  105110:	b0801a16 	blt	r22,r2,10517c <___svfprintf_internal_r+0x1e50>
  105114:	d9402a17 	ldw	r5,168(sp)
  105118:	2d801816 	blt	r5,r22,10517c <___svfprintf_internal_r+0x1e50>
  10511c:	dd803215 	stw	r22,200(sp)
  105120:	003f3a06 	br	104e0c <__alt_data_end+0xfffc4e0c>
  105124:	1025883a 	mov	r18,r2
  105128:	0039883a 	mov	fp,zero
  10512c:	00800084 	movi	r2,2
  105130:	003fd606 	br	10508c <__alt_data_end+0xfffc508c>
  105134:	9080004c 	andi	r2,r18,1
  105138:	103f191e 	bne	r2,zero,104da0 <__alt_data_end+0xfffc4da0>
  10513c:	d8802117 	ldw	r2,132(sp)
  105140:	003f2806 	br	104de4 <__alt_data_end+0xfffc4de4>
  105144:	010004b4 	movhi	r4,18
  105148:	210e5284 	addi	r4,r4,14666
  10514c:	d9002c15 	stw	r4,176(sp)
  105150:	003c7c06 	br	104344 <__alt_data_end+0xfffc4344>
  105154:	e005883a 	mov	r2,fp
  105158:	003f2206 	br	104de4 <__alt_data_end+0xfffc4de4>
  10515c:	d9002a17 	ldw	r4,168(sp)
  105160:	df002783 	ldbu	fp,158(sp)
  105164:	dd002e15 	stw	r20,184(sp)
  105168:	d9002915 	stw	r4,164(sp)
  10516c:	d9002b15 	stw	r4,172(sp)
  105170:	d8002a15 	stw	zero,168(sp)
  105174:	d8003215 	stw	zero,200(sp)
  105178:	003a2a06 	br	103a24 <__alt_data_end+0xfffc3a24>
  10517c:	8c7fff84 	addi	r17,r17,-2
  105180:	b5bfffc4 	addi	r22,r22,-1
  105184:	dd802615 	stw	r22,152(sp)
  105188:	dc4022c5 	stb	r17,139(sp)
  10518c:	b000c316 	blt	r22,zero,10549c <___svfprintf_internal_r+0x2170>
  105190:	00800ac4 	movi	r2,43
  105194:	d8802305 	stb	r2,140(sp)
  105198:	00800244 	movi	r2,9
  10519c:	15806e16 	blt	r2,r22,105358 <___svfprintf_internal_r+0x202c>
  1051a0:	00800c04 	movi	r2,48
  1051a4:	b5800c04 	addi	r22,r22,48
  1051a8:	d8802345 	stb	r2,141(sp)
  1051ac:	dd802385 	stb	r22,142(sp)
  1051b0:	d88023c4 	addi	r2,sp,143
  1051b4:	df0022c4 	addi	fp,sp,139
  1051b8:	d8c03317 	ldw	r3,204(sp)
  1051bc:	1739c83a 	sub	fp,r2,fp
  1051c0:	d9003317 	ldw	r4,204(sp)
  1051c4:	e0c7883a 	add	r3,fp,r3
  1051c8:	df003b15 	stw	fp,236(sp)
  1051cc:	d8c02b15 	stw	r3,172(sp)
  1051d0:	00800044 	movi	r2,1
  1051d4:	1100b70e 	bge	r2,r4,1054b4 <___svfprintf_internal_r+0x2188>
  1051d8:	d8c02b17 	ldw	r3,172(sp)
  1051dc:	18c00044 	addi	r3,r3,1
  1051e0:	d8c02b15 	stw	r3,172(sp)
  1051e4:	1805883a 	mov	r2,r3
  1051e8:	1800b016 	blt	r3,zero,1054ac <___svfprintf_internal_r+0x2180>
  1051ec:	d8003215 	stw	zero,200(sp)
  1051f0:	003f1006 	br	104e34 <__alt_data_end+0xfffc4e34>
  1051f4:	d8802a17 	ldw	r2,168(sp)
  1051f8:	103ec71e 	bne	r2,zero,104d18 <__alt_data_end+0xfffc4d18>
  1051fc:	dc002a15 	stw	r16,168(sp)
  105200:	003ec506 	br	104d18 <__alt_data_end+0xfffc4d18>
  105204:	d9402d17 	ldw	r5,180(sp)
  105208:	d9801e04 	addi	r6,sp,120
  10520c:	9809883a 	mov	r4,r19
  105210:	010fb840 	call	10fb84 <__ssprint_r>
  105214:	10392c1e 	bne	r2,zero,1036c8 <__alt_data_end+0xfffc36c8>
  105218:	dc402617 	ldw	r17,152(sp)
  10521c:	d8c02017 	ldw	r3,128(sp)
  105220:	d8801f17 	ldw	r2,124(sp)
  105224:	da000404 	addi	r8,sp,16
  105228:	003e7706 	br	104c08 <__alt_data_end+0xfffc4c08>
  10522c:	182f883a 	mov	r23,r3
  105230:	d8002a15 	stw	zero,168(sp)
  105234:	00389306 	br	103484 <__alt_data_end+0xfffc3484>
  105238:	d8c02a17 	ldw	r3,168(sp)
  10523c:	d8802104 	addi	r2,sp,132
  105240:	d8800315 	stw	r2,12(sp)
  105244:	d9403617 	ldw	r5,216(sp)
  105248:	d8802504 	addi	r2,sp,148
  10524c:	d8800215 	stw	r2,8(sp)
  105250:	d8802604 	addi	r2,sp,152
  105254:	d8c00015 	stw	r3,0(sp)
  105258:	9809883a 	mov	r4,r19
  10525c:	d8800115 	stw	r2,4(sp)
  105260:	01c000c4 	movi	r7,3
  105264:	a00d883a 	mov	r6,r20
  105268:	da003e15 	stw	r8,248(sp)
  10526c:	01097580 	call	109758 <_dtoa_r>
  105270:	d9002a17 	ldw	r4,168(sp)
  105274:	da003e17 	ldw	r8,248(sp)
  105278:	1021883a 	mov	r16,r2
  10527c:	1139883a 	add	fp,r2,r4
  105280:	2007883a 	mov	r3,r4
  105284:	81000007 	ldb	r4,0(r16)
  105288:	00800c04 	movi	r2,48
  10528c:	20806f26 	beq	r4,r2,10544c <___svfprintf_internal_r+0x2120>
  105290:	d8c02617 	ldw	r3,152(sp)
  105294:	e0f9883a 	add	fp,fp,r3
  105298:	003ec206 	br	104da4 <__alt_data_end+0xfffc4da4>
  10529c:	00c00b44 	movi	r3,45
  1052a0:	2520003c 	xorhi	r20,r4,32768
  1052a4:	d8c02905 	stb	r3,164(sp)
  1052a8:	003ea106 	br	104d30 <__alt_data_end+0xfffc4d30>
  1052ac:	d8c03217 	ldw	r3,200(sp)
  1052b0:	00c0890e 	bge	zero,r3,1054d8 <___svfprintf_internal_r+0x21ac>
  1052b4:	00800044 	movi	r2,1
  1052b8:	d9003317 	ldw	r4,204(sp)
  1052bc:	1105883a 	add	r2,r2,r4
  1052c0:	d8802b15 	stw	r2,172(sp)
  1052c4:	10005f16 	blt	r2,zero,105444 <___svfprintf_internal_r+0x2118>
  1052c8:	044019c4 	movi	r17,103
  1052cc:	003ed906 	br	104e34 <__alt_data_end+0xfffc4e34>
  1052d0:	d9002a17 	ldw	r4,168(sp)
  1052d4:	20c00044 	addi	r3,r4,1
  1052d8:	003e9c06 	br	104d4c <__alt_data_end+0xfffc4d4c>
  1052dc:	d9002a17 	ldw	r4,168(sp)
  1052e0:	00c0680e 	bge	zero,r3,105484 <___svfprintf_internal_r+0x2158>
  1052e4:	2000461e 	bne	r4,zero,105400 <___svfprintf_internal_r+0x20d4>
  1052e8:	9480004c 	andi	r18,r18,1
  1052ec:	9000441e 	bne	r18,zero,105400 <___svfprintf_internal_r+0x20d4>
  1052f0:	1805883a 	mov	r2,r3
  1052f4:	1800a116 	blt	r3,zero,10557c <___svfprintf_internal_r+0x2250>
  1052f8:	d8c03217 	ldw	r3,200(sp)
  1052fc:	d8c02b15 	stw	r3,172(sp)
  105300:	003ecc06 	br	104e34 <__alt_data_end+0xfffc4e34>
  105304:	d9402a17 	ldw	r5,168(sp)
  105308:	d8802104 	addi	r2,sp,132
  10530c:	d8800315 	stw	r2,12(sp)
  105310:	d9400015 	stw	r5,0(sp)
  105314:	d8802504 	addi	r2,sp,148
  105318:	d9403617 	ldw	r5,216(sp)
  10531c:	d8800215 	stw	r2,8(sp)
  105320:	d8802604 	addi	r2,sp,152
  105324:	d8800115 	stw	r2,4(sp)
  105328:	01c000c4 	movi	r7,3
  10532c:	a00d883a 	mov	r6,r20
  105330:	9809883a 	mov	r4,r19
  105334:	da003e15 	stw	r8,248(sp)
  105338:	01097580 	call	109758 <_dtoa_r>
  10533c:	d8c02a17 	ldw	r3,168(sp)
  105340:	da003e17 	ldw	r8,248(sp)
  105344:	1021883a 	mov	r16,r2
  105348:	00801184 	movi	r2,70
  10534c:	80f9883a 	add	fp,r16,r3
  105350:	88bfcc26 	beq	r17,r2,105284 <__alt_data_end+0xfffc5284>
  105354:	003e9306 	br	104da4 <__alt_data_end+0xfffc4da4>
  105358:	df0022c4 	addi	fp,sp,139
  10535c:	dc002a15 	stw	r16,168(sp)
  105360:	9829883a 	mov	r20,r19
  105364:	e021883a 	mov	r16,fp
  105368:	4027883a 	mov	r19,r8
  10536c:	b009883a 	mov	r4,r22
  105370:	01400284 	movi	r5,10
  105374:	0115f440 	call	115f44 <__modsi3>
  105378:	10800c04 	addi	r2,r2,48
  10537c:	843fffc4 	addi	r16,r16,-1
  105380:	b009883a 	mov	r4,r22
  105384:	01400284 	movi	r5,10
  105388:	80800005 	stb	r2,0(r16)
  10538c:	0115ec00 	call	115ec0 <__divsi3>
  105390:	102d883a 	mov	r22,r2
  105394:	00800244 	movi	r2,9
  105398:	15bff416 	blt	r2,r22,10536c <__alt_data_end+0xfffc536c>
  10539c:	9811883a 	mov	r8,r19
  1053a0:	b0800c04 	addi	r2,r22,48
  1053a4:	a027883a 	mov	r19,r20
  1053a8:	8029883a 	mov	r20,r16
  1053ac:	a17fffc4 	addi	r5,r20,-1
  1053b0:	a0bfffc5 	stb	r2,-1(r20)
  1053b4:	dc002a17 	ldw	r16,168(sp)
  1053b8:	2f00782e 	bgeu	r5,fp,10559c <___svfprintf_internal_r+0x2270>
  1053bc:	d9c02384 	addi	r7,sp,142
  1053c0:	3d0fc83a 	sub	r7,r7,r20
  1053c4:	d9002344 	addi	r4,sp,141
  1053c8:	e1cf883a 	add	r7,fp,r7
  1053cc:	00000106 	br	1053d4 <___svfprintf_internal_r+0x20a8>
  1053d0:	28800003 	ldbu	r2,0(r5)
  1053d4:	20800005 	stb	r2,0(r4)
  1053d8:	21000044 	addi	r4,r4,1
  1053dc:	29400044 	addi	r5,r5,1
  1053e0:	21fffb1e 	bne	r4,r7,1053d0 <__alt_data_end+0xfffc53d0>
  1053e4:	d8802304 	addi	r2,sp,140
  1053e8:	1505c83a 	sub	r2,r2,r20
  1053ec:	d8c02344 	addi	r3,sp,141
  1053f0:	1885883a 	add	r2,r3,r2
  1053f4:	003f7006 	br	1051b8 <__alt_data_end+0xfffc51b8>
  1053f8:	0005883a 	mov	r2,zero
  1053fc:	003f0b06 	br	10502c <__alt_data_end+0xfffc502c>
  105400:	d9002a17 	ldw	r4,168(sp)
  105404:	d8c03217 	ldw	r3,200(sp)
  105408:	20800044 	addi	r2,r4,1
  10540c:	1885883a 	add	r2,r3,r2
  105410:	d8802b15 	stw	r2,172(sp)
  105414:	103e870e 	bge	r2,zero,104e34 <__alt_data_end+0xfffc4e34>
  105418:	0005883a 	mov	r2,zero
  10541c:	003e8506 	br	104e34 <__alt_data_end+0xfffc4e34>
  105420:	010004b4 	movhi	r4,18
  105424:	210e5284 	addi	r4,r4,14666
  105428:	d9002c15 	stw	r4,176(sp)
  10542c:	003cc506 	br	104744 <__alt_data_end+0xfffc4744>
  105430:	d8c03217 	ldw	r3,200(sp)
  105434:	18c00044 	addi	r3,r3,1
  105438:	d8c02b15 	stw	r3,172(sp)
  10543c:	1805883a 	mov	r2,r3
  105440:	183fa10e 	bge	r3,zero,1052c8 <__alt_data_end+0xfffc52c8>
  105444:	0005883a 	mov	r2,zero
  105448:	003f9f06 	br	1052c8 <__alt_data_end+0xfffc52c8>
  10544c:	d9003617 	ldw	r4,216(sp)
  105450:	000d883a 	mov	r6,zero
  105454:	000f883a 	mov	r7,zero
  105458:	a00b883a 	mov	r5,r20
  10545c:	d8c03d15 	stw	r3,244(sp)
  105460:	da003e15 	stw	r8,248(sp)
  105464:	01175140 	call	117514 <__eqdf2>
  105468:	d8c03d17 	ldw	r3,244(sp)
  10546c:	da003e17 	ldw	r8,248(sp)
  105470:	103f8726 	beq	r2,zero,105290 <__alt_data_end+0xfffc5290>
  105474:	00800044 	movi	r2,1
  105478:	10c7c83a 	sub	r3,r2,r3
  10547c:	d8c02615 	stw	r3,152(sp)
  105480:	003f8406 	br	105294 <__alt_data_end+0xfffc5294>
  105484:	20000e1e 	bne	r4,zero,1054c0 <___svfprintf_internal_r+0x2194>
  105488:	9480004c 	andi	r18,r18,1
  10548c:	90000c1e 	bne	r18,zero,1054c0 <___svfprintf_internal_r+0x2194>
  105490:	00800044 	movi	r2,1
  105494:	d8802b15 	stw	r2,172(sp)
  105498:	003e6606 	br	104e34 <__alt_data_end+0xfffc4e34>
  10549c:	00800b44 	movi	r2,45
  1054a0:	05adc83a 	sub	r22,zero,r22
  1054a4:	d8802305 	stb	r2,140(sp)
  1054a8:	003f3b06 	br	105198 <__alt_data_end+0xfffc5198>
  1054ac:	0005883a 	mov	r2,zero
  1054b0:	003f4e06 	br	1051ec <__alt_data_end+0xfffc51ec>
  1054b4:	90a4703a 	and	r18,r18,r2
  1054b8:	903f4a26 	beq	r18,zero,1051e4 <__alt_data_end+0xfffc51e4>
  1054bc:	003f4606 	br	1051d8 <__alt_data_end+0xfffc51d8>
  1054c0:	d8c02a17 	ldw	r3,168(sp)
  1054c4:	18c00084 	addi	r3,r3,2
  1054c8:	d8c02b15 	stw	r3,172(sp)
  1054cc:	1805883a 	mov	r2,r3
  1054d0:	183e580e 	bge	r3,zero,104e34 <__alt_data_end+0xfffc4e34>
  1054d4:	003fd006 	br	105418 <__alt_data_end+0xfffc5418>
  1054d8:	00800084 	movi	r2,2
  1054dc:	10c5c83a 	sub	r2,r2,r3
  1054e0:	003f7506 	br	1052b8 <__alt_data_end+0xfffc52b8>
  1054e4:	d9402e17 	ldw	r5,184(sp)
  1054e8:	d9002e17 	ldw	r4,184(sp)
  1054ec:	bc400043 	ldbu	r17,1(r23)
  1054f0:	29400017 	ldw	r5,0(r5)
  1054f4:	20800104 	addi	r2,r4,4
  1054f8:	d8802e15 	stw	r2,184(sp)
  1054fc:	d9402a15 	stw	r5,168(sp)
  105500:	182f883a 	mov	r23,r3
  105504:	283df10e 	bge	r5,zero,104ccc <__alt_data_end+0xfffc4ccc>
  105508:	8c403fcc 	andi	r17,r17,255
  10550c:	017fffc4 	movi	r5,-1
  105510:	8c40201c 	xori	r17,r17,128
  105514:	d9402a15 	stw	r5,168(sp)
  105518:	8c7fe004 	addi	r17,r17,-128
  10551c:	0037d806 	br	103480 <__alt_data_end+0xfffc3480>
  105520:	9080004c 	andi	r2,r18,1
  105524:	0039883a 	mov	fp,zero
  105528:	10000726 	beq	r2,zero,105548 <___svfprintf_internal_r+0x221c>
  10552c:	d8c02817 	ldw	r3,160(sp)
  105530:	dc001dc4 	addi	r16,sp,119
  105534:	00800c04 	movi	r2,48
  105538:	1c07c83a 	sub	r3,r3,r16
  10553c:	d8801dc5 	stb	r2,119(sp)
  105540:	d8c02b15 	stw	r3,172(sp)
  105544:	00393106 	br	103a0c <__alt_data_end+0xfffc3a0c>
  105548:	d8002b15 	stw	zero,172(sp)
  10554c:	dc001e04 	addi	r16,sp,120
  105550:	00392e06 	br	103a0c <__alt_data_end+0xfffc3a0c>
  105554:	0005883a 	mov	r2,zero
  105558:	003e3306 	br	104e28 <__alt_data_end+0xfffc4e28>
  10555c:	dd802617 	ldw	r22,152(sp)
  105560:	003f0706 	br	105180 <__alt_data_end+0xfffc5180>
  105564:	d8c02b03 	ldbu	r3,172(sp)
  105568:	d8c02785 	stb	r3,158(sp)
  10556c:	003a3506 	br	103e44 <__alt_data_end+0xfffc3e44>
  105570:	d8c02b03 	ldbu	r3,172(sp)
  105574:	d8c02785 	stb	r3,158(sp)
  105578:	003a1706 	br	103dd8 <__alt_data_end+0xfffc3dd8>
  10557c:	0005883a 	mov	r2,zero
  105580:	003f5d06 	br	1052f8 <__alt_data_end+0xfffc52f8>
  105584:	d8c02b03 	ldbu	r3,172(sp)
  105588:	d8c02785 	stb	r3,158(sp)
  10558c:	0038f306 	br	10395c <__alt_data_end+0xfffc395c>
  105590:	d8c02b03 	ldbu	r3,172(sp)
  105594:	d8c02785 	stb	r3,158(sp)
  105598:	0038be06 	br	103894 <__alt_data_end+0xfffc3894>
  10559c:	d8802344 	addi	r2,sp,141
  1055a0:	003f0506 	br	1051b8 <__alt_data_end+0xfffc51b8>
  1055a4:	d8c02b03 	ldbu	r3,172(sp)
  1055a8:	d8c02785 	stb	r3,158(sp)
  1055ac:	00388b06 	br	1037dc <__alt_data_end+0xfffc37dc>
  1055b0:	d8c02b03 	ldbu	r3,172(sp)
  1055b4:	d8c02785 	stb	r3,158(sp)
  1055b8:	003ad706 	br	104118 <__alt_data_end+0xfffc4118>
  1055bc:	d9403917 	ldw	r5,228(sp)
  1055c0:	00800304 	movi	r2,12
  1055c4:	28800015 	stw	r2,0(r5)
  1055c8:	00bfffc4 	movi	r2,-1
  1055cc:	00384306 	br	1036dc <__alt_data_end+0xfffc36dc>
  1055d0:	d8c02b03 	ldbu	r3,172(sp)
  1055d4:	d8c02785 	stb	r3,158(sp)
  1055d8:	003ab606 	br	1040b4 <__alt_data_end+0xfffc40b4>
  1055dc:	d8c02b03 	ldbu	r3,172(sp)
  1055e0:	d8c02785 	stb	r3,158(sp)
  1055e4:	003a8906 	br	10400c <__alt_data_end+0xfffc400c>

001055e8 <__ssvfscanf_r>:
  1055e8:	2880030b 	ldhu	r2,12(r5)
  1055ec:	deff4b04 	addi	sp,sp,-724
  1055f0:	df00b315 	stw	fp,716(sp)
  1055f4:	ddc0b215 	stw	r23,712(sp)
  1055f8:	dfc0b415 	stw	ra,720(sp)
  1055fc:	dd80b115 	stw	r22,708(sp)
  105600:	dd40b015 	stw	r21,704(sp)
  105604:	dd00af15 	stw	r20,700(sp)
  105608:	dcc0ae15 	stw	r19,696(sp)
  10560c:	dc80ad15 	stw	r18,692(sp)
  105610:	dc40ac15 	stw	r17,688(sp)
  105614:	dc00ab15 	stw	r16,684(sp)
  105618:	10c8000c 	andi	r3,r2,8192
  10561c:	d9c09c15 	stw	r7,624(sp)
  105620:	2839883a 	mov	fp,r5
  105624:	202f883a 	mov	r23,r4
  105628:	1800061e 	bne	r3,zero,105644 <__ssvfscanf_r+0x5c>
  10562c:	29001917 	ldw	r4,100(r5)
  105630:	00f7ffc4 	movi	r3,-8193
  105634:	10880014 	ori	r2,r2,8192
  105638:	20c6703a 	and	r3,r4,r3
  10563c:	2880030d 	sth	r2,12(r5)
  105640:	28c01915 	stw	r3,100(r5)
  105644:	30800003 	ldbu	r2,0(r6)
  105648:	0021883a 	mov	r16,zero
  10564c:	058004b4 	movhi	r22,18
  105650:	d800a115 	stw	zero,644(sp)
  105654:	d8009e15 	stw	zero,632(sp)
  105658:	d800a015 	stw	zero,640(sp)
  10565c:	d8809b15 	stw	r2,620(sp)
  105660:	b5973004 	addi	r22,r22,23744
  105664:	8025883a 	mov	r18,r16
  105668:	e027883a 	mov	r19,fp
  10566c:	35000044 	addi	r20,r6,1
  105670:	10001e26 	beq	r2,zero,1056ec <__ssvfscanf_r+0x104>
  105674:	b4000017 	ldw	r16,0(r22)
  105678:	8087883a 	add	r3,r16,r2
  10567c:	18c00043 	ldbu	r3,1(r3)
  105680:	18c0020c 	andi	r3,r3,8
  105684:	18001b26 	beq	r3,zero,1056f4 <__ssvfscanf_r+0x10c>
  105688:	98800117 	ldw	r2,4(r19)
  10568c:	00800e0e 	bge	zero,r2,1056c8 <__ssvfscanf_r+0xe0>
  105690:	98c00017 	ldw	r3,0(r19)
  105694:	b1000017 	ldw	r4,0(r22)
  105698:	18800003 	ldbu	r2,0(r3)
  10569c:	2085883a 	add	r2,r4,r2
  1056a0:	10800043 	ldbu	r2,1(r2)
  1056a4:	1080020c 	andi	r2,r2,8
  1056a8:	10000b26 	beq	r2,zero,1056d8 <__ssvfscanf_r+0xf0>
  1056ac:	98800117 	ldw	r2,4(r19)
  1056b0:	18c00044 	addi	r3,r3,1
  1056b4:	98c00015 	stw	r3,0(r19)
  1056b8:	10bfffc4 	addi	r2,r2,-1
  1056bc:	98800115 	stw	r2,4(r19)
  1056c0:	94800044 	addi	r18,r18,1
  1056c4:	00bff216 	blt	zero,r2,105690 <__alt_data_end+0xfffc5690>
  1056c8:	980b883a 	mov	r5,r19
  1056cc:	b809883a 	mov	r4,r23
  1056d0:	01111fc0 	call	1111fc <__ssrefill_r>
  1056d4:	103fee26 	beq	r2,zero,105690 <__alt_data_end+0xfffc5690>
  1056d8:	a00d883a 	mov	r6,r20
  1056dc:	30800003 	ldbu	r2,0(r6)
  1056e0:	35000044 	addi	r20,r6,1
  1056e4:	d8809b15 	stw	r2,620(sp)
  1056e8:	103fe21e 	bne	r2,zero,105674 <__alt_data_end+0xfffc5674>
  1056ec:	d880a017 	ldw	r2,640(sp)
  1056f0:	00009a06 	br	10595c <__ssvfscanf_r+0x374>
  1056f4:	00c00944 	movi	r3,37
  1056f8:	10c0891e 	bne	r2,r3,105920 <__ssvfscanf_r+0x338>
  1056fc:	0039883a 	mov	fp,zero
  105700:	35400043 	ldbu	r21,1(r6)
  105704:	0023883a 	mov	r17,zero
  105708:	01801e04 	movi	r6,120
  10570c:	00c01b04 	movi	r3,108
  105710:	e009883a 	mov	r4,fp
  105714:	a1c00044 	addi	r7,r20,1
  105718:	3540a236 	bltu	r6,r21,1059a4 <__ssvfscanf_r+0x3bc>
  10571c:	a80490ba 	slli	r2,r21,2
  105720:	01400434 	movhi	r5,16
  105724:	2955cd04 	addi	r5,r5,22324
  105728:	1145883a 	add	r2,r2,r5
  10572c:	10800017 	ldw	r2,0(r2)
  105730:	1000683a 	jmp	r2
  105734:	00105958 	cmpnei	zero,zero,16741
  105738:	001059a4 	muli	zero,zero,16742
  10573c:	001059a4 	muli	zero,zero,16742
  105740:	001059a4 	muli	zero,zero,16742
  105744:	001059a4 	muli	zero,zero,16742
  105748:	001059a4 	muli	zero,zero,16742
  10574c:	001059a4 	muli	zero,zero,16742
  105750:	001059a4 	muli	zero,zero,16742
  105754:	001059a4 	muli	zero,zero,16742
  105758:	001059a4 	muli	zero,zero,16742
  10575c:	001059a4 	muli	zero,zero,16742
  105760:	001059a4 	muli	zero,zero,16742
  105764:	001059a4 	muli	zero,zero,16742
  105768:	001059a4 	muli	zero,zero,16742
  10576c:	001059a4 	muli	zero,zero,16742
  105770:	001059a4 	muli	zero,zero,16742
  105774:	001059a4 	muli	zero,zero,16742
  105778:	001059a4 	muli	zero,zero,16742
  10577c:	001059a4 	muli	zero,zero,16742
  105780:	001059a4 	muli	zero,zero,16742
  105784:	001059a4 	muli	zero,zero,16742
  105788:	001059a4 	muli	zero,zero,16742
  10578c:	001059a4 	muli	zero,zero,16742
  105790:	001059a4 	muli	zero,zero,16742
  105794:	001059a4 	muli	zero,zero,16742
  105798:	001059a4 	muli	zero,zero,16742
  10579c:	001059a4 	muli	zero,zero,16742
  1057a0:	001059a4 	muli	zero,zero,16742
  1057a4:	001059a4 	muli	zero,zero,16742
  1057a8:	001059a4 	muli	zero,zero,16742
  1057ac:	001059a4 	muli	zero,zero,16742
  1057b0:	001059a4 	muli	zero,zero,16742
  1057b4:	001059a4 	muli	zero,zero,16742
  1057b8:	001059a4 	muli	zero,zero,16742
  1057bc:	001059a4 	muli	zero,zero,16742
  1057c0:	001059a4 	muli	zero,zero,16742
  1057c4:	001059a4 	muli	zero,zero,16742
  1057c8:	00105918 	cmpnei	zero,zero,16740
  1057cc:	001059a4 	muli	zero,zero,16742
  1057d0:	001059a4 	muli	zero,zero,16742
  1057d4:	001059a4 	muli	zero,zero,16742
  1057d8:	001059a4 	muli	zero,zero,16742
  1057dc:	0010598c 	andi	zero,zero,16742
  1057e0:	001059a4 	muli	zero,zero,16742
  1057e4:	001059a4 	muli	zero,zero,16742
  1057e8:	001059a4 	muli	zero,zero,16742
  1057ec:	001059a4 	muli	zero,zero,16742
  1057f0:	001059a4 	muli	zero,zero,16742
  1057f4:	00105aec 	andhi	zero,zero,16747
  1057f8:	00105aec 	andhi	zero,zero,16747
  1057fc:	00105aec 	andhi	zero,zero,16747
  105800:	00105aec 	andhi	zero,zero,16747
  105804:	00105aec 	andhi	zero,zero,16747
  105808:	00105aec 	andhi	zero,zero,16747
  10580c:	00105aec 	andhi	zero,zero,16747
  105810:	00105aec 	andhi	zero,zero,16747
  105814:	00105aec 	andhi	zero,zero,16747
  105818:	00105aec 	andhi	zero,zero,16747
  10581c:	001059a4 	muli	zero,zero,16742
  105820:	001059a4 	muli	zero,zero,16742
  105824:	001059a4 	muli	zero,zero,16742
  105828:	001059a4 	muli	zero,zero,16742
  10582c:	001059a4 	muli	zero,zero,16742
  105830:	001059a4 	muli	zero,zero,16742
  105834:	001059a4 	muli	zero,zero,16742
  105838:	001059a4 	muli	zero,zero,16742
  10583c:	001059a4 	muli	zero,zero,16742
  105840:	001059a4 	muli	zero,zero,16742
  105844:	00105abc 	xorhi	zero,zero,16746
  105848:	00105b98 	cmpnei	zero,zero,16750
  10584c:	001059a4 	muli	zero,zero,16742
  105850:	00105b98 	cmpnei	zero,zero,16750
  105854:	001059a4 	muli	zero,zero,16742
  105858:	001059a4 	muli	zero,zero,16742
  10585c:	001059a4 	muli	zero,zero,16742
  105860:	001059a4 	muli	zero,zero,16742
  105864:	00105b84 	movi	zero,16750
  105868:	001059a4 	muli	zero,zero,16742
  10586c:	001059a4 	muli	zero,zero,16742
  105870:	00105b54 	movui	zero,16749
  105874:	001059a4 	muli	zero,zero,16742
  105878:	001059a4 	muli	zero,zero,16742
  10587c:	001059a4 	muli	zero,zero,16742
  105880:	001059a4 	muli	zero,zero,16742
  105884:	001059a4 	muli	zero,zero,16742
  105888:	001059a4 	muli	zero,zero,16742
  10588c:	001059a4 	muli	zero,zero,16742
  105890:	001059a4 	muli	zero,zero,16742
  105894:	00105b24 	muli	zero,zero,16748
  105898:	001059a4 	muli	zero,zero,16742
  10589c:	001059a4 	muli	zero,zero,16742
  1058a0:	00105ce0 	cmpeqi	zero,zero,16755
  1058a4:	001059a4 	muli	zero,zero,16742
  1058a8:	001059a4 	muli	zero,zero,16742
  1058ac:	001059a4 	muli	zero,zero,16742
  1058b0:	001059a4 	muli	zero,zero,16742
  1058b4:	001059a4 	muli	zero,zero,16742
  1058b8:	001059a4 	muli	zero,zero,16742
  1058bc:	001059a4 	muli	zero,zero,16742
  1058c0:	00105c60 	cmpeqi	zero,zero,16753
  1058c4:	00105c34 	movhi	zero,16752
  1058c8:	00105b98 	cmpnei	zero,zero,16750
  1058cc:	00105b98 	cmpnei	zero,zero,16750
  1058d0:	00105b98 	cmpnei	zero,zero,16750
  1058d4:	00105c20 	cmpeqi	zero,zero,16752
  1058d8:	00105d70 	cmpltui	zero,zero,16757
  1058dc:	001059a4 	muli	zero,zero,16742
  1058e0:	001059a4 	muli	zero,zero,16742
  1058e4:	00105c0c 	andi	zero,zero,16752
  1058e8:	001059a4 	muli	zero,zero,16742
  1058ec:	00105bdc 	xori	zero,zero,16751
  1058f0:	00105bb0 	cmpltui	zero,zero,16750
  1058f4:	00105a8c 	andi	zero,zero,16746
  1058f8:	001059a4 	muli	zero,zero,16742
  1058fc:	001059a4 	muli	zero,zero,16742
  105900:	00105a74 	movhi	zero,16745
  105904:	001059a4 	muli	zero,zero,16742
  105908:	001059f8 	rdprs	zero,zero,16743
  10590c:	001059a4 	muli	zero,zero,16742
  105910:	001059a4 	muli	zero,zero,16742
  105914:	00105b24 	muli	zero,zero,16748
  105918:	d9c09d15 	stw	r7,628(sp)
  10591c:	3829883a 	mov	r20,r7
  105920:	98800117 	ldw	r2,4(r19)
  105924:	0081c60e 	bge	zero,r2,106040 <__ssvfscanf_r+0xa58>
  105928:	98800017 	ldw	r2,0(r19)
  10592c:	a0ffffc3 	ldbu	r3,-1(r20)
  105930:	11000003 	ldbu	r4,0(r2)
  105934:	20ff6d1e 	bne	r4,r3,1056ec <__alt_data_end+0xfffc56ec>
  105938:	98c00117 	ldw	r3,4(r19)
  10593c:	10800044 	addi	r2,r2,1
  105940:	98800015 	stw	r2,0(r19)
  105944:	18bfffc4 	addi	r2,r3,-1
  105948:	98800115 	stw	r2,4(r19)
  10594c:	94800044 	addi	r18,r18,1
  105950:	a00d883a 	mov	r6,r20
  105954:	003f6106 	br	1056dc <__alt_data_end+0xfffc56dc>
  105958:	00bfffc4 	movi	r2,-1
  10595c:	dfc0b417 	ldw	ra,720(sp)
  105960:	df00b317 	ldw	fp,716(sp)
  105964:	ddc0b217 	ldw	r23,712(sp)
  105968:	dd80b117 	ldw	r22,708(sp)
  10596c:	dd40b017 	ldw	r21,704(sp)
  105970:	dd00af17 	ldw	r20,700(sp)
  105974:	dcc0ae17 	ldw	r19,696(sp)
  105978:	dc80ad17 	ldw	r18,692(sp)
  10597c:	dc40ac17 	ldw	r17,688(sp)
  105980:	dc00ab17 	ldw	r16,684(sp)
  105984:	dec0b504 	addi	sp,sp,724
  105988:	f800283a 	ret
  10598c:	a1400043 	ldbu	r5,1(r20)
  105990:	3829883a 	mov	r20,r7
  105994:	8c400414 	ori	r17,r17,16
  105998:	2d403fcc 	andi	r21,r5,255
  10599c:	a1c00044 	addi	r7,r20,1
  1059a0:	357f5e2e 	bgeu	r6,r21,10571c <__alt_data_end+0xfffc571c>
  1059a4:	856b883a 	add	r21,r16,r21
  1059a8:	a8800043 	ldbu	r2,1(r21)
  1059ac:	d9c09d15 	stw	r7,628(sp)
  1059b0:	00c00044 	movi	r3,1
  1059b4:	108000cc 	andi	r2,r2,3
  1059b8:	2039883a 	mov	fp,r4
  1059bc:	10c1a526 	beq	r2,r3,106054 <__ssvfscanf_r+0xa6c>
  1059c0:	98800117 	ldw	r2,4(r19)
  1059c4:	00804216 	blt	zero,r2,105ad0 <__ssvfscanf_r+0x4e8>
  1059c8:	980b883a 	mov	r5,r19
  1059cc:	b809883a 	mov	r4,r23
  1059d0:	01111fc0 	call	1111fc <__ssrefill_r>
  1059d4:	10015e1e 	bne	r2,zero,105f50 <__ssvfscanf_r+0x968>
  1059d8:	01000474 	movhi	r4,17
  1059dc:	213c1604 	addi	r4,r4,-4008
  1059e0:	01400284 	movi	r5,10
  1059e4:	b4000017 	ldw	r16,0(r22)
  1059e8:	d900a115 	stw	r4,644(sp)
  1059ec:	d9409e15 	stw	r5,632(sp)
  1059f0:	050000c4 	movi	r20,3
  1059f4:	00000a06 	br	105a20 <__ssvfscanf_r+0x438>
  1059f8:	98800117 	ldw	r2,4(r19)
  1059fc:	d9c09d15 	stw	r7,628(sp)
  105a00:	2039883a 	mov	fp,r4
  105a04:	0081e20e 	bge	zero,r2,106190 <__ssvfscanf_r+0xba8>
  105a08:	00c00474 	movhi	r3,17
  105a0c:	18fd7404 	addi	r3,r3,-2608
  105a10:	01000284 	movi	r4,10
  105a14:	d8c0a115 	stw	r3,644(sp)
  105a18:	d9009e15 	stw	r4,632(sp)
  105a1c:	050000c4 	movi	r20,3
  105a20:	98c00017 	ldw	r3,0(r19)
  105a24:	00000206 	br	105a30 <__ssvfscanf_r+0x448>
  105a28:	18c00044 	addi	r3,r3,1
  105a2c:	98c00015 	stw	r3,0(r19)
  105a30:	19000003 	ldbu	r4,0(r3)
  105a34:	20803fcc 	andi	r2,r4,255
  105a38:	8085883a 	add	r2,r16,r2
  105a3c:	10800043 	ldbu	r2,1(r2)
  105a40:	1140020c 	andi	r5,r2,8
  105a44:	28020126 	beq	r5,zero,10624c <__ssvfscanf_r+0xc64>
  105a48:	98800117 	ldw	r2,4(r19)
  105a4c:	94800044 	addi	r18,r18,1
  105a50:	10bfffc4 	addi	r2,r2,-1
  105a54:	98800115 	stw	r2,4(r19)
  105a58:	00bff316 	blt	zero,r2,105a28 <__alt_data_end+0xfffc5a28>
  105a5c:	980b883a 	mov	r5,r19
  105a60:	b809883a 	mov	r4,r23
  105a64:	01111fc0 	call	1111fc <__ssrefill_r>
  105a68:	1001391e 	bne	r2,zero,105f50 <__ssvfscanf_r+0x968>
  105a6c:	b4000017 	ldw	r16,0(r22)
  105a70:	003feb06 	br	105a20 <__alt_data_end+0xfffc5a20>
  105a74:	98800117 	ldw	r2,4(r19)
  105a78:	d9c09d15 	stw	r7,628(sp)
  105a7c:	2039883a 	mov	fp,r4
  105a80:	0081aa0e 	bge	zero,r2,10612c <__ssvfscanf_r+0xb44>
  105a84:	05000084 	movi	r20,2
  105a88:	003fe506 	br	105a20 <__alt_data_end+0xfffc5a20>
  105a8c:	98800117 	ldw	r2,4(r19)
  105a90:	d9c09d15 	stw	r7,628(sp)
  105a94:	2039883a 	mov	fp,r4
  105a98:	8c408814 	ori	r17,r17,544
  105a9c:	0081df0e 	bge	zero,r2,10621c <__ssvfscanf_r+0xc34>
  105aa0:	00c00474 	movhi	r3,17
  105aa4:	18fd7404 	addi	r3,r3,-2608
  105aa8:	01000404 	movi	r4,16
  105aac:	d8c0a115 	stw	r3,644(sp)
  105ab0:	d9009e15 	stw	r4,632(sp)
  105ab4:	050000c4 	movi	r20,3
  105ab8:	003fd906 	br	105a20 <__alt_data_end+0xfffc5a20>
  105abc:	98800117 	ldw	r2,4(r19)
  105ac0:	d9c09d15 	stw	r7,628(sp)
  105ac4:	2039883a 	mov	fp,r4
  105ac8:	8c400054 	ori	r17,r17,1
  105acc:	0081850e 	bge	zero,r2,1060e4 <__ssvfscanf_r+0xafc>
  105ad0:	00c00474 	movhi	r3,17
  105ad4:	18fc1604 	addi	r3,r3,-4008
  105ad8:	01000284 	movi	r4,10
  105adc:	d8c0a115 	stw	r3,644(sp)
  105ae0:	d9009e15 	stw	r4,632(sp)
  105ae4:	050000c4 	movi	r20,3
  105ae8:	003fcd06 	br	105a20 <__alt_data_end+0xfffc5a20>
  105aec:	01400284 	movi	r5,10
  105af0:	d8c0a615 	stw	r3,664(sp)
  105af4:	d980a915 	stw	r6,676(sp)
  105af8:	d9c0aa15 	stw	r7,680(sp)
  105afc:	01160740 	call	116074 <__mulsi3>
  105b00:	a1400043 	ldbu	r5,1(r20)
  105b04:	d9c0aa17 	ldw	r7,680(sp)
  105b08:	1545883a 	add	r2,r2,r21
  105b0c:	113ff404 	addi	r4,r2,-48
  105b10:	3829883a 	mov	r20,r7
  105b14:	2d403fcc 	andi	r21,r5,255
  105b18:	d8c0a617 	ldw	r3,664(sp)
  105b1c:	d980a917 	ldw	r6,676(sp)
  105b20:	003efc06 	br	105714 <__alt_data_end+0xfffc5714>
  105b24:	98800117 	ldw	r2,4(r19)
  105b28:	d9c09d15 	stw	r7,628(sp)
  105b2c:	2039883a 	mov	fp,r4
  105b30:	8c408014 	ori	r17,r17,512
  105b34:	0081710e 	bge	zero,r2,1060fc <__ssvfscanf_r+0xb14>
  105b38:	01400474 	movhi	r5,17
  105b3c:	297d7404 	addi	r5,r5,-2608
  105b40:	00800404 	movi	r2,16
  105b44:	d940a115 	stw	r5,644(sp)
  105b48:	d8809e15 	stw	r2,632(sp)
  105b4c:	050000c4 	movi	r20,3
  105b50:	003fb306 	br	105a20 <__alt_data_end+0xfffc5a20>
  105b54:	98800117 	ldw	r2,4(r19)
  105b58:	d9c09d15 	stw	r7,628(sp)
  105b5c:	2039883a 	mov	fp,r4
  105b60:	8c400054 	ori	r17,r17,1
  105b64:	0081840e 	bge	zero,r2,106178 <__ssvfscanf_r+0xb90>
  105b68:	01400474 	movhi	r5,17
  105b6c:	297d7404 	addi	r5,r5,-2608
  105b70:	00800204 	movi	r2,8
  105b74:	d940a115 	stw	r5,644(sp)
  105b78:	d8809e15 	stw	r2,632(sp)
  105b7c:	050000c4 	movi	r20,3
  105b80:	003fa706 	br	105a20 <__alt_data_end+0xfffc5a20>
  105b84:	a1400043 	ldbu	r5,1(r20)
  105b88:	8c400094 	ori	r17,r17,2
  105b8c:	3829883a 	mov	r20,r7
  105b90:	2d403fcc 	andi	r21,r5,255
  105b94:	003edf06 	br	105714 <__alt_data_end+0xfffc5714>
  105b98:	98800117 	ldw	r2,4(r19)
  105b9c:	d9c09d15 	stw	r7,628(sp)
  105ba0:	2039883a 	mov	fp,r4
  105ba4:	00816d0e 	bge	zero,r2,10615c <__ssvfscanf_r+0xb74>
  105ba8:	05000104 	movi	r20,4
  105bac:	003f9c06 	br	105a20 <__alt_data_end+0xfffc5a20>
  105bb0:	98800117 	ldw	r2,4(r19)
  105bb4:	d9c09d15 	stw	r7,628(sp)
  105bb8:	2039883a 	mov	fp,r4
  105bbc:	0081800e 	bge	zero,r2,1061c0 <__ssvfscanf_r+0xbd8>
  105bc0:	01000474 	movhi	r4,17
  105bc4:	213d7404 	addi	r4,r4,-2608
  105bc8:	01400204 	movi	r5,8
  105bcc:	d900a115 	stw	r4,644(sp)
  105bd0:	d9409e15 	stw	r5,632(sp)
  105bd4:	050000c4 	movi	r20,3
  105bd8:	003f9106 	br	105a20 <__alt_data_end+0xfffc5a20>
  105bdc:	d9c09d15 	stw	r7,628(sp)
  105be0:	8880040c 	andi	r2,r17,16
  105be4:	1000a01e 	bne	r2,zero,105e68 <__ssvfscanf_r+0x880>
  105be8:	8880010c 	andi	r2,r17,4
  105bec:	10012826 	beq	r2,zero,106090 <__ssvfscanf_r+0xaa8>
  105bf0:	d9009c17 	ldw	r4,624(sp)
  105bf4:	3829883a 	mov	r20,r7
  105bf8:	20800017 	ldw	r2,0(r4)
  105bfc:	21000104 	addi	r4,r4,4
  105c00:	d9009c15 	stw	r4,624(sp)
  105c04:	1480000d 	sth	r18,0(r2)
  105c08:	003eb306 	br	1056d8 <__alt_data_end+0xfffc56d8>
  105c0c:	a5400043 	ldbu	r21,1(r20)
  105c10:	a8c11a26 	beq	r21,r3,10607c <__ssvfscanf_r+0xa94>
  105c14:	8c400054 	ori	r17,r17,1
  105c18:	3829883a 	mov	r20,r7
  105c1c:	003ebd06 	br	105714 <__alt_data_end+0xfffc5714>
  105c20:	a1400043 	ldbu	r5,1(r20)
  105c24:	8c400114 	ori	r17,r17,4
  105c28:	3829883a 	mov	r20,r7
  105c2c:	2d403fcc 	andi	r21,r5,255
  105c30:	003eb806 	br	105714 <__alt_data_end+0xfffc5714>
  105c34:	98800117 	ldw	r2,4(r19)
  105c38:	d9c09d15 	stw	r7,628(sp)
  105c3c:	2039883a 	mov	fp,r4
  105c40:	00bf610e 	bge	zero,r2,1059c8 <__alt_data_end+0xfffc59c8>
  105c44:	00800474 	movhi	r2,17
  105c48:	10bc1604 	addi	r2,r2,-4008
  105c4c:	00c00284 	movi	r3,10
  105c50:	d880a115 	stw	r2,644(sp)
  105c54:	d8c09e15 	stw	r3,632(sp)
  105c58:	050000c4 	movi	r20,3
  105c5c:	003f7006 	br	105a20 <__alt_data_end+0xfffc5a20>
  105c60:	98800117 	ldw	r2,4(r19)
  105c64:	d9c09d15 	stw	r7,628(sp)
  105c68:	2039883a 	mov	fp,r4
  105c6c:	0080c60e 	bge	zero,r2,105f88 <__ssvfscanf_r+0x9a0>
  105c70:	e000011e 	bne	fp,zero,105c78 <__ssvfscanf_r+0x690>
  105c74:	07000044 	movi	fp,1
  105c78:	8880004c 	andi	r2,r17,1
  105c7c:	1000461e 	bne	r2,zero,105d98 <__ssvfscanf_r+0x7b0>
  105c80:	8c40040c 	andi	r17,r17,16
  105c84:	8800dc26 	beq	r17,zero,105ff8 <__ssvfscanf_r+0xa10>
  105c88:	0021883a 	mov	r16,zero
  105c8c:	00000806 	br	105cb0 <__ssvfscanf_r+0x6c8>
  105c90:	1887883a 	add	r3,r3,r2
  105c94:	980b883a 	mov	r5,r19
  105c98:	b809883a 	mov	r4,r23
  105c9c:	98c00015 	stw	r3,0(r19)
  105ca0:	80a1883a 	add	r16,r16,r2
  105ca4:	e0b9c83a 	sub	fp,fp,r2
  105ca8:	01111fc0 	call	1111fc <__ssrefill_r>
  105cac:	1000cc1e 	bne	r2,zero,105fe0 <__ssvfscanf_r+0x9f8>
  105cb0:	98800117 	ldw	r2,4(r19)
  105cb4:	98c00017 	ldw	r3,0(r19)
  105cb8:	173ff516 	blt	r2,fp,105c90 <__alt_data_end+0xfffc5c90>
  105cbc:	1705c83a 	sub	r2,r2,fp
  105cc0:	1f15883a 	add	r10,r3,fp
  105cc4:	8721883a 	add	r16,r16,fp
  105cc8:	98800115 	stw	r2,4(r19)
  105ccc:	9a800015 	stw	r10,0(r19)
  105cd0:	dd009d17 	ldw	r20,628(sp)
  105cd4:	9425883a 	add	r18,r18,r16
  105cd8:	a00d883a 	mov	r6,r20
  105cdc:	003e7f06 	br	1056dc <__alt_data_end+0xfffc56dc>
  105ce0:	2039883a 	mov	fp,r4
  105ce4:	380b883a 	mov	r5,r7
  105ce8:	d9005884 	addi	r4,sp,354
  105cec:	d9c09d15 	stw	r7,628(sp)
  105cf0:	010d8200 	call	10d820 <__sccl>
  105cf4:	1029883a 	mov	r20,r2
  105cf8:	98800117 	ldw	r2,4(r19)
  105cfc:	0081120e 	bge	zero,r2,106148 <__ssvfscanf_r+0xb60>
  105d00:	99000017 	ldw	r4,0(r19)
  105d04:	20800003 	ldbu	r2,0(r4)
  105d08:	e0005a26 	beq	fp,zero,105e74 <__ssvfscanf_r+0x88c>
  105d0c:	8c40040c 	andi	r17,r17,16
  105d10:	88005b26 	beq	r17,zero,105e80 <__ssvfscanf_r+0x898>
  105d14:	e023883a 	mov	r17,fp
  105d18:	0021883a 	mov	r16,zero
  105d1c:	00000106 	br	105d24 <__ssvfscanf_r+0x73c>
  105d20:	20800003 	ldbu	r2,0(r4)
  105d24:	10803fcc 	andi	r2,r2,255
  105d28:	d8c05884 	addi	r3,sp,354
  105d2c:	1885883a 	add	r2,r3,r2
  105d30:	10800007 	ldb	r2,0(r2)
  105d34:	1000ae26 	beq	r2,zero,105ff0 <__ssvfscanf_r+0xa08>
  105d38:	98800117 	ldw	r2,4(r19)
  105d3c:	21000044 	addi	r4,r4,1
  105d40:	84000044 	addi	r16,r16,1
  105d44:	10bfffc4 	addi	r2,r2,-1
  105d48:	98800115 	stw	r2,4(r19)
  105d4c:	99000015 	stw	r4,0(r19)
  105d50:	8700a126 	beq	r16,fp,105fd8 <__ssvfscanf_r+0x9f0>
  105d54:	00bff216 	blt	zero,r2,105d20 <__alt_data_end+0xfffc5d20>
  105d58:	980b883a 	mov	r5,r19
  105d5c:	b809883a 	mov	r4,r23
  105d60:	01111fc0 	call	1111fc <__ssrefill_r>
  105d64:	10009b1e 	bne	r2,zero,105fd4 <__ssvfscanf_r+0x9ec>
  105d68:	99000017 	ldw	r4,0(r19)
  105d6c:	003fec06 	br	105d20 <__alt_data_end+0xfffc5d20>
  105d70:	98800117 	ldw	r2,4(r19)
  105d74:	d9c09d15 	stw	r7,628(sp)
  105d78:	2039883a 	mov	fp,r4
  105d7c:	00811c0e 	bge	zero,r2,1061f0 <__ssvfscanf_r+0xc08>
  105d80:	01400474 	movhi	r5,17
  105d84:	297c1604 	addi	r5,r5,-4008
  105d88:	d940a115 	stw	r5,644(sp)
  105d8c:	d8009e15 	stw	zero,632(sp)
  105d90:	050000c4 	movi	r20,3
  105d94:	003f2206 	br	105a20 <__alt_data_end+0xfffc5a20>
  105d98:	dd409904 	addi	r21,sp,612
  105d9c:	8c40040c 	andi	r17,r17,16
  105da0:	01800204 	movi	r6,8
  105da4:	000b883a 	mov	r5,zero
  105da8:	a809883a 	mov	r4,r21
  105dac:	dc409f15 	stw	r17,636(sp)
  105db0:	01028600 	call	102860 <memset>
  105db4:	dc409f17 	ldw	r17,636(sp)
  105db8:	88006e26 	beq	r17,zero,105f74 <__ssvfscanf_r+0x98c>
  105dbc:	0029883a 	mov	r20,zero
  105dc0:	0023883a 	mov	r17,zero
  105dc4:	010bb400 	call	10bb40 <__locale_mb_cur_max>
  105dc8:	14406126 	beq	r2,r17,105f50 <__ssvfscanf_r+0x968>
  105dcc:	98800017 	ldw	r2,0(r19)
  105dd0:	98c00117 	ldw	r3,4(r19)
  105dd4:	d9000104 	addi	r4,sp,4
  105dd8:	12000003 	ldbu	r8,0(r2)
  105ddc:	18ffffc4 	addi	r3,r3,-1
  105de0:	10800044 	addi	r2,r2,1
  105de4:	98c00115 	stw	r3,4(r19)
  105de8:	98800015 	stw	r2,0(r19)
  105dec:	8c000044 	addi	r16,r17,1
  105df0:	dd400015 	stw	r21,0(sp)
  105df4:	2463883a 	add	r17,r4,r17
  105df8:	200d883a 	mov	r6,r4
  105dfc:	a00b883a 	mov	r5,r20
  105e00:	800f883a 	mov	r7,r16
  105e04:	b809883a 	mov	r4,r23
  105e08:	8a000005 	stb	r8,0(r17)
  105e0c:	010bdb00 	call	10bdb0 <_mbrtowc_r>
  105e10:	017fffc4 	movi	r5,-1
  105e14:	11404e26 	beq	r2,r5,105f50 <__ssvfscanf_r+0x968>
  105e18:	1000601e 	bne	r2,zero,105f9c <__ssvfscanf_r+0x9b4>
  105e1c:	d8c09f17 	ldw	r3,636(sp)
  105e20:	1800641e 	bne	r3,zero,105fb4 <__ssvfscanf_r+0x9cc>
  105e24:	a0000015 	stw	zero,0(r20)
  105e28:	9425883a 	add	r18,r18,r16
  105e2c:	e179883a 	add	fp,fp,r5
  105e30:	a5000104 	addi	r20,r20,4
  105e34:	98800117 	ldw	r2,4(r19)
  105e38:	0023883a 	mov	r17,zero
  105e3c:	00804b16 	blt	zero,r2,105f6c <__ssvfscanf_r+0x984>
  105e40:	980b883a 	mov	r5,r19
  105e44:	b809883a 	mov	r4,r23
  105e48:	01111fc0 	call	1111fc <__ssrefill_r>
  105e4c:	10004726 	beq	r2,zero,105f6c <__ssvfscanf_r+0x984>
  105e50:	88003f1e 	bne	r17,zero,105f50 <__ssvfscanf_r+0x968>
  105e54:	d8c09f17 	ldw	r3,636(sp)
  105e58:	1800031e 	bne	r3,zero,105e68 <__ssvfscanf_r+0x880>
  105e5c:	d900a017 	ldw	r4,640(sp)
  105e60:	21000044 	addi	r4,r4,1
  105e64:	d900a015 	stw	r4,640(sp)
  105e68:	dd009d17 	ldw	r20,628(sp)
  105e6c:	a00d883a 	mov	r6,r20
  105e70:	003e1a06 	br	1056dc <__alt_data_end+0xfffc56dc>
  105e74:	8c40040c 	andi	r17,r17,16
  105e78:	073fffc4 	movi	fp,-1
  105e7c:	883fa51e 	bne	r17,zero,105d14 <__alt_data_end+0xfffc5d14>
  105e80:	d9409c17 	ldw	r5,624(sp)
  105e84:	e2bfffc4 	addi	r10,fp,-1
  105e88:	2c000017 	ldw	r16,0(r5)
  105e8c:	2c400104 	addi	r17,r5,4
  105e90:	8007883a 	mov	r3,r16
  105e94:	82ab883a 	add	r21,r16,r10
  105e98:	00000306 	br	105ea8 <__ssvfscanf_r+0x8c0>
  105e9c:	99000017 	ldw	r4,0(r19)
  105ea0:	e007883a 	mov	r3,fp
  105ea4:	20800003 	ldbu	r2,0(r4)
  105ea8:	10803fcc 	andi	r2,r2,255
  105eac:	d9405884 	addi	r5,sp,354
  105eb0:	2885883a 	add	r2,r5,r2
  105eb4:	10800007 	ldb	r2,0(r2)
  105eb8:	10004b26 	beq	r2,zero,105fe8 <__ssvfscanf_r+0xa00>
  105ebc:	98800117 	ldw	r2,4(r19)
  105ec0:	21400044 	addi	r5,r4,1
  105ec4:	99400015 	stw	r5,0(r19)
  105ec8:	10bfffc4 	addi	r2,r2,-1
  105ecc:	98800115 	stw	r2,4(r19)
  105ed0:	20800003 	ldbu	r2,0(r4)
  105ed4:	1f000044 	addi	fp,r3,1
  105ed8:	18800005 	stb	r2,0(r3)
  105edc:	1d400726 	beq	r3,r21,105efc <__ssvfscanf_r+0x914>
  105ee0:	98800117 	ldw	r2,4(r19)
  105ee4:	00bfed16 	blt	zero,r2,105e9c <__alt_data_end+0xfffc5e9c>
  105ee8:	980b883a 	mov	r5,r19
  105eec:	b809883a 	mov	r4,r23
  105ef0:	01111fc0 	call	1111fc <__ssrefill_r>
  105ef4:	103fe926 	beq	r2,zero,105e9c <__alt_data_end+0xfffc5e9c>
  105ef8:	87001526 	beq	r16,fp,105f50 <__ssvfscanf_r+0x968>
  105efc:	e421c83a 	sub	r16,fp,r16
  105f00:	803dfa26 	beq	r16,zero,1056ec <__alt_data_end+0xfffc56ec>
  105f04:	d880a017 	ldw	r2,640(sp)
  105f08:	e0000005 	stb	zero,0(fp)
  105f0c:	dc409c15 	stw	r17,624(sp)
  105f10:	10800044 	addi	r2,r2,1
  105f14:	d880a015 	stw	r2,640(sp)
  105f18:	9425883a 	add	r18,r18,r16
  105f1c:	a00d883a 	mov	r6,r20
  105f20:	003dee06 	br	1056dc <__alt_data_end+0xfffc56dc>
  105f24:	013fff84 	movi	r4,-2
  105f28:	1103ed1e 	bne	r2,r4,106ee0 <__ssvfscanf_r+0x18f8>
  105f2c:	8821883a 	mov	r16,r17
  105f30:	98800117 	ldw	r2,4(r19)
  105f34:	00834116 	blt	zero,r2,106c3c <__ssvfscanf_r+0x1654>
  105f38:	980b883a 	mov	r5,r19
  105f3c:	b809883a 	mov	r4,r23
  105f40:	01111fc0 	call	1111fc <__ssrefill_r>
  105f44:	10033d26 	beq	r2,zero,106c3c <__ssvfscanf_r+0x1654>
  105f48:	dc409f17 	ldw	r17,636(sp)
  105f4c:	80034426 	beq	r16,zero,106c60 <__ssvfscanf_r+0x1678>
  105f50:	d900a017 	ldw	r4,640(sp)
  105f54:	203e8026 	beq	r4,zero,105958 <__alt_data_end+0xfffc5958>
  105f58:	9880030b 	ldhu	r2,12(r19)
  105f5c:	1080100c 	andi	r2,r2,64
  105f60:	103e7d1e 	bne	r2,zero,105958 <__alt_data_end+0xfffc5958>
  105f64:	2005883a 	mov	r2,r4
  105f68:	003e7c06 	br	10595c <__alt_data_end+0xfffc595c>
  105f6c:	e03f951e 	bne	fp,zero,105dc4 <__alt_data_end+0xfffc5dc4>
  105f70:	003fb806 	br	105e54 <__alt_data_end+0xfffc5e54>
  105f74:	d8809c17 	ldw	r2,624(sp)
  105f78:	15000017 	ldw	r20,0(r2)
  105f7c:	10800104 	addi	r2,r2,4
  105f80:	d8809c15 	stw	r2,624(sp)
  105f84:	003f8e06 	br	105dc0 <__alt_data_end+0xfffc5dc0>
  105f88:	980b883a 	mov	r5,r19
  105f8c:	b809883a 	mov	r4,r23
  105f90:	01111fc0 	call	1111fc <__ssrefill_r>
  105f94:	103f3626 	beq	r2,zero,105c70 <__alt_data_end+0xfffc5c70>
  105f98:	003fed06 	br	105f50 <__alt_data_end+0xfffc5f50>
  105f9c:	013fff84 	movi	r4,-2
  105fa0:	1100071e 	bne	r2,r4,105fc0 <__ssvfscanf_r+0x9d8>
  105fa4:	98800117 	ldw	r2,4(r19)
  105fa8:	8023883a 	mov	r17,r16
  105fac:	00bf8516 	blt	zero,r2,105dc4 <__alt_data_end+0xfffc5dc4>
  105fb0:	003fa306 	br	105e40 <__alt_data_end+0xfffc5e40>
  105fb4:	9425883a 	add	r18,r18,r16
  105fb8:	e73fffc4 	addi	fp,fp,-1
  105fbc:	003f9d06 	br	105e34 <__alt_data_end+0xfffc5e34>
  105fc0:	d8c09f17 	ldw	r3,636(sp)
  105fc4:	9425883a 	add	r18,r18,r16
  105fc8:	e73fffc4 	addi	fp,fp,-1
  105fcc:	183f9826 	beq	r3,zero,105e30 <__alt_data_end+0xfffc5e30>
  105fd0:	003f9806 	br	105e34 <__alt_data_end+0xfffc5e34>
  105fd4:	8023883a 	mov	r17,r16
  105fd8:	8821883a 	mov	r16,r17
  105fdc:	003fce06 	br	105f18 <__alt_data_end+0xfffc5f18>
  105fe0:	803f3b1e 	bne	r16,zero,105cd0 <__alt_data_end+0xfffc5cd0>
  105fe4:	003fda06 	br	105f50 <__alt_data_end+0xfffc5f50>
  105fe8:	1839883a 	mov	fp,r3
  105fec:	003fc306 	br	105efc <__alt_data_end+0xfffc5efc>
  105ff0:	803fc91e 	bne	r16,zero,105f18 <__alt_data_end+0xfffc5f18>
  105ff4:	003dbd06 	br	1056ec <__alt_data_end+0xfffc56ec>
  105ff8:	d8809c17 	ldw	r2,624(sp)
  105ffc:	dcc00015 	stw	r19,0(sp)
  106000:	b809883a 	mov	r4,r23
  106004:	11400017 	ldw	r5,0(r2)
  106008:	e00f883a 	mov	r7,fp
  10600c:	01800044 	movi	r6,1
  106010:	011126c0 	call	11126c <_sfread_r>
  106014:	d9009c17 	ldw	r4,624(sp)
  106018:	20c00104 	addi	r3,r4,4
  10601c:	103fcc26 	beq	r2,zero,105f50 <__alt_data_end+0xfffc5f50>
  106020:	d940a017 	ldw	r5,640(sp)
  106024:	dd009d17 	ldw	r20,628(sp)
  106028:	90a5883a 	add	r18,r18,r2
  10602c:	29400044 	addi	r5,r5,1
  106030:	d940a015 	stw	r5,640(sp)
  106034:	d8c09c15 	stw	r3,624(sp)
  106038:	a00d883a 	mov	r6,r20
  10603c:	003da706 	br	1056dc <__alt_data_end+0xfffc56dc>
  106040:	980b883a 	mov	r5,r19
  106044:	b809883a 	mov	r4,r23
  106048:	01111fc0 	call	1111fc <__ssrefill_r>
  10604c:	103e3626 	beq	r2,zero,105928 <__alt_data_end+0xfffc5928>
  106050:	003fbf06 	br	105f50 <__alt_data_end+0xfffc5f50>
  106054:	98800117 	ldw	r2,4(r19)
  106058:	88e2b03a 	or	r17,r17,r3
  10605c:	0080210e 	bge	zero,r2,1060e4 <__ssvfscanf_r+0xafc>
  106060:	01400474 	movhi	r5,17
  106064:	297c1604 	addi	r5,r5,-4008
  106068:	00800284 	movi	r2,10
  10606c:	d940a115 	stw	r5,644(sp)
  106070:	d8809e15 	stw	r2,632(sp)
  106074:	050000c4 	movi	r20,3
  106078:	003e6906 	br	105a20 <__alt_data_end+0xfffc5a20>
  10607c:	a1400083 	ldbu	r5,2(r20)
  106080:	8c400094 	ori	r17,r17,2
  106084:	a5000084 	addi	r20,r20,2
  106088:	2d403fcc 	andi	r21,r5,255
  10608c:	003da106 	br	105714 <__alt_data_end+0xfffc5714>
  106090:	8880004c 	andi	r2,r17,1
  106094:	10000c1e 	bne	r2,zero,1060c8 <__ssvfscanf_r+0xae0>
  106098:	8c40008c 	andi	r17,r17,2
  10609c:	88000a26 	beq	r17,zero,1060c8 <__ssvfscanf_r+0xae0>
  1060a0:	d8c09c17 	ldw	r3,624(sp)
  1060a4:	d9009c17 	ldw	r4,624(sp)
  1060a8:	dd009d17 	ldw	r20,628(sp)
  1060ac:	18800017 	ldw	r2,0(r3)
  1060b0:	9007d7fa 	srai	r3,r18,31
  1060b4:	21000104 	addi	r4,r4,4
  1060b8:	14800015 	stw	r18,0(r2)
  1060bc:	10c00115 	stw	r3,4(r2)
  1060c0:	d9009c15 	stw	r4,624(sp)
  1060c4:	003d8406 	br	1056d8 <__alt_data_end+0xfffc56d8>
  1060c8:	d9409c17 	ldw	r5,624(sp)
  1060cc:	dd009d17 	ldw	r20,628(sp)
  1060d0:	28800017 	ldw	r2,0(r5)
  1060d4:	29400104 	addi	r5,r5,4
  1060d8:	d9409c15 	stw	r5,624(sp)
  1060dc:	14800015 	stw	r18,0(r2)
  1060e0:	003d7d06 	br	1056d8 <__alt_data_end+0xfffc56d8>
  1060e4:	980b883a 	mov	r5,r19
  1060e8:	b809883a 	mov	r4,r23
  1060ec:	01111fc0 	call	1111fc <__ssrefill_r>
  1060f0:	103f971e 	bne	r2,zero,105f50 <__alt_data_end+0xfffc5f50>
  1060f4:	b4000017 	ldw	r16,0(r22)
  1060f8:	003ed206 	br	105c44 <__alt_data_end+0xfffc5c44>
  1060fc:	980b883a 	mov	r5,r19
  106100:	b809883a 	mov	r4,r23
  106104:	01111fc0 	call	1111fc <__ssrefill_r>
  106108:	103f911e 	bne	r2,zero,105f50 <__alt_data_end+0xfffc5f50>
  10610c:	01000474 	movhi	r4,17
  106110:	213d7404 	addi	r4,r4,-2608
  106114:	01400404 	movi	r5,16
  106118:	b4000017 	ldw	r16,0(r22)
  10611c:	d900a115 	stw	r4,644(sp)
  106120:	d9409e15 	stw	r5,632(sp)
  106124:	050000c4 	movi	r20,3
  106128:	003e3d06 	br	105a20 <__alt_data_end+0xfffc5a20>
  10612c:	980b883a 	mov	r5,r19
  106130:	b809883a 	mov	r4,r23
  106134:	01111fc0 	call	1111fc <__ssrefill_r>
  106138:	103f851e 	bne	r2,zero,105f50 <__alt_data_end+0xfffc5f50>
  10613c:	b4000017 	ldw	r16,0(r22)
  106140:	05000084 	movi	r20,2
  106144:	003e3606 	br	105a20 <__alt_data_end+0xfffc5a20>
  106148:	980b883a 	mov	r5,r19
  10614c:	b809883a 	mov	r4,r23
  106150:	01111fc0 	call	1111fc <__ssrefill_r>
  106154:	103eea26 	beq	r2,zero,105d00 <__alt_data_end+0xfffc5d00>
  106158:	003f7d06 	br	105f50 <__alt_data_end+0xfffc5f50>
  10615c:	980b883a 	mov	r5,r19
  106160:	b809883a 	mov	r4,r23
  106164:	01111fc0 	call	1111fc <__ssrefill_r>
  106168:	103f791e 	bne	r2,zero,105f50 <__alt_data_end+0xfffc5f50>
  10616c:	b4000017 	ldw	r16,0(r22)
  106170:	05000104 	movi	r20,4
  106174:	003e2a06 	br	105a20 <__alt_data_end+0xfffc5a20>
  106178:	980b883a 	mov	r5,r19
  10617c:	b809883a 	mov	r4,r23
  106180:	01111fc0 	call	1111fc <__ssrefill_r>
  106184:	103f721e 	bne	r2,zero,105f50 <__alt_data_end+0xfffc5f50>
  106188:	b4000017 	ldw	r16,0(r22)
  10618c:	003e8c06 	br	105bc0 <__alt_data_end+0xfffc5bc0>
  106190:	980b883a 	mov	r5,r19
  106194:	b809883a 	mov	r4,r23
  106198:	01111fc0 	call	1111fc <__ssrefill_r>
  10619c:	103f6c1e 	bne	r2,zero,105f50 <__alt_data_end+0xfffc5f50>
  1061a0:	00800474 	movhi	r2,17
  1061a4:	10bd7404 	addi	r2,r2,-2608
  1061a8:	00c00284 	movi	r3,10
  1061ac:	b4000017 	ldw	r16,0(r22)
  1061b0:	d880a115 	stw	r2,644(sp)
  1061b4:	d8c09e15 	stw	r3,632(sp)
  1061b8:	050000c4 	movi	r20,3
  1061bc:	003e1806 	br	105a20 <__alt_data_end+0xfffc5a20>
  1061c0:	980b883a 	mov	r5,r19
  1061c4:	b809883a 	mov	r4,r23
  1061c8:	01111fc0 	call	1111fc <__ssrefill_r>
  1061cc:	103f601e 	bne	r2,zero,105f50 <__alt_data_end+0xfffc5f50>
  1061d0:	00800474 	movhi	r2,17
  1061d4:	10bd7404 	addi	r2,r2,-2608
  1061d8:	00c00204 	movi	r3,8
  1061dc:	b4000017 	ldw	r16,0(r22)
  1061e0:	d880a115 	stw	r2,644(sp)
  1061e4:	d8c09e15 	stw	r3,632(sp)
  1061e8:	050000c4 	movi	r20,3
  1061ec:	003e0c06 	br	105a20 <__alt_data_end+0xfffc5a20>
  1061f0:	980b883a 	mov	r5,r19
  1061f4:	b809883a 	mov	r4,r23
  1061f8:	01111fc0 	call	1111fc <__ssrefill_r>
  1061fc:	103f541e 	bne	r2,zero,105f50 <__alt_data_end+0xfffc5f50>
  106200:	00800474 	movhi	r2,17
  106204:	10bc1604 	addi	r2,r2,-4008
  106208:	b4000017 	ldw	r16,0(r22)
  10620c:	d880a115 	stw	r2,644(sp)
  106210:	d8009e15 	stw	zero,632(sp)
  106214:	050000c4 	movi	r20,3
  106218:	003e0106 	br	105a20 <__alt_data_end+0xfffc5a20>
  10621c:	980b883a 	mov	r5,r19
  106220:	b809883a 	mov	r4,r23
  106224:	01111fc0 	call	1111fc <__ssrefill_r>
  106228:	103f491e 	bne	r2,zero,105f50 <__alt_data_end+0xfffc5f50>
  10622c:	00800474 	movhi	r2,17
  106230:	10bd7404 	addi	r2,r2,-2608
  106234:	00c00404 	movi	r3,16
  106238:	b4000017 	ldw	r16,0(r22)
  10623c:	d880a115 	stw	r2,644(sp)
  106240:	d8c09e15 	stw	r3,632(sp)
  106244:	050000c4 	movi	r20,3
  106248:	003df506 	br	105a20 <__alt_data_end+0xfffc5a20>
  10624c:	014000c4 	movi	r5,3
  106250:	a1416726 	beq	r20,r5,1067f0 <__ssvfscanf_r+0x1208>
  106254:	01000104 	movi	r4,4
  106258:	a101491e 	bne	r20,r4,106780 <__ssvfscanf_r+0x1198>
  10625c:	b809883a 	mov	r4,r23
  106260:	010bb640 	call	10bb64 <_localeconv_r>
  106264:	10800017 	ldw	r2,0(r2)
  106268:	e0ffffc4 	addi	r3,fp,-1
  10626c:	d880a315 	stw	r2,652(sp)
  106270:	00805704 	movi	r2,348
  106274:	10c21e2e 	bgeu	r2,r3,106af0 <__ssvfscanf_r+0x1508>
  106278:	e73fa8c4 	addi	fp,fp,-349
  10627c:	df00a215 	stw	fp,648(sp)
  106280:	07005744 	movi	fp,349
  106284:	8d01e014 	ori	r20,r17,1920
  106288:	0023883a 	mov	r17,zero
  10628c:	dc000104 	addi	r16,sp,4
  106290:	002b883a 	mov	r21,zero
  106294:	8805883a 	mov	r2,r17
  106298:	0007883a 	mov	r3,zero
  10629c:	8023883a 	mov	r17,r16
  1062a0:	b80d883a 	mov	r6,r23
  1062a4:	e021883a 	mov	r16,fp
  1062a8:	a82f883a 	mov	r23,r21
  1062ac:	d800a515 	stw	zero,660(sp)
  1062b0:	d800a415 	stw	zero,656(sp)
  1062b4:	d8009f15 	stw	zero,636(sp)
  1062b8:	01c01384 	movi	r7,78
  1062bc:	182b883a 	mov	r21,r3
  1062c0:	1039883a 	mov	fp,r2
  1062c4:	99000017 	ldw	r4,0(r19)
  1062c8:	21400003 	ldbu	r5,0(r4)
  1062cc:	28bff544 	addi	r2,r5,-43
  1062d0:	10803fcc 	andi	r2,r2,255
  1062d4:	38810e36 	bltu	r7,r2,106710 <__ssvfscanf_r+0x1128>
  1062d8:	100490ba 	slli	r2,r2,2
  1062dc:	00c00434 	movhi	r3,16
  1062e0:	18d8bc04 	addi	r3,r3,25328
  1062e4:	10c5883a 	add	r2,r2,r3
  1062e8:	10800017 	ldw	r2,0(r2)
  1062ec:	1000683a 	jmp	r2
  1062f0:	001065e4 	muli	zero,zero,16791
  1062f4:	00106710 	cmplti	zero,zero,16796
  1062f8:	001065e4 	muli	zero,zero,16791
  1062fc:	00106710 	cmplti	zero,zero,16796
  106300:	00106710 	cmplti	zero,zero,16796
  106304:	001065b8 	rdprs	zero,zero,16790
  106308:	0010642c 	andhi	zero,zero,16784
  10630c:	0010642c 	andhi	zero,zero,16784
  106310:	0010642c 	andhi	zero,zero,16784
  106314:	0010642c 	andhi	zero,zero,16784
  106318:	0010642c 	andhi	zero,zero,16784
  10631c:	0010642c 	andhi	zero,zero,16784
  106320:	0010642c 	andhi	zero,zero,16784
  106324:	0010642c 	andhi	zero,zero,16784
  106328:	0010642c 	andhi	zero,zero,16784
  10632c:	00106710 	cmplti	zero,zero,16796
  106330:	00106710 	cmplti	zero,zero,16796
  106334:	00106710 	cmplti	zero,zero,16796
  106338:	00106710 	cmplti	zero,zero,16796
  10633c:	00106710 	cmplti	zero,zero,16796
  106340:	00106710 	cmplti	zero,zero,16796
  106344:	00106710 	cmplti	zero,zero,16796
  106348:	00106700 	call	10670 <OSCtxSw_SWITCH_PC+0x10630>
  10634c:	00106710 	cmplti	zero,zero,16796
  106350:	00106710 	cmplti	zero,zero,16796
  106354:	00106710 	cmplti	zero,zero,16796
  106358:	001066bc 	xorhi	zero,zero,16794
  10635c:	001066a0 	cmpeqi	zero,zero,16794
  106360:	00106710 	cmplti	zero,zero,16796
  106364:	00106710 	cmplti	zero,zero,16796
  106368:	00106668 	cmpgeui	zero,zero,16793
  10636c:	00106710 	cmplti	zero,zero,16796
  106370:	00106710 	cmplti	zero,zero,16796
  106374:	00106710 	cmplti	zero,zero,16796
  106378:	00106710 	cmplti	zero,zero,16796
  10637c:	00106630 	cmpltui	zero,zero,16792
  106380:	00106710 	cmplti	zero,zero,16796
  106384:	00106710 	cmplti	zero,zero,16796
  106388:	00106710 	cmplti	zero,zero,16796
  10638c:	00106710 	cmplti	zero,zero,16796
  106390:	00106710 	cmplti	zero,zero,16796
  106394:	00106614 	movui	zero,16792
  106398:	00106710 	cmplti	zero,zero,16796
  10639c:	00106710 	cmplti	zero,zero,16796
  1063a0:	00106710 	cmplti	zero,zero,16796
  1063a4:	00106710 	cmplti	zero,zero,16796
  1063a8:	001065f8 	rdprs	zero,zero,16791
  1063ac:	00106710 	cmplti	zero,zero,16796
  1063b0:	00106710 	cmplti	zero,zero,16796
  1063b4:	00106710 	cmplti	zero,zero,16796
  1063b8:	00106710 	cmplti	zero,zero,16796
  1063bc:	00106710 	cmplti	zero,zero,16796
  1063c0:	00106710 	cmplti	zero,zero,16796
  1063c4:	00106710 	cmplti	zero,zero,16796
  1063c8:	00106700 	call	10670 <OSCtxSw_SWITCH_PC+0x10630>
  1063cc:	00106710 	cmplti	zero,zero,16796
  1063d0:	00106710 	cmplti	zero,zero,16796
  1063d4:	00106710 	cmplti	zero,zero,16796
  1063d8:	001066bc 	xorhi	zero,zero,16794
  1063dc:	001066a0 	cmpeqi	zero,zero,16794
  1063e0:	00106710 	cmplti	zero,zero,16796
  1063e4:	00106710 	cmplti	zero,zero,16796
  1063e8:	00106668 	cmpgeui	zero,zero,16793
  1063ec:	00106710 	cmplti	zero,zero,16796
  1063f0:	00106710 	cmplti	zero,zero,16796
  1063f4:	00106710 	cmplti	zero,zero,16796
  1063f8:	00106710 	cmplti	zero,zero,16796
  1063fc:	00106630 	cmpltui	zero,zero,16792
  106400:	00106710 	cmplti	zero,zero,16796
  106404:	00106710 	cmplti	zero,zero,16796
  106408:	00106710 	cmplti	zero,zero,16796
  10640c:	00106710 	cmplti	zero,zero,16796
  106410:	00106710 	cmplti	zero,zero,16796
  106414:	00106614 	movui	zero,16792
  106418:	00106710 	cmplti	zero,zero,16796
  10641c:	00106710 	cmplti	zero,zero,16796
  106420:	00106710 	cmplti	zero,zero,16796
  106424:	00106710 	cmplti	zero,zero,16796
  106428:	001065f8 	rdprs	zero,zero,16791
  10642c:	a8803fcc 	andi	r2,r21,255
  106430:	1080201c 	xori	r2,r2,128
  106434:	10bfe004 	addi	r2,r2,-128
  106438:	b885883a 	add	r2,r23,r2
  10643c:	10000d1e 	bne	r2,zero,106474 <__ssvfscanf_r+0xe8c>
  106440:	00bf9fc4 	movi	r2,-385
  106444:	a0a8703a 	and	r20,r20,r2
  106448:	89400005 	stb	r5,0(r17)
  10644c:	8c400044 	addi	r17,r17,1
  106450:	98800117 	ldw	r2,4(r19)
  106454:	843fffc4 	addi	r16,r16,-1
  106458:	94800044 	addi	r18,r18,1
  10645c:	10bfffc4 	addi	r2,r2,-1
  106460:	98800115 	stw	r2,4(r19)
  106464:	0080b40e 	bge	zero,r2,106738 <__ssvfscanf_r+0x1150>
  106468:	21000044 	addi	r4,r4,1
  10646c:	99000015 	stw	r4,0(r19)
  106470:	803f941e 	bne	r16,zero,1062c4 <__alt_data_end+0xfffc62c4>
  106474:	8821883a 	mov	r16,r17
  106478:	a807883a 	mov	r3,r21
  10647c:	e023883a 	mov	r17,fp
  106480:	b82b883a 	mov	r21,r23
  106484:	302f883a 	mov	r23,r6
  106488:	e001961e 	bne	fp,zero,106ae4 <__ssvfscanf_r+0x14fc>
  10648c:	ab3fffc4 	addi	r12,r21,-1
  106490:	00800044 	movi	r2,1
  106494:	1302a22e 	bgeu	r2,r12,106f20 <__ssvfscanf_r+0x1938>
  106498:	18803fcc 	andi	r2,r3,255
  10649c:	1080201c 	xori	r2,r2,128
  1064a0:	10bfe004 	addi	r2,r2,-128
  1064a4:	113fffc4 	addi	r4,r2,-1
  1064a8:	01400184 	movi	r5,6
  1064ac:	29001136 	bltu	r5,r4,1064f4 <__ssvfscanf_r+0xf0c>
  1064b0:	01000084 	movi	r4,2
  1064b4:	2082770e 	bge	r4,r2,106e94 <__ssvfscanf_r+0x18ac>
  1064b8:	054000c4 	movi	r21,3
  1064bc:	1839883a 	mov	fp,r3
  1064c0:	15400c26 	beq	r2,r21,1064f4 <__ssvfscanf_r+0xf0c>
  1064c4:	9425c83a 	sub	r18,r18,r16
  1064c8:	843fffc4 	addi	r16,r16,-1
  1064cc:	81400007 	ldb	r5,0(r16)
  1064d0:	980d883a 	mov	r6,r19
  1064d4:	b809883a 	mov	r4,r23
  1064d8:	01110f40 	call	1110f4 <_sungetc_r>
  1064dc:	e0bfffc4 	addi	r2,fp,-1
  1064e0:	10c03fcc 	andi	r3,r2,255
  1064e4:	8493883a 	add	r9,r16,r18
  1064e8:	1039883a 	mov	fp,r2
  1064ec:	a8fff636 	bltu	r21,r3,1064c8 <__alt_data_end+0xfffc64c8>
  1064f0:	4825883a 	mov	r18,r9
  1064f4:	a080400c 	andi	r2,r20,256
  1064f8:	10001426 	beq	r2,zero,10654c <__ssvfscanf_r+0xf64>
  1064fc:	a081000c 	andi	r2,r20,1024
  106500:	10027b1e 	bne	r2,zero,106ef0 <__ssvfscanf_r+0x1908>
  106504:	817fffc7 	ldb	r5,-1(r16)
  106508:	00801944 	movi	r2,101
  10650c:	873fffc4 	addi	fp,r16,-1
  106510:	957fffc4 	addi	r21,r18,-1
  106514:	28800826 	beq	r5,r2,106538 <__ssvfscanf_r+0xf50>
  106518:	00801144 	movi	r2,69
  10651c:	28800626 	beq	r5,r2,106538 <__ssvfscanf_r+0xf50>
  106520:	980d883a 	mov	r6,r19
  106524:	b809883a 	mov	r4,r23
  106528:	01110f40 	call	1110f4 <_sungetc_r>
  10652c:	817fff87 	ldb	r5,-2(r16)
  106530:	873fff84 	addi	fp,r16,-2
  106534:	957fff84 	addi	r21,r18,-2
  106538:	980d883a 	mov	r6,r19
  10653c:	b809883a 	mov	r4,r23
  106540:	01110f40 	call	1110f4 <_sungetc_r>
  106544:	a825883a 	mov	r18,r21
  106548:	e021883a 	mov	r16,fp
  10654c:	a080040c 	andi	r2,r20,16
  106550:	103e451e 	bne	r2,zero,105e68 <__alt_data_end+0xfffc5e68>
  106554:	80000005 	stb	zero,0(r16)
  106558:	a081800c 	andi	r2,r20,1536
  10655c:	01010004 	movi	r4,1024
  106560:	1101ea26 	beq	r2,r4,106d0c <__ssvfscanf_r+0x1724>
  106564:	d8c0a417 	ldw	r3,656(sp)
  106568:	1801f41e 	bne	r3,zero,106d3c <__ssvfscanf_r+0x1754>
  10656c:	000d883a 	mov	r6,zero
  106570:	d9400104 	addi	r5,sp,4
  106574:	b809883a 	mov	r4,r23
  106578:	010d95c0 	call	10d95c <_strtod_r>
  10657c:	1021883a 	mov	r16,r2
  106580:	a080004c 	andi	r2,r20,1
  106584:	1001b926 	beq	r2,zero,106c6c <__ssvfscanf_r+0x1684>
  106588:	d9009c17 	ldw	r4,624(sp)
  10658c:	20800017 	ldw	r2,0(r4)
  106590:	21000104 	addi	r4,r4,4
  106594:	d9009c15 	stw	r4,624(sp)
  106598:	14000015 	stw	r16,0(r2)
  10659c:	10c00115 	stw	r3,4(r2)
  1065a0:	d8c0a017 	ldw	r3,640(sp)
  1065a4:	dd009d17 	ldw	r20,628(sp)
  1065a8:	18c00044 	addi	r3,r3,1
  1065ac:	d8c0a015 	stw	r3,640(sp)
  1065b0:	a00d883a 	mov	r6,r20
  1065b4:	003c4906 	br	1056dc <__alt_data_end+0xfffc56dc>
  1065b8:	a080400c 	andi	r2,r20,256
  1065bc:	103f9b26 	beq	r2,zero,10642c <__alt_data_end+0xfffc642c>
  1065c0:	d8c0a217 	ldw	r3,648(sp)
  1065c4:	00bfdfc4 	movi	r2,-129
  1065c8:	a0a8703a 	and	r20,r20,r2
  1065cc:	e7000044 	addi	fp,fp,1
  1065d0:	183f9f26 	beq	r3,zero,106450 <__alt_data_end+0xfffc6450>
  1065d4:	18ffffc4 	addi	r3,r3,-1
  1065d8:	d8c0a215 	stw	r3,648(sp)
  1065dc:	84000044 	addi	r16,r16,1
  1065e0:	003f9b06 	br	106450 <__alt_data_end+0xfffc6450>
  1065e4:	a080200c 	andi	r2,r20,128
  1065e8:	103fa226 	beq	r2,zero,106474 <__alt_data_end+0xfffc6474>
  1065ec:	00bfdfc4 	movi	r2,-129
  1065f0:	a0a8703a 	and	r20,r20,r2
  1065f4:	003f9406 	br	106448 <__alt_data_end+0xfffc6448>
  1065f8:	a8803fcc 	andi	r2,r21,255
  1065fc:	1080201c 	xori	r2,r2,128
  106600:	10bfe004 	addi	r2,r2,-128
  106604:	00c001c4 	movi	r3,7
  106608:	10ff9a1e 	bne	r2,r3,106474 <__alt_data_end+0xfffc6474>
  10660c:	05400204 	movi	r21,8
  106610:	003f8d06 	br	106448 <__alt_data_end+0xfffc6448>
  106614:	a8803fcc 	andi	r2,r21,255
  106618:	1080201c 	xori	r2,r2,128
  10661c:	10bfe004 	addi	r2,r2,-128
  106620:	02000184 	movi	r8,6
  106624:	123f931e 	bne	r2,r8,106474 <__alt_data_end+0xfffc6474>
  106628:	054001c4 	movi	r21,7
  10662c:	003f8606 	br	106448 <__alt_data_end+0xfffc6448>
  106630:	b8004f1e 	bne	r23,zero,106770 <__ssvfscanf_r+0x1188>
  106634:	e000031e 	bne	fp,zero,106644 <__ssvfscanf_r+0x105c>
  106638:	a081c00c 	andi	r2,r20,1792
  10663c:	0201c004 	movi	r8,1792
  106640:	1201a226 	beq	r2,r8,106ccc <__ssvfscanf_r+0x16e4>
  106644:	a8803fcc 	andi	r2,r21,255
  106648:	1080201c 	xori	r2,r2,128
  10664c:	10bfe004 	addi	r2,r2,-128
  106650:	02000044 	movi	r8,1
  106654:	12000226 	beq	r2,r8,106660 <__ssvfscanf_r+0x1078>
  106658:	02000104 	movi	r8,4
  10665c:	123f851e 	bne	r2,r8,106474 <__alt_data_end+0xfffc6474>
  106660:	ad400044 	addi	r21,r21,1
  106664:	003f7806 	br	106448 <__alt_data_end+0xfffc6448>
  106668:	a8803fcc 	andi	r2,r21,255
  10666c:	1080201c 	xori	r2,r2,128
  106670:	10bfe004 	addi	r2,r2,-128
  106674:	1000391e 	bne	r2,zero,10675c <__ssvfscanf_r+0x1174>
  106678:	e001151e 	bne	fp,zero,106ad0 <__ssvfscanf_r+0x14e8>
  10667c:	a081c00c 	andi	r2,r20,1792
  106680:	0201c004 	movi	r8,1792
  106684:	12019b26 	beq	r2,r8,106cf4 <__ssvfscanf_r+0x170c>
  106688:	8821883a 	mov	r16,r17
  10668c:	a807883a 	mov	r3,r21
  106690:	e023883a 	mov	r17,fp
  106694:	b82b883a 	mov	r21,r23
  106698:	302f883a 	mov	r23,r6
  10669c:	003f7b06 	br	10648c <__alt_data_end+0xfffc648c>
  1066a0:	a8803fcc 	andi	r2,r21,255
  1066a4:	1080201c 	xori	r2,r2,128
  1066a8:	10bfe004 	addi	r2,r2,-128
  1066ac:	02000084 	movi	r8,2
  1066b0:	123f701e 	bne	r2,r8,106474 <__alt_data_end+0xfffc6474>
  1066b4:	054000c4 	movi	r21,3
  1066b8:	003f6306 	br	106448 <__alt_data_end+0xfffc6448>
  1066bc:	a081400c 	andi	r2,r20,1280
  1066c0:	00c10004 	movi	r3,1024
  1066c4:	10c00326 	beq	r2,r3,1066d4 <__ssvfscanf_r+0x10ec>
  1066c8:	a0c4703a 	and	r2,r20,r3
  1066cc:	103f6926 	beq	r2,zero,106474 <__alt_data_end+0xfffc6474>
  1066d0:	e03fed26 	beq	fp,zero,106688 <__alt_data_end+0xfffc6688>
  1066d4:	a080800c 	andi	r2,r20,512
  1066d8:	1000041e 	bne	r2,zero,1066ec <__ssvfscanf_r+0x1104>
  1066dc:	d8c09f17 	ldw	r3,636(sp)
  1066e0:	dc40a515 	stw	r17,660(sp)
  1066e4:	e0f9c83a 	sub	fp,fp,r3
  1066e8:	df00a415 	stw	fp,656(sp)
  1066ec:	00be1fc4 	movi	r2,-1921
  1066f0:	a0a8703a 	and	r20,r20,r2
  1066f4:	a5006014 	ori	r20,r20,384
  1066f8:	0039883a 	mov	fp,zero
  1066fc:	003f5206 	br	106448 <__alt_data_end+0xfffc6448>
  106700:	00800044 	movi	r2,1
  106704:	b8bf5b1e 	bne	r23,r2,106474 <__alt_data_end+0xfffc6474>
  106708:	05c00084 	movi	r23,2
  10670c:	003f4e06 	br	106448 <__alt_data_end+0xfffc6448>
  106710:	d8c0a317 	ldw	r3,652(sp)
  106714:	2a003fcc 	andi	r8,r5,255
  106718:	18800003 	ldbu	r2,0(r3)
  10671c:	40bf551e 	bne	r8,r2,106474 <__alt_data_end+0xfffc6474>
  106720:	a080800c 	andi	r2,r20,512
  106724:	103f5326 	beq	r2,zero,106474 <__alt_data_end+0xfffc6474>
  106728:	00bf5fc4 	movi	r2,-641
  10672c:	a0a8703a 	and	r20,r20,r2
  106730:	df009f15 	stw	fp,636(sp)
  106734:	003f4406 	br	106448 <__alt_data_end+0xfffc6448>
  106738:	3009883a 	mov	r4,r6
  10673c:	980b883a 	mov	r5,r19
  106740:	d980a915 	stw	r6,676(sp)
  106744:	d9c0aa15 	stw	r7,680(sp)
  106748:	01111fc0 	call	1111fc <__ssrefill_r>
  10674c:	d980a917 	ldw	r6,676(sp)
  106750:	d9c0aa17 	ldw	r7,680(sp)
  106754:	103f4626 	beq	r2,zero,106470 <__alt_data_end+0xfffc6470>
  106758:	003f4606 	br	106474 <__alt_data_end+0xfffc6474>
  10675c:	020000c4 	movi	r8,3
  106760:	123fbf26 	beq	r2,r8,106660 <__alt_data_end+0xfffc6660>
  106764:	02000144 	movi	r8,5
  106768:	123fbd26 	beq	r2,r8,106660 <__alt_data_end+0xfffc6660>
  10676c:	003f4106 	br	106474 <__alt_data_end+0xfffc6474>
  106770:	00800084 	movi	r2,2
  106774:	b8bfb31e 	bne	r23,r2,106644 <__alt_data_end+0xfffc6644>
  106778:	05c000c4 	movi	r23,3
  10677c:	003f3206 	br	106448 <__alt_data_end+0xfffc6448>
  106780:	e000011e 	bne	fp,zero,106788 <__ssvfscanf_r+0x11a0>
  106784:	073fffc4 	movi	fp,-1
  106788:	8900004c 	andi	r4,r17,1
  10678c:	20011d1e 	bne	r4,zero,106c04 <__ssvfscanf_r+0x161c>
  106790:	8c40040c 	andi	r17,r17,16
  106794:	8800da26 	beq	r17,zero,106b00 <__ssvfscanf_r+0x1518>
  106798:	0023883a 	mov	r17,zero
  10679c:	00000306 	br	1067ac <__ssvfscanf_r+0x11c4>
  1067a0:	18800003 	ldbu	r2,0(r3)
  1067a4:	8085883a 	add	r2,r16,r2
  1067a8:	10800043 	ldbu	r2,1(r2)
  1067ac:	1080020c 	andi	r2,r2,8
  1067b0:	1000fc1e 	bne	r2,zero,106ba4 <__ssvfscanf_r+0x15bc>
  1067b4:	98800117 	ldw	r2,4(r19)
  1067b8:	18c00044 	addi	r3,r3,1
  1067bc:	8c400044 	addi	r17,r17,1
  1067c0:	10bfffc4 	addi	r2,r2,-1
  1067c4:	98800115 	stw	r2,4(r19)
  1067c8:	98c00015 	stw	r3,0(r19)
  1067cc:	8f00f526 	beq	r17,fp,106ba4 <__ssvfscanf_r+0x15bc>
  1067d0:	00bff316 	blt	zero,r2,1067a0 <__alt_data_end+0xfffc67a0>
  1067d4:	980b883a 	mov	r5,r19
  1067d8:	b809883a 	mov	r4,r23
  1067dc:	01111fc0 	call	1111fc <__ssrefill_r>
  1067e0:	1000f01e 	bne	r2,zero,106ba4 <__ssvfscanf_r+0x15bc>
  1067e4:	b4000017 	ldw	r16,0(r22)
  1067e8:	98c00017 	ldw	r3,0(r19)
  1067ec:	003fec06 	br	1067a0 <__alt_data_end+0xfffc67a0>
  1067f0:	e0bfffc4 	addi	r2,fp,-1
  1067f4:	01405704 	movi	r5,348
  1067f8:	2880bf2e 	bgeu	r5,r2,106af8 <__ssvfscanf_r+0x1510>
  1067fc:	e1ffa8c4 	addi	r7,fp,-349
  106800:	07005744 	movi	fp,349
  106804:	8c436014 	ori	r17,r17,3456
  106808:	9013883a 	mov	r9,r18
  10680c:	8825883a 	mov	r18,r17
  106810:	dc409e17 	ldw	r17,632(sp)
  106814:	0029883a 	mov	r20,zero
  106818:	dc000104 	addi	r16,sp,4
  10681c:	05401344 	movi	r21,77
  106820:	02c08004 	movi	r11,512
  106824:	01bf7fc4 	movi	r6,-513
  106828:	023fdfc4 	movi	r8,-129
  10682c:	20bff544 	addi	r2,r4,-43
  106830:	10803fcc 	andi	r2,r2,255
  106834:	a8807236 	bltu	r21,r2,106a00 <__ssvfscanf_r+0x1418>
  106838:	100490ba 	slli	r2,r2,2
  10683c:	01400434 	movhi	r5,16
  106840:	295a1404 	addi	r5,r5,26704
  106844:	1145883a 	add	r2,r2,r5
  106848:	10800017 	ldw	r2,0(r2)
  10684c:	1000683a 	jmp	r2
  106850:	00106a84 	movi	zero,16810
  106854:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  106858:	00106a84 	movi	zero,16810
  10685c:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  106860:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  106864:	00106a5c 	xori	zero,zero,16809
  106868:	00106a3c 	xorhi	zero,zero,16808
  10686c:	00106a3c 	xorhi	zero,zero,16808
  106870:	00106a3c 	xorhi	zero,zero,16808
  106874:	00106a3c 	xorhi	zero,zero,16808
  106878:	00106a3c 	xorhi	zero,zero,16808
  10687c:	00106a3c 	xorhi	zero,zero,16808
  106880:	00106a3c 	xorhi	zero,zero,16808
  106884:	001069e4 	muli	zero,zero,16807
  106888:	001069e4 	muli	zero,zero,16807
  10688c:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  106890:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  106894:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  106898:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  10689c:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  1068a0:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  1068a4:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  1068a8:	001069d0 	cmplti	zero,zero,16807
  1068ac:	001069d0 	cmplti	zero,zero,16807
  1068b0:	001069d0 	cmplti	zero,zero,16807
  1068b4:	001069d0 	cmplti	zero,zero,16807
  1068b8:	001069d0 	cmplti	zero,zero,16807
  1068bc:	001069d0 	cmplti	zero,zero,16807
  1068c0:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  1068c4:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  1068c8:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  1068cc:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  1068d0:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  1068d4:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  1068d8:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  1068dc:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  1068e0:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  1068e4:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  1068e8:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  1068ec:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  1068f0:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  1068f4:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  1068f8:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  1068fc:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  106900:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  106904:	00106988 	cmpgei	zero,zero,16806
  106908:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  10690c:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  106910:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  106914:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  106918:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  10691c:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  106920:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  106924:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  106928:	001069d0 	cmplti	zero,zero,16807
  10692c:	001069d0 	cmplti	zero,zero,16807
  106930:	001069d0 	cmplti	zero,zero,16807
  106934:	001069d0 	cmplti	zero,zero,16807
  106938:	001069d0 	cmplti	zero,zero,16807
  10693c:	001069d0 	cmplti	zero,zero,16807
  106940:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  106944:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  106948:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  10694c:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  106950:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  106954:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  106958:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  10695c:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  106960:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  106964:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  106968:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  10696c:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  106970:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  106974:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  106978:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  10697c:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  106980:	00106a00 	call	106a0 <OSCtxSw_SWITCH_PC+0x10660>
  106984:	00106988 	cmpgei	zero,zero,16806
  106988:	9081800c 	andi	r2,r18,1536
  10698c:	12c01c1e 	bne	r2,r11,106a00 <__ssvfscanf_r+0x1418>
  106990:	91a4703a 	and	r18,r18,r6
  106994:	94814014 	ori	r18,r18,1280
  106998:	04400404 	movi	r17,16
  10699c:	81000005 	stb	r4,0(r16)
  1069a0:	84000044 	addi	r16,r16,1
  1069a4:	98800117 	ldw	r2,4(r19)
  1069a8:	10bfffc4 	addi	r2,r2,-1
  1069ac:	98800115 	stw	r2,4(r19)
  1069b0:	0080380e 	bge	zero,r2,106a94 <__ssvfscanf_r+0x14ac>
  1069b4:	18c00044 	addi	r3,r3,1
  1069b8:	98c00015 	stw	r3,0(r19)
  1069bc:	e73fffc4 	addi	fp,fp,-1
  1069c0:	e0000f26 	beq	fp,zero,106a00 <__ssvfscanf_r+0x1418>
  1069c4:	98c00017 	ldw	r3,0(r19)
  1069c8:	19000003 	ldbu	r4,0(r3)
  1069cc:	003f9706 	br	10682c <__alt_data_end+0xfffc682c>
  1069d0:	00800284 	movi	r2,10
  1069d4:	14400a0e 	bge	r2,r17,106a00 <__ssvfscanf_r+0x1418>
  1069d8:	00bd1fc4 	movi	r2,-2945
  1069dc:	90a4703a 	and	r18,r18,r2
  1069e0:	003fee06 	br	10699c <__alt_data_end+0xfffc699c>
  1069e4:	014004b4 	movhi	r5,18
  1069e8:	8c63883a 	add	r17,r17,r17
  1069ec:	294e5c84 	addi	r5,r5,14706
  1069f0:	2c45883a 	add	r2,r5,r17
  1069f4:	1440000f 	ldh	r17,0(r2)
  1069f8:	00800204 	movi	r2,8
  1069fc:	147ff616 	blt	r2,r17,1069d8 <__alt_data_end+0xfffc69d8>
  106a00:	dc409e15 	stw	r17,632(sp)
  106a04:	9023883a 	mov	r17,r18
  106a08:	8880400c 	andi	r2,r17,256
  106a0c:	4825883a 	mov	r18,r9
  106a10:	10000426 	beq	r2,zero,106a24 <__ssvfscanf_r+0x143c>
  106a14:	d8800104 	addi	r2,sp,4
  106a18:	1400b036 	bltu	r2,r16,106cdc <__ssvfscanf_r+0x16f4>
  106a1c:	d8c00104 	addi	r3,sp,4
  106a20:	1c3b3226 	beq	r3,r16,1056ec <__alt_data_end+0xfffc56ec>
  106a24:	8880040c 	andi	r2,r17,16
  106a28:	10006226 	beq	r2,zero,106bb4 <__ssvfscanf_r+0x15cc>
  106a2c:	d8800104 	addi	r2,sp,4
  106a30:	80a1c83a 	sub	r16,r16,r2
  106a34:	8521883a 	add	r16,r16,r20
  106a38:	003ca506 	br	105cd0 <__alt_data_end+0xfffc5cd0>
  106a3c:	014004b4 	movhi	r5,18
  106a40:	8c63883a 	add	r17,r17,r17
  106a44:	294e5c84 	addi	r5,r5,14706
  106a48:	2c45883a 	add	r2,r5,r17
  106a4c:	1440000f 	ldh	r17,0(r2)
  106a50:	00bd1fc4 	movi	r2,-2945
  106a54:	90a4703a 	and	r18,r18,r2
  106a58:	003fd006 	br	10699c <__alt_data_end+0xfffc699c>
  106a5c:	9082000c 	andi	r2,r18,2048
  106a60:	103fce26 	beq	r2,zero,10699c <__alt_data_end+0xfffc699c>
  106a64:	8800021e 	bne	r17,zero,106a70 <__ssvfscanf_r+0x1488>
  106a68:	94808014 	ori	r18,r18,512
  106a6c:	04400204 	movi	r17,8
  106a70:	9081000c 	andi	r2,r18,1024
  106a74:	10008626 	beq	r2,zero,106c90 <__ssvfscanf_r+0x16a8>
  106a78:	00be9fc4 	movi	r2,-1409
  106a7c:	90a4703a 	and	r18,r18,r2
  106a80:	003fc606 	br	10699c <__alt_data_end+0xfffc699c>
  106a84:	9080200c 	andi	r2,r18,128
  106a88:	103fdd26 	beq	r2,zero,106a00 <__alt_data_end+0xfffc6a00>
  106a8c:	9224703a 	and	r18,r18,r8
  106a90:	003fc206 	br	10699c <__alt_data_end+0xfffc699c>
  106a94:	980b883a 	mov	r5,r19
  106a98:	b809883a 	mov	r4,r23
  106a9c:	d980a915 	stw	r6,676(sp)
  106aa0:	d9c0aa15 	stw	r7,680(sp)
  106aa4:	da00a715 	stw	r8,668(sp)
  106aa8:	da40a815 	stw	r9,672(sp)
  106aac:	dac0a615 	stw	r11,664(sp)
  106ab0:	01111fc0 	call	1111fc <__ssrefill_r>
  106ab4:	d980a917 	ldw	r6,676(sp)
  106ab8:	d9c0aa17 	ldw	r7,680(sp)
  106abc:	da00a717 	ldw	r8,668(sp)
  106ac0:	da40a817 	ldw	r9,672(sp)
  106ac4:	dac0a617 	ldw	r11,664(sp)
  106ac8:	103fbc26 	beq	r2,zero,1069bc <__alt_data_end+0xfffc69bc>
  106acc:	003fcc06 	br	106a00 <__alt_data_end+0xfffc6a00>
  106ad0:	8821883a 	mov	r16,r17
  106ad4:	a807883a 	mov	r3,r21
  106ad8:	e023883a 	mov	r17,fp
  106adc:	b82b883a 	mov	r21,r23
  106ae0:	302f883a 	mov	r23,r6
  106ae4:	00bfbfc4 	movi	r2,-257
  106ae8:	a0a8703a 	and	r20,r20,r2
  106aec:	003e6706 	br	10648c <__alt_data_end+0xfffc648c>
  106af0:	d800a215 	stw	zero,648(sp)
  106af4:	003de306 	br	106284 <__alt_data_end+0xfffc6284>
  106af8:	000f883a 	mov	r7,zero
  106afc:	003f4106 	br	106804 <__alt_data_end+0xfffc6804>
  106b00:	d9409c17 	ldw	r5,624(sp)
  106b04:	e2bfffc4 	addi	r10,fp,-1
  106b08:	2c400017 	ldw	r17,0(r5)
  106b0c:	2c000104 	addi	r16,r5,4
  106b10:	8aa9883a 	add	r20,r17,r10
  106b14:	880b883a 	mov	r5,r17
  106b18:	00000606 	br	106b34 <__ssvfscanf_r+0x154c>
  106b1c:	98c00017 	ldw	r3,0(r19)
  106b20:	b1000017 	ldw	r4,0(r22)
  106b24:	a80b883a 	mov	r5,r21
  106b28:	18800003 	ldbu	r2,0(r3)
  106b2c:	2085883a 	add	r2,r4,r2
  106b30:	10800043 	ldbu	r2,1(r2)
  106b34:	1080020c 	andi	r2,r2,8
  106b38:	1000621e 	bne	r2,zero,106cc4 <__ssvfscanf_r+0x16dc>
  106b3c:	98800117 	ldw	r2,4(r19)
  106b40:	19000044 	addi	r4,r3,1
  106b44:	99000015 	stw	r4,0(r19)
  106b48:	10bfffc4 	addi	r2,r2,-1
  106b4c:	98800115 	stw	r2,4(r19)
  106b50:	18800003 	ldbu	r2,0(r3)
  106b54:	2d400044 	addi	r21,r5,1
  106b58:	a839883a 	mov	fp,r21
  106b5c:	28800005 	stb	r2,0(r5)
  106b60:	2d000626 	beq	r5,r20,106b7c <__ssvfscanf_r+0x1594>
  106b64:	98800117 	ldw	r2,4(r19)
  106b68:	00bfec16 	blt	zero,r2,106b1c <__alt_data_end+0xfffc6b1c>
  106b6c:	980b883a 	mov	r5,r19
  106b70:	b809883a 	mov	r4,r23
  106b74:	01111fc0 	call	1111fc <__ssrefill_r>
  106b78:	103fe826 	beq	r2,zero,106b1c <__alt_data_end+0xfffc6b1c>
  106b7c:	d880a017 	ldw	r2,640(sp)
  106b80:	dd009d17 	ldw	r20,628(sp)
  106b84:	e463c83a 	sub	r17,fp,r17
  106b88:	10800044 	addi	r2,r2,1
  106b8c:	e0000005 	stb	zero,0(fp)
  106b90:	9465883a 	add	r18,r18,r17
  106b94:	d880a015 	stw	r2,640(sp)
  106b98:	dc009c15 	stw	r16,624(sp)
  106b9c:	a00d883a 	mov	r6,r20
  106ba0:	003ace06 	br	1056dc <__alt_data_end+0xfffc56dc>
  106ba4:	dd009d17 	ldw	r20,628(sp)
  106ba8:	9465883a 	add	r18,r18,r17
  106bac:	a00d883a 	mov	r6,r20
  106bb0:	003aca06 	br	1056dc <__alt_data_end+0xfffc56dc>
  106bb4:	d8c0a117 	ldw	r3,644(sp)
  106bb8:	d9c09e17 	ldw	r7,632(sp)
  106bbc:	000d883a 	mov	r6,zero
  106bc0:	d9400104 	addi	r5,sp,4
  106bc4:	b809883a 	mov	r4,r23
  106bc8:	80000005 	stb	zero,0(r16)
  106bcc:	183ee83a 	callr	r3
  106bd0:	88c0080c 	andi	r3,r17,32
  106bd4:	1800351e 	bne	r3,zero,106cac <__ssvfscanf_r+0x16c4>
  106bd8:	88c0010c 	andi	r3,r17,4
  106bdc:	18007026 	beq	r3,zero,106da0 <__ssvfscanf_r+0x17b8>
  106be0:	d9409c17 	ldw	r5,624(sp)
  106be4:	28c00017 	ldw	r3,0(r5)
  106be8:	29400104 	addi	r5,r5,4
  106bec:	d9409c15 	stw	r5,624(sp)
  106bf0:	1880000d 	sth	r2,0(r3)
  106bf4:	d940a017 	ldw	r5,640(sp)
  106bf8:	29400044 	addi	r5,r5,1
  106bfc:	d940a015 	stw	r5,640(sp)
  106c00:	003f8a06 	br	106a2c <__alt_data_end+0xfffc6a2c>
  106c04:	dd409904 	addi	r21,sp,612
  106c08:	8c40040c 	andi	r17,r17,16
  106c0c:	01800204 	movi	r6,8
  106c10:	000b883a 	mov	r5,zero
  106c14:	a809883a 	mov	r4,r21
  106c18:	01028600 	call	102860 <memset>
  106c1c:	8800391e 	bne	r17,zero,106d04 <__ssvfscanf_r+0x171c>
  106c20:	d8c09c17 	ldw	r3,624(sp)
  106c24:	1d000017 	ldw	r20,0(r3)
  106c28:	18c00104 	addi	r3,r3,4
  106c2c:	d8c09c15 	stw	r3,624(sp)
  106c30:	000d883a 	mov	r6,zero
  106c34:	3021883a 	mov	r16,r6
  106c38:	dc409f15 	stw	r17,636(sp)
  106c3c:	98800017 	ldw	r2,0(r19)
  106c40:	b0c00017 	ldw	r3,0(r22)
  106c44:	10800003 	ldbu	r2,0(r2)
  106c48:	1885883a 	add	r2,r3,r2
  106c4c:	10800043 	ldbu	r2,1(r2)
  106c50:	1080020c 	andi	r2,r2,8
  106c54:	1000011e 	bne	r2,zero,106c5c <__ssvfscanf_r+0x1674>
  106c58:	e000651e 	bne	fp,zero,106df0 <__ssvfscanf_r+0x1808>
  106c5c:	dc409f17 	ldw	r17,636(sp)
  106c60:	883c811e 	bne	r17,zero,105e68 <__alt_data_end+0xfffc5e68>
  106c64:	a0000015 	stw	zero,0(r20)
  106c68:	003c7c06 	br	105e5c <__alt_data_end+0xfffc5e5c>
  106c6c:	a2c0008c 	andi	r11,r20,2
  106c70:	58003c26 	beq	r11,zero,106d64 <__ssvfscanf_r+0x177c>
  106c74:	d9409c17 	ldw	r5,624(sp)
  106c78:	28800017 	ldw	r2,0(r5)
  106c7c:	29400104 	addi	r5,r5,4
  106c80:	d9409c15 	stw	r5,624(sp)
  106c84:	14000015 	stw	r16,0(r2)
  106c88:	10c00115 	stw	r3,4(r2)
  106c8c:	003e4406 	br	1065a0 <__alt_data_end+0xfffc65a0>
  106c90:	00bf1fc4 	movi	r2,-897
  106c94:	90a4703a 	and	r18,r18,r2
  106c98:	38000226 	beq	r7,zero,106ca4 <__ssvfscanf_r+0x16bc>
  106c9c:	39ffffc4 	addi	r7,r7,-1
  106ca0:	e7000044 	addi	fp,fp,1
  106ca4:	a5000044 	addi	r20,r20,1
  106ca8:	003f3e06 	br	1069a4 <__alt_data_end+0xfffc69a4>
  106cac:	d9009c17 	ldw	r4,624(sp)
  106cb0:	20c00017 	ldw	r3,0(r4)
  106cb4:	21000104 	addi	r4,r4,4
  106cb8:	d9009c15 	stw	r4,624(sp)
  106cbc:	18800015 	stw	r2,0(r3)
  106cc0:	003fcc06 	br	106bf4 <__alt_data_end+0xfffc6bf4>
  106cc4:	2839883a 	mov	fp,r5
  106cc8:	003fac06 	br	106b7c <__alt_data_end+0xfffc6b7c>
  106ccc:	00be1fc4 	movi	r2,-1921
  106cd0:	a0a8703a 	and	r20,r20,r2
  106cd4:	05c00044 	movi	r23,1
  106cd8:	003ddb06 	br	106448 <__alt_data_end+0xfffc6448>
  106cdc:	817fffc7 	ldb	r5,-1(r16)
  106ce0:	980d883a 	mov	r6,r19
  106ce4:	b809883a 	mov	r4,r23
  106ce8:	843fffc4 	addi	r16,r16,-1
  106cec:	01110f40 	call	1110f4 <_sungetc_r>
  106cf0:	003f4a06 	br	106a1c <__alt_data_end+0xfffc6a1c>
  106cf4:	00fe1fc4 	movi	r3,-1921
  106cf8:	a0e8703a 	and	r20,r20,r3
  106cfc:	05400044 	movi	r21,1
  106d00:	003dd106 	br	106448 <__alt_data_end+0xfffc6448>
  106d04:	dd009b04 	addi	r20,sp,620
  106d08:	003fc906 	br	106c30 <__alt_data_end+0xfffc6c30>
  106d0c:	d8c09f17 	ldw	r3,636(sp)
  106d10:	88e3c83a 	sub	r17,r17,r3
  106d14:	044dc83a 	sub	r6,zero,r17
  106d18:	883e1426 	beq	r17,zero,10656c <__alt_data_end+0xfffc656c>
  106d1c:	d88055c4 	addi	r2,sp,343
  106d20:	80800136 	bltu	r16,r2,106d28 <__ssvfscanf_r+0x1740>
  106d24:	dc005584 	addi	r16,sp,342
  106d28:	014004b4 	movhi	r5,18
  106d2c:	294e5b04 	addi	r5,r5,14700
  106d30:	8009883a 	mov	r4,r16
  106d34:	0102d640 	call	102d64 <sprintf>
  106d38:	003e0c06 	br	10656c <__alt_data_end+0xfffc656c>
  106d3c:	d8c0a517 	ldw	r3,660(sp)
  106d40:	000d883a 	mov	r6,zero
  106d44:	01c00284 	movi	r7,10
  106d48:	19400044 	addi	r5,r3,1
  106d4c:	b809883a 	mov	r4,r23
  106d50:	010f0580 	call	10f058 <_strtol_r>
  106d54:	d8c0a417 	ldw	r3,656(sp)
  106d58:	dc00a517 	ldw	r16,660(sp)
  106d5c:	10cdc83a 	sub	r6,r2,r3
  106d60:	003fee06 	br	106d1c <__alt_data_end+0xfffc6d1c>
  106d64:	d8809c17 	ldw	r2,624(sp)
  106d68:	180b883a 	mov	r5,r3
  106d6c:	8009883a 	mov	r4,r16
  106d70:	15000017 	ldw	r20,0(r2)
  106d74:	14400104 	addi	r17,r2,4
  106d78:	d8c0a615 	stw	r3,664(sp)
  106d7c:	010d7ac0 	call	10d7ac <__fpclassifyd>
  106d80:	d8c0a617 	ldw	r3,664(sp)
  106d84:	10007226 	beq	r2,zero,106f50 <__ssvfscanf_r+0x1968>
  106d88:	8009883a 	mov	r4,r16
  106d8c:	180b883a 	mov	r5,r3
  106d90:	0118ad80 	call	118ad8 <__truncdfsf2>
  106d94:	a0800015 	stw	r2,0(r20)
  106d98:	dc409c15 	stw	r17,624(sp)
  106d9c:	003e0006 	br	1065a0 <__alt_data_end+0xfffc65a0>
  106da0:	88c0004c 	andi	r3,r17,1
  106da4:	183fc11e 	bne	r3,zero,106cac <__alt_data_end+0xfffc6cac>
  106da8:	8c40008c 	andi	r17,r17,2
  106dac:	883fbf26 	beq	r17,zero,106cac <__alt_data_end+0xfffc6cac>
  106db0:	d940a117 	ldw	r5,644(sp)
  106db4:	00800474 	movhi	r2,17
  106db8:	10bd7404 	addi	r2,r2,-2608
  106dbc:	d9c09e17 	ldw	r7,632(sp)
  106dc0:	000d883a 	mov	r6,zero
  106dc4:	28806726 	beq	r5,r2,106f64 <__ssvfscanf_r+0x197c>
  106dc8:	d9400104 	addi	r5,sp,4
  106dcc:	b809883a 	mov	r4,r23
  106dd0:	010f2cc0 	call	10f2cc <_strtoll_r>
  106dd4:	d9409c17 	ldw	r5,624(sp)
  106dd8:	29000017 	ldw	r4,0(r5)
  106ddc:	29400104 	addi	r5,r5,4
  106de0:	d9409c15 	stw	r5,624(sp)
  106de4:	20800015 	stw	r2,0(r4)
  106de8:	20c00115 	stw	r3,4(r4)
  106dec:	003f8106 	br	106bf4 <__alt_data_end+0xfffc6bf4>
  106df0:	010bb400 	call	10bb40 <__locale_mb_cur_max>
  106df4:	80bc5626 	beq	r16,r2,105f50 <__alt_data_end+0xfffc5f50>
  106df8:	98800017 	ldw	r2,0(r19)
  106dfc:	99000117 	ldw	r4,4(r19)
  106e00:	d9400104 	addi	r5,sp,4
  106e04:	12000003 	ldbu	r8,0(r2)
  106e08:	213fffc4 	addi	r4,r4,-1
  106e0c:	10800044 	addi	r2,r2,1
  106e10:	99000115 	stw	r4,4(r19)
  106e14:	98800015 	stw	r2,0(r19)
  106e18:	84400044 	addi	r17,r16,1
  106e1c:	dd400015 	stw	r21,0(sp)
  106e20:	2c21883a 	add	r16,r5,r16
  106e24:	280d883a 	mov	r6,r5
  106e28:	880f883a 	mov	r7,r17
  106e2c:	a00b883a 	mov	r5,r20
  106e30:	b809883a 	mov	r4,r23
  106e34:	82000005 	stb	r8,0(r16)
  106e38:	010bdb00 	call	10bdb0 <_mbrtowc_r>
  106e3c:	00ffffc4 	movi	r3,-1
  106e40:	10fc4326 	beq	r2,r3,105f50 <__alt_data_end+0xfffc5f50>
  106e44:	103c371e 	bne	r2,zero,105f24 <__alt_data_end+0xfffc5f24>
  106e48:	a0000015 	stw	zero,0(r20)
  106e4c:	0009883a 	mov	r4,zero
  106e50:	010ba880 	call	10ba88 <iswspace>
  106e54:	10001b26 	beq	r2,zero,106ec4 <__ssvfscanf_r+0x18dc>
  106e58:	8821883a 	mov	r16,r17
  106e5c:	dc409f17 	ldw	r17,636(sp)
  106e60:	803f7f26 	beq	r16,zero,106c60 <__alt_data_end+0xfffc6c60>
  106e64:	843fffc4 	addi	r16,r16,-1
  106e68:	d9400104 	addi	r5,sp,4
  106e6c:	2c2b883a 	add	r21,r5,r16
  106e70:	00000106 	br	106e78 <__ssvfscanf_r+0x1890>
  106e74:	843fffc4 	addi	r16,r16,-1
  106e78:	a9400003 	ldbu	r5,0(r21)
  106e7c:	980d883a 	mov	r6,r19
  106e80:	b809883a 	mov	r4,r23
  106e84:	01110f40 	call	1110f4 <_sungetc_r>
  106e88:	ad7fffc4 	addi	r21,r21,-1
  106e8c:	803ff91e 	bne	r16,zero,106e74 <__alt_data_end+0xfffc6e74>
  106e90:	003f7306 	br	106c60 <__alt_data_end+0xfffc6c60>
  106e94:	d9400104 	addi	r5,sp,4
  106e98:	802b883a 	mov	r21,r16
  106e9c:	9839883a 	mov	fp,r19
  106ea0:	2c3a122e 	bgeu	r5,r16,1056ec <__alt_data_end+0xfffc56ec>
  106ea4:	ad7fffc4 	addi	r21,r21,-1
  106ea8:	a9400007 	ldb	r5,0(r21)
  106eac:	e00d883a 	mov	r6,fp
  106eb0:	b809883a 	mov	r4,r23
  106eb4:	01110f40 	call	1110f4 <_sungetc_r>
  106eb8:	d8800104 	addi	r2,sp,4
  106ebc:	157ff91e 	bne	r2,r21,106ea4 <__alt_data_end+0xfffc6ea4>
  106ec0:	003a0a06 	br	1056ec <__alt_data_end+0xfffc56ec>
  106ec4:	d8c09f17 	ldw	r3,636(sp)
  106ec8:	9465883a 	add	r18,r18,r17
  106ecc:	e73fffc4 	addi	fp,fp,-1
  106ed0:	1800051e 	bne	r3,zero,106ee8 <__ssvfscanf_r+0x1900>
  106ed4:	a5000104 	addi	r20,r20,4
  106ed8:	0021883a 	mov	r16,zero
  106edc:	003c1406 	br	105f30 <__alt_data_end+0xfffc5f30>
  106ee0:	a1000017 	ldw	r4,0(r20)
  106ee4:	003fda06 	br	106e50 <__alt_data_end+0xfffc6e50>
  106ee8:	0021883a 	mov	r16,zero
  106eec:	003c1006 	br	105f30 <__alt_data_end+0xfffc5f30>
  106ef0:	d8c00104 	addi	r3,sp,4
  106ef4:	802b883a 	mov	r21,r16
  106ef8:	9839883a 	mov	fp,r19
  106efc:	1c39fb2e 	bgeu	r3,r16,1056ec <__alt_data_end+0xfffc56ec>
  106f00:	ad7fffc4 	addi	r21,r21,-1
  106f04:	a9400007 	ldb	r5,0(r21)
  106f08:	b809883a 	mov	r4,r23
  106f0c:	e00d883a 	mov	r6,fp
  106f10:	01110f40 	call	1110f4 <_sungetc_r>
  106f14:	d9000104 	addi	r4,sp,4
  106f18:	257ff91e 	bne	r4,r21,106f00 <__alt_data_end+0xfffc6f00>
  106f1c:	0039f306 	br	1056ec <__alt_data_end+0xfffc56ec>
  106f20:	d8c00104 	addi	r3,sp,4
  106f24:	802b883a 	mov	r21,r16
  106f28:	9839883a 	mov	fp,r19
  106f2c:	1c39ef2e 	bgeu	r3,r16,1056ec <__alt_data_end+0xfffc56ec>
  106f30:	ad7fffc4 	addi	r21,r21,-1
  106f34:	a9400007 	ldb	r5,0(r21)
  106f38:	b809883a 	mov	r4,r23
  106f3c:	e00d883a 	mov	r6,fp
  106f40:	01110f40 	call	1110f4 <_sungetc_r>
  106f44:	d9000104 	addi	r4,sp,4
  106f48:	257ff91e 	bne	r4,r21,106f30 <__alt_data_end+0xfffc6f30>
  106f4c:	0039e706 	br	1056ec <__alt_data_end+0xfffc56ec>
  106f50:	0009883a 	mov	r4,zero
  106f54:	010d8f00 	call	10d8f0 <nanf>
  106f58:	a0800015 	stw	r2,0(r20)
  106f5c:	dc409c15 	stw	r17,624(sp)
  106f60:	003d8f06 	br	1065a0 <__alt_data_end+0xfffc65a0>
  106f64:	d9400104 	addi	r5,sp,4
  106f68:	b809883a 	mov	r4,r23
  106f6c:	010f8640 	call	10f864 <_strtoull_r>
  106f70:	003f9806 	br	106dd4 <__alt_data_end+0xfffc6dd4>

00106f74 <___vfprintf_internal_r>:
  106f74:	deffb804 	addi	sp,sp,-288
  106f78:	dfc04715 	stw	ra,284(sp)
  106f7c:	ddc04515 	stw	r23,276(sp)
  106f80:	dd404315 	stw	r21,268(sp)
  106f84:	d9002d15 	stw	r4,180(sp)
  106f88:	282f883a 	mov	r23,r5
  106f8c:	302b883a 	mov	r21,r6
  106f90:	d9c02e15 	stw	r7,184(sp)
  106f94:	df004615 	stw	fp,280(sp)
  106f98:	dd804415 	stw	r22,272(sp)
  106f9c:	dd004215 	stw	r20,264(sp)
  106fa0:	dcc04115 	stw	r19,260(sp)
  106fa4:	dc804015 	stw	r18,256(sp)
  106fa8:	dc403f15 	stw	r17,252(sp)
  106fac:	dc003e15 	stw	r16,248(sp)
  106fb0:	010bb640 	call	10bb64 <_localeconv_r>
  106fb4:	10800017 	ldw	r2,0(r2)
  106fb8:	1009883a 	mov	r4,r2
  106fbc:	d8803415 	stw	r2,208(sp)
  106fc0:	01031f00 	call	1031f0 <strlen>
  106fc4:	d8803715 	stw	r2,220(sp)
  106fc8:	d8802d17 	ldw	r2,180(sp)
  106fcc:	10000226 	beq	r2,zero,106fd8 <___vfprintf_internal_r+0x64>
  106fd0:	10800e17 	ldw	r2,56(r2)
  106fd4:	1000fb26 	beq	r2,zero,1073c4 <___vfprintf_internal_r+0x450>
  106fd8:	b880030b 	ldhu	r2,12(r23)
  106fdc:	10c8000c 	andi	r3,r2,8192
  106fe0:	1800061e 	bne	r3,zero,106ffc <___vfprintf_internal_r+0x88>
  106fe4:	b9001917 	ldw	r4,100(r23)
  106fe8:	00f7ffc4 	movi	r3,-8193
  106fec:	10880014 	ori	r2,r2,8192
  106ff0:	20c6703a 	and	r3,r4,r3
  106ff4:	b880030d 	sth	r2,12(r23)
  106ff8:	b8c01915 	stw	r3,100(r23)
  106ffc:	10c0020c 	andi	r3,r2,8
  107000:	1800c326 	beq	r3,zero,107310 <___vfprintf_internal_r+0x39c>
  107004:	b8c00417 	ldw	r3,16(r23)
  107008:	1800c126 	beq	r3,zero,107310 <___vfprintf_internal_r+0x39c>
  10700c:	1080068c 	andi	r2,r2,26
  107010:	00c00284 	movi	r3,10
  107014:	10c0c626 	beq	r2,r3,107330 <___vfprintf_internal_r+0x3bc>
  107018:	d8c00404 	addi	r3,sp,16
  10701c:	050004b4 	movhi	r20,18
  107020:	d9001e04 	addi	r4,sp,120
  107024:	a50e6504 	addi	r20,r20,14740
  107028:	d8c01e15 	stw	r3,120(sp)
  10702c:	d8002015 	stw	zero,128(sp)
  107030:	d8001f15 	stw	zero,124(sp)
  107034:	d8003315 	stw	zero,204(sp)
  107038:	d8003615 	stw	zero,216(sp)
  10703c:	d8003815 	stw	zero,224(sp)
  107040:	1811883a 	mov	r8,r3
  107044:	d8003915 	stw	zero,228(sp)
  107048:	d8003a15 	stw	zero,232(sp)
  10704c:	d8002f15 	stw	zero,188(sp)
  107050:	d9002815 	stw	r4,160(sp)
  107054:	a8800007 	ldb	r2,0(r21)
  107058:	10028b26 	beq	r2,zero,107a88 <___vfprintf_internal_r+0xb14>
  10705c:	00c00944 	movi	r3,37
  107060:	a823883a 	mov	r17,r21
  107064:	10c0021e 	bne	r2,r3,107070 <___vfprintf_internal_r+0xfc>
  107068:	00001406 	br	1070bc <___vfprintf_internal_r+0x148>
  10706c:	10c00326 	beq	r2,r3,10707c <___vfprintf_internal_r+0x108>
  107070:	8c400044 	addi	r17,r17,1
  107074:	88800007 	ldb	r2,0(r17)
  107078:	103ffc1e 	bne	r2,zero,10706c <__alt_data_end+0xfffc706c>
  10707c:	8d61c83a 	sub	r16,r17,r21
  107080:	80000e26 	beq	r16,zero,1070bc <___vfprintf_internal_r+0x148>
  107084:	d8c02017 	ldw	r3,128(sp)
  107088:	d8801f17 	ldw	r2,124(sp)
  10708c:	45400015 	stw	r21,0(r8)
  107090:	1c07883a 	add	r3,r3,r16
  107094:	10800044 	addi	r2,r2,1
  107098:	d8c02015 	stw	r3,128(sp)
  10709c:	44000115 	stw	r16,4(r8)
  1070a0:	d8801f15 	stw	r2,124(sp)
  1070a4:	00c001c4 	movi	r3,7
  1070a8:	1880a916 	blt	r3,r2,107350 <___vfprintf_internal_r+0x3dc>
  1070ac:	42000204 	addi	r8,r8,8
  1070b0:	d9402f17 	ldw	r5,188(sp)
  1070b4:	2c0b883a 	add	r5,r5,r16
  1070b8:	d9402f15 	stw	r5,188(sp)
  1070bc:	88800007 	ldb	r2,0(r17)
  1070c0:	1000aa26 	beq	r2,zero,10736c <___vfprintf_internal_r+0x3f8>
  1070c4:	8d400044 	addi	r21,r17,1
  1070c8:	8c400047 	ldb	r17,1(r17)
  1070cc:	0021883a 	mov	r16,zero
  1070d0:	00bfffc4 	movi	r2,-1
  1070d4:	0025883a 	mov	r18,zero
  1070d8:	dc002905 	stb	r16,164(sp)
  1070dc:	d8002785 	stb	zero,158(sp)
  1070e0:	d8002b05 	stb	zero,172(sp)
  1070e4:	d8802a15 	stw	r2,168(sp)
  1070e8:	d8003115 	stw	zero,196(sp)
  1070ec:	04c01604 	movi	r19,88
  1070f0:	05800244 	movi	r22,9
  1070f4:	9021883a 	mov	r16,r18
  1070f8:	4039883a 	mov	fp,r8
  1070fc:	ad400044 	addi	r21,r21,1
  107100:	88bff804 	addi	r2,r17,-32
  107104:	98833236 	bltu	r19,r2,107dd0 <___vfprintf_internal_r+0xe5c>
  107108:	100490ba 	slli	r2,r2,2
  10710c:	00c00434 	movhi	r3,16
  107110:	18dc4804 	addi	r3,r3,28960
  107114:	10c5883a 	add	r2,r2,r3
  107118:	10800017 	ldw	r2,0(r2)
  10711c:	1000683a 	jmp	r2
  107120:	00107cc8 	cmpgei	zero,zero,16883
  107124:	00107dd0 	cmplti	zero,zero,16887
  107128:	00107dd0 	cmplti	zero,zero,16887
  10712c:	00107ce8 	cmpgeui	zero,zero,16883
  107130:	00107dd0 	cmplti	zero,zero,16887
  107134:	00107dd0 	cmplti	zero,zero,16887
  107138:	00107dd0 	cmplti	zero,zero,16887
  10713c:	00107dd0 	cmplti	zero,zero,16887
  107140:	00107dd0 	cmplti	zero,zero,16887
  107144:	00107dd0 	cmplti	zero,zero,16887
  107148:	001073d0 	cmplti	zero,zero,16847
  10714c:	00107bd8 	cmpnei	zero,zero,16879
  107150:	00107dd0 	cmplti	zero,zero,16887
  107154:	00107294 	movui	zero,16842
  107158:	001073f4 	movhi	zero,16847
  10715c:	00107dd0 	cmplti	zero,zero,16887
  107160:	00107444 	movi	zero,16849
  107164:	00107450 	cmplti	zero,zero,16849
  107168:	00107450 	cmplti	zero,zero,16849
  10716c:	00107450 	cmplti	zero,zero,16849
  107170:	00107450 	cmplti	zero,zero,16849
  107174:	00107450 	cmplti	zero,zero,16849
  107178:	00107450 	cmplti	zero,zero,16849
  10717c:	00107450 	cmplti	zero,zero,16849
  107180:	00107450 	cmplti	zero,zero,16849
  107184:	00107450 	cmplti	zero,zero,16849
  107188:	00107dd0 	cmplti	zero,zero,16887
  10718c:	00107dd0 	cmplti	zero,zero,16887
  107190:	00107dd0 	cmplti	zero,zero,16887
  107194:	00107dd0 	cmplti	zero,zero,16887
  107198:	00107dd0 	cmplti	zero,zero,16887
  10719c:	00107dd0 	cmplti	zero,zero,16887
  1071a0:	00107dd0 	cmplti	zero,zero,16887
  1071a4:	00107dd0 	cmplti	zero,zero,16887
  1071a8:	00107dd0 	cmplti	zero,zero,16887
  1071ac:	00107dd0 	cmplti	zero,zero,16887
  1071b0:	0010748c 	andi	zero,zero,16850
  1071b4:	00107554 	movui	zero,16853
  1071b8:	00107dd0 	cmplti	zero,zero,16887
  1071bc:	00107554 	movui	zero,16853
  1071c0:	00107dd0 	cmplti	zero,zero,16887
  1071c4:	00107dd0 	cmplti	zero,zero,16887
  1071c8:	00107dd0 	cmplti	zero,zero,16887
  1071cc:	00107dd0 	cmplti	zero,zero,16887
  1071d0:	00107600 	call	10760 <OSCtxSw_SWITCH_PC+0x10720>
  1071d4:	00107dd0 	cmplti	zero,zero,16887
  1071d8:	00107dd0 	cmplti	zero,zero,16887
  1071dc:	0010760c 	andi	zero,zero,16856
  1071e0:	00107dd0 	cmplti	zero,zero,16887
  1071e4:	00107dd0 	cmplti	zero,zero,16887
  1071e8:	00107dd0 	cmplti	zero,zero,16887
  1071ec:	00107dd0 	cmplti	zero,zero,16887
  1071f0:	00107dd0 	cmplti	zero,zero,16887
  1071f4:	00107a90 	cmplti	zero,zero,16874
  1071f8:	00107dd0 	cmplti	zero,zero,16887
  1071fc:	00107dd0 	cmplti	zero,zero,16887
  107200:	00107afc 	xorhi	zero,zero,16875
  107204:	00107dd0 	cmplti	zero,zero,16887
  107208:	00107dd0 	cmplti	zero,zero,16887
  10720c:	00107dd0 	cmplti	zero,zero,16887
  107210:	00107dd0 	cmplti	zero,zero,16887
  107214:	00107dd0 	cmplti	zero,zero,16887
  107218:	00107dd0 	cmplti	zero,zero,16887
  10721c:	00107dd0 	cmplti	zero,zero,16887
  107220:	00107dd0 	cmplti	zero,zero,16887
  107224:	00107dd0 	cmplti	zero,zero,16887
  107228:	00107dd0 	cmplti	zero,zero,16887
  10722c:	00107d74 	movhi	zero,16885
  107230:	00107cf4 	movhi	zero,16883
  107234:	00107554 	movui	zero,16853
  107238:	00107554 	movui	zero,16853
  10723c:	00107554 	movui	zero,16853
  107240:	00107d14 	movui	zero,16884
  107244:	00107cf4 	movhi	zero,16883
  107248:	00107dd0 	cmplti	zero,zero,16887
  10724c:	00107dd0 	cmplti	zero,zero,16887
  107250:	00107d20 	cmpeqi	zero,zero,16884
  107254:	00107dd0 	cmplti	zero,zero,16887
  107258:	00107d34 	movhi	zero,16884
  10725c:	00107bb8 	rdprs	zero,zero,16878
  107260:	001072a0 	cmpeqi	zero,zero,16842
  107264:	00107bf0 	cmpltui	zero,zero,16879
  107268:	00107dd0 	cmplti	zero,zero,16887
  10726c:	00107bfc 	xorhi	zero,zero,16879
  107270:	00107dd0 	cmplti	zero,zero,16887
  107274:	00107c60 	cmpeqi	zero,zero,16881
  107278:	00107dd0 	cmplti	zero,zero,16887
  10727c:	00107dd0 	cmplti	zero,zero,16887
  107280:	00107c80 	call	107c8 <OSCtxSw_SWITCH_PC+0x10788>
  107284:	d8c03117 	ldw	r3,196(sp)
  107288:	d8802e15 	stw	r2,184(sp)
  10728c:	00c7c83a 	sub	r3,zero,r3
  107290:	d8c03115 	stw	r3,196(sp)
  107294:	84000114 	ori	r16,r16,4
  107298:	ac400007 	ldb	r17,0(r21)
  10729c:	003f9706 	br	1070fc <__alt_data_end+0xfffc70fc>
  1072a0:	00800c04 	movi	r2,48
  1072a4:	d8802705 	stb	r2,156(sp)
  1072a8:	00801e04 	movi	r2,120
  1072ac:	d8802745 	stb	r2,157(sp)
  1072b0:	d9002a17 	ldw	r4,168(sp)
  1072b4:	d8802e17 	ldw	r2,184(sp)
  1072b8:	d8002785 	stb	zero,158(sp)
  1072bc:	e011883a 	mov	r8,fp
  1072c0:	10c00104 	addi	r3,r2,4
  1072c4:	14c00017 	ldw	r19,0(r2)
  1072c8:	002d883a 	mov	r22,zero
  1072cc:	80800094 	ori	r2,r16,2
  1072d0:	2002ca16 	blt	r4,zero,107dfc <___vfprintf_internal_r+0xe88>
  1072d4:	00bfdfc4 	movi	r2,-129
  1072d8:	80a4703a 	and	r18,r16,r2
  1072dc:	d8c02e15 	stw	r3,184(sp)
  1072e0:	94800094 	ori	r18,r18,2
  1072e4:	9802b41e 	bne	r19,zero,107db8 <___vfprintf_internal_r+0xe44>
  1072e8:	014004b4 	movhi	r5,18
  1072ec:	294e4b04 	addi	r5,r5,14636
  1072f0:	d9403915 	stw	r5,228(sp)
  1072f4:	04401e04 	movi	r17,120
  1072f8:	d8802a17 	ldw	r2,168(sp)
  1072fc:	0039883a 	mov	fp,zero
  107300:	1001fa26 	beq	r2,zero,107aec <___vfprintf_internal_r+0xb78>
  107304:	0027883a 	mov	r19,zero
  107308:	002d883a 	mov	r22,zero
  10730c:	00021906 	br	107b74 <___vfprintf_internal_r+0xc00>
  107310:	d9002d17 	ldw	r4,180(sp)
  107314:	b80b883a 	mov	r5,r23
  107318:	01093880 	call	109388 <__swsetup_r>
  10731c:	1005dc1e 	bne	r2,zero,108a90 <___vfprintf_internal_r+0x1b1c>
  107320:	b880030b 	ldhu	r2,12(r23)
  107324:	00c00284 	movi	r3,10
  107328:	1080068c 	andi	r2,r2,26
  10732c:	10ff3a1e 	bne	r2,r3,107018 <__alt_data_end+0xfffc7018>
  107330:	b880038f 	ldh	r2,14(r23)
  107334:	103f3816 	blt	r2,zero,107018 <__alt_data_end+0xfffc7018>
  107338:	d9c02e17 	ldw	r7,184(sp)
  10733c:	d9002d17 	ldw	r4,180(sp)
  107340:	a80d883a 	mov	r6,r21
  107344:	b80b883a 	mov	r5,r23
  107348:	010926c0 	call	10926c <__sbprintf>
  10734c:	00001106 	br	107394 <___vfprintf_internal_r+0x420>
  107350:	d9002d17 	ldw	r4,180(sp)
  107354:	d9801e04 	addi	r6,sp,120
  107358:	b80b883a 	mov	r5,r23
  10735c:	01128340 	call	112834 <__sprint_r>
  107360:	1000081e 	bne	r2,zero,107384 <___vfprintf_internal_r+0x410>
  107364:	da000404 	addi	r8,sp,16
  107368:	003f5106 	br	1070b0 <__alt_data_end+0xfffc70b0>
  10736c:	d8802017 	ldw	r2,128(sp)
  107370:	10000426 	beq	r2,zero,107384 <___vfprintf_internal_r+0x410>
  107374:	d9002d17 	ldw	r4,180(sp)
  107378:	d9801e04 	addi	r6,sp,120
  10737c:	b80b883a 	mov	r5,r23
  107380:	01128340 	call	112834 <__sprint_r>
  107384:	b880030b 	ldhu	r2,12(r23)
  107388:	1080100c 	andi	r2,r2,64
  10738c:	1005c01e 	bne	r2,zero,108a90 <___vfprintf_internal_r+0x1b1c>
  107390:	d8802f17 	ldw	r2,188(sp)
  107394:	dfc04717 	ldw	ra,284(sp)
  107398:	df004617 	ldw	fp,280(sp)
  10739c:	ddc04517 	ldw	r23,276(sp)
  1073a0:	dd804417 	ldw	r22,272(sp)
  1073a4:	dd404317 	ldw	r21,268(sp)
  1073a8:	dd004217 	ldw	r20,264(sp)
  1073ac:	dcc04117 	ldw	r19,260(sp)
  1073b0:	dc804017 	ldw	r18,256(sp)
  1073b4:	dc403f17 	ldw	r17,252(sp)
  1073b8:	dc003e17 	ldw	r16,248(sp)
  1073bc:	dec04804 	addi	sp,sp,288
  1073c0:	f800283a 	ret
  1073c4:	d9002d17 	ldw	r4,180(sp)
  1073c8:	0101c500 	call	101c50 <__sinit>
  1073cc:	003f0206 	br	106fd8 <__alt_data_end+0xfffc6fd8>
  1073d0:	d9002e17 	ldw	r4,184(sp)
  1073d4:	d9402e17 	ldw	r5,184(sp)
  1073d8:	21000017 	ldw	r4,0(r4)
  1073dc:	28800104 	addi	r2,r5,4
  1073e0:	d9003115 	stw	r4,196(sp)
  1073e4:	203fa716 	blt	r4,zero,107284 <__alt_data_end+0xfffc7284>
  1073e8:	d8802e15 	stw	r2,184(sp)
  1073ec:	ac400007 	ldb	r17,0(r21)
  1073f0:	003f4206 	br	1070fc <__alt_data_end+0xfffc70fc>
  1073f4:	ac400007 	ldb	r17,0(r21)
  1073f8:	01000a84 	movi	r4,42
  1073fc:	a8c00044 	addi	r3,r21,1
  107400:	89075826 	beq	r17,r4,109164 <___vfprintf_internal_r+0x21f0>
  107404:	8cbff404 	addi	r18,r17,-48
  107408:	b486ae36 	bltu	r22,r18,108ec4 <___vfprintf_internal_r+0x1f50>
  10740c:	0009883a 	mov	r4,zero
  107410:	1823883a 	mov	r17,r3
  107414:	01400284 	movi	r5,10
  107418:	01160740 	call	116074 <__mulsi3>
  10741c:	88c00007 	ldb	r3,0(r17)
  107420:	1489883a 	add	r4,r2,r18
  107424:	8d400044 	addi	r21,r17,1
  107428:	1cbff404 	addi	r18,r3,-48
  10742c:	a823883a 	mov	r17,r21
  107430:	b4bff82e 	bgeu	r22,r18,107414 <__alt_data_end+0xfffc7414>
  107434:	1823883a 	mov	r17,r3
  107438:	2005f616 	blt	r4,zero,108c14 <___vfprintf_internal_r+0x1ca0>
  10743c:	d9002a15 	stw	r4,168(sp)
  107440:	003f2f06 	br	107100 <__alt_data_end+0xfffc7100>
  107444:	84002014 	ori	r16,r16,128
  107448:	ac400007 	ldb	r17,0(r21)
  10744c:	003f2b06 	br	1070fc <__alt_data_end+0xfffc70fc>
  107450:	8cbff404 	addi	r18,r17,-48
  107454:	d8003115 	stw	zero,196(sp)
  107458:	0009883a 	mov	r4,zero
  10745c:	a823883a 	mov	r17,r21
  107460:	01400284 	movi	r5,10
  107464:	01160740 	call	116074 <__mulsi3>
  107468:	88c00007 	ldb	r3,0(r17)
  10746c:	9089883a 	add	r4,r18,r2
  107470:	ad400044 	addi	r21,r21,1
  107474:	1cbff404 	addi	r18,r3,-48
  107478:	a823883a 	mov	r17,r21
  10747c:	b4bff82e 	bgeu	r22,r18,107460 <__alt_data_end+0xfffc7460>
  107480:	1823883a 	mov	r17,r3
  107484:	d9003115 	stw	r4,196(sp)
  107488:	003f1d06 	br	107100 <__alt_data_end+0xfffc7100>
  10748c:	8025883a 	mov	r18,r16
  107490:	dc002903 	ldbu	r16,164(sp)
  107494:	e011883a 	mov	r8,fp
  107498:	84003fcc 	andi	r16,r16,255
  10749c:	8007531e 	bne	r16,zero,1091ec <___vfprintf_internal_r+0x2278>
  1074a0:	94800414 	ori	r18,r18,16
  1074a4:	9080080c 	andi	r2,r18,32
  1074a8:	1003a326 	beq	r2,zero,108338 <___vfprintf_internal_r+0x13c4>
  1074ac:	d9002e17 	ldw	r4,184(sp)
  1074b0:	20800117 	ldw	r2,4(r4)
  1074b4:	24c00017 	ldw	r19,0(r4)
  1074b8:	21000204 	addi	r4,r4,8
  1074bc:	d9002e15 	stw	r4,184(sp)
  1074c0:	102d883a 	mov	r22,r2
  1074c4:	10047316 	blt	r2,zero,108694 <___vfprintf_internal_r+0x1720>
  1074c8:	d9002a17 	ldw	r4,168(sp)
  1074cc:	df002783 	ldbu	fp,158(sp)
  1074d0:	2003e416 	blt	r4,zero,108464 <___vfprintf_internal_r+0x14f0>
  1074d4:	00ffdfc4 	movi	r3,-129
  1074d8:	9d84b03a 	or	r2,r19,r22
  1074dc:	90e4703a 	and	r18,r18,r3
  1074e0:	10018026 	beq	r2,zero,107ae4 <___vfprintf_internal_r+0xb70>
  1074e4:	b003ab26 	beq	r22,zero,108394 <___vfprintf_internal_r+0x1420>
  1074e8:	dc402915 	stw	r17,164(sp)
  1074ec:	dc001e04 	addi	r16,sp,120
  1074f0:	b023883a 	mov	r17,r22
  1074f4:	402d883a 	mov	r22,r8
  1074f8:	9809883a 	mov	r4,r19
  1074fc:	880b883a 	mov	r5,r17
  107500:	01800284 	movi	r6,10
  107504:	000f883a 	mov	r7,zero
  107508:	01158fc0 	call	1158fc <__umoddi3>
  10750c:	10800c04 	addi	r2,r2,48
  107510:	843fffc4 	addi	r16,r16,-1
  107514:	9809883a 	mov	r4,r19
  107518:	880b883a 	mov	r5,r17
  10751c:	80800005 	stb	r2,0(r16)
  107520:	01800284 	movi	r6,10
  107524:	000f883a 	mov	r7,zero
  107528:	01153000 	call	115300 <__udivdi3>
  10752c:	1027883a 	mov	r19,r2
  107530:	10c4b03a 	or	r2,r2,r3
  107534:	1823883a 	mov	r17,r3
  107538:	103fef1e 	bne	r2,zero,1074f8 <__alt_data_end+0xfffc74f8>
  10753c:	d8c02817 	ldw	r3,160(sp)
  107540:	dc402917 	ldw	r17,164(sp)
  107544:	b011883a 	mov	r8,r22
  107548:	1c07c83a 	sub	r3,r3,r16
  10754c:	d8c02b15 	stw	r3,172(sp)
  107550:	00005f06 	br	1076d0 <___vfprintf_internal_r+0x75c>
  107554:	8025883a 	mov	r18,r16
  107558:	dc002903 	ldbu	r16,164(sp)
  10755c:	e011883a 	mov	r8,fp
  107560:	84003fcc 	andi	r16,r16,255
  107564:	80071e1e 	bne	r16,zero,1091e0 <___vfprintf_internal_r+0x226c>
  107568:	9080020c 	andi	r2,r18,8
  10756c:	1004af26 	beq	r2,zero,10882c <___vfprintf_internal_r+0x18b8>
  107570:	d9002e17 	ldw	r4,184(sp)
  107574:	d9402e17 	ldw	r5,184(sp)
  107578:	d8802e17 	ldw	r2,184(sp)
  10757c:	21000017 	ldw	r4,0(r4)
  107580:	29400117 	ldw	r5,4(r5)
  107584:	10800204 	addi	r2,r2,8
  107588:	d9003615 	stw	r4,216(sp)
  10758c:	d9403815 	stw	r5,224(sp)
  107590:	d8802e15 	stw	r2,184(sp)
  107594:	d9003617 	ldw	r4,216(sp)
  107598:	d9403817 	ldw	r5,224(sp)
  10759c:	da003d15 	stw	r8,244(sp)
  1075a0:	04000044 	movi	r16,1
  1075a4:	010d7ac0 	call	10d7ac <__fpclassifyd>
  1075a8:	da003d17 	ldw	r8,244(sp)
  1075ac:	1404441e 	bne	r2,r16,1086c0 <___vfprintf_internal_r+0x174c>
  1075b0:	d9003617 	ldw	r4,216(sp)
  1075b4:	d9403817 	ldw	r5,224(sp)
  1075b8:	000d883a 	mov	r6,zero
  1075bc:	000f883a 	mov	r7,zero
  1075c0:	01176780 	call	117678 <__ledf2>
  1075c4:	da003d17 	ldw	r8,244(sp)
  1075c8:	1005e316 	blt	r2,zero,108d58 <___vfprintf_internal_r+0x1de4>
  1075cc:	df002783 	ldbu	fp,158(sp)
  1075d0:	008011c4 	movi	r2,71
  1075d4:	1445580e 	bge	r2,r17,108b38 <___vfprintf_internal_r+0x1bc4>
  1075d8:	040004b4 	movhi	r16,18
  1075dc:	840e4304 	addi	r16,r16,14604
  1075e0:	00c000c4 	movi	r3,3
  1075e4:	00bfdfc4 	movi	r2,-129
  1075e8:	d8c02915 	stw	r3,164(sp)
  1075ec:	90a4703a 	and	r18,r18,r2
  1075f0:	d8c02b15 	stw	r3,172(sp)
  1075f4:	d8002a15 	stw	zero,168(sp)
  1075f8:	d8003215 	stw	zero,200(sp)
  1075fc:	00003a06 	br	1076e8 <___vfprintf_internal_r+0x774>
  107600:	84000214 	ori	r16,r16,8
  107604:	ac400007 	ldb	r17,0(r21)
  107608:	003ebc06 	br	1070fc <__alt_data_end+0xfffc70fc>
  10760c:	8025883a 	mov	r18,r16
  107610:	dc002903 	ldbu	r16,164(sp)
  107614:	e011883a 	mov	r8,fp
  107618:	84003fcc 	andi	r16,r16,255
  10761c:	8007001e 	bne	r16,zero,109220 <___vfprintf_internal_r+0x22ac>
  107620:	94800414 	ori	r18,r18,16
  107624:	9080080c 	andi	r2,r18,32
  107628:	1002fa26 	beq	r2,zero,108214 <___vfprintf_internal_r+0x12a0>
  10762c:	d9002e17 	ldw	r4,184(sp)
  107630:	d9402a17 	ldw	r5,168(sp)
  107634:	d8002785 	stb	zero,158(sp)
  107638:	20800204 	addi	r2,r4,8
  10763c:	24c00017 	ldw	r19,0(r4)
  107640:	25800117 	ldw	r22,4(r4)
  107644:	2804b116 	blt	r5,zero,10890c <___vfprintf_internal_r+0x1998>
  107648:	013fdfc4 	movi	r4,-129
  10764c:	9d86b03a 	or	r3,r19,r22
  107650:	d8802e15 	stw	r2,184(sp)
  107654:	9124703a 	and	r18,r18,r4
  107658:	1802fb1e 	bne	r3,zero,108248 <___vfprintf_internal_r+0x12d4>
  10765c:	d8c02a17 	ldw	r3,168(sp)
  107660:	0039883a 	mov	fp,zero
  107664:	1805e526 	beq	r3,zero,108dfc <___vfprintf_internal_r+0x1e88>
  107668:	0027883a 	mov	r19,zero
  10766c:	002d883a 	mov	r22,zero
  107670:	dc001e04 	addi	r16,sp,120
  107674:	9806d0fa 	srli	r3,r19,3
  107678:	b008977a 	slli	r4,r22,29
  10767c:	b02cd0fa 	srli	r22,r22,3
  107680:	9cc001cc 	andi	r19,r19,7
  107684:	98800c04 	addi	r2,r19,48
  107688:	843fffc4 	addi	r16,r16,-1
  10768c:	20e6b03a 	or	r19,r4,r3
  107690:	80800005 	stb	r2,0(r16)
  107694:	9d86b03a 	or	r3,r19,r22
  107698:	183ff61e 	bne	r3,zero,107674 <__alt_data_end+0xfffc7674>
  10769c:	90c0004c 	andi	r3,r18,1
  1076a0:	18014126 	beq	r3,zero,107ba8 <___vfprintf_internal_r+0xc34>
  1076a4:	10803fcc 	andi	r2,r2,255
  1076a8:	1080201c 	xori	r2,r2,128
  1076ac:	10bfe004 	addi	r2,r2,-128
  1076b0:	00c00c04 	movi	r3,48
  1076b4:	10c13c26 	beq	r2,r3,107ba8 <___vfprintf_internal_r+0xc34>
  1076b8:	80ffffc5 	stb	r3,-1(r16)
  1076bc:	d8c02817 	ldw	r3,160(sp)
  1076c0:	80bfffc4 	addi	r2,r16,-1
  1076c4:	1021883a 	mov	r16,r2
  1076c8:	1887c83a 	sub	r3,r3,r2
  1076cc:	d8c02b15 	stw	r3,172(sp)
  1076d0:	d8802b17 	ldw	r2,172(sp)
  1076d4:	d9002a17 	ldw	r4,168(sp)
  1076d8:	1100010e 	bge	r2,r4,1076e0 <___vfprintf_internal_r+0x76c>
  1076dc:	2005883a 	mov	r2,r4
  1076e0:	d8802915 	stw	r2,164(sp)
  1076e4:	d8003215 	stw	zero,200(sp)
  1076e8:	e7003fcc 	andi	fp,fp,255
  1076ec:	e700201c 	xori	fp,fp,128
  1076f0:	e73fe004 	addi	fp,fp,-128
  1076f4:	e0000326 	beq	fp,zero,107704 <___vfprintf_internal_r+0x790>
  1076f8:	d8c02917 	ldw	r3,164(sp)
  1076fc:	18c00044 	addi	r3,r3,1
  107700:	d8c02915 	stw	r3,164(sp)
  107704:	90c0008c 	andi	r3,r18,2
  107708:	d8c02c15 	stw	r3,176(sp)
  10770c:	18000326 	beq	r3,zero,10771c <___vfprintf_internal_r+0x7a8>
  107710:	d8c02917 	ldw	r3,164(sp)
  107714:	18c00084 	addi	r3,r3,2
  107718:	d8c02915 	stw	r3,164(sp)
  10771c:	90c0210c 	andi	r3,r18,132
  107720:	d8c03015 	stw	r3,192(sp)
  107724:	1801c51e 	bne	r3,zero,107e3c <___vfprintf_internal_r+0xec8>
  107728:	d9003117 	ldw	r4,196(sp)
  10772c:	d8c02917 	ldw	r3,164(sp)
  107730:	20e7c83a 	sub	r19,r4,r3
  107734:	04c1c10e 	bge	zero,r19,107e3c <___vfprintf_internal_r+0xec8>
  107738:	02400404 	movi	r9,16
  10773c:	d8c02017 	ldw	r3,128(sp)
  107740:	d8801f17 	ldw	r2,124(sp)
  107744:	4cc52f0e 	bge	r9,r19,108c04 <___vfprintf_internal_r+0x1c90>
  107748:	014004b4 	movhi	r5,18
  10774c:	294e6904 	addi	r5,r5,14756
  107750:	dc403b15 	stw	r17,236(sp)
  107754:	d9403515 	stw	r5,212(sp)
  107758:	9823883a 	mov	r17,r19
  10775c:	482d883a 	mov	r22,r9
  107760:	9027883a 	mov	r19,r18
  107764:	070001c4 	movi	fp,7
  107768:	8025883a 	mov	r18,r16
  10776c:	dc002d17 	ldw	r16,180(sp)
  107770:	00000306 	br	107780 <___vfprintf_internal_r+0x80c>
  107774:	8c7ffc04 	addi	r17,r17,-16
  107778:	42000204 	addi	r8,r8,8
  10777c:	b440130e 	bge	r22,r17,1077cc <___vfprintf_internal_r+0x858>
  107780:	010004b4 	movhi	r4,18
  107784:	18c00404 	addi	r3,r3,16
  107788:	10800044 	addi	r2,r2,1
  10778c:	210e6904 	addi	r4,r4,14756
  107790:	41000015 	stw	r4,0(r8)
  107794:	45800115 	stw	r22,4(r8)
  107798:	d8c02015 	stw	r3,128(sp)
  10779c:	d8801f15 	stw	r2,124(sp)
  1077a0:	e0bff40e 	bge	fp,r2,107774 <__alt_data_end+0xfffc7774>
  1077a4:	d9801e04 	addi	r6,sp,120
  1077a8:	b80b883a 	mov	r5,r23
  1077ac:	8009883a 	mov	r4,r16
  1077b0:	01128340 	call	112834 <__sprint_r>
  1077b4:	103ef31e 	bne	r2,zero,107384 <__alt_data_end+0xfffc7384>
  1077b8:	8c7ffc04 	addi	r17,r17,-16
  1077bc:	d8c02017 	ldw	r3,128(sp)
  1077c0:	d8801f17 	ldw	r2,124(sp)
  1077c4:	da000404 	addi	r8,sp,16
  1077c8:	b47fed16 	blt	r22,r17,107780 <__alt_data_end+0xfffc7780>
  1077cc:	9021883a 	mov	r16,r18
  1077d0:	9825883a 	mov	r18,r19
  1077d4:	8827883a 	mov	r19,r17
  1077d8:	dc403b17 	ldw	r17,236(sp)
  1077dc:	d9403517 	ldw	r5,212(sp)
  1077e0:	98c7883a 	add	r3,r19,r3
  1077e4:	10800044 	addi	r2,r2,1
  1077e8:	41400015 	stw	r5,0(r8)
  1077ec:	44c00115 	stw	r19,4(r8)
  1077f0:	d8c02015 	stw	r3,128(sp)
  1077f4:	d8801f15 	stw	r2,124(sp)
  1077f8:	010001c4 	movi	r4,7
  1077fc:	2082c516 	blt	r4,r2,108314 <___vfprintf_internal_r+0x13a0>
  107800:	df002787 	ldb	fp,158(sp)
  107804:	42000204 	addi	r8,r8,8
  107808:	e0000c26 	beq	fp,zero,10783c <___vfprintf_internal_r+0x8c8>
  10780c:	d8801f17 	ldw	r2,124(sp)
  107810:	d9002784 	addi	r4,sp,158
  107814:	18c00044 	addi	r3,r3,1
  107818:	10800044 	addi	r2,r2,1
  10781c:	41000015 	stw	r4,0(r8)
  107820:	01000044 	movi	r4,1
  107824:	41000115 	stw	r4,4(r8)
  107828:	d8c02015 	stw	r3,128(sp)
  10782c:	d8801f15 	stw	r2,124(sp)
  107830:	010001c4 	movi	r4,7
  107834:	20825e16 	blt	r4,r2,1081b0 <___vfprintf_internal_r+0x123c>
  107838:	42000204 	addi	r8,r8,8
  10783c:	d8802c17 	ldw	r2,176(sp)
  107840:	10000c26 	beq	r2,zero,107874 <___vfprintf_internal_r+0x900>
  107844:	d8801f17 	ldw	r2,124(sp)
  107848:	d9002704 	addi	r4,sp,156
  10784c:	18c00084 	addi	r3,r3,2
  107850:	10800044 	addi	r2,r2,1
  107854:	41000015 	stw	r4,0(r8)
  107858:	01000084 	movi	r4,2
  10785c:	41000115 	stw	r4,4(r8)
  107860:	d8c02015 	stw	r3,128(sp)
  107864:	d8801f15 	stw	r2,124(sp)
  107868:	010001c4 	movi	r4,7
  10786c:	20825816 	blt	r4,r2,1081d0 <___vfprintf_internal_r+0x125c>
  107870:	42000204 	addi	r8,r8,8
  107874:	d9003017 	ldw	r4,192(sp)
  107878:	00802004 	movi	r2,128
  10787c:	2081bb26 	beq	r4,r2,107f6c <___vfprintf_internal_r+0xff8>
  107880:	d9402a17 	ldw	r5,168(sp)
  107884:	d8802b17 	ldw	r2,172(sp)
  107888:	28adc83a 	sub	r22,r5,r2
  10788c:	0580310e 	bge	zero,r22,107954 <___vfprintf_internal_r+0x9e0>
  107890:	07000404 	movi	fp,16
  107894:	d8801f17 	ldw	r2,124(sp)
  107898:	e584360e 	bge	fp,r22,108974 <___vfprintf_internal_r+0x1a00>
  10789c:	014004b4 	movhi	r5,18
  1078a0:	294e6504 	addi	r5,r5,14740
  1078a4:	dc402a15 	stw	r17,168(sp)
  1078a8:	d9402c15 	stw	r5,176(sp)
  1078ac:	b023883a 	mov	r17,r22
  1078b0:	04c001c4 	movi	r19,7
  1078b4:	a82d883a 	mov	r22,r21
  1078b8:	902b883a 	mov	r21,r18
  1078bc:	8025883a 	mov	r18,r16
  1078c0:	dc002d17 	ldw	r16,180(sp)
  1078c4:	00000306 	br	1078d4 <___vfprintf_internal_r+0x960>
  1078c8:	8c7ffc04 	addi	r17,r17,-16
  1078cc:	42000204 	addi	r8,r8,8
  1078d0:	e440110e 	bge	fp,r17,107918 <___vfprintf_internal_r+0x9a4>
  1078d4:	18c00404 	addi	r3,r3,16
  1078d8:	10800044 	addi	r2,r2,1
  1078dc:	45000015 	stw	r20,0(r8)
  1078e0:	47000115 	stw	fp,4(r8)
  1078e4:	d8c02015 	stw	r3,128(sp)
  1078e8:	d8801f15 	stw	r2,124(sp)
  1078ec:	98bff60e 	bge	r19,r2,1078c8 <__alt_data_end+0xfffc78c8>
  1078f0:	d9801e04 	addi	r6,sp,120
  1078f4:	b80b883a 	mov	r5,r23
  1078f8:	8009883a 	mov	r4,r16
  1078fc:	01128340 	call	112834 <__sprint_r>
  107900:	103ea01e 	bne	r2,zero,107384 <__alt_data_end+0xfffc7384>
  107904:	8c7ffc04 	addi	r17,r17,-16
  107908:	d8c02017 	ldw	r3,128(sp)
  10790c:	d8801f17 	ldw	r2,124(sp)
  107910:	da000404 	addi	r8,sp,16
  107914:	e47fef16 	blt	fp,r17,1078d4 <__alt_data_end+0xfffc78d4>
  107918:	9021883a 	mov	r16,r18
  10791c:	a825883a 	mov	r18,r21
  107920:	b02b883a 	mov	r21,r22
  107924:	882d883a 	mov	r22,r17
  107928:	dc402a17 	ldw	r17,168(sp)
  10792c:	d9002c17 	ldw	r4,176(sp)
  107930:	1d87883a 	add	r3,r3,r22
  107934:	10800044 	addi	r2,r2,1
  107938:	41000015 	stw	r4,0(r8)
  10793c:	45800115 	stw	r22,4(r8)
  107940:	d8c02015 	stw	r3,128(sp)
  107944:	d8801f15 	stw	r2,124(sp)
  107948:	010001c4 	movi	r4,7
  10794c:	20821016 	blt	r4,r2,108190 <___vfprintf_internal_r+0x121c>
  107950:	42000204 	addi	r8,r8,8
  107954:	9080400c 	andi	r2,r18,256
  107958:	10013a1e 	bne	r2,zero,107e44 <___vfprintf_internal_r+0xed0>
  10795c:	d9402b17 	ldw	r5,172(sp)
  107960:	d8801f17 	ldw	r2,124(sp)
  107964:	44000015 	stw	r16,0(r8)
  107968:	1947883a 	add	r3,r3,r5
  10796c:	10800044 	addi	r2,r2,1
  107970:	41400115 	stw	r5,4(r8)
  107974:	d8c02015 	stw	r3,128(sp)
  107978:	d8801f15 	stw	r2,124(sp)
  10797c:	010001c4 	movi	r4,7
  107980:	2081f516 	blt	r4,r2,108158 <___vfprintf_internal_r+0x11e4>
  107984:	42000204 	addi	r8,r8,8
  107988:	9480010c 	andi	r18,r18,4
  10798c:	90003226 	beq	r18,zero,107a58 <___vfprintf_internal_r+0xae4>
  107990:	d9403117 	ldw	r5,196(sp)
  107994:	d8802917 	ldw	r2,164(sp)
  107998:	28a1c83a 	sub	r16,r5,r2
  10799c:	04002e0e 	bge	zero,r16,107a58 <___vfprintf_internal_r+0xae4>
  1079a0:	04400404 	movi	r17,16
  1079a4:	d8801f17 	ldw	r2,124(sp)
  1079a8:	8c04c40e 	bge	r17,r16,108cbc <___vfprintf_internal_r+0x1d48>
  1079ac:	014004b4 	movhi	r5,18
  1079b0:	294e6904 	addi	r5,r5,14756
  1079b4:	d9403515 	stw	r5,212(sp)
  1079b8:	048001c4 	movi	r18,7
  1079bc:	dcc02d17 	ldw	r19,180(sp)
  1079c0:	00000306 	br	1079d0 <___vfprintf_internal_r+0xa5c>
  1079c4:	843ffc04 	addi	r16,r16,-16
  1079c8:	42000204 	addi	r8,r8,8
  1079cc:	8c00130e 	bge	r17,r16,107a1c <___vfprintf_internal_r+0xaa8>
  1079d0:	010004b4 	movhi	r4,18
  1079d4:	18c00404 	addi	r3,r3,16
  1079d8:	10800044 	addi	r2,r2,1
  1079dc:	210e6904 	addi	r4,r4,14756
  1079e0:	41000015 	stw	r4,0(r8)
  1079e4:	44400115 	stw	r17,4(r8)
  1079e8:	d8c02015 	stw	r3,128(sp)
  1079ec:	d8801f15 	stw	r2,124(sp)
  1079f0:	90bff40e 	bge	r18,r2,1079c4 <__alt_data_end+0xfffc79c4>
  1079f4:	d9801e04 	addi	r6,sp,120
  1079f8:	b80b883a 	mov	r5,r23
  1079fc:	9809883a 	mov	r4,r19
  107a00:	01128340 	call	112834 <__sprint_r>
  107a04:	103e5f1e 	bne	r2,zero,107384 <__alt_data_end+0xfffc7384>
  107a08:	843ffc04 	addi	r16,r16,-16
  107a0c:	d8c02017 	ldw	r3,128(sp)
  107a10:	d8801f17 	ldw	r2,124(sp)
  107a14:	da000404 	addi	r8,sp,16
  107a18:	8c3fed16 	blt	r17,r16,1079d0 <__alt_data_end+0xfffc79d0>
  107a1c:	d9403517 	ldw	r5,212(sp)
  107a20:	1c07883a 	add	r3,r3,r16
  107a24:	10800044 	addi	r2,r2,1
  107a28:	41400015 	stw	r5,0(r8)
  107a2c:	44000115 	stw	r16,4(r8)
  107a30:	d8c02015 	stw	r3,128(sp)
  107a34:	d8801f15 	stw	r2,124(sp)
  107a38:	010001c4 	movi	r4,7
  107a3c:	2080060e 	bge	r4,r2,107a58 <___vfprintf_internal_r+0xae4>
  107a40:	d9002d17 	ldw	r4,180(sp)
  107a44:	d9801e04 	addi	r6,sp,120
  107a48:	b80b883a 	mov	r5,r23
  107a4c:	01128340 	call	112834 <__sprint_r>
  107a50:	103e4c1e 	bne	r2,zero,107384 <__alt_data_end+0xfffc7384>
  107a54:	d8c02017 	ldw	r3,128(sp)
  107a58:	d8803117 	ldw	r2,196(sp)
  107a5c:	d9002917 	ldw	r4,164(sp)
  107a60:	1100010e 	bge	r2,r4,107a68 <___vfprintf_internal_r+0xaf4>
  107a64:	2005883a 	mov	r2,r4
  107a68:	d9402f17 	ldw	r5,188(sp)
  107a6c:	288b883a 	add	r5,r5,r2
  107a70:	d9402f15 	stw	r5,188(sp)
  107a74:	1801c01e 	bne	r3,zero,108178 <___vfprintf_internal_r+0x1204>
  107a78:	a8800007 	ldb	r2,0(r21)
  107a7c:	d8001f15 	stw	zero,124(sp)
  107a80:	da000404 	addi	r8,sp,16
  107a84:	103d751e 	bne	r2,zero,10705c <__alt_data_end+0xfffc705c>
  107a88:	a823883a 	mov	r17,r21
  107a8c:	003d8b06 	br	1070bc <__alt_data_end+0xfffc70bc>
  107a90:	8025883a 	mov	r18,r16
  107a94:	dc002903 	ldbu	r16,164(sp)
  107a98:	e011883a 	mov	r8,fp
  107a9c:	84003fcc 	andi	r16,r16,255
  107aa0:	8005e51e 	bne	r16,zero,109238 <___vfprintf_internal_r+0x22c4>
  107aa4:	94800414 	ori	r18,r18,16
  107aa8:	9080080c 	andi	r2,r18,32
  107aac:	10022b26 	beq	r2,zero,10835c <___vfprintf_internal_r+0x13e8>
  107ab0:	d9002e17 	ldw	r4,184(sp)
  107ab4:	d9402a17 	ldw	r5,168(sp)
  107ab8:	d8002785 	stb	zero,158(sp)
  107abc:	20c00204 	addi	r3,r4,8
  107ac0:	24c00017 	ldw	r19,0(r4)
  107ac4:	25800117 	ldw	r22,4(r4)
  107ac8:	28042e16 	blt	r5,zero,108b84 <___vfprintf_internal_r+0x1c10>
  107acc:	013fdfc4 	movi	r4,-129
  107ad0:	9d84b03a 	or	r2,r19,r22
  107ad4:	d8c02e15 	stw	r3,184(sp)
  107ad8:	9124703a 	and	r18,r18,r4
  107adc:	0039883a 	mov	fp,zero
  107ae0:	103e801e 	bne	r2,zero,1074e4 <__alt_data_end+0xfffc74e4>
  107ae4:	d9002a17 	ldw	r4,168(sp)
  107ae8:	2002e01e 	bne	r4,zero,10866c <___vfprintf_internal_r+0x16f8>
  107aec:	d8002a15 	stw	zero,168(sp)
  107af0:	d8002b15 	stw	zero,172(sp)
  107af4:	dc001e04 	addi	r16,sp,120
  107af8:	003ef506 	br	1076d0 <__alt_data_end+0xfffc76d0>
  107afc:	8025883a 	mov	r18,r16
  107b00:	dc002903 	ldbu	r16,164(sp)
  107b04:	e011883a 	mov	r8,fp
  107b08:	84003fcc 	andi	r16,r16,255
  107b0c:	8005ba1e 	bne	r16,zero,1091f8 <___vfprintf_internal_r+0x2284>
  107b10:	010004b4 	movhi	r4,18
  107b14:	210e4604 	addi	r4,r4,14616
  107b18:	d9003915 	stw	r4,228(sp)
  107b1c:	9080080c 	andi	r2,r18,32
  107b20:	10006126 	beq	r2,zero,107ca8 <___vfprintf_internal_r+0xd34>
  107b24:	d9402e17 	ldw	r5,184(sp)
  107b28:	2cc00017 	ldw	r19,0(r5)
  107b2c:	2d800117 	ldw	r22,4(r5)
  107b30:	29400204 	addi	r5,r5,8
  107b34:	d9402e15 	stw	r5,184(sp)
  107b38:	9080004c 	andi	r2,r18,1
  107b3c:	1001ac26 	beq	r2,zero,1081f0 <___vfprintf_internal_r+0x127c>
  107b40:	9d84b03a 	or	r2,r19,r22
  107b44:	10038526 	beq	r2,zero,10895c <___vfprintf_internal_r+0x19e8>
  107b48:	d8c02a17 	ldw	r3,168(sp)
  107b4c:	00800c04 	movi	r2,48
  107b50:	d8802705 	stb	r2,156(sp)
  107b54:	dc402745 	stb	r17,157(sp)
  107b58:	d8002785 	stb	zero,158(sp)
  107b5c:	90800094 	ori	r2,r18,2
  107b60:	18047916 	blt	r3,zero,108d48 <___vfprintf_internal_r+0x1dd4>
  107b64:	00bfdfc4 	movi	r2,-129
  107b68:	90a4703a 	and	r18,r18,r2
  107b6c:	94800094 	ori	r18,r18,2
  107b70:	0039883a 	mov	fp,zero
  107b74:	d9003917 	ldw	r4,228(sp)
  107b78:	dc001e04 	addi	r16,sp,120
  107b7c:	988003cc 	andi	r2,r19,15
  107b80:	b006973a 	slli	r3,r22,28
  107b84:	2085883a 	add	r2,r4,r2
  107b88:	9826d13a 	srli	r19,r19,4
  107b8c:	10800003 	ldbu	r2,0(r2)
  107b90:	b02cd13a 	srli	r22,r22,4
  107b94:	843fffc4 	addi	r16,r16,-1
  107b98:	1ce6b03a 	or	r19,r3,r19
  107b9c:	80800005 	stb	r2,0(r16)
  107ba0:	9d84b03a 	or	r2,r19,r22
  107ba4:	103ff51e 	bne	r2,zero,107b7c <__alt_data_end+0xfffc7b7c>
  107ba8:	d8c02817 	ldw	r3,160(sp)
  107bac:	1c07c83a 	sub	r3,r3,r16
  107bb0:	d8c02b15 	stw	r3,172(sp)
  107bb4:	003ec606 	br	1076d0 <__alt_data_end+0xfffc76d0>
  107bb8:	8025883a 	mov	r18,r16
  107bbc:	dc002903 	ldbu	r16,164(sp)
  107bc0:	e011883a 	mov	r8,fp
  107bc4:	84003fcc 	andi	r16,r16,255
  107bc8:	803e9626 	beq	r16,zero,107624 <__alt_data_end+0xfffc7624>
  107bcc:	d8c02b03 	ldbu	r3,172(sp)
  107bd0:	d8c02785 	stb	r3,158(sp)
  107bd4:	003e9306 	br	107624 <__alt_data_end+0xfffc7624>
  107bd8:	00c00044 	movi	r3,1
  107bdc:	d8c02905 	stb	r3,164(sp)
  107be0:	00c00ac4 	movi	r3,43
  107be4:	d8c02b05 	stb	r3,172(sp)
  107be8:	ac400007 	ldb	r17,0(r21)
  107bec:	003d4306 	br	1070fc <__alt_data_end+0xfffc70fc>
  107bf0:	84000814 	ori	r16,r16,32
  107bf4:	ac400007 	ldb	r17,0(r21)
  107bf8:	003d4006 	br	1070fc <__alt_data_end+0xfffc70fc>
  107bfc:	d8802e17 	ldw	r2,184(sp)
  107c00:	8025883a 	mov	r18,r16
  107c04:	d8002785 	stb	zero,158(sp)
  107c08:	14000017 	ldw	r16,0(r2)
  107c0c:	e011883a 	mov	r8,fp
  107c10:	14c00104 	addi	r19,r2,4
  107c14:	80042d26 	beq	r16,zero,108ccc <___vfprintf_internal_r+0x1d58>
  107c18:	d8c02a17 	ldw	r3,168(sp)
  107c1c:	1803e416 	blt	r3,zero,108bb0 <___vfprintf_internal_r+0x1c3c>
  107c20:	180d883a 	mov	r6,r3
  107c24:	000b883a 	mov	r5,zero
  107c28:	8009883a 	mov	r4,r16
  107c2c:	df003d15 	stw	fp,244(sp)
  107c30:	01026340 	call	102634 <memchr>
  107c34:	da003d17 	ldw	r8,244(sp)
  107c38:	10046826 	beq	r2,zero,108ddc <___vfprintf_internal_r+0x1e68>
  107c3c:	1405c83a 	sub	r2,r2,r16
  107c40:	d8802b15 	stw	r2,172(sp)
  107c44:	1003e016 	blt	r2,zero,108bc8 <___vfprintf_internal_r+0x1c54>
  107c48:	df002783 	ldbu	fp,158(sp)
  107c4c:	d8802915 	stw	r2,164(sp)
  107c50:	dcc02e15 	stw	r19,184(sp)
  107c54:	d8002a15 	stw	zero,168(sp)
  107c58:	d8003215 	stw	zero,200(sp)
  107c5c:	003ea206 	br	1076e8 <__alt_data_end+0xfffc76e8>
  107c60:	8025883a 	mov	r18,r16
  107c64:	dc002903 	ldbu	r16,164(sp)
  107c68:	e011883a 	mov	r8,fp
  107c6c:	84003fcc 	andi	r16,r16,255
  107c70:	803f8d26 	beq	r16,zero,107aa8 <__alt_data_end+0xfffc7aa8>
  107c74:	d8c02b03 	ldbu	r3,172(sp)
  107c78:	d8c02785 	stb	r3,158(sp)
  107c7c:	003f8a06 	br	107aa8 <__alt_data_end+0xfffc7aa8>
  107c80:	8025883a 	mov	r18,r16
  107c84:	dc002903 	ldbu	r16,164(sp)
  107c88:	e011883a 	mov	r8,fp
  107c8c:	84003fcc 	andi	r16,r16,255
  107c90:	8005661e 	bne	r16,zero,10922c <___vfprintf_internal_r+0x22b8>
  107c94:	010004b4 	movhi	r4,18
  107c98:	210e4b04 	addi	r4,r4,14636
  107c9c:	d9003915 	stw	r4,228(sp)
  107ca0:	9080080c 	andi	r2,r18,32
  107ca4:	103f9f1e 	bne	r2,zero,107b24 <__alt_data_end+0xfffc7b24>
  107ca8:	9080040c 	andi	r2,r18,16
  107cac:	1002eb26 	beq	r2,zero,10885c <___vfprintf_internal_r+0x18e8>
  107cb0:	d8802e17 	ldw	r2,184(sp)
  107cb4:	002d883a 	mov	r22,zero
  107cb8:	14c00017 	ldw	r19,0(r2)
  107cbc:	10800104 	addi	r2,r2,4
  107cc0:	d8802e15 	stw	r2,184(sp)
  107cc4:	003f9c06 	br	107b38 <__alt_data_end+0xfffc7b38>
  107cc8:	d8802b07 	ldb	r2,172(sp)
  107ccc:	1002e11e 	bne	r2,zero,108854 <___vfprintf_internal_r+0x18e0>
  107cd0:	00c00044 	movi	r3,1
  107cd4:	d8c02905 	stb	r3,164(sp)
  107cd8:	00c00804 	movi	r3,32
  107cdc:	d8c02b05 	stb	r3,172(sp)
  107ce0:	ac400007 	ldb	r17,0(r21)
  107ce4:	003d0506 	br	1070fc <__alt_data_end+0xfffc70fc>
  107ce8:	84000054 	ori	r16,r16,1
  107cec:	ac400007 	ldb	r17,0(r21)
  107cf0:	003d0206 	br	1070fc <__alt_data_end+0xfffc70fc>
  107cf4:	8025883a 	mov	r18,r16
  107cf8:	dc002903 	ldbu	r16,164(sp)
  107cfc:	e011883a 	mov	r8,fp
  107d00:	84003fcc 	andi	r16,r16,255
  107d04:	803de726 	beq	r16,zero,1074a4 <__alt_data_end+0xfffc74a4>
  107d08:	d8c02b03 	ldbu	r3,172(sp)
  107d0c:	d8c02785 	stb	r3,158(sp)
  107d10:	003de406 	br	1074a4 <__alt_data_end+0xfffc74a4>
  107d14:	84001014 	ori	r16,r16,64
  107d18:	ac400007 	ldb	r17,0(r21)
  107d1c:	003cf706 	br	1070fc <__alt_data_end+0xfffc70fc>
  107d20:	ac400007 	ldb	r17,0(r21)
  107d24:	00801b04 	movi	r2,108
  107d28:	88838f26 	beq	r17,r2,108b68 <___vfprintf_internal_r+0x1bf4>
  107d2c:	84000414 	ori	r16,r16,16
  107d30:	003cf206 	br	1070fc <__alt_data_end+0xfffc70fc>
  107d34:	8025883a 	mov	r18,r16
  107d38:	dc002903 	ldbu	r16,164(sp)
  107d3c:	e011883a 	mov	r8,fp
  107d40:	84003fcc 	andi	r16,r16,255
  107d44:	80053f1e 	bne	r16,zero,109244 <___vfprintf_internal_r+0x22d0>
  107d48:	9080080c 	andi	r2,r18,32
  107d4c:	1002d226 	beq	r2,zero,108898 <___vfprintf_internal_r+0x1924>
  107d50:	d9002e17 	ldw	r4,184(sp)
  107d54:	d9402f17 	ldw	r5,188(sp)
  107d58:	20800017 	ldw	r2,0(r4)
  107d5c:	2807d7fa 	srai	r3,r5,31
  107d60:	21000104 	addi	r4,r4,4
  107d64:	d9002e15 	stw	r4,184(sp)
  107d68:	11400015 	stw	r5,0(r2)
  107d6c:	10c00115 	stw	r3,4(r2)
  107d70:	003cb806 	br	107054 <__alt_data_end+0xfffc7054>
  107d74:	d8c02e17 	ldw	r3,184(sp)
  107d78:	d9002e17 	ldw	r4,184(sp)
  107d7c:	8025883a 	mov	r18,r16
  107d80:	18800017 	ldw	r2,0(r3)
  107d84:	21000104 	addi	r4,r4,4
  107d88:	00c00044 	movi	r3,1
  107d8c:	e011883a 	mov	r8,fp
  107d90:	d8c02915 	stw	r3,164(sp)
  107d94:	d8002785 	stb	zero,158(sp)
  107d98:	d8801405 	stb	r2,80(sp)
  107d9c:	d9002e15 	stw	r4,184(sp)
  107da0:	d8c02b15 	stw	r3,172(sp)
  107da4:	d8002a15 	stw	zero,168(sp)
  107da8:	d8003215 	stw	zero,200(sp)
  107dac:	dc001404 	addi	r16,sp,80
  107db0:	0039883a 	mov	fp,zero
  107db4:	003e5306 	br	107704 <__alt_data_end+0xfffc7704>
  107db8:	010004b4 	movhi	r4,18
  107dbc:	210e4b04 	addi	r4,r4,14636
  107dc0:	0039883a 	mov	fp,zero
  107dc4:	d9003915 	stw	r4,228(sp)
  107dc8:	04401e04 	movi	r17,120
  107dcc:	003f6906 	br	107b74 <__alt_data_end+0xfffc7b74>
  107dd0:	8025883a 	mov	r18,r16
  107dd4:	dc002903 	ldbu	r16,164(sp)
  107dd8:	e011883a 	mov	r8,fp
  107ddc:	84003fcc 	andi	r16,r16,255
  107de0:	8005081e 	bne	r16,zero,109204 <___vfprintf_internal_r+0x2290>
  107de4:	883d6126 	beq	r17,zero,10736c <__alt_data_end+0xfffc736c>
  107de8:	00c00044 	movi	r3,1
  107dec:	d8c02915 	stw	r3,164(sp)
  107df0:	dc401405 	stb	r17,80(sp)
  107df4:	d8002785 	stb	zero,158(sp)
  107df8:	003fe906 	br	107da0 <__alt_data_end+0xfffc7da0>
  107dfc:	014004b4 	movhi	r5,18
  107e00:	294e4b04 	addi	r5,r5,14636
  107e04:	d9403915 	stw	r5,228(sp)
  107e08:	d8c02e15 	stw	r3,184(sp)
  107e0c:	1025883a 	mov	r18,r2
  107e10:	04401e04 	movi	r17,120
  107e14:	9d84b03a 	or	r2,r19,r22
  107e18:	1000fc1e 	bne	r2,zero,10820c <___vfprintf_internal_r+0x1298>
  107e1c:	0039883a 	mov	fp,zero
  107e20:	00800084 	movi	r2,2
  107e24:	10803fcc 	andi	r2,r2,255
  107e28:	00c00044 	movi	r3,1
  107e2c:	10c20f26 	beq	r2,r3,10866c <___vfprintf_internal_r+0x16f8>
  107e30:	00c00084 	movi	r3,2
  107e34:	10fd3326 	beq	r2,r3,107304 <__alt_data_end+0xfffc7304>
  107e38:	003e0b06 	br	107668 <__alt_data_end+0xfffc7668>
  107e3c:	d8c02017 	ldw	r3,128(sp)
  107e40:	003e7106 	br	107808 <__alt_data_end+0xfffc7808>
  107e44:	00801944 	movi	r2,101
  107e48:	14407e0e 	bge	r2,r17,108044 <___vfprintf_internal_r+0x10d0>
  107e4c:	d9003617 	ldw	r4,216(sp)
  107e50:	d9403817 	ldw	r5,224(sp)
  107e54:	000d883a 	mov	r6,zero
  107e58:	000f883a 	mov	r7,zero
  107e5c:	d8c03c15 	stw	r3,240(sp)
  107e60:	da003d15 	stw	r8,244(sp)
  107e64:	01175140 	call	117514 <__eqdf2>
  107e68:	d8c03c17 	ldw	r3,240(sp)
  107e6c:	da003d17 	ldw	r8,244(sp)
  107e70:	1000f71e 	bne	r2,zero,108250 <___vfprintf_internal_r+0x12dc>
  107e74:	d8801f17 	ldw	r2,124(sp)
  107e78:	010004b4 	movhi	r4,18
  107e7c:	210e5204 	addi	r4,r4,14664
  107e80:	18c00044 	addi	r3,r3,1
  107e84:	10800044 	addi	r2,r2,1
  107e88:	41000015 	stw	r4,0(r8)
  107e8c:	01000044 	movi	r4,1
  107e90:	41000115 	stw	r4,4(r8)
  107e94:	d8c02015 	stw	r3,128(sp)
  107e98:	d8801f15 	stw	r2,124(sp)
  107e9c:	010001c4 	movi	r4,7
  107ea0:	2082b816 	blt	r4,r2,108984 <___vfprintf_internal_r+0x1a10>
  107ea4:	42000204 	addi	r8,r8,8
  107ea8:	d8802617 	ldw	r2,152(sp)
  107eac:	d9403317 	ldw	r5,204(sp)
  107eb0:	11400216 	blt	r2,r5,107ebc <___vfprintf_internal_r+0xf48>
  107eb4:	9080004c 	andi	r2,r18,1
  107eb8:	103eb326 	beq	r2,zero,107988 <__alt_data_end+0xfffc7988>
  107ebc:	d8803717 	ldw	r2,220(sp)
  107ec0:	d9003417 	ldw	r4,208(sp)
  107ec4:	d9403717 	ldw	r5,220(sp)
  107ec8:	1887883a 	add	r3,r3,r2
  107ecc:	d8801f17 	ldw	r2,124(sp)
  107ed0:	41000015 	stw	r4,0(r8)
  107ed4:	41400115 	stw	r5,4(r8)
  107ed8:	10800044 	addi	r2,r2,1
  107edc:	d8c02015 	stw	r3,128(sp)
  107ee0:	d8801f15 	stw	r2,124(sp)
  107ee4:	010001c4 	movi	r4,7
  107ee8:	20832916 	blt	r4,r2,108b90 <___vfprintf_internal_r+0x1c1c>
  107eec:	42000204 	addi	r8,r8,8
  107ef0:	d8803317 	ldw	r2,204(sp)
  107ef4:	143fffc4 	addi	r16,r2,-1
  107ef8:	043ea30e 	bge	zero,r16,107988 <__alt_data_end+0xfffc7988>
  107efc:	04400404 	movi	r17,16
  107f00:	d8801f17 	ldw	r2,124(sp)
  107f04:	8c00880e 	bge	r17,r16,108128 <___vfprintf_internal_r+0x11b4>
  107f08:	014004b4 	movhi	r5,18
  107f0c:	294e6504 	addi	r5,r5,14740
  107f10:	d9402c15 	stw	r5,176(sp)
  107f14:	058001c4 	movi	r22,7
  107f18:	dcc02d17 	ldw	r19,180(sp)
  107f1c:	00000306 	br	107f2c <___vfprintf_internal_r+0xfb8>
  107f20:	42000204 	addi	r8,r8,8
  107f24:	843ffc04 	addi	r16,r16,-16
  107f28:	8c00820e 	bge	r17,r16,108134 <___vfprintf_internal_r+0x11c0>
  107f2c:	18c00404 	addi	r3,r3,16
  107f30:	10800044 	addi	r2,r2,1
  107f34:	45000015 	stw	r20,0(r8)
  107f38:	44400115 	stw	r17,4(r8)
  107f3c:	d8c02015 	stw	r3,128(sp)
  107f40:	d8801f15 	stw	r2,124(sp)
  107f44:	b0bff60e 	bge	r22,r2,107f20 <__alt_data_end+0xfffc7f20>
  107f48:	d9801e04 	addi	r6,sp,120
  107f4c:	b80b883a 	mov	r5,r23
  107f50:	9809883a 	mov	r4,r19
  107f54:	01128340 	call	112834 <__sprint_r>
  107f58:	103d0a1e 	bne	r2,zero,107384 <__alt_data_end+0xfffc7384>
  107f5c:	d8c02017 	ldw	r3,128(sp)
  107f60:	d8801f17 	ldw	r2,124(sp)
  107f64:	da000404 	addi	r8,sp,16
  107f68:	003fee06 	br	107f24 <__alt_data_end+0xfffc7f24>
  107f6c:	d9403117 	ldw	r5,196(sp)
  107f70:	d8802917 	ldw	r2,164(sp)
  107f74:	28adc83a 	sub	r22,r5,r2
  107f78:	05be410e 	bge	zero,r22,107880 <__alt_data_end+0xfffc7880>
  107f7c:	07000404 	movi	fp,16
  107f80:	d8801f17 	ldw	r2,124(sp)
  107f84:	e5838f0e 	bge	fp,r22,108dc4 <___vfprintf_internal_r+0x1e50>
  107f88:	014004b4 	movhi	r5,18
  107f8c:	294e6504 	addi	r5,r5,14740
  107f90:	dc403015 	stw	r17,192(sp)
  107f94:	d9402c15 	stw	r5,176(sp)
  107f98:	b023883a 	mov	r17,r22
  107f9c:	04c001c4 	movi	r19,7
  107fa0:	a82d883a 	mov	r22,r21
  107fa4:	902b883a 	mov	r21,r18
  107fa8:	8025883a 	mov	r18,r16
  107fac:	dc002d17 	ldw	r16,180(sp)
  107fb0:	00000306 	br	107fc0 <___vfprintf_internal_r+0x104c>
  107fb4:	8c7ffc04 	addi	r17,r17,-16
  107fb8:	42000204 	addi	r8,r8,8
  107fbc:	e440110e 	bge	fp,r17,108004 <___vfprintf_internal_r+0x1090>
  107fc0:	18c00404 	addi	r3,r3,16
  107fc4:	10800044 	addi	r2,r2,1
  107fc8:	45000015 	stw	r20,0(r8)
  107fcc:	47000115 	stw	fp,4(r8)
  107fd0:	d8c02015 	stw	r3,128(sp)
  107fd4:	d8801f15 	stw	r2,124(sp)
  107fd8:	98bff60e 	bge	r19,r2,107fb4 <__alt_data_end+0xfffc7fb4>
  107fdc:	d9801e04 	addi	r6,sp,120
  107fe0:	b80b883a 	mov	r5,r23
  107fe4:	8009883a 	mov	r4,r16
  107fe8:	01128340 	call	112834 <__sprint_r>
  107fec:	103ce51e 	bne	r2,zero,107384 <__alt_data_end+0xfffc7384>
  107ff0:	8c7ffc04 	addi	r17,r17,-16
  107ff4:	d8c02017 	ldw	r3,128(sp)
  107ff8:	d8801f17 	ldw	r2,124(sp)
  107ffc:	da000404 	addi	r8,sp,16
  108000:	e47fef16 	blt	fp,r17,107fc0 <__alt_data_end+0xfffc7fc0>
  108004:	9021883a 	mov	r16,r18
  108008:	a825883a 	mov	r18,r21
  10800c:	b02b883a 	mov	r21,r22
  108010:	882d883a 	mov	r22,r17
  108014:	dc403017 	ldw	r17,192(sp)
  108018:	d9002c17 	ldw	r4,176(sp)
  10801c:	1d87883a 	add	r3,r3,r22
  108020:	10800044 	addi	r2,r2,1
  108024:	41000015 	stw	r4,0(r8)
  108028:	45800115 	stw	r22,4(r8)
  10802c:	d8c02015 	stw	r3,128(sp)
  108030:	d8801f15 	stw	r2,124(sp)
  108034:	010001c4 	movi	r4,7
  108038:	20818e16 	blt	r4,r2,108674 <___vfprintf_internal_r+0x1700>
  10803c:	42000204 	addi	r8,r8,8
  108040:	003e0f06 	br	107880 <__alt_data_end+0xfffc7880>
  108044:	d9403317 	ldw	r5,204(sp)
  108048:	00800044 	movi	r2,1
  10804c:	18c00044 	addi	r3,r3,1
  108050:	1141530e 	bge	r2,r5,1085a0 <___vfprintf_internal_r+0x162c>
  108054:	dc401f17 	ldw	r17,124(sp)
  108058:	00800044 	movi	r2,1
  10805c:	40800115 	stw	r2,4(r8)
  108060:	8c400044 	addi	r17,r17,1
  108064:	44000015 	stw	r16,0(r8)
  108068:	d8c02015 	stw	r3,128(sp)
  10806c:	dc401f15 	stw	r17,124(sp)
  108070:	008001c4 	movi	r2,7
  108074:	14416b16 	blt	r2,r17,108624 <___vfprintf_internal_r+0x16b0>
  108078:	42000204 	addi	r8,r8,8
  10807c:	d8803717 	ldw	r2,220(sp)
  108080:	d9003417 	ldw	r4,208(sp)
  108084:	8c400044 	addi	r17,r17,1
  108088:	10c7883a 	add	r3,r2,r3
  10808c:	40800115 	stw	r2,4(r8)
  108090:	41000015 	stw	r4,0(r8)
  108094:	d8c02015 	stw	r3,128(sp)
  108098:	dc401f15 	stw	r17,124(sp)
  10809c:	008001c4 	movi	r2,7
  1080a0:	14416916 	blt	r2,r17,108648 <___vfprintf_internal_r+0x16d4>
  1080a4:	45800204 	addi	r22,r8,8
  1080a8:	d9003617 	ldw	r4,216(sp)
  1080ac:	d9403817 	ldw	r5,224(sp)
  1080b0:	000d883a 	mov	r6,zero
  1080b4:	000f883a 	mov	r7,zero
  1080b8:	d8c03c15 	stw	r3,240(sp)
  1080bc:	01175140 	call	117514 <__eqdf2>
  1080c0:	d8c03c17 	ldw	r3,240(sp)
  1080c4:	1000bc26 	beq	r2,zero,1083b8 <___vfprintf_internal_r+0x1444>
  1080c8:	d9403317 	ldw	r5,204(sp)
  1080cc:	84000044 	addi	r16,r16,1
  1080d0:	8c400044 	addi	r17,r17,1
  1080d4:	28bfffc4 	addi	r2,r5,-1
  1080d8:	1887883a 	add	r3,r3,r2
  1080dc:	b0800115 	stw	r2,4(r22)
  1080e0:	b4000015 	stw	r16,0(r22)
  1080e4:	d8c02015 	stw	r3,128(sp)
  1080e8:	dc401f15 	stw	r17,124(sp)
  1080ec:	008001c4 	movi	r2,7
  1080f0:	14414316 	blt	r2,r17,108600 <___vfprintf_internal_r+0x168c>
  1080f4:	b5800204 	addi	r22,r22,8
  1080f8:	d9003a17 	ldw	r4,232(sp)
  1080fc:	df0022c4 	addi	fp,sp,139
  108100:	8c400044 	addi	r17,r17,1
  108104:	20c7883a 	add	r3,r4,r3
  108108:	b7000015 	stw	fp,0(r22)
  10810c:	b1000115 	stw	r4,4(r22)
  108110:	d8c02015 	stw	r3,128(sp)
  108114:	dc401f15 	stw	r17,124(sp)
  108118:	008001c4 	movi	r2,7
  10811c:	14400e16 	blt	r2,r17,108158 <___vfprintf_internal_r+0x11e4>
  108120:	b2000204 	addi	r8,r22,8
  108124:	003e1806 	br	107988 <__alt_data_end+0xfffc7988>
  108128:	010004b4 	movhi	r4,18
  10812c:	210e6504 	addi	r4,r4,14740
  108130:	d9002c15 	stw	r4,176(sp)
  108134:	d9002c17 	ldw	r4,176(sp)
  108138:	1c07883a 	add	r3,r3,r16
  10813c:	44000115 	stw	r16,4(r8)
  108140:	41000015 	stw	r4,0(r8)
  108144:	10800044 	addi	r2,r2,1
  108148:	d8c02015 	stw	r3,128(sp)
  10814c:	d8801f15 	stw	r2,124(sp)
  108150:	010001c4 	movi	r4,7
  108154:	20be0b0e 	bge	r4,r2,107984 <__alt_data_end+0xfffc7984>
  108158:	d9002d17 	ldw	r4,180(sp)
  10815c:	d9801e04 	addi	r6,sp,120
  108160:	b80b883a 	mov	r5,r23
  108164:	01128340 	call	112834 <__sprint_r>
  108168:	103c861e 	bne	r2,zero,107384 <__alt_data_end+0xfffc7384>
  10816c:	d8c02017 	ldw	r3,128(sp)
  108170:	da000404 	addi	r8,sp,16
  108174:	003e0406 	br	107988 <__alt_data_end+0xfffc7988>
  108178:	d9002d17 	ldw	r4,180(sp)
  10817c:	d9801e04 	addi	r6,sp,120
  108180:	b80b883a 	mov	r5,r23
  108184:	01128340 	call	112834 <__sprint_r>
  108188:	103e3b26 	beq	r2,zero,107a78 <__alt_data_end+0xfffc7a78>
  10818c:	003c7d06 	br	107384 <__alt_data_end+0xfffc7384>
  108190:	d9002d17 	ldw	r4,180(sp)
  108194:	d9801e04 	addi	r6,sp,120
  108198:	b80b883a 	mov	r5,r23
  10819c:	01128340 	call	112834 <__sprint_r>
  1081a0:	103c781e 	bne	r2,zero,107384 <__alt_data_end+0xfffc7384>
  1081a4:	d8c02017 	ldw	r3,128(sp)
  1081a8:	da000404 	addi	r8,sp,16
  1081ac:	003de906 	br	107954 <__alt_data_end+0xfffc7954>
  1081b0:	d9002d17 	ldw	r4,180(sp)
  1081b4:	d9801e04 	addi	r6,sp,120
  1081b8:	b80b883a 	mov	r5,r23
  1081bc:	01128340 	call	112834 <__sprint_r>
  1081c0:	103c701e 	bne	r2,zero,107384 <__alt_data_end+0xfffc7384>
  1081c4:	d8c02017 	ldw	r3,128(sp)
  1081c8:	da000404 	addi	r8,sp,16
  1081cc:	003d9b06 	br	10783c <__alt_data_end+0xfffc783c>
  1081d0:	d9002d17 	ldw	r4,180(sp)
  1081d4:	d9801e04 	addi	r6,sp,120
  1081d8:	b80b883a 	mov	r5,r23
  1081dc:	01128340 	call	112834 <__sprint_r>
  1081e0:	103c681e 	bne	r2,zero,107384 <__alt_data_end+0xfffc7384>
  1081e4:	d8c02017 	ldw	r3,128(sp)
  1081e8:	da000404 	addi	r8,sp,16
  1081ec:	003da106 	br	107874 <__alt_data_end+0xfffc7874>
  1081f0:	d9402a17 	ldw	r5,168(sp)
  1081f4:	d8002785 	stb	zero,158(sp)
  1081f8:	283f0616 	blt	r5,zero,107e14 <__alt_data_end+0xfffc7e14>
  1081fc:	00ffdfc4 	movi	r3,-129
  108200:	9d84b03a 	or	r2,r19,r22
  108204:	90e4703a 	and	r18,r18,r3
  108208:	103c3b26 	beq	r2,zero,1072f8 <__alt_data_end+0xfffc72f8>
  10820c:	0039883a 	mov	fp,zero
  108210:	003e5806 	br	107b74 <__alt_data_end+0xfffc7b74>
  108214:	9080040c 	andi	r2,r18,16
  108218:	1001b326 	beq	r2,zero,1088e8 <___vfprintf_internal_r+0x1974>
  10821c:	d8c02e17 	ldw	r3,184(sp)
  108220:	d9002a17 	ldw	r4,168(sp)
  108224:	d8002785 	stb	zero,158(sp)
  108228:	18800104 	addi	r2,r3,4
  10822c:	1cc00017 	ldw	r19,0(r3)
  108230:	002d883a 	mov	r22,zero
  108234:	2001b516 	blt	r4,zero,10890c <___vfprintf_internal_r+0x1998>
  108238:	00ffdfc4 	movi	r3,-129
  10823c:	d8802e15 	stw	r2,184(sp)
  108240:	90e4703a 	and	r18,r18,r3
  108244:	983d0526 	beq	r19,zero,10765c <__alt_data_end+0xfffc765c>
  108248:	0039883a 	mov	fp,zero
  10824c:	003d0806 	br	107670 <__alt_data_end+0xfffc7670>
  108250:	dc402617 	ldw	r17,152(sp)
  108254:	0441d30e 	bge	zero,r17,1089a4 <___vfprintf_internal_r+0x1a30>
  108258:	dc403217 	ldw	r17,200(sp)
  10825c:	d8803317 	ldw	r2,204(sp)
  108260:	1440010e 	bge	r2,r17,108268 <___vfprintf_internal_r+0x12f4>
  108264:	1023883a 	mov	r17,r2
  108268:	04400a0e 	bge	zero,r17,108294 <___vfprintf_internal_r+0x1320>
  10826c:	d8801f17 	ldw	r2,124(sp)
  108270:	1c47883a 	add	r3,r3,r17
  108274:	44000015 	stw	r16,0(r8)
  108278:	10800044 	addi	r2,r2,1
  10827c:	44400115 	stw	r17,4(r8)
  108280:	d8c02015 	stw	r3,128(sp)
  108284:	d8801f15 	stw	r2,124(sp)
  108288:	010001c4 	movi	r4,7
  10828c:	20826516 	blt	r4,r2,108c24 <___vfprintf_internal_r+0x1cb0>
  108290:	42000204 	addi	r8,r8,8
  108294:	88026116 	blt	r17,zero,108c1c <___vfprintf_internal_r+0x1ca8>
  108298:	d9003217 	ldw	r4,200(sp)
  10829c:	2463c83a 	sub	r17,r4,r17
  1082a0:	04407b0e 	bge	zero,r17,108490 <___vfprintf_internal_r+0x151c>
  1082a4:	05800404 	movi	r22,16
  1082a8:	d8801f17 	ldw	r2,124(sp)
  1082ac:	b4419d0e 	bge	r22,r17,108924 <___vfprintf_internal_r+0x19b0>
  1082b0:	010004b4 	movhi	r4,18
  1082b4:	210e6504 	addi	r4,r4,14740
  1082b8:	d9002c15 	stw	r4,176(sp)
  1082bc:	070001c4 	movi	fp,7
  1082c0:	dcc02d17 	ldw	r19,180(sp)
  1082c4:	00000306 	br	1082d4 <___vfprintf_internal_r+0x1360>
  1082c8:	42000204 	addi	r8,r8,8
  1082cc:	8c7ffc04 	addi	r17,r17,-16
  1082d0:	b441970e 	bge	r22,r17,108930 <___vfprintf_internal_r+0x19bc>
  1082d4:	18c00404 	addi	r3,r3,16
  1082d8:	10800044 	addi	r2,r2,1
  1082dc:	45000015 	stw	r20,0(r8)
  1082e0:	45800115 	stw	r22,4(r8)
  1082e4:	d8c02015 	stw	r3,128(sp)
  1082e8:	d8801f15 	stw	r2,124(sp)
  1082ec:	e0bff60e 	bge	fp,r2,1082c8 <__alt_data_end+0xfffc82c8>
  1082f0:	d9801e04 	addi	r6,sp,120
  1082f4:	b80b883a 	mov	r5,r23
  1082f8:	9809883a 	mov	r4,r19
  1082fc:	01128340 	call	112834 <__sprint_r>
  108300:	103c201e 	bne	r2,zero,107384 <__alt_data_end+0xfffc7384>
  108304:	d8c02017 	ldw	r3,128(sp)
  108308:	d8801f17 	ldw	r2,124(sp)
  10830c:	da000404 	addi	r8,sp,16
  108310:	003fee06 	br	1082cc <__alt_data_end+0xfffc82cc>
  108314:	d9002d17 	ldw	r4,180(sp)
  108318:	d9801e04 	addi	r6,sp,120
  10831c:	b80b883a 	mov	r5,r23
  108320:	01128340 	call	112834 <__sprint_r>
  108324:	103c171e 	bne	r2,zero,107384 <__alt_data_end+0xfffc7384>
  108328:	d8c02017 	ldw	r3,128(sp)
  10832c:	df002787 	ldb	fp,158(sp)
  108330:	da000404 	addi	r8,sp,16
  108334:	003d3406 	br	107808 <__alt_data_end+0xfffc7808>
  108338:	9080040c 	andi	r2,r18,16
  10833c:	10016126 	beq	r2,zero,1088c4 <___vfprintf_internal_r+0x1950>
  108340:	d9402e17 	ldw	r5,184(sp)
  108344:	2cc00017 	ldw	r19,0(r5)
  108348:	29400104 	addi	r5,r5,4
  10834c:	d9402e15 	stw	r5,184(sp)
  108350:	982dd7fa 	srai	r22,r19,31
  108354:	b005883a 	mov	r2,r22
  108358:	003c5a06 	br	1074c4 <__alt_data_end+0xfffc74c4>
  10835c:	9080040c 	andi	r2,r18,16
  108360:	10003526 	beq	r2,zero,108438 <___vfprintf_internal_r+0x14c4>
  108364:	d8c02e17 	ldw	r3,184(sp)
  108368:	d9002a17 	ldw	r4,168(sp)
  10836c:	d8002785 	stb	zero,158(sp)
  108370:	18800104 	addi	r2,r3,4
  108374:	1cc00017 	ldw	r19,0(r3)
  108378:	002d883a 	mov	r22,zero
  10837c:	20003716 	blt	r4,zero,10845c <___vfprintf_internal_r+0x14e8>
  108380:	00ffdfc4 	movi	r3,-129
  108384:	d8802e15 	stw	r2,184(sp)
  108388:	90e4703a 	and	r18,r18,r3
  10838c:	0039883a 	mov	fp,zero
  108390:	983dd426 	beq	r19,zero,107ae4 <__alt_data_end+0xfffc7ae4>
  108394:	00800244 	movi	r2,9
  108398:	14fc5336 	bltu	r2,r19,1074e8 <__alt_data_end+0xfffc74e8>
  10839c:	d8c02817 	ldw	r3,160(sp)
  1083a0:	dc001dc4 	addi	r16,sp,119
  1083a4:	9cc00c04 	addi	r19,r19,48
  1083a8:	1c07c83a 	sub	r3,r3,r16
  1083ac:	dcc01dc5 	stb	r19,119(sp)
  1083b0:	d8c02b15 	stw	r3,172(sp)
  1083b4:	003cc606 	br	1076d0 <__alt_data_end+0xfffc76d0>
  1083b8:	d8803317 	ldw	r2,204(sp)
  1083bc:	143fffc4 	addi	r16,r2,-1
  1083c0:	043f4d0e 	bge	zero,r16,1080f8 <__alt_data_end+0xfffc80f8>
  1083c4:	07000404 	movi	fp,16
  1083c8:	e400810e 	bge	fp,r16,1085d0 <___vfprintf_internal_r+0x165c>
  1083cc:	014004b4 	movhi	r5,18
  1083d0:	294e6504 	addi	r5,r5,14740
  1083d4:	d9402c15 	stw	r5,176(sp)
  1083d8:	01c001c4 	movi	r7,7
  1083dc:	dcc02d17 	ldw	r19,180(sp)
  1083e0:	00000306 	br	1083f0 <___vfprintf_internal_r+0x147c>
  1083e4:	b5800204 	addi	r22,r22,8
  1083e8:	843ffc04 	addi	r16,r16,-16
  1083ec:	e4007b0e 	bge	fp,r16,1085dc <___vfprintf_internal_r+0x1668>
  1083f0:	18c00404 	addi	r3,r3,16
  1083f4:	8c400044 	addi	r17,r17,1
  1083f8:	b5000015 	stw	r20,0(r22)
  1083fc:	b7000115 	stw	fp,4(r22)
  108400:	d8c02015 	stw	r3,128(sp)
  108404:	dc401f15 	stw	r17,124(sp)
  108408:	3c7ff60e 	bge	r7,r17,1083e4 <__alt_data_end+0xfffc83e4>
  10840c:	d9801e04 	addi	r6,sp,120
  108410:	b80b883a 	mov	r5,r23
  108414:	9809883a 	mov	r4,r19
  108418:	d9c03c15 	stw	r7,240(sp)
  10841c:	01128340 	call	112834 <__sprint_r>
  108420:	d9c03c17 	ldw	r7,240(sp)
  108424:	103bd71e 	bne	r2,zero,107384 <__alt_data_end+0xfffc7384>
  108428:	d8c02017 	ldw	r3,128(sp)
  10842c:	dc401f17 	ldw	r17,124(sp)
  108430:	dd800404 	addi	r22,sp,16
  108434:	003fec06 	br	1083e8 <__alt_data_end+0xfffc83e8>
  108438:	9080100c 	andi	r2,r18,64
  10843c:	d8002785 	stb	zero,158(sp)
  108440:	10010e26 	beq	r2,zero,10887c <___vfprintf_internal_r+0x1908>
  108444:	d9402e17 	ldw	r5,184(sp)
  108448:	d8c02a17 	ldw	r3,168(sp)
  10844c:	002d883a 	mov	r22,zero
  108450:	28800104 	addi	r2,r5,4
  108454:	2cc0000b 	ldhu	r19,0(r5)
  108458:	183fc90e 	bge	r3,zero,108380 <__alt_data_end+0xfffc8380>
  10845c:	d8802e15 	stw	r2,184(sp)
  108460:	0039883a 	mov	fp,zero
  108464:	9d84b03a 	or	r2,r19,r22
  108468:	103c1e1e 	bne	r2,zero,1074e4 <__alt_data_end+0xfffc74e4>
  10846c:	00800044 	movi	r2,1
  108470:	003e6c06 	br	107e24 <__alt_data_end+0xfffc7e24>
  108474:	d9002d17 	ldw	r4,180(sp)
  108478:	d9801e04 	addi	r6,sp,120
  10847c:	b80b883a 	mov	r5,r23
  108480:	01128340 	call	112834 <__sprint_r>
  108484:	103bbf1e 	bne	r2,zero,107384 <__alt_data_end+0xfffc7384>
  108488:	d8c02017 	ldw	r3,128(sp)
  10848c:	da000404 	addi	r8,sp,16
  108490:	d9003217 	ldw	r4,200(sp)
  108494:	d8802617 	ldw	r2,152(sp)
  108498:	d9403317 	ldw	r5,204(sp)
  10849c:	8123883a 	add	r17,r16,r4
  1084a0:	11400216 	blt	r2,r5,1084ac <___vfprintf_internal_r+0x1538>
  1084a4:	9100004c 	andi	r4,r18,1
  1084a8:	20000d26 	beq	r4,zero,1084e0 <___vfprintf_internal_r+0x156c>
  1084ac:	d9003717 	ldw	r4,220(sp)
  1084b0:	d9403417 	ldw	r5,208(sp)
  1084b4:	1907883a 	add	r3,r3,r4
  1084b8:	d9001f17 	ldw	r4,124(sp)
  1084bc:	41400015 	stw	r5,0(r8)
  1084c0:	d9403717 	ldw	r5,220(sp)
  1084c4:	21000044 	addi	r4,r4,1
  1084c8:	d8c02015 	stw	r3,128(sp)
  1084cc:	41400115 	stw	r5,4(r8)
  1084d0:	d9001f15 	stw	r4,124(sp)
  1084d4:	014001c4 	movi	r5,7
  1084d8:	2901e816 	blt	r5,r4,108c7c <___vfprintf_internal_r+0x1d08>
  1084dc:	42000204 	addi	r8,r8,8
  1084e0:	d9003317 	ldw	r4,204(sp)
  1084e4:	8121883a 	add	r16,r16,r4
  1084e8:	2085c83a 	sub	r2,r4,r2
  1084ec:	8461c83a 	sub	r16,r16,r17
  1084f0:	1400010e 	bge	r2,r16,1084f8 <___vfprintf_internal_r+0x1584>
  1084f4:	1021883a 	mov	r16,r2
  1084f8:	04000a0e 	bge	zero,r16,108524 <___vfprintf_internal_r+0x15b0>
  1084fc:	d9001f17 	ldw	r4,124(sp)
  108500:	1c07883a 	add	r3,r3,r16
  108504:	44400015 	stw	r17,0(r8)
  108508:	21000044 	addi	r4,r4,1
  10850c:	44000115 	stw	r16,4(r8)
  108510:	d8c02015 	stw	r3,128(sp)
  108514:	d9001f15 	stw	r4,124(sp)
  108518:	014001c4 	movi	r5,7
  10851c:	2901fb16 	blt	r5,r4,108d0c <___vfprintf_internal_r+0x1d98>
  108520:	42000204 	addi	r8,r8,8
  108524:	8001f716 	blt	r16,zero,108d04 <___vfprintf_internal_r+0x1d90>
  108528:	1421c83a 	sub	r16,r2,r16
  10852c:	043d160e 	bge	zero,r16,107988 <__alt_data_end+0xfffc7988>
  108530:	04400404 	movi	r17,16
  108534:	d8801f17 	ldw	r2,124(sp)
  108538:	8c3efb0e 	bge	r17,r16,108128 <__alt_data_end+0xfffc8128>
  10853c:	014004b4 	movhi	r5,18
  108540:	294e6504 	addi	r5,r5,14740
  108544:	d9402c15 	stw	r5,176(sp)
  108548:	058001c4 	movi	r22,7
  10854c:	dcc02d17 	ldw	r19,180(sp)
  108550:	00000306 	br	108560 <___vfprintf_internal_r+0x15ec>
  108554:	42000204 	addi	r8,r8,8
  108558:	843ffc04 	addi	r16,r16,-16
  10855c:	8c3ef50e 	bge	r17,r16,108134 <__alt_data_end+0xfffc8134>
  108560:	18c00404 	addi	r3,r3,16
  108564:	10800044 	addi	r2,r2,1
  108568:	45000015 	stw	r20,0(r8)
  10856c:	44400115 	stw	r17,4(r8)
  108570:	d8c02015 	stw	r3,128(sp)
  108574:	d8801f15 	stw	r2,124(sp)
  108578:	b0bff60e 	bge	r22,r2,108554 <__alt_data_end+0xfffc8554>
  10857c:	d9801e04 	addi	r6,sp,120
  108580:	b80b883a 	mov	r5,r23
  108584:	9809883a 	mov	r4,r19
  108588:	01128340 	call	112834 <__sprint_r>
  10858c:	103b7d1e 	bne	r2,zero,107384 <__alt_data_end+0xfffc7384>
  108590:	d8c02017 	ldw	r3,128(sp)
  108594:	d8801f17 	ldw	r2,124(sp)
  108598:	da000404 	addi	r8,sp,16
  10859c:	003fee06 	br	108558 <__alt_data_end+0xfffc8558>
  1085a0:	9088703a 	and	r4,r18,r2
  1085a4:	203eab1e 	bne	r4,zero,108054 <__alt_data_end+0xfffc8054>
  1085a8:	dc401f17 	ldw	r17,124(sp)
  1085ac:	40800115 	stw	r2,4(r8)
  1085b0:	44000015 	stw	r16,0(r8)
  1085b4:	8c400044 	addi	r17,r17,1
  1085b8:	d8c02015 	stw	r3,128(sp)
  1085bc:	dc401f15 	stw	r17,124(sp)
  1085c0:	008001c4 	movi	r2,7
  1085c4:	14400e16 	blt	r2,r17,108600 <___vfprintf_internal_r+0x168c>
  1085c8:	45800204 	addi	r22,r8,8
  1085cc:	003eca06 	br	1080f8 <__alt_data_end+0xfffc80f8>
  1085d0:	010004b4 	movhi	r4,18
  1085d4:	210e6504 	addi	r4,r4,14740
  1085d8:	d9002c15 	stw	r4,176(sp)
  1085dc:	d8802c17 	ldw	r2,176(sp)
  1085e0:	1c07883a 	add	r3,r3,r16
  1085e4:	8c400044 	addi	r17,r17,1
  1085e8:	b0800015 	stw	r2,0(r22)
  1085ec:	b4000115 	stw	r16,4(r22)
  1085f0:	d8c02015 	stw	r3,128(sp)
  1085f4:	dc401f15 	stw	r17,124(sp)
  1085f8:	008001c4 	movi	r2,7
  1085fc:	147ebd0e 	bge	r2,r17,1080f4 <__alt_data_end+0xfffc80f4>
  108600:	d9002d17 	ldw	r4,180(sp)
  108604:	d9801e04 	addi	r6,sp,120
  108608:	b80b883a 	mov	r5,r23
  10860c:	01128340 	call	112834 <__sprint_r>
  108610:	103b5c1e 	bne	r2,zero,107384 <__alt_data_end+0xfffc7384>
  108614:	d8c02017 	ldw	r3,128(sp)
  108618:	dc401f17 	ldw	r17,124(sp)
  10861c:	dd800404 	addi	r22,sp,16
  108620:	003eb506 	br	1080f8 <__alt_data_end+0xfffc80f8>
  108624:	d9002d17 	ldw	r4,180(sp)
  108628:	d9801e04 	addi	r6,sp,120
  10862c:	b80b883a 	mov	r5,r23
  108630:	01128340 	call	112834 <__sprint_r>
  108634:	103b531e 	bne	r2,zero,107384 <__alt_data_end+0xfffc7384>
  108638:	d8c02017 	ldw	r3,128(sp)
  10863c:	dc401f17 	ldw	r17,124(sp)
  108640:	da000404 	addi	r8,sp,16
  108644:	003e8d06 	br	10807c <__alt_data_end+0xfffc807c>
  108648:	d9002d17 	ldw	r4,180(sp)
  10864c:	d9801e04 	addi	r6,sp,120
  108650:	b80b883a 	mov	r5,r23
  108654:	01128340 	call	112834 <__sprint_r>
  108658:	103b4a1e 	bne	r2,zero,107384 <__alt_data_end+0xfffc7384>
  10865c:	d8c02017 	ldw	r3,128(sp)
  108660:	dc401f17 	ldw	r17,124(sp)
  108664:	dd800404 	addi	r22,sp,16
  108668:	003e8f06 	br	1080a8 <__alt_data_end+0xfffc80a8>
  10866c:	0027883a 	mov	r19,zero
  108670:	003f4a06 	br	10839c <__alt_data_end+0xfffc839c>
  108674:	d9002d17 	ldw	r4,180(sp)
  108678:	d9801e04 	addi	r6,sp,120
  10867c:	b80b883a 	mov	r5,r23
  108680:	01128340 	call	112834 <__sprint_r>
  108684:	103b3f1e 	bne	r2,zero,107384 <__alt_data_end+0xfffc7384>
  108688:	d8c02017 	ldw	r3,128(sp)
  10868c:	da000404 	addi	r8,sp,16
  108690:	003c7b06 	br	107880 <__alt_data_end+0xfffc7880>
  108694:	d9402a17 	ldw	r5,168(sp)
  108698:	04e7c83a 	sub	r19,zero,r19
  10869c:	07000b44 	movi	fp,45
  1086a0:	9804c03a 	cmpne	r2,r19,zero
  1086a4:	05adc83a 	sub	r22,zero,r22
  1086a8:	df002785 	stb	fp,158(sp)
  1086ac:	b0adc83a 	sub	r22,r22,r2
  1086b0:	28017b16 	blt	r5,zero,108ca0 <___vfprintf_internal_r+0x1d2c>
  1086b4:	00bfdfc4 	movi	r2,-129
  1086b8:	90a4703a 	and	r18,r18,r2
  1086bc:	003b8906 	br	1074e4 <__alt_data_end+0xfffc74e4>
  1086c0:	d9003617 	ldw	r4,216(sp)
  1086c4:	d9403817 	ldw	r5,224(sp)
  1086c8:	da003d15 	stw	r8,244(sp)
  1086cc:	010d7ac0 	call	10d7ac <__fpclassifyd>
  1086d0:	da003d17 	ldw	r8,244(sp)
  1086d4:	1000f026 	beq	r2,zero,108a98 <___vfprintf_internal_r+0x1b24>
  1086d8:	d9002a17 	ldw	r4,168(sp)
  1086dc:	05bff7c4 	movi	r22,-33
  1086e0:	00bfffc4 	movi	r2,-1
  1086e4:	8dac703a 	and	r22,r17,r22
  1086e8:	20820026 	beq	r4,r2,108eec <___vfprintf_internal_r+0x1f78>
  1086ec:	008011c4 	movi	r2,71
  1086f0:	b081f726 	beq	r22,r2,108ed0 <___vfprintf_internal_r+0x1f5c>
  1086f4:	d9003817 	ldw	r4,224(sp)
  1086f8:	90c04014 	ori	r3,r18,256
  1086fc:	d8c02c15 	stw	r3,176(sp)
  108700:	20021516 	blt	r4,zero,108f58 <___vfprintf_internal_r+0x1fe4>
  108704:	dcc03817 	ldw	r19,224(sp)
  108708:	d8002905 	stb	zero,164(sp)
  10870c:	00801984 	movi	r2,102
  108710:	8881f926 	beq	r17,r2,108ef8 <___vfprintf_internal_r+0x1f84>
  108714:	00801184 	movi	r2,70
  108718:	88821c26 	beq	r17,r2,108f8c <___vfprintf_internal_r+0x2018>
  10871c:	00801144 	movi	r2,69
  108720:	b081ef26 	beq	r22,r2,108ee0 <___vfprintf_internal_r+0x1f6c>
  108724:	d8c02a17 	ldw	r3,168(sp)
  108728:	d8802104 	addi	r2,sp,132
  10872c:	d8800315 	stw	r2,12(sp)
  108730:	d9403617 	ldw	r5,216(sp)
  108734:	d8802504 	addi	r2,sp,148
  108738:	d9002d17 	ldw	r4,180(sp)
  10873c:	d8800215 	stw	r2,8(sp)
  108740:	d8802604 	addi	r2,sp,152
  108744:	d8c00015 	stw	r3,0(sp)
  108748:	d8800115 	stw	r2,4(sp)
  10874c:	01c00084 	movi	r7,2
  108750:	980d883a 	mov	r6,r19
  108754:	d8c03c15 	stw	r3,240(sp)
  108758:	da003d15 	stw	r8,244(sp)
  10875c:	01097580 	call	109758 <_dtoa_r>
  108760:	1021883a 	mov	r16,r2
  108764:	008019c4 	movi	r2,103
  108768:	d8c03c17 	ldw	r3,240(sp)
  10876c:	da003d17 	ldw	r8,244(sp)
  108770:	88817126 	beq	r17,r2,108d38 <___vfprintf_internal_r+0x1dc4>
  108774:	008011c4 	movi	r2,71
  108778:	88829126 	beq	r17,r2,1091c0 <___vfprintf_internal_r+0x224c>
  10877c:	80f9883a 	add	fp,r16,r3
  108780:	d9003617 	ldw	r4,216(sp)
  108784:	000d883a 	mov	r6,zero
  108788:	000f883a 	mov	r7,zero
  10878c:	980b883a 	mov	r5,r19
  108790:	da003d15 	stw	r8,244(sp)
  108794:	01175140 	call	117514 <__eqdf2>
  108798:	da003d17 	ldw	r8,244(sp)
  10879c:	10018d26 	beq	r2,zero,108dd4 <___vfprintf_internal_r+0x1e60>
  1087a0:	d8802117 	ldw	r2,132(sp)
  1087a4:	1700062e 	bgeu	r2,fp,1087c0 <___vfprintf_internal_r+0x184c>
  1087a8:	01000c04 	movi	r4,48
  1087ac:	10c00044 	addi	r3,r2,1
  1087b0:	d8c02115 	stw	r3,132(sp)
  1087b4:	11000005 	stb	r4,0(r2)
  1087b8:	d8802117 	ldw	r2,132(sp)
  1087bc:	173ffb36 	bltu	r2,fp,1087ac <__alt_data_end+0xfffc87ac>
  1087c0:	1405c83a 	sub	r2,r2,r16
  1087c4:	d8803315 	stw	r2,204(sp)
  1087c8:	008011c4 	movi	r2,71
  1087cc:	b0817626 	beq	r22,r2,108da8 <___vfprintf_internal_r+0x1e34>
  1087d0:	00801944 	movi	r2,101
  1087d4:	1442800e 	bge	r2,r17,1091d8 <___vfprintf_internal_r+0x2264>
  1087d8:	d8c02617 	ldw	r3,152(sp)
  1087dc:	00801984 	movi	r2,102
  1087e0:	d8c03215 	stw	r3,200(sp)
  1087e4:	8881fe26 	beq	r17,r2,108fe0 <___vfprintf_internal_r+0x206c>
  1087e8:	d8c03217 	ldw	r3,200(sp)
  1087ec:	d9003317 	ldw	r4,204(sp)
  1087f0:	1901dd16 	blt	r3,r4,108f68 <___vfprintf_internal_r+0x1ff4>
  1087f4:	9480004c 	andi	r18,r18,1
  1087f8:	90022b1e 	bne	r18,zero,1090a8 <___vfprintf_internal_r+0x2134>
  1087fc:	1805883a 	mov	r2,r3
  108800:	18028316 	blt	r3,zero,109210 <___vfprintf_internal_r+0x229c>
  108804:	d8c03217 	ldw	r3,200(sp)
  108808:	044019c4 	movi	r17,103
  10880c:	d8c02b15 	stw	r3,172(sp)
  108810:	df002907 	ldb	fp,164(sp)
  108814:	e001531e 	bne	fp,zero,108d64 <___vfprintf_internal_r+0x1df0>
  108818:	df002783 	ldbu	fp,158(sp)
  10881c:	d8802915 	stw	r2,164(sp)
  108820:	dc802c17 	ldw	r18,176(sp)
  108824:	d8002a15 	stw	zero,168(sp)
  108828:	003baf06 	br	1076e8 <__alt_data_end+0xfffc76e8>
  10882c:	d8c02e17 	ldw	r3,184(sp)
  108830:	d9002e17 	ldw	r4,184(sp)
  108834:	d9402e17 	ldw	r5,184(sp)
  108838:	18c00017 	ldw	r3,0(r3)
  10883c:	21000117 	ldw	r4,4(r4)
  108840:	29400204 	addi	r5,r5,8
  108844:	d8c03615 	stw	r3,216(sp)
  108848:	d9003815 	stw	r4,224(sp)
  10884c:	d9402e15 	stw	r5,184(sp)
  108850:	003b5006 	br	107594 <__alt_data_end+0xfffc7594>
  108854:	ac400007 	ldb	r17,0(r21)
  108858:	003a2806 	br	1070fc <__alt_data_end+0xfffc70fc>
  10885c:	9080100c 	andi	r2,r18,64
  108860:	1000a826 	beq	r2,zero,108b04 <___vfprintf_internal_r+0x1b90>
  108864:	d8c02e17 	ldw	r3,184(sp)
  108868:	002d883a 	mov	r22,zero
  10886c:	1cc0000b 	ldhu	r19,0(r3)
  108870:	18c00104 	addi	r3,r3,4
  108874:	d8c02e15 	stw	r3,184(sp)
  108878:	003caf06 	br	107b38 <__alt_data_end+0xfffc7b38>
  10887c:	d9002e17 	ldw	r4,184(sp)
  108880:	d9402a17 	ldw	r5,168(sp)
  108884:	002d883a 	mov	r22,zero
  108888:	20800104 	addi	r2,r4,4
  10888c:	24c00017 	ldw	r19,0(r4)
  108890:	283ebb0e 	bge	r5,zero,108380 <__alt_data_end+0xfffc8380>
  108894:	003ef106 	br	10845c <__alt_data_end+0xfffc845c>
  108898:	9080040c 	andi	r2,r18,16
  10889c:	1000921e 	bne	r2,zero,108ae8 <___vfprintf_internal_r+0x1b74>
  1088a0:	9480100c 	andi	r18,r18,64
  1088a4:	90013926 	beq	r18,zero,108d8c <___vfprintf_internal_r+0x1e18>
  1088a8:	d9402e17 	ldw	r5,184(sp)
  1088ac:	d8c02f17 	ldw	r3,188(sp)
  1088b0:	28800017 	ldw	r2,0(r5)
  1088b4:	29400104 	addi	r5,r5,4
  1088b8:	d9402e15 	stw	r5,184(sp)
  1088bc:	10c0000d 	sth	r3,0(r2)
  1088c0:	0039e406 	br	107054 <__alt_data_end+0xfffc7054>
  1088c4:	9080100c 	andi	r2,r18,64
  1088c8:	10008026 	beq	r2,zero,108acc <___vfprintf_internal_r+0x1b58>
  1088cc:	d8802e17 	ldw	r2,184(sp)
  1088d0:	14c0000f 	ldh	r19,0(r2)
  1088d4:	10800104 	addi	r2,r2,4
  1088d8:	d8802e15 	stw	r2,184(sp)
  1088dc:	982dd7fa 	srai	r22,r19,31
  1088e0:	b005883a 	mov	r2,r22
  1088e4:	003af706 	br	1074c4 <__alt_data_end+0xfffc74c4>
  1088e8:	9080100c 	andi	r2,r18,64
  1088ec:	d8002785 	stb	zero,158(sp)
  1088f0:	10008a1e 	bne	r2,zero,108b1c <___vfprintf_internal_r+0x1ba8>
  1088f4:	d9002e17 	ldw	r4,184(sp)
  1088f8:	d9402a17 	ldw	r5,168(sp)
  1088fc:	002d883a 	mov	r22,zero
  108900:	20800104 	addi	r2,r4,4
  108904:	24c00017 	ldw	r19,0(r4)
  108908:	283e4b0e 	bge	r5,zero,108238 <__alt_data_end+0xfffc8238>
  10890c:	9d86b03a 	or	r3,r19,r22
  108910:	d8802e15 	stw	r2,184(sp)
  108914:	183e4c1e 	bne	r3,zero,108248 <__alt_data_end+0xfffc8248>
  108918:	0039883a 	mov	fp,zero
  10891c:	0005883a 	mov	r2,zero
  108920:	003d4006 	br	107e24 <__alt_data_end+0xfffc7e24>
  108924:	014004b4 	movhi	r5,18
  108928:	294e6504 	addi	r5,r5,14740
  10892c:	d9402c15 	stw	r5,176(sp)
  108930:	d9402c17 	ldw	r5,176(sp)
  108934:	1c47883a 	add	r3,r3,r17
  108938:	10800044 	addi	r2,r2,1
  10893c:	41400015 	stw	r5,0(r8)
  108940:	44400115 	stw	r17,4(r8)
  108944:	d8c02015 	stw	r3,128(sp)
  108948:	d8801f15 	stw	r2,124(sp)
  10894c:	010001c4 	movi	r4,7
  108950:	20bec816 	blt	r4,r2,108474 <__alt_data_end+0xfffc8474>
  108954:	42000204 	addi	r8,r8,8
  108958:	003ecd06 	br	108490 <__alt_data_end+0xfffc8490>
  10895c:	d9002a17 	ldw	r4,168(sp)
  108960:	d8002785 	stb	zero,158(sp)
  108964:	203d2d16 	blt	r4,zero,107e1c <__alt_data_end+0xfffc7e1c>
  108968:	00bfdfc4 	movi	r2,-129
  10896c:	90a4703a 	and	r18,r18,r2
  108970:	003a6106 	br	1072f8 <__alt_data_end+0xfffc72f8>
  108974:	010004b4 	movhi	r4,18
  108978:	210e6504 	addi	r4,r4,14740
  10897c:	d9002c15 	stw	r4,176(sp)
  108980:	003bea06 	br	10792c <__alt_data_end+0xfffc792c>
  108984:	d9002d17 	ldw	r4,180(sp)
  108988:	d9801e04 	addi	r6,sp,120
  10898c:	b80b883a 	mov	r5,r23
  108990:	01128340 	call	112834 <__sprint_r>
  108994:	103a7b1e 	bne	r2,zero,107384 <__alt_data_end+0xfffc7384>
  108998:	d8c02017 	ldw	r3,128(sp)
  10899c:	da000404 	addi	r8,sp,16
  1089a0:	003d4106 	br	107ea8 <__alt_data_end+0xfffc7ea8>
  1089a4:	d8801f17 	ldw	r2,124(sp)
  1089a8:	014004b4 	movhi	r5,18
  1089ac:	01000044 	movi	r4,1
  1089b0:	18c00044 	addi	r3,r3,1
  1089b4:	10800044 	addi	r2,r2,1
  1089b8:	294e5204 	addi	r5,r5,14664
  1089bc:	41000115 	stw	r4,4(r8)
  1089c0:	41400015 	stw	r5,0(r8)
  1089c4:	d8c02015 	stw	r3,128(sp)
  1089c8:	d8801f15 	stw	r2,124(sp)
  1089cc:	010001c4 	movi	r4,7
  1089d0:	20805c16 	blt	r4,r2,108b44 <___vfprintf_internal_r+0x1bd0>
  1089d4:	42000204 	addi	r8,r8,8
  1089d8:	8800041e 	bne	r17,zero,1089ec <___vfprintf_internal_r+0x1a78>
  1089dc:	d8803317 	ldw	r2,204(sp)
  1089e0:	1000021e 	bne	r2,zero,1089ec <___vfprintf_internal_r+0x1a78>
  1089e4:	9080004c 	andi	r2,r18,1
  1089e8:	103be726 	beq	r2,zero,107988 <__alt_data_end+0xfffc7988>
  1089ec:	d9003717 	ldw	r4,220(sp)
  1089f0:	d8801f17 	ldw	r2,124(sp)
  1089f4:	d9403417 	ldw	r5,208(sp)
  1089f8:	20c7883a 	add	r3,r4,r3
  1089fc:	10800044 	addi	r2,r2,1
  108a00:	41000115 	stw	r4,4(r8)
  108a04:	41400015 	stw	r5,0(r8)
  108a08:	d8c02015 	stw	r3,128(sp)
  108a0c:	d8801f15 	stw	r2,124(sp)
  108a10:	010001c4 	movi	r4,7
  108a14:	20812116 	blt	r4,r2,108e9c <___vfprintf_internal_r+0x1f28>
  108a18:	42000204 	addi	r8,r8,8
  108a1c:	0463c83a 	sub	r17,zero,r17
  108a20:	0440730e 	bge	zero,r17,108bf0 <___vfprintf_internal_r+0x1c7c>
  108a24:	05800404 	movi	r22,16
  108a28:	b440860e 	bge	r22,r17,108c44 <___vfprintf_internal_r+0x1cd0>
  108a2c:	014004b4 	movhi	r5,18
  108a30:	294e6504 	addi	r5,r5,14740
  108a34:	d9402c15 	stw	r5,176(sp)
  108a38:	070001c4 	movi	fp,7
  108a3c:	dcc02d17 	ldw	r19,180(sp)
  108a40:	00000306 	br	108a50 <___vfprintf_internal_r+0x1adc>
  108a44:	42000204 	addi	r8,r8,8
  108a48:	8c7ffc04 	addi	r17,r17,-16
  108a4c:	b440800e 	bge	r22,r17,108c50 <___vfprintf_internal_r+0x1cdc>
  108a50:	18c00404 	addi	r3,r3,16
  108a54:	10800044 	addi	r2,r2,1
  108a58:	45000015 	stw	r20,0(r8)
  108a5c:	45800115 	stw	r22,4(r8)
  108a60:	d8c02015 	stw	r3,128(sp)
  108a64:	d8801f15 	stw	r2,124(sp)
  108a68:	e0bff60e 	bge	fp,r2,108a44 <__alt_data_end+0xfffc8a44>
  108a6c:	d9801e04 	addi	r6,sp,120
  108a70:	b80b883a 	mov	r5,r23
  108a74:	9809883a 	mov	r4,r19
  108a78:	01128340 	call	112834 <__sprint_r>
  108a7c:	103a411e 	bne	r2,zero,107384 <__alt_data_end+0xfffc7384>
  108a80:	d8c02017 	ldw	r3,128(sp)
  108a84:	d8801f17 	ldw	r2,124(sp)
  108a88:	da000404 	addi	r8,sp,16
  108a8c:	003fee06 	br	108a48 <__alt_data_end+0xfffc8a48>
  108a90:	00bfffc4 	movi	r2,-1
  108a94:	003a3f06 	br	107394 <__alt_data_end+0xfffc7394>
  108a98:	008011c4 	movi	r2,71
  108a9c:	1440b816 	blt	r2,r17,108d80 <___vfprintf_internal_r+0x1e0c>
  108aa0:	040004b4 	movhi	r16,18
  108aa4:	840e4404 	addi	r16,r16,14608
  108aa8:	00c000c4 	movi	r3,3
  108aac:	00bfdfc4 	movi	r2,-129
  108ab0:	d8c02915 	stw	r3,164(sp)
  108ab4:	90a4703a 	and	r18,r18,r2
  108ab8:	df002783 	ldbu	fp,158(sp)
  108abc:	d8c02b15 	stw	r3,172(sp)
  108ac0:	d8002a15 	stw	zero,168(sp)
  108ac4:	d8003215 	stw	zero,200(sp)
  108ac8:	003b0706 	br	1076e8 <__alt_data_end+0xfffc76e8>
  108acc:	d8c02e17 	ldw	r3,184(sp)
  108ad0:	1cc00017 	ldw	r19,0(r3)
  108ad4:	18c00104 	addi	r3,r3,4
  108ad8:	d8c02e15 	stw	r3,184(sp)
  108adc:	982dd7fa 	srai	r22,r19,31
  108ae0:	b005883a 	mov	r2,r22
  108ae4:	003a7706 	br	1074c4 <__alt_data_end+0xfffc74c4>
  108ae8:	d8c02e17 	ldw	r3,184(sp)
  108aec:	d9002f17 	ldw	r4,188(sp)
  108af0:	18800017 	ldw	r2,0(r3)
  108af4:	18c00104 	addi	r3,r3,4
  108af8:	d8c02e15 	stw	r3,184(sp)
  108afc:	11000015 	stw	r4,0(r2)
  108b00:	00395406 	br	107054 <__alt_data_end+0xfffc7054>
  108b04:	d9002e17 	ldw	r4,184(sp)
  108b08:	002d883a 	mov	r22,zero
  108b0c:	24c00017 	ldw	r19,0(r4)
  108b10:	21000104 	addi	r4,r4,4
  108b14:	d9002e15 	stw	r4,184(sp)
  108b18:	003c0706 	br	107b38 <__alt_data_end+0xfffc7b38>
  108b1c:	d9402e17 	ldw	r5,184(sp)
  108b20:	d8c02a17 	ldw	r3,168(sp)
  108b24:	002d883a 	mov	r22,zero
  108b28:	28800104 	addi	r2,r5,4
  108b2c:	2cc0000b 	ldhu	r19,0(r5)
  108b30:	183dc10e 	bge	r3,zero,108238 <__alt_data_end+0xfffc8238>
  108b34:	003f7506 	br	10890c <__alt_data_end+0xfffc890c>
  108b38:	040004b4 	movhi	r16,18
  108b3c:	840e4204 	addi	r16,r16,14600
  108b40:	003aa706 	br	1075e0 <__alt_data_end+0xfffc75e0>
  108b44:	d9002d17 	ldw	r4,180(sp)
  108b48:	d9801e04 	addi	r6,sp,120
  108b4c:	b80b883a 	mov	r5,r23
  108b50:	01128340 	call	112834 <__sprint_r>
  108b54:	103a0b1e 	bne	r2,zero,107384 <__alt_data_end+0xfffc7384>
  108b58:	dc402617 	ldw	r17,152(sp)
  108b5c:	d8c02017 	ldw	r3,128(sp)
  108b60:	da000404 	addi	r8,sp,16
  108b64:	003f9c06 	br	1089d8 <__alt_data_end+0xfffc89d8>
  108b68:	ac400043 	ldbu	r17,1(r21)
  108b6c:	84000814 	ori	r16,r16,32
  108b70:	ad400044 	addi	r21,r21,1
  108b74:	8c403fcc 	andi	r17,r17,255
  108b78:	8c40201c 	xori	r17,r17,128
  108b7c:	8c7fe004 	addi	r17,r17,-128
  108b80:	00395e06 	br	1070fc <__alt_data_end+0xfffc70fc>
  108b84:	d8c02e15 	stw	r3,184(sp)
  108b88:	0039883a 	mov	fp,zero
  108b8c:	003e3506 	br	108464 <__alt_data_end+0xfffc8464>
  108b90:	d9002d17 	ldw	r4,180(sp)
  108b94:	d9801e04 	addi	r6,sp,120
  108b98:	b80b883a 	mov	r5,r23
  108b9c:	01128340 	call	112834 <__sprint_r>
  108ba0:	1039f81e 	bne	r2,zero,107384 <__alt_data_end+0xfffc7384>
  108ba4:	d8c02017 	ldw	r3,128(sp)
  108ba8:	da000404 	addi	r8,sp,16
  108bac:	003cd006 	br	107ef0 <__alt_data_end+0xfffc7ef0>
  108bb0:	8009883a 	mov	r4,r16
  108bb4:	df003d15 	stw	fp,244(sp)
  108bb8:	01031f00 	call	1031f0 <strlen>
  108bbc:	d8802b15 	stw	r2,172(sp)
  108bc0:	da003d17 	ldw	r8,244(sp)
  108bc4:	103c200e 	bge	r2,zero,107c48 <__alt_data_end+0xfffc7c48>
  108bc8:	0005883a 	mov	r2,zero
  108bcc:	003c1e06 	br	107c48 <__alt_data_end+0xfffc7c48>
  108bd0:	d9002d17 	ldw	r4,180(sp)
  108bd4:	d9801e04 	addi	r6,sp,120
  108bd8:	b80b883a 	mov	r5,r23
  108bdc:	01128340 	call	112834 <__sprint_r>
  108be0:	1039e81e 	bne	r2,zero,107384 <__alt_data_end+0xfffc7384>
  108be4:	d8c02017 	ldw	r3,128(sp)
  108be8:	d8801f17 	ldw	r2,124(sp)
  108bec:	da000404 	addi	r8,sp,16
  108bf0:	d9403317 	ldw	r5,204(sp)
  108bf4:	10800044 	addi	r2,r2,1
  108bf8:	44000015 	stw	r16,0(r8)
  108bfc:	28c7883a 	add	r3,r5,r3
  108c00:	003b5b06 	br	107970 <__alt_data_end+0xfffc7970>
  108c04:	010004b4 	movhi	r4,18
  108c08:	210e6904 	addi	r4,r4,14756
  108c0c:	d9003515 	stw	r4,212(sp)
  108c10:	003af206 	br	1077dc <__alt_data_end+0xfffc77dc>
  108c14:	013fffc4 	movi	r4,-1
  108c18:	003a0806 	br	10743c <__alt_data_end+0xfffc743c>
  108c1c:	0023883a 	mov	r17,zero
  108c20:	003d9d06 	br	108298 <__alt_data_end+0xfffc8298>
  108c24:	d9002d17 	ldw	r4,180(sp)
  108c28:	d9801e04 	addi	r6,sp,120
  108c2c:	b80b883a 	mov	r5,r23
  108c30:	01128340 	call	112834 <__sprint_r>
  108c34:	1039d31e 	bne	r2,zero,107384 <__alt_data_end+0xfffc7384>
  108c38:	d8c02017 	ldw	r3,128(sp)
  108c3c:	da000404 	addi	r8,sp,16
  108c40:	003d9406 	br	108294 <__alt_data_end+0xfffc8294>
  108c44:	010004b4 	movhi	r4,18
  108c48:	210e6504 	addi	r4,r4,14740
  108c4c:	d9002c15 	stw	r4,176(sp)
  108c50:	d9002c17 	ldw	r4,176(sp)
  108c54:	1c47883a 	add	r3,r3,r17
  108c58:	10800044 	addi	r2,r2,1
  108c5c:	41000015 	stw	r4,0(r8)
  108c60:	44400115 	stw	r17,4(r8)
  108c64:	d8c02015 	stw	r3,128(sp)
  108c68:	d8801f15 	stw	r2,124(sp)
  108c6c:	010001c4 	movi	r4,7
  108c70:	20bfd716 	blt	r4,r2,108bd0 <__alt_data_end+0xfffc8bd0>
  108c74:	42000204 	addi	r8,r8,8
  108c78:	003fdd06 	br	108bf0 <__alt_data_end+0xfffc8bf0>
  108c7c:	d9002d17 	ldw	r4,180(sp)
  108c80:	d9801e04 	addi	r6,sp,120
  108c84:	b80b883a 	mov	r5,r23
  108c88:	01128340 	call	112834 <__sprint_r>
  108c8c:	1039bd1e 	bne	r2,zero,107384 <__alt_data_end+0xfffc7384>
  108c90:	d8802617 	ldw	r2,152(sp)
  108c94:	d8c02017 	ldw	r3,128(sp)
  108c98:	da000404 	addi	r8,sp,16
  108c9c:	003e1006 	br	1084e0 <__alt_data_end+0xfffc84e0>
  108ca0:	00800044 	movi	r2,1
  108ca4:	10803fcc 	andi	r2,r2,255
  108ca8:	00c00044 	movi	r3,1
  108cac:	10fa0d26 	beq	r2,r3,1074e4 <__alt_data_end+0xfffc74e4>
  108cb0:	00c00084 	movi	r3,2
  108cb4:	10fbaf26 	beq	r2,r3,107b74 <__alt_data_end+0xfffc7b74>
  108cb8:	003a6d06 	br	107670 <__alt_data_end+0xfffc7670>
  108cbc:	010004b4 	movhi	r4,18
  108cc0:	210e6904 	addi	r4,r4,14756
  108cc4:	d9003515 	stw	r4,212(sp)
  108cc8:	003b5406 	br	107a1c <__alt_data_end+0xfffc7a1c>
  108ccc:	d8802a17 	ldw	r2,168(sp)
  108cd0:	00c00184 	movi	r3,6
  108cd4:	1880012e 	bgeu	r3,r2,108cdc <___vfprintf_internal_r+0x1d68>
  108cd8:	1805883a 	mov	r2,r3
  108cdc:	d8802b15 	stw	r2,172(sp)
  108ce0:	1000ef16 	blt	r2,zero,1090a0 <___vfprintf_internal_r+0x212c>
  108ce4:	040004b4 	movhi	r16,18
  108ce8:	d8802915 	stw	r2,164(sp)
  108cec:	dcc02e15 	stw	r19,184(sp)
  108cf0:	d8002a15 	stw	zero,168(sp)
  108cf4:	d8003215 	stw	zero,200(sp)
  108cf8:	840e5004 	addi	r16,r16,14656
  108cfc:	0039883a 	mov	fp,zero
  108d00:	003a8006 	br	107704 <__alt_data_end+0xfffc7704>
  108d04:	0021883a 	mov	r16,zero
  108d08:	003e0706 	br	108528 <__alt_data_end+0xfffc8528>
  108d0c:	d9002d17 	ldw	r4,180(sp)
  108d10:	d9801e04 	addi	r6,sp,120
  108d14:	b80b883a 	mov	r5,r23
  108d18:	01128340 	call	112834 <__sprint_r>
  108d1c:	1039991e 	bne	r2,zero,107384 <__alt_data_end+0xfffc7384>
  108d20:	d8802617 	ldw	r2,152(sp)
  108d24:	d9403317 	ldw	r5,204(sp)
  108d28:	d8c02017 	ldw	r3,128(sp)
  108d2c:	da000404 	addi	r8,sp,16
  108d30:	2885c83a 	sub	r2,r5,r2
  108d34:	003dfb06 	br	108524 <__alt_data_end+0xfffc8524>
  108d38:	9080004c 	andi	r2,r18,1
  108d3c:	103e8f1e 	bne	r2,zero,10877c <__alt_data_end+0xfffc877c>
  108d40:	d8802117 	ldw	r2,132(sp)
  108d44:	003e9e06 	br	1087c0 <__alt_data_end+0xfffc87c0>
  108d48:	1025883a 	mov	r18,r2
  108d4c:	0039883a 	mov	fp,zero
  108d50:	00800084 	movi	r2,2
  108d54:	003fd306 	br	108ca4 <__alt_data_end+0xfffc8ca4>
  108d58:	07000b44 	movi	fp,45
  108d5c:	df002785 	stb	fp,158(sp)
  108d60:	003a1b06 	br	1075d0 <__alt_data_end+0xfffc75d0>
  108d64:	00c00b44 	movi	r3,45
  108d68:	d8c02785 	stb	r3,158(sp)
  108d6c:	d8802915 	stw	r2,164(sp)
  108d70:	dc802c17 	ldw	r18,176(sp)
  108d74:	d8002a15 	stw	zero,168(sp)
  108d78:	07000b44 	movi	fp,45
  108d7c:	003a5e06 	br	1076f8 <__alt_data_end+0xfffc76f8>
  108d80:	040004b4 	movhi	r16,18
  108d84:	840e4504 	addi	r16,r16,14612
  108d88:	003f4706 	br	108aa8 <__alt_data_end+0xfffc8aa8>
  108d8c:	d9002e17 	ldw	r4,184(sp)
  108d90:	d9402f17 	ldw	r5,188(sp)
  108d94:	20800017 	ldw	r2,0(r4)
  108d98:	21000104 	addi	r4,r4,4
  108d9c:	d9002e15 	stw	r4,184(sp)
  108da0:	11400015 	stw	r5,0(r2)
  108da4:	0038ab06 	br	107054 <__alt_data_end+0xfffc7054>
  108da8:	dd802617 	ldw	r22,152(sp)
  108dac:	00bfff44 	movi	r2,-3
  108db0:	b0801c16 	blt	r22,r2,108e24 <___vfprintf_internal_r+0x1eb0>
  108db4:	d9402a17 	ldw	r5,168(sp)
  108db8:	2d801a16 	blt	r5,r22,108e24 <___vfprintf_internal_r+0x1eb0>
  108dbc:	dd803215 	stw	r22,200(sp)
  108dc0:	003e8906 	br	1087e8 <__alt_data_end+0xfffc87e8>
  108dc4:	010004b4 	movhi	r4,18
  108dc8:	210e6504 	addi	r4,r4,14740
  108dcc:	d9002c15 	stw	r4,176(sp)
  108dd0:	003c9106 	br	108018 <__alt_data_end+0xfffc8018>
  108dd4:	e005883a 	mov	r2,fp
  108dd8:	003e7906 	br	1087c0 <__alt_data_end+0xfffc87c0>
  108ddc:	d9002a17 	ldw	r4,168(sp)
  108de0:	df002783 	ldbu	fp,158(sp)
  108de4:	dcc02e15 	stw	r19,184(sp)
  108de8:	d9002915 	stw	r4,164(sp)
  108dec:	d9002b15 	stw	r4,172(sp)
  108df0:	d8002a15 	stw	zero,168(sp)
  108df4:	d8003215 	stw	zero,200(sp)
  108df8:	003a3b06 	br	1076e8 <__alt_data_end+0xfffc76e8>
  108dfc:	9080004c 	andi	r2,r18,1
  108e00:	0039883a 	mov	fp,zero
  108e04:	10000426 	beq	r2,zero,108e18 <___vfprintf_internal_r+0x1ea4>
  108e08:	00800c04 	movi	r2,48
  108e0c:	dc001dc4 	addi	r16,sp,119
  108e10:	d8801dc5 	stb	r2,119(sp)
  108e14:	003b6406 	br	107ba8 <__alt_data_end+0xfffc7ba8>
  108e18:	d8002b15 	stw	zero,172(sp)
  108e1c:	dc001e04 	addi	r16,sp,120
  108e20:	003a2b06 	br	1076d0 <__alt_data_end+0xfffc76d0>
  108e24:	8c7fff84 	addi	r17,r17,-2
  108e28:	b5bfffc4 	addi	r22,r22,-1
  108e2c:	dd802615 	stw	r22,152(sp)
  108e30:	dc4022c5 	stb	r17,139(sp)
  108e34:	b000bf16 	blt	r22,zero,109134 <___vfprintf_internal_r+0x21c0>
  108e38:	00800ac4 	movi	r2,43
  108e3c:	d8802305 	stb	r2,140(sp)
  108e40:	00800244 	movi	r2,9
  108e44:	15807016 	blt	r2,r22,109008 <___vfprintf_internal_r+0x2094>
  108e48:	00800c04 	movi	r2,48
  108e4c:	b5800c04 	addi	r22,r22,48
  108e50:	d8802345 	stb	r2,141(sp)
  108e54:	dd802385 	stb	r22,142(sp)
  108e58:	d88023c4 	addi	r2,sp,143
  108e5c:	df0022c4 	addi	fp,sp,139
  108e60:	d8c03317 	ldw	r3,204(sp)
  108e64:	1739c83a 	sub	fp,r2,fp
  108e68:	d9003317 	ldw	r4,204(sp)
  108e6c:	e0c7883a 	add	r3,fp,r3
  108e70:	df003a15 	stw	fp,232(sp)
  108e74:	d8c02b15 	stw	r3,172(sp)
  108e78:	00800044 	movi	r2,1
  108e7c:	1100b30e 	bge	r2,r4,10914c <___vfprintf_internal_r+0x21d8>
  108e80:	d8c02b17 	ldw	r3,172(sp)
  108e84:	18c00044 	addi	r3,r3,1
  108e88:	d8c02b15 	stw	r3,172(sp)
  108e8c:	1805883a 	mov	r2,r3
  108e90:	1800ac16 	blt	r3,zero,109144 <___vfprintf_internal_r+0x21d0>
  108e94:	d8003215 	stw	zero,200(sp)
  108e98:	003e5d06 	br	108810 <__alt_data_end+0xfffc8810>
  108e9c:	d9002d17 	ldw	r4,180(sp)
  108ea0:	d9801e04 	addi	r6,sp,120
  108ea4:	b80b883a 	mov	r5,r23
  108ea8:	01128340 	call	112834 <__sprint_r>
  108eac:	1039351e 	bne	r2,zero,107384 <__alt_data_end+0xfffc7384>
  108eb0:	dc402617 	ldw	r17,152(sp)
  108eb4:	d8c02017 	ldw	r3,128(sp)
  108eb8:	d8801f17 	ldw	r2,124(sp)
  108ebc:	da000404 	addi	r8,sp,16
  108ec0:	003ed606 	br	108a1c <__alt_data_end+0xfffc8a1c>
  108ec4:	182b883a 	mov	r21,r3
  108ec8:	d8002a15 	stw	zero,168(sp)
  108ecc:	00388c06 	br	107100 <__alt_data_end+0xfffc7100>
  108ed0:	d8802a17 	ldw	r2,168(sp)
  108ed4:	103e071e 	bne	r2,zero,1086f4 <__alt_data_end+0xfffc86f4>
  108ed8:	dc002a15 	stw	r16,168(sp)
  108edc:	003e0506 	br	1086f4 <__alt_data_end+0xfffc86f4>
  108ee0:	d9002a17 	ldw	r4,168(sp)
  108ee4:	20c00044 	addi	r3,r4,1
  108ee8:	003e0f06 	br	108728 <__alt_data_end+0xfffc8728>
  108eec:	01400184 	movi	r5,6
  108ef0:	d9402a15 	stw	r5,168(sp)
  108ef4:	003dff06 	br	1086f4 <__alt_data_end+0xfffc86f4>
  108ef8:	d8802104 	addi	r2,sp,132
  108efc:	d8800315 	stw	r2,12(sp)
  108f00:	d8802504 	addi	r2,sp,148
  108f04:	d8800215 	stw	r2,8(sp)
  108f08:	d8802604 	addi	r2,sp,152
  108f0c:	d8800115 	stw	r2,4(sp)
  108f10:	d8802a17 	ldw	r2,168(sp)
  108f14:	d9403617 	ldw	r5,216(sp)
  108f18:	d9002d17 	ldw	r4,180(sp)
  108f1c:	d8800015 	stw	r2,0(sp)
  108f20:	01c000c4 	movi	r7,3
  108f24:	980d883a 	mov	r6,r19
  108f28:	da003d15 	stw	r8,244(sp)
  108f2c:	01097580 	call	109758 <_dtoa_r>
  108f30:	d8c02a17 	ldw	r3,168(sp)
  108f34:	da003d17 	ldw	r8,244(sp)
  108f38:	1021883a 	mov	r16,r2
  108f3c:	10f9883a 	add	fp,r2,r3
  108f40:	81000007 	ldb	r4,0(r16)
  108f44:	00800c04 	movi	r2,48
  108f48:	20805e26 	beq	r4,r2,1090c4 <___vfprintf_internal_r+0x2150>
  108f4c:	d8c02617 	ldw	r3,152(sp)
  108f50:	e0f9883a 	add	fp,fp,r3
  108f54:	003e0a06 	br	108780 <__alt_data_end+0xfffc8780>
  108f58:	00c00b44 	movi	r3,45
  108f5c:	24e0003c 	xorhi	r19,r4,32768
  108f60:	d8c02905 	stb	r3,164(sp)
  108f64:	003de906 	br	10870c <__alt_data_end+0xfffc870c>
  108f68:	d8c03217 	ldw	r3,200(sp)
  108f6c:	00c07a0e 	bge	zero,r3,109158 <___vfprintf_internal_r+0x21e4>
  108f70:	00800044 	movi	r2,1
  108f74:	d9003317 	ldw	r4,204(sp)
  108f78:	1105883a 	add	r2,r2,r4
  108f7c:	d8802b15 	stw	r2,172(sp)
  108f80:	10004e16 	blt	r2,zero,1090bc <___vfprintf_internal_r+0x2148>
  108f84:	044019c4 	movi	r17,103
  108f88:	003e2106 	br	108810 <__alt_data_end+0xfffc8810>
  108f8c:	d9002a17 	ldw	r4,168(sp)
  108f90:	d8802104 	addi	r2,sp,132
  108f94:	d8800315 	stw	r2,12(sp)
  108f98:	d9000015 	stw	r4,0(sp)
  108f9c:	d8802504 	addi	r2,sp,148
  108fa0:	d9403617 	ldw	r5,216(sp)
  108fa4:	d9002d17 	ldw	r4,180(sp)
  108fa8:	d8800215 	stw	r2,8(sp)
  108fac:	d8802604 	addi	r2,sp,152
  108fb0:	d8800115 	stw	r2,4(sp)
  108fb4:	01c000c4 	movi	r7,3
  108fb8:	980d883a 	mov	r6,r19
  108fbc:	da003d15 	stw	r8,244(sp)
  108fc0:	01097580 	call	109758 <_dtoa_r>
  108fc4:	d8c02a17 	ldw	r3,168(sp)
  108fc8:	da003d17 	ldw	r8,244(sp)
  108fcc:	1021883a 	mov	r16,r2
  108fd0:	00801184 	movi	r2,70
  108fd4:	80f9883a 	add	fp,r16,r3
  108fd8:	88bfd926 	beq	r17,r2,108f40 <__alt_data_end+0xfffc8f40>
  108fdc:	003de806 	br	108780 <__alt_data_end+0xfffc8780>
  108fe0:	d9002a17 	ldw	r4,168(sp)
  108fe4:	00c04d0e 	bge	zero,r3,10911c <___vfprintf_internal_r+0x21a8>
  108fe8:	2000441e 	bne	r4,zero,1090fc <___vfprintf_internal_r+0x2188>
  108fec:	9480004c 	andi	r18,r18,1
  108ff0:	9000421e 	bne	r18,zero,1090fc <___vfprintf_internal_r+0x2188>
  108ff4:	1805883a 	mov	r2,r3
  108ff8:	18006f16 	blt	r3,zero,1091b8 <___vfprintf_internal_r+0x2244>
  108ffc:	d8c03217 	ldw	r3,200(sp)
  109000:	d8c02b15 	stw	r3,172(sp)
  109004:	003e0206 	br	108810 <__alt_data_end+0xfffc8810>
  109008:	df0022c4 	addi	fp,sp,139
  10900c:	dc002a15 	stw	r16,168(sp)
  109010:	4027883a 	mov	r19,r8
  109014:	e021883a 	mov	r16,fp
  109018:	b009883a 	mov	r4,r22
  10901c:	01400284 	movi	r5,10
  109020:	0115f440 	call	115f44 <__modsi3>
  109024:	10800c04 	addi	r2,r2,48
  109028:	843fffc4 	addi	r16,r16,-1
  10902c:	b009883a 	mov	r4,r22
  109030:	01400284 	movi	r5,10
  109034:	80800005 	stb	r2,0(r16)
  109038:	0115ec00 	call	115ec0 <__divsi3>
  10903c:	102d883a 	mov	r22,r2
  109040:	00800244 	movi	r2,9
  109044:	15bff416 	blt	r2,r22,109018 <__alt_data_end+0xfffc9018>
  109048:	9811883a 	mov	r8,r19
  10904c:	b0800c04 	addi	r2,r22,48
  109050:	8027883a 	mov	r19,r16
  109054:	997fffc4 	addi	r5,r19,-1
  109058:	98bfffc5 	stb	r2,-1(r19)
  10905c:	dc002a17 	ldw	r16,168(sp)
  109060:	2f006d2e 	bgeu	r5,fp,109218 <___vfprintf_internal_r+0x22a4>
  109064:	d9c02384 	addi	r7,sp,142
  109068:	3ccfc83a 	sub	r7,r7,r19
  10906c:	d9002344 	addi	r4,sp,141
  109070:	e1cf883a 	add	r7,fp,r7
  109074:	00000106 	br	10907c <___vfprintf_internal_r+0x2108>
  109078:	28800003 	ldbu	r2,0(r5)
  10907c:	20800005 	stb	r2,0(r4)
  109080:	21000044 	addi	r4,r4,1
  109084:	29400044 	addi	r5,r5,1
  109088:	393ffb1e 	bne	r7,r4,109078 <__alt_data_end+0xfffc9078>
  10908c:	d8802304 	addi	r2,sp,140
  109090:	14c5c83a 	sub	r2,r2,r19
  109094:	d8c02344 	addi	r3,sp,141
  109098:	1885883a 	add	r2,r3,r2
  10909c:	003f7006 	br	108e60 <__alt_data_end+0xfffc8e60>
  1090a0:	0005883a 	mov	r2,zero
  1090a4:	003f0f06 	br	108ce4 <__alt_data_end+0xfffc8ce4>
  1090a8:	d8c03217 	ldw	r3,200(sp)
  1090ac:	18c00044 	addi	r3,r3,1
  1090b0:	d8c02b15 	stw	r3,172(sp)
  1090b4:	1805883a 	mov	r2,r3
  1090b8:	183fb20e 	bge	r3,zero,108f84 <__alt_data_end+0xfffc8f84>
  1090bc:	0005883a 	mov	r2,zero
  1090c0:	003fb006 	br	108f84 <__alt_data_end+0xfffc8f84>
  1090c4:	d9003617 	ldw	r4,216(sp)
  1090c8:	000d883a 	mov	r6,zero
  1090cc:	000f883a 	mov	r7,zero
  1090d0:	980b883a 	mov	r5,r19
  1090d4:	d8c03c15 	stw	r3,240(sp)
  1090d8:	da003d15 	stw	r8,244(sp)
  1090dc:	01175140 	call	117514 <__eqdf2>
  1090e0:	d8c03c17 	ldw	r3,240(sp)
  1090e4:	da003d17 	ldw	r8,244(sp)
  1090e8:	103f9826 	beq	r2,zero,108f4c <__alt_data_end+0xfffc8f4c>
  1090ec:	00800044 	movi	r2,1
  1090f0:	10c7c83a 	sub	r3,r2,r3
  1090f4:	d8c02615 	stw	r3,152(sp)
  1090f8:	003f9506 	br	108f50 <__alt_data_end+0xfffc8f50>
  1090fc:	d9002a17 	ldw	r4,168(sp)
  109100:	d8c03217 	ldw	r3,200(sp)
  109104:	20800044 	addi	r2,r4,1
  109108:	1885883a 	add	r2,r3,r2
  10910c:	d8802b15 	stw	r2,172(sp)
  109110:	103dbf0e 	bge	r2,zero,108810 <__alt_data_end+0xfffc8810>
  109114:	0005883a 	mov	r2,zero
  109118:	003dbd06 	br	108810 <__alt_data_end+0xfffc8810>
  10911c:	2000201e 	bne	r4,zero,1091a0 <___vfprintf_internal_r+0x222c>
  109120:	9480004c 	andi	r18,r18,1
  109124:	90001e1e 	bne	r18,zero,1091a0 <___vfprintf_internal_r+0x222c>
  109128:	00800044 	movi	r2,1
  10912c:	d8802b15 	stw	r2,172(sp)
  109130:	003db706 	br	108810 <__alt_data_end+0xfffc8810>
  109134:	00800b44 	movi	r2,45
  109138:	05adc83a 	sub	r22,zero,r22
  10913c:	d8802305 	stb	r2,140(sp)
  109140:	003f3f06 	br	108e40 <__alt_data_end+0xfffc8e40>
  109144:	0005883a 	mov	r2,zero
  109148:	003f5206 	br	108e94 <__alt_data_end+0xfffc8e94>
  10914c:	90a4703a 	and	r18,r18,r2
  109150:	903f4e26 	beq	r18,zero,108e8c <__alt_data_end+0xfffc8e8c>
  109154:	003f4a06 	br	108e80 <__alt_data_end+0xfffc8e80>
  109158:	00800084 	movi	r2,2
  10915c:	10c5c83a 	sub	r2,r2,r3
  109160:	003f8406 	br	108f74 <__alt_data_end+0xfffc8f74>
  109164:	d9402e17 	ldw	r5,184(sp)
  109168:	d9002e17 	ldw	r4,184(sp)
  10916c:	ac400043 	ldbu	r17,1(r21)
  109170:	29400017 	ldw	r5,0(r5)
  109174:	20800104 	addi	r2,r4,4
  109178:	d8802e15 	stw	r2,184(sp)
  10917c:	d9402a15 	stw	r5,168(sp)
  109180:	182b883a 	mov	r21,r3
  109184:	283e7b0e 	bge	r5,zero,108b74 <__alt_data_end+0xfffc8b74>
  109188:	8c403fcc 	andi	r17,r17,255
  10918c:	017fffc4 	movi	r5,-1
  109190:	8c40201c 	xori	r17,r17,128
  109194:	d9402a15 	stw	r5,168(sp)
  109198:	8c7fe004 	addi	r17,r17,-128
  10919c:	0037d706 	br	1070fc <__alt_data_end+0xfffc70fc>
  1091a0:	d8c02a17 	ldw	r3,168(sp)
  1091a4:	18c00084 	addi	r3,r3,2
  1091a8:	d8c02b15 	stw	r3,172(sp)
  1091ac:	1805883a 	mov	r2,r3
  1091b0:	183d970e 	bge	r3,zero,108810 <__alt_data_end+0xfffc8810>
  1091b4:	003fd706 	br	109114 <__alt_data_end+0xfffc9114>
  1091b8:	0005883a 	mov	r2,zero
  1091bc:	003f8f06 	br	108ffc <__alt_data_end+0xfffc8ffc>
  1091c0:	9080004c 	andi	r2,r18,1
  1091c4:	103f821e 	bne	r2,zero,108fd0 <__alt_data_end+0xfffc8fd0>
  1091c8:	d8802117 	ldw	r2,132(sp)
  1091cc:	1405c83a 	sub	r2,r2,r16
  1091d0:	d8803315 	stw	r2,204(sp)
  1091d4:	b47ef426 	beq	r22,r17,108da8 <__alt_data_end+0xfffc8da8>
  1091d8:	dd802617 	ldw	r22,152(sp)
  1091dc:	003f1206 	br	108e28 <__alt_data_end+0xfffc8e28>
  1091e0:	d8c02b03 	ldbu	r3,172(sp)
  1091e4:	d8c02785 	stb	r3,158(sp)
  1091e8:	0038df06 	br	107568 <__alt_data_end+0xfffc7568>
  1091ec:	d8c02b03 	ldbu	r3,172(sp)
  1091f0:	d8c02785 	stb	r3,158(sp)
  1091f4:	0038aa06 	br	1074a0 <__alt_data_end+0xfffc74a0>
  1091f8:	d8c02b03 	ldbu	r3,172(sp)
  1091fc:	d8c02785 	stb	r3,158(sp)
  109200:	003a4306 	br	107b10 <__alt_data_end+0xfffc7b10>
  109204:	d8c02b03 	ldbu	r3,172(sp)
  109208:	d8c02785 	stb	r3,158(sp)
  10920c:	003af506 	br	107de4 <__alt_data_end+0xfffc7de4>
  109210:	0005883a 	mov	r2,zero
  109214:	003d7b06 	br	108804 <__alt_data_end+0xfffc8804>
  109218:	d8802344 	addi	r2,sp,141
  10921c:	003f1006 	br	108e60 <__alt_data_end+0xfffc8e60>
  109220:	d8c02b03 	ldbu	r3,172(sp)
  109224:	d8c02785 	stb	r3,158(sp)
  109228:	0038fd06 	br	107620 <__alt_data_end+0xfffc7620>
  10922c:	d8c02b03 	ldbu	r3,172(sp)
  109230:	d8c02785 	stb	r3,158(sp)
  109234:	003a9706 	br	107c94 <__alt_data_end+0xfffc7c94>
  109238:	d8c02b03 	ldbu	r3,172(sp)
  10923c:	d8c02785 	stb	r3,158(sp)
  109240:	003a1806 	br	107aa4 <__alt_data_end+0xfffc7aa4>
  109244:	d8c02b03 	ldbu	r3,172(sp)
  109248:	d8c02785 	stb	r3,158(sp)
  10924c:	003abe06 	br	107d48 <__alt_data_end+0xfffc7d48>

00109250 <__vfprintf_internal>:
  109250:	008004b4 	movhi	r2,18
  109254:	10972d04 	addi	r2,r2,23732
  109258:	300f883a 	mov	r7,r6
  10925c:	280d883a 	mov	r6,r5
  109260:	200b883a 	mov	r5,r4
  109264:	11000017 	ldw	r4,0(r2)
  109268:	0106f741 	jmpi	106f74 <___vfprintf_internal_r>

0010926c <__sbprintf>:
  10926c:	2880030b 	ldhu	r2,12(r5)
  109270:	2ac01917 	ldw	r11,100(r5)
  109274:	2a80038b 	ldhu	r10,14(r5)
  109278:	2a400717 	ldw	r9,28(r5)
  10927c:	2a000917 	ldw	r8,36(r5)
  109280:	defee204 	addi	sp,sp,-1144
  109284:	00c10004 	movi	r3,1024
  109288:	dc011a15 	stw	r16,1128(sp)
  10928c:	10bfff4c 	andi	r2,r2,65533
  109290:	2821883a 	mov	r16,r5
  109294:	d8cb883a 	add	r5,sp,r3
  109298:	dc811c15 	stw	r18,1136(sp)
  10929c:	dc411b15 	stw	r17,1132(sp)
  1092a0:	dfc11d15 	stw	ra,1140(sp)
  1092a4:	2025883a 	mov	r18,r4
  1092a8:	d881030d 	sth	r2,1036(sp)
  1092ac:	dac11915 	stw	r11,1124(sp)
  1092b0:	da81038d 	sth	r10,1038(sp)
  1092b4:	da410715 	stw	r9,1052(sp)
  1092b8:	da010915 	stw	r8,1060(sp)
  1092bc:	dec10015 	stw	sp,1024(sp)
  1092c0:	dec10415 	stw	sp,1040(sp)
  1092c4:	d8c10215 	stw	r3,1032(sp)
  1092c8:	d8c10515 	stw	r3,1044(sp)
  1092cc:	d8010615 	stw	zero,1048(sp)
  1092d0:	0106f740 	call	106f74 <___vfprintf_internal_r>
  1092d4:	1023883a 	mov	r17,r2
  1092d8:	10000416 	blt	r2,zero,1092ec <__sbprintf+0x80>
  1092dc:	d9410004 	addi	r5,sp,1024
  1092e0:	9009883a 	mov	r4,r18
  1092e4:	010b1000 	call	10b100 <_fflush_r>
  1092e8:	10000d1e 	bne	r2,zero,109320 <__sbprintf+0xb4>
  1092ec:	d881030b 	ldhu	r2,1036(sp)
  1092f0:	1080100c 	andi	r2,r2,64
  1092f4:	10000326 	beq	r2,zero,109304 <__sbprintf+0x98>
  1092f8:	8080030b 	ldhu	r2,12(r16)
  1092fc:	10801014 	ori	r2,r2,64
  109300:	8080030d 	sth	r2,12(r16)
  109304:	8805883a 	mov	r2,r17
  109308:	dfc11d17 	ldw	ra,1140(sp)
  10930c:	dc811c17 	ldw	r18,1136(sp)
  109310:	dc411b17 	ldw	r17,1132(sp)
  109314:	dc011a17 	ldw	r16,1128(sp)
  109318:	dec11e04 	addi	sp,sp,1144
  10931c:	f800283a 	ret
  109320:	047fffc4 	movi	r17,-1
  109324:	003ff106 	br	1092ec <__alt_data_end+0xfffc92ec>

00109328 <_write_r>:
  109328:	defffd04 	addi	sp,sp,-12
  10932c:	2805883a 	mov	r2,r5
  109330:	dc000015 	stw	r16,0(sp)
  109334:	040004b4 	movhi	r16,18
  109338:	dc400115 	stw	r17,4(sp)
  10933c:	300b883a 	mov	r5,r6
  109340:	841e5904 	addi	r16,r16,31076
  109344:	2023883a 	mov	r17,r4
  109348:	380d883a 	mov	r6,r7
  10934c:	1009883a 	mov	r4,r2
  109350:	dfc00215 	stw	ra,8(sp)
  109354:	80000015 	stw	zero,0(r16)
  109358:	01195700 	call	119570 <write>
  10935c:	00ffffc4 	movi	r3,-1
  109360:	10c00526 	beq	r2,r3,109378 <_write_r+0x50>
  109364:	dfc00217 	ldw	ra,8(sp)
  109368:	dc400117 	ldw	r17,4(sp)
  10936c:	dc000017 	ldw	r16,0(sp)
  109370:	dec00304 	addi	sp,sp,12
  109374:	f800283a 	ret
  109378:	80c00017 	ldw	r3,0(r16)
  10937c:	183ff926 	beq	r3,zero,109364 <__alt_data_end+0xfffc9364>
  109380:	88c00015 	stw	r3,0(r17)
  109384:	003ff706 	br	109364 <__alt_data_end+0xfffc9364>

00109388 <__swsetup_r>:
  109388:	008004b4 	movhi	r2,18
  10938c:	defffd04 	addi	sp,sp,-12
  109390:	10972d04 	addi	r2,r2,23732
  109394:	dc400115 	stw	r17,4(sp)
  109398:	2023883a 	mov	r17,r4
  10939c:	11000017 	ldw	r4,0(r2)
  1093a0:	dc000015 	stw	r16,0(sp)
  1093a4:	dfc00215 	stw	ra,8(sp)
  1093a8:	2821883a 	mov	r16,r5
  1093ac:	20000226 	beq	r4,zero,1093b8 <__swsetup_r+0x30>
  1093b0:	20800e17 	ldw	r2,56(r4)
  1093b4:	10003126 	beq	r2,zero,10947c <__swsetup_r+0xf4>
  1093b8:	8080030b 	ldhu	r2,12(r16)
  1093bc:	10c0020c 	andi	r3,r2,8
  1093c0:	1009883a 	mov	r4,r2
  1093c4:	18000f26 	beq	r3,zero,109404 <__swsetup_r+0x7c>
  1093c8:	80c00417 	ldw	r3,16(r16)
  1093cc:	18001526 	beq	r3,zero,109424 <__swsetup_r+0x9c>
  1093d0:	1100004c 	andi	r4,r2,1
  1093d4:	20001c1e 	bne	r4,zero,109448 <__swsetup_r+0xc0>
  1093d8:	1080008c 	andi	r2,r2,2
  1093dc:	1000291e 	bne	r2,zero,109484 <__swsetup_r+0xfc>
  1093e0:	80800517 	ldw	r2,20(r16)
  1093e4:	80800215 	stw	r2,8(r16)
  1093e8:	18001c26 	beq	r3,zero,10945c <__swsetup_r+0xd4>
  1093ec:	0005883a 	mov	r2,zero
  1093f0:	dfc00217 	ldw	ra,8(sp)
  1093f4:	dc400117 	ldw	r17,4(sp)
  1093f8:	dc000017 	ldw	r16,0(sp)
  1093fc:	dec00304 	addi	sp,sp,12
  109400:	f800283a 	ret
  109404:	2080040c 	andi	r2,r4,16
  109408:	10002e26 	beq	r2,zero,1094c4 <__swsetup_r+0x13c>
  10940c:	2080010c 	andi	r2,r4,4
  109410:	10001e1e 	bne	r2,zero,10948c <__swsetup_r+0x104>
  109414:	80c00417 	ldw	r3,16(r16)
  109418:	20800214 	ori	r2,r4,8
  10941c:	8080030d 	sth	r2,12(r16)
  109420:	183feb1e 	bne	r3,zero,1093d0 <__alt_data_end+0xfffc93d0>
  109424:	1100a00c 	andi	r4,r2,640
  109428:	01408004 	movi	r5,512
  10942c:	217fe826 	beq	r4,r5,1093d0 <__alt_data_end+0xfffc93d0>
  109430:	800b883a 	mov	r5,r16
  109434:	8809883a 	mov	r4,r17
  109438:	010bbf40 	call	10bbf4 <__smakebuf_r>
  10943c:	8080030b 	ldhu	r2,12(r16)
  109440:	80c00417 	ldw	r3,16(r16)
  109444:	003fe206 	br	1093d0 <__alt_data_end+0xfffc93d0>
  109448:	80800517 	ldw	r2,20(r16)
  10944c:	80000215 	stw	zero,8(r16)
  109450:	0085c83a 	sub	r2,zero,r2
  109454:	80800615 	stw	r2,24(r16)
  109458:	183fe41e 	bne	r3,zero,1093ec <__alt_data_end+0xfffc93ec>
  10945c:	80c0030b 	ldhu	r3,12(r16)
  109460:	0005883a 	mov	r2,zero
  109464:	1900200c 	andi	r4,r3,128
  109468:	203fe126 	beq	r4,zero,1093f0 <__alt_data_end+0xfffc93f0>
  10946c:	18c01014 	ori	r3,r3,64
  109470:	80c0030d 	sth	r3,12(r16)
  109474:	00bfffc4 	movi	r2,-1
  109478:	003fdd06 	br	1093f0 <__alt_data_end+0xfffc93f0>
  10947c:	0101c500 	call	101c50 <__sinit>
  109480:	003fcd06 	br	1093b8 <__alt_data_end+0xfffc93b8>
  109484:	0005883a 	mov	r2,zero
  109488:	003fd606 	br	1093e4 <__alt_data_end+0xfffc93e4>
  10948c:	81400c17 	ldw	r5,48(r16)
  109490:	28000626 	beq	r5,zero,1094ac <__swsetup_r+0x124>
  109494:	80801004 	addi	r2,r16,64
  109498:	28800326 	beq	r5,r2,1094a8 <__swsetup_r+0x120>
  10949c:	8809883a 	mov	r4,r17
  1094a0:	010b2b00 	call	10b2b0 <_free_r>
  1094a4:	8100030b 	ldhu	r4,12(r16)
  1094a8:	80000c15 	stw	zero,48(r16)
  1094ac:	80c00417 	ldw	r3,16(r16)
  1094b0:	00bff6c4 	movi	r2,-37
  1094b4:	1108703a 	and	r4,r2,r4
  1094b8:	80000115 	stw	zero,4(r16)
  1094bc:	80c00015 	stw	r3,0(r16)
  1094c0:	003fd506 	br	109418 <__alt_data_end+0xfffc9418>
  1094c4:	00800244 	movi	r2,9
  1094c8:	88800015 	stw	r2,0(r17)
  1094cc:	20801014 	ori	r2,r4,64
  1094d0:	8080030d 	sth	r2,12(r16)
  1094d4:	00bfffc4 	movi	r2,-1
  1094d8:	003fc506 	br	1093f0 <__alt_data_end+0xfffc93f0>

001094dc <_close_r>:
  1094dc:	defffd04 	addi	sp,sp,-12
  1094e0:	dc000015 	stw	r16,0(sp)
  1094e4:	040004b4 	movhi	r16,18
  1094e8:	dc400115 	stw	r17,4(sp)
  1094ec:	841e5904 	addi	r16,r16,31076
  1094f0:	2023883a 	mov	r17,r4
  1094f4:	2809883a 	mov	r4,r5
  1094f8:	dfc00215 	stw	ra,8(sp)
  1094fc:	80000015 	stw	zero,0(r16)
  109500:	0118d200 	call	118d20 <close>
  109504:	00ffffc4 	movi	r3,-1
  109508:	10c00526 	beq	r2,r3,109520 <_close_r+0x44>
  10950c:	dfc00217 	ldw	ra,8(sp)
  109510:	dc400117 	ldw	r17,4(sp)
  109514:	dc000017 	ldw	r16,0(sp)
  109518:	dec00304 	addi	sp,sp,12
  10951c:	f800283a 	ret
  109520:	80c00017 	ldw	r3,0(r16)
  109524:	183ff926 	beq	r3,zero,10950c <__alt_data_end+0xfffc950c>
  109528:	88c00015 	stw	r3,0(r17)
  10952c:	003ff706 	br	10950c <__alt_data_end+0xfffc950c>

00109530 <quorem>:
  109530:	defff204 	addi	sp,sp,-56
  109534:	ddc00b15 	stw	r23,44(sp)
  109538:	20800417 	ldw	r2,16(r4)
  10953c:	2dc00417 	ldw	r23,16(r5)
  109540:	dfc00d15 	stw	ra,52(sp)
  109544:	df000c15 	stw	fp,48(sp)
  109548:	dd800a15 	stw	r22,40(sp)
  10954c:	dd400915 	stw	r21,36(sp)
  109550:	dd000815 	stw	r20,32(sp)
  109554:	dcc00715 	stw	r19,28(sp)
  109558:	dc800615 	stw	r18,24(sp)
  10955c:	dc400515 	stw	r17,20(sp)
  109560:	dc000415 	stw	r16,16(sp)
  109564:	15c07a16 	blt	r2,r23,109750 <quorem+0x220>
  109568:	bdffffc4 	addi	r23,r23,-1
  10956c:	bde9883a 	add	r20,r23,r23
  109570:	28c00504 	addi	r3,r5,20
  109574:	a529883a 	add	r20,r20,r20
  109578:	1d39883a 	add	fp,r3,r20
  10957c:	24c00504 	addi	r19,r4,20
  109580:	d9400215 	stw	r5,8(sp)
  109584:	9d29883a 	add	r20,r19,r20
  109588:	e1400017 	ldw	r5,0(fp)
  10958c:	d9000015 	stw	r4,0(sp)
  109590:	a1000017 	ldw	r4,0(r20)
  109594:	29400044 	addi	r5,r5,1
  109598:	d8c00115 	stw	r3,4(sp)
  10959c:	dd000315 	stw	r20,12(sp)
  1095a0:	0115fb80 	call	115fb8 <__udivsi3>
  1095a4:	1025883a 	mov	r18,r2
  1095a8:	10003026 	beq	r2,zero,10966c <quorem+0x13c>
  1095ac:	dc400117 	ldw	r17,4(sp)
  1095b0:	9829883a 	mov	r20,r19
  1095b4:	002d883a 	mov	r22,zero
  1095b8:	0021883a 	mov	r16,zero
  1095bc:	8d400017 	ldw	r21,0(r17)
  1095c0:	900b883a 	mov	r5,r18
  1095c4:	8c400104 	addi	r17,r17,4
  1095c8:	a93fffcc 	andi	r4,r21,65535
  1095cc:	01160740 	call	116074 <__mulsi3>
  1095d0:	a808d43a 	srli	r4,r21,16
  1095d4:	900b883a 	mov	r5,r18
  1095d8:	15ad883a 	add	r22,r2,r22
  1095dc:	01160740 	call	116074 <__mulsi3>
  1095e0:	a1000017 	ldw	r4,0(r20)
  1095e4:	b00cd43a 	srli	r6,r22,16
  1095e8:	b0ffffcc 	andi	r3,r22,65535
  1095ec:	217fffcc 	andi	r5,r4,65535
  1095f0:	2c21883a 	add	r16,r5,r16
  1095f4:	80c7c83a 	sub	r3,r16,r3
  1095f8:	2008d43a 	srli	r4,r4,16
  1095fc:	1185883a 	add	r2,r2,r6
  109600:	1821d43a 	srai	r16,r3,16
  109604:	117fffcc 	andi	r5,r2,65535
  109608:	2149c83a 	sub	r4,r4,r5
  10960c:	2421883a 	add	r16,r4,r16
  109610:	8008943a 	slli	r4,r16,16
  109614:	18ffffcc 	andi	r3,r3,65535
  109618:	102cd43a 	srli	r22,r2,16
  10961c:	20c8b03a 	or	r4,r4,r3
  109620:	a1000015 	stw	r4,0(r20)
  109624:	8021d43a 	srai	r16,r16,16
  109628:	a5000104 	addi	r20,r20,4
  10962c:	e47fe32e 	bgeu	fp,r17,1095bc <__alt_data_end+0xfffc95bc>
  109630:	d8c00317 	ldw	r3,12(sp)
  109634:	18800017 	ldw	r2,0(r3)
  109638:	10000c1e 	bne	r2,zero,10966c <quorem+0x13c>
  10963c:	18bfff04 	addi	r2,r3,-4
  109640:	9880082e 	bgeu	r19,r2,109664 <quorem+0x134>
  109644:	18ffff17 	ldw	r3,-4(r3)
  109648:	18000326 	beq	r3,zero,109658 <quorem+0x128>
  10964c:	00000506 	br	109664 <quorem+0x134>
  109650:	10c00017 	ldw	r3,0(r2)
  109654:	1800031e 	bne	r3,zero,109664 <quorem+0x134>
  109658:	10bfff04 	addi	r2,r2,-4
  10965c:	bdffffc4 	addi	r23,r23,-1
  109660:	98bffb36 	bltu	r19,r2,109650 <__alt_data_end+0xfffc9650>
  109664:	d8c00017 	ldw	r3,0(sp)
  109668:	1dc00415 	stw	r23,16(r3)
  10966c:	d9400217 	ldw	r5,8(sp)
  109670:	d9000017 	ldw	r4,0(sp)
  109674:	010cab40 	call	10cab4 <__mcmp>
  109678:	10002816 	blt	r2,zero,10971c <quorem+0x1ec>
  10967c:	dc400117 	ldw	r17,4(sp)
  109680:	94800044 	addi	r18,r18,1
  109684:	980d883a 	mov	r6,r19
  109688:	0007883a 	mov	r3,zero
  10968c:	31000017 	ldw	r4,0(r6)
  109690:	89400017 	ldw	r5,0(r17)
  109694:	31800104 	addi	r6,r6,4
  109698:	20bfffcc 	andi	r2,r4,65535
  10969c:	10c7883a 	add	r3,r2,r3
  1096a0:	28bfffcc 	andi	r2,r5,65535
  1096a4:	1885c83a 	sub	r2,r3,r2
  1096a8:	280ad43a 	srli	r5,r5,16
  1096ac:	2008d43a 	srli	r4,r4,16
  1096b0:	1007d43a 	srai	r3,r2,16
  1096b4:	10bfffcc 	andi	r2,r2,65535
  1096b8:	2149c83a 	sub	r4,r4,r5
  1096bc:	20c9883a 	add	r4,r4,r3
  1096c0:	200a943a 	slli	r5,r4,16
  1096c4:	8c400104 	addi	r17,r17,4
  1096c8:	2007d43a 	srai	r3,r4,16
  1096cc:	2884b03a 	or	r2,r5,r2
  1096d0:	30bfff15 	stw	r2,-4(r6)
  1096d4:	e47fed2e 	bgeu	fp,r17,10968c <__alt_data_end+0xfffc968c>
  1096d8:	bdc5883a 	add	r2,r23,r23
  1096dc:	1085883a 	add	r2,r2,r2
  1096e0:	9887883a 	add	r3,r19,r2
  1096e4:	18800017 	ldw	r2,0(r3)
  1096e8:	10000c1e 	bne	r2,zero,10971c <quorem+0x1ec>
  1096ec:	18bfff04 	addi	r2,r3,-4
  1096f0:	9880082e 	bgeu	r19,r2,109714 <quorem+0x1e4>
  1096f4:	18ffff17 	ldw	r3,-4(r3)
  1096f8:	18000326 	beq	r3,zero,109708 <quorem+0x1d8>
  1096fc:	00000506 	br	109714 <quorem+0x1e4>
  109700:	10c00017 	ldw	r3,0(r2)
  109704:	1800031e 	bne	r3,zero,109714 <quorem+0x1e4>
  109708:	10bfff04 	addi	r2,r2,-4
  10970c:	bdffffc4 	addi	r23,r23,-1
  109710:	98bffb36 	bltu	r19,r2,109700 <__alt_data_end+0xfffc9700>
  109714:	d8c00017 	ldw	r3,0(sp)
  109718:	1dc00415 	stw	r23,16(r3)
  10971c:	9005883a 	mov	r2,r18
  109720:	dfc00d17 	ldw	ra,52(sp)
  109724:	df000c17 	ldw	fp,48(sp)
  109728:	ddc00b17 	ldw	r23,44(sp)
  10972c:	dd800a17 	ldw	r22,40(sp)
  109730:	dd400917 	ldw	r21,36(sp)
  109734:	dd000817 	ldw	r20,32(sp)
  109738:	dcc00717 	ldw	r19,28(sp)
  10973c:	dc800617 	ldw	r18,24(sp)
  109740:	dc400517 	ldw	r17,20(sp)
  109744:	dc000417 	ldw	r16,16(sp)
  109748:	dec00e04 	addi	sp,sp,56
  10974c:	f800283a 	ret
  109750:	0005883a 	mov	r2,zero
  109754:	003ff206 	br	109720 <__alt_data_end+0xfffc9720>

00109758 <_dtoa_r>:
  109758:	20801017 	ldw	r2,64(r4)
  10975c:	deffde04 	addi	sp,sp,-136
  109760:	df002015 	stw	fp,128(sp)
  109764:	dcc01b15 	stw	r19,108(sp)
  109768:	dc801a15 	stw	r18,104(sp)
  10976c:	dc401915 	stw	r17,100(sp)
  109770:	dc001815 	stw	r16,96(sp)
  109774:	dfc02115 	stw	ra,132(sp)
  109778:	ddc01f15 	stw	r23,124(sp)
  10977c:	dd801e15 	stw	r22,120(sp)
  109780:	dd401d15 	stw	r21,116(sp)
  109784:	dd001c15 	stw	r20,112(sp)
  109788:	d9c00315 	stw	r7,12(sp)
  10978c:	2039883a 	mov	fp,r4
  109790:	3023883a 	mov	r17,r6
  109794:	2825883a 	mov	r18,r5
  109798:	dc002417 	ldw	r16,144(sp)
  10979c:	3027883a 	mov	r19,r6
  1097a0:	10000826 	beq	r2,zero,1097c4 <_dtoa_r+0x6c>
  1097a4:	21801117 	ldw	r6,68(r4)
  1097a8:	00c00044 	movi	r3,1
  1097ac:	100b883a 	mov	r5,r2
  1097b0:	1986983a 	sll	r3,r3,r6
  1097b4:	11800115 	stw	r6,4(r2)
  1097b8:	10c00215 	stw	r3,8(r2)
  1097bc:	010c1d80 	call	10c1d8 <_Bfree>
  1097c0:	e0001015 	stw	zero,64(fp)
  1097c4:	88002e16 	blt	r17,zero,109880 <_dtoa_r+0x128>
  1097c8:	80000015 	stw	zero,0(r16)
  1097cc:	889ffc2c 	andhi	r2,r17,32752
  1097d0:	00dffc34 	movhi	r3,32752
  1097d4:	10c01c26 	beq	r2,r3,109848 <_dtoa_r+0xf0>
  1097d8:	000d883a 	mov	r6,zero
  1097dc:	000f883a 	mov	r7,zero
  1097e0:	9009883a 	mov	r4,r18
  1097e4:	980b883a 	mov	r5,r19
  1097e8:	01175140 	call	117514 <__eqdf2>
  1097ec:	10002b1e 	bne	r2,zero,10989c <_dtoa_r+0x144>
  1097f0:	d9c02317 	ldw	r7,140(sp)
  1097f4:	00800044 	movi	r2,1
  1097f8:	38800015 	stw	r2,0(r7)
  1097fc:	d8802517 	ldw	r2,148(sp)
  109800:	10019e26 	beq	r2,zero,109e7c <_dtoa_r+0x724>
  109804:	d8c02517 	ldw	r3,148(sp)
  109808:	008004b4 	movhi	r2,18
  10980c:	108e5244 	addi	r2,r2,14665
  109810:	18800015 	stw	r2,0(r3)
  109814:	10bfffc4 	addi	r2,r2,-1
  109818:	dfc02117 	ldw	ra,132(sp)
  10981c:	df002017 	ldw	fp,128(sp)
  109820:	ddc01f17 	ldw	r23,124(sp)
  109824:	dd801e17 	ldw	r22,120(sp)
  109828:	dd401d17 	ldw	r21,116(sp)
  10982c:	dd001c17 	ldw	r20,112(sp)
  109830:	dcc01b17 	ldw	r19,108(sp)
  109834:	dc801a17 	ldw	r18,104(sp)
  109838:	dc401917 	ldw	r17,100(sp)
  10983c:	dc001817 	ldw	r16,96(sp)
  109840:	dec02204 	addi	sp,sp,136
  109844:	f800283a 	ret
  109848:	d8c02317 	ldw	r3,140(sp)
  10984c:	0089c3c4 	movi	r2,9999
  109850:	18800015 	stw	r2,0(r3)
  109854:	90017726 	beq	r18,zero,109e34 <_dtoa_r+0x6dc>
  109858:	008004b4 	movhi	r2,18
  10985c:	108f1104 	addi	r2,r2,15428
  109860:	d9002517 	ldw	r4,148(sp)
  109864:	203fec26 	beq	r4,zero,109818 <__alt_data_end+0xfffc9818>
  109868:	10c000c7 	ldb	r3,3(r2)
  10986c:	1801781e 	bne	r3,zero,109e50 <_dtoa_r+0x6f8>
  109870:	10c000c4 	addi	r3,r2,3
  109874:	d9802517 	ldw	r6,148(sp)
  109878:	30c00015 	stw	r3,0(r6)
  10987c:	003fe606 	br	109818 <__alt_data_end+0xfffc9818>
  109880:	04e00034 	movhi	r19,32768
  109884:	9cffffc4 	addi	r19,r19,-1
  109888:	00800044 	movi	r2,1
  10988c:	8ce6703a 	and	r19,r17,r19
  109890:	80800015 	stw	r2,0(r16)
  109894:	9823883a 	mov	r17,r19
  109898:	003fcc06 	br	1097cc <__alt_data_end+0xfffc97cc>
  10989c:	d8800204 	addi	r2,sp,8
  1098a0:	d8800015 	stw	r2,0(sp)
  1098a4:	d9c00104 	addi	r7,sp,4
  1098a8:	900b883a 	mov	r5,r18
  1098ac:	980d883a 	mov	r6,r19
  1098b0:	e009883a 	mov	r4,fp
  1098b4:	8820d53a 	srli	r16,r17,20
  1098b8:	010ce800 	call	10ce80 <__d2b>
  1098bc:	d8800915 	stw	r2,36(sp)
  1098c0:	8001651e 	bne	r16,zero,109e58 <_dtoa_r+0x700>
  1098c4:	dd800217 	ldw	r22,8(sp)
  1098c8:	dc000117 	ldw	r16,4(sp)
  1098cc:	00800804 	movi	r2,32
  1098d0:	b421883a 	add	r16,r22,r16
  1098d4:	80c10c84 	addi	r3,r16,1074
  1098d8:	10c2d10e 	bge	r2,r3,10a420 <_dtoa_r+0xcc8>
  1098dc:	00801004 	movi	r2,64
  1098e0:	81010484 	addi	r4,r16,1042
  1098e4:	10c7c83a 	sub	r3,r2,r3
  1098e8:	9108d83a 	srl	r4,r18,r4
  1098ec:	88e2983a 	sll	r17,r17,r3
  1098f0:	2448b03a 	or	r4,r4,r17
  1098f4:	0118a300 	call	118a30 <__floatunsidf>
  1098f8:	017f8434 	movhi	r5,65040
  1098fc:	01800044 	movi	r6,1
  109900:	1009883a 	mov	r4,r2
  109904:	194b883a 	add	r5,r3,r5
  109908:	843fffc4 	addi	r16,r16,-1
  10990c:	d9801115 	stw	r6,68(sp)
  109910:	000d883a 	mov	r6,zero
  109914:	01cffe34 	movhi	r7,16376
  109918:	0117fd80 	call	117fd8 <__subdf3>
  10991c:	0198dbf4 	movhi	r6,25455
  109920:	01cff4f4 	movhi	r7,16339
  109924:	3190d844 	addi	r6,r6,17249
  109928:	39e1e9c4 	addi	r7,r7,-30809
  10992c:	1009883a 	mov	r4,r2
  109930:	180b883a 	mov	r5,r3
  109934:	011776c0 	call	11776c <__muldf3>
  109938:	01a2d874 	movhi	r6,35681
  10993c:	01cff1f4 	movhi	r7,16327
  109940:	31b22cc4 	addi	r6,r6,-14157
  109944:	39e28a04 	addi	r7,r7,-30168
  109948:	180b883a 	mov	r5,r3
  10994c:	1009883a 	mov	r4,r2
  109950:	01162980 	call	116298 <__adddf3>
  109954:	8009883a 	mov	r4,r16
  109958:	1029883a 	mov	r20,r2
  10995c:	1823883a 	mov	r17,r3
  109960:	01189540 	call	118954 <__floatsidf>
  109964:	019427f4 	movhi	r6,20639
  109968:	01cff4f4 	movhi	r7,16339
  10996c:	319e7ec4 	addi	r6,r6,31227
  109970:	39d104c4 	addi	r7,r7,17427
  109974:	1009883a 	mov	r4,r2
  109978:	180b883a 	mov	r5,r3
  10997c:	011776c0 	call	11776c <__muldf3>
  109980:	100d883a 	mov	r6,r2
  109984:	180f883a 	mov	r7,r3
  109988:	a009883a 	mov	r4,r20
  10998c:	880b883a 	mov	r5,r17
  109990:	01162980 	call	116298 <__adddf3>
  109994:	1009883a 	mov	r4,r2
  109998:	180b883a 	mov	r5,r3
  10999c:	1029883a 	mov	r20,r2
  1099a0:	1823883a 	mov	r17,r3
  1099a4:	01188d40 	call	1188d4 <__fixdfsi>
  1099a8:	000d883a 	mov	r6,zero
  1099ac:	000f883a 	mov	r7,zero
  1099b0:	a009883a 	mov	r4,r20
  1099b4:	880b883a 	mov	r5,r17
  1099b8:	d8800515 	stw	r2,20(sp)
  1099bc:	01176780 	call	117678 <__ledf2>
  1099c0:	10028716 	blt	r2,zero,10a3e0 <_dtoa_r+0xc88>
  1099c4:	d8c00517 	ldw	r3,20(sp)
  1099c8:	00800584 	movi	r2,22
  1099cc:	10c27536 	bltu	r2,r3,10a3a4 <_dtoa_r+0xc4c>
  1099d0:	180490fa 	slli	r2,r3,3
  1099d4:	00c004b4 	movhi	r3,18
  1099d8:	18cf2c04 	addi	r3,r3,15536
  1099dc:	1885883a 	add	r2,r3,r2
  1099e0:	11000017 	ldw	r4,0(r2)
  1099e4:	11400117 	ldw	r5,4(r2)
  1099e8:	900d883a 	mov	r6,r18
  1099ec:	980f883a 	mov	r7,r19
  1099f0:	011759c0 	call	11759c <__gedf2>
  1099f4:	00828d0e 	bge	zero,r2,10a42c <_dtoa_r+0xcd4>
  1099f8:	d9000517 	ldw	r4,20(sp)
  1099fc:	d8000e15 	stw	zero,56(sp)
  109a00:	213fffc4 	addi	r4,r4,-1
  109a04:	d9000515 	stw	r4,20(sp)
  109a08:	b42dc83a 	sub	r22,r22,r16
  109a0c:	b5bfffc4 	addi	r22,r22,-1
  109a10:	b0026f16 	blt	r22,zero,10a3d0 <_dtoa_r+0xc78>
  109a14:	d8000815 	stw	zero,32(sp)
  109a18:	d9c00517 	ldw	r7,20(sp)
  109a1c:	38026416 	blt	r7,zero,10a3b0 <_dtoa_r+0xc58>
  109a20:	b1ed883a 	add	r22,r22,r7
  109a24:	d9c00d15 	stw	r7,52(sp)
  109a28:	d8000a15 	stw	zero,40(sp)
  109a2c:	d9800317 	ldw	r6,12(sp)
  109a30:	00800244 	movi	r2,9
  109a34:	11811436 	bltu	r2,r6,109e88 <_dtoa_r+0x730>
  109a38:	00800144 	movi	r2,5
  109a3c:	1184e10e 	bge	r2,r6,10adc4 <_dtoa_r+0x166c>
  109a40:	31bfff04 	addi	r6,r6,-4
  109a44:	d9800315 	stw	r6,12(sp)
  109a48:	0023883a 	mov	r17,zero
  109a4c:	d9800317 	ldw	r6,12(sp)
  109a50:	008000c4 	movi	r2,3
  109a54:	30836726 	beq	r6,r2,10a7f4 <_dtoa_r+0x109c>
  109a58:	1183410e 	bge	r2,r6,10a760 <_dtoa_r+0x1008>
  109a5c:	d9c00317 	ldw	r7,12(sp)
  109a60:	00800104 	movi	r2,4
  109a64:	38827c26 	beq	r7,r2,10a458 <_dtoa_r+0xd00>
  109a68:	00800144 	movi	r2,5
  109a6c:	3884c41e 	bne	r7,r2,10ad80 <_dtoa_r+0x1628>
  109a70:	00800044 	movi	r2,1
  109a74:	d8800b15 	stw	r2,44(sp)
  109a78:	d8c00517 	ldw	r3,20(sp)
  109a7c:	d9002217 	ldw	r4,136(sp)
  109a80:	1907883a 	add	r3,r3,r4
  109a84:	19800044 	addi	r6,r3,1
  109a88:	d8c00c15 	stw	r3,48(sp)
  109a8c:	d9800615 	stw	r6,24(sp)
  109a90:	0183a40e 	bge	zero,r6,10a924 <_dtoa_r+0x11cc>
  109a94:	d9800617 	ldw	r6,24(sp)
  109a98:	3021883a 	mov	r16,r6
  109a9c:	e0001115 	stw	zero,68(fp)
  109aa0:	008005c4 	movi	r2,23
  109aa4:	1184c92e 	bgeu	r2,r6,10adcc <_dtoa_r+0x1674>
  109aa8:	00c00044 	movi	r3,1
  109aac:	00800104 	movi	r2,4
  109ab0:	1085883a 	add	r2,r2,r2
  109ab4:	11000504 	addi	r4,r2,20
  109ab8:	180b883a 	mov	r5,r3
  109abc:	18c00044 	addi	r3,r3,1
  109ac0:	313ffb2e 	bgeu	r6,r4,109ab0 <__alt_data_end+0xfffc9ab0>
  109ac4:	e1401115 	stw	r5,68(fp)
  109ac8:	e009883a 	mov	r4,fp
  109acc:	010c1300 	call	10c130 <_Balloc>
  109ad0:	d8800715 	stw	r2,28(sp)
  109ad4:	e0801015 	stw	r2,64(fp)
  109ad8:	00800384 	movi	r2,14
  109adc:	1400f736 	bltu	r2,r16,109ebc <_dtoa_r+0x764>
  109ae0:	8800f626 	beq	r17,zero,109ebc <_dtoa_r+0x764>
  109ae4:	d9c00517 	ldw	r7,20(sp)
  109ae8:	01c39a0e 	bge	zero,r7,10a954 <_dtoa_r+0x11fc>
  109aec:	388003cc 	andi	r2,r7,15
  109af0:	100490fa 	slli	r2,r2,3
  109af4:	382bd13a 	srai	r21,r7,4
  109af8:	00c004b4 	movhi	r3,18
  109afc:	18cf2c04 	addi	r3,r3,15536
  109b00:	1885883a 	add	r2,r3,r2
  109b04:	a8c0040c 	andi	r3,r21,16
  109b08:	12400017 	ldw	r9,0(r2)
  109b0c:	12000117 	ldw	r8,4(r2)
  109b10:	18037926 	beq	r3,zero,10a8f8 <_dtoa_r+0x11a0>
  109b14:	008004b4 	movhi	r2,18
  109b18:	108f2204 	addi	r2,r2,15496
  109b1c:	11800817 	ldw	r6,32(r2)
  109b20:	11c00917 	ldw	r7,36(r2)
  109b24:	9009883a 	mov	r4,r18
  109b28:	980b883a 	mov	r5,r19
  109b2c:	da001715 	stw	r8,92(sp)
  109b30:	da401615 	stw	r9,88(sp)
  109b34:	0116b440 	call	116b44 <__divdf3>
  109b38:	da001717 	ldw	r8,92(sp)
  109b3c:	da401617 	ldw	r9,88(sp)
  109b40:	ad4003cc 	andi	r21,r21,15
  109b44:	040000c4 	movi	r16,3
  109b48:	1023883a 	mov	r17,r2
  109b4c:	1829883a 	mov	r20,r3
  109b50:	a8001126 	beq	r21,zero,109b98 <_dtoa_r+0x440>
  109b54:	05c004b4 	movhi	r23,18
  109b58:	bdcf2204 	addi	r23,r23,15496
  109b5c:	4805883a 	mov	r2,r9
  109b60:	4007883a 	mov	r3,r8
  109b64:	a980004c 	andi	r6,r21,1
  109b68:	1009883a 	mov	r4,r2
  109b6c:	a82bd07a 	srai	r21,r21,1
  109b70:	180b883a 	mov	r5,r3
  109b74:	30000426 	beq	r6,zero,109b88 <_dtoa_r+0x430>
  109b78:	b9800017 	ldw	r6,0(r23)
  109b7c:	b9c00117 	ldw	r7,4(r23)
  109b80:	84000044 	addi	r16,r16,1
  109b84:	011776c0 	call	11776c <__muldf3>
  109b88:	bdc00204 	addi	r23,r23,8
  109b8c:	a83ff51e 	bne	r21,zero,109b64 <__alt_data_end+0xfffc9b64>
  109b90:	1013883a 	mov	r9,r2
  109b94:	1811883a 	mov	r8,r3
  109b98:	480d883a 	mov	r6,r9
  109b9c:	400f883a 	mov	r7,r8
  109ba0:	8809883a 	mov	r4,r17
  109ba4:	a00b883a 	mov	r5,r20
  109ba8:	0116b440 	call	116b44 <__divdf3>
  109bac:	d8800f15 	stw	r2,60(sp)
  109bb0:	d8c01015 	stw	r3,64(sp)
  109bb4:	d8c00e17 	ldw	r3,56(sp)
  109bb8:	18000626 	beq	r3,zero,109bd4 <_dtoa_r+0x47c>
  109bbc:	d9000f17 	ldw	r4,60(sp)
  109bc0:	d9401017 	ldw	r5,64(sp)
  109bc4:	000d883a 	mov	r6,zero
  109bc8:	01cffc34 	movhi	r7,16368
  109bcc:	01176780 	call	117678 <__ledf2>
  109bd0:	10040b16 	blt	r2,zero,10ac00 <_dtoa_r+0x14a8>
  109bd4:	8009883a 	mov	r4,r16
  109bd8:	01189540 	call	118954 <__floatsidf>
  109bdc:	d9800f17 	ldw	r6,60(sp)
  109be0:	d9c01017 	ldw	r7,64(sp)
  109be4:	1009883a 	mov	r4,r2
  109be8:	180b883a 	mov	r5,r3
  109bec:	011776c0 	call	11776c <__muldf3>
  109bf0:	000d883a 	mov	r6,zero
  109bf4:	01d00734 	movhi	r7,16412
  109bf8:	1009883a 	mov	r4,r2
  109bfc:	180b883a 	mov	r5,r3
  109c00:	01162980 	call	116298 <__adddf3>
  109c04:	1021883a 	mov	r16,r2
  109c08:	d8800617 	ldw	r2,24(sp)
  109c0c:	047f3034 	movhi	r17,64704
  109c10:	1c63883a 	add	r17,r3,r17
  109c14:	10031826 	beq	r2,zero,10a878 <_dtoa_r+0x1120>
  109c18:	d8c00517 	ldw	r3,20(sp)
  109c1c:	db000617 	ldw	r12,24(sp)
  109c20:	d8c01315 	stw	r3,76(sp)
  109c24:	d9000b17 	ldw	r4,44(sp)
  109c28:	20038f26 	beq	r4,zero,10aa68 <_dtoa_r+0x1310>
  109c2c:	60bfffc4 	addi	r2,r12,-1
  109c30:	100490fa 	slli	r2,r2,3
  109c34:	00c004b4 	movhi	r3,18
  109c38:	18cf2c04 	addi	r3,r3,15536
  109c3c:	1885883a 	add	r2,r3,r2
  109c40:	11800017 	ldw	r6,0(r2)
  109c44:	11c00117 	ldw	r7,4(r2)
  109c48:	d8800717 	ldw	r2,28(sp)
  109c4c:	0009883a 	mov	r4,zero
  109c50:	014ff834 	movhi	r5,16352
  109c54:	db001615 	stw	r12,88(sp)
  109c58:	15c00044 	addi	r23,r2,1
  109c5c:	0116b440 	call	116b44 <__divdf3>
  109c60:	800d883a 	mov	r6,r16
  109c64:	880f883a 	mov	r7,r17
  109c68:	1009883a 	mov	r4,r2
  109c6c:	180b883a 	mov	r5,r3
  109c70:	0117fd80 	call	117fd8 <__subdf3>
  109c74:	d9401017 	ldw	r5,64(sp)
  109c78:	d9000f17 	ldw	r4,60(sp)
  109c7c:	102b883a 	mov	r21,r2
  109c80:	d8c01215 	stw	r3,72(sp)
  109c84:	01188d40 	call	1188d4 <__fixdfsi>
  109c88:	1009883a 	mov	r4,r2
  109c8c:	1029883a 	mov	r20,r2
  109c90:	01189540 	call	118954 <__floatsidf>
  109c94:	d9000f17 	ldw	r4,60(sp)
  109c98:	d9401017 	ldw	r5,64(sp)
  109c9c:	100d883a 	mov	r6,r2
  109ca0:	180f883a 	mov	r7,r3
  109ca4:	0117fd80 	call	117fd8 <__subdf3>
  109ca8:	1823883a 	mov	r17,r3
  109cac:	d8c00717 	ldw	r3,28(sp)
  109cb0:	d9401217 	ldw	r5,72(sp)
  109cb4:	a2000c04 	addi	r8,r20,48
  109cb8:	1021883a 	mov	r16,r2
  109cbc:	1a000005 	stb	r8,0(r3)
  109cc0:	800d883a 	mov	r6,r16
  109cc4:	880f883a 	mov	r7,r17
  109cc8:	a809883a 	mov	r4,r21
  109ccc:	4029883a 	mov	r20,r8
  109cd0:	011759c0 	call	11759c <__gedf2>
  109cd4:	00841d16 	blt	zero,r2,10ad4c <_dtoa_r+0x15f4>
  109cd8:	800d883a 	mov	r6,r16
  109cdc:	880f883a 	mov	r7,r17
  109ce0:	0009883a 	mov	r4,zero
  109ce4:	014ffc34 	movhi	r5,16368
  109ce8:	0117fd80 	call	117fd8 <__subdf3>
  109cec:	d9401217 	ldw	r5,72(sp)
  109cf0:	100d883a 	mov	r6,r2
  109cf4:	180f883a 	mov	r7,r3
  109cf8:	a809883a 	mov	r4,r21
  109cfc:	011759c0 	call	11759c <__gedf2>
  109d00:	db001617 	ldw	r12,88(sp)
  109d04:	00840e16 	blt	zero,r2,10ad40 <_dtoa_r+0x15e8>
  109d08:	00800044 	movi	r2,1
  109d0c:	13006b0e 	bge	r2,r12,109ebc <_dtoa_r+0x764>
  109d10:	d9000717 	ldw	r4,28(sp)
  109d14:	dd800f15 	stw	r22,60(sp)
  109d18:	dcc01015 	stw	r19,64(sp)
  109d1c:	2319883a 	add	r12,r4,r12
  109d20:	dcc01217 	ldw	r19,72(sp)
  109d24:	602d883a 	mov	r22,r12
  109d28:	dc801215 	stw	r18,72(sp)
  109d2c:	b825883a 	mov	r18,r23
  109d30:	00000906 	br	109d58 <_dtoa_r+0x600>
  109d34:	0117fd80 	call	117fd8 <__subdf3>
  109d38:	a80d883a 	mov	r6,r21
  109d3c:	980f883a 	mov	r7,r19
  109d40:	1009883a 	mov	r4,r2
  109d44:	180b883a 	mov	r5,r3
  109d48:	01176780 	call	117678 <__ledf2>
  109d4c:	1003e816 	blt	r2,zero,10acf0 <_dtoa_r+0x1598>
  109d50:	b825883a 	mov	r18,r23
  109d54:	bd83e926 	beq	r23,r22,10acfc <_dtoa_r+0x15a4>
  109d58:	a809883a 	mov	r4,r21
  109d5c:	980b883a 	mov	r5,r19
  109d60:	000d883a 	mov	r6,zero
  109d64:	01d00934 	movhi	r7,16420
  109d68:	011776c0 	call	11776c <__muldf3>
  109d6c:	000d883a 	mov	r6,zero
  109d70:	01d00934 	movhi	r7,16420
  109d74:	8009883a 	mov	r4,r16
  109d78:	880b883a 	mov	r5,r17
  109d7c:	102b883a 	mov	r21,r2
  109d80:	1827883a 	mov	r19,r3
  109d84:	011776c0 	call	11776c <__muldf3>
  109d88:	180b883a 	mov	r5,r3
  109d8c:	1009883a 	mov	r4,r2
  109d90:	1821883a 	mov	r16,r3
  109d94:	1023883a 	mov	r17,r2
  109d98:	01188d40 	call	1188d4 <__fixdfsi>
  109d9c:	1009883a 	mov	r4,r2
  109da0:	1029883a 	mov	r20,r2
  109da4:	01189540 	call	118954 <__floatsidf>
  109da8:	8809883a 	mov	r4,r17
  109dac:	800b883a 	mov	r5,r16
  109db0:	100d883a 	mov	r6,r2
  109db4:	180f883a 	mov	r7,r3
  109db8:	0117fd80 	call	117fd8 <__subdf3>
  109dbc:	a5000c04 	addi	r20,r20,48
  109dc0:	a80d883a 	mov	r6,r21
  109dc4:	980f883a 	mov	r7,r19
  109dc8:	1009883a 	mov	r4,r2
  109dcc:	180b883a 	mov	r5,r3
  109dd0:	95000005 	stb	r20,0(r18)
  109dd4:	1021883a 	mov	r16,r2
  109dd8:	1823883a 	mov	r17,r3
  109ddc:	01176780 	call	117678 <__ledf2>
  109de0:	bdc00044 	addi	r23,r23,1
  109de4:	800d883a 	mov	r6,r16
  109de8:	880f883a 	mov	r7,r17
  109dec:	0009883a 	mov	r4,zero
  109df0:	014ffc34 	movhi	r5,16368
  109df4:	103fcf0e 	bge	r2,zero,109d34 <__alt_data_end+0xfffc9d34>
  109df8:	d8c01317 	ldw	r3,76(sp)
  109dfc:	d8c00515 	stw	r3,20(sp)
  109e00:	d9400917 	ldw	r5,36(sp)
  109e04:	e009883a 	mov	r4,fp
  109e08:	010c1d80 	call	10c1d8 <_Bfree>
  109e0c:	d9000517 	ldw	r4,20(sp)
  109e10:	d9802317 	ldw	r6,140(sp)
  109e14:	d9c02517 	ldw	r7,148(sp)
  109e18:	b8000005 	stb	zero,0(r23)
  109e1c:	20800044 	addi	r2,r4,1
  109e20:	30800015 	stw	r2,0(r6)
  109e24:	3802aa26 	beq	r7,zero,10a8d0 <_dtoa_r+0x1178>
  109e28:	3dc00015 	stw	r23,0(r7)
  109e2c:	d8800717 	ldw	r2,28(sp)
  109e30:	003e7906 	br	109818 <__alt_data_end+0xfffc9818>
  109e34:	00800434 	movhi	r2,16
  109e38:	10bfffc4 	addi	r2,r2,-1
  109e3c:	88a2703a 	and	r17,r17,r2
  109e40:	883e851e 	bne	r17,zero,109858 <__alt_data_end+0xfffc9858>
  109e44:	008004b4 	movhi	r2,18
  109e48:	108f0e04 	addi	r2,r2,15416
  109e4c:	003e8406 	br	109860 <__alt_data_end+0xfffc9860>
  109e50:	10c00204 	addi	r3,r2,8
  109e54:	003e8706 	br	109874 <__alt_data_end+0xfffc9874>
  109e58:	01400434 	movhi	r5,16
  109e5c:	297fffc4 	addi	r5,r5,-1
  109e60:	994a703a 	and	r5,r19,r5
  109e64:	9009883a 	mov	r4,r18
  109e68:	843f0044 	addi	r16,r16,-1023
  109e6c:	294ffc34 	orhi	r5,r5,16368
  109e70:	dd800217 	ldw	r22,8(sp)
  109e74:	d8001115 	stw	zero,68(sp)
  109e78:	003ea506 	br	109910 <__alt_data_end+0xfffc9910>
  109e7c:	008004b4 	movhi	r2,18
  109e80:	108e5204 	addi	r2,r2,14664
  109e84:	003e6406 	br	109818 <__alt_data_end+0xfffc9818>
  109e88:	e0001115 	stw	zero,68(fp)
  109e8c:	000b883a 	mov	r5,zero
  109e90:	e009883a 	mov	r4,fp
  109e94:	010c1300 	call	10c130 <_Balloc>
  109e98:	01bfffc4 	movi	r6,-1
  109e9c:	01c00044 	movi	r7,1
  109ea0:	d8800715 	stw	r2,28(sp)
  109ea4:	d9800c15 	stw	r6,48(sp)
  109ea8:	e0801015 	stw	r2,64(fp)
  109eac:	d8000315 	stw	zero,12(sp)
  109eb0:	d9c00b15 	stw	r7,44(sp)
  109eb4:	d9800615 	stw	r6,24(sp)
  109eb8:	d8002215 	stw	zero,136(sp)
  109ebc:	d8800117 	ldw	r2,4(sp)
  109ec0:	10008916 	blt	r2,zero,10a0e8 <_dtoa_r+0x990>
  109ec4:	d9000517 	ldw	r4,20(sp)
  109ec8:	00c00384 	movi	r3,14
  109ecc:	19008616 	blt	r3,r4,10a0e8 <_dtoa_r+0x990>
  109ed0:	200490fa 	slli	r2,r4,3
  109ed4:	00c004b4 	movhi	r3,18
  109ed8:	d9802217 	ldw	r6,136(sp)
  109edc:	18cf2c04 	addi	r3,r3,15536
  109ee0:	1885883a 	add	r2,r3,r2
  109ee4:	14000017 	ldw	r16,0(r2)
  109ee8:	14400117 	ldw	r17,4(r2)
  109eec:	30016316 	blt	r6,zero,10a47c <_dtoa_r+0xd24>
  109ef0:	800d883a 	mov	r6,r16
  109ef4:	880f883a 	mov	r7,r17
  109ef8:	9009883a 	mov	r4,r18
  109efc:	980b883a 	mov	r5,r19
  109f00:	0116b440 	call	116b44 <__divdf3>
  109f04:	180b883a 	mov	r5,r3
  109f08:	1009883a 	mov	r4,r2
  109f0c:	01188d40 	call	1188d4 <__fixdfsi>
  109f10:	1009883a 	mov	r4,r2
  109f14:	102b883a 	mov	r21,r2
  109f18:	01189540 	call	118954 <__floatsidf>
  109f1c:	800d883a 	mov	r6,r16
  109f20:	880f883a 	mov	r7,r17
  109f24:	1009883a 	mov	r4,r2
  109f28:	180b883a 	mov	r5,r3
  109f2c:	011776c0 	call	11776c <__muldf3>
  109f30:	100d883a 	mov	r6,r2
  109f34:	180f883a 	mov	r7,r3
  109f38:	9009883a 	mov	r4,r18
  109f3c:	980b883a 	mov	r5,r19
  109f40:	0117fd80 	call	117fd8 <__subdf3>
  109f44:	d9c00717 	ldw	r7,28(sp)
  109f48:	1009883a 	mov	r4,r2
  109f4c:	a8800c04 	addi	r2,r21,48
  109f50:	38800005 	stb	r2,0(r7)
  109f54:	3dc00044 	addi	r23,r7,1
  109f58:	d9c00617 	ldw	r7,24(sp)
  109f5c:	01800044 	movi	r6,1
  109f60:	180b883a 	mov	r5,r3
  109f64:	2005883a 	mov	r2,r4
  109f68:	39803826 	beq	r7,r6,10a04c <_dtoa_r+0x8f4>
  109f6c:	000d883a 	mov	r6,zero
  109f70:	01d00934 	movhi	r7,16420
  109f74:	011776c0 	call	11776c <__muldf3>
  109f78:	000d883a 	mov	r6,zero
  109f7c:	000f883a 	mov	r7,zero
  109f80:	1009883a 	mov	r4,r2
  109f84:	180b883a 	mov	r5,r3
  109f88:	1025883a 	mov	r18,r2
  109f8c:	1827883a 	mov	r19,r3
  109f90:	01175140 	call	117514 <__eqdf2>
  109f94:	103f9a26 	beq	r2,zero,109e00 <__alt_data_end+0xfffc9e00>
  109f98:	d9c00617 	ldw	r7,24(sp)
  109f9c:	d8c00717 	ldw	r3,28(sp)
  109fa0:	b829883a 	mov	r20,r23
  109fa4:	38bfffc4 	addi	r2,r7,-1
  109fa8:	18ad883a 	add	r22,r3,r2
  109fac:	00000a06 	br	109fd8 <_dtoa_r+0x880>
  109fb0:	011776c0 	call	11776c <__muldf3>
  109fb4:	000d883a 	mov	r6,zero
  109fb8:	000f883a 	mov	r7,zero
  109fbc:	1009883a 	mov	r4,r2
  109fc0:	180b883a 	mov	r5,r3
  109fc4:	1025883a 	mov	r18,r2
  109fc8:	1827883a 	mov	r19,r3
  109fcc:	b829883a 	mov	r20,r23
  109fd0:	01175140 	call	117514 <__eqdf2>
  109fd4:	103f8a26 	beq	r2,zero,109e00 <__alt_data_end+0xfffc9e00>
  109fd8:	800d883a 	mov	r6,r16
  109fdc:	880f883a 	mov	r7,r17
  109fe0:	9009883a 	mov	r4,r18
  109fe4:	980b883a 	mov	r5,r19
  109fe8:	0116b440 	call	116b44 <__divdf3>
  109fec:	180b883a 	mov	r5,r3
  109ff0:	1009883a 	mov	r4,r2
  109ff4:	01188d40 	call	1188d4 <__fixdfsi>
  109ff8:	1009883a 	mov	r4,r2
  109ffc:	102b883a 	mov	r21,r2
  10a000:	01189540 	call	118954 <__floatsidf>
  10a004:	800d883a 	mov	r6,r16
  10a008:	880f883a 	mov	r7,r17
  10a00c:	1009883a 	mov	r4,r2
  10a010:	180b883a 	mov	r5,r3
  10a014:	011776c0 	call	11776c <__muldf3>
  10a018:	100d883a 	mov	r6,r2
  10a01c:	180f883a 	mov	r7,r3
  10a020:	9009883a 	mov	r4,r18
  10a024:	980b883a 	mov	r5,r19
  10a028:	0117fd80 	call	117fd8 <__subdf3>
  10a02c:	aa000c04 	addi	r8,r21,48
  10a030:	a2000005 	stb	r8,0(r20)
  10a034:	000d883a 	mov	r6,zero
  10a038:	01d00934 	movhi	r7,16420
  10a03c:	1009883a 	mov	r4,r2
  10a040:	180b883a 	mov	r5,r3
  10a044:	a5c00044 	addi	r23,r20,1
  10a048:	b53fd91e 	bne	r22,r20,109fb0 <__alt_data_end+0xfffc9fb0>
  10a04c:	100d883a 	mov	r6,r2
  10a050:	180f883a 	mov	r7,r3
  10a054:	1009883a 	mov	r4,r2
  10a058:	180b883a 	mov	r5,r3
  10a05c:	01162980 	call	116298 <__adddf3>
  10a060:	100d883a 	mov	r6,r2
  10a064:	180f883a 	mov	r7,r3
  10a068:	8009883a 	mov	r4,r16
  10a06c:	880b883a 	mov	r5,r17
  10a070:	1027883a 	mov	r19,r2
  10a074:	1825883a 	mov	r18,r3
  10a078:	01176780 	call	117678 <__ledf2>
  10a07c:	10000816 	blt	r2,zero,10a0a0 <_dtoa_r+0x948>
  10a080:	980d883a 	mov	r6,r19
  10a084:	900f883a 	mov	r7,r18
  10a088:	8009883a 	mov	r4,r16
  10a08c:	880b883a 	mov	r5,r17
  10a090:	01175140 	call	117514 <__eqdf2>
  10a094:	103f5a1e 	bne	r2,zero,109e00 <__alt_data_end+0xfffc9e00>
  10a098:	ad40004c 	andi	r21,r21,1
  10a09c:	a83f5826 	beq	r21,zero,109e00 <__alt_data_end+0xfffc9e00>
  10a0a0:	bd3fffc3 	ldbu	r20,-1(r23)
  10a0a4:	b8bfffc4 	addi	r2,r23,-1
  10a0a8:	1007883a 	mov	r3,r2
  10a0ac:	01400e44 	movi	r5,57
  10a0b0:	d9800717 	ldw	r6,28(sp)
  10a0b4:	00000506 	br	10a0cc <_dtoa_r+0x974>
  10a0b8:	18ffffc4 	addi	r3,r3,-1
  10a0bc:	11824726 	beq	r2,r6,10a9dc <_dtoa_r+0x1284>
  10a0c0:	1d000003 	ldbu	r20,0(r3)
  10a0c4:	102f883a 	mov	r23,r2
  10a0c8:	10bfffc4 	addi	r2,r2,-1
  10a0cc:	a1003fcc 	andi	r4,r20,255
  10a0d0:	2100201c 	xori	r4,r4,128
  10a0d4:	213fe004 	addi	r4,r4,-128
  10a0d8:	217ff726 	beq	r4,r5,10a0b8 <__alt_data_end+0xfffca0b8>
  10a0dc:	a2000044 	addi	r8,r20,1
  10a0e0:	12000005 	stb	r8,0(r2)
  10a0e4:	003f4606 	br	109e00 <__alt_data_end+0xfffc9e00>
  10a0e8:	d9000b17 	ldw	r4,44(sp)
  10a0ec:	2000c826 	beq	r4,zero,10a410 <_dtoa_r+0xcb8>
  10a0f0:	d9800317 	ldw	r6,12(sp)
  10a0f4:	00c00044 	movi	r3,1
  10a0f8:	1980f90e 	bge	r3,r6,10a4e0 <_dtoa_r+0xd88>
  10a0fc:	d8800617 	ldw	r2,24(sp)
  10a100:	d8c00a17 	ldw	r3,40(sp)
  10a104:	157fffc4 	addi	r21,r2,-1
  10a108:	1d41f316 	blt	r3,r21,10a8d8 <_dtoa_r+0x1180>
  10a10c:	1d6bc83a 	sub	r21,r3,r21
  10a110:	d9c00617 	ldw	r7,24(sp)
  10a114:	3802aa16 	blt	r7,zero,10abc0 <_dtoa_r+0x1468>
  10a118:	dd000817 	ldw	r20,32(sp)
  10a11c:	d8800617 	ldw	r2,24(sp)
  10a120:	d8c00817 	ldw	r3,32(sp)
  10a124:	01400044 	movi	r5,1
  10a128:	e009883a 	mov	r4,fp
  10a12c:	1887883a 	add	r3,r3,r2
  10a130:	d8c00815 	stw	r3,32(sp)
  10a134:	b0ad883a 	add	r22,r22,r2
  10a138:	010c5640 	call	10c564 <__i2b>
  10a13c:	1023883a 	mov	r17,r2
  10a140:	a0000826 	beq	r20,zero,10a164 <_dtoa_r+0xa0c>
  10a144:	0580070e 	bge	zero,r22,10a164 <_dtoa_r+0xa0c>
  10a148:	a005883a 	mov	r2,r20
  10a14c:	b500b916 	blt	r22,r20,10a434 <_dtoa_r+0xcdc>
  10a150:	d9000817 	ldw	r4,32(sp)
  10a154:	a0a9c83a 	sub	r20,r20,r2
  10a158:	b0adc83a 	sub	r22,r22,r2
  10a15c:	2089c83a 	sub	r4,r4,r2
  10a160:	d9000815 	stw	r4,32(sp)
  10a164:	d9800a17 	ldw	r6,40(sp)
  10a168:	0181810e 	bge	zero,r6,10a770 <_dtoa_r+0x1018>
  10a16c:	d9c00b17 	ldw	r7,44(sp)
  10a170:	3800b326 	beq	r7,zero,10a440 <_dtoa_r+0xce8>
  10a174:	a800b226 	beq	r21,zero,10a440 <_dtoa_r+0xce8>
  10a178:	880b883a 	mov	r5,r17
  10a17c:	a80d883a 	mov	r6,r21
  10a180:	e009883a 	mov	r4,fp
  10a184:	010c82c0 	call	10c82c <__pow5mult>
  10a188:	d9800917 	ldw	r6,36(sp)
  10a18c:	100b883a 	mov	r5,r2
  10a190:	e009883a 	mov	r4,fp
  10a194:	1023883a 	mov	r17,r2
  10a198:	010c5a00 	call	10c5a0 <__multiply>
  10a19c:	1021883a 	mov	r16,r2
  10a1a0:	d8800a17 	ldw	r2,40(sp)
  10a1a4:	d9400917 	ldw	r5,36(sp)
  10a1a8:	e009883a 	mov	r4,fp
  10a1ac:	1545c83a 	sub	r2,r2,r21
  10a1b0:	d8800a15 	stw	r2,40(sp)
  10a1b4:	010c1d80 	call	10c1d8 <_Bfree>
  10a1b8:	d8c00a17 	ldw	r3,40(sp)
  10a1bc:	18009f1e 	bne	r3,zero,10a43c <_dtoa_r+0xce4>
  10a1c0:	05c00044 	movi	r23,1
  10a1c4:	e009883a 	mov	r4,fp
  10a1c8:	b80b883a 	mov	r5,r23
  10a1cc:	010c5640 	call	10c564 <__i2b>
  10a1d0:	d9000d17 	ldw	r4,52(sp)
  10a1d4:	102b883a 	mov	r21,r2
  10a1d8:	2000ce26 	beq	r4,zero,10a514 <_dtoa_r+0xdbc>
  10a1dc:	200d883a 	mov	r6,r4
  10a1e0:	100b883a 	mov	r5,r2
  10a1e4:	e009883a 	mov	r4,fp
  10a1e8:	010c82c0 	call	10c82c <__pow5mult>
  10a1ec:	d9800317 	ldw	r6,12(sp)
  10a1f0:	102b883a 	mov	r21,r2
  10a1f4:	b981810e 	bge	r23,r6,10a7fc <_dtoa_r+0x10a4>
  10a1f8:	0027883a 	mov	r19,zero
  10a1fc:	a8800417 	ldw	r2,16(r21)
  10a200:	05c00804 	movi	r23,32
  10a204:	10800104 	addi	r2,r2,4
  10a208:	1085883a 	add	r2,r2,r2
  10a20c:	1085883a 	add	r2,r2,r2
  10a210:	a885883a 	add	r2,r21,r2
  10a214:	11000017 	ldw	r4,0(r2)
  10a218:	010c44c0 	call	10c44c <__hi0bits>
  10a21c:	b885c83a 	sub	r2,r23,r2
  10a220:	1585883a 	add	r2,r2,r22
  10a224:	108007cc 	andi	r2,r2,31
  10a228:	1000b326 	beq	r2,zero,10a4f8 <_dtoa_r+0xda0>
  10a22c:	00c00804 	movi	r3,32
  10a230:	1887c83a 	sub	r3,r3,r2
  10a234:	01000104 	movi	r4,4
  10a238:	20c2cd0e 	bge	r4,r3,10ad70 <_dtoa_r+0x1618>
  10a23c:	00c00704 	movi	r3,28
  10a240:	1885c83a 	sub	r2,r3,r2
  10a244:	d8c00817 	ldw	r3,32(sp)
  10a248:	a0a9883a 	add	r20,r20,r2
  10a24c:	b0ad883a 	add	r22,r22,r2
  10a250:	1887883a 	add	r3,r3,r2
  10a254:	d8c00815 	stw	r3,32(sp)
  10a258:	d9800817 	ldw	r6,32(sp)
  10a25c:	0180040e 	bge	zero,r6,10a270 <_dtoa_r+0xb18>
  10a260:	800b883a 	mov	r5,r16
  10a264:	e009883a 	mov	r4,fp
  10a268:	010c96c0 	call	10c96c <__lshift>
  10a26c:	1021883a 	mov	r16,r2
  10a270:	0580050e 	bge	zero,r22,10a288 <_dtoa_r+0xb30>
  10a274:	a80b883a 	mov	r5,r21
  10a278:	b00d883a 	mov	r6,r22
  10a27c:	e009883a 	mov	r4,fp
  10a280:	010c96c0 	call	10c96c <__lshift>
  10a284:	102b883a 	mov	r21,r2
  10a288:	d9c00e17 	ldw	r7,56(sp)
  10a28c:	3801211e 	bne	r7,zero,10a714 <_dtoa_r+0xfbc>
  10a290:	d9800617 	ldw	r6,24(sp)
  10a294:	0181380e 	bge	zero,r6,10a778 <_dtoa_r+0x1020>
  10a298:	d8c00b17 	ldw	r3,44(sp)
  10a29c:	1800ab1e 	bne	r3,zero,10a54c <_dtoa_r+0xdf4>
  10a2a0:	dc800717 	ldw	r18,28(sp)
  10a2a4:	dcc00617 	ldw	r19,24(sp)
  10a2a8:	9029883a 	mov	r20,r18
  10a2ac:	00000206 	br	10a2b8 <_dtoa_r+0xb60>
  10a2b0:	010c2000 	call	10c200 <__multadd>
  10a2b4:	1021883a 	mov	r16,r2
  10a2b8:	a80b883a 	mov	r5,r21
  10a2bc:	8009883a 	mov	r4,r16
  10a2c0:	01095300 	call	109530 <quorem>
  10a2c4:	10800c04 	addi	r2,r2,48
  10a2c8:	90800005 	stb	r2,0(r18)
  10a2cc:	94800044 	addi	r18,r18,1
  10a2d0:	9507c83a 	sub	r3,r18,r20
  10a2d4:	000f883a 	mov	r7,zero
  10a2d8:	01800284 	movi	r6,10
  10a2dc:	800b883a 	mov	r5,r16
  10a2e0:	e009883a 	mov	r4,fp
  10a2e4:	1cfff216 	blt	r3,r19,10a2b0 <__alt_data_end+0xfffca2b0>
  10a2e8:	1011883a 	mov	r8,r2
  10a2ec:	d8800617 	ldw	r2,24(sp)
  10a2f0:	0082370e 	bge	zero,r2,10abd0 <_dtoa_r+0x1478>
  10a2f4:	d9000717 	ldw	r4,28(sp)
  10a2f8:	0025883a 	mov	r18,zero
  10a2fc:	20af883a 	add	r23,r4,r2
  10a300:	01800044 	movi	r6,1
  10a304:	800b883a 	mov	r5,r16
  10a308:	e009883a 	mov	r4,fp
  10a30c:	da001715 	stw	r8,92(sp)
  10a310:	010c96c0 	call	10c96c <__lshift>
  10a314:	a80b883a 	mov	r5,r21
  10a318:	1009883a 	mov	r4,r2
  10a31c:	d8800915 	stw	r2,36(sp)
  10a320:	010cab40 	call	10cab4 <__mcmp>
  10a324:	da001717 	ldw	r8,92(sp)
  10a328:	0081800e 	bge	zero,r2,10a92c <_dtoa_r+0x11d4>
  10a32c:	b93fffc3 	ldbu	r4,-1(r23)
  10a330:	b8bfffc4 	addi	r2,r23,-1
  10a334:	1007883a 	mov	r3,r2
  10a338:	01800e44 	movi	r6,57
  10a33c:	d9c00717 	ldw	r7,28(sp)
  10a340:	00000506 	br	10a358 <_dtoa_r+0xc00>
  10a344:	18ffffc4 	addi	r3,r3,-1
  10a348:	11c12326 	beq	r2,r7,10a7d8 <_dtoa_r+0x1080>
  10a34c:	19000003 	ldbu	r4,0(r3)
  10a350:	102f883a 	mov	r23,r2
  10a354:	10bfffc4 	addi	r2,r2,-1
  10a358:	21403fcc 	andi	r5,r4,255
  10a35c:	2940201c 	xori	r5,r5,128
  10a360:	297fe004 	addi	r5,r5,-128
  10a364:	29bff726 	beq	r5,r6,10a344 <__alt_data_end+0xfffca344>
  10a368:	21000044 	addi	r4,r4,1
  10a36c:	11000005 	stb	r4,0(r2)
  10a370:	a80b883a 	mov	r5,r21
  10a374:	e009883a 	mov	r4,fp
  10a378:	010c1d80 	call	10c1d8 <_Bfree>
  10a37c:	883ea026 	beq	r17,zero,109e00 <__alt_data_end+0xfffc9e00>
  10a380:	90000426 	beq	r18,zero,10a394 <_dtoa_r+0xc3c>
  10a384:	94400326 	beq	r18,r17,10a394 <_dtoa_r+0xc3c>
  10a388:	900b883a 	mov	r5,r18
  10a38c:	e009883a 	mov	r4,fp
  10a390:	010c1d80 	call	10c1d8 <_Bfree>
  10a394:	880b883a 	mov	r5,r17
  10a398:	e009883a 	mov	r4,fp
  10a39c:	010c1d80 	call	10c1d8 <_Bfree>
  10a3a0:	003e9706 	br	109e00 <__alt_data_end+0xfffc9e00>
  10a3a4:	01800044 	movi	r6,1
  10a3a8:	d9800e15 	stw	r6,56(sp)
  10a3ac:	003d9606 	br	109a08 <__alt_data_end+0xfffc9a08>
  10a3b0:	d8800817 	ldw	r2,32(sp)
  10a3b4:	d8c00517 	ldw	r3,20(sp)
  10a3b8:	d8000d15 	stw	zero,52(sp)
  10a3bc:	10c5c83a 	sub	r2,r2,r3
  10a3c0:	00c9c83a 	sub	r4,zero,r3
  10a3c4:	d8800815 	stw	r2,32(sp)
  10a3c8:	d9000a15 	stw	r4,40(sp)
  10a3cc:	003d9706 	br	109a2c <__alt_data_end+0xfffc9a2c>
  10a3d0:	05adc83a 	sub	r22,zero,r22
  10a3d4:	dd800815 	stw	r22,32(sp)
  10a3d8:	002d883a 	mov	r22,zero
  10a3dc:	003d8e06 	br	109a18 <__alt_data_end+0xfffc9a18>
  10a3e0:	d9000517 	ldw	r4,20(sp)
  10a3e4:	01189540 	call	118954 <__floatsidf>
  10a3e8:	100d883a 	mov	r6,r2
  10a3ec:	180f883a 	mov	r7,r3
  10a3f0:	a009883a 	mov	r4,r20
  10a3f4:	880b883a 	mov	r5,r17
  10a3f8:	01175140 	call	117514 <__eqdf2>
  10a3fc:	103d7126 	beq	r2,zero,1099c4 <__alt_data_end+0xfffc99c4>
  10a400:	d9c00517 	ldw	r7,20(sp)
  10a404:	39ffffc4 	addi	r7,r7,-1
  10a408:	d9c00515 	stw	r7,20(sp)
  10a40c:	003d6d06 	br	1099c4 <__alt_data_end+0xfffc99c4>
  10a410:	dd400a17 	ldw	r21,40(sp)
  10a414:	dd000817 	ldw	r20,32(sp)
  10a418:	0023883a 	mov	r17,zero
  10a41c:	003f4806 	br	10a140 <__alt_data_end+0xfffca140>
  10a420:	10e3c83a 	sub	r17,r2,r3
  10a424:	9448983a 	sll	r4,r18,r17
  10a428:	003d3206 	br	1098f4 <__alt_data_end+0xfffc98f4>
  10a42c:	d8000e15 	stw	zero,56(sp)
  10a430:	003d7506 	br	109a08 <__alt_data_end+0xfffc9a08>
  10a434:	b005883a 	mov	r2,r22
  10a438:	003f4506 	br	10a150 <__alt_data_end+0xfffca150>
  10a43c:	dc000915 	stw	r16,36(sp)
  10a440:	d9800a17 	ldw	r6,40(sp)
  10a444:	d9400917 	ldw	r5,36(sp)
  10a448:	e009883a 	mov	r4,fp
  10a44c:	010c82c0 	call	10c82c <__pow5mult>
  10a450:	1021883a 	mov	r16,r2
  10a454:	003f5a06 	br	10a1c0 <__alt_data_end+0xfffca1c0>
  10a458:	01c00044 	movi	r7,1
  10a45c:	d9c00b15 	stw	r7,44(sp)
  10a460:	d8802217 	ldw	r2,136(sp)
  10a464:	0081280e 	bge	zero,r2,10a908 <_dtoa_r+0x11b0>
  10a468:	100d883a 	mov	r6,r2
  10a46c:	1021883a 	mov	r16,r2
  10a470:	d8800c15 	stw	r2,48(sp)
  10a474:	d8800615 	stw	r2,24(sp)
  10a478:	003d8806 	br	109a9c <__alt_data_end+0xfffc9a9c>
  10a47c:	d8800617 	ldw	r2,24(sp)
  10a480:	00be9b16 	blt	zero,r2,109ef0 <__alt_data_end+0xfffc9ef0>
  10a484:	10010f1e 	bne	r2,zero,10a8c4 <_dtoa_r+0x116c>
  10a488:	880b883a 	mov	r5,r17
  10a48c:	000d883a 	mov	r6,zero
  10a490:	01d00534 	movhi	r7,16404
  10a494:	8009883a 	mov	r4,r16
  10a498:	011776c0 	call	11776c <__muldf3>
  10a49c:	900d883a 	mov	r6,r18
  10a4a0:	980f883a 	mov	r7,r19
  10a4a4:	1009883a 	mov	r4,r2
  10a4a8:	180b883a 	mov	r5,r3
  10a4ac:	011759c0 	call	11759c <__gedf2>
  10a4b0:	002b883a 	mov	r21,zero
  10a4b4:	0023883a 	mov	r17,zero
  10a4b8:	1000bf16 	blt	r2,zero,10a7b8 <_dtoa_r+0x1060>
  10a4bc:	d9802217 	ldw	r6,136(sp)
  10a4c0:	ddc00717 	ldw	r23,28(sp)
  10a4c4:	018c303a 	nor	r6,zero,r6
  10a4c8:	d9800515 	stw	r6,20(sp)
  10a4cc:	a80b883a 	mov	r5,r21
  10a4d0:	e009883a 	mov	r4,fp
  10a4d4:	010c1d80 	call	10c1d8 <_Bfree>
  10a4d8:	883e4926 	beq	r17,zero,109e00 <__alt_data_end+0xfffc9e00>
  10a4dc:	003fad06 	br	10a394 <__alt_data_end+0xfffca394>
  10a4e0:	d9c01117 	ldw	r7,68(sp)
  10a4e4:	3801bc26 	beq	r7,zero,10abd8 <_dtoa_r+0x1480>
  10a4e8:	10810cc4 	addi	r2,r2,1075
  10a4ec:	dd400a17 	ldw	r21,40(sp)
  10a4f0:	dd000817 	ldw	r20,32(sp)
  10a4f4:	003f0a06 	br	10a120 <__alt_data_end+0xfffca120>
  10a4f8:	00800704 	movi	r2,28
  10a4fc:	d9000817 	ldw	r4,32(sp)
  10a500:	a0a9883a 	add	r20,r20,r2
  10a504:	b0ad883a 	add	r22,r22,r2
  10a508:	2089883a 	add	r4,r4,r2
  10a50c:	d9000815 	stw	r4,32(sp)
  10a510:	003f5106 	br	10a258 <__alt_data_end+0xfffca258>
  10a514:	d8c00317 	ldw	r3,12(sp)
  10a518:	b8c1fc0e 	bge	r23,r3,10ad0c <_dtoa_r+0x15b4>
  10a51c:	0027883a 	mov	r19,zero
  10a520:	b805883a 	mov	r2,r23
  10a524:	003f3e06 	br	10a220 <__alt_data_end+0xfffca220>
  10a528:	880b883a 	mov	r5,r17
  10a52c:	e009883a 	mov	r4,fp
  10a530:	000f883a 	mov	r7,zero
  10a534:	01800284 	movi	r6,10
  10a538:	010c2000 	call	10c200 <__multadd>
  10a53c:	d9000c17 	ldw	r4,48(sp)
  10a540:	1023883a 	mov	r17,r2
  10a544:	0102040e 	bge	zero,r4,10ad58 <_dtoa_r+0x1600>
  10a548:	d9000615 	stw	r4,24(sp)
  10a54c:	0500050e 	bge	zero,r20,10a564 <_dtoa_r+0xe0c>
  10a550:	880b883a 	mov	r5,r17
  10a554:	a00d883a 	mov	r6,r20
  10a558:	e009883a 	mov	r4,fp
  10a55c:	010c96c0 	call	10c96c <__lshift>
  10a560:	1023883a 	mov	r17,r2
  10a564:	9801241e 	bne	r19,zero,10a9f8 <_dtoa_r+0x12a0>
  10a568:	8829883a 	mov	r20,r17
  10a56c:	d9000617 	ldw	r4,24(sp)
  10a570:	dcc00717 	ldw	r19,28(sp)
  10a574:	9480004c 	andi	r18,r18,1
  10a578:	20bfffc4 	addi	r2,r4,-1
  10a57c:	9885883a 	add	r2,r19,r2
  10a580:	d8800415 	stw	r2,16(sp)
  10a584:	dc800615 	stw	r18,24(sp)
  10a588:	a80b883a 	mov	r5,r21
  10a58c:	8009883a 	mov	r4,r16
  10a590:	01095300 	call	109530 <quorem>
  10a594:	880b883a 	mov	r5,r17
  10a598:	8009883a 	mov	r4,r16
  10a59c:	102f883a 	mov	r23,r2
  10a5a0:	010cab40 	call	10cab4 <__mcmp>
  10a5a4:	a80b883a 	mov	r5,r21
  10a5a8:	a00d883a 	mov	r6,r20
  10a5ac:	e009883a 	mov	r4,fp
  10a5b0:	102d883a 	mov	r22,r2
  10a5b4:	010cb140 	call	10cb14 <__mdiff>
  10a5b8:	1007883a 	mov	r3,r2
  10a5bc:	10800317 	ldw	r2,12(r2)
  10a5c0:	bc800c04 	addi	r18,r23,48
  10a5c4:	180b883a 	mov	r5,r3
  10a5c8:	10004e1e 	bne	r2,zero,10a704 <_dtoa_r+0xfac>
  10a5cc:	8009883a 	mov	r4,r16
  10a5d0:	d8c01615 	stw	r3,88(sp)
  10a5d4:	010cab40 	call	10cab4 <__mcmp>
  10a5d8:	d8c01617 	ldw	r3,88(sp)
  10a5dc:	e009883a 	mov	r4,fp
  10a5e0:	d8801615 	stw	r2,88(sp)
  10a5e4:	180b883a 	mov	r5,r3
  10a5e8:	010c1d80 	call	10c1d8 <_Bfree>
  10a5ec:	d8801617 	ldw	r2,88(sp)
  10a5f0:	1000041e 	bne	r2,zero,10a604 <_dtoa_r+0xeac>
  10a5f4:	d9800317 	ldw	r6,12(sp)
  10a5f8:	3000021e 	bne	r6,zero,10a604 <_dtoa_r+0xeac>
  10a5fc:	d8c00617 	ldw	r3,24(sp)
  10a600:	18003726 	beq	r3,zero,10a6e0 <_dtoa_r+0xf88>
  10a604:	b0002016 	blt	r22,zero,10a688 <_dtoa_r+0xf30>
  10a608:	b000041e 	bne	r22,zero,10a61c <_dtoa_r+0xec4>
  10a60c:	d9000317 	ldw	r4,12(sp)
  10a610:	2000021e 	bne	r4,zero,10a61c <_dtoa_r+0xec4>
  10a614:	d8c00617 	ldw	r3,24(sp)
  10a618:	18001b26 	beq	r3,zero,10a688 <_dtoa_r+0xf30>
  10a61c:	00810716 	blt	zero,r2,10aa3c <_dtoa_r+0x12e4>
  10a620:	d8c00417 	ldw	r3,16(sp)
  10a624:	9d800044 	addi	r22,r19,1
  10a628:	9c800005 	stb	r18,0(r19)
  10a62c:	b02f883a 	mov	r23,r22
  10a630:	98c10626 	beq	r19,r3,10aa4c <_dtoa_r+0x12f4>
  10a634:	800b883a 	mov	r5,r16
  10a638:	000f883a 	mov	r7,zero
  10a63c:	01800284 	movi	r6,10
  10a640:	e009883a 	mov	r4,fp
  10a644:	010c2000 	call	10c200 <__multadd>
  10a648:	1021883a 	mov	r16,r2
  10a64c:	000f883a 	mov	r7,zero
  10a650:	01800284 	movi	r6,10
  10a654:	880b883a 	mov	r5,r17
  10a658:	e009883a 	mov	r4,fp
  10a65c:	8d002526 	beq	r17,r20,10a6f4 <_dtoa_r+0xf9c>
  10a660:	010c2000 	call	10c200 <__multadd>
  10a664:	a00b883a 	mov	r5,r20
  10a668:	000f883a 	mov	r7,zero
  10a66c:	01800284 	movi	r6,10
  10a670:	e009883a 	mov	r4,fp
  10a674:	1023883a 	mov	r17,r2
  10a678:	010c2000 	call	10c200 <__multadd>
  10a67c:	1029883a 	mov	r20,r2
  10a680:	b027883a 	mov	r19,r22
  10a684:	003fc006 	br	10a588 <__alt_data_end+0xfffca588>
  10a688:	9011883a 	mov	r8,r18
  10a68c:	00800e0e 	bge	zero,r2,10a6c8 <_dtoa_r+0xf70>
  10a690:	800b883a 	mov	r5,r16
  10a694:	01800044 	movi	r6,1
  10a698:	e009883a 	mov	r4,fp
  10a69c:	da001715 	stw	r8,92(sp)
  10a6a0:	010c96c0 	call	10c96c <__lshift>
  10a6a4:	a80b883a 	mov	r5,r21
  10a6a8:	1009883a 	mov	r4,r2
  10a6ac:	1021883a 	mov	r16,r2
  10a6b0:	010cab40 	call	10cab4 <__mcmp>
  10a6b4:	da001717 	ldw	r8,92(sp)
  10a6b8:	0081960e 	bge	zero,r2,10ad14 <_dtoa_r+0x15bc>
  10a6bc:	00800e44 	movi	r2,57
  10a6c0:	40817026 	beq	r8,r2,10ac84 <_dtoa_r+0x152c>
  10a6c4:	ba000c44 	addi	r8,r23,49
  10a6c8:	8825883a 	mov	r18,r17
  10a6cc:	9dc00044 	addi	r23,r19,1
  10a6d0:	9a000005 	stb	r8,0(r19)
  10a6d4:	a023883a 	mov	r17,r20
  10a6d8:	dc000915 	stw	r16,36(sp)
  10a6dc:	003f2406 	br	10a370 <__alt_data_end+0xfffca370>
  10a6e0:	00800e44 	movi	r2,57
  10a6e4:	9011883a 	mov	r8,r18
  10a6e8:	90816626 	beq	r18,r2,10ac84 <_dtoa_r+0x152c>
  10a6ec:	05bff516 	blt	zero,r22,10a6c4 <__alt_data_end+0xfffca6c4>
  10a6f0:	003ff506 	br	10a6c8 <__alt_data_end+0xfffca6c8>
  10a6f4:	010c2000 	call	10c200 <__multadd>
  10a6f8:	1023883a 	mov	r17,r2
  10a6fc:	1029883a 	mov	r20,r2
  10a700:	003fdf06 	br	10a680 <__alt_data_end+0xfffca680>
  10a704:	e009883a 	mov	r4,fp
  10a708:	010c1d80 	call	10c1d8 <_Bfree>
  10a70c:	00800044 	movi	r2,1
  10a710:	003fbc06 	br	10a604 <__alt_data_end+0xfffca604>
  10a714:	a80b883a 	mov	r5,r21
  10a718:	8009883a 	mov	r4,r16
  10a71c:	010cab40 	call	10cab4 <__mcmp>
  10a720:	103edb0e 	bge	r2,zero,10a290 <__alt_data_end+0xfffca290>
  10a724:	800b883a 	mov	r5,r16
  10a728:	000f883a 	mov	r7,zero
  10a72c:	01800284 	movi	r6,10
  10a730:	e009883a 	mov	r4,fp
  10a734:	010c2000 	call	10c200 <__multadd>
  10a738:	1021883a 	mov	r16,r2
  10a73c:	d8800517 	ldw	r2,20(sp)
  10a740:	d8c00b17 	ldw	r3,44(sp)
  10a744:	10bfffc4 	addi	r2,r2,-1
  10a748:	d8800515 	stw	r2,20(sp)
  10a74c:	183f761e 	bne	r3,zero,10a528 <__alt_data_end+0xfffca528>
  10a750:	d9000c17 	ldw	r4,48(sp)
  10a754:	0101730e 	bge	zero,r4,10ad24 <_dtoa_r+0x15cc>
  10a758:	d9000615 	stw	r4,24(sp)
  10a75c:	003ed006 	br	10a2a0 <__alt_data_end+0xfffca2a0>
  10a760:	00800084 	movi	r2,2
  10a764:	3081861e 	bne	r6,r2,10ad80 <_dtoa_r+0x1628>
  10a768:	d8000b15 	stw	zero,44(sp)
  10a76c:	003f3c06 	br	10a460 <__alt_data_end+0xfffca460>
  10a770:	dc000917 	ldw	r16,36(sp)
  10a774:	003e9206 	br	10a1c0 <__alt_data_end+0xfffca1c0>
  10a778:	d9c00317 	ldw	r7,12(sp)
  10a77c:	00800084 	movi	r2,2
  10a780:	11fec50e 	bge	r2,r7,10a298 <__alt_data_end+0xfffca298>
  10a784:	d9000617 	ldw	r4,24(sp)
  10a788:	20013c1e 	bne	r4,zero,10ac7c <_dtoa_r+0x1524>
  10a78c:	a80b883a 	mov	r5,r21
  10a790:	000f883a 	mov	r7,zero
  10a794:	01800144 	movi	r6,5
  10a798:	e009883a 	mov	r4,fp
  10a79c:	010c2000 	call	10c200 <__multadd>
  10a7a0:	100b883a 	mov	r5,r2
  10a7a4:	8009883a 	mov	r4,r16
  10a7a8:	102b883a 	mov	r21,r2
  10a7ac:	010cab40 	call	10cab4 <__mcmp>
  10a7b0:	dc000915 	stw	r16,36(sp)
  10a7b4:	00bf410e 	bge	zero,r2,10a4bc <__alt_data_end+0xfffca4bc>
  10a7b8:	d9c00717 	ldw	r7,28(sp)
  10a7bc:	00800c44 	movi	r2,49
  10a7c0:	38800005 	stb	r2,0(r7)
  10a7c4:	d8800517 	ldw	r2,20(sp)
  10a7c8:	3dc00044 	addi	r23,r7,1
  10a7cc:	10800044 	addi	r2,r2,1
  10a7d0:	d8800515 	stw	r2,20(sp)
  10a7d4:	003f3d06 	br	10a4cc <__alt_data_end+0xfffca4cc>
  10a7d8:	d9800517 	ldw	r6,20(sp)
  10a7dc:	d9c00717 	ldw	r7,28(sp)
  10a7e0:	00800c44 	movi	r2,49
  10a7e4:	31800044 	addi	r6,r6,1
  10a7e8:	d9800515 	stw	r6,20(sp)
  10a7ec:	38800005 	stb	r2,0(r7)
  10a7f0:	003edf06 	br	10a370 <__alt_data_end+0xfffca370>
  10a7f4:	d8000b15 	stw	zero,44(sp)
  10a7f8:	003c9f06 	br	109a78 <__alt_data_end+0xfffc9a78>
  10a7fc:	903e7e1e 	bne	r18,zero,10a1f8 <__alt_data_end+0xfffca1f8>
  10a800:	00800434 	movhi	r2,16
  10a804:	10bfffc4 	addi	r2,r2,-1
  10a808:	9884703a 	and	r2,r19,r2
  10a80c:	1000ea1e 	bne	r2,zero,10abb8 <_dtoa_r+0x1460>
  10a810:	9cdffc2c 	andhi	r19,r19,32752
  10a814:	9800e826 	beq	r19,zero,10abb8 <_dtoa_r+0x1460>
  10a818:	d9c00817 	ldw	r7,32(sp)
  10a81c:	b5800044 	addi	r22,r22,1
  10a820:	04c00044 	movi	r19,1
  10a824:	39c00044 	addi	r7,r7,1
  10a828:	d9c00815 	stw	r7,32(sp)
  10a82c:	d8800d17 	ldw	r2,52(sp)
  10a830:	103e721e 	bne	r2,zero,10a1fc <__alt_data_end+0xfffca1fc>
  10a834:	00800044 	movi	r2,1
  10a838:	003e7906 	br	10a220 <__alt_data_end+0xfffca220>
  10a83c:	8009883a 	mov	r4,r16
  10a840:	01189540 	call	118954 <__floatsidf>
  10a844:	d9800f17 	ldw	r6,60(sp)
  10a848:	d9c01017 	ldw	r7,64(sp)
  10a84c:	1009883a 	mov	r4,r2
  10a850:	180b883a 	mov	r5,r3
  10a854:	011776c0 	call	11776c <__muldf3>
  10a858:	000d883a 	mov	r6,zero
  10a85c:	01d00734 	movhi	r7,16412
  10a860:	1009883a 	mov	r4,r2
  10a864:	180b883a 	mov	r5,r3
  10a868:	01162980 	call	116298 <__adddf3>
  10a86c:	047f3034 	movhi	r17,64704
  10a870:	1021883a 	mov	r16,r2
  10a874:	1c63883a 	add	r17,r3,r17
  10a878:	d9000f17 	ldw	r4,60(sp)
  10a87c:	d9401017 	ldw	r5,64(sp)
  10a880:	000d883a 	mov	r6,zero
  10a884:	01d00534 	movhi	r7,16404
  10a888:	0117fd80 	call	117fd8 <__subdf3>
  10a88c:	800d883a 	mov	r6,r16
  10a890:	880f883a 	mov	r7,r17
  10a894:	1009883a 	mov	r4,r2
  10a898:	180b883a 	mov	r5,r3
  10a89c:	102b883a 	mov	r21,r2
  10a8a0:	1829883a 	mov	r20,r3
  10a8a4:	011759c0 	call	11759c <__gedf2>
  10a8a8:	00806c16 	blt	zero,r2,10aa5c <_dtoa_r+0x1304>
  10a8ac:	89e0003c 	xorhi	r7,r17,32768
  10a8b0:	800d883a 	mov	r6,r16
  10a8b4:	a809883a 	mov	r4,r21
  10a8b8:	a00b883a 	mov	r5,r20
  10a8bc:	01176780 	call	117678 <__ledf2>
  10a8c0:	103d7e0e 	bge	r2,zero,109ebc <__alt_data_end+0xfffc9ebc>
  10a8c4:	002b883a 	mov	r21,zero
  10a8c8:	0023883a 	mov	r17,zero
  10a8cc:	003efb06 	br	10a4bc <__alt_data_end+0xfffca4bc>
  10a8d0:	d8800717 	ldw	r2,28(sp)
  10a8d4:	003bd006 	br	109818 <__alt_data_end+0xfffc9818>
  10a8d8:	d9000a17 	ldw	r4,40(sp)
  10a8dc:	d9800d17 	ldw	r6,52(sp)
  10a8e0:	dd400a15 	stw	r21,40(sp)
  10a8e4:	a905c83a 	sub	r2,r21,r4
  10a8e8:	308d883a 	add	r6,r6,r2
  10a8ec:	d9800d15 	stw	r6,52(sp)
  10a8f0:	002b883a 	mov	r21,zero
  10a8f4:	003e0606 	br	10a110 <__alt_data_end+0xfffca110>
  10a8f8:	9023883a 	mov	r17,r18
  10a8fc:	9829883a 	mov	r20,r19
  10a900:	04000084 	movi	r16,2
  10a904:	003c9206 	br	109b50 <__alt_data_end+0xfffc9b50>
  10a908:	04000044 	movi	r16,1
  10a90c:	dc000c15 	stw	r16,48(sp)
  10a910:	dc000615 	stw	r16,24(sp)
  10a914:	dc002215 	stw	r16,136(sp)
  10a918:	e0001115 	stw	zero,68(fp)
  10a91c:	000b883a 	mov	r5,zero
  10a920:	003c6906 	br	109ac8 <__alt_data_end+0xfffc9ac8>
  10a924:	3021883a 	mov	r16,r6
  10a928:	003ffb06 	br	10a918 <__alt_data_end+0xfffca918>
  10a92c:	1000021e 	bne	r2,zero,10a938 <_dtoa_r+0x11e0>
  10a930:	4200004c 	andi	r8,r8,1
  10a934:	403e7d1e 	bne	r8,zero,10a32c <__alt_data_end+0xfffca32c>
  10a938:	01000c04 	movi	r4,48
  10a93c:	00000106 	br	10a944 <_dtoa_r+0x11ec>
  10a940:	102f883a 	mov	r23,r2
  10a944:	b8bfffc4 	addi	r2,r23,-1
  10a948:	10c00007 	ldb	r3,0(r2)
  10a94c:	193ffc26 	beq	r3,r4,10a940 <__alt_data_end+0xfffca940>
  10a950:	003e8706 	br	10a370 <__alt_data_end+0xfffca370>
  10a954:	d8800517 	ldw	r2,20(sp)
  10a958:	00a3c83a 	sub	r17,zero,r2
  10a95c:	8800a426 	beq	r17,zero,10abf0 <_dtoa_r+0x1498>
  10a960:	888003cc 	andi	r2,r17,15
  10a964:	100490fa 	slli	r2,r2,3
  10a968:	00c004b4 	movhi	r3,18
  10a96c:	18cf2c04 	addi	r3,r3,15536
  10a970:	1885883a 	add	r2,r3,r2
  10a974:	11800017 	ldw	r6,0(r2)
  10a978:	11c00117 	ldw	r7,4(r2)
  10a97c:	9009883a 	mov	r4,r18
  10a980:	980b883a 	mov	r5,r19
  10a984:	8823d13a 	srai	r17,r17,4
  10a988:	011776c0 	call	11776c <__muldf3>
  10a98c:	d8800f15 	stw	r2,60(sp)
  10a990:	d8c01015 	stw	r3,64(sp)
  10a994:	8800e826 	beq	r17,zero,10ad38 <_dtoa_r+0x15e0>
  10a998:	050004b4 	movhi	r20,18
  10a99c:	a50f2204 	addi	r20,r20,15496
  10a9a0:	04000084 	movi	r16,2
  10a9a4:	8980004c 	andi	r6,r17,1
  10a9a8:	1009883a 	mov	r4,r2
  10a9ac:	8823d07a 	srai	r17,r17,1
  10a9b0:	180b883a 	mov	r5,r3
  10a9b4:	30000426 	beq	r6,zero,10a9c8 <_dtoa_r+0x1270>
  10a9b8:	a1800017 	ldw	r6,0(r20)
  10a9bc:	a1c00117 	ldw	r7,4(r20)
  10a9c0:	84000044 	addi	r16,r16,1
  10a9c4:	011776c0 	call	11776c <__muldf3>
  10a9c8:	a5000204 	addi	r20,r20,8
  10a9cc:	883ff51e 	bne	r17,zero,10a9a4 <__alt_data_end+0xfffca9a4>
  10a9d0:	d8800f15 	stw	r2,60(sp)
  10a9d4:	d8c01015 	stw	r3,64(sp)
  10a9d8:	003c7606 	br	109bb4 <__alt_data_end+0xfffc9bb4>
  10a9dc:	00c00c04 	movi	r3,48
  10a9e0:	10c00005 	stb	r3,0(r2)
  10a9e4:	d8c00517 	ldw	r3,20(sp)
  10a9e8:	bd3fffc3 	ldbu	r20,-1(r23)
  10a9ec:	18c00044 	addi	r3,r3,1
  10a9f0:	d8c00515 	stw	r3,20(sp)
  10a9f4:	003db906 	br	10a0dc <__alt_data_end+0xfffca0dc>
  10a9f8:	89400117 	ldw	r5,4(r17)
  10a9fc:	e009883a 	mov	r4,fp
  10aa00:	010c1300 	call	10c130 <_Balloc>
  10aa04:	89800417 	ldw	r6,16(r17)
  10aa08:	89400304 	addi	r5,r17,12
  10aa0c:	11000304 	addi	r4,r2,12
  10aa10:	31800084 	addi	r6,r6,2
  10aa14:	318d883a 	add	r6,r6,r6
  10aa18:	318d883a 	add	r6,r6,r6
  10aa1c:	1027883a 	mov	r19,r2
  10aa20:	01027180 	call	102718 <memcpy>
  10aa24:	01800044 	movi	r6,1
  10aa28:	980b883a 	mov	r5,r19
  10aa2c:	e009883a 	mov	r4,fp
  10aa30:	010c96c0 	call	10c96c <__lshift>
  10aa34:	1029883a 	mov	r20,r2
  10aa38:	003ecc06 	br	10a56c <__alt_data_end+0xfffca56c>
  10aa3c:	00800e44 	movi	r2,57
  10aa40:	90809026 	beq	r18,r2,10ac84 <_dtoa_r+0x152c>
  10aa44:	92000044 	addi	r8,r18,1
  10aa48:	003f1f06 	br	10a6c8 <__alt_data_end+0xfffca6c8>
  10aa4c:	9011883a 	mov	r8,r18
  10aa50:	8825883a 	mov	r18,r17
  10aa54:	a023883a 	mov	r17,r20
  10aa58:	003e2906 	br	10a300 <__alt_data_end+0xfffca300>
  10aa5c:	002b883a 	mov	r21,zero
  10aa60:	0023883a 	mov	r17,zero
  10aa64:	003f5406 	br	10a7b8 <__alt_data_end+0xfffca7b8>
  10aa68:	61bfffc4 	addi	r6,r12,-1
  10aa6c:	300490fa 	slli	r2,r6,3
  10aa70:	00c004b4 	movhi	r3,18
  10aa74:	18cf2c04 	addi	r3,r3,15536
  10aa78:	1885883a 	add	r2,r3,r2
  10aa7c:	11000017 	ldw	r4,0(r2)
  10aa80:	11400117 	ldw	r5,4(r2)
  10aa84:	d8800717 	ldw	r2,28(sp)
  10aa88:	880f883a 	mov	r7,r17
  10aa8c:	d9801215 	stw	r6,72(sp)
  10aa90:	800d883a 	mov	r6,r16
  10aa94:	db001615 	stw	r12,88(sp)
  10aa98:	15c00044 	addi	r23,r2,1
  10aa9c:	011776c0 	call	11776c <__muldf3>
  10aaa0:	d9401017 	ldw	r5,64(sp)
  10aaa4:	d9000f17 	ldw	r4,60(sp)
  10aaa8:	d8c01515 	stw	r3,84(sp)
  10aaac:	d8801415 	stw	r2,80(sp)
  10aab0:	01188d40 	call	1188d4 <__fixdfsi>
  10aab4:	1009883a 	mov	r4,r2
  10aab8:	1021883a 	mov	r16,r2
  10aabc:	01189540 	call	118954 <__floatsidf>
  10aac0:	d9000f17 	ldw	r4,60(sp)
  10aac4:	d9401017 	ldw	r5,64(sp)
  10aac8:	100d883a 	mov	r6,r2
  10aacc:	180f883a 	mov	r7,r3
  10aad0:	0117fd80 	call	117fd8 <__subdf3>
  10aad4:	1829883a 	mov	r20,r3
  10aad8:	d8c00717 	ldw	r3,28(sp)
  10aadc:	84000c04 	addi	r16,r16,48
  10aae0:	1023883a 	mov	r17,r2
  10aae4:	1c000005 	stb	r16,0(r3)
  10aae8:	db001617 	ldw	r12,88(sp)
  10aaec:	00800044 	movi	r2,1
  10aaf0:	60802226 	beq	r12,r2,10ab7c <_dtoa_r+0x1424>
  10aaf4:	d9c00717 	ldw	r7,28(sp)
  10aaf8:	8805883a 	mov	r2,r17
  10aafc:	b82b883a 	mov	r21,r23
  10ab00:	3b19883a 	add	r12,r7,r12
  10ab04:	6023883a 	mov	r17,r12
  10ab08:	a007883a 	mov	r3,r20
  10ab0c:	dc800f15 	stw	r18,60(sp)
  10ab10:	000d883a 	mov	r6,zero
  10ab14:	01d00934 	movhi	r7,16420
  10ab18:	1009883a 	mov	r4,r2
  10ab1c:	180b883a 	mov	r5,r3
  10ab20:	011776c0 	call	11776c <__muldf3>
  10ab24:	180b883a 	mov	r5,r3
  10ab28:	1009883a 	mov	r4,r2
  10ab2c:	1829883a 	mov	r20,r3
  10ab30:	1025883a 	mov	r18,r2
  10ab34:	01188d40 	call	1188d4 <__fixdfsi>
  10ab38:	1009883a 	mov	r4,r2
  10ab3c:	1021883a 	mov	r16,r2
  10ab40:	01189540 	call	118954 <__floatsidf>
  10ab44:	100d883a 	mov	r6,r2
  10ab48:	180f883a 	mov	r7,r3
  10ab4c:	9009883a 	mov	r4,r18
  10ab50:	a00b883a 	mov	r5,r20
  10ab54:	84000c04 	addi	r16,r16,48
  10ab58:	0117fd80 	call	117fd8 <__subdf3>
  10ab5c:	ad400044 	addi	r21,r21,1
  10ab60:	ac3fffc5 	stb	r16,-1(r21)
  10ab64:	ac7fea1e 	bne	r21,r17,10ab10 <__alt_data_end+0xfffcab10>
  10ab68:	1023883a 	mov	r17,r2
  10ab6c:	d8801217 	ldw	r2,72(sp)
  10ab70:	dc800f17 	ldw	r18,60(sp)
  10ab74:	1829883a 	mov	r20,r3
  10ab78:	b8af883a 	add	r23,r23,r2
  10ab7c:	d9001417 	ldw	r4,80(sp)
  10ab80:	d9401517 	ldw	r5,84(sp)
  10ab84:	000d883a 	mov	r6,zero
  10ab88:	01cff834 	movhi	r7,16352
  10ab8c:	01162980 	call	116298 <__adddf3>
  10ab90:	880d883a 	mov	r6,r17
  10ab94:	a00f883a 	mov	r7,r20
  10ab98:	1009883a 	mov	r4,r2
  10ab9c:	180b883a 	mov	r5,r3
  10aba0:	01176780 	call	117678 <__ledf2>
  10aba4:	10003e0e 	bge	r2,zero,10aca0 <_dtoa_r+0x1548>
  10aba8:	d9001317 	ldw	r4,76(sp)
  10abac:	bd3fffc3 	ldbu	r20,-1(r23)
  10abb0:	d9000515 	stw	r4,20(sp)
  10abb4:	003d3b06 	br	10a0a4 <__alt_data_end+0xfffca0a4>
  10abb8:	0027883a 	mov	r19,zero
  10abbc:	003f1b06 	br	10a82c <__alt_data_end+0xfffca82c>
  10abc0:	d8800817 	ldw	r2,32(sp)
  10abc4:	11e9c83a 	sub	r20,r2,r7
  10abc8:	0005883a 	mov	r2,zero
  10abcc:	003d5406 	br	10a120 <__alt_data_end+0xfffca120>
  10abd0:	00800044 	movi	r2,1
  10abd4:	003dc706 	br	10a2f4 <__alt_data_end+0xfffca2f4>
  10abd8:	d8c00217 	ldw	r3,8(sp)
  10abdc:	00800d84 	movi	r2,54
  10abe0:	dd400a17 	ldw	r21,40(sp)
  10abe4:	10c5c83a 	sub	r2,r2,r3
  10abe8:	dd000817 	ldw	r20,32(sp)
  10abec:	003d4c06 	br	10a120 <__alt_data_end+0xfffca120>
  10abf0:	dc800f15 	stw	r18,60(sp)
  10abf4:	dcc01015 	stw	r19,64(sp)
  10abf8:	04000084 	movi	r16,2
  10abfc:	003bed06 	br	109bb4 <__alt_data_end+0xfffc9bb4>
  10ac00:	d9000617 	ldw	r4,24(sp)
  10ac04:	203f0d26 	beq	r4,zero,10a83c <__alt_data_end+0xfffca83c>
  10ac08:	d9800c17 	ldw	r6,48(sp)
  10ac0c:	01bcab0e 	bge	zero,r6,109ebc <__alt_data_end+0xfffc9ebc>
  10ac10:	d9401017 	ldw	r5,64(sp)
  10ac14:	d9000f17 	ldw	r4,60(sp)
  10ac18:	000d883a 	mov	r6,zero
  10ac1c:	01d00934 	movhi	r7,16420
  10ac20:	011776c0 	call	11776c <__muldf3>
  10ac24:	81000044 	addi	r4,r16,1
  10ac28:	d8800f15 	stw	r2,60(sp)
  10ac2c:	d8c01015 	stw	r3,64(sp)
  10ac30:	01189540 	call	118954 <__floatsidf>
  10ac34:	d9800f17 	ldw	r6,60(sp)
  10ac38:	d9c01017 	ldw	r7,64(sp)
  10ac3c:	1009883a 	mov	r4,r2
  10ac40:	180b883a 	mov	r5,r3
  10ac44:	011776c0 	call	11776c <__muldf3>
  10ac48:	01d00734 	movhi	r7,16412
  10ac4c:	000d883a 	mov	r6,zero
  10ac50:	1009883a 	mov	r4,r2
  10ac54:	180b883a 	mov	r5,r3
  10ac58:	01162980 	call	116298 <__adddf3>
  10ac5c:	d9c00517 	ldw	r7,20(sp)
  10ac60:	047f3034 	movhi	r17,64704
  10ac64:	1021883a 	mov	r16,r2
  10ac68:	39ffffc4 	addi	r7,r7,-1
  10ac6c:	d9c01315 	stw	r7,76(sp)
  10ac70:	1c63883a 	add	r17,r3,r17
  10ac74:	db000c17 	ldw	r12,48(sp)
  10ac78:	003bea06 	br	109c24 <__alt_data_end+0xfffc9c24>
  10ac7c:	dc000915 	stw	r16,36(sp)
  10ac80:	003e0e06 	br	10a4bc <__alt_data_end+0xfffca4bc>
  10ac84:	01000e44 	movi	r4,57
  10ac88:	8825883a 	mov	r18,r17
  10ac8c:	9dc00044 	addi	r23,r19,1
  10ac90:	99000005 	stb	r4,0(r19)
  10ac94:	a023883a 	mov	r17,r20
  10ac98:	dc000915 	stw	r16,36(sp)
  10ac9c:	003da406 	br	10a330 <__alt_data_end+0xfffca330>
  10aca0:	d9801417 	ldw	r6,80(sp)
  10aca4:	d9c01517 	ldw	r7,84(sp)
  10aca8:	0009883a 	mov	r4,zero
  10acac:	014ff834 	movhi	r5,16352
  10acb0:	0117fd80 	call	117fd8 <__subdf3>
  10acb4:	880d883a 	mov	r6,r17
  10acb8:	a00f883a 	mov	r7,r20
  10acbc:	1009883a 	mov	r4,r2
  10acc0:	180b883a 	mov	r5,r3
  10acc4:	011759c0 	call	11759c <__gedf2>
  10acc8:	00bc7c0e 	bge	zero,r2,109ebc <__alt_data_end+0xfffc9ebc>
  10accc:	01000c04 	movi	r4,48
  10acd0:	00000106 	br	10acd8 <_dtoa_r+0x1580>
  10acd4:	102f883a 	mov	r23,r2
  10acd8:	b8bfffc4 	addi	r2,r23,-1
  10acdc:	10c00007 	ldb	r3,0(r2)
  10ace0:	193ffc26 	beq	r3,r4,10acd4 <__alt_data_end+0xfffcacd4>
  10ace4:	d9801317 	ldw	r6,76(sp)
  10ace8:	d9800515 	stw	r6,20(sp)
  10acec:	003c4406 	br	109e00 <__alt_data_end+0xfffc9e00>
  10acf0:	d9801317 	ldw	r6,76(sp)
  10acf4:	d9800515 	stw	r6,20(sp)
  10acf8:	003cea06 	br	10a0a4 <__alt_data_end+0xfffca0a4>
  10acfc:	dd800f17 	ldw	r22,60(sp)
  10ad00:	dcc01017 	ldw	r19,64(sp)
  10ad04:	dc801217 	ldw	r18,72(sp)
  10ad08:	003c6c06 	br	109ebc <__alt_data_end+0xfffc9ebc>
  10ad0c:	903e031e 	bne	r18,zero,10a51c <__alt_data_end+0xfffca51c>
  10ad10:	003ebb06 	br	10a800 <__alt_data_end+0xfffca800>
  10ad14:	103e6c1e 	bne	r2,zero,10a6c8 <__alt_data_end+0xfffca6c8>
  10ad18:	4080004c 	andi	r2,r8,1
  10ad1c:	103e6a26 	beq	r2,zero,10a6c8 <__alt_data_end+0xfffca6c8>
  10ad20:	003e6606 	br	10a6bc <__alt_data_end+0xfffca6bc>
  10ad24:	d8c00317 	ldw	r3,12(sp)
  10ad28:	00800084 	movi	r2,2
  10ad2c:	10c02916 	blt	r2,r3,10add4 <_dtoa_r+0x167c>
  10ad30:	d9000c17 	ldw	r4,48(sp)
  10ad34:	003e8806 	br	10a758 <__alt_data_end+0xfffca758>
  10ad38:	04000084 	movi	r16,2
  10ad3c:	003b9d06 	br	109bb4 <__alt_data_end+0xfffc9bb4>
  10ad40:	d9001317 	ldw	r4,76(sp)
  10ad44:	d9000515 	stw	r4,20(sp)
  10ad48:	003cd606 	br	10a0a4 <__alt_data_end+0xfffca0a4>
  10ad4c:	d8801317 	ldw	r2,76(sp)
  10ad50:	d8800515 	stw	r2,20(sp)
  10ad54:	003c2a06 	br	109e00 <__alt_data_end+0xfffc9e00>
  10ad58:	d9800317 	ldw	r6,12(sp)
  10ad5c:	00800084 	movi	r2,2
  10ad60:	11801516 	blt	r2,r6,10adb8 <_dtoa_r+0x1660>
  10ad64:	d9c00c17 	ldw	r7,48(sp)
  10ad68:	d9c00615 	stw	r7,24(sp)
  10ad6c:	003df706 	br	10a54c <__alt_data_end+0xfffca54c>
  10ad70:	193d3926 	beq	r3,r4,10a258 <__alt_data_end+0xfffca258>
  10ad74:	00c00f04 	movi	r3,60
  10ad78:	1885c83a 	sub	r2,r3,r2
  10ad7c:	003ddf06 	br	10a4fc <__alt_data_end+0xfffca4fc>
  10ad80:	e009883a 	mov	r4,fp
  10ad84:	e0001115 	stw	zero,68(fp)
  10ad88:	000b883a 	mov	r5,zero
  10ad8c:	010c1300 	call	10c130 <_Balloc>
  10ad90:	d8800715 	stw	r2,28(sp)
  10ad94:	d8c00717 	ldw	r3,28(sp)
  10ad98:	00bfffc4 	movi	r2,-1
  10ad9c:	01000044 	movi	r4,1
  10ada0:	d8800c15 	stw	r2,48(sp)
  10ada4:	e0c01015 	stw	r3,64(fp)
  10ada8:	d9000b15 	stw	r4,44(sp)
  10adac:	d8800615 	stw	r2,24(sp)
  10adb0:	d8002215 	stw	zero,136(sp)
  10adb4:	003c4106 	br	109ebc <__alt_data_end+0xfffc9ebc>
  10adb8:	d8c00c17 	ldw	r3,48(sp)
  10adbc:	d8c00615 	stw	r3,24(sp)
  10adc0:	003e7006 	br	10a784 <__alt_data_end+0xfffca784>
  10adc4:	04400044 	movi	r17,1
  10adc8:	003b2006 	br	109a4c <__alt_data_end+0xfffc9a4c>
  10adcc:	000b883a 	mov	r5,zero
  10add0:	003b3d06 	br	109ac8 <__alt_data_end+0xfffc9ac8>
  10add4:	d8800c17 	ldw	r2,48(sp)
  10add8:	d8800615 	stw	r2,24(sp)
  10addc:	003e6906 	br	10a784 <__alt_data_end+0xfffca784>

0010ade0 <_fclose_r>:
  10ade0:	28003926 	beq	r5,zero,10aec8 <_fclose_r+0xe8>
  10ade4:	defffc04 	addi	sp,sp,-16
  10ade8:	dc400115 	stw	r17,4(sp)
  10adec:	dc000015 	stw	r16,0(sp)
  10adf0:	dfc00315 	stw	ra,12(sp)
  10adf4:	dc800215 	stw	r18,8(sp)
  10adf8:	2023883a 	mov	r17,r4
  10adfc:	2821883a 	mov	r16,r5
  10ae00:	20000226 	beq	r4,zero,10ae0c <_fclose_r+0x2c>
  10ae04:	20800e17 	ldw	r2,56(r4)
  10ae08:	10002726 	beq	r2,zero,10aea8 <_fclose_r+0xc8>
  10ae0c:	8080030f 	ldh	r2,12(r16)
  10ae10:	1000071e 	bne	r2,zero,10ae30 <_fclose_r+0x50>
  10ae14:	0005883a 	mov	r2,zero
  10ae18:	dfc00317 	ldw	ra,12(sp)
  10ae1c:	dc800217 	ldw	r18,8(sp)
  10ae20:	dc400117 	ldw	r17,4(sp)
  10ae24:	dc000017 	ldw	r16,0(sp)
  10ae28:	dec00404 	addi	sp,sp,16
  10ae2c:	f800283a 	ret
  10ae30:	800b883a 	mov	r5,r16
  10ae34:	8809883a 	mov	r4,r17
  10ae38:	010aee40 	call	10aee4 <__sflush_r>
  10ae3c:	1025883a 	mov	r18,r2
  10ae40:	80800b17 	ldw	r2,44(r16)
  10ae44:	10000426 	beq	r2,zero,10ae58 <_fclose_r+0x78>
  10ae48:	81400717 	ldw	r5,28(r16)
  10ae4c:	8809883a 	mov	r4,r17
  10ae50:	103ee83a 	callr	r2
  10ae54:	10001616 	blt	r2,zero,10aeb0 <_fclose_r+0xd0>
  10ae58:	8080030b 	ldhu	r2,12(r16)
  10ae5c:	1080200c 	andi	r2,r2,128
  10ae60:	1000151e 	bne	r2,zero,10aeb8 <_fclose_r+0xd8>
  10ae64:	81400c17 	ldw	r5,48(r16)
  10ae68:	28000526 	beq	r5,zero,10ae80 <_fclose_r+0xa0>
  10ae6c:	80801004 	addi	r2,r16,64
  10ae70:	28800226 	beq	r5,r2,10ae7c <_fclose_r+0x9c>
  10ae74:	8809883a 	mov	r4,r17
  10ae78:	010b2b00 	call	10b2b0 <_free_r>
  10ae7c:	80000c15 	stw	zero,48(r16)
  10ae80:	81401117 	ldw	r5,68(r16)
  10ae84:	28000326 	beq	r5,zero,10ae94 <_fclose_r+0xb4>
  10ae88:	8809883a 	mov	r4,r17
  10ae8c:	010b2b00 	call	10b2b0 <_free_r>
  10ae90:	80001115 	stw	zero,68(r16)
  10ae94:	0101c600 	call	101c60 <__sfp_lock_acquire>
  10ae98:	8000030d 	sth	zero,12(r16)
  10ae9c:	0101c640 	call	101c64 <__sfp_lock_release>
  10aea0:	9005883a 	mov	r2,r18
  10aea4:	003fdc06 	br	10ae18 <__alt_data_end+0xfffcae18>
  10aea8:	0101c500 	call	101c50 <__sinit>
  10aeac:	003fd706 	br	10ae0c <__alt_data_end+0xfffcae0c>
  10aeb0:	04bfffc4 	movi	r18,-1
  10aeb4:	003fe806 	br	10ae58 <__alt_data_end+0xfffcae58>
  10aeb8:	81400417 	ldw	r5,16(r16)
  10aebc:	8809883a 	mov	r4,r17
  10aec0:	010b2b00 	call	10b2b0 <_free_r>
  10aec4:	003fe706 	br	10ae64 <__alt_data_end+0xfffcae64>
  10aec8:	0005883a 	mov	r2,zero
  10aecc:	f800283a 	ret

0010aed0 <fclose>:
  10aed0:	008004b4 	movhi	r2,18
  10aed4:	10972d04 	addi	r2,r2,23732
  10aed8:	200b883a 	mov	r5,r4
  10aedc:	11000017 	ldw	r4,0(r2)
  10aee0:	010ade01 	jmpi	10ade0 <_fclose_r>

0010aee4 <__sflush_r>:
  10aee4:	2880030b 	ldhu	r2,12(r5)
  10aee8:	defffb04 	addi	sp,sp,-20
  10aeec:	dcc00315 	stw	r19,12(sp)
  10aef0:	dc400115 	stw	r17,4(sp)
  10aef4:	dfc00415 	stw	ra,16(sp)
  10aef8:	dc800215 	stw	r18,8(sp)
  10aefc:	dc000015 	stw	r16,0(sp)
  10af00:	10c0020c 	andi	r3,r2,8
  10af04:	2823883a 	mov	r17,r5
  10af08:	2027883a 	mov	r19,r4
  10af0c:	1800311e 	bne	r3,zero,10afd4 <__sflush_r+0xf0>
  10af10:	28c00117 	ldw	r3,4(r5)
  10af14:	10820014 	ori	r2,r2,2048
  10af18:	2880030d 	sth	r2,12(r5)
  10af1c:	00c04b0e 	bge	zero,r3,10b04c <__sflush_r+0x168>
  10af20:	8a000a17 	ldw	r8,40(r17)
  10af24:	40002326 	beq	r8,zero,10afb4 <__sflush_r+0xd0>
  10af28:	9c000017 	ldw	r16,0(r19)
  10af2c:	10c4000c 	andi	r3,r2,4096
  10af30:	98000015 	stw	zero,0(r19)
  10af34:	18004826 	beq	r3,zero,10b058 <__sflush_r+0x174>
  10af38:	89801417 	ldw	r6,80(r17)
  10af3c:	10c0010c 	andi	r3,r2,4
  10af40:	18000626 	beq	r3,zero,10af5c <__sflush_r+0x78>
  10af44:	88c00117 	ldw	r3,4(r17)
  10af48:	88800c17 	ldw	r2,48(r17)
  10af4c:	30cdc83a 	sub	r6,r6,r3
  10af50:	10000226 	beq	r2,zero,10af5c <__sflush_r+0x78>
  10af54:	88800f17 	ldw	r2,60(r17)
  10af58:	308dc83a 	sub	r6,r6,r2
  10af5c:	89400717 	ldw	r5,28(r17)
  10af60:	000f883a 	mov	r7,zero
  10af64:	9809883a 	mov	r4,r19
  10af68:	403ee83a 	callr	r8
  10af6c:	00ffffc4 	movi	r3,-1
  10af70:	10c04426 	beq	r2,r3,10b084 <__sflush_r+0x1a0>
  10af74:	88c0030b 	ldhu	r3,12(r17)
  10af78:	89000417 	ldw	r4,16(r17)
  10af7c:	88000115 	stw	zero,4(r17)
  10af80:	197dffcc 	andi	r5,r3,63487
  10af84:	8940030d 	sth	r5,12(r17)
  10af88:	89000015 	stw	r4,0(r17)
  10af8c:	18c4000c 	andi	r3,r3,4096
  10af90:	18002c1e 	bne	r3,zero,10b044 <__sflush_r+0x160>
  10af94:	89400c17 	ldw	r5,48(r17)
  10af98:	9c000015 	stw	r16,0(r19)
  10af9c:	28000526 	beq	r5,zero,10afb4 <__sflush_r+0xd0>
  10afa0:	88801004 	addi	r2,r17,64
  10afa4:	28800226 	beq	r5,r2,10afb0 <__sflush_r+0xcc>
  10afa8:	9809883a 	mov	r4,r19
  10afac:	010b2b00 	call	10b2b0 <_free_r>
  10afb0:	88000c15 	stw	zero,48(r17)
  10afb4:	0005883a 	mov	r2,zero
  10afb8:	dfc00417 	ldw	ra,16(sp)
  10afbc:	dcc00317 	ldw	r19,12(sp)
  10afc0:	dc800217 	ldw	r18,8(sp)
  10afc4:	dc400117 	ldw	r17,4(sp)
  10afc8:	dc000017 	ldw	r16,0(sp)
  10afcc:	dec00504 	addi	sp,sp,20
  10afd0:	f800283a 	ret
  10afd4:	2c800417 	ldw	r18,16(r5)
  10afd8:	903ff626 	beq	r18,zero,10afb4 <__alt_data_end+0xfffcafb4>
  10afdc:	2c000017 	ldw	r16,0(r5)
  10afe0:	108000cc 	andi	r2,r2,3
  10afe4:	2c800015 	stw	r18,0(r5)
  10afe8:	84a1c83a 	sub	r16,r16,r18
  10afec:	1000131e 	bne	r2,zero,10b03c <__sflush_r+0x158>
  10aff0:	28800517 	ldw	r2,20(r5)
  10aff4:	88800215 	stw	r2,8(r17)
  10aff8:	04000316 	blt	zero,r16,10b008 <__sflush_r+0x124>
  10affc:	003fed06 	br	10afb4 <__alt_data_end+0xfffcafb4>
  10b000:	90a5883a 	add	r18,r18,r2
  10b004:	043feb0e 	bge	zero,r16,10afb4 <__alt_data_end+0xfffcafb4>
  10b008:	88800917 	ldw	r2,36(r17)
  10b00c:	89400717 	ldw	r5,28(r17)
  10b010:	800f883a 	mov	r7,r16
  10b014:	900d883a 	mov	r6,r18
  10b018:	9809883a 	mov	r4,r19
  10b01c:	103ee83a 	callr	r2
  10b020:	80a1c83a 	sub	r16,r16,r2
  10b024:	00bff616 	blt	zero,r2,10b000 <__alt_data_end+0xfffcb000>
  10b028:	88c0030b 	ldhu	r3,12(r17)
  10b02c:	00bfffc4 	movi	r2,-1
  10b030:	18c01014 	ori	r3,r3,64
  10b034:	88c0030d 	sth	r3,12(r17)
  10b038:	003fdf06 	br	10afb8 <__alt_data_end+0xfffcafb8>
  10b03c:	0005883a 	mov	r2,zero
  10b040:	003fec06 	br	10aff4 <__alt_data_end+0xfffcaff4>
  10b044:	88801415 	stw	r2,80(r17)
  10b048:	003fd206 	br	10af94 <__alt_data_end+0xfffcaf94>
  10b04c:	28c00f17 	ldw	r3,60(r5)
  10b050:	00ffb316 	blt	zero,r3,10af20 <__alt_data_end+0xfffcaf20>
  10b054:	003fd706 	br	10afb4 <__alt_data_end+0xfffcafb4>
  10b058:	89400717 	ldw	r5,28(r17)
  10b05c:	000d883a 	mov	r6,zero
  10b060:	01c00044 	movi	r7,1
  10b064:	9809883a 	mov	r4,r19
  10b068:	403ee83a 	callr	r8
  10b06c:	100d883a 	mov	r6,r2
  10b070:	00bfffc4 	movi	r2,-1
  10b074:	30801426 	beq	r6,r2,10b0c8 <__sflush_r+0x1e4>
  10b078:	8880030b 	ldhu	r2,12(r17)
  10b07c:	8a000a17 	ldw	r8,40(r17)
  10b080:	003fae06 	br	10af3c <__alt_data_end+0xfffcaf3c>
  10b084:	98c00017 	ldw	r3,0(r19)
  10b088:	183fba26 	beq	r3,zero,10af74 <__alt_data_end+0xfffcaf74>
  10b08c:	01000744 	movi	r4,29
  10b090:	19000626 	beq	r3,r4,10b0ac <__sflush_r+0x1c8>
  10b094:	01000584 	movi	r4,22
  10b098:	19000426 	beq	r3,r4,10b0ac <__sflush_r+0x1c8>
  10b09c:	88c0030b 	ldhu	r3,12(r17)
  10b0a0:	18c01014 	ori	r3,r3,64
  10b0a4:	88c0030d 	sth	r3,12(r17)
  10b0a8:	003fc306 	br	10afb8 <__alt_data_end+0xfffcafb8>
  10b0ac:	8880030b 	ldhu	r2,12(r17)
  10b0b0:	88c00417 	ldw	r3,16(r17)
  10b0b4:	88000115 	stw	zero,4(r17)
  10b0b8:	10bdffcc 	andi	r2,r2,63487
  10b0bc:	8880030d 	sth	r2,12(r17)
  10b0c0:	88c00015 	stw	r3,0(r17)
  10b0c4:	003fb306 	br	10af94 <__alt_data_end+0xfffcaf94>
  10b0c8:	98800017 	ldw	r2,0(r19)
  10b0cc:	103fea26 	beq	r2,zero,10b078 <__alt_data_end+0xfffcb078>
  10b0d0:	00c00744 	movi	r3,29
  10b0d4:	10c00226 	beq	r2,r3,10b0e0 <__sflush_r+0x1fc>
  10b0d8:	00c00584 	movi	r3,22
  10b0dc:	10c0031e 	bne	r2,r3,10b0ec <__sflush_r+0x208>
  10b0e0:	9c000015 	stw	r16,0(r19)
  10b0e4:	0005883a 	mov	r2,zero
  10b0e8:	003fb306 	br	10afb8 <__alt_data_end+0xfffcafb8>
  10b0ec:	88c0030b 	ldhu	r3,12(r17)
  10b0f0:	3005883a 	mov	r2,r6
  10b0f4:	18c01014 	ori	r3,r3,64
  10b0f8:	88c0030d 	sth	r3,12(r17)
  10b0fc:	003fae06 	br	10afb8 <__alt_data_end+0xfffcafb8>

0010b100 <_fflush_r>:
  10b100:	defffd04 	addi	sp,sp,-12
  10b104:	dc000115 	stw	r16,4(sp)
  10b108:	dfc00215 	stw	ra,8(sp)
  10b10c:	2021883a 	mov	r16,r4
  10b110:	20000226 	beq	r4,zero,10b11c <_fflush_r+0x1c>
  10b114:	20800e17 	ldw	r2,56(r4)
  10b118:	10000c26 	beq	r2,zero,10b14c <_fflush_r+0x4c>
  10b11c:	2880030f 	ldh	r2,12(r5)
  10b120:	1000051e 	bne	r2,zero,10b138 <_fflush_r+0x38>
  10b124:	0005883a 	mov	r2,zero
  10b128:	dfc00217 	ldw	ra,8(sp)
  10b12c:	dc000117 	ldw	r16,4(sp)
  10b130:	dec00304 	addi	sp,sp,12
  10b134:	f800283a 	ret
  10b138:	8009883a 	mov	r4,r16
  10b13c:	dfc00217 	ldw	ra,8(sp)
  10b140:	dc000117 	ldw	r16,4(sp)
  10b144:	dec00304 	addi	sp,sp,12
  10b148:	010aee41 	jmpi	10aee4 <__sflush_r>
  10b14c:	d9400015 	stw	r5,0(sp)
  10b150:	0101c500 	call	101c50 <__sinit>
  10b154:	d9400017 	ldw	r5,0(sp)
  10b158:	003ff006 	br	10b11c <__alt_data_end+0xfffcb11c>

0010b15c <fflush>:
  10b15c:	20000526 	beq	r4,zero,10b174 <fflush+0x18>
  10b160:	008004b4 	movhi	r2,18
  10b164:	10972d04 	addi	r2,r2,23732
  10b168:	200b883a 	mov	r5,r4
  10b16c:	11000017 	ldw	r4,0(r2)
  10b170:	010b1001 	jmpi	10b100 <_fflush_r>
  10b174:	008004b4 	movhi	r2,18
  10b178:	10972c04 	addi	r2,r2,23728
  10b17c:	11000017 	ldw	r4,0(r2)
  10b180:	01400474 	movhi	r5,17
  10b184:	296c4004 	addi	r5,r5,-20224
  10b188:	0101d641 	jmpi	101d64 <_fwalk_reent>

0010b18c <_malloc_trim_r>:
  10b18c:	defffb04 	addi	sp,sp,-20
  10b190:	dcc00315 	stw	r19,12(sp)
  10b194:	04c004b4 	movhi	r19,18
  10b198:	dc800215 	stw	r18,8(sp)
  10b19c:	dc400115 	stw	r17,4(sp)
  10b1a0:	dc000015 	stw	r16,0(sp)
  10b1a4:	dfc00415 	stw	ra,16(sp)
  10b1a8:	2821883a 	mov	r16,r5
  10b1ac:	9cd18704 	addi	r19,r19,17948
  10b1b0:	2025883a 	mov	r18,r4
  10b1b4:	01197940 	call	119794 <__malloc_lock>
  10b1b8:	98800217 	ldw	r2,8(r19)
  10b1bc:	14400117 	ldw	r17,4(r2)
  10b1c0:	00bfff04 	movi	r2,-4
  10b1c4:	88a2703a 	and	r17,r17,r2
  10b1c8:	8c21c83a 	sub	r16,r17,r16
  10b1cc:	8403fbc4 	addi	r16,r16,4079
  10b1d0:	8020d33a 	srli	r16,r16,12
  10b1d4:	0083ffc4 	movi	r2,4095
  10b1d8:	843fffc4 	addi	r16,r16,-1
  10b1dc:	8020933a 	slli	r16,r16,12
  10b1e0:	1400060e 	bge	r2,r16,10b1fc <_malloc_trim_r+0x70>
  10b1e4:	000b883a 	mov	r5,zero
  10b1e8:	9009883a 	mov	r4,r18
  10b1ec:	0102cb80 	call	102cb8 <_sbrk_r>
  10b1f0:	98c00217 	ldw	r3,8(r19)
  10b1f4:	1c47883a 	add	r3,r3,r17
  10b1f8:	10c00a26 	beq	r2,r3,10b224 <_malloc_trim_r+0x98>
  10b1fc:	9009883a 	mov	r4,r18
  10b200:	01198b40 	call	1198b4 <__malloc_unlock>
  10b204:	0005883a 	mov	r2,zero
  10b208:	dfc00417 	ldw	ra,16(sp)
  10b20c:	dcc00317 	ldw	r19,12(sp)
  10b210:	dc800217 	ldw	r18,8(sp)
  10b214:	dc400117 	ldw	r17,4(sp)
  10b218:	dc000017 	ldw	r16,0(sp)
  10b21c:	dec00504 	addi	sp,sp,20
  10b220:	f800283a 	ret
  10b224:	040bc83a 	sub	r5,zero,r16
  10b228:	9009883a 	mov	r4,r18
  10b22c:	0102cb80 	call	102cb8 <_sbrk_r>
  10b230:	00ffffc4 	movi	r3,-1
  10b234:	10c00d26 	beq	r2,r3,10b26c <_malloc_trim_r+0xe0>
  10b238:	00c004b4 	movhi	r3,18
  10b23c:	18de8404 	addi	r3,r3,31248
  10b240:	18800017 	ldw	r2,0(r3)
  10b244:	99000217 	ldw	r4,8(r19)
  10b248:	8c23c83a 	sub	r17,r17,r16
  10b24c:	8c400054 	ori	r17,r17,1
  10b250:	1421c83a 	sub	r16,r2,r16
  10b254:	24400115 	stw	r17,4(r4)
  10b258:	9009883a 	mov	r4,r18
  10b25c:	1c000015 	stw	r16,0(r3)
  10b260:	01198b40 	call	1198b4 <__malloc_unlock>
  10b264:	00800044 	movi	r2,1
  10b268:	003fe706 	br	10b208 <__alt_data_end+0xfffcb208>
  10b26c:	000b883a 	mov	r5,zero
  10b270:	9009883a 	mov	r4,r18
  10b274:	0102cb80 	call	102cb8 <_sbrk_r>
  10b278:	99000217 	ldw	r4,8(r19)
  10b27c:	014003c4 	movi	r5,15
  10b280:	1107c83a 	sub	r3,r2,r4
  10b284:	28ffdd0e 	bge	r5,r3,10b1fc <__alt_data_end+0xfffcb1fc>
  10b288:	014004b4 	movhi	r5,18
  10b28c:	29572e04 	addi	r5,r5,23736
  10b290:	29400017 	ldw	r5,0(r5)
  10b294:	18c00054 	ori	r3,r3,1
  10b298:	20c00115 	stw	r3,4(r4)
  10b29c:	00c004b4 	movhi	r3,18
  10b2a0:	1145c83a 	sub	r2,r2,r5
  10b2a4:	18de8404 	addi	r3,r3,31248
  10b2a8:	18800015 	stw	r2,0(r3)
  10b2ac:	003fd306 	br	10b1fc <__alt_data_end+0xfffcb1fc>

0010b2b0 <_free_r>:
  10b2b0:	28004126 	beq	r5,zero,10b3b8 <_free_r+0x108>
  10b2b4:	defffd04 	addi	sp,sp,-12
  10b2b8:	dc400115 	stw	r17,4(sp)
  10b2bc:	dc000015 	stw	r16,0(sp)
  10b2c0:	2023883a 	mov	r17,r4
  10b2c4:	2821883a 	mov	r16,r5
  10b2c8:	dfc00215 	stw	ra,8(sp)
  10b2cc:	01197940 	call	119794 <__malloc_lock>
  10b2d0:	81ffff17 	ldw	r7,-4(r16)
  10b2d4:	00bfff84 	movi	r2,-2
  10b2d8:	010004b4 	movhi	r4,18
  10b2dc:	81bffe04 	addi	r6,r16,-8
  10b2e0:	3884703a 	and	r2,r7,r2
  10b2e4:	21118704 	addi	r4,r4,17948
  10b2e8:	308b883a 	add	r5,r6,r2
  10b2ec:	2a400117 	ldw	r9,4(r5)
  10b2f0:	22000217 	ldw	r8,8(r4)
  10b2f4:	00ffff04 	movi	r3,-4
  10b2f8:	48c6703a 	and	r3,r9,r3
  10b2fc:	2a005726 	beq	r5,r8,10b45c <_free_r+0x1ac>
  10b300:	28c00115 	stw	r3,4(r5)
  10b304:	39c0004c 	andi	r7,r7,1
  10b308:	3800091e 	bne	r7,zero,10b330 <_free_r+0x80>
  10b30c:	823ffe17 	ldw	r8,-8(r16)
  10b310:	22400204 	addi	r9,r4,8
  10b314:	320dc83a 	sub	r6,r6,r8
  10b318:	31c00217 	ldw	r7,8(r6)
  10b31c:	1205883a 	add	r2,r2,r8
  10b320:	3a406526 	beq	r7,r9,10b4b8 <_free_r+0x208>
  10b324:	32000317 	ldw	r8,12(r6)
  10b328:	3a000315 	stw	r8,12(r7)
  10b32c:	41c00215 	stw	r7,8(r8)
  10b330:	28cf883a 	add	r7,r5,r3
  10b334:	39c00117 	ldw	r7,4(r7)
  10b338:	39c0004c 	andi	r7,r7,1
  10b33c:	38003a26 	beq	r7,zero,10b428 <_free_r+0x178>
  10b340:	10c00054 	ori	r3,r2,1
  10b344:	30c00115 	stw	r3,4(r6)
  10b348:	3087883a 	add	r3,r6,r2
  10b34c:	18800015 	stw	r2,0(r3)
  10b350:	00c07fc4 	movi	r3,511
  10b354:	18801936 	bltu	r3,r2,10b3bc <_free_r+0x10c>
  10b358:	1004d0fa 	srli	r2,r2,3
  10b35c:	01c00044 	movi	r7,1
  10b360:	21400117 	ldw	r5,4(r4)
  10b364:	10c00044 	addi	r3,r2,1
  10b368:	18c7883a 	add	r3,r3,r3
  10b36c:	1005d0ba 	srai	r2,r2,2
  10b370:	18c7883a 	add	r3,r3,r3
  10b374:	18c7883a 	add	r3,r3,r3
  10b378:	1907883a 	add	r3,r3,r4
  10b37c:	3884983a 	sll	r2,r7,r2
  10b380:	19c00017 	ldw	r7,0(r3)
  10b384:	1a3ffe04 	addi	r8,r3,-8
  10b388:	1144b03a 	or	r2,r2,r5
  10b38c:	32000315 	stw	r8,12(r6)
  10b390:	31c00215 	stw	r7,8(r6)
  10b394:	20800115 	stw	r2,4(r4)
  10b398:	19800015 	stw	r6,0(r3)
  10b39c:	39800315 	stw	r6,12(r7)
  10b3a0:	8809883a 	mov	r4,r17
  10b3a4:	dfc00217 	ldw	ra,8(sp)
  10b3a8:	dc400117 	ldw	r17,4(sp)
  10b3ac:	dc000017 	ldw	r16,0(sp)
  10b3b0:	dec00304 	addi	sp,sp,12
  10b3b4:	01198b41 	jmpi	1198b4 <__malloc_unlock>
  10b3b8:	f800283a 	ret
  10b3bc:	100ad27a 	srli	r5,r2,9
  10b3c0:	00c00104 	movi	r3,4
  10b3c4:	19404a36 	bltu	r3,r5,10b4f0 <_free_r+0x240>
  10b3c8:	100ad1ba 	srli	r5,r2,6
  10b3cc:	28c00e44 	addi	r3,r5,57
  10b3d0:	18c7883a 	add	r3,r3,r3
  10b3d4:	29400e04 	addi	r5,r5,56
  10b3d8:	18c7883a 	add	r3,r3,r3
  10b3dc:	18c7883a 	add	r3,r3,r3
  10b3e0:	1909883a 	add	r4,r3,r4
  10b3e4:	20c00017 	ldw	r3,0(r4)
  10b3e8:	01c004b4 	movhi	r7,18
  10b3ec:	213ffe04 	addi	r4,r4,-8
  10b3f0:	39d18704 	addi	r7,r7,17948
  10b3f4:	20c04426 	beq	r4,r3,10b508 <_free_r+0x258>
  10b3f8:	01ffff04 	movi	r7,-4
  10b3fc:	19400117 	ldw	r5,4(r3)
  10b400:	29ca703a 	and	r5,r5,r7
  10b404:	1140022e 	bgeu	r2,r5,10b410 <_free_r+0x160>
  10b408:	18c00217 	ldw	r3,8(r3)
  10b40c:	20fffb1e 	bne	r4,r3,10b3fc <__alt_data_end+0xfffcb3fc>
  10b410:	19000317 	ldw	r4,12(r3)
  10b414:	31000315 	stw	r4,12(r6)
  10b418:	30c00215 	stw	r3,8(r6)
  10b41c:	21800215 	stw	r6,8(r4)
  10b420:	19800315 	stw	r6,12(r3)
  10b424:	003fde06 	br	10b3a0 <__alt_data_end+0xfffcb3a0>
  10b428:	29c00217 	ldw	r7,8(r5)
  10b42c:	10c5883a 	add	r2,r2,r3
  10b430:	00c004b4 	movhi	r3,18
  10b434:	18d18904 	addi	r3,r3,17956
  10b438:	38c03b26 	beq	r7,r3,10b528 <_free_r+0x278>
  10b43c:	2a000317 	ldw	r8,12(r5)
  10b440:	11400054 	ori	r5,r2,1
  10b444:	3087883a 	add	r3,r6,r2
  10b448:	3a000315 	stw	r8,12(r7)
  10b44c:	41c00215 	stw	r7,8(r8)
  10b450:	31400115 	stw	r5,4(r6)
  10b454:	18800015 	stw	r2,0(r3)
  10b458:	003fbd06 	br	10b350 <__alt_data_end+0xfffcb350>
  10b45c:	39c0004c 	andi	r7,r7,1
  10b460:	10c5883a 	add	r2,r2,r3
  10b464:	3800071e 	bne	r7,zero,10b484 <_free_r+0x1d4>
  10b468:	81fffe17 	ldw	r7,-8(r16)
  10b46c:	31cdc83a 	sub	r6,r6,r7
  10b470:	30c00317 	ldw	r3,12(r6)
  10b474:	31400217 	ldw	r5,8(r6)
  10b478:	11c5883a 	add	r2,r2,r7
  10b47c:	28c00315 	stw	r3,12(r5)
  10b480:	19400215 	stw	r5,8(r3)
  10b484:	10c00054 	ori	r3,r2,1
  10b488:	30c00115 	stw	r3,4(r6)
  10b48c:	00c004b4 	movhi	r3,18
  10b490:	18d72f04 	addi	r3,r3,23740
  10b494:	18c00017 	ldw	r3,0(r3)
  10b498:	21800215 	stw	r6,8(r4)
  10b49c:	10ffc036 	bltu	r2,r3,10b3a0 <__alt_data_end+0xfffcb3a0>
  10b4a0:	008004b4 	movhi	r2,18
  10b4a4:	109e5804 	addi	r2,r2,31072
  10b4a8:	11400017 	ldw	r5,0(r2)
  10b4ac:	8809883a 	mov	r4,r17
  10b4b0:	010b18c0 	call	10b18c <_malloc_trim_r>
  10b4b4:	003fba06 	br	10b3a0 <__alt_data_end+0xfffcb3a0>
  10b4b8:	28c9883a 	add	r4,r5,r3
  10b4bc:	21000117 	ldw	r4,4(r4)
  10b4c0:	2100004c 	andi	r4,r4,1
  10b4c4:	2000391e 	bne	r4,zero,10b5ac <_free_r+0x2fc>
  10b4c8:	29c00217 	ldw	r7,8(r5)
  10b4cc:	29000317 	ldw	r4,12(r5)
  10b4d0:	1885883a 	add	r2,r3,r2
  10b4d4:	10c00054 	ori	r3,r2,1
  10b4d8:	39000315 	stw	r4,12(r7)
  10b4dc:	21c00215 	stw	r7,8(r4)
  10b4e0:	30c00115 	stw	r3,4(r6)
  10b4e4:	308d883a 	add	r6,r6,r2
  10b4e8:	30800015 	stw	r2,0(r6)
  10b4ec:	003fac06 	br	10b3a0 <__alt_data_end+0xfffcb3a0>
  10b4f0:	00c00504 	movi	r3,20
  10b4f4:	19401536 	bltu	r3,r5,10b54c <_free_r+0x29c>
  10b4f8:	28c01704 	addi	r3,r5,92
  10b4fc:	18c7883a 	add	r3,r3,r3
  10b500:	294016c4 	addi	r5,r5,91
  10b504:	003fb406 	br	10b3d8 <__alt_data_end+0xfffcb3d8>
  10b508:	280bd0ba 	srai	r5,r5,2
  10b50c:	00c00044 	movi	r3,1
  10b510:	38800117 	ldw	r2,4(r7)
  10b514:	194a983a 	sll	r5,r3,r5
  10b518:	2007883a 	mov	r3,r4
  10b51c:	2884b03a 	or	r2,r5,r2
  10b520:	38800115 	stw	r2,4(r7)
  10b524:	003fbb06 	br	10b414 <__alt_data_end+0xfffcb414>
  10b528:	21800515 	stw	r6,20(r4)
  10b52c:	21800415 	stw	r6,16(r4)
  10b530:	10c00054 	ori	r3,r2,1
  10b534:	31c00315 	stw	r7,12(r6)
  10b538:	31c00215 	stw	r7,8(r6)
  10b53c:	30c00115 	stw	r3,4(r6)
  10b540:	308d883a 	add	r6,r6,r2
  10b544:	30800015 	stw	r2,0(r6)
  10b548:	003f9506 	br	10b3a0 <__alt_data_end+0xfffcb3a0>
  10b54c:	00c01504 	movi	r3,84
  10b550:	19400536 	bltu	r3,r5,10b568 <_free_r+0x2b8>
  10b554:	100ad33a 	srli	r5,r2,12
  10b558:	28c01bc4 	addi	r3,r5,111
  10b55c:	18c7883a 	add	r3,r3,r3
  10b560:	29401b84 	addi	r5,r5,110
  10b564:	003f9c06 	br	10b3d8 <__alt_data_end+0xfffcb3d8>
  10b568:	00c05504 	movi	r3,340
  10b56c:	19400536 	bltu	r3,r5,10b584 <_free_r+0x2d4>
  10b570:	100ad3fa 	srli	r5,r2,15
  10b574:	28c01e04 	addi	r3,r5,120
  10b578:	18c7883a 	add	r3,r3,r3
  10b57c:	29401dc4 	addi	r5,r5,119
  10b580:	003f9506 	br	10b3d8 <__alt_data_end+0xfffcb3d8>
  10b584:	00c15504 	movi	r3,1364
  10b588:	19400536 	bltu	r3,r5,10b5a0 <_free_r+0x2f0>
  10b58c:	100ad4ba 	srli	r5,r2,18
  10b590:	28c01f44 	addi	r3,r5,125
  10b594:	18c7883a 	add	r3,r3,r3
  10b598:	29401f04 	addi	r5,r5,124
  10b59c:	003f8e06 	br	10b3d8 <__alt_data_end+0xfffcb3d8>
  10b5a0:	00c03f84 	movi	r3,254
  10b5a4:	01401f84 	movi	r5,126
  10b5a8:	003f8b06 	br	10b3d8 <__alt_data_end+0xfffcb3d8>
  10b5ac:	10c00054 	ori	r3,r2,1
  10b5b0:	30c00115 	stw	r3,4(r6)
  10b5b4:	308d883a 	add	r6,r6,r2
  10b5b8:	30800015 	stw	r2,0(r6)
  10b5bc:	003f7806 	br	10b3a0 <__alt_data_end+0xfffcb3a0>

0010b5c0 <__sfvwrite_r>:
  10b5c0:	30800217 	ldw	r2,8(r6)
  10b5c4:	10006726 	beq	r2,zero,10b764 <__sfvwrite_r+0x1a4>
  10b5c8:	28c0030b 	ldhu	r3,12(r5)
  10b5cc:	defff404 	addi	sp,sp,-48
  10b5d0:	dd400715 	stw	r21,28(sp)
  10b5d4:	dd000615 	stw	r20,24(sp)
  10b5d8:	dc000215 	stw	r16,8(sp)
  10b5dc:	dfc00b15 	stw	ra,44(sp)
  10b5e0:	df000a15 	stw	fp,40(sp)
  10b5e4:	ddc00915 	stw	r23,36(sp)
  10b5e8:	dd800815 	stw	r22,32(sp)
  10b5ec:	dcc00515 	stw	r19,20(sp)
  10b5f0:	dc800415 	stw	r18,16(sp)
  10b5f4:	dc400315 	stw	r17,12(sp)
  10b5f8:	1880020c 	andi	r2,r3,8
  10b5fc:	2821883a 	mov	r16,r5
  10b600:	202b883a 	mov	r21,r4
  10b604:	3029883a 	mov	r20,r6
  10b608:	10002726 	beq	r2,zero,10b6a8 <__sfvwrite_r+0xe8>
  10b60c:	28800417 	ldw	r2,16(r5)
  10b610:	10002526 	beq	r2,zero,10b6a8 <__sfvwrite_r+0xe8>
  10b614:	1880008c 	andi	r2,r3,2
  10b618:	a4400017 	ldw	r17,0(r20)
  10b61c:	10002a26 	beq	r2,zero,10b6c8 <__sfvwrite_r+0x108>
  10b620:	05a00034 	movhi	r22,32768
  10b624:	0027883a 	mov	r19,zero
  10b628:	0025883a 	mov	r18,zero
  10b62c:	b5bf0004 	addi	r22,r22,-1024
  10b630:	980d883a 	mov	r6,r19
  10b634:	a809883a 	mov	r4,r21
  10b638:	90004626 	beq	r18,zero,10b754 <__sfvwrite_r+0x194>
  10b63c:	900f883a 	mov	r7,r18
  10b640:	b480022e 	bgeu	r22,r18,10b64c <__sfvwrite_r+0x8c>
  10b644:	01e00034 	movhi	r7,32768
  10b648:	39ff0004 	addi	r7,r7,-1024
  10b64c:	80800917 	ldw	r2,36(r16)
  10b650:	81400717 	ldw	r5,28(r16)
  10b654:	103ee83a 	callr	r2
  10b658:	00805a0e 	bge	zero,r2,10b7c4 <__sfvwrite_r+0x204>
  10b65c:	a0c00217 	ldw	r3,8(r20)
  10b660:	98a7883a 	add	r19,r19,r2
  10b664:	90a5c83a 	sub	r18,r18,r2
  10b668:	1885c83a 	sub	r2,r3,r2
  10b66c:	a0800215 	stw	r2,8(r20)
  10b670:	103fef1e 	bne	r2,zero,10b630 <__alt_data_end+0xfffcb630>
  10b674:	0005883a 	mov	r2,zero
  10b678:	dfc00b17 	ldw	ra,44(sp)
  10b67c:	df000a17 	ldw	fp,40(sp)
  10b680:	ddc00917 	ldw	r23,36(sp)
  10b684:	dd800817 	ldw	r22,32(sp)
  10b688:	dd400717 	ldw	r21,28(sp)
  10b68c:	dd000617 	ldw	r20,24(sp)
  10b690:	dcc00517 	ldw	r19,20(sp)
  10b694:	dc800417 	ldw	r18,16(sp)
  10b698:	dc400317 	ldw	r17,12(sp)
  10b69c:	dc000217 	ldw	r16,8(sp)
  10b6a0:	dec00c04 	addi	sp,sp,48
  10b6a4:	f800283a 	ret
  10b6a8:	800b883a 	mov	r5,r16
  10b6ac:	a809883a 	mov	r4,r21
  10b6b0:	01093880 	call	109388 <__swsetup_r>
  10b6b4:	1000ee1e 	bne	r2,zero,10ba70 <__sfvwrite_r+0x4b0>
  10b6b8:	80c0030b 	ldhu	r3,12(r16)
  10b6bc:	a4400017 	ldw	r17,0(r20)
  10b6c0:	1880008c 	andi	r2,r3,2
  10b6c4:	103fd61e 	bne	r2,zero,10b620 <__alt_data_end+0xfffcb620>
  10b6c8:	1880004c 	andi	r2,r3,1
  10b6cc:	1000421e 	bne	r2,zero,10b7d8 <__sfvwrite_r+0x218>
  10b6d0:	0039883a 	mov	fp,zero
  10b6d4:	0025883a 	mov	r18,zero
  10b6d8:	90001a26 	beq	r18,zero,10b744 <__sfvwrite_r+0x184>
  10b6dc:	1880800c 	andi	r2,r3,512
  10b6e0:	84c00217 	ldw	r19,8(r16)
  10b6e4:	10002126 	beq	r2,zero,10b76c <__sfvwrite_r+0x1ac>
  10b6e8:	982f883a 	mov	r23,r19
  10b6ec:	94c09636 	bltu	r18,r19,10b948 <__sfvwrite_r+0x388>
  10b6f0:	1881200c 	andi	r2,r3,1152
  10b6f4:	1000a11e 	bne	r2,zero,10b97c <__sfvwrite_r+0x3bc>
  10b6f8:	81000017 	ldw	r4,0(r16)
  10b6fc:	b80d883a 	mov	r6,r23
  10b700:	e00b883a 	mov	r5,fp
  10b704:	010bfd40 	call	10bfd4 <memmove>
  10b708:	80c00217 	ldw	r3,8(r16)
  10b70c:	81000017 	ldw	r4,0(r16)
  10b710:	9005883a 	mov	r2,r18
  10b714:	1ce7c83a 	sub	r19,r3,r19
  10b718:	25cf883a 	add	r7,r4,r23
  10b71c:	84c00215 	stw	r19,8(r16)
  10b720:	81c00015 	stw	r7,0(r16)
  10b724:	a0c00217 	ldw	r3,8(r20)
  10b728:	e0b9883a 	add	fp,fp,r2
  10b72c:	90a5c83a 	sub	r18,r18,r2
  10b730:	18a7c83a 	sub	r19,r3,r2
  10b734:	a4c00215 	stw	r19,8(r20)
  10b738:	983fce26 	beq	r19,zero,10b674 <__alt_data_end+0xfffcb674>
  10b73c:	80c0030b 	ldhu	r3,12(r16)
  10b740:	903fe61e 	bne	r18,zero,10b6dc <__alt_data_end+0xfffcb6dc>
  10b744:	8f000017 	ldw	fp,0(r17)
  10b748:	8c800117 	ldw	r18,4(r17)
  10b74c:	8c400204 	addi	r17,r17,8
  10b750:	003fe106 	br	10b6d8 <__alt_data_end+0xfffcb6d8>
  10b754:	8cc00017 	ldw	r19,0(r17)
  10b758:	8c800117 	ldw	r18,4(r17)
  10b75c:	8c400204 	addi	r17,r17,8
  10b760:	003fb306 	br	10b630 <__alt_data_end+0xfffcb630>
  10b764:	0005883a 	mov	r2,zero
  10b768:	f800283a 	ret
  10b76c:	81000017 	ldw	r4,0(r16)
  10b770:	80800417 	ldw	r2,16(r16)
  10b774:	11005a36 	bltu	r2,r4,10b8e0 <__sfvwrite_r+0x320>
  10b778:	85c00517 	ldw	r23,20(r16)
  10b77c:	95c05836 	bltu	r18,r23,10b8e0 <__sfvwrite_r+0x320>
  10b780:	00a00034 	movhi	r2,32768
  10b784:	10bfffc4 	addi	r2,r2,-1
  10b788:	9009883a 	mov	r4,r18
  10b78c:	1480012e 	bgeu	r2,r18,10b794 <__sfvwrite_r+0x1d4>
  10b790:	1009883a 	mov	r4,r2
  10b794:	b80b883a 	mov	r5,r23
  10b798:	0115ec00 	call	115ec0 <__divsi3>
  10b79c:	b80b883a 	mov	r5,r23
  10b7a0:	1009883a 	mov	r4,r2
  10b7a4:	01160740 	call	116074 <__mulsi3>
  10b7a8:	81400717 	ldw	r5,28(r16)
  10b7ac:	80c00917 	ldw	r3,36(r16)
  10b7b0:	100f883a 	mov	r7,r2
  10b7b4:	e00d883a 	mov	r6,fp
  10b7b8:	a809883a 	mov	r4,r21
  10b7bc:	183ee83a 	callr	r3
  10b7c0:	00bfd816 	blt	zero,r2,10b724 <__alt_data_end+0xfffcb724>
  10b7c4:	8080030b 	ldhu	r2,12(r16)
  10b7c8:	10801014 	ori	r2,r2,64
  10b7cc:	8080030d 	sth	r2,12(r16)
  10b7d0:	00bfffc4 	movi	r2,-1
  10b7d4:	003fa806 	br	10b678 <__alt_data_end+0xfffcb678>
  10b7d8:	0027883a 	mov	r19,zero
  10b7dc:	0011883a 	mov	r8,zero
  10b7e0:	0039883a 	mov	fp,zero
  10b7e4:	0025883a 	mov	r18,zero
  10b7e8:	90001f26 	beq	r18,zero,10b868 <__sfvwrite_r+0x2a8>
  10b7ec:	40005a26 	beq	r8,zero,10b958 <__sfvwrite_r+0x398>
  10b7f0:	982d883a 	mov	r22,r19
  10b7f4:	94c0012e 	bgeu	r18,r19,10b7fc <__sfvwrite_r+0x23c>
  10b7f8:	902d883a 	mov	r22,r18
  10b7fc:	81000017 	ldw	r4,0(r16)
  10b800:	80800417 	ldw	r2,16(r16)
  10b804:	b02f883a 	mov	r23,r22
  10b808:	81c00517 	ldw	r7,20(r16)
  10b80c:	1100032e 	bgeu	r2,r4,10b81c <__sfvwrite_r+0x25c>
  10b810:	80c00217 	ldw	r3,8(r16)
  10b814:	38c7883a 	add	r3,r7,r3
  10b818:	1d801816 	blt	r3,r22,10b87c <__sfvwrite_r+0x2bc>
  10b81c:	b1c03e16 	blt	r22,r7,10b918 <__sfvwrite_r+0x358>
  10b820:	80800917 	ldw	r2,36(r16)
  10b824:	81400717 	ldw	r5,28(r16)
  10b828:	e00d883a 	mov	r6,fp
  10b82c:	da000115 	stw	r8,4(sp)
  10b830:	a809883a 	mov	r4,r21
  10b834:	103ee83a 	callr	r2
  10b838:	102f883a 	mov	r23,r2
  10b83c:	da000117 	ldw	r8,4(sp)
  10b840:	00bfe00e 	bge	zero,r2,10b7c4 <__alt_data_end+0xfffcb7c4>
  10b844:	9de7c83a 	sub	r19,r19,r23
  10b848:	98001f26 	beq	r19,zero,10b8c8 <__sfvwrite_r+0x308>
  10b84c:	a0800217 	ldw	r2,8(r20)
  10b850:	e5f9883a 	add	fp,fp,r23
  10b854:	95e5c83a 	sub	r18,r18,r23
  10b858:	15efc83a 	sub	r23,r2,r23
  10b85c:	a5c00215 	stw	r23,8(r20)
  10b860:	b83f8426 	beq	r23,zero,10b674 <__alt_data_end+0xfffcb674>
  10b864:	903fe11e 	bne	r18,zero,10b7ec <__alt_data_end+0xfffcb7ec>
  10b868:	8f000017 	ldw	fp,0(r17)
  10b86c:	8c800117 	ldw	r18,4(r17)
  10b870:	0011883a 	mov	r8,zero
  10b874:	8c400204 	addi	r17,r17,8
  10b878:	003fdb06 	br	10b7e8 <__alt_data_end+0xfffcb7e8>
  10b87c:	180d883a 	mov	r6,r3
  10b880:	e00b883a 	mov	r5,fp
  10b884:	da000115 	stw	r8,4(sp)
  10b888:	d8c00015 	stw	r3,0(sp)
  10b88c:	010bfd40 	call	10bfd4 <memmove>
  10b890:	d8c00017 	ldw	r3,0(sp)
  10b894:	80800017 	ldw	r2,0(r16)
  10b898:	800b883a 	mov	r5,r16
  10b89c:	a809883a 	mov	r4,r21
  10b8a0:	10c5883a 	add	r2,r2,r3
  10b8a4:	80800015 	stw	r2,0(r16)
  10b8a8:	d8c00015 	stw	r3,0(sp)
  10b8ac:	010b1000 	call	10b100 <_fflush_r>
  10b8b0:	d8c00017 	ldw	r3,0(sp)
  10b8b4:	da000117 	ldw	r8,4(sp)
  10b8b8:	103fc21e 	bne	r2,zero,10b7c4 <__alt_data_end+0xfffcb7c4>
  10b8bc:	182f883a 	mov	r23,r3
  10b8c0:	9de7c83a 	sub	r19,r19,r23
  10b8c4:	983fe11e 	bne	r19,zero,10b84c <__alt_data_end+0xfffcb84c>
  10b8c8:	800b883a 	mov	r5,r16
  10b8cc:	a809883a 	mov	r4,r21
  10b8d0:	010b1000 	call	10b100 <_fflush_r>
  10b8d4:	103fbb1e 	bne	r2,zero,10b7c4 <__alt_data_end+0xfffcb7c4>
  10b8d8:	0011883a 	mov	r8,zero
  10b8dc:	003fdb06 	br	10b84c <__alt_data_end+0xfffcb84c>
  10b8e0:	94c0012e 	bgeu	r18,r19,10b8e8 <__sfvwrite_r+0x328>
  10b8e4:	9027883a 	mov	r19,r18
  10b8e8:	980d883a 	mov	r6,r19
  10b8ec:	e00b883a 	mov	r5,fp
  10b8f0:	010bfd40 	call	10bfd4 <memmove>
  10b8f4:	80800217 	ldw	r2,8(r16)
  10b8f8:	80c00017 	ldw	r3,0(r16)
  10b8fc:	14c5c83a 	sub	r2,r2,r19
  10b900:	1cc7883a 	add	r3,r3,r19
  10b904:	80800215 	stw	r2,8(r16)
  10b908:	80c00015 	stw	r3,0(r16)
  10b90c:	10004326 	beq	r2,zero,10ba1c <__sfvwrite_r+0x45c>
  10b910:	9805883a 	mov	r2,r19
  10b914:	003f8306 	br	10b724 <__alt_data_end+0xfffcb724>
  10b918:	b00d883a 	mov	r6,r22
  10b91c:	e00b883a 	mov	r5,fp
  10b920:	da000115 	stw	r8,4(sp)
  10b924:	010bfd40 	call	10bfd4 <memmove>
  10b928:	80800217 	ldw	r2,8(r16)
  10b92c:	80c00017 	ldw	r3,0(r16)
  10b930:	da000117 	ldw	r8,4(sp)
  10b934:	1585c83a 	sub	r2,r2,r22
  10b938:	1dad883a 	add	r22,r3,r22
  10b93c:	80800215 	stw	r2,8(r16)
  10b940:	85800015 	stw	r22,0(r16)
  10b944:	003fbf06 	br	10b844 <__alt_data_end+0xfffcb844>
  10b948:	81000017 	ldw	r4,0(r16)
  10b94c:	9027883a 	mov	r19,r18
  10b950:	902f883a 	mov	r23,r18
  10b954:	003f6906 	br	10b6fc <__alt_data_end+0xfffcb6fc>
  10b958:	900d883a 	mov	r6,r18
  10b95c:	01400284 	movi	r5,10
  10b960:	e009883a 	mov	r4,fp
  10b964:	01026340 	call	102634 <memchr>
  10b968:	10003e26 	beq	r2,zero,10ba64 <__sfvwrite_r+0x4a4>
  10b96c:	10800044 	addi	r2,r2,1
  10b970:	1727c83a 	sub	r19,r2,fp
  10b974:	02000044 	movi	r8,1
  10b978:	003f9d06 	br	10b7f0 <__alt_data_end+0xfffcb7f0>
  10b97c:	80800517 	ldw	r2,20(r16)
  10b980:	81400417 	ldw	r5,16(r16)
  10b984:	81c00017 	ldw	r7,0(r16)
  10b988:	10a7883a 	add	r19,r2,r2
  10b98c:	9885883a 	add	r2,r19,r2
  10b990:	1026d7fa 	srli	r19,r2,31
  10b994:	396dc83a 	sub	r22,r7,r5
  10b998:	b1000044 	addi	r4,r22,1
  10b99c:	9885883a 	add	r2,r19,r2
  10b9a0:	1027d07a 	srai	r19,r2,1
  10b9a4:	2485883a 	add	r2,r4,r18
  10b9a8:	980d883a 	mov	r6,r19
  10b9ac:	9880022e 	bgeu	r19,r2,10b9b8 <__sfvwrite_r+0x3f8>
  10b9b0:	1027883a 	mov	r19,r2
  10b9b4:	100d883a 	mov	r6,r2
  10b9b8:	18c1000c 	andi	r3,r3,1024
  10b9bc:	18001c26 	beq	r3,zero,10ba30 <__sfvwrite_r+0x470>
  10b9c0:	300b883a 	mov	r5,r6
  10b9c4:	a809883a 	mov	r4,r21
  10b9c8:	0101e280 	call	101e28 <_malloc_r>
  10b9cc:	102f883a 	mov	r23,r2
  10b9d0:	10002926 	beq	r2,zero,10ba78 <__sfvwrite_r+0x4b8>
  10b9d4:	81400417 	ldw	r5,16(r16)
  10b9d8:	b00d883a 	mov	r6,r22
  10b9dc:	1009883a 	mov	r4,r2
  10b9e0:	01027180 	call	102718 <memcpy>
  10b9e4:	8080030b 	ldhu	r2,12(r16)
  10b9e8:	00fedfc4 	movi	r3,-1153
  10b9ec:	10c4703a 	and	r2,r2,r3
  10b9f0:	10802014 	ori	r2,r2,128
  10b9f4:	8080030d 	sth	r2,12(r16)
  10b9f8:	bd89883a 	add	r4,r23,r22
  10b9fc:	9d8fc83a 	sub	r7,r19,r22
  10ba00:	85c00415 	stw	r23,16(r16)
  10ba04:	84c00515 	stw	r19,20(r16)
  10ba08:	81000015 	stw	r4,0(r16)
  10ba0c:	9027883a 	mov	r19,r18
  10ba10:	81c00215 	stw	r7,8(r16)
  10ba14:	902f883a 	mov	r23,r18
  10ba18:	003f3806 	br	10b6fc <__alt_data_end+0xfffcb6fc>
  10ba1c:	800b883a 	mov	r5,r16
  10ba20:	a809883a 	mov	r4,r21
  10ba24:	010b1000 	call	10b100 <_fflush_r>
  10ba28:	103fb926 	beq	r2,zero,10b910 <__alt_data_end+0xfffcb910>
  10ba2c:	003f6506 	br	10b7c4 <__alt_data_end+0xfffcb7c4>
  10ba30:	a809883a 	mov	r4,r21
  10ba34:	010d2480 	call	10d248 <_realloc_r>
  10ba38:	102f883a 	mov	r23,r2
  10ba3c:	103fee1e 	bne	r2,zero,10b9f8 <__alt_data_end+0xfffcb9f8>
  10ba40:	81400417 	ldw	r5,16(r16)
  10ba44:	a809883a 	mov	r4,r21
  10ba48:	010b2b00 	call	10b2b0 <_free_r>
  10ba4c:	8080030b 	ldhu	r2,12(r16)
  10ba50:	00ffdfc4 	movi	r3,-129
  10ba54:	1884703a 	and	r2,r3,r2
  10ba58:	00c00304 	movi	r3,12
  10ba5c:	a8c00015 	stw	r3,0(r21)
  10ba60:	003f5906 	br	10b7c8 <__alt_data_end+0xfffcb7c8>
  10ba64:	94c00044 	addi	r19,r18,1
  10ba68:	02000044 	movi	r8,1
  10ba6c:	003f6006 	br	10b7f0 <__alt_data_end+0xfffcb7f0>
  10ba70:	00bfffc4 	movi	r2,-1
  10ba74:	003f0006 	br	10b678 <__alt_data_end+0xfffcb678>
  10ba78:	00800304 	movi	r2,12
  10ba7c:	a8800015 	stw	r2,0(r21)
  10ba80:	8080030b 	ldhu	r2,12(r16)
  10ba84:	003f5006 	br	10b7c8 <__alt_data_end+0xfffcb7c8>

0010ba88 <iswspace>:
  10ba88:	00803fc4 	movi	r2,255
  10ba8c:	11000836 	bltu	r2,r4,10bab0 <iswspace+0x28>
  10ba90:	008004b4 	movhi	r2,18
  10ba94:	10973004 	addi	r2,r2,23744
  10ba98:	10800017 	ldw	r2,0(r2)
  10ba9c:	1109883a 	add	r4,r2,r4
  10baa0:	20800043 	ldbu	r2,1(r4)
  10baa4:	1080020c 	andi	r2,r2,8
  10baa8:	10803fcc 	andi	r2,r2,255
  10baac:	f800283a 	ret
  10bab0:	0005883a 	mov	r2,zero
  10bab4:	f800283a 	ret

0010bab8 <_setlocale_r>:
  10bab8:	30001b26 	beq	r6,zero,10bb28 <_setlocale_r+0x70>
  10babc:	014004b4 	movhi	r5,18
  10bac0:	defffe04 	addi	sp,sp,-8
  10bac4:	294f1204 	addi	r5,r5,15432
  10bac8:	3009883a 	mov	r4,r6
  10bacc:	dc000015 	stw	r16,0(sp)
  10bad0:	dfc00115 	stw	ra,4(sp)
  10bad4:	3021883a 	mov	r16,r6
  10bad8:	01030840 	call	103084 <strcmp>
  10badc:	1000061e 	bne	r2,zero,10baf8 <_setlocale_r+0x40>
  10bae0:	008004b4 	movhi	r2,18
  10bae4:	108e4004 	addi	r2,r2,14592
  10bae8:	dfc00117 	ldw	ra,4(sp)
  10baec:	dc000017 	ldw	r16,0(sp)
  10baf0:	dec00204 	addi	sp,sp,8
  10baf4:	f800283a 	ret
  10baf8:	014004b4 	movhi	r5,18
  10bafc:	294e4004 	addi	r5,r5,14592
  10bb00:	8009883a 	mov	r4,r16
  10bb04:	01030840 	call	103084 <strcmp>
  10bb08:	103ff526 	beq	r2,zero,10bae0 <__alt_data_end+0xfffcbae0>
  10bb0c:	014004b4 	movhi	r5,18
  10bb10:	294e4a04 	addi	r5,r5,14632
  10bb14:	8009883a 	mov	r4,r16
  10bb18:	01030840 	call	103084 <strcmp>
  10bb1c:	103ff026 	beq	r2,zero,10bae0 <__alt_data_end+0xfffcbae0>
  10bb20:	0005883a 	mov	r2,zero
  10bb24:	003ff006 	br	10bae8 <__alt_data_end+0xfffcbae8>
  10bb28:	008004b4 	movhi	r2,18
  10bb2c:	108e4004 	addi	r2,r2,14592
  10bb30:	f800283a 	ret

0010bb34 <__locale_charset>:
  10bb34:	008004b4 	movhi	r2,18
  10bb38:	10929104 	addi	r2,r2,19012
  10bb3c:	f800283a 	ret

0010bb40 <__locale_mb_cur_max>:
  10bb40:	008004b4 	movhi	r2,18
  10bb44:	10973104 	addi	r2,r2,23748
  10bb48:	10800017 	ldw	r2,0(r2)
  10bb4c:	f800283a 	ret

0010bb50 <__locale_msgcharset>:
  10bb50:	008004b4 	movhi	r2,18
  10bb54:	10928904 	addi	r2,r2,18980
  10bb58:	f800283a 	ret

0010bb5c <__locale_cjk_lang>:
  10bb5c:	0005883a 	mov	r2,zero
  10bb60:	f800283a 	ret

0010bb64 <_localeconv_r>:
  10bb64:	008004b4 	movhi	r2,18
  10bb68:	10929904 	addi	r2,r2,19044
  10bb6c:	f800283a 	ret

0010bb70 <setlocale>:
  10bb70:	008004b4 	movhi	r2,18
  10bb74:	10972d04 	addi	r2,r2,23732
  10bb78:	280d883a 	mov	r6,r5
  10bb7c:	200b883a 	mov	r5,r4
  10bb80:	11000017 	ldw	r4,0(r2)
  10bb84:	010bab81 	jmpi	10bab8 <_setlocale_r>

0010bb88 <localeconv>:
  10bb88:	008004b4 	movhi	r2,18
  10bb8c:	10929904 	addi	r2,r2,19044
  10bb90:	f800283a 	ret

0010bb94 <_lseek_r>:
  10bb94:	defffd04 	addi	sp,sp,-12
  10bb98:	2805883a 	mov	r2,r5
  10bb9c:	dc000015 	stw	r16,0(sp)
  10bba0:	040004b4 	movhi	r16,18
  10bba4:	dc400115 	stw	r17,4(sp)
  10bba8:	300b883a 	mov	r5,r6
  10bbac:	841e5904 	addi	r16,r16,31076
  10bbb0:	2023883a 	mov	r17,r4
  10bbb4:	380d883a 	mov	r6,r7
  10bbb8:	1009883a 	mov	r4,r2
  10bbbc:	dfc00215 	stw	ra,8(sp)
  10bbc0:	80000015 	stw	zero,0(r16)
  10bbc4:	01191280 	call	119128 <lseek>
  10bbc8:	00ffffc4 	movi	r3,-1
  10bbcc:	10c00526 	beq	r2,r3,10bbe4 <_lseek_r+0x50>
  10bbd0:	dfc00217 	ldw	ra,8(sp)
  10bbd4:	dc400117 	ldw	r17,4(sp)
  10bbd8:	dc000017 	ldw	r16,0(sp)
  10bbdc:	dec00304 	addi	sp,sp,12
  10bbe0:	f800283a 	ret
  10bbe4:	80c00017 	ldw	r3,0(r16)
  10bbe8:	183ff926 	beq	r3,zero,10bbd0 <__alt_data_end+0xfffcbbd0>
  10bbec:	88c00015 	stw	r3,0(r17)
  10bbf0:	003ff706 	br	10bbd0 <__alt_data_end+0xfffcbbd0>

0010bbf4 <__smakebuf_r>:
  10bbf4:	2880030b 	ldhu	r2,12(r5)
  10bbf8:	10c0008c 	andi	r3,r2,2
  10bbfc:	1800411e 	bne	r3,zero,10bd04 <__smakebuf_r+0x110>
  10bc00:	deffec04 	addi	sp,sp,-80
  10bc04:	dc000f15 	stw	r16,60(sp)
  10bc08:	2821883a 	mov	r16,r5
  10bc0c:	2940038f 	ldh	r5,14(r5)
  10bc10:	dc401015 	stw	r17,64(sp)
  10bc14:	dfc01315 	stw	ra,76(sp)
  10bc18:	dcc01215 	stw	r19,72(sp)
  10bc1c:	dc801115 	stw	r18,68(sp)
  10bc20:	2023883a 	mov	r17,r4
  10bc24:	28001c16 	blt	r5,zero,10bc98 <__smakebuf_r+0xa4>
  10bc28:	d80d883a 	mov	r6,sp
  10bc2c:	01141140 	call	114114 <_fstat_r>
  10bc30:	10001816 	blt	r2,zero,10bc94 <__smakebuf_r+0xa0>
  10bc34:	d8800117 	ldw	r2,4(sp)
  10bc38:	00e00014 	movui	r3,32768
  10bc3c:	10bc000c 	andi	r2,r2,61440
  10bc40:	14c80020 	cmpeqi	r19,r2,8192
  10bc44:	10c03726 	beq	r2,r3,10bd24 <__smakebuf_r+0x130>
  10bc48:	80c0030b 	ldhu	r3,12(r16)
  10bc4c:	18c20014 	ori	r3,r3,2048
  10bc50:	80c0030d 	sth	r3,12(r16)
  10bc54:	00c80004 	movi	r3,8192
  10bc58:	10c0521e 	bne	r2,r3,10bda4 <__smakebuf_r+0x1b0>
  10bc5c:	8140038f 	ldh	r5,14(r16)
  10bc60:	8809883a 	mov	r4,r17
  10bc64:	0114d1c0 	call	114d1c <_isatty_r>
  10bc68:	10004c26 	beq	r2,zero,10bd9c <__smakebuf_r+0x1a8>
  10bc6c:	8080030b 	ldhu	r2,12(r16)
  10bc70:	80c010c4 	addi	r3,r16,67
  10bc74:	80c00015 	stw	r3,0(r16)
  10bc78:	10800054 	ori	r2,r2,1
  10bc7c:	8080030d 	sth	r2,12(r16)
  10bc80:	00800044 	movi	r2,1
  10bc84:	80c00415 	stw	r3,16(r16)
  10bc88:	80800515 	stw	r2,20(r16)
  10bc8c:	04810004 	movi	r18,1024
  10bc90:	00000706 	br	10bcb0 <__smakebuf_r+0xbc>
  10bc94:	8080030b 	ldhu	r2,12(r16)
  10bc98:	10c0200c 	andi	r3,r2,128
  10bc9c:	18001f1e 	bne	r3,zero,10bd1c <__smakebuf_r+0x128>
  10bca0:	04810004 	movi	r18,1024
  10bca4:	10820014 	ori	r2,r2,2048
  10bca8:	8080030d 	sth	r2,12(r16)
  10bcac:	0027883a 	mov	r19,zero
  10bcb0:	900b883a 	mov	r5,r18
  10bcb4:	8809883a 	mov	r4,r17
  10bcb8:	0101e280 	call	101e28 <_malloc_r>
  10bcbc:	10002c26 	beq	r2,zero,10bd70 <__smakebuf_r+0x17c>
  10bcc0:	80c0030b 	ldhu	r3,12(r16)
  10bcc4:	01000434 	movhi	r4,16
  10bcc8:	21063e04 	addi	r4,r4,6392
  10bccc:	89000f15 	stw	r4,60(r17)
  10bcd0:	18c02014 	ori	r3,r3,128
  10bcd4:	80c0030d 	sth	r3,12(r16)
  10bcd8:	80800015 	stw	r2,0(r16)
  10bcdc:	80800415 	stw	r2,16(r16)
  10bce0:	84800515 	stw	r18,20(r16)
  10bce4:	98001a1e 	bne	r19,zero,10bd50 <__smakebuf_r+0x15c>
  10bce8:	dfc01317 	ldw	ra,76(sp)
  10bcec:	dcc01217 	ldw	r19,72(sp)
  10bcf0:	dc801117 	ldw	r18,68(sp)
  10bcf4:	dc401017 	ldw	r17,64(sp)
  10bcf8:	dc000f17 	ldw	r16,60(sp)
  10bcfc:	dec01404 	addi	sp,sp,80
  10bd00:	f800283a 	ret
  10bd04:	288010c4 	addi	r2,r5,67
  10bd08:	28800015 	stw	r2,0(r5)
  10bd0c:	28800415 	stw	r2,16(r5)
  10bd10:	00800044 	movi	r2,1
  10bd14:	28800515 	stw	r2,20(r5)
  10bd18:	f800283a 	ret
  10bd1c:	04801004 	movi	r18,64
  10bd20:	003fe006 	br	10bca4 <__alt_data_end+0xfffcbca4>
  10bd24:	81000a17 	ldw	r4,40(r16)
  10bd28:	00c00434 	movhi	r3,16
  10bd2c:	18cbe704 	addi	r3,r3,12188
  10bd30:	20ffc51e 	bne	r4,r3,10bc48 <__alt_data_end+0xfffcbc48>
  10bd34:	8080030b 	ldhu	r2,12(r16)
  10bd38:	04810004 	movi	r18,1024
  10bd3c:	84801315 	stw	r18,76(r16)
  10bd40:	1484b03a 	or	r2,r2,r18
  10bd44:	8080030d 	sth	r2,12(r16)
  10bd48:	0027883a 	mov	r19,zero
  10bd4c:	003fd806 	br	10bcb0 <__alt_data_end+0xfffcbcb0>
  10bd50:	8140038f 	ldh	r5,14(r16)
  10bd54:	8809883a 	mov	r4,r17
  10bd58:	0114d1c0 	call	114d1c <_isatty_r>
  10bd5c:	103fe226 	beq	r2,zero,10bce8 <__alt_data_end+0xfffcbce8>
  10bd60:	8080030b 	ldhu	r2,12(r16)
  10bd64:	10800054 	ori	r2,r2,1
  10bd68:	8080030d 	sth	r2,12(r16)
  10bd6c:	003fde06 	br	10bce8 <__alt_data_end+0xfffcbce8>
  10bd70:	8080030b 	ldhu	r2,12(r16)
  10bd74:	10c0800c 	andi	r3,r2,512
  10bd78:	183fdb1e 	bne	r3,zero,10bce8 <__alt_data_end+0xfffcbce8>
  10bd7c:	10800094 	ori	r2,r2,2
  10bd80:	80c010c4 	addi	r3,r16,67
  10bd84:	8080030d 	sth	r2,12(r16)
  10bd88:	00800044 	movi	r2,1
  10bd8c:	80c00015 	stw	r3,0(r16)
  10bd90:	80c00415 	stw	r3,16(r16)
  10bd94:	80800515 	stw	r2,20(r16)
  10bd98:	003fd306 	br	10bce8 <__alt_data_end+0xfffcbce8>
  10bd9c:	04810004 	movi	r18,1024
  10bda0:	003fc306 	br	10bcb0 <__alt_data_end+0xfffcbcb0>
  10bda4:	0027883a 	mov	r19,zero
  10bda8:	04810004 	movi	r18,1024
  10bdac:	003fc006 	br	10bcb0 <__alt_data_end+0xfffcbcb0>

0010bdb0 <_mbrtowc_r>:
  10bdb0:	defff704 	addi	sp,sp,-36
  10bdb4:	008004b4 	movhi	r2,18
  10bdb8:	dc800715 	stw	r18,28(sp)
  10bdbc:	dc400615 	stw	r17,24(sp)
  10bdc0:	dc000515 	stw	r16,20(sp)
  10bdc4:	10973204 	addi	r2,r2,23752
  10bdc8:	dfc00815 	stw	ra,32(sp)
  10bdcc:	2021883a 	mov	r16,r4
  10bdd0:	dc400917 	ldw	r17,36(sp)
  10bdd4:	14800017 	ldw	r18,0(r2)
  10bdd8:	30001626 	beq	r6,zero,10be34 <_mbrtowc_r+0x84>
  10bddc:	d9400215 	stw	r5,8(sp)
  10bde0:	d9800315 	stw	r6,12(sp)
  10bde4:	d9c00415 	stw	r7,16(sp)
  10bde8:	010bb340 	call	10bb34 <__locale_charset>
  10bdec:	d9c00417 	ldw	r7,16(sp)
  10bdf0:	d9800317 	ldw	r6,12(sp)
  10bdf4:	d9400217 	ldw	r5,8(sp)
  10bdf8:	d8800015 	stw	r2,0(sp)
  10bdfc:	dc400115 	stw	r17,4(sp)
  10be00:	8009883a 	mov	r4,r16
  10be04:	903ee83a 	callr	r18
  10be08:	00ffffc4 	movi	r3,-1
  10be0c:	10c0031e 	bne	r2,r3,10be1c <_mbrtowc_r+0x6c>
  10be10:	88000015 	stw	zero,0(r17)
  10be14:	00c02284 	movi	r3,138
  10be18:	80c00015 	stw	r3,0(r16)
  10be1c:	dfc00817 	ldw	ra,32(sp)
  10be20:	dc800717 	ldw	r18,28(sp)
  10be24:	dc400617 	ldw	r17,24(sp)
  10be28:	dc000517 	ldw	r16,20(sp)
  10be2c:	dec00904 	addi	sp,sp,36
  10be30:	f800283a 	ret
  10be34:	010bb340 	call	10bb34 <__locale_charset>
  10be38:	018004b4 	movhi	r6,18
  10be3c:	318e4a04 	addi	r6,r6,14632
  10be40:	dc400115 	stw	r17,4(sp)
  10be44:	d8800015 	stw	r2,0(sp)
  10be48:	01c00044 	movi	r7,1
  10be4c:	000b883a 	mov	r5,zero
  10be50:	8009883a 	mov	r4,r16
  10be54:	903ee83a 	callr	r18
  10be58:	003feb06 	br	10be08 <__alt_data_end+0xfffcbe08>

0010be5c <mbrtowc>:
  10be5c:	defff704 	addi	sp,sp,-36
  10be60:	008004b4 	movhi	r2,18
  10be64:	dc800415 	stw	r18,16(sp)
  10be68:	dc400315 	stw	r17,12(sp)
  10be6c:	10972d04 	addi	r2,r2,23732
  10be70:	dfc00815 	stw	ra,32(sp)
  10be74:	dd400715 	stw	r21,28(sp)
  10be78:	dd000615 	stw	r20,24(sp)
  10be7c:	dcc00515 	stw	r19,20(sp)
  10be80:	dc000215 	stw	r16,8(sp)
  10be84:	3825883a 	mov	r18,r7
  10be88:	14400017 	ldw	r17,0(r2)
  10be8c:	28001c26 	beq	r5,zero,10bf00 <mbrtowc+0xa4>
  10be90:	008004b4 	movhi	r2,18
  10be94:	10973204 	addi	r2,r2,23752
  10be98:	15400017 	ldw	r21,0(r2)
  10be9c:	2821883a 	mov	r16,r5
  10bea0:	2027883a 	mov	r19,r4
  10bea4:	3029883a 	mov	r20,r6
  10bea8:	010bb340 	call	10bb34 <__locale_charset>
  10beac:	d8800015 	stw	r2,0(sp)
  10beb0:	dc800115 	stw	r18,4(sp)
  10beb4:	a00f883a 	mov	r7,r20
  10beb8:	800d883a 	mov	r6,r16
  10bebc:	980b883a 	mov	r5,r19
  10bec0:	8809883a 	mov	r4,r17
  10bec4:	a83ee83a 	callr	r21
  10bec8:	00ffffc4 	movi	r3,-1
  10becc:	10c0031e 	bne	r2,r3,10bedc <mbrtowc+0x80>
  10bed0:	90000015 	stw	zero,0(r18)
  10bed4:	00c02284 	movi	r3,138
  10bed8:	88c00015 	stw	r3,0(r17)
  10bedc:	dfc00817 	ldw	ra,32(sp)
  10bee0:	dd400717 	ldw	r21,28(sp)
  10bee4:	dd000617 	ldw	r20,24(sp)
  10bee8:	dcc00517 	ldw	r19,20(sp)
  10beec:	dc800417 	ldw	r18,16(sp)
  10bef0:	dc400317 	ldw	r17,12(sp)
  10bef4:	dc000217 	ldw	r16,8(sp)
  10bef8:	dec00904 	addi	sp,sp,36
  10befc:	f800283a 	ret
  10bf00:	008004b4 	movhi	r2,18
  10bf04:	10973204 	addi	r2,r2,23752
  10bf08:	14000017 	ldw	r16,0(r2)
  10bf0c:	010bb340 	call	10bb34 <__locale_charset>
  10bf10:	018004b4 	movhi	r6,18
  10bf14:	318e4a04 	addi	r6,r6,14632
  10bf18:	dc800115 	stw	r18,4(sp)
  10bf1c:	d8800015 	stw	r2,0(sp)
  10bf20:	01c00044 	movi	r7,1
  10bf24:	000b883a 	mov	r5,zero
  10bf28:	8809883a 	mov	r4,r17
  10bf2c:	803ee83a 	callr	r16
  10bf30:	003fe506 	br	10bec8 <__alt_data_end+0xfffcbec8>

0010bf34 <__ascii_mbtowc>:
  10bf34:	deffff04 	addi	sp,sp,-4
  10bf38:	28000826 	beq	r5,zero,10bf5c <__ascii_mbtowc+0x28>
  10bf3c:	30000926 	beq	r6,zero,10bf64 <__ascii_mbtowc+0x30>
  10bf40:	38000b26 	beq	r7,zero,10bf70 <__ascii_mbtowc+0x3c>
  10bf44:	30800003 	ldbu	r2,0(r6)
  10bf48:	28800015 	stw	r2,0(r5)
  10bf4c:	30800003 	ldbu	r2,0(r6)
  10bf50:	1004c03a 	cmpne	r2,r2,zero
  10bf54:	dec00104 	addi	sp,sp,4
  10bf58:	f800283a 	ret
  10bf5c:	d80b883a 	mov	r5,sp
  10bf60:	303ff71e 	bne	r6,zero,10bf40 <__alt_data_end+0xfffcbf40>
  10bf64:	0005883a 	mov	r2,zero
  10bf68:	dec00104 	addi	sp,sp,4
  10bf6c:	f800283a 	ret
  10bf70:	00bfff84 	movi	r2,-2
  10bf74:	003ff706 	br	10bf54 <__alt_data_end+0xfffcbf54>

0010bf78 <_mbtowc_r>:
  10bf78:	008004b4 	movhi	r2,18
  10bf7c:	defff804 	addi	sp,sp,-32
  10bf80:	10973204 	addi	r2,r2,23752
  10bf84:	dfc00715 	stw	ra,28(sp)
  10bf88:	dc000615 	stw	r16,24(sp)
  10bf8c:	14000017 	ldw	r16,0(r2)
  10bf90:	d9000215 	stw	r4,8(sp)
  10bf94:	d9400315 	stw	r5,12(sp)
  10bf98:	d9800415 	stw	r6,16(sp)
  10bf9c:	d9c00515 	stw	r7,20(sp)
  10bfa0:	010bb340 	call	10bb34 <__locale_charset>
  10bfa4:	d8800015 	stw	r2,0(sp)
  10bfa8:	d8800817 	ldw	r2,32(sp)
  10bfac:	d9c00517 	ldw	r7,20(sp)
  10bfb0:	d9800417 	ldw	r6,16(sp)
  10bfb4:	d9400317 	ldw	r5,12(sp)
  10bfb8:	d9000217 	ldw	r4,8(sp)
  10bfbc:	d8800115 	stw	r2,4(sp)
  10bfc0:	803ee83a 	callr	r16
  10bfc4:	dfc00717 	ldw	ra,28(sp)
  10bfc8:	dc000617 	ldw	r16,24(sp)
  10bfcc:	dec00804 	addi	sp,sp,32
  10bfd0:	f800283a 	ret

0010bfd4 <memmove>:
  10bfd4:	2005883a 	mov	r2,r4
  10bfd8:	29000b2e 	bgeu	r5,r4,10c008 <memmove+0x34>
  10bfdc:	298f883a 	add	r7,r5,r6
  10bfe0:	21c0092e 	bgeu	r4,r7,10c008 <memmove+0x34>
  10bfe4:	2187883a 	add	r3,r4,r6
  10bfe8:	198bc83a 	sub	r5,r3,r6
  10bfec:	30004826 	beq	r6,zero,10c110 <memmove+0x13c>
  10bff0:	39ffffc4 	addi	r7,r7,-1
  10bff4:	39000003 	ldbu	r4,0(r7)
  10bff8:	18ffffc4 	addi	r3,r3,-1
  10bffc:	19000005 	stb	r4,0(r3)
  10c000:	28fffb1e 	bne	r5,r3,10bff0 <__alt_data_end+0xfffcbff0>
  10c004:	f800283a 	ret
  10c008:	00c003c4 	movi	r3,15
  10c00c:	1980412e 	bgeu	r3,r6,10c114 <memmove+0x140>
  10c010:	2886b03a 	or	r3,r5,r2
  10c014:	18c000cc 	andi	r3,r3,3
  10c018:	1800401e 	bne	r3,zero,10c11c <memmove+0x148>
  10c01c:	33fffc04 	addi	r15,r6,-16
  10c020:	781ed13a 	srli	r15,r15,4
  10c024:	28c00104 	addi	r3,r5,4
  10c028:	13400104 	addi	r13,r2,4
  10c02c:	781c913a 	slli	r14,r15,4
  10c030:	2b000204 	addi	r12,r5,8
  10c034:	12c00204 	addi	r11,r2,8
  10c038:	73800504 	addi	r14,r14,20
  10c03c:	2a800304 	addi	r10,r5,12
  10c040:	12400304 	addi	r9,r2,12
  10c044:	2b9d883a 	add	r14,r5,r14
  10c048:	2811883a 	mov	r8,r5
  10c04c:	100f883a 	mov	r7,r2
  10c050:	41000017 	ldw	r4,0(r8)
  10c054:	39c00404 	addi	r7,r7,16
  10c058:	18c00404 	addi	r3,r3,16
  10c05c:	393ffc15 	stw	r4,-16(r7)
  10c060:	193ffc17 	ldw	r4,-16(r3)
  10c064:	6b400404 	addi	r13,r13,16
  10c068:	5ac00404 	addi	r11,r11,16
  10c06c:	693ffc15 	stw	r4,-16(r13)
  10c070:	61000017 	ldw	r4,0(r12)
  10c074:	4a400404 	addi	r9,r9,16
  10c078:	42000404 	addi	r8,r8,16
  10c07c:	593ffc15 	stw	r4,-16(r11)
  10c080:	51000017 	ldw	r4,0(r10)
  10c084:	63000404 	addi	r12,r12,16
  10c088:	52800404 	addi	r10,r10,16
  10c08c:	493ffc15 	stw	r4,-16(r9)
  10c090:	1bbfef1e 	bne	r3,r14,10c050 <__alt_data_end+0xfffcc050>
  10c094:	79000044 	addi	r4,r15,1
  10c098:	2008913a 	slli	r4,r4,4
  10c09c:	328003cc 	andi	r10,r6,15
  10c0a0:	02c000c4 	movi	r11,3
  10c0a4:	1107883a 	add	r3,r2,r4
  10c0a8:	290b883a 	add	r5,r5,r4
  10c0ac:	5a801e2e 	bgeu	r11,r10,10c128 <memmove+0x154>
  10c0b0:	1813883a 	mov	r9,r3
  10c0b4:	2811883a 	mov	r8,r5
  10c0b8:	500f883a 	mov	r7,r10
  10c0bc:	41000017 	ldw	r4,0(r8)
  10c0c0:	4a400104 	addi	r9,r9,4
  10c0c4:	39ffff04 	addi	r7,r7,-4
  10c0c8:	493fff15 	stw	r4,-4(r9)
  10c0cc:	42000104 	addi	r8,r8,4
  10c0d0:	59fffa36 	bltu	r11,r7,10c0bc <__alt_data_end+0xfffcc0bc>
  10c0d4:	513fff04 	addi	r4,r10,-4
  10c0d8:	2008d0ba 	srli	r4,r4,2
  10c0dc:	318000cc 	andi	r6,r6,3
  10c0e0:	21000044 	addi	r4,r4,1
  10c0e4:	2109883a 	add	r4,r4,r4
  10c0e8:	2109883a 	add	r4,r4,r4
  10c0ec:	1907883a 	add	r3,r3,r4
  10c0f0:	290b883a 	add	r5,r5,r4
  10c0f4:	30000b26 	beq	r6,zero,10c124 <memmove+0x150>
  10c0f8:	198d883a 	add	r6,r3,r6
  10c0fc:	29c00003 	ldbu	r7,0(r5)
  10c100:	18c00044 	addi	r3,r3,1
  10c104:	29400044 	addi	r5,r5,1
  10c108:	19ffffc5 	stb	r7,-1(r3)
  10c10c:	19bffb1e 	bne	r3,r6,10c0fc <__alt_data_end+0xfffcc0fc>
  10c110:	f800283a 	ret
  10c114:	1007883a 	mov	r3,r2
  10c118:	003ff606 	br	10c0f4 <__alt_data_end+0xfffcc0f4>
  10c11c:	1007883a 	mov	r3,r2
  10c120:	003ff506 	br	10c0f8 <__alt_data_end+0xfffcc0f8>
  10c124:	f800283a 	ret
  10c128:	500d883a 	mov	r6,r10
  10c12c:	003ff106 	br	10c0f4 <__alt_data_end+0xfffcc0f4>

0010c130 <_Balloc>:
  10c130:	20801317 	ldw	r2,76(r4)
  10c134:	defffc04 	addi	sp,sp,-16
  10c138:	dc400115 	stw	r17,4(sp)
  10c13c:	dc000015 	stw	r16,0(sp)
  10c140:	dfc00315 	stw	ra,12(sp)
  10c144:	dc800215 	stw	r18,8(sp)
  10c148:	2023883a 	mov	r17,r4
  10c14c:	2821883a 	mov	r16,r5
  10c150:	10000f26 	beq	r2,zero,10c190 <_Balloc+0x60>
  10c154:	8407883a 	add	r3,r16,r16
  10c158:	18c7883a 	add	r3,r3,r3
  10c15c:	10c7883a 	add	r3,r2,r3
  10c160:	18800017 	ldw	r2,0(r3)
  10c164:	10001126 	beq	r2,zero,10c1ac <_Balloc+0x7c>
  10c168:	11000017 	ldw	r4,0(r2)
  10c16c:	19000015 	stw	r4,0(r3)
  10c170:	10000415 	stw	zero,16(r2)
  10c174:	10000315 	stw	zero,12(r2)
  10c178:	dfc00317 	ldw	ra,12(sp)
  10c17c:	dc800217 	ldw	r18,8(sp)
  10c180:	dc400117 	ldw	r17,4(sp)
  10c184:	dc000017 	ldw	r16,0(sp)
  10c188:	dec00404 	addi	sp,sp,16
  10c18c:	f800283a 	ret
  10c190:	01800844 	movi	r6,33
  10c194:	01400104 	movi	r5,4
  10c198:	0113e300 	call	113e30 <_calloc_r>
  10c19c:	88801315 	stw	r2,76(r17)
  10c1a0:	103fec1e 	bne	r2,zero,10c154 <__alt_data_end+0xfffcc154>
  10c1a4:	0005883a 	mov	r2,zero
  10c1a8:	003ff306 	br	10c178 <__alt_data_end+0xfffcc178>
  10c1ac:	01400044 	movi	r5,1
  10c1b0:	2c24983a 	sll	r18,r5,r16
  10c1b4:	8809883a 	mov	r4,r17
  10c1b8:	91800144 	addi	r6,r18,5
  10c1bc:	318d883a 	add	r6,r6,r6
  10c1c0:	318d883a 	add	r6,r6,r6
  10c1c4:	0113e300 	call	113e30 <_calloc_r>
  10c1c8:	103ff626 	beq	r2,zero,10c1a4 <__alt_data_end+0xfffcc1a4>
  10c1cc:	14000115 	stw	r16,4(r2)
  10c1d0:	14800215 	stw	r18,8(r2)
  10c1d4:	003fe606 	br	10c170 <__alt_data_end+0xfffcc170>

0010c1d8 <_Bfree>:
  10c1d8:	28000826 	beq	r5,zero,10c1fc <_Bfree+0x24>
  10c1dc:	28c00117 	ldw	r3,4(r5)
  10c1e0:	20801317 	ldw	r2,76(r4)
  10c1e4:	18c7883a 	add	r3,r3,r3
  10c1e8:	18c7883a 	add	r3,r3,r3
  10c1ec:	10c5883a 	add	r2,r2,r3
  10c1f0:	10c00017 	ldw	r3,0(r2)
  10c1f4:	28c00015 	stw	r3,0(r5)
  10c1f8:	11400015 	stw	r5,0(r2)
  10c1fc:	f800283a 	ret

0010c200 <__multadd>:
  10c200:	defff704 	addi	sp,sp,-36
  10c204:	dc800215 	stw	r18,8(sp)
  10c208:	2c800417 	ldw	r18,16(r5)
  10c20c:	dd800615 	stw	r22,24(sp)
  10c210:	dd400515 	stw	r21,20(sp)
  10c214:	dd000415 	stw	r20,16(sp)
  10c218:	dcc00315 	stw	r19,12(sp)
  10c21c:	dc400115 	stw	r17,4(sp)
  10c220:	dc000015 	stw	r16,0(sp)
  10c224:	dfc00815 	stw	ra,32(sp)
  10c228:	ddc00715 	stw	r23,28(sp)
  10c22c:	2827883a 	mov	r19,r5
  10c230:	2029883a 	mov	r20,r4
  10c234:	3023883a 	mov	r17,r6
  10c238:	3821883a 	mov	r16,r7
  10c23c:	2d400504 	addi	r21,r5,20
  10c240:	002d883a 	mov	r22,zero
  10c244:	adc00017 	ldw	r23,0(r21)
  10c248:	880b883a 	mov	r5,r17
  10c24c:	ad400104 	addi	r21,r21,4
  10c250:	b93fffcc 	andi	r4,r23,65535
  10c254:	01160740 	call	116074 <__mulsi3>
  10c258:	b808d43a 	srli	r4,r23,16
  10c25c:	880b883a 	mov	r5,r17
  10c260:	1421883a 	add	r16,r2,r16
  10c264:	01160740 	call	116074 <__mulsi3>
  10c268:	800ed43a 	srli	r7,r16,16
  10c26c:	80ffffcc 	andi	r3,r16,65535
  10c270:	b5800044 	addi	r22,r22,1
  10c274:	11c5883a 	add	r2,r2,r7
  10c278:	100e943a 	slli	r7,r2,16
  10c27c:	1020d43a 	srli	r16,r2,16
  10c280:	38c7883a 	add	r3,r7,r3
  10c284:	a8ffff15 	stw	r3,-4(r21)
  10c288:	b4bfee16 	blt	r22,r18,10c244 <__alt_data_end+0xfffcc244>
  10c28c:	80000926 	beq	r16,zero,10c2b4 <__multadd+0xb4>
  10c290:	98800217 	ldw	r2,8(r19)
  10c294:	9080130e 	bge	r18,r2,10c2e4 <__multadd+0xe4>
  10c298:	90800144 	addi	r2,r18,5
  10c29c:	1085883a 	add	r2,r2,r2
  10c2a0:	1085883a 	add	r2,r2,r2
  10c2a4:	9885883a 	add	r2,r19,r2
  10c2a8:	14000015 	stw	r16,0(r2)
  10c2ac:	94800044 	addi	r18,r18,1
  10c2b0:	9c800415 	stw	r18,16(r19)
  10c2b4:	9805883a 	mov	r2,r19
  10c2b8:	dfc00817 	ldw	ra,32(sp)
  10c2bc:	ddc00717 	ldw	r23,28(sp)
  10c2c0:	dd800617 	ldw	r22,24(sp)
  10c2c4:	dd400517 	ldw	r21,20(sp)
  10c2c8:	dd000417 	ldw	r20,16(sp)
  10c2cc:	dcc00317 	ldw	r19,12(sp)
  10c2d0:	dc800217 	ldw	r18,8(sp)
  10c2d4:	dc400117 	ldw	r17,4(sp)
  10c2d8:	dc000017 	ldw	r16,0(sp)
  10c2dc:	dec00904 	addi	sp,sp,36
  10c2e0:	f800283a 	ret
  10c2e4:	99400117 	ldw	r5,4(r19)
  10c2e8:	a009883a 	mov	r4,r20
  10c2ec:	29400044 	addi	r5,r5,1
  10c2f0:	010c1300 	call	10c130 <_Balloc>
  10c2f4:	99800417 	ldw	r6,16(r19)
  10c2f8:	99400304 	addi	r5,r19,12
  10c2fc:	11000304 	addi	r4,r2,12
  10c300:	31800084 	addi	r6,r6,2
  10c304:	318d883a 	add	r6,r6,r6
  10c308:	318d883a 	add	r6,r6,r6
  10c30c:	1023883a 	mov	r17,r2
  10c310:	01027180 	call	102718 <memcpy>
  10c314:	98000a26 	beq	r19,zero,10c340 <__multadd+0x140>
  10c318:	98c00117 	ldw	r3,4(r19)
  10c31c:	a0801317 	ldw	r2,76(r20)
  10c320:	18c7883a 	add	r3,r3,r3
  10c324:	18c7883a 	add	r3,r3,r3
  10c328:	10c5883a 	add	r2,r2,r3
  10c32c:	10c00017 	ldw	r3,0(r2)
  10c330:	98c00015 	stw	r3,0(r19)
  10c334:	14c00015 	stw	r19,0(r2)
  10c338:	8827883a 	mov	r19,r17
  10c33c:	003fd606 	br	10c298 <__alt_data_end+0xfffcc298>
  10c340:	8827883a 	mov	r19,r17
  10c344:	003fd406 	br	10c298 <__alt_data_end+0xfffcc298>

0010c348 <__s2b>:
  10c348:	defff904 	addi	sp,sp,-28
  10c34c:	dc400115 	stw	r17,4(sp)
  10c350:	dc000015 	stw	r16,0(sp)
  10c354:	2023883a 	mov	r17,r4
  10c358:	2821883a 	mov	r16,r5
  10c35c:	39000204 	addi	r4,r7,8
  10c360:	01400244 	movi	r5,9
  10c364:	dcc00315 	stw	r19,12(sp)
  10c368:	dc800215 	stw	r18,8(sp)
  10c36c:	dfc00615 	stw	ra,24(sp)
  10c370:	dd400515 	stw	r21,20(sp)
  10c374:	dd000415 	stw	r20,16(sp)
  10c378:	3825883a 	mov	r18,r7
  10c37c:	3027883a 	mov	r19,r6
  10c380:	0115ec00 	call	115ec0 <__divsi3>
  10c384:	00c00044 	movi	r3,1
  10c388:	000b883a 	mov	r5,zero
  10c38c:	1880030e 	bge	r3,r2,10c39c <__s2b+0x54>
  10c390:	18c7883a 	add	r3,r3,r3
  10c394:	29400044 	addi	r5,r5,1
  10c398:	18bffd16 	blt	r3,r2,10c390 <__alt_data_end+0xfffcc390>
  10c39c:	8809883a 	mov	r4,r17
  10c3a0:	010c1300 	call	10c130 <_Balloc>
  10c3a4:	d8c00717 	ldw	r3,28(sp)
  10c3a8:	10c00515 	stw	r3,20(r2)
  10c3ac:	00c00044 	movi	r3,1
  10c3b0:	10c00415 	stw	r3,16(r2)
  10c3b4:	00c00244 	movi	r3,9
  10c3b8:	1cc0210e 	bge	r3,r19,10c440 <__s2b+0xf8>
  10c3bc:	80eb883a 	add	r21,r16,r3
  10c3c0:	a829883a 	mov	r20,r21
  10c3c4:	84e1883a 	add	r16,r16,r19
  10c3c8:	a1c00007 	ldb	r7,0(r20)
  10c3cc:	01800284 	movi	r6,10
  10c3d0:	a5000044 	addi	r20,r20,1
  10c3d4:	100b883a 	mov	r5,r2
  10c3d8:	39fff404 	addi	r7,r7,-48
  10c3dc:	8809883a 	mov	r4,r17
  10c3e0:	010c2000 	call	10c200 <__multadd>
  10c3e4:	a43ff81e 	bne	r20,r16,10c3c8 <__alt_data_end+0xfffcc3c8>
  10c3e8:	ace1883a 	add	r16,r21,r19
  10c3ec:	843ffe04 	addi	r16,r16,-8
  10c3f0:	9c800a0e 	bge	r19,r18,10c41c <__s2b+0xd4>
  10c3f4:	94e5c83a 	sub	r18,r18,r19
  10c3f8:	84a5883a 	add	r18,r16,r18
  10c3fc:	81c00007 	ldb	r7,0(r16)
  10c400:	01800284 	movi	r6,10
  10c404:	84000044 	addi	r16,r16,1
  10c408:	100b883a 	mov	r5,r2
  10c40c:	39fff404 	addi	r7,r7,-48
  10c410:	8809883a 	mov	r4,r17
  10c414:	010c2000 	call	10c200 <__multadd>
  10c418:	84bff81e 	bne	r16,r18,10c3fc <__alt_data_end+0xfffcc3fc>
  10c41c:	dfc00617 	ldw	ra,24(sp)
  10c420:	dd400517 	ldw	r21,20(sp)
  10c424:	dd000417 	ldw	r20,16(sp)
  10c428:	dcc00317 	ldw	r19,12(sp)
  10c42c:	dc800217 	ldw	r18,8(sp)
  10c430:	dc400117 	ldw	r17,4(sp)
  10c434:	dc000017 	ldw	r16,0(sp)
  10c438:	dec00704 	addi	sp,sp,28
  10c43c:	f800283a 	ret
  10c440:	84000284 	addi	r16,r16,10
  10c444:	1827883a 	mov	r19,r3
  10c448:	003fe906 	br	10c3f0 <__alt_data_end+0xfffcc3f0>

0010c44c <__hi0bits>:
  10c44c:	20bfffec 	andhi	r2,r4,65535
  10c450:	1000141e 	bne	r2,zero,10c4a4 <__hi0bits+0x58>
  10c454:	2008943a 	slli	r4,r4,16
  10c458:	00800404 	movi	r2,16
  10c45c:	20ffc02c 	andhi	r3,r4,65280
  10c460:	1800021e 	bne	r3,zero,10c46c <__hi0bits+0x20>
  10c464:	2008923a 	slli	r4,r4,8
  10c468:	10800204 	addi	r2,r2,8
  10c46c:	20fc002c 	andhi	r3,r4,61440
  10c470:	1800021e 	bne	r3,zero,10c47c <__hi0bits+0x30>
  10c474:	2008913a 	slli	r4,r4,4
  10c478:	10800104 	addi	r2,r2,4
  10c47c:	20f0002c 	andhi	r3,r4,49152
  10c480:	1800031e 	bne	r3,zero,10c490 <__hi0bits+0x44>
  10c484:	2109883a 	add	r4,r4,r4
  10c488:	10800084 	addi	r2,r2,2
  10c48c:	2109883a 	add	r4,r4,r4
  10c490:	20000316 	blt	r4,zero,10c4a0 <__hi0bits+0x54>
  10c494:	2110002c 	andhi	r4,r4,16384
  10c498:	2000041e 	bne	r4,zero,10c4ac <__hi0bits+0x60>
  10c49c:	00800804 	movi	r2,32
  10c4a0:	f800283a 	ret
  10c4a4:	0005883a 	mov	r2,zero
  10c4a8:	003fec06 	br	10c45c <__alt_data_end+0xfffcc45c>
  10c4ac:	10800044 	addi	r2,r2,1
  10c4b0:	f800283a 	ret

0010c4b4 <__lo0bits>:
  10c4b4:	20c00017 	ldw	r3,0(r4)
  10c4b8:	188001cc 	andi	r2,r3,7
  10c4bc:	10000826 	beq	r2,zero,10c4e0 <__lo0bits+0x2c>
  10c4c0:	1880004c 	andi	r2,r3,1
  10c4c4:	1000211e 	bne	r2,zero,10c54c <__lo0bits+0x98>
  10c4c8:	1880008c 	andi	r2,r3,2
  10c4cc:	1000211e 	bne	r2,zero,10c554 <__lo0bits+0xa0>
  10c4d0:	1806d0ba 	srli	r3,r3,2
  10c4d4:	00800084 	movi	r2,2
  10c4d8:	20c00015 	stw	r3,0(r4)
  10c4dc:	f800283a 	ret
  10c4e0:	18bfffcc 	andi	r2,r3,65535
  10c4e4:	10001326 	beq	r2,zero,10c534 <__lo0bits+0x80>
  10c4e8:	0005883a 	mov	r2,zero
  10c4ec:	19403fcc 	andi	r5,r3,255
  10c4f0:	2800021e 	bne	r5,zero,10c4fc <__lo0bits+0x48>
  10c4f4:	1806d23a 	srli	r3,r3,8
  10c4f8:	10800204 	addi	r2,r2,8
  10c4fc:	194003cc 	andi	r5,r3,15
  10c500:	2800021e 	bne	r5,zero,10c50c <__lo0bits+0x58>
  10c504:	1806d13a 	srli	r3,r3,4
  10c508:	10800104 	addi	r2,r2,4
  10c50c:	194000cc 	andi	r5,r3,3
  10c510:	2800021e 	bne	r5,zero,10c51c <__lo0bits+0x68>
  10c514:	1806d0ba 	srli	r3,r3,2
  10c518:	10800084 	addi	r2,r2,2
  10c51c:	1940004c 	andi	r5,r3,1
  10c520:	2800081e 	bne	r5,zero,10c544 <__lo0bits+0x90>
  10c524:	1806d07a 	srli	r3,r3,1
  10c528:	1800051e 	bne	r3,zero,10c540 <__lo0bits+0x8c>
  10c52c:	00800804 	movi	r2,32
  10c530:	f800283a 	ret
  10c534:	1806d43a 	srli	r3,r3,16
  10c538:	00800404 	movi	r2,16
  10c53c:	003feb06 	br	10c4ec <__alt_data_end+0xfffcc4ec>
  10c540:	10800044 	addi	r2,r2,1
  10c544:	20c00015 	stw	r3,0(r4)
  10c548:	f800283a 	ret
  10c54c:	0005883a 	mov	r2,zero
  10c550:	f800283a 	ret
  10c554:	1806d07a 	srli	r3,r3,1
  10c558:	00800044 	movi	r2,1
  10c55c:	20c00015 	stw	r3,0(r4)
  10c560:	f800283a 	ret

0010c564 <__i2b>:
  10c564:	defffd04 	addi	sp,sp,-12
  10c568:	dc000015 	stw	r16,0(sp)
  10c56c:	04000044 	movi	r16,1
  10c570:	dc400115 	stw	r17,4(sp)
  10c574:	2823883a 	mov	r17,r5
  10c578:	800b883a 	mov	r5,r16
  10c57c:	dfc00215 	stw	ra,8(sp)
  10c580:	010c1300 	call	10c130 <_Balloc>
  10c584:	14400515 	stw	r17,20(r2)
  10c588:	14000415 	stw	r16,16(r2)
  10c58c:	dfc00217 	ldw	ra,8(sp)
  10c590:	dc400117 	ldw	r17,4(sp)
  10c594:	dc000017 	ldw	r16,0(sp)
  10c598:	dec00304 	addi	sp,sp,12
  10c59c:	f800283a 	ret

0010c5a0 <__multiply>:
  10c5a0:	deffef04 	addi	sp,sp,-68
  10c5a4:	dc400815 	stw	r17,32(sp)
  10c5a8:	dc000715 	stw	r16,28(sp)
  10c5ac:	34400417 	ldw	r17,16(r6)
  10c5b0:	2c000417 	ldw	r16,16(r5)
  10c5b4:	dd800d15 	stw	r22,52(sp)
  10c5b8:	dc800915 	stw	r18,36(sp)
  10c5bc:	dfc01015 	stw	ra,64(sp)
  10c5c0:	df000f15 	stw	fp,60(sp)
  10c5c4:	ddc00e15 	stw	r23,56(sp)
  10c5c8:	dd400c15 	stw	r21,48(sp)
  10c5cc:	dd000b15 	stw	r20,44(sp)
  10c5d0:	dcc00a15 	stw	r19,40(sp)
  10c5d4:	2825883a 	mov	r18,r5
  10c5d8:	302d883a 	mov	r22,r6
  10c5dc:	8440050e 	bge	r16,r17,10c5f4 <__multiply+0x54>
  10c5e0:	8007883a 	mov	r3,r16
  10c5e4:	3025883a 	mov	r18,r6
  10c5e8:	8821883a 	mov	r16,r17
  10c5ec:	282d883a 	mov	r22,r5
  10c5f0:	1823883a 	mov	r17,r3
  10c5f4:	90800217 	ldw	r2,8(r18)
  10c5f8:	8447883a 	add	r3,r16,r17
  10c5fc:	d8c00215 	stw	r3,8(sp)
  10c600:	91400117 	ldw	r5,4(r18)
  10c604:	10c0010e 	bge	r2,r3,10c60c <__multiply+0x6c>
  10c608:	29400044 	addi	r5,r5,1
  10c60c:	010c1300 	call	10c130 <_Balloc>
  10c610:	d8c00217 	ldw	r3,8(sp)
  10c614:	d8800615 	stw	r2,24(sp)
  10c618:	18eb883a 	add	r21,r3,r3
  10c61c:	ad6b883a 	add	r21,r21,r21
  10c620:	10c00504 	addi	r3,r2,20
  10c624:	1d6b883a 	add	r21,r3,r21
  10c628:	d8c00115 	stw	r3,4(sp)
  10c62c:	dd400315 	stw	r21,12(sp)
  10c630:	1805883a 	mov	r2,r3
  10c634:	1d40042e 	bgeu	r3,r21,10c648 <__multiply+0xa8>
  10c638:	d8c00317 	ldw	r3,12(sp)
  10c63c:	10000015 	stw	zero,0(r2)
  10c640:	10800104 	addi	r2,r2,4
  10c644:	10fffc36 	bltu	r2,r3,10c638 <__alt_data_end+0xfffcc638>
  10c648:	8c63883a 	add	r17,r17,r17
  10c64c:	b5800504 	addi	r22,r22,20
  10c650:	8c63883a 	add	r17,r17,r17
  10c654:	94800504 	addi	r18,r18,20
  10c658:	8421883a 	add	r16,r16,r16
  10c65c:	b463883a 	add	r17,r22,r17
  10c660:	8421883a 	add	r16,r16,r16
  10c664:	dd800015 	stw	r22,0(sp)
  10c668:	dc800415 	stw	r18,16(sp)
  10c66c:	dc400515 	stw	r17,20(sp)
  10c670:	9429883a 	add	r20,r18,r16
  10c674:	b4404f2e 	bgeu	r22,r17,10c7b4 <__multiply+0x214>
  10c678:	d8c00017 	ldw	r3,0(sp)
  10c67c:	1c800017 	ldw	r18,0(r3)
  10c680:	947fffcc 	andi	r17,r18,65535
  10c684:	88001e26 	beq	r17,zero,10c700 <__multiply+0x160>
  10c688:	dd800117 	ldw	r22,4(sp)
  10c68c:	dd400417 	ldw	r21,16(sp)
  10c690:	0027883a 	mov	r19,zero
  10c694:	ac800017 	ldw	r18,0(r21)
  10c698:	b4000017 	ldw	r16,0(r22)
  10c69c:	880b883a 	mov	r5,r17
  10c6a0:	913fffcc 	andi	r4,r18,65535
  10c6a4:	01160740 	call	116074 <__mulsi3>
  10c6a8:	9008d43a 	srli	r4,r18,16
  10c6ac:	84bfffcc 	andi	r18,r16,65535
  10c6b0:	1485883a 	add	r2,r2,r18
  10c6b4:	14e5883a 	add	r18,r2,r19
  10c6b8:	8020d43a 	srli	r16,r16,16
  10c6bc:	9026d43a 	srli	r19,r18,16
  10c6c0:	880b883a 	mov	r5,r17
  10c6c4:	01160740 	call	116074 <__mulsi3>
  10c6c8:	1405883a 	add	r2,r2,r16
  10c6cc:	14e1883a 	add	r16,r2,r19
  10c6d0:	90ffffcc 	andi	r3,r18,65535
  10c6d4:	8024943a 	slli	r18,r16,16
  10c6d8:	ad400104 	addi	r21,r21,4
  10c6dc:	b005883a 	mov	r2,r22
  10c6e0:	90c6b03a 	or	r3,r18,r3
  10c6e4:	b0c00015 	stw	r3,0(r22)
  10c6e8:	8026d43a 	srli	r19,r16,16
  10c6ec:	b5800104 	addi	r22,r22,4
  10c6f0:	ad3fe836 	bltu	r21,r20,10c694 <__alt_data_end+0xfffcc694>
  10c6f4:	d8c00017 	ldw	r3,0(sp)
  10c6f8:	14c00115 	stw	r19,4(r2)
  10c6fc:	1c800017 	ldw	r18,0(r3)
  10c700:	9024d43a 	srli	r18,r18,16
  10c704:	90002226 	beq	r18,zero,10c790 <__multiply+0x1f0>
  10c708:	d8c00117 	ldw	r3,4(sp)
  10c70c:	dd800417 	ldw	r22,16(sp)
  10c710:	002f883a 	mov	r23,zero
  10c714:	1f000017 	ldw	fp,0(r3)
  10c718:	1823883a 	mov	r17,r3
  10c71c:	182b883a 	mov	r21,r3
  10c720:	e021883a 	mov	r16,fp
  10c724:	00000106 	br	10c72c <__multiply+0x18c>
  10c728:	982b883a 	mov	r21,r19
  10c72c:	b100000b 	ldhu	r4,0(r22)
  10c730:	8020d43a 	srli	r16,r16,16
  10c734:	900b883a 	mov	r5,r18
  10c738:	01160740 	call	116074 <__mulsi3>
  10c73c:	1405883a 	add	r2,r2,r16
  10c740:	15ef883a 	add	r23,r2,r23
  10c744:	b804943a 	slli	r2,r23,16
  10c748:	e0ffffcc 	andi	r3,fp,65535
  10c74c:	8c400104 	addi	r17,r17,4
  10c750:	10c6b03a 	or	r3,r2,r3
  10c754:	88ffff15 	stw	r3,-4(r17)
  10c758:	b5800104 	addi	r22,r22,4
  10c75c:	b13fff17 	ldw	r4,-4(r22)
  10c760:	acc00104 	addi	r19,r21,4
  10c764:	900b883a 	mov	r5,r18
  10c768:	2008d43a 	srli	r4,r4,16
  10c76c:	9c000017 	ldw	r16,0(r19)
  10c770:	01160740 	call	116074 <__mulsi3>
  10c774:	b806d43a 	srli	r3,r23,16
  10c778:	813fffcc 	andi	r4,r16,65535
  10c77c:	1105883a 	add	r2,r2,r4
  10c780:	10f9883a 	add	fp,r2,r3
  10c784:	e02ed43a 	srli	r23,fp,16
  10c788:	b53fe736 	bltu	r22,r20,10c728 <__alt_data_end+0xfffcc728>
  10c78c:	af000115 	stw	fp,4(r21)
  10c790:	d8c00017 	ldw	r3,0(sp)
  10c794:	d9000517 	ldw	r4,20(sp)
  10c798:	18c00104 	addi	r3,r3,4
  10c79c:	d8c00015 	stw	r3,0(sp)
  10c7a0:	d8c00117 	ldw	r3,4(sp)
  10c7a4:	18c00104 	addi	r3,r3,4
  10c7a8:	d8c00115 	stw	r3,4(sp)
  10c7ac:	d8c00017 	ldw	r3,0(sp)
  10c7b0:	193fb136 	bltu	r3,r4,10c678 <__alt_data_end+0xfffcc678>
  10c7b4:	d8c00217 	ldw	r3,8(sp)
  10c7b8:	00c00c0e 	bge	zero,r3,10c7ec <__multiply+0x24c>
  10c7bc:	d8c00317 	ldw	r3,12(sp)
  10c7c0:	18bfff17 	ldw	r2,-4(r3)
  10c7c4:	1d7fff04 	addi	r21,r3,-4
  10c7c8:	10000326 	beq	r2,zero,10c7d8 <__multiply+0x238>
  10c7cc:	00000706 	br	10c7ec <__multiply+0x24c>
  10c7d0:	a8800017 	ldw	r2,0(r21)
  10c7d4:	1000051e 	bne	r2,zero,10c7ec <__multiply+0x24c>
  10c7d8:	d8c00217 	ldw	r3,8(sp)
  10c7dc:	ad7fff04 	addi	r21,r21,-4
  10c7e0:	18ffffc4 	addi	r3,r3,-1
  10c7e4:	d8c00215 	stw	r3,8(sp)
  10c7e8:	183ff91e 	bne	r3,zero,10c7d0 <__alt_data_end+0xfffcc7d0>
  10c7ec:	d8c00617 	ldw	r3,24(sp)
  10c7f0:	d9000217 	ldw	r4,8(sp)
  10c7f4:	1805883a 	mov	r2,r3
  10c7f8:	19000415 	stw	r4,16(r3)
  10c7fc:	dfc01017 	ldw	ra,64(sp)
  10c800:	df000f17 	ldw	fp,60(sp)
  10c804:	ddc00e17 	ldw	r23,56(sp)
  10c808:	dd800d17 	ldw	r22,52(sp)
  10c80c:	dd400c17 	ldw	r21,48(sp)
  10c810:	dd000b17 	ldw	r20,44(sp)
  10c814:	dcc00a17 	ldw	r19,40(sp)
  10c818:	dc800917 	ldw	r18,36(sp)
  10c81c:	dc400817 	ldw	r17,32(sp)
  10c820:	dc000717 	ldw	r16,28(sp)
  10c824:	dec01104 	addi	sp,sp,68
  10c828:	f800283a 	ret

0010c82c <__pow5mult>:
  10c82c:	defffa04 	addi	sp,sp,-24
  10c830:	dcc00315 	stw	r19,12(sp)
  10c834:	dc000015 	stw	r16,0(sp)
  10c838:	dfc00515 	stw	ra,20(sp)
  10c83c:	dd000415 	stw	r20,16(sp)
  10c840:	dc800215 	stw	r18,8(sp)
  10c844:	dc400115 	stw	r17,4(sp)
  10c848:	308000cc 	andi	r2,r6,3
  10c84c:	3021883a 	mov	r16,r6
  10c850:	2027883a 	mov	r19,r4
  10c854:	10002f1e 	bne	r2,zero,10c914 <__pow5mult+0xe8>
  10c858:	2825883a 	mov	r18,r5
  10c85c:	8021d0ba 	srai	r16,r16,2
  10c860:	80001a26 	beq	r16,zero,10c8cc <__pow5mult+0xa0>
  10c864:	9c401217 	ldw	r17,72(r19)
  10c868:	8800061e 	bne	r17,zero,10c884 <__pow5mult+0x58>
  10c86c:	00003406 	br	10c940 <__pow5mult+0x114>
  10c870:	8021d07a 	srai	r16,r16,1
  10c874:	80001526 	beq	r16,zero,10c8cc <__pow5mult+0xa0>
  10c878:	88800017 	ldw	r2,0(r17)
  10c87c:	10001c26 	beq	r2,zero,10c8f0 <__pow5mult+0xc4>
  10c880:	1023883a 	mov	r17,r2
  10c884:	8080004c 	andi	r2,r16,1
  10c888:	103ff926 	beq	r2,zero,10c870 <__alt_data_end+0xfffcc870>
  10c88c:	880d883a 	mov	r6,r17
  10c890:	900b883a 	mov	r5,r18
  10c894:	9809883a 	mov	r4,r19
  10c898:	010c5a00 	call	10c5a0 <__multiply>
  10c89c:	90001b26 	beq	r18,zero,10c90c <__pow5mult+0xe0>
  10c8a0:	91000117 	ldw	r4,4(r18)
  10c8a4:	98c01317 	ldw	r3,76(r19)
  10c8a8:	8021d07a 	srai	r16,r16,1
  10c8ac:	2109883a 	add	r4,r4,r4
  10c8b0:	2109883a 	add	r4,r4,r4
  10c8b4:	1907883a 	add	r3,r3,r4
  10c8b8:	19000017 	ldw	r4,0(r3)
  10c8bc:	91000015 	stw	r4,0(r18)
  10c8c0:	1c800015 	stw	r18,0(r3)
  10c8c4:	1025883a 	mov	r18,r2
  10c8c8:	803feb1e 	bne	r16,zero,10c878 <__alt_data_end+0xfffcc878>
  10c8cc:	9005883a 	mov	r2,r18
  10c8d0:	dfc00517 	ldw	ra,20(sp)
  10c8d4:	dd000417 	ldw	r20,16(sp)
  10c8d8:	dcc00317 	ldw	r19,12(sp)
  10c8dc:	dc800217 	ldw	r18,8(sp)
  10c8e0:	dc400117 	ldw	r17,4(sp)
  10c8e4:	dc000017 	ldw	r16,0(sp)
  10c8e8:	dec00604 	addi	sp,sp,24
  10c8ec:	f800283a 	ret
  10c8f0:	880d883a 	mov	r6,r17
  10c8f4:	880b883a 	mov	r5,r17
  10c8f8:	9809883a 	mov	r4,r19
  10c8fc:	010c5a00 	call	10c5a0 <__multiply>
  10c900:	88800015 	stw	r2,0(r17)
  10c904:	10000015 	stw	zero,0(r2)
  10c908:	003fdd06 	br	10c880 <__alt_data_end+0xfffcc880>
  10c90c:	1025883a 	mov	r18,r2
  10c910:	003fd706 	br	10c870 <__alt_data_end+0xfffcc870>
  10c914:	10bfffc4 	addi	r2,r2,-1
  10c918:	1085883a 	add	r2,r2,r2
  10c91c:	00c004b4 	movhi	r3,18
  10c920:	18cf1504 	addi	r3,r3,15444
  10c924:	1085883a 	add	r2,r2,r2
  10c928:	1885883a 	add	r2,r3,r2
  10c92c:	11800017 	ldw	r6,0(r2)
  10c930:	000f883a 	mov	r7,zero
  10c934:	010c2000 	call	10c200 <__multadd>
  10c938:	1025883a 	mov	r18,r2
  10c93c:	003fc706 	br	10c85c <__alt_data_end+0xfffcc85c>
  10c940:	05000044 	movi	r20,1
  10c944:	a00b883a 	mov	r5,r20
  10c948:	9809883a 	mov	r4,r19
  10c94c:	010c1300 	call	10c130 <_Balloc>
  10c950:	1023883a 	mov	r17,r2
  10c954:	00809c44 	movi	r2,625
  10c958:	88800515 	stw	r2,20(r17)
  10c95c:	8d000415 	stw	r20,16(r17)
  10c960:	9c401215 	stw	r17,72(r19)
  10c964:	88000015 	stw	zero,0(r17)
  10c968:	003fc606 	br	10c884 <__alt_data_end+0xfffcc884>

0010c96c <__lshift>:
  10c96c:	defff904 	addi	sp,sp,-28
  10c970:	dd400515 	stw	r21,20(sp)
  10c974:	dcc00315 	stw	r19,12(sp)
  10c978:	302bd17a 	srai	r21,r6,5
  10c97c:	2cc00417 	ldw	r19,16(r5)
  10c980:	28800217 	ldw	r2,8(r5)
  10c984:	dd000415 	stw	r20,16(sp)
  10c988:	ace7883a 	add	r19,r21,r19
  10c98c:	dc800215 	stw	r18,8(sp)
  10c990:	dc400115 	stw	r17,4(sp)
  10c994:	dc000015 	stw	r16,0(sp)
  10c998:	dfc00615 	stw	ra,24(sp)
  10c99c:	9c000044 	addi	r16,r19,1
  10c9a0:	2823883a 	mov	r17,r5
  10c9a4:	3029883a 	mov	r20,r6
  10c9a8:	2025883a 	mov	r18,r4
  10c9ac:	29400117 	ldw	r5,4(r5)
  10c9b0:	1400030e 	bge	r2,r16,10c9c0 <__lshift+0x54>
  10c9b4:	1085883a 	add	r2,r2,r2
  10c9b8:	29400044 	addi	r5,r5,1
  10c9bc:	143ffd16 	blt	r2,r16,10c9b4 <__alt_data_end+0xfffcc9b4>
  10c9c0:	9009883a 	mov	r4,r18
  10c9c4:	010c1300 	call	10c130 <_Balloc>
  10c9c8:	10c00504 	addi	r3,r2,20
  10c9cc:	0540070e 	bge	zero,r21,10c9ec <__lshift+0x80>
  10c9d0:	ad6b883a 	add	r21,r21,r21
  10c9d4:	ad6b883a 	add	r21,r21,r21
  10c9d8:	1809883a 	mov	r4,r3
  10c9dc:	1d47883a 	add	r3,r3,r21
  10c9e0:	20000015 	stw	zero,0(r4)
  10c9e4:	21000104 	addi	r4,r4,4
  10c9e8:	193ffd1e 	bne	r3,r4,10c9e0 <__alt_data_end+0xfffcc9e0>
  10c9ec:	8a000417 	ldw	r8,16(r17)
  10c9f0:	89000504 	addi	r4,r17,20
  10c9f4:	a18007cc 	andi	r6,r20,31
  10c9f8:	4211883a 	add	r8,r8,r8
  10c9fc:	4211883a 	add	r8,r8,r8
  10ca00:	2211883a 	add	r8,r4,r8
  10ca04:	30002326 	beq	r6,zero,10ca94 <__lshift+0x128>
  10ca08:	02400804 	movi	r9,32
  10ca0c:	4993c83a 	sub	r9,r9,r6
  10ca10:	000b883a 	mov	r5,zero
  10ca14:	21c00017 	ldw	r7,0(r4)
  10ca18:	1815883a 	mov	r10,r3
  10ca1c:	18c00104 	addi	r3,r3,4
  10ca20:	398e983a 	sll	r7,r7,r6
  10ca24:	21000104 	addi	r4,r4,4
  10ca28:	394ab03a 	or	r5,r7,r5
  10ca2c:	197fff15 	stw	r5,-4(r3)
  10ca30:	217fff17 	ldw	r5,-4(r4)
  10ca34:	2a4ad83a 	srl	r5,r5,r9
  10ca38:	223ff636 	bltu	r4,r8,10ca14 <__alt_data_end+0xfffcca14>
  10ca3c:	51400115 	stw	r5,4(r10)
  10ca40:	28001a1e 	bne	r5,zero,10caac <__lshift+0x140>
  10ca44:	843fffc4 	addi	r16,r16,-1
  10ca48:	14000415 	stw	r16,16(r2)
  10ca4c:	88000826 	beq	r17,zero,10ca70 <__lshift+0x104>
  10ca50:	89000117 	ldw	r4,4(r17)
  10ca54:	90c01317 	ldw	r3,76(r18)
  10ca58:	2109883a 	add	r4,r4,r4
  10ca5c:	2109883a 	add	r4,r4,r4
  10ca60:	1907883a 	add	r3,r3,r4
  10ca64:	19000017 	ldw	r4,0(r3)
  10ca68:	89000015 	stw	r4,0(r17)
  10ca6c:	1c400015 	stw	r17,0(r3)
  10ca70:	dfc00617 	ldw	ra,24(sp)
  10ca74:	dd400517 	ldw	r21,20(sp)
  10ca78:	dd000417 	ldw	r20,16(sp)
  10ca7c:	dcc00317 	ldw	r19,12(sp)
  10ca80:	dc800217 	ldw	r18,8(sp)
  10ca84:	dc400117 	ldw	r17,4(sp)
  10ca88:	dc000017 	ldw	r16,0(sp)
  10ca8c:	dec00704 	addi	sp,sp,28
  10ca90:	f800283a 	ret
  10ca94:	21400017 	ldw	r5,0(r4)
  10ca98:	18c00104 	addi	r3,r3,4
  10ca9c:	21000104 	addi	r4,r4,4
  10caa0:	197fff15 	stw	r5,-4(r3)
  10caa4:	223ffb36 	bltu	r4,r8,10ca94 <__alt_data_end+0xfffcca94>
  10caa8:	003fe606 	br	10ca44 <__alt_data_end+0xfffcca44>
  10caac:	9c000084 	addi	r16,r19,2
  10cab0:	003fe406 	br	10ca44 <__alt_data_end+0xfffcca44>

0010cab4 <__mcmp>:
  10cab4:	20800417 	ldw	r2,16(r4)
  10cab8:	28c00417 	ldw	r3,16(r5)
  10cabc:	10c5c83a 	sub	r2,r2,r3
  10cac0:	1000111e 	bne	r2,zero,10cb08 <__mcmp+0x54>
  10cac4:	18c7883a 	add	r3,r3,r3
  10cac8:	18c7883a 	add	r3,r3,r3
  10cacc:	21000504 	addi	r4,r4,20
  10cad0:	29400504 	addi	r5,r5,20
  10cad4:	20c5883a 	add	r2,r4,r3
  10cad8:	28cb883a 	add	r5,r5,r3
  10cadc:	00000106 	br	10cae4 <__mcmp+0x30>
  10cae0:	20800a2e 	bgeu	r4,r2,10cb0c <__mcmp+0x58>
  10cae4:	10bfff04 	addi	r2,r2,-4
  10cae8:	297fff04 	addi	r5,r5,-4
  10caec:	11800017 	ldw	r6,0(r2)
  10caf0:	28c00017 	ldw	r3,0(r5)
  10caf4:	30fffa26 	beq	r6,r3,10cae0 <__alt_data_end+0xfffccae0>
  10caf8:	30c00236 	bltu	r6,r3,10cb04 <__mcmp+0x50>
  10cafc:	00800044 	movi	r2,1
  10cb00:	f800283a 	ret
  10cb04:	00bfffc4 	movi	r2,-1
  10cb08:	f800283a 	ret
  10cb0c:	0005883a 	mov	r2,zero
  10cb10:	f800283a 	ret

0010cb14 <__mdiff>:
  10cb14:	28c00417 	ldw	r3,16(r5)
  10cb18:	30800417 	ldw	r2,16(r6)
  10cb1c:	defffa04 	addi	sp,sp,-24
  10cb20:	dcc00315 	stw	r19,12(sp)
  10cb24:	dc800215 	stw	r18,8(sp)
  10cb28:	dfc00515 	stw	ra,20(sp)
  10cb2c:	dd000415 	stw	r20,16(sp)
  10cb30:	dc400115 	stw	r17,4(sp)
  10cb34:	dc000015 	stw	r16,0(sp)
  10cb38:	1887c83a 	sub	r3,r3,r2
  10cb3c:	2825883a 	mov	r18,r5
  10cb40:	3027883a 	mov	r19,r6
  10cb44:	1800141e 	bne	r3,zero,10cb98 <__mdiff+0x84>
  10cb48:	1085883a 	add	r2,r2,r2
  10cb4c:	1085883a 	add	r2,r2,r2
  10cb50:	2a000504 	addi	r8,r5,20
  10cb54:	34000504 	addi	r16,r6,20
  10cb58:	4087883a 	add	r3,r8,r2
  10cb5c:	8085883a 	add	r2,r16,r2
  10cb60:	00000106 	br	10cb68 <__mdiff+0x54>
  10cb64:	40c0592e 	bgeu	r8,r3,10cccc <__mdiff+0x1b8>
  10cb68:	18ffff04 	addi	r3,r3,-4
  10cb6c:	10bfff04 	addi	r2,r2,-4
  10cb70:	19c00017 	ldw	r7,0(r3)
  10cb74:	11400017 	ldw	r5,0(r2)
  10cb78:	397ffa26 	beq	r7,r5,10cb64 <__alt_data_end+0xfffccb64>
  10cb7c:	3940592e 	bgeu	r7,r5,10cce4 <__mdiff+0x1d0>
  10cb80:	9005883a 	mov	r2,r18
  10cb84:	4023883a 	mov	r17,r8
  10cb88:	9825883a 	mov	r18,r19
  10cb8c:	05000044 	movi	r20,1
  10cb90:	1027883a 	mov	r19,r2
  10cb94:	00000406 	br	10cba8 <__mdiff+0x94>
  10cb98:	18005616 	blt	r3,zero,10ccf4 <__mdiff+0x1e0>
  10cb9c:	34400504 	addi	r17,r6,20
  10cba0:	2c000504 	addi	r16,r5,20
  10cba4:	0029883a 	mov	r20,zero
  10cba8:	91400117 	ldw	r5,4(r18)
  10cbac:	010c1300 	call	10c130 <_Balloc>
  10cbb0:	92400417 	ldw	r9,16(r18)
  10cbb4:	9b000417 	ldw	r12,16(r19)
  10cbb8:	12c00504 	addi	r11,r2,20
  10cbbc:	4a51883a 	add	r8,r9,r9
  10cbc0:	6319883a 	add	r12,r12,r12
  10cbc4:	4211883a 	add	r8,r8,r8
  10cbc8:	6319883a 	add	r12,r12,r12
  10cbcc:	15000315 	stw	r20,12(r2)
  10cbd0:	8211883a 	add	r8,r16,r8
  10cbd4:	8b19883a 	add	r12,r17,r12
  10cbd8:	0007883a 	mov	r3,zero
  10cbdc:	81400017 	ldw	r5,0(r16)
  10cbe0:	89c00017 	ldw	r7,0(r17)
  10cbe4:	59800104 	addi	r6,r11,4
  10cbe8:	293fffcc 	andi	r4,r5,65535
  10cbec:	20c7883a 	add	r3,r4,r3
  10cbf0:	393fffcc 	andi	r4,r7,65535
  10cbf4:	1909c83a 	sub	r4,r3,r4
  10cbf8:	280ad43a 	srli	r5,r5,16
  10cbfc:	380ed43a 	srli	r7,r7,16
  10cc00:	2007d43a 	srai	r3,r4,16
  10cc04:	213fffcc 	andi	r4,r4,65535
  10cc08:	29cbc83a 	sub	r5,r5,r7
  10cc0c:	28c7883a 	add	r3,r5,r3
  10cc10:	180a943a 	slli	r5,r3,16
  10cc14:	8c400104 	addi	r17,r17,4
  10cc18:	84000104 	addi	r16,r16,4
  10cc1c:	2908b03a 	or	r4,r5,r4
  10cc20:	59000015 	stw	r4,0(r11)
  10cc24:	1807d43a 	srai	r3,r3,16
  10cc28:	3015883a 	mov	r10,r6
  10cc2c:	3017883a 	mov	r11,r6
  10cc30:	8b3fea36 	bltu	r17,r12,10cbdc <__alt_data_end+0xfffccbdc>
  10cc34:	8200162e 	bgeu	r16,r8,10cc90 <__mdiff+0x17c>
  10cc38:	8017883a 	mov	r11,r16
  10cc3c:	59400017 	ldw	r5,0(r11)
  10cc40:	31800104 	addi	r6,r6,4
  10cc44:	5ac00104 	addi	r11,r11,4
  10cc48:	293fffcc 	andi	r4,r5,65535
  10cc4c:	20c7883a 	add	r3,r4,r3
  10cc50:	280ed43a 	srli	r7,r5,16
  10cc54:	180bd43a 	srai	r5,r3,16
  10cc58:	193fffcc 	andi	r4,r3,65535
  10cc5c:	3947883a 	add	r3,r7,r5
  10cc60:	180a943a 	slli	r5,r3,16
  10cc64:	1807d43a 	srai	r3,r3,16
  10cc68:	2908b03a 	or	r4,r5,r4
  10cc6c:	313fff15 	stw	r4,-4(r6)
  10cc70:	5a3ff236 	bltu	r11,r8,10cc3c <__alt_data_end+0xfffccc3c>
  10cc74:	0406303a 	nor	r3,zero,r16
  10cc78:	1a07883a 	add	r3,r3,r8
  10cc7c:	1806d0ba 	srli	r3,r3,2
  10cc80:	18c00044 	addi	r3,r3,1
  10cc84:	18c7883a 	add	r3,r3,r3
  10cc88:	18c7883a 	add	r3,r3,r3
  10cc8c:	50d5883a 	add	r10,r10,r3
  10cc90:	50ffff04 	addi	r3,r10,-4
  10cc94:	2000041e 	bne	r4,zero,10cca8 <__mdiff+0x194>
  10cc98:	18ffff04 	addi	r3,r3,-4
  10cc9c:	19000017 	ldw	r4,0(r3)
  10cca0:	4a7fffc4 	addi	r9,r9,-1
  10cca4:	203ffc26 	beq	r4,zero,10cc98 <__alt_data_end+0xfffccc98>
  10cca8:	12400415 	stw	r9,16(r2)
  10ccac:	dfc00517 	ldw	ra,20(sp)
  10ccb0:	dd000417 	ldw	r20,16(sp)
  10ccb4:	dcc00317 	ldw	r19,12(sp)
  10ccb8:	dc800217 	ldw	r18,8(sp)
  10ccbc:	dc400117 	ldw	r17,4(sp)
  10ccc0:	dc000017 	ldw	r16,0(sp)
  10ccc4:	dec00604 	addi	sp,sp,24
  10ccc8:	f800283a 	ret
  10cccc:	000b883a 	mov	r5,zero
  10ccd0:	010c1300 	call	10c130 <_Balloc>
  10ccd4:	00c00044 	movi	r3,1
  10ccd8:	10c00415 	stw	r3,16(r2)
  10ccdc:	10000515 	stw	zero,20(r2)
  10cce0:	003ff206 	br	10ccac <__alt_data_end+0xfffcccac>
  10cce4:	8023883a 	mov	r17,r16
  10cce8:	0029883a 	mov	r20,zero
  10ccec:	4021883a 	mov	r16,r8
  10ccf0:	003fad06 	br	10cba8 <__alt_data_end+0xfffccba8>
  10ccf4:	9005883a 	mov	r2,r18
  10ccf8:	94400504 	addi	r17,r18,20
  10ccfc:	9c000504 	addi	r16,r19,20
  10cd00:	9825883a 	mov	r18,r19
  10cd04:	05000044 	movi	r20,1
  10cd08:	1027883a 	mov	r19,r2
  10cd0c:	003fa606 	br	10cba8 <__alt_data_end+0xfffccba8>

0010cd10 <__ulp>:
  10cd10:	295ffc2c 	andhi	r5,r5,32752
  10cd14:	00bf3034 	movhi	r2,64704
  10cd18:	2887883a 	add	r3,r5,r2
  10cd1c:	00c0020e 	bge	zero,r3,10cd28 <__ulp+0x18>
  10cd20:	0005883a 	mov	r2,zero
  10cd24:	f800283a 	ret
  10cd28:	00c7c83a 	sub	r3,zero,r3
  10cd2c:	1807d53a 	srai	r3,r3,20
  10cd30:	008004c4 	movi	r2,19
  10cd34:	10c00b0e 	bge	r2,r3,10cd64 <__ulp+0x54>
  10cd38:	18bffb04 	addi	r2,r3,-20
  10cd3c:	01000784 	movi	r4,30
  10cd40:	0007883a 	mov	r3,zero
  10cd44:	20800516 	blt	r4,r2,10cd5c <__ulp+0x4c>
  10cd48:	010007c4 	movi	r4,31
  10cd4c:	2089c83a 	sub	r4,r4,r2
  10cd50:	00800044 	movi	r2,1
  10cd54:	1104983a 	sll	r2,r2,r4
  10cd58:	f800283a 	ret
  10cd5c:	00800044 	movi	r2,1
  10cd60:	f800283a 	ret
  10cd64:	01400234 	movhi	r5,8
  10cd68:	28c7d83a 	sra	r3,r5,r3
  10cd6c:	0005883a 	mov	r2,zero
  10cd70:	f800283a 	ret

0010cd74 <__b2d>:
  10cd74:	defffa04 	addi	sp,sp,-24
  10cd78:	dc000015 	stw	r16,0(sp)
  10cd7c:	24000417 	ldw	r16,16(r4)
  10cd80:	dc400115 	stw	r17,4(sp)
  10cd84:	24400504 	addi	r17,r4,20
  10cd88:	8421883a 	add	r16,r16,r16
  10cd8c:	8421883a 	add	r16,r16,r16
  10cd90:	8c21883a 	add	r16,r17,r16
  10cd94:	dc800215 	stw	r18,8(sp)
  10cd98:	84bfff17 	ldw	r18,-4(r16)
  10cd9c:	dd000415 	stw	r20,16(sp)
  10cda0:	dcc00315 	stw	r19,12(sp)
  10cda4:	9009883a 	mov	r4,r18
  10cda8:	2829883a 	mov	r20,r5
  10cdac:	dfc00515 	stw	ra,20(sp)
  10cdb0:	010c44c0 	call	10c44c <__hi0bits>
  10cdb4:	00c00804 	movi	r3,32
  10cdb8:	1889c83a 	sub	r4,r3,r2
  10cdbc:	a1000015 	stw	r4,0(r20)
  10cdc0:	01000284 	movi	r4,10
  10cdc4:	84ffff04 	addi	r19,r16,-4
  10cdc8:	20801216 	blt	r4,r2,10ce14 <__b2d+0xa0>
  10cdcc:	018002c4 	movi	r6,11
  10cdd0:	308dc83a 	sub	r6,r6,r2
  10cdd4:	9186d83a 	srl	r3,r18,r6
  10cdd8:	18cffc34 	orhi	r3,r3,16368
  10cddc:	8cc0212e 	bgeu	r17,r19,10ce64 <__b2d+0xf0>
  10cde0:	813ffe17 	ldw	r4,-8(r16)
  10cde4:	218cd83a 	srl	r6,r4,r6
  10cde8:	10800544 	addi	r2,r2,21
  10cdec:	9084983a 	sll	r2,r18,r2
  10cdf0:	1184b03a 	or	r2,r2,r6
  10cdf4:	dfc00517 	ldw	ra,20(sp)
  10cdf8:	dd000417 	ldw	r20,16(sp)
  10cdfc:	dcc00317 	ldw	r19,12(sp)
  10ce00:	dc800217 	ldw	r18,8(sp)
  10ce04:	dc400117 	ldw	r17,4(sp)
  10ce08:	dc000017 	ldw	r16,0(sp)
  10ce0c:	dec00604 	addi	sp,sp,24
  10ce10:	f800283a 	ret
  10ce14:	8cc00f2e 	bgeu	r17,r19,10ce54 <__b2d+0xe0>
  10ce18:	117ffd44 	addi	r5,r2,-11
  10ce1c:	80bffe17 	ldw	r2,-8(r16)
  10ce20:	28000e26 	beq	r5,zero,10ce5c <__b2d+0xe8>
  10ce24:	1949c83a 	sub	r4,r3,r5
  10ce28:	9164983a 	sll	r18,r18,r5
  10ce2c:	1106d83a 	srl	r3,r2,r4
  10ce30:	81bffe04 	addi	r6,r16,-8
  10ce34:	948ffc34 	orhi	r18,r18,16368
  10ce38:	90c6b03a 	or	r3,r18,r3
  10ce3c:	89800e2e 	bgeu	r17,r6,10ce78 <__b2d+0x104>
  10ce40:	81bffd17 	ldw	r6,-12(r16)
  10ce44:	1144983a 	sll	r2,r2,r5
  10ce48:	310ad83a 	srl	r5,r6,r4
  10ce4c:	2884b03a 	or	r2,r5,r2
  10ce50:	003fe806 	br	10cdf4 <__alt_data_end+0xfffccdf4>
  10ce54:	10bffd44 	addi	r2,r2,-11
  10ce58:	1000041e 	bne	r2,zero,10ce6c <__b2d+0xf8>
  10ce5c:	90cffc34 	orhi	r3,r18,16368
  10ce60:	003fe406 	br	10cdf4 <__alt_data_end+0xfffccdf4>
  10ce64:	000d883a 	mov	r6,zero
  10ce68:	003fdf06 	br	10cde8 <__alt_data_end+0xfffccde8>
  10ce6c:	90a4983a 	sll	r18,r18,r2
  10ce70:	0005883a 	mov	r2,zero
  10ce74:	003ff906 	br	10ce5c <__alt_data_end+0xfffcce5c>
  10ce78:	1144983a 	sll	r2,r2,r5
  10ce7c:	003fdd06 	br	10cdf4 <__alt_data_end+0xfffccdf4>

0010ce80 <__d2b>:
  10ce80:	defff804 	addi	sp,sp,-32
  10ce84:	dc000215 	stw	r16,8(sp)
  10ce88:	3021883a 	mov	r16,r6
  10ce8c:	dc400315 	stw	r17,12(sp)
  10ce90:	8022907a 	slli	r17,r16,1
  10ce94:	dd000615 	stw	r20,24(sp)
  10ce98:	2829883a 	mov	r20,r5
  10ce9c:	01400044 	movi	r5,1
  10cea0:	dcc00515 	stw	r19,20(sp)
  10cea4:	dc800415 	stw	r18,16(sp)
  10cea8:	dfc00715 	stw	ra,28(sp)
  10ceac:	3825883a 	mov	r18,r7
  10ceb0:	8822d57a 	srli	r17,r17,21
  10ceb4:	010c1300 	call	10c130 <_Balloc>
  10ceb8:	1027883a 	mov	r19,r2
  10cebc:	00800434 	movhi	r2,16
  10cec0:	10bfffc4 	addi	r2,r2,-1
  10cec4:	808c703a 	and	r6,r16,r2
  10cec8:	88000126 	beq	r17,zero,10ced0 <__d2b+0x50>
  10cecc:	31800434 	orhi	r6,r6,16
  10ced0:	d9800015 	stw	r6,0(sp)
  10ced4:	a0002426 	beq	r20,zero,10cf68 <__d2b+0xe8>
  10ced8:	d9000104 	addi	r4,sp,4
  10cedc:	dd000115 	stw	r20,4(sp)
  10cee0:	010c4b40 	call	10c4b4 <__lo0bits>
  10cee4:	d8c00017 	ldw	r3,0(sp)
  10cee8:	10002f1e 	bne	r2,zero,10cfa8 <__d2b+0x128>
  10ceec:	d9000117 	ldw	r4,4(sp)
  10cef0:	99000515 	stw	r4,20(r19)
  10cef4:	1821003a 	cmpeq	r16,r3,zero
  10cef8:	01000084 	movi	r4,2
  10cefc:	2421c83a 	sub	r16,r4,r16
  10cf00:	98c00615 	stw	r3,24(r19)
  10cf04:	9c000415 	stw	r16,16(r19)
  10cf08:	88001f1e 	bne	r17,zero,10cf88 <__d2b+0x108>
  10cf0c:	10bef384 	addi	r2,r2,-1074
  10cf10:	90800015 	stw	r2,0(r18)
  10cf14:	00900034 	movhi	r2,16384
  10cf18:	10bfffc4 	addi	r2,r2,-1
  10cf1c:	8085883a 	add	r2,r16,r2
  10cf20:	1085883a 	add	r2,r2,r2
  10cf24:	1085883a 	add	r2,r2,r2
  10cf28:	9885883a 	add	r2,r19,r2
  10cf2c:	11000517 	ldw	r4,20(r2)
  10cf30:	8020917a 	slli	r16,r16,5
  10cf34:	010c44c0 	call	10c44c <__hi0bits>
  10cf38:	d8c00817 	ldw	r3,32(sp)
  10cf3c:	8085c83a 	sub	r2,r16,r2
  10cf40:	18800015 	stw	r2,0(r3)
  10cf44:	9805883a 	mov	r2,r19
  10cf48:	dfc00717 	ldw	ra,28(sp)
  10cf4c:	dd000617 	ldw	r20,24(sp)
  10cf50:	dcc00517 	ldw	r19,20(sp)
  10cf54:	dc800417 	ldw	r18,16(sp)
  10cf58:	dc400317 	ldw	r17,12(sp)
  10cf5c:	dc000217 	ldw	r16,8(sp)
  10cf60:	dec00804 	addi	sp,sp,32
  10cf64:	f800283a 	ret
  10cf68:	d809883a 	mov	r4,sp
  10cf6c:	010c4b40 	call	10c4b4 <__lo0bits>
  10cf70:	d8c00017 	ldw	r3,0(sp)
  10cf74:	04000044 	movi	r16,1
  10cf78:	9c000415 	stw	r16,16(r19)
  10cf7c:	98c00515 	stw	r3,20(r19)
  10cf80:	10800804 	addi	r2,r2,32
  10cf84:	883fe126 	beq	r17,zero,10cf0c <__alt_data_end+0xfffccf0c>
  10cf88:	00c00d44 	movi	r3,53
  10cf8c:	8c7ef344 	addi	r17,r17,-1075
  10cf90:	88a3883a 	add	r17,r17,r2
  10cf94:	1885c83a 	sub	r2,r3,r2
  10cf98:	d8c00817 	ldw	r3,32(sp)
  10cf9c:	94400015 	stw	r17,0(r18)
  10cfa0:	18800015 	stw	r2,0(r3)
  10cfa4:	003fe706 	br	10cf44 <__alt_data_end+0xfffccf44>
  10cfa8:	01000804 	movi	r4,32
  10cfac:	2089c83a 	sub	r4,r4,r2
  10cfb0:	1908983a 	sll	r4,r3,r4
  10cfb4:	d9400117 	ldw	r5,4(sp)
  10cfb8:	1886d83a 	srl	r3,r3,r2
  10cfbc:	2148b03a 	or	r4,r4,r5
  10cfc0:	99000515 	stw	r4,20(r19)
  10cfc4:	d8c00015 	stw	r3,0(sp)
  10cfc8:	003fca06 	br	10cef4 <__alt_data_end+0xfffccef4>

0010cfcc <__ratio>:
  10cfcc:	defff904 	addi	sp,sp,-28
  10cfd0:	dc400315 	stw	r17,12(sp)
  10cfd4:	2823883a 	mov	r17,r5
  10cfd8:	d9400104 	addi	r5,sp,4
  10cfdc:	dfc00615 	stw	ra,24(sp)
  10cfe0:	dcc00515 	stw	r19,20(sp)
  10cfe4:	dc800415 	stw	r18,16(sp)
  10cfe8:	2027883a 	mov	r19,r4
  10cfec:	dc000215 	stw	r16,8(sp)
  10cff0:	010cd740 	call	10cd74 <__b2d>
  10cff4:	d80b883a 	mov	r5,sp
  10cff8:	8809883a 	mov	r4,r17
  10cffc:	1025883a 	mov	r18,r2
  10d000:	1821883a 	mov	r16,r3
  10d004:	010cd740 	call	10cd74 <__b2d>
  10d008:	8a000417 	ldw	r8,16(r17)
  10d00c:	99000417 	ldw	r4,16(r19)
  10d010:	d9400117 	ldw	r5,4(sp)
  10d014:	2209c83a 	sub	r4,r4,r8
  10d018:	2010917a 	slli	r8,r4,5
  10d01c:	d9000017 	ldw	r4,0(sp)
  10d020:	2909c83a 	sub	r4,r5,r4
  10d024:	4109883a 	add	r4,r8,r4
  10d028:	01000e0e 	bge	zero,r4,10d064 <__ratio+0x98>
  10d02c:	2008953a 	slli	r4,r4,20
  10d030:	2421883a 	add	r16,r4,r16
  10d034:	100d883a 	mov	r6,r2
  10d038:	180f883a 	mov	r7,r3
  10d03c:	9009883a 	mov	r4,r18
  10d040:	800b883a 	mov	r5,r16
  10d044:	0116b440 	call	116b44 <__divdf3>
  10d048:	dfc00617 	ldw	ra,24(sp)
  10d04c:	dcc00517 	ldw	r19,20(sp)
  10d050:	dc800417 	ldw	r18,16(sp)
  10d054:	dc400317 	ldw	r17,12(sp)
  10d058:	dc000217 	ldw	r16,8(sp)
  10d05c:	dec00704 	addi	sp,sp,28
  10d060:	f800283a 	ret
  10d064:	2008953a 	slli	r4,r4,20
  10d068:	1907c83a 	sub	r3,r3,r4
  10d06c:	003ff106 	br	10d034 <__alt_data_end+0xfffcd034>

0010d070 <_mprec_log10>:
  10d070:	defffe04 	addi	sp,sp,-8
  10d074:	dc000015 	stw	r16,0(sp)
  10d078:	dfc00115 	stw	ra,4(sp)
  10d07c:	008005c4 	movi	r2,23
  10d080:	2021883a 	mov	r16,r4
  10d084:	11000d0e 	bge	r2,r4,10d0bc <_mprec_log10+0x4c>
  10d088:	0005883a 	mov	r2,zero
  10d08c:	00cffc34 	movhi	r3,16368
  10d090:	843fffc4 	addi	r16,r16,-1
  10d094:	000d883a 	mov	r6,zero
  10d098:	01d00934 	movhi	r7,16420
  10d09c:	1009883a 	mov	r4,r2
  10d0a0:	180b883a 	mov	r5,r3
  10d0a4:	011776c0 	call	11776c <__muldf3>
  10d0a8:	803ff91e 	bne	r16,zero,10d090 <__alt_data_end+0xfffcd090>
  10d0ac:	dfc00117 	ldw	ra,4(sp)
  10d0b0:	dc000017 	ldw	r16,0(sp)
  10d0b4:	dec00204 	addi	sp,sp,8
  10d0b8:	f800283a 	ret
  10d0bc:	202090fa 	slli	r16,r4,3
  10d0c0:	008004b4 	movhi	r2,18
  10d0c4:	108f2c04 	addi	r2,r2,15536
  10d0c8:	1421883a 	add	r16,r2,r16
  10d0cc:	80800017 	ldw	r2,0(r16)
  10d0d0:	80c00117 	ldw	r3,4(r16)
  10d0d4:	dfc00117 	ldw	ra,4(sp)
  10d0d8:	dc000017 	ldw	r16,0(sp)
  10d0dc:	dec00204 	addi	sp,sp,8
  10d0e0:	f800283a 	ret

0010d0e4 <__copybits>:
  10d0e4:	297fffc4 	addi	r5,r5,-1
  10d0e8:	280fd17a 	srai	r7,r5,5
  10d0ec:	30c00417 	ldw	r3,16(r6)
  10d0f0:	30800504 	addi	r2,r6,20
  10d0f4:	39c00044 	addi	r7,r7,1
  10d0f8:	18c7883a 	add	r3,r3,r3
  10d0fc:	39cf883a 	add	r7,r7,r7
  10d100:	18c7883a 	add	r3,r3,r3
  10d104:	39cf883a 	add	r7,r7,r7
  10d108:	10c7883a 	add	r3,r2,r3
  10d10c:	21cf883a 	add	r7,r4,r7
  10d110:	10c00d2e 	bgeu	r2,r3,10d148 <__copybits+0x64>
  10d114:	200b883a 	mov	r5,r4
  10d118:	12000017 	ldw	r8,0(r2)
  10d11c:	29400104 	addi	r5,r5,4
  10d120:	10800104 	addi	r2,r2,4
  10d124:	2a3fff15 	stw	r8,-4(r5)
  10d128:	10fffb36 	bltu	r2,r3,10d118 <__alt_data_end+0xfffcd118>
  10d12c:	1985c83a 	sub	r2,r3,r6
  10d130:	10bffac4 	addi	r2,r2,-21
  10d134:	1004d0ba 	srli	r2,r2,2
  10d138:	10800044 	addi	r2,r2,1
  10d13c:	1085883a 	add	r2,r2,r2
  10d140:	1085883a 	add	r2,r2,r2
  10d144:	2089883a 	add	r4,r4,r2
  10d148:	21c0032e 	bgeu	r4,r7,10d158 <__copybits+0x74>
  10d14c:	20000015 	stw	zero,0(r4)
  10d150:	21000104 	addi	r4,r4,4
  10d154:	21fffd36 	bltu	r4,r7,10d14c <__alt_data_end+0xfffcd14c>
  10d158:	f800283a 	ret

0010d15c <__any_on>:
  10d15c:	20c00417 	ldw	r3,16(r4)
  10d160:	2805d17a 	srai	r2,r5,5
  10d164:	21000504 	addi	r4,r4,20
  10d168:	18800d0e 	bge	r3,r2,10d1a0 <__any_on+0x44>
  10d16c:	18c7883a 	add	r3,r3,r3
  10d170:	18c7883a 	add	r3,r3,r3
  10d174:	20c7883a 	add	r3,r4,r3
  10d178:	20c0192e 	bgeu	r4,r3,10d1e0 <__any_on+0x84>
  10d17c:	18bfff17 	ldw	r2,-4(r3)
  10d180:	18ffff04 	addi	r3,r3,-4
  10d184:	1000041e 	bne	r2,zero,10d198 <__any_on+0x3c>
  10d188:	20c0142e 	bgeu	r4,r3,10d1dc <__any_on+0x80>
  10d18c:	18ffff04 	addi	r3,r3,-4
  10d190:	19400017 	ldw	r5,0(r3)
  10d194:	283ffc26 	beq	r5,zero,10d188 <__alt_data_end+0xfffcd188>
  10d198:	00800044 	movi	r2,1
  10d19c:	f800283a 	ret
  10d1a0:	10c00a0e 	bge	r2,r3,10d1cc <__any_on+0x70>
  10d1a4:	1085883a 	add	r2,r2,r2
  10d1a8:	1085883a 	add	r2,r2,r2
  10d1ac:	294007cc 	andi	r5,r5,31
  10d1b0:	2087883a 	add	r3,r4,r2
  10d1b4:	283ff026 	beq	r5,zero,10d178 <__alt_data_end+0xfffcd178>
  10d1b8:	19800017 	ldw	r6,0(r3)
  10d1bc:	3144d83a 	srl	r2,r6,r5
  10d1c0:	114a983a 	sll	r5,r2,r5
  10d1c4:	317ff41e 	bne	r6,r5,10d198 <__alt_data_end+0xfffcd198>
  10d1c8:	003feb06 	br	10d178 <__alt_data_end+0xfffcd178>
  10d1cc:	1085883a 	add	r2,r2,r2
  10d1d0:	1085883a 	add	r2,r2,r2
  10d1d4:	2087883a 	add	r3,r4,r2
  10d1d8:	003fe706 	br	10d178 <__alt_data_end+0xfffcd178>
  10d1dc:	f800283a 	ret
  10d1e0:	0005883a 	mov	r2,zero
  10d1e4:	f800283a 	ret

0010d1e8 <_read_r>:
  10d1e8:	defffd04 	addi	sp,sp,-12
  10d1ec:	2805883a 	mov	r2,r5
  10d1f0:	dc000015 	stw	r16,0(sp)
  10d1f4:	040004b4 	movhi	r16,18
  10d1f8:	dc400115 	stw	r17,4(sp)
  10d1fc:	300b883a 	mov	r5,r6
  10d200:	841e5904 	addi	r16,r16,31076
  10d204:	2023883a 	mov	r17,r4
  10d208:	380d883a 	mov	r6,r7
  10d20c:	1009883a 	mov	r4,r2
  10d210:	dfc00215 	stw	ra,8(sp)
  10d214:	80000015 	stw	zero,0(r16)
  10d218:	01192fc0 	call	1192fc <read>
  10d21c:	00ffffc4 	movi	r3,-1
  10d220:	10c00526 	beq	r2,r3,10d238 <_read_r+0x50>
  10d224:	dfc00217 	ldw	ra,8(sp)
  10d228:	dc400117 	ldw	r17,4(sp)
  10d22c:	dc000017 	ldw	r16,0(sp)
  10d230:	dec00304 	addi	sp,sp,12
  10d234:	f800283a 	ret
  10d238:	80c00017 	ldw	r3,0(r16)
  10d23c:	183ff926 	beq	r3,zero,10d224 <__alt_data_end+0xfffcd224>
  10d240:	88c00015 	stw	r3,0(r17)
  10d244:	003ff706 	br	10d224 <__alt_data_end+0xfffcd224>

0010d248 <_realloc_r>:
  10d248:	defff604 	addi	sp,sp,-40
  10d24c:	dc800215 	stw	r18,8(sp)
  10d250:	dfc00915 	stw	ra,36(sp)
  10d254:	df000815 	stw	fp,32(sp)
  10d258:	ddc00715 	stw	r23,28(sp)
  10d25c:	dd800615 	stw	r22,24(sp)
  10d260:	dd400515 	stw	r21,20(sp)
  10d264:	dd000415 	stw	r20,16(sp)
  10d268:	dcc00315 	stw	r19,12(sp)
  10d26c:	dc400115 	stw	r17,4(sp)
  10d270:	dc000015 	stw	r16,0(sp)
  10d274:	3025883a 	mov	r18,r6
  10d278:	2800b726 	beq	r5,zero,10d558 <_realloc_r+0x310>
  10d27c:	282b883a 	mov	r21,r5
  10d280:	2029883a 	mov	r20,r4
  10d284:	01197940 	call	119794 <__malloc_lock>
  10d288:	a8bfff17 	ldw	r2,-4(r21)
  10d28c:	043fff04 	movi	r16,-4
  10d290:	90c002c4 	addi	r3,r18,11
  10d294:	01000584 	movi	r4,22
  10d298:	acfffe04 	addi	r19,r21,-8
  10d29c:	1420703a 	and	r16,r2,r16
  10d2a0:	20c0332e 	bgeu	r4,r3,10d370 <_realloc_r+0x128>
  10d2a4:	047ffe04 	movi	r17,-8
  10d2a8:	1c62703a 	and	r17,r3,r17
  10d2ac:	8807883a 	mov	r3,r17
  10d2b0:	88005816 	blt	r17,zero,10d414 <_realloc_r+0x1cc>
  10d2b4:	8c805736 	bltu	r17,r18,10d414 <_realloc_r+0x1cc>
  10d2b8:	80c0300e 	bge	r16,r3,10d37c <_realloc_r+0x134>
  10d2bc:	070004b4 	movhi	fp,18
  10d2c0:	e7118704 	addi	fp,fp,17948
  10d2c4:	e1c00217 	ldw	r7,8(fp)
  10d2c8:	9c09883a 	add	r4,r19,r16
  10d2cc:	22000117 	ldw	r8,4(r4)
  10d2d0:	21c06326 	beq	r4,r7,10d460 <_realloc_r+0x218>
  10d2d4:	017fff84 	movi	r5,-2
  10d2d8:	414a703a 	and	r5,r8,r5
  10d2dc:	214b883a 	add	r5,r4,r5
  10d2e0:	29800117 	ldw	r6,4(r5)
  10d2e4:	3180004c 	andi	r6,r6,1
  10d2e8:	30003f26 	beq	r6,zero,10d3e8 <_realloc_r+0x1a0>
  10d2ec:	1080004c 	andi	r2,r2,1
  10d2f0:	10008326 	beq	r2,zero,10d500 <_realloc_r+0x2b8>
  10d2f4:	900b883a 	mov	r5,r18
  10d2f8:	a009883a 	mov	r4,r20
  10d2fc:	0101e280 	call	101e28 <_malloc_r>
  10d300:	1025883a 	mov	r18,r2
  10d304:	10011e26 	beq	r2,zero,10d780 <_realloc_r+0x538>
  10d308:	a93fff17 	ldw	r4,-4(r21)
  10d30c:	10fffe04 	addi	r3,r2,-8
  10d310:	00bfff84 	movi	r2,-2
  10d314:	2084703a 	and	r2,r4,r2
  10d318:	9885883a 	add	r2,r19,r2
  10d31c:	1880ee26 	beq	r3,r2,10d6d8 <_realloc_r+0x490>
  10d320:	81bfff04 	addi	r6,r16,-4
  10d324:	00800904 	movi	r2,36
  10d328:	1180b836 	bltu	r2,r6,10d60c <_realloc_r+0x3c4>
  10d32c:	00c004c4 	movi	r3,19
  10d330:	19809636 	bltu	r3,r6,10d58c <_realloc_r+0x344>
  10d334:	9005883a 	mov	r2,r18
  10d338:	a807883a 	mov	r3,r21
  10d33c:	19000017 	ldw	r4,0(r3)
  10d340:	11000015 	stw	r4,0(r2)
  10d344:	19000117 	ldw	r4,4(r3)
  10d348:	11000115 	stw	r4,4(r2)
  10d34c:	18c00217 	ldw	r3,8(r3)
  10d350:	10c00215 	stw	r3,8(r2)
  10d354:	a80b883a 	mov	r5,r21
  10d358:	a009883a 	mov	r4,r20
  10d35c:	010b2b00 	call	10b2b0 <_free_r>
  10d360:	a009883a 	mov	r4,r20
  10d364:	01198b40 	call	1198b4 <__malloc_unlock>
  10d368:	9005883a 	mov	r2,r18
  10d36c:	00001206 	br	10d3b8 <_realloc_r+0x170>
  10d370:	00c00404 	movi	r3,16
  10d374:	1823883a 	mov	r17,r3
  10d378:	003fce06 	br	10d2b4 <__alt_data_end+0xfffcd2b4>
  10d37c:	a825883a 	mov	r18,r21
  10d380:	8445c83a 	sub	r2,r16,r17
  10d384:	00c003c4 	movi	r3,15
  10d388:	18802636 	bltu	r3,r2,10d424 <_realloc_r+0x1dc>
  10d38c:	99800117 	ldw	r6,4(r19)
  10d390:	9c07883a 	add	r3,r19,r16
  10d394:	3180004c 	andi	r6,r6,1
  10d398:	3420b03a 	or	r16,r6,r16
  10d39c:	9c000115 	stw	r16,4(r19)
  10d3a0:	18800117 	ldw	r2,4(r3)
  10d3a4:	10800054 	ori	r2,r2,1
  10d3a8:	18800115 	stw	r2,4(r3)
  10d3ac:	a009883a 	mov	r4,r20
  10d3b0:	01198b40 	call	1198b4 <__malloc_unlock>
  10d3b4:	9005883a 	mov	r2,r18
  10d3b8:	dfc00917 	ldw	ra,36(sp)
  10d3bc:	df000817 	ldw	fp,32(sp)
  10d3c0:	ddc00717 	ldw	r23,28(sp)
  10d3c4:	dd800617 	ldw	r22,24(sp)
  10d3c8:	dd400517 	ldw	r21,20(sp)
  10d3cc:	dd000417 	ldw	r20,16(sp)
  10d3d0:	dcc00317 	ldw	r19,12(sp)
  10d3d4:	dc800217 	ldw	r18,8(sp)
  10d3d8:	dc400117 	ldw	r17,4(sp)
  10d3dc:	dc000017 	ldw	r16,0(sp)
  10d3e0:	dec00a04 	addi	sp,sp,40
  10d3e4:	f800283a 	ret
  10d3e8:	017fff04 	movi	r5,-4
  10d3ec:	414a703a 	and	r5,r8,r5
  10d3f0:	814d883a 	add	r6,r16,r5
  10d3f4:	30c01f16 	blt	r6,r3,10d474 <_realloc_r+0x22c>
  10d3f8:	20800317 	ldw	r2,12(r4)
  10d3fc:	20c00217 	ldw	r3,8(r4)
  10d400:	a825883a 	mov	r18,r21
  10d404:	3021883a 	mov	r16,r6
  10d408:	18800315 	stw	r2,12(r3)
  10d40c:	10c00215 	stw	r3,8(r2)
  10d410:	003fdb06 	br	10d380 <__alt_data_end+0xfffcd380>
  10d414:	00800304 	movi	r2,12
  10d418:	a0800015 	stw	r2,0(r20)
  10d41c:	0005883a 	mov	r2,zero
  10d420:	003fe506 	br	10d3b8 <__alt_data_end+0xfffcd3b8>
  10d424:	98c00117 	ldw	r3,4(r19)
  10d428:	9c4b883a 	add	r5,r19,r17
  10d42c:	11000054 	ori	r4,r2,1
  10d430:	18c0004c 	andi	r3,r3,1
  10d434:	1c62b03a 	or	r17,r3,r17
  10d438:	9c400115 	stw	r17,4(r19)
  10d43c:	29000115 	stw	r4,4(r5)
  10d440:	2885883a 	add	r2,r5,r2
  10d444:	10c00117 	ldw	r3,4(r2)
  10d448:	29400204 	addi	r5,r5,8
  10d44c:	a009883a 	mov	r4,r20
  10d450:	18c00054 	ori	r3,r3,1
  10d454:	10c00115 	stw	r3,4(r2)
  10d458:	010b2b00 	call	10b2b0 <_free_r>
  10d45c:	003fd306 	br	10d3ac <__alt_data_end+0xfffcd3ac>
  10d460:	017fff04 	movi	r5,-4
  10d464:	414a703a 	and	r5,r8,r5
  10d468:	89800404 	addi	r6,r17,16
  10d46c:	8151883a 	add	r8,r16,r5
  10d470:	4180590e 	bge	r8,r6,10d5d8 <_realloc_r+0x390>
  10d474:	1080004c 	andi	r2,r2,1
  10d478:	103f9e1e 	bne	r2,zero,10d2f4 <__alt_data_end+0xfffcd2f4>
  10d47c:	adbffe17 	ldw	r22,-8(r21)
  10d480:	00bfff04 	movi	r2,-4
  10d484:	9dadc83a 	sub	r22,r19,r22
  10d488:	b1800117 	ldw	r6,4(r22)
  10d48c:	3084703a 	and	r2,r6,r2
  10d490:	20002026 	beq	r4,zero,10d514 <_realloc_r+0x2cc>
  10d494:	80af883a 	add	r23,r16,r2
  10d498:	b96f883a 	add	r23,r23,r5
  10d49c:	21c05f26 	beq	r4,r7,10d61c <_realloc_r+0x3d4>
  10d4a0:	b8c01c16 	blt	r23,r3,10d514 <_realloc_r+0x2cc>
  10d4a4:	20800317 	ldw	r2,12(r4)
  10d4a8:	20c00217 	ldw	r3,8(r4)
  10d4ac:	81bfff04 	addi	r6,r16,-4
  10d4b0:	01000904 	movi	r4,36
  10d4b4:	18800315 	stw	r2,12(r3)
  10d4b8:	10c00215 	stw	r3,8(r2)
  10d4bc:	b0c00217 	ldw	r3,8(r22)
  10d4c0:	b0800317 	ldw	r2,12(r22)
  10d4c4:	b4800204 	addi	r18,r22,8
  10d4c8:	18800315 	stw	r2,12(r3)
  10d4cc:	10c00215 	stw	r3,8(r2)
  10d4d0:	21801b36 	bltu	r4,r6,10d540 <_realloc_r+0x2f8>
  10d4d4:	008004c4 	movi	r2,19
  10d4d8:	1180352e 	bgeu	r2,r6,10d5b0 <_realloc_r+0x368>
  10d4dc:	a8800017 	ldw	r2,0(r21)
  10d4e0:	b0800215 	stw	r2,8(r22)
  10d4e4:	a8800117 	ldw	r2,4(r21)
  10d4e8:	b0800315 	stw	r2,12(r22)
  10d4ec:	008006c4 	movi	r2,27
  10d4f0:	11807f36 	bltu	r2,r6,10d6f0 <_realloc_r+0x4a8>
  10d4f4:	b0800404 	addi	r2,r22,16
  10d4f8:	ad400204 	addi	r21,r21,8
  10d4fc:	00002d06 	br	10d5b4 <_realloc_r+0x36c>
  10d500:	adbffe17 	ldw	r22,-8(r21)
  10d504:	00bfff04 	movi	r2,-4
  10d508:	9dadc83a 	sub	r22,r19,r22
  10d50c:	b1000117 	ldw	r4,4(r22)
  10d510:	2084703a 	and	r2,r4,r2
  10d514:	b03f7726 	beq	r22,zero,10d2f4 <__alt_data_end+0xfffcd2f4>
  10d518:	80af883a 	add	r23,r16,r2
  10d51c:	b8ff7516 	blt	r23,r3,10d2f4 <__alt_data_end+0xfffcd2f4>
  10d520:	b0800317 	ldw	r2,12(r22)
  10d524:	b0c00217 	ldw	r3,8(r22)
  10d528:	81bfff04 	addi	r6,r16,-4
  10d52c:	01000904 	movi	r4,36
  10d530:	18800315 	stw	r2,12(r3)
  10d534:	10c00215 	stw	r3,8(r2)
  10d538:	b4800204 	addi	r18,r22,8
  10d53c:	21bfe52e 	bgeu	r4,r6,10d4d4 <__alt_data_end+0xfffcd4d4>
  10d540:	a80b883a 	mov	r5,r21
  10d544:	9009883a 	mov	r4,r18
  10d548:	010bfd40 	call	10bfd4 <memmove>
  10d54c:	b821883a 	mov	r16,r23
  10d550:	b027883a 	mov	r19,r22
  10d554:	003f8a06 	br	10d380 <__alt_data_end+0xfffcd380>
  10d558:	300b883a 	mov	r5,r6
  10d55c:	dfc00917 	ldw	ra,36(sp)
  10d560:	df000817 	ldw	fp,32(sp)
  10d564:	ddc00717 	ldw	r23,28(sp)
  10d568:	dd800617 	ldw	r22,24(sp)
  10d56c:	dd400517 	ldw	r21,20(sp)
  10d570:	dd000417 	ldw	r20,16(sp)
  10d574:	dcc00317 	ldw	r19,12(sp)
  10d578:	dc800217 	ldw	r18,8(sp)
  10d57c:	dc400117 	ldw	r17,4(sp)
  10d580:	dc000017 	ldw	r16,0(sp)
  10d584:	dec00a04 	addi	sp,sp,40
  10d588:	0101e281 	jmpi	101e28 <_malloc_r>
  10d58c:	a8c00017 	ldw	r3,0(r21)
  10d590:	90c00015 	stw	r3,0(r18)
  10d594:	a8c00117 	ldw	r3,4(r21)
  10d598:	90c00115 	stw	r3,4(r18)
  10d59c:	00c006c4 	movi	r3,27
  10d5a0:	19804536 	bltu	r3,r6,10d6b8 <_realloc_r+0x470>
  10d5a4:	90800204 	addi	r2,r18,8
  10d5a8:	a8c00204 	addi	r3,r21,8
  10d5ac:	003f6306 	br	10d33c <__alt_data_end+0xfffcd33c>
  10d5b0:	9005883a 	mov	r2,r18
  10d5b4:	a8c00017 	ldw	r3,0(r21)
  10d5b8:	b821883a 	mov	r16,r23
  10d5bc:	b027883a 	mov	r19,r22
  10d5c0:	10c00015 	stw	r3,0(r2)
  10d5c4:	a8c00117 	ldw	r3,4(r21)
  10d5c8:	10c00115 	stw	r3,4(r2)
  10d5cc:	a8c00217 	ldw	r3,8(r21)
  10d5d0:	10c00215 	stw	r3,8(r2)
  10d5d4:	003f6a06 	br	10d380 <__alt_data_end+0xfffcd380>
  10d5d8:	9c67883a 	add	r19,r19,r17
  10d5dc:	4445c83a 	sub	r2,r8,r17
  10d5e0:	e4c00215 	stw	r19,8(fp)
  10d5e4:	10800054 	ori	r2,r2,1
  10d5e8:	98800115 	stw	r2,4(r19)
  10d5ec:	a8bfff17 	ldw	r2,-4(r21)
  10d5f0:	a009883a 	mov	r4,r20
  10d5f4:	1080004c 	andi	r2,r2,1
  10d5f8:	1462b03a 	or	r17,r2,r17
  10d5fc:	ac7fff15 	stw	r17,-4(r21)
  10d600:	01198b40 	call	1198b4 <__malloc_unlock>
  10d604:	a805883a 	mov	r2,r21
  10d608:	003f6b06 	br	10d3b8 <__alt_data_end+0xfffcd3b8>
  10d60c:	a80b883a 	mov	r5,r21
  10d610:	9009883a 	mov	r4,r18
  10d614:	010bfd40 	call	10bfd4 <memmove>
  10d618:	003f4e06 	br	10d354 <__alt_data_end+0xfffcd354>
  10d61c:	89000404 	addi	r4,r17,16
  10d620:	b93fbc16 	blt	r23,r4,10d514 <__alt_data_end+0xfffcd514>
  10d624:	b0800317 	ldw	r2,12(r22)
  10d628:	b0c00217 	ldw	r3,8(r22)
  10d62c:	81bfff04 	addi	r6,r16,-4
  10d630:	01000904 	movi	r4,36
  10d634:	18800315 	stw	r2,12(r3)
  10d638:	10c00215 	stw	r3,8(r2)
  10d63c:	b4800204 	addi	r18,r22,8
  10d640:	21804336 	bltu	r4,r6,10d750 <_realloc_r+0x508>
  10d644:	008004c4 	movi	r2,19
  10d648:	11803f2e 	bgeu	r2,r6,10d748 <_realloc_r+0x500>
  10d64c:	a8800017 	ldw	r2,0(r21)
  10d650:	b0800215 	stw	r2,8(r22)
  10d654:	a8800117 	ldw	r2,4(r21)
  10d658:	b0800315 	stw	r2,12(r22)
  10d65c:	008006c4 	movi	r2,27
  10d660:	11803f36 	bltu	r2,r6,10d760 <_realloc_r+0x518>
  10d664:	b0800404 	addi	r2,r22,16
  10d668:	ad400204 	addi	r21,r21,8
  10d66c:	a8c00017 	ldw	r3,0(r21)
  10d670:	10c00015 	stw	r3,0(r2)
  10d674:	a8c00117 	ldw	r3,4(r21)
  10d678:	10c00115 	stw	r3,4(r2)
  10d67c:	a8c00217 	ldw	r3,8(r21)
  10d680:	10c00215 	stw	r3,8(r2)
  10d684:	b447883a 	add	r3,r22,r17
  10d688:	bc45c83a 	sub	r2,r23,r17
  10d68c:	e0c00215 	stw	r3,8(fp)
  10d690:	10800054 	ori	r2,r2,1
  10d694:	18800115 	stw	r2,4(r3)
  10d698:	b0800117 	ldw	r2,4(r22)
  10d69c:	a009883a 	mov	r4,r20
  10d6a0:	1080004c 	andi	r2,r2,1
  10d6a4:	1462b03a 	or	r17,r2,r17
  10d6a8:	b4400115 	stw	r17,4(r22)
  10d6ac:	01198b40 	call	1198b4 <__malloc_unlock>
  10d6b0:	9005883a 	mov	r2,r18
  10d6b4:	003f4006 	br	10d3b8 <__alt_data_end+0xfffcd3b8>
  10d6b8:	a8c00217 	ldw	r3,8(r21)
  10d6bc:	90c00215 	stw	r3,8(r18)
  10d6c0:	a8c00317 	ldw	r3,12(r21)
  10d6c4:	90c00315 	stw	r3,12(r18)
  10d6c8:	30801126 	beq	r6,r2,10d710 <_realloc_r+0x4c8>
  10d6cc:	90800404 	addi	r2,r18,16
  10d6d0:	a8c00404 	addi	r3,r21,16
  10d6d4:	003f1906 	br	10d33c <__alt_data_end+0xfffcd33c>
  10d6d8:	90ffff17 	ldw	r3,-4(r18)
  10d6dc:	00bfff04 	movi	r2,-4
  10d6e0:	a825883a 	mov	r18,r21
  10d6e4:	1884703a 	and	r2,r3,r2
  10d6e8:	80a1883a 	add	r16,r16,r2
  10d6ec:	003f2406 	br	10d380 <__alt_data_end+0xfffcd380>
  10d6f0:	a8800217 	ldw	r2,8(r21)
  10d6f4:	b0800415 	stw	r2,16(r22)
  10d6f8:	a8800317 	ldw	r2,12(r21)
  10d6fc:	b0800515 	stw	r2,20(r22)
  10d700:	31000a26 	beq	r6,r4,10d72c <_realloc_r+0x4e4>
  10d704:	b0800604 	addi	r2,r22,24
  10d708:	ad400404 	addi	r21,r21,16
  10d70c:	003fa906 	br	10d5b4 <__alt_data_end+0xfffcd5b4>
  10d710:	a9000417 	ldw	r4,16(r21)
  10d714:	90800604 	addi	r2,r18,24
  10d718:	a8c00604 	addi	r3,r21,24
  10d71c:	91000415 	stw	r4,16(r18)
  10d720:	a9000517 	ldw	r4,20(r21)
  10d724:	91000515 	stw	r4,20(r18)
  10d728:	003f0406 	br	10d33c <__alt_data_end+0xfffcd33c>
  10d72c:	a8c00417 	ldw	r3,16(r21)
  10d730:	ad400604 	addi	r21,r21,24
  10d734:	b0800804 	addi	r2,r22,32
  10d738:	b0c00615 	stw	r3,24(r22)
  10d73c:	a8ffff17 	ldw	r3,-4(r21)
  10d740:	b0c00715 	stw	r3,28(r22)
  10d744:	003f9b06 	br	10d5b4 <__alt_data_end+0xfffcd5b4>
  10d748:	9005883a 	mov	r2,r18
  10d74c:	003fc706 	br	10d66c <__alt_data_end+0xfffcd66c>
  10d750:	a80b883a 	mov	r5,r21
  10d754:	9009883a 	mov	r4,r18
  10d758:	010bfd40 	call	10bfd4 <memmove>
  10d75c:	003fc906 	br	10d684 <__alt_data_end+0xfffcd684>
  10d760:	a8800217 	ldw	r2,8(r21)
  10d764:	b0800415 	stw	r2,16(r22)
  10d768:	a8800317 	ldw	r2,12(r21)
  10d76c:	b0800515 	stw	r2,20(r22)
  10d770:	31000726 	beq	r6,r4,10d790 <_realloc_r+0x548>
  10d774:	b0800604 	addi	r2,r22,24
  10d778:	ad400404 	addi	r21,r21,16
  10d77c:	003fbb06 	br	10d66c <__alt_data_end+0xfffcd66c>
  10d780:	a009883a 	mov	r4,r20
  10d784:	01198b40 	call	1198b4 <__malloc_unlock>
  10d788:	0005883a 	mov	r2,zero
  10d78c:	003f0a06 	br	10d3b8 <__alt_data_end+0xfffcd3b8>
  10d790:	a8c00417 	ldw	r3,16(r21)
  10d794:	ad400604 	addi	r21,r21,24
  10d798:	b0800804 	addi	r2,r22,32
  10d79c:	b0c00615 	stw	r3,24(r22)
  10d7a0:	a8ffff17 	ldw	r3,-4(r21)
  10d7a4:	b0c00715 	stw	r3,28(r22)
  10d7a8:	003fb006 	br	10d66c <__alt_data_end+0xfffcd66c>

0010d7ac <__fpclassifyd>:
  10d7ac:	00a00034 	movhi	r2,32768
  10d7b0:	10bfffc4 	addi	r2,r2,-1
  10d7b4:	2884703a 	and	r2,r5,r2
  10d7b8:	10000726 	beq	r2,zero,10d7d8 <__fpclassifyd+0x2c>
  10d7bc:	00fffc34 	movhi	r3,65520
  10d7c0:	019ff834 	movhi	r6,32736
  10d7c4:	28c7883a 	add	r3,r5,r3
  10d7c8:	31bfffc4 	addi	r6,r6,-1
  10d7cc:	30c00536 	bltu	r6,r3,10d7e4 <__fpclassifyd+0x38>
  10d7d0:	00800104 	movi	r2,4
  10d7d4:	f800283a 	ret
  10d7d8:	2000021e 	bne	r4,zero,10d7e4 <__fpclassifyd+0x38>
  10d7dc:	00800084 	movi	r2,2
  10d7e0:	f800283a 	ret
  10d7e4:	00dffc34 	movhi	r3,32752
  10d7e8:	019ff834 	movhi	r6,32736
  10d7ec:	28cb883a 	add	r5,r5,r3
  10d7f0:	31bfffc4 	addi	r6,r6,-1
  10d7f4:	317ff62e 	bgeu	r6,r5,10d7d0 <__alt_data_end+0xfffcd7d0>
  10d7f8:	01400434 	movhi	r5,16
  10d7fc:	297fffc4 	addi	r5,r5,-1
  10d800:	28800236 	bltu	r5,r2,10d80c <__fpclassifyd+0x60>
  10d804:	008000c4 	movi	r2,3
  10d808:	f800283a 	ret
  10d80c:	10c00226 	beq	r2,r3,10d818 <__fpclassifyd+0x6c>
  10d810:	0005883a 	mov	r2,zero
  10d814:	f800283a 	ret
  10d818:	2005003a 	cmpeq	r2,r4,zero
  10d81c:	f800283a 	ret

0010d820 <__sccl>:
  10d820:	2a000003 	ldbu	r8,0(r5)
  10d824:	00801784 	movi	r2,94
  10d828:	40802a26 	beq	r8,r2,10d8d4 <__sccl+0xb4>
  10d82c:	29400044 	addi	r5,r5,1
  10d830:	000f883a 	mov	r7,zero
  10d834:	0013883a 	mov	r9,zero
  10d838:	2007883a 	mov	r3,r4
  10d83c:	21804004 	addi	r6,r4,256
  10d840:	19c00005 	stb	r7,0(r3)
  10d844:	18c00044 	addi	r3,r3,1
  10d848:	19bffd1e 	bne	r3,r6,10d840 <__alt_data_end+0xfffcd840>
  10d84c:	40001126 	beq	r8,zero,10d894 <__sccl+0x74>
  10d850:	00800044 	movi	r2,1
  10d854:	124fc83a 	sub	r7,r2,r9
  10d858:	02800b44 	movi	r10,45
  10d85c:	02c01744 	movi	r11,93
  10d860:	2205883a 	add	r2,r4,r8
  10d864:	11c00005 	stb	r7,0(r2)
  10d868:	28800044 	addi	r2,r5,1
  10d86c:	28c00003 	ldbu	r3,0(r5)
  10d870:	1a800a26 	beq	r3,r10,10d89c <__sccl+0x7c>
  10d874:	1ac00426 	beq	r3,r11,10d888 <__sccl+0x68>
  10d878:	18000426 	beq	r3,zero,10d88c <__sccl+0x6c>
  10d87c:	1811883a 	mov	r8,r3
  10d880:	100b883a 	mov	r5,r2
  10d884:	003ff606 	br	10d860 <__alt_data_end+0xfffcd860>
  10d888:	f800283a 	ret
  10d88c:	2805883a 	mov	r2,r5
  10d890:	f800283a 	ret
  10d894:	28bfffc4 	addi	r2,r5,-1
  10d898:	f800283a 	ret
  10d89c:	12400003 	ldbu	r9,0(r2)
  10d8a0:	4ac01126 	beq	r9,r11,10d8e8 <__sccl+0xc8>
  10d8a4:	4a001016 	blt	r9,r8,10d8e8 <__sccl+0xc8>
  10d8a8:	41800044 	addi	r6,r8,1
  10d8ac:	29400084 	addi	r5,r5,2
  10d8b0:	2187883a 	add	r3,r4,r6
  10d8b4:	00000106 	br	10d8bc <__sccl+0x9c>
  10d8b8:	31800044 	addi	r6,r6,1
  10d8bc:	19c00005 	stb	r7,0(r3)
  10d8c0:	3011883a 	mov	r8,r6
  10d8c4:	18c00044 	addi	r3,r3,1
  10d8c8:	327ffb16 	blt	r6,r9,10d8b8 <__alt_data_end+0xfffcd8b8>
  10d8cc:	10800084 	addi	r2,r2,2
  10d8d0:	003fe606 	br	10d86c <__alt_data_end+0xfffcd86c>
  10d8d4:	2a000043 	ldbu	r8,1(r5)
  10d8d8:	01c00044 	movi	r7,1
  10d8dc:	29400084 	addi	r5,r5,2
  10d8e0:	02400044 	movi	r9,1
  10d8e4:	003fd406 	br	10d838 <__alt_data_end+0xfffcd838>
  10d8e8:	5011883a 	mov	r8,r10
  10d8ec:	003fe406 	br	10d880 <__alt_data_end+0xfffcd880>

0010d8f0 <nanf>:
  10d8f0:	009ff034 	movhi	r2,32704
  10d8f4:	f800283a 	ret

0010d8f8 <sulp>:
  10d8f8:	defffd04 	addi	sp,sp,-12
  10d8fc:	dc400115 	stw	r17,4(sp)
  10d900:	3023883a 	mov	r17,r6
  10d904:	dc000015 	stw	r16,0(sp)
  10d908:	dfc00215 	stw	ra,8(sp)
  10d90c:	2821883a 	mov	r16,r5
  10d910:	010cd100 	call	10cd10 <__ulp>
  10d914:	88000c26 	beq	r17,zero,10d948 <sulp+0x50>
  10d918:	841ffc2c 	andhi	r16,r16,32752
  10d91c:	8020d53a 	srli	r16,r16,20
  10d920:	01c01ac4 	movi	r7,107
  10d924:	3c21c83a 	sub	r16,r7,r16
  10d928:	0400070e 	bge	zero,r16,10d948 <sulp+0x50>
  10d92c:	8020953a 	slli	r16,r16,20
  10d930:	01cffc34 	movhi	r7,16368
  10d934:	000d883a 	mov	r6,zero
  10d938:	81cf883a 	add	r7,r16,r7
  10d93c:	1009883a 	mov	r4,r2
  10d940:	180b883a 	mov	r5,r3
  10d944:	011776c0 	call	11776c <__muldf3>
  10d948:	dfc00217 	ldw	ra,8(sp)
  10d94c:	dc400117 	ldw	r17,4(sp)
  10d950:	dc000017 	ldw	r16,0(sp)
  10d954:	dec00304 	addi	sp,sp,12
  10d958:	f800283a 	ret

0010d95c <_strtod_r>:
  10d95c:	deffe204 	addi	sp,sp,-120
  10d960:	ddc01b15 	stw	r23,108(sp)
  10d964:	dd801a15 	stw	r22,104(sp)
  10d968:	dc401515 	stw	r17,84(sp)
  10d96c:	dfc01d15 	stw	ra,116(sp)
  10d970:	df001c15 	stw	fp,112(sp)
  10d974:	dd401915 	stw	r21,100(sp)
  10d978:	dd001815 	stw	r20,96(sp)
  10d97c:	dcc01715 	stw	r19,92(sp)
  10d980:	dc801615 	stw	r18,88(sp)
  10d984:	dc001415 	stw	r16,80(sp)
  10d988:	d8000515 	stw	zero,20(sp)
  10d98c:	d9400615 	stw	r5,24(sp)
  10d990:	2807883a 	mov	r3,r5
  10d994:	1f000003 	ldbu	fp,0(r3)
  10d998:	01c00474 	movhi	r7,17
  10d99c:	2023883a 	mov	r17,r4
  10d9a0:	d9400715 	stw	r5,28(sp)
  10d9a4:	d9800915 	stw	r6,36(sp)
  10d9a8:	01000b44 	movi	r4,45
  10d9ac:	e0803fcc 	andi	r2,fp,255
  10d9b0:	39f67404 	addi	r7,r7,-9776
  10d9b4:	002f883a 	mov	r23,zero
  10d9b8:	002d883a 	mov	r22,zero
  10d9bc:	20809c36 	bltu	r4,r2,10dc30 <_strtod_r+0x2d4>
  10d9c0:	100490ba 	slli	r2,r2,2
  10d9c4:	11c5883a 	add	r2,r2,r7
  10d9c8:	10800017 	ldw	r2,0(r2)
  10d9cc:	1000683a 	jmp	r2
  10d9d0:	0010da90 	cmplti	zero,zero,17258
  10d9d4:	0010dc30 	cmpltui	zero,zero,17264
  10d9d8:	0010dc30 	cmpltui	zero,zero,17264
  10d9dc:	0010dc30 	cmpltui	zero,zero,17264
  10d9e0:	0010dc30 	cmpltui	zero,zero,17264
  10d9e4:	0010dc30 	cmpltui	zero,zero,17264
  10d9e8:	0010dc30 	cmpltui	zero,zero,17264
  10d9ec:	0010dc30 	cmpltui	zero,zero,17264
  10d9f0:	0010dc30 	cmpltui	zero,zero,17264
  10d9f4:	0010dc1c 	xori	zero,zero,17264
  10d9f8:	0010dc1c 	xori	zero,zero,17264
  10d9fc:	0010dc1c 	xori	zero,zero,17264
  10da00:	0010dc1c 	xori	zero,zero,17264
  10da04:	0010dc1c 	xori	zero,zero,17264
  10da08:	0010dc30 	cmpltui	zero,zero,17264
  10da0c:	0010dc30 	cmpltui	zero,zero,17264
  10da10:	0010dc30 	cmpltui	zero,zero,17264
  10da14:	0010dc30 	cmpltui	zero,zero,17264
  10da18:	0010dc30 	cmpltui	zero,zero,17264
  10da1c:	0010dc30 	cmpltui	zero,zero,17264
  10da20:	0010dc30 	cmpltui	zero,zero,17264
  10da24:	0010dc30 	cmpltui	zero,zero,17264
  10da28:	0010dc30 	cmpltui	zero,zero,17264
  10da2c:	0010dc30 	cmpltui	zero,zero,17264
  10da30:	0010dc30 	cmpltui	zero,zero,17264
  10da34:	0010dc30 	cmpltui	zero,zero,17264
  10da38:	0010dc30 	cmpltui	zero,zero,17264
  10da3c:	0010dc30 	cmpltui	zero,zero,17264
  10da40:	0010dc30 	cmpltui	zero,zero,17264
  10da44:	0010dc30 	cmpltui	zero,zero,17264
  10da48:	0010dc30 	cmpltui	zero,zero,17264
  10da4c:	0010dc30 	cmpltui	zero,zero,17264
  10da50:	0010dc1c 	xori	zero,zero,17264
  10da54:	0010dc30 	cmpltui	zero,zero,17264
  10da58:	0010dc30 	cmpltui	zero,zero,17264
  10da5c:	0010dc30 	cmpltui	zero,zero,17264
  10da60:	0010dc30 	cmpltui	zero,zero,17264
  10da64:	0010dc30 	cmpltui	zero,zero,17264
  10da68:	0010dc30 	cmpltui	zero,zero,17264
  10da6c:	0010dc30 	cmpltui	zero,zero,17264
  10da70:	0010dc30 	cmpltui	zero,zero,17264
  10da74:	0010dc30 	cmpltui	zero,zero,17264
  10da78:	0010dc30 	cmpltui	zero,zero,17264
  10da7c:	0010daf4 	movhi	zero,17259
  10da80:	0010dc30 	cmpltui	zero,zero,17264
  10da84:	0010dc10 	cmplti	zero,zero,17264
  10da88:	00801244 	movi	r2,73
  10da8c:	b8844726 	beq	r23,r2,10ebac <_strtod_r+0x1250>
  10da90:	d9000917 	ldw	r4,36(sp)
  10da94:	d8000815 	stw	zero,32(sp)
  10da98:	0039883a 	mov	fp,zero
  10da9c:	20000726 	beq	r4,zero,10dabc <_strtod_r+0x160>
  10daa0:	dc800717 	ldw	r18,28(sp)
  10daa4:	d8000a15 	stw	zero,40(sp)
  10daa8:	d9400917 	ldw	r5,36(sp)
  10daac:	2c800015 	stw	r18,0(r5)
  10dab0:	d8800a17 	ldw	r2,40(sp)
  10dab4:	10000126 	beq	r2,zero,10dabc <_strtod_r+0x160>
  10dab8:	e720003c 	xorhi	fp,fp,32768
  10dabc:	d8800817 	ldw	r2,32(sp)
  10dac0:	e007883a 	mov	r3,fp
  10dac4:	dfc01d17 	ldw	ra,116(sp)
  10dac8:	df001c17 	ldw	fp,112(sp)
  10dacc:	ddc01b17 	ldw	r23,108(sp)
  10dad0:	dd801a17 	ldw	r22,104(sp)
  10dad4:	dd401917 	ldw	r21,100(sp)
  10dad8:	dd001817 	ldw	r20,96(sp)
  10dadc:	dcc01717 	ldw	r19,92(sp)
  10dae0:	dc801617 	ldw	r18,88(sp)
  10dae4:	dc401517 	ldw	r17,84(sp)
  10dae8:	dc001417 	ldw	r16,80(sp)
  10daec:	dec01e04 	addi	sp,sp,120
  10daf0:	f800283a 	ret
  10daf4:	d8000a15 	stw	zero,40(sp)
  10daf8:	1c000044 	addi	r16,r3,1
  10dafc:	dc000615 	stw	r16,24(sp)
  10db00:	1f000043 	ldbu	fp,1(r3)
  10db04:	e0803fcc 	andi	r2,fp,255
  10db08:	1080201c 	xori	r2,r2,128
  10db0c:	10bfe004 	addi	r2,r2,-128
  10db10:	103fdf26 	beq	r2,zero,10da90 <__alt_data_end+0xfffcda90>
  10db14:	e1003fcc 	andi	r4,fp,255
  10db18:	2100201c 	xori	r4,r4,128
  10db1c:	213fe004 	addi	r4,r4,-128
  10db20:	00800c04 	movi	r2,48
  10db24:	2080d426 	beq	r4,r2,10de78 <_strtod_r+0x51c>
  10db28:	dc000815 	stw	r16,32(sp)
  10db2c:	d8000c15 	stw	zero,48(sp)
  10db30:	e0bff404 	addi	r2,fp,-48
  10db34:	10803fcc 	andi	r2,r2,255
  10db38:	05400244 	movi	r21,9
  10db3c:	a8837836 	bltu	r21,r2,10e920 <_strtod_r+0xfc4>
  10db40:	dc800817 	ldw	r18,32(sp)
  10db44:	0029883a 	mov	r20,zero
  10db48:	0027883a 	mov	r19,zero
  10db4c:	0021883a 	mov	r16,zero
  10db50:	05800204 	movi	r22,8
  10db54:	b4003916 	blt	r22,r16,10dc3c <_strtod_r+0x2e0>
  10db58:	e7003fcc 	andi	fp,fp,255
  10db5c:	9809883a 	mov	r4,r19
  10db60:	01400284 	movi	r5,10
  10db64:	e700201c 	xori	fp,fp,128
  10db68:	01160740 	call	116074 <__mulsi3>
  10db6c:	e73fe004 	addi	fp,fp,-128
  10db70:	1705883a 	add	r2,r2,fp
  10db74:	14fff404 	addi	r19,r2,-48
  10db78:	94800044 	addi	r18,r18,1
  10db7c:	dc800615 	stw	r18,24(sp)
  10db80:	97000003 	ldbu	fp,0(r18)
  10db84:	84000044 	addi	r16,r16,1
  10db88:	e0bff404 	addi	r2,fp,-48
  10db8c:	10803fcc 	andi	r2,r2,255
  10db90:	a8bff02e 	bgeu	r21,r2,10db54 <__alt_data_end+0xfffcdb54>
  10db94:	e5c03fcc 	andi	r23,fp,255
  10db98:	bdc0201c 	xori	r23,r23,128
  10db9c:	bdffe004 	addi	r23,r23,-128
  10dba0:	8809883a 	mov	r4,r17
  10dba4:	010bb640 	call	10bb64 <_localeconv_r>
  10dba8:	8809883a 	mov	r4,r17
  10dbac:	15400017 	ldw	r21,0(r2)
  10dbb0:	010bb640 	call	10bb64 <_localeconv_r>
  10dbb4:	11000017 	ldw	r4,0(r2)
  10dbb8:	01031f00 	call	1031f0 <strlen>
  10dbbc:	100d883a 	mov	r6,r2
  10dbc0:	a80b883a 	mov	r5,r21
  10dbc4:	9009883a 	mov	r4,r18
  10dbc8:	0114d700 	call	114d70 <strncmp>
  10dbcc:	1000bd26 	beq	r2,zero,10dec4 <_strtod_r+0x568>
  10dbd0:	8039883a 	mov	fp,r16
  10dbd4:	002d883a 	mov	r22,zero
  10dbd8:	d8000b15 	stw	zero,44(sp)
  10dbdc:	0025883a 	mov	r18,zero
  10dbe0:	00801944 	movi	r2,101
  10dbe4:	b8806026 	beq	r23,r2,10dd68 <_strtod_r+0x40c>
  10dbe8:	00801144 	movi	r2,69
  10dbec:	b8805e26 	beq	r23,r2,10dd68 <_strtod_r+0x40c>
  10dbf0:	0009883a 	mov	r4,zero
  10dbf4:	e0001a1e 	bne	fp,zero,10dc60 <_strtod_r+0x304>
  10dbf8:	b000cd26 	beq	r22,zero,10df30 <_strtod_r+0x5d4>
  10dbfc:	d8000815 	stw	zero,32(sp)
  10dc00:	d9000917 	ldw	r4,36(sp)
  10dc04:	203faa26 	beq	r4,zero,10dab0 <__alt_data_end+0xfffcdab0>
  10dc08:	dc800617 	ldw	r18,24(sp)
  10dc0c:	003fa606 	br	10daa8 <__alt_data_end+0xfffcdaa8>
  10dc10:	00800044 	movi	r2,1
  10dc14:	d8800a15 	stw	r2,40(sp)
  10dc18:	003fb706 	br	10daf8 <__alt_data_end+0xfffcdaf8>
  10dc1c:	18c00044 	addi	r3,r3,1
  10dc20:	d8c00615 	stw	r3,24(sp)
  10dc24:	1f000003 	ldbu	fp,0(r3)
  10dc28:	e0803fcc 	andi	r2,fp,255
  10dc2c:	20bf642e 	bgeu	r4,r2,10d9c0 <__alt_data_end+0xfffcd9c0>
  10dc30:	1821883a 	mov	r16,r3
  10dc34:	d8000a15 	stw	zero,40(sp)
  10dc38:	003fb606 	br	10db14 <__alt_data_end+0xfffcdb14>
  10dc3c:	e7003fcc 	andi	fp,fp,255
  10dc40:	a009883a 	mov	r4,r20
  10dc44:	01400284 	movi	r5,10
  10dc48:	e700201c 	xori	fp,fp,128
  10dc4c:	01160740 	call	116074 <__mulsi3>
  10dc50:	e73fe004 	addi	fp,fp,-128
  10dc54:	1705883a 	add	r2,r2,fp
  10dc58:	153ff404 	addi	r20,r2,-48
  10dc5c:	003fc606 	br	10db78 <__alt_data_end+0xfffcdb78>
  10dc60:	d8c00b17 	ldw	r3,44(sp)
  10dc64:	20ebc83a 	sub	r21,r4,r3
  10dc68:	8000011e 	bne	r16,zero,10dc70 <_strtod_r+0x314>
  10dc6c:	e021883a 	mov	r16,fp
  10dc70:	00800404 	movi	r2,16
  10dc74:	e025883a 	mov	r18,fp
  10dc78:	1700010e 	bge	r2,fp,10dc80 <_strtod_r+0x324>
  10dc7c:	1025883a 	mov	r18,r2
  10dc80:	9809883a 	mov	r4,r19
  10dc84:	0118a300 	call	118a30 <__floatunsidf>
  10dc88:	102f883a 	mov	r23,r2
  10dc8c:	00800244 	movi	r2,9
  10dc90:	182d883a 	mov	r22,r3
  10dc94:	1480150e 	bge	r2,r18,10dcec <_strtod_r+0x390>
  10dc98:	90bffdc4 	addi	r2,r18,-9
  10dc9c:	100490fa 	slli	r2,r2,3
  10dca0:	180b883a 	mov	r5,r3
  10dca4:	00c004b4 	movhi	r3,18
  10dca8:	18cf2c04 	addi	r3,r3,15536
  10dcac:	1885883a 	add	r2,r3,r2
  10dcb0:	11800017 	ldw	r6,0(r2)
  10dcb4:	11c00117 	ldw	r7,4(r2)
  10dcb8:	b809883a 	mov	r4,r23
  10dcbc:	011776c0 	call	11776c <__muldf3>
  10dcc0:	a009883a 	mov	r4,r20
  10dcc4:	102f883a 	mov	r23,r2
  10dcc8:	182d883a 	mov	r22,r3
  10dccc:	0118a300 	call	118a30 <__floatunsidf>
  10dcd0:	b809883a 	mov	r4,r23
  10dcd4:	b00b883a 	mov	r5,r22
  10dcd8:	100d883a 	mov	r6,r2
  10dcdc:	180f883a 	mov	r7,r3
  10dce0:	01162980 	call	116298 <__adddf3>
  10dce4:	102f883a 	mov	r23,r2
  10dce8:	182d883a 	mov	r22,r3
  10dcec:	008003c4 	movi	r2,15
  10dcf0:	17009416 	blt	r2,fp,10df44 <_strtod_r+0x5e8>
  10dcf4:	a8001926 	beq	r21,zero,10dd5c <_strtod_r+0x400>
  10dcf8:	05439c0e 	bge	zero,r21,10eb6c <_strtod_r+0x1210>
  10dcfc:	00c00584 	movi	r3,22
  10dd00:	1d430f16 	blt	r3,r21,10e940 <_strtod_r+0xfe4>
  10dd04:	a82a90fa 	slli	r21,r21,3
  10dd08:	008004b4 	movhi	r2,18
  10dd0c:	108f2c04 	addi	r2,r2,15536
  10dd10:	1545883a 	add	r2,r2,r21
  10dd14:	11000017 	ldw	r4,0(r2)
  10dd18:	11400117 	ldw	r5,4(r2)
  10dd1c:	b80d883a 	mov	r6,r23
  10dd20:	b00f883a 	mov	r7,r22
  10dd24:	011776c0 	call	11776c <__muldf3>
  10dd28:	d8800815 	stw	r2,32(sp)
  10dd2c:	1839883a 	mov	fp,r3
  10dd30:	003fb306 	br	10dc00 <__alt_data_end+0xfffcdc00>
  10dd34:	014004b4 	movhi	r5,18
  10dd38:	294f6204 	addi	r5,r5,15752
  10dd3c:	d9800204 	addi	r6,sp,8
  10dd40:	d9000604 	addi	r4,sp,24
  10dd44:	0114ac00 	call	114ac0 <__hexnan>
  10dd48:	00c00144 	movi	r3,5
  10dd4c:	10c2161e 	bne	r2,r3,10e5a8 <_strtod_r+0xc4c>
  10dd50:	dd800317 	ldw	r22,12(sp)
  10dd54:	ddc00217 	ldw	r23,8(sp)
  10dd58:	b59ffc34 	orhi	r22,r22,32752
  10dd5c:	ddc00815 	stw	r23,32(sp)
  10dd60:	b039883a 	mov	fp,r22
  10dd64:	003fa606 	br	10dc00 <__alt_data_end+0xfffcdc00>
  10dd68:	e001a926 	beq	fp,zero,10e410 <_strtod_r+0xab4>
  10dd6c:	d8c00617 	ldw	r3,24(sp)
  10dd70:	18800044 	addi	r2,r3,1
  10dd74:	d8800615 	stw	r2,24(sp)
  10dd78:	d8c00715 	stw	r3,28(sp)
  10dd7c:	18c00047 	ldb	r3,1(r3)
  10dd80:	00800ac4 	movi	r2,43
  10dd84:	1881e526 	beq	r3,r2,10e51c <_strtod_r+0xbc0>
  10dd88:	00800b44 	movi	r2,45
  10dd8c:	1881dc26 	beq	r3,r2,10e500 <_strtod_r+0xba4>
  10dd90:	182f883a 	mov	r23,r3
  10dd94:	d8000e15 	stw	zero,56(sp)
  10dd98:	b8bff404 	addi	r2,r23,-48
  10dd9c:	01000244 	movi	r4,9
  10dda0:	2081ab36 	bltu	r4,r2,10e450 <_strtod_r+0xaf4>
  10dda4:	00800c04 	movi	r2,48
  10dda8:	b880071e 	bne	r23,r2,10ddc8 <_strtod_r+0x46c>
  10ddac:	d8800617 	ldw	r2,24(sp)
  10ddb0:	b809883a 	mov	r4,r23
  10ddb4:	10800044 	addi	r2,r2,1
  10ddb8:	d8800615 	stw	r2,24(sp)
  10ddbc:	15c00007 	ldb	r23,0(r2)
  10ddc0:	10800044 	addi	r2,r2,1
  10ddc4:	b93ffc26 	beq	r23,r4,10ddb8 <__alt_data_end+0xfffcddb8>
  10ddc8:	b8bff3c4 	addi	r2,r23,-49
  10ddcc:	01000204 	movi	r4,8
  10ddd0:	20bf8736 	bltu	r4,r2,10dbf0 <__alt_data_end+0xfffcdbf0>
  10ddd4:	d8c00617 	ldw	r3,24(sp)
  10ddd8:	b93ff404 	addi	r4,r23,-48
  10dddc:	01400244 	movi	r5,9
  10dde0:	1ac00044 	addi	r11,r3,1
  10dde4:	dac00615 	stw	r11,24(sp)
  10dde8:	d8c00d15 	stw	r3,52(sp)
  10ddec:	18c00043 	ldbu	r3,1(r3)
  10ddf0:	18bff404 	addi	r2,r3,-48
  10ddf4:	1dc03fcc 	andi	r23,r3,255
  10ddf8:	bdc0201c 	xori	r23,r23,128
  10ddfc:	10803fcc 	andi	r2,r2,255
  10de00:	bdffe004 	addi	r23,r23,-128
  10de04:	28801136 	bltu	r5,r2,10de4c <_strtod_r+0x4f0>
  10de08:	d8c00d17 	ldw	r3,52(sp)
  10de0c:	1d400084 	addi	r21,r3,2
  10de10:	01400284 	movi	r5,10
  10de14:	01160740 	call	116074 <__mulsi3>
  10de18:	dd400615 	stw	r21,24(sp)
  10de1c:	a9400003 	ldbu	r5,0(r21)
  10de20:	15c5883a 	add	r2,r2,r23
  10de24:	a817883a 	mov	r11,r21
  10de28:	28fff404 	addi	r3,r5,-48
  10de2c:	2dc03fcc 	andi	r23,r5,255
  10de30:	bdc0201c 	xori	r23,r23,128
  10de34:	18c03fcc 	andi	r3,r3,255
  10de38:	01400244 	movi	r5,9
  10de3c:	113ff404 	addi	r4,r2,-48
  10de40:	bdffe004 	addi	r23,r23,-128
  10de44:	ad400044 	addi	r21,r21,1
  10de48:	28fff12e 	bgeu	r5,r3,10de10 <__alt_data_end+0xfffcde10>
  10de4c:	d8c00d17 	ldw	r3,52(sp)
  10de50:	00800204 	movi	r2,8
  10de54:	58d7c83a 	sub	r11,r11,r3
  10de58:	12c2ab16 	blt	r2,r11,10e908 <_strtod_r+0xfac>
  10de5c:	009387c4 	movi	r2,19999
  10de60:	1100010e 	bge	r2,r4,10de68 <_strtod_r+0x50c>
  10de64:	1009883a 	mov	r4,r2
  10de68:	d8c00e17 	ldw	r3,56(sp)
  10de6c:	183f6126 	beq	r3,zero,10dbf4 <__alt_data_end+0xfffcdbf4>
  10de70:	0109c83a 	sub	r4,zero,r4
  10de74:	003f5f06 	br	10dbf4 <__alt_data_end+0xfffcdbf4>
  10de78:	80800047 	ldb	r2,1(r16)
  10de7c:	00c01604 	movi	r3,88
  10de80:	10c20026 	beq	r2,r3,10e684 <_strtod_r+0xd28>
  10de84:	00c01e04 	movi	r3,120
  10de88:	10c1fe26 	beq	r2,r3,10e684 <_strtod_r+0xd28>
  10de8c:	80800044 	addi	r2,r16,1
  10de90:	1021883a 	mov	r16,r2
  10de94:	d8800615 	stw	r2,24(sp)
  10de98:	10800044 	addi	r2,r2,1
  10de9c:	173fffc3 	ldbu	fp,-1(r2)
  10dea0:	e0c03fcc 	andi	r3,fp,255
  10dea4:	18c0201c 	xori	r3,r3,128
  10dea8:	18ffe004 	addi	r3,r3,-128
  10deac:	193ff826 	beq	r3,r4,10de90 <__alt_data_end+0xfffcde90>
  10deb0:	18002126 	beq	r3,zero,10df38 <_strtod_r+0x5dc>
  10deb4:	00c00044 	movi	r3,1
  10deb8:	dc000815 	stw	r16,32(sp)
  10debc:	d8c00c15 	stw	r3,48(sp)
  10dec0:	003f1b06 	br	10db30 <__alt_data_end+0xfffcdb30>
  10dec4:	8809883a 	mov	r4,r17
  10dec8:	010bb640 	call	10bb64 <_localeconv_r>
  10decc:	11000017 	ldw	r4,0(r2)
  10ded0:	01031f00 	call	1031f0 <strlen>
  10ded4:	d8c00617 	ldw	r3,24(sp)
  10ded8:	1885883a 	add	r2,r3,r2
  10dedc:	d8800615 	stw	r2,24(sp)
  10dee0:	15c00007 	ldb	r23,0(r2)
  10dee4:	8001771e 	bne	r16,zero,10e4c4 <_strtod_r+0xb68>
  10dee8:	01000c04 	movi	r4,48
  10deec:	b903581e 	bne	r23,r4,10ec50 <_strtod_r+0x12f4>
  10def0:	11000044 	addi	r4,r2,1
  10def4:	b80b883a 	mov	r5,r23
  10def8:	d9000615 	stw	r4,24(sp)
  10defc:	25c00007 	ldb	r23,0(r4)
  10df00:	20adc83a 	sub	r22,r4,r2
  10df04:	21000044 	addi	r4,r4,1
  10df08:	b97ffb26 	beq	r23,r5,10def8 <__alt_data_end+0xfffcdef8>
  10df0c:	b8bff3c4 	addi	r2,r23,-49
  10df10:	01000204 	movi	r4,8
  10df14:	2083002e 	bgeu	r4,r2,10eb18 <_strtod_r+0x11bc>
  10df18:	00801944 	movi	r2,101
  10df1c:	b8813a26 	beq	r23,r2,10e408 <_strtod_r+0xaac>
  10df20:	0039883a 	mov	fp,zero
  10df24:	d8000b15 	stw	zero,44(sp)
  10df28:	04800044 	movi	r18,1
  10df2c:	003f2e06 	br	10dbe8 <__alt_data_end+0xfffcdbe8>
  10df30:	d8c00c17 	ldw	r3,48(sp)
  10df34:	18017d26 	beq	r3,zero,10e52c <_strtod_r+0xbd0>
  10df38:	d8000815 	stw	zero,32(sp)
  10df3c:	0039883a 	mov	fp,zero
  10df40:	003f2f06 	br	10dc00 <__alt_data_end+0xfffcdc00>
  10df44:	e4a5c83a 	sub	r18,fp,r18
  10df48:	9565883a 	add	r18,r18,r21
  10df4c:	0482370e 	bge	zero,r18,10e82c <_strtod_r+0xed0>
  10df50:	908003cc 	andi	r2,r18,15
  10df54:	10000b26 	beq	r2,zero,10df84 <_strtod_r+0x628>
  10df58:	100490fa 	slli	r2,r2,3
  10df5c:	00c004b4 	movhi	r3,18
  10df60:	18cf2c04 	addi	r3,r3,15536
  10df64:	1885883a 	add	r2,r3,r2
  10df68:	11000017 	ldw	r4,0(r2)
  10df6c:	11400117 	ldw	r5,4(r2)
  10df70:	b80d883a 	mov	r6,r23
  10df74:	b00f883a 	mov	r7,r22
  10df78:	011776c0 	call	11776c <__muldf3>
  10df7c:	102f883a 	mov	r23,r2
  10df80:	182d883a 	mov	r22,r3
  10df84:	053ffc04 	movi	r20,-16
  10df88:	9524703a 	and	r18,r18,r20
  10df8c:	90003826 	beq	r18,zero,10e070 <_strtod_r+0x714>
  10df90:	00804d04 	movi	r2,308
  10df94:	1481eb16 	blt	r2,r18,10e744 <_strtod_r+0xde8>
  10df98:	9029d13a 	srai	r20,r18,4
  10df9c:	02c00044 	movi	r11,1
  10dfa0:	5d03900e 	bge	r11,r20,10ede4 <_strtod_r+0x1488>
  10dfa4:	010004b4 	movhi	r4,18
  10dfa8:	210f2204 	addi	r4,r4,15496
  10dfac:	2011883a 	mov	r8,r4
  10dfb0:	0025883a 	mov	r18,zero
  10dfb4:	880b883a 	mov	r5,r17
  10dfb8:	d9000715 	stw	r4,28(sp)
  10dfbc:	dc000b15 	stw	r16,44(sp)
  10dfc0:	9023883a 	mov	r17,r18
  10dfc4:	b805883a 	mov	r2,r23
  10dfc8:	b007883a 	mov	r3,r22
  10dfcc:	0009883a 	mov	r4,zero
  10dfd0:	4021883a 	mov	r16,r8
  10dfd4:	2825883a 	mov	r18,r5
  10dfd8:	a180004c 	andi	r6,r20,1
  10dfdc:	30000826 	beq	r6,zero,10e000 <_strtod_r+0x6a4>
  10dfe0:	81800017 	ldw	r6,0(r16)
  10dfe4:	81c00117 	ldw	r7,4(r16)
  10dfe8:	1009883a 	mov	r4,r2
  10dfec:	180b883a 	mov	r5,r3
  10dff0:	dac01315 	stw	r11,76(sp)
  10dff4:	011776c0 	call	11776c <__muldf3>
  10dff8:	dac01317 	ldw	r11,76(sp)
  10dffc:	01000044 	movi	r4,1
  10e000:	a029d07a 	srai	r20,r20,1
  10e004:	8c400044 	addi	r17,r17,1
  10e008:	84000204 	addi	r16,r16,8
  10e00c:	a2fff21e 	bne	r20,r11,10dfd8 <__alt_data_end+0xfffcdfd8>
  10e010:	900b883a 	mov	r5,r18
  10e014:	21003fcc 	andi	r4,r4,255
  10e018:	8825883a 	mov	r18,r17
  10e01c:	dc000b17 	ldw	r16,44(sp)
  10e020:	2823883a 	mov	r17,r5
  10e024:	2003c01e 	bne	r4,zero,10ef28 <_strtod_r+0x15cc>
  10e028:	901490fa 	slli	r10,r18,3
  10e02c:	d8800717 	ldw	r2,28(sp)
  10e030:	01ff2c34 	movhi	r7,64688
  10e034:	b80d883a 	mov	r6,r23
  10e038:	12a5883a 	add	r18,r2,r10
  10e03c:	91000017 	ldw	r4,0(r18)
  10e040:	91400117 	ldw	r5,4(r18)
  10e044:	b1cf883a 	add	r7,r22,r7
  10e048:	011776c0 	call	11776c <__muldf3>
  10e04c:	102f883a 	mov	r23,r2
  10e050:	011f2834 	movhi	r4,31904
  10e054:	189ffc2c 	andhi	r2,r3,32752
  10e058:	2081ba36 	bltu	r4,r2,10e744 <_strtod_r+0xde8>
  10e05c:	011f2434 	movhi	r4,31888
  10e060:	20834a2e 	bgeu	r4,r2,10ed8c <_strtod_r+0x1430>
  10e064:	059ffc34 	movhi	r22,32752
  10e068:	b5bfffc4 	addi	r22,r22,-1
  10e06c:	05ffffc4 	movi	r23,-1
  10e070:	d8000715 	stw	zero,28(sp)
  10e074:	d9400817 	ldw	r5,32(sp)
  10e078:	dcc00015 	stw	r19,0(sp)
  10e07c:	e00f883a 	mov	r7,fp
  10e080:	800d883a 	mov	r6,r16
  10e084:	8809883a 	mov	r4,r17
  10e088:	010c3480 	call	10c348 <__s2b>
  10e08c:	d8800b15 	stw	r2,44(sp)
  10e090:	1001ac26 	beq	r2,zero,10e744 <_strtod_r+0xde8>
  10e094:	a807d7fa 	srai	r3,r21,31
  10e098:	0545c83a 	sub	r2,zero,r21
  10e09c:	dd400c15 	stw	r21,48(sp)
  10e0a0:	1886703a 	and	r3,r3,r2
  10e0a4:	d8c00e15 	stw	r3,56(sp)
  10e0a8:	a8015916 	blt	r21,zero,10e610 <_strtod_r+0xcb4>
  10e0ac:	d9400b17 	ldw	r5,44(sp)
  10e0b0:	0011883a 	mov	r8,zero
  10e0b4:	0021883a 	mov	r16,zero
  10e0b8:	29400304 	addi	r5,r5,12
  10e0bc:	d9401115 	stw	r5,68(sp)
  10e0c0:	4025883a 	mov	r18,r8
  10e0c4:	d8800b17 	ldw	r2,44(sp)
  10e0c8:	8809883a 	mov	r4,r17
  10e0cc:	11400117 	ldw	r5,4(r2)
  10e0d0:	010c1300 	call	10c130 <_Balloc>
  10e0d4:	1027883a 	mov	r19,r2
  10e0d8:	10015226 	beq	r2,zero,10e624 <_strtod_r+0xcc8>
  10e0dc:	d8c00b17 	ldw	r3,44(sp)
  10e0e0:	d9401117 	ldw	r5,68(sp)
  10e0e4:	11000304 	addi	r4,r2,12
  10e0e8:	19800417 	ldw	r6,16(r3)
  10e0ec:	31800084 	addi	r6,r6,2
  10e0f0:	318d883a 	add	r6,r6,r6
  10e0f4:	318d883a 	add	r6,r6,r6
  10e0f8:	01027180 	call	102718 <memcpy>
  10e0fc:	d9000204 	addi	r4,sp,8
  10e100:	d9000015 	stw	r4,0(sp)
  10e104:	d9c00404 	addi	r7,sp,16
  10e108:	b80b883a 	mov	r5,r23
  10e10c:	b00d883a 	mov	r6,r22
  10e110:	8809883a 	mov	r4,r17
  10e114:	010ce800 	call	10ce80 <__d2b>
  10e118:	d8800515 	stw	r2,20(sp)
  10e11c:	ddc00815 	stw	r23,32(sp)
  10e120:	dd801215 	stw	r22,72(sp)
  10e124:	10029f26 	beq	r2,zero,10eba4 <_strtod_r+0x1248>
  10e128:	01400044 	movi	r5,1
  10e12c:	8809883a 	mov	r4,r17
  10e130:	010c5640 	call	10c564 <__i2b>
  10e134:	1021883a 	mov	r16,r2
  10e138:	10013a26 	beq	r2,zero,10e624 <_strtod_r+0xcc8>
  10e13c:	d8800417 	ldw	r2,16(sp)
  10e140:	1000b816 	blt	r2,zero,10e424 <_strtod_r+0xac8>
  10e144:	d9400e17 	ldw	r5,56(sp)
  10e148:	d9000c17 	ldw	r4,48(sp)
  10e14c:	28a9883a 	add	r20,r5,r2
  10e150:	d9400717 	ldw	r5,28(sp)
  10e154:	dd400217 	ldw	r21,8(sp)
  10e158:	073f0084 	movi	fp,-1022
  10e15c:	1147c83a 	sub	r3,r2,r5
  10e160:	1d47883a 	add	r3,r3,r21
  10e164:	00800d84 	movi	r2,54
  10e168:	18ffffc4 	addi	r3,r3,-1
  10e16c:	156bc83a 	sub	r21,r2,r21
  10e170:	1f00950e 	bge	r3,fp,10e3c8 <_strtod_r+0xa6c>
  10e174:	e0f9c83a 	sub	fp,fp,r3
  10e178:	008007c4 	movi	r2,31
  10e17c:	af2bc83a 	sub	r21,r21,fp
  10e180:	1700ac16 	blt	r2,fp,10e434 <_strtod_r+0xad8>
  10e184:	00800044 	movi	r2,1
  10e188:	1704983a 	sll	r2,r2,fp
  10e18c:	d8000d15 	stw	zero,52(sp)
  10e190:	d8800f15 	stw	r2,60(sp)
  10e194:	2547883a 	add	r3,r4,r21
  10e198:	d9000717 	ldw	r4,28(sp)
  10e19c:	a56b883a 	add	r21,r20,r21
  10e1a0:	20f9883a 	add	fp,r4,r3
  10e1a4:	a009883a 	mov	r4,r20
  10e1a8:	ad00010e 	bge	r21,r20,10e1b0 <_strtod_r+0x854>
  10e1ac:	a809883a 	mov	r4,r21
  10e1b0:	e005883a 	mov	r2,fp
  10e1b4:	2700010e 	bge	r4,fp,10e1bc <_strtod_r+0x860>
  10e1b8:	2005883a 	mov	r2,r4
  10e1bc:	0080030e 	bge	zero,r2,10e1cc <_strtod_r+0x870>
  10e1c0:	a8abc83a 	sub	r21,r21,r2
  10e1c4:	e0b9c83a 	sub	fp,fp,r2
  10e1c8:	a0a9c83a 	sub	r20,r20,r2
  10e1cc:	d9400e17 	ldw	r5,56(sp)
  10e1d0:	28001126 	beq	r5,zero,10e218 <_strtod_r+0x8bc>
  10e1d4:	280d883a 	mov	r6,r5
  10e1d8:	8809883a 	mov	r4,r17
  10e1dc:	800b883a 	mov	r5,r16
  10e1e0:	010c82c0 	call	10c82c <__pow5mult>
  10e1e4:	1021883a 	mov	r16,r2
  10e1e8:	10010e26 	beq	r2,zero,10e624 <_strtod_r+0xcc8>
  10e1ec:	d9800517 	ldw	r6,20(sp)
  10e1f0:	100b883a 	mov	r5,r2
  10e1f4:	8809883a 	mov	r4,r17
  10e1f8:	010c5a00 	call	10c5a0 <__multiply>
  10e1fc:	10010926 	beq	r2,zero,10e624 <_strtod_r+0xcc8>
  10e200:	d9400517 	ldw	r5,20(sp)
  10e204:	8809883a 	mov	r4,r17
  10e208:	d8801315 	stw	r2,76(sp)
  10e20c:	010c1d80 	call	10c1d8 <_Bfree>
  10e210:	d8801317 	ldw	r2,76(sp)
  10e214:	d8800515 	stw	r2,20(sp)
  10e218:	0540060e 	bge	zero,r21,10e234 <_strtod_r+0x8d8>
  10e21c:	d9400517 	ldw	r5,20(sp)
  10e220:	a80d883a 	mov	r6,r21
  10e224:	8809883a 	mov	r4,r17
  10e228:	010c96c0 	call	10c96c <__lshift>
  10e22c:	d8800515 	stw	r2,20(sp)
  10e230:	10025c26 	beq	r2,zero,10eba4 <_strtod_r+0x1248>
  10e234:	d8800c17 	ldw	r2,48(sp)
  10e238:	10000626 	beq	r2,zero,10e254 <_strtod_r+0x8f8>
  10e23c:	d9800c17 	ldw	r6,48(sp)
  10e240:	980b883a 	mov	r5,r19
  10e244:	8809883a 	mov	r4,r17
  10e248:	010c82c0 	call	10c82c <__pow5mult>
  10e24c:	1027883a 	mov	r19,r2
  10e250:	1000f426 	beq	r2,zero,10e624 <_strtod_r+0xcc8>
  10e254:	0700060e 	bge	zero,fp,10e270 <_strtod_r+0x914>
  10e258:	980b883a 	mov	r5,r19
  10e25c:	e00d883a 	mov	r6,fp
  10e260:	8809883a 	mov	r4,r17
  10e264:	010c96c0 	call	10c96c <__lshift>
  10e268:	1027883a 	mov	r19,r2
  10e26c:	1000ed26 	beq	r2,zero,10e624 <_strtod_r+0xcc8>
  10e270:	0500060e 	bge	zero,r20,10e28c <_strtod_r+0x930>
  10e274:	800b883a 	mov	r5,r16
  10e278:	a00d883a 	mov	r6,r20
  10e27c:	8809883a 	mov	r4,r17
  10e280:	010c96c0 	call	10c96c <__lshift>
  10e284:	1021883a 	mov	r16,r2
  10e288:	1000e626 	beq	r2,zero,10e624 <_strtod_r+0xcc8>
  10e28c:	d9400517 	ldw	r5,20(sp)
  10e290:	980d883a 	mov	r6,r19
  10e294:	8809883a 	mov	r4,r17
  10e298:	010cb140 	call	10cb14 <__mdiff>
  10e29c:	1025883a 	mov	r18,r2
  10e2a0:	1000e026 	beq	r2,zero,10e624 <_strtod_r+0xcc8>
  10e2a4:	15400317 	ldw	r21,12(r2)
  10e2a8:	800b883a 	mov	r5,r16
  10e2ac:	10000315 	stw	zero,12(r2)
  10e2b0:	1009883a 	mov	r4,r2
  10e2b4:	010cab40 	call	10cab4 <__mcmp>
  10e2b8:	10026716 	blt	r2,zero,10ec58 <_strtod_r+0x12fc>
  10e2bc:	10029626 	beq	r2,zero,10ed18 <_strtod_r+0x13bc>
  10e2c0:	800b883a 	mov	r5,r16
  10e2c4:	9009883a 	mov	r4,r18
  10e2c8:	010cfcc0 	call	10cfcc <__ratio>
  10e2cc:	000d883a 	mov	r6,zero
  10e2d0:	01d00034 	movhi	r7,16384
  10e2d4:	1009883a 	mov	r4,r2
  10e2d8:	180b883a 	mov	r5,r3
  10e2dc:	1039883a 	mov	fp,r2
  10e2e0:	1829883a 	mov	r20,r3
  10e2e4:	01176780 	call	117678 <__ledf2>
  10e2e8:	00803b16 	blt	zero,r2,10e3d8 <_strtod_r+0xa7c>
  10e2ec:	a8005e26 	beq	r21,zero,10e468 <_strtod_r+0xb0c>
  10e2f0:	050ffc34 	movhi	r20,16368
  10e2f4:	d8000f15 	stw	zero,60(sp)
  10e2f8:	d8001015 	stw	zero,64(sp)
  10e2fc:	dd000d15 	stw	r20,52(sp)
  10e300:	b71ffc2c 	andhi	fp,r22,32752
  10e304:	009ff834 	movhi	r2,32736
  10e308:	e080f226 	beq	fp,r2,10e6d4 <_strtod_r+0xd78>
  10e30c:	d9000717 	ldw	r4,28(sp)
  10e310:	20000c26 	beq	r4,zero,10e344 <_strtod_r+0x9e8>
  10e314:	0081a834 	movhi	r2,1696
  10e318:	17000a36 	bltu	r2,fp,10e344 <_strtod_r+0x9e8>
  10e31c:	d9001017 	ldw	r4,64(sp)
  10e320:	d9400d17 	ldw	r5,52(sp)
  10e324:	01d07834 	movhi	r7,16864
  10e328:	39ffffc4 	addi	r7,r7,-1
  10e32c:	01bff034 	movhi	r6,65472
  10e330:	01176780 	call	117678 <__ledf2>
  10e334:	0080a70e 	bge	zero,r2,10e5d4 <_strtod_r+0xc78>
  10e338:	0081ac34 	movhi	r2,1712
  10e33c:	a091883a 	add	r8,r20,r2
  10e340:	4729c83a 	sub	r20,r8,fp
  10e344:	b809883a 	mov	r4,r23
  10e348:	b00b883a 	mov	r5,r22
  10e34c:	010cd100 	call	10cd10 <__ulp>
  10e350:	d9000f17 	ldw	r4,60(sp)
  10e354:	a00b883a 	mov	r5,r20
  10e358:	100d883a 	mov	r6,r2
  10e35c:	180f883a 	mov	r7,r3
  10e360:	011776c0 	call	11776c <__muldf3>
  10e364:	b80d883a 	mov	r6,r23
  10e368:	b00f883a 	mov	r7,r22
  10e36c:	1009883a 	mov	r4,r2
  10e370:	180b883a 	mov	r5,r3
  10e374:	01162980 	call	116298 <__adddf3>
  10e378:	102f883a 	mov	r23,r2
  10e37c:	182d883a 	mov	r22,r3
  10e380:	1829883a 	mov	r20,r3
  10e384:	d9000717 	ldw	r4,28(sp)
  10e388:	2000021e 	bne	r4,zero,10e394 <_strtod_r+0xa38>
  10e38c:	a09ffc2c 	andhi	r2,r20,32752
  10e390:	e080f126 	beq	fp,r2,10e758 <_strtod_r+0xdfc>
  10e394:	d9400517 	ldw	r5,20(sp)
  10e398:	8809883a 	mov	r4,r17
  10e39c:	010c1d80 	call	10c1d8 <_Bfree>
  10e3a0:	980b883a 	mov	r5,r19
  10e3a4:	8809883a 	mov	r4,r17
  10e3a8:	010c1d80 	call	10c1d8 <_Bfree>
  10e3ac:	800b883a 	mov	r5,r16
  10e3b0:	8809883a 	mov	r4,r17
  10e3b4:	010c1d80 	call	10c1d8 <_Bfree>
  10e3b8:	900b883a 	mov	r5,r18
  10e3bc:	8809883a 	mov	r4,r17
  10e3c0:	010c1d80 	call	10c1d8 <_Bfree>
  10e3c4:	003f3f06 	br	10e0c4 <__alt_data_end+0xfffce0c4>
  10e3c8:	00c00044 	movi	r3,1
  10e3cc:	d8000d15 	stw	zero,52(sp)
  10e3d0:	d8c00f15 	stw	r3,60(sp)
  10e3d4:	003f6f06 	br	10e194 <__alt_data_end+0xfffce194>
  10e3d8:	000d883a 	mov	r6,zero
  10e3dc:	01cff834 	movhi	r7,16352
  10e3e0:	e009883a 	mov	r4,fp
  10e3e4:	a00b883a 	mov	r5,r20
  10e3e8:	011776c0 	call	11776c <__muldf3>
  10e3ec:	d8801015 	stw	r2,64(sp)
  10e3f0:	d8c00d15 	stw	r3,52(sp)
  10e3f4:	a8001a1e 	bne	r21,zero,10e460 <_strtod_r+0xb04>
  10e3f8:	1a20003c 	xorhi	r8,r3,32768
  10e3fc:	d8800f15 	stw	r2,60(sp)
  10e400:	4029883a 	mov	r20,r8
  10e404:	003fbe06 	br	10e300 <__alt_data_end+0xfffce300>
  10e408:	d8000b15 	stw	zero,44(sp)
  10e40c:	04800044 	movi	r18,1
  10e410:	b000021e 	bne	r22,zero,10e41c <_strtod_r+0xac0>
  10e414:	d8c00c17 	ldw	r3,48(sp)
  10e418:	183d9d26 	beq	r3,zero,10da90 <__alt_data_end+0xfffcda90>
  10e41c:	0039883a 	mov	fp,zero
  10e420:	003e5206 	br	10dd6c <__alt_data_end+0xfffcdd6c>
  10e424:	d8c00c17 	ldw	r3,48(sp)
  10e428:	dd000e17 	ldw	r20,56(sp)
  10e42c:	1889c83a 	sub	r4,r3,r2
  10e430:	003f4706 	br	10e150 <__alt_data_end+0xfffce150>
  10e434:	00bef884 	movi	r2,-1054
  10e438:	07000044 	movi	fp,1
  10e43c:	10c5c83a 	sub	r2,r2,r3
  10e440:	e084983a 	sll	r2,fp,r2
  10e444:	df000f15 	stw	fp,60(sp)
  10e448:	d8800d15 	stw	r2,52(sp)
  10e44c:	003f5106 	br	10e194 <__alt_data_end+0xfffce194>
  10e450:	d8c00717 	ldw	r3,28(sp)
  10e454:	0009883a 	mov	r4,zero
  10e458:	d8c00615 	stw	r3,24(sp)
  10e45c:	003de506 	br	10dbf4 <__alt_data_end+0xfffcdbf4>
  10e460:	da000d17 	ldw	r8,52(sp)
  10e464:	003fe506 	br	10e3fc <__alt_data_end+0xfffce3fc>
  10e468:	b800521e 	bne	r23,zero,10e5b4 <_strtod_r+0xc58>
  10e46c:	01000434 	movhi	r4,16
  10e470:	213fffc4 	addi	r4,r4,-1
  10e474:	b104703a 	and	r2,r22,r4
  10e478:	1000501e 	bne	r2,zero,10e5bc <_strtod_r+0xc60>
  10e47c:	000d883a 	mov	r6,zero
  10e480:	01cffc34 	movhi	r7,16368
  10e484:	e009883a 	mov	r4,fp
  10e488:	a00b883a 	mov	r5,r20
  10e48c:	01176780 	call	117678 <__ledf2>
  10e490:	10024216 	blt	r2,zero,10ed9c <_strtod_r+0x1440>
  10e494:	a00b883a 	mov	r5,r20
  10e498:	000d883a 	mov	r6,zero
  10e49c:	01cff834 	movhi	r7,16352
  10e4a0:	e009883a 	mov	r4,fp
  10e4a4:	011776c0 	call	11776c <__muldf3>
  10e4a8:	d8801015 	stw	r2,64(sp)
  10e4ac:	d8c00d15 	stw	r3,52(sp)
  10e4b0:	1029883a 	mov	r20,r2
  10e4b4:	1a20003c 	xorhi	r8,r3,32768
  10e4b8:	dd000f15 	stw	r20,60(sp)
  10e4bc:	4029883a 	mov	r20,r8
  10e4c0:	003f8f06 	br	10e300 <__alt_data_end+0xfffce300>
  10e4c4:	8039883a 	mov	fp,r16
  10e4c8:	002d883a 	mov	r22,zero
  10e4cc:	d8000b15 	stw	zero,44(sp)
  10e4d0:	bd7ff404 	addi	r21,r23,-48
  10e4d4:	00800244 	movi	r2,9
  10e4d8:	15401236 	bltu	r2,r21,10e524 <_strtod_r+0xbc8>
  10e4dc:	dd400e15 	stw	r21,56(sp)
  10e4e0:	b0800044 	addi	r2,r22,1
  10e4e4:	a801701e 	bne	r21,zero,10eaa8 <_strtod_r+0x114c>
  10e4e8:	ddc00617 	ldw	r23,24(sp)
  10e4ec:	102d883a 	mov	r22,r2
  10e4f0:	b8800044 	addi	r2,r23,1
  10e4f4:	d8800615 	stw	r2,24(sp)
  10e4f8:	bdc00047 	ldb	r23,1(r23)
  10e4fc:	003ff406 	br	10e4d0 <__alt_data_end+0xfffce4d0>
  10e500:	00c00044 	movi	r3,1
  10e504:	d8c00e15 	stw	r3,56(sp)
  10e508:	d8c00717 	ldw	r3,28(sp)
  10e50c:	18800084 	addi	r2,r3,2
  10e510:	d8800615 	stw	r2,24(sp)
  10e514:	1dc00087 	ldb	r23,2(r3)
  10e518:	003e1f06 	br	10dd98 <__alt_data_end+0xfffcdd98>
  10e51c:	d8000e15 	stw	zero,56(sp)
  10e520:	003ff906 	br	10e508 <__alt_data_end+0xfffce508>
  10e524:	04800044 	movi	r18,1
  10e528:	003dad06 	br	10dbe0 <__alt_data_end+0xfffcdbe0>
  10e52c:	903d581e 	bne	r18,zero,10da90 <__alt_data_end+0xfffcda90>
  10e530:	00801384 	movi	r2,78
  10e534:	b8800526 	beq	r23,r2,10e54c <_strtod_r+0xbf0>
  10e538:	15fd530e 	bge	r2,r23,10da88 <__alt_data_end+0xfffcda88>
  10e53c:	00801a44 	movi	r2,105
  10e540:	b8819a26 	beq	r23,r2,10ebac <_strtod_r+0x1250>
  10e544:	00801b84 	movi	r2,110
  10e548:	b8bd511e 	bne	r23,r2,10da90 <__alt_data_end+0xfffcda90>
  10e54c:	014004b4 	movhi	r5,18
  10e550:	d9000617 	ldw	r4,24(sp)
  10e554:	294f6104 	addi	r5,r5,15748
  10e558:	01c00644 	movi	r7,25
  10e55c:	00000b06 	br	10e58c <_strtod_r+0xc30>
  10e560:	21000044 	addi	r4,r4,1
  10e564:	20800003 	ldbu	r2,0(r4)
  10e568:	10ffefc4 	addi	r3,r2,-65
  10e56c:	10803fcc 	andi	r2,r2,255
  10e570:	1080201c 	xori	r2,r2,128
  10e574:	18c03fcc 	andi	r3,r3,255
  10e578:	10bfe004 	addi	r2,r2,-128
  10e57c:	38c00136 	bltu	r7,r3,10e584 <_strtod_r+0xc28>
  10e580:	10800804 	addi	r2,r2,32
  10e584:	29400044 	addi	r5,r5,1
  10e588:	11bd411e 	bne	r2,r6,10da90 <__alt_data_end+0xfffcda90>
  10e58c:	29800007 	ldb	r6,0(r5)
  10e590:	303ff31e 	bne	r6,zero,10e560 <__alt_data_end+0xfffce560>
  10e594:	20800044 	addi	r2,r4,1
  10e598:	d8800615 	stw	r2,24(sp)
  10e59c:	20c00047 	ldb	r3,1(r4)
  10e5a0:	00800a04 	movi	r2,40
  10e5a4:	18bde326 	beq	r3,r2,10dd34 <__alt_data_end+0xfffcdd34>
  10e5a8:	05bffe34 	movhi	r22,65528
  10e5ac:	002f883a 	mov	r23,zero
  10e5b0:	003dea06 	br	10dd5c <__alt_data_end+0xfffcdd5c>
  10e5b4:	00800044 	movi	r2,1
  10e5b8:	b880ff26 	beq	r23,r2,10e9b8 <_strtod_r+0x105c>
  10e5bc:	014ffc34 	movhi	r5,16368
  10e5c0:	d8000f15 	stw	zero,60(sp)
  10e5c4:	052ffc34 	movhi	r20,49136
  10e5c8:	d8001015 	stw	zero,64(sp)
  10e5cc:	d9400d15 	stw	r5,52(sp)
  10e5d0:	003f4b06 	br	10e300 <__alt_data_end+0xfffce300>
  10e5d4:	d9001017 	ldw	r4,64(sp)
  10e5d8:	d9400d17 	ldw	r5,52(sp)
  10e5dc:	011528c0 	call	11528c <__fixunsdfsi>
  10e5e0:	1000f126 	beq	r2,zero,10e9a8 <_strtod_r+0x104c>
  10e5e4:	1009883a 	mov	r4,r2
  10e5e8:	0118a300 	call	118a30 <__floatunsidf>
  10e5ec:	d8801015 	stw	r2,64(sp)
  10e5f0:	d8c00d15 	stw	r3,52(sp)
  10e5f4:	a800ea1e 	bne	r21,zero,10e9a0 <_strtod_r+0x1044>
  10e5f8:	d8800d17 	ldw	r2,52(sp)
  10e5fc:	1220003c 	xorhi	r8,r2,32768
  10e600:	d8c01017 	ldw	r3,64(sp)
  10e604:	4029883a 	mov	r20,r8
  10e608:	d8c00f15 	stw	r3,60(sp)
  10e60c:	003f4a06 	br	10e338 <__alt_data_end+0xfffce338>
  10e610:	d8000c15 	stw	zero,48(sp)
  10e614:	003ea506 	br	10e0ac <__alt_data_end+0xfffce0ac>
  10e618:	d8c00817 	ldw	r3,32(sp)
  10e61c:	00bfffc4 	movi	r2,-1
  10e620:	1880441e 	bne	r3,r2,10e734 <_strtod_r+0xdd8>
  10e624:	9011883a 	mov	r8,r18
  10e628:	d8800517 	ldw	r2,20(sp)
  10e62c:	00c00884 	movi	r3,34
  10e630:	88c00015 	stw	r3,0(r17)
  10e634:	d8000815 	stw	zero,32(sp)
  10e638:	071ffc34 	movhi	fp,32752
  10e63c:	100b883a 	mov	r5,r2
  10e640:	8809883a 	mov	r4,r17
  10e644:	da001315 	stw	r8,76(sp)
  10e648:	010c1d80 	call	10c1d8 <_Bfree>
  10e64c:	980b883a 	mov	r5,r19
  10e650:	8809883a 	mov	r4,r17
  10e654:	010c1d80 	call	10c1d8 <_Bfree>
  10e658:	800b883a 	mov	r5,r16
  10e65c:	8809883a 	mov	r4,r17
  10e660:	010c1d80 	call	10c1d8 <_Bfree>
  10e664:	d9400b17 	ldw	r5,44(sp)
  10e668:	8809883a 	mov	r4,r17
  10e66c:	010c1d80 	call	10c1d8 <_Bfree>
  10e670:	da001317 	ldw	r8,76(sp)
  10e674:	8809883a 	mov	r4,r17
  10e678:	400b883a 	mov	r5,r8
  10e67c:	010c1d80 	call	10c1d8 <_Bfree>
  10e680:	003d5f06 	br	10dc00 <__alt_data_end+0xfffcdc00>
  10e684:	d8c00a17 	ldw	r3,40(sp)
  10e688:	d8800504 	addi	r2,sp,20
  10e68c:	018004b4 	movhi	r6,18
  10e690:	318f6704 	addi	r6,r6,15772
  10e694:	d8c00115 	stw	r3,4(sp)
  10e698:	d8800015 	stw	r2,0(sp)
  10e69c:	d9c00404 	addi	r7,sp,16
  10e6a0:	d9400604 	addi	r5,sp,24
  10e6a4:	8809883a 	mov	r4,r17
  10e6a8:	01142700 	call	114270 <__gethex>
  10e6ac:	148001cc 	andi	r18,r2,7
  10e6b0:	903e2126 	beq	r18,zero,10df38 <__alt_data_end+0xfffcdf38>
  10e6b4:	00c00184 	movi	r3,6
  10e6b8:	90c0c71e 	bne	r18,r3,10e9d8 <_strtod_r+0x107c>
  10e6bc:	84000044 	addi	r16,r16,1
  10e6c0:	dc000615 	stw	r16,24(sp)
  10e6c4:	d8000815 	stw	zero,32(sp)
  10e6c8:	0039883a 	mov	fp,zero
  10e6cc:	d8000a15 	stw	zero,40(sp)
  10e6d0:	003d4b06 	br	10dc00 <__alt_data_end+0xfffcdc00>
  10e6d4:	00bf2c34 	movhi	r2,64688
  10e6d8:	b0ad883a 	add	r22,r22,r2
  10e6dc:	b809883a 	mov	r4,r23
  10e6e0:	b00b883a 	mov	r5,r22
  10e6e4:	010cd100 	call	10cd10 <__ulp>
  10e6e8:	d9000f17 	ldw	r4,60(sp)
  10e6ec:	100d883a 	mov	r6,r2
  10e6f0:	180f883a 	mov	r7,r3
  10e6f4:	a00b883a 	mov	r5,r20
  10e6f8:	011776c0 	call	11776c <__muldf3>
  10e6fc:	b80d883a 	mov	r6,r23
  10e700:	1009883a 	mov	r4,r2
  10e704:	b00f883a 	mov	r7,r22
  10e708:	180b883a 	mov	r5,r3
  10e70c:	01162980 	call	116298 <__adddf3>
  10e710:	011f2834 	movhi	r4,31904
  10e714:	102f883a 	mov	r23,r2
  10e718:	213fffc4 	addi	r4,r4,-1
  10e71c:	189ffc2c 	andhi	r2,r3,32752
  10e720:	20807b2e 	bgeu	r4,r2,10e910 <_strtod_r+0xfb4>
  10e724:	d9401217 	ldw	r5,72(sp)
  10e728:	009ffc34 	movhi	r2,32752
  10e72c:	10bfffc4 	addi	r2,r2,-1
  10e730:	28bfb926 	beq	r5,r2,10e618 <__alt_data_end+0xfffce618>
  10e734:	059ffc34 	movhi	r22,32752
  10e738:	b5bfffc4 	addi	r22,r22,-1
  10e73c:	05ffffc4 	movi	r23,-1
  10e740:	003f1406 	br	10e394 <__alt_data_end+0xfffce394>
  10e744:	00800884 	movi	r2,34
  10e748:	88800015 	stw	r2,0(r17)
  10e74c:	d8000815 	stw	zero,32(sp)
  10e750:	071ffc34 	movhi	fp,32752
  10e754:	003d2a06 	br	10dc00 <__alt_data_end+0xfffcdc00>
  10e758:	d9400d17 	ldw	r5,52(sp)
  10e75c:	d9001017 	ldw	r4,64(sp)
  10e760:	01188d40 	call	1188d4 <__fixdfsi>
  10e764:	1009883a 	mov	r4,r2
  10e768:	01189540 	call	118954 <__floatsidf>
  10e76c:	d9001017 	ldw	r4,64(sp)
  10e770:	d9400d17 	ldw	r5,52(sp)
  10e774:	100d883a 	mov	r6,r2
  10e778:	180f883a 	mov	r7,r3
  10e77c:	0117fd80 	call	117fd8 <__subdf3>
  10e780:	1011883a 	mov	r8,r2
  10e784:	1839883a 	mov	fp,r3
  10e788:	a800121e 	bne	r21,zero,10e7d4 <_strtod_r+0xe78>
  10e78c:	b800111e 	bne	r23,zero,10e7d4 <_strtod_r+0xe78>
  10e790:	01400434 	movhi	r5,16
  10e794:	297fffc4 	addi	r5,r5,-1
  10e798:	a168703a 	and	r20,r20,r5
  10e79c:	a0000d1e 	bne	r20,zero,10e7d4 <_strtod_r+0xe78>
  10e7a0:	01a52834 	movhi	r6,38048
  10e7a4:	01cff434 	movhi	r7,16336
  10e7a8:	318d6544 	addi	r6,r6,13717
  10e7ac:	39ffffc4 	addi	r7,r7,-1
  10e7b0:	1009883a 	mov	r4,r2
  10e7b4:	180b883a 	mov	r5,r3
  10e7b8:	01176780 	call	117678 <__ledf2>
  10e7bc:	103ef50e 	bge	r2,zero,10e394 <__alt_data_end+0xfffce394>
  10e7c0:	9011883a 	mov	r8,r18
  10e7c4:	d8800517 	ldw	r2,20(sp)
  10e7c8:	d8000815 	stw	zero,32(sp)
  10e7cc:	b039883a 	mov	fp,r22
  10e7d0:	003f9a06 	br	10e63c <__alt_data_end+0xfffce63c>
  10e7d4:	01a52834 	movhi	r6,38048
  10e7d8:	01cff834 	movhi	r7,16352
  10e7dc:	4009883a 	mov	r4,r8
  10e7e0:	318d6544 	addi	r6,r6,13717
  10e7e4:	39ffffc4 	addi	r7,r7,-1
  10e7e8:	e00b883a 	mov	r5,fp
  10e7ec:	da001315 	stw	r8,76(sp)
  10e7f0:	01176780 	call	117678 <__ledf2>
  10e7f4:	da001317 	ldw	r8,76(sp)
  10e7f8:	10000716 	blt	r2,zero,10e818 <_strtod_r+0xebc>
  10e7fc:	018d6c34 	movhi	r6,13744
  10e800:	31b94d44 	addi	r6,r6,-6859
  10e804:	01cff834 	movhi	r7,16352
  10e808:	4009883a 	mov	r4,r8
  10e80c:	e00b883a 	mov	r5,fp
  10e810:	011759c0 	call	11759c <__gedf2>
  10e814:	00bedf0e 	bge	zero,r2,10e394 <__alt_data_end+0xfffce394>
  10e818:	9011883a 	mov	r8,r18
  10e81c:	d8800517 	ldw	r2,20(sp)
  10e820:	ddc00815 	stw	r23,32(sp)
  10e824:	b039883a 	mov	fp,r22
  10e828:	003f8406 	br	10e63c <__alt_data_end+0xfffce63c>
  10e82c:	903e1026 	beq	r18,zero,10e070 <__alt_data_end+0xfffce070>
  10e830:	04a5c83a 	sub	r18,zero,r18
  10e834:	908003cc 	andi	r2,r18,15
  10e838:	10000b26 	beq	r2,zero,10e868 <_strtod_r+0xf0c>
  10e83c:	100490fa 	slli	r2,r2,3
  10e840:	00c004b4 	movhi	r3,18
  10e844:	18cf2c04 	addi	r3,r3,15536
  10e848:	1885883a 	add	r2,r3,r2
  10e84c:	11800017 	ldw	r6,0(r2)
  10e850:	11c00117 	ldw	r7,4(r2)
  10e854:	b809883a 	mov	r4,r23
  10e858:	b00b883a 	mov	r5,r22
  10e85c:	0116b440 	call	116b44 <__divdf3>
  10e860:	102f883a 	mov	r23,r2
  10e864:	182d883a 	mov	r22,r3
  10e868:	9025d13a 	srai	r18,r18,4
  10e86c:	903e0026 	beq	r18,zero,10e070 <__alt_data_end+0xfffce070>
  10e870:	008007c4 	movi	r2,31
  10e874:	14801f16 	blt	r2,r18,10e8f4 <_strtod_r+0xf98>
  10e878:	9080040c 	andi	r2,r18,16
  10e87c:	10018d26 	beq	r2,zero,10eeb4 <_strtod_r+0x1558>
  10e880:	00c01a84 	movi	r3,106
  10e884:	d8c00715 	stw	r3,28(sp)
  10e888:	04817e0e 	bge	zero,r18,10ee84 <_strtod_r+0x1528>
  10e88c:	050004b4 	movhi	r20,18
  10e890:	a50f6c04 	addi	r20,r20,15792
  10e894:	b805883a 	mov	r2,r23
  10e898:	b007883a 	mov	r3,r22
  10e89c:	0009883a 	mov	r4,zero
  10e8a0:	9180004c 	andi	r6,r18,1
  10e8a4:	30000626 	beq	r6,zero,10e8c0 <_strtod_r+0xf64>
  10e8a8:	a1800017 	ldw	r6,0(r20)
  10e8ac:	a1c00117 	ldw	r7,4(r20)
  10e8b0:	1009883a 	mov	r4,r2
  10e8b4:	180b883a 	mov	r5,r3
  10e8b8:	011776c0 	call	11776c <__muldf3>
  10e8bc:	01000044 	movi	r4,1
  10e8c0:	9025d07a 	srai	r18,r18,1
  10e8c4:	a5000204 	addi	r20,r20,8
  10e8c8:	903ff51e 	bne	r18,zero,10e8a0 <__alt_data_end+0xfffce8a0>
  10e8cc:	21003fcc 	andi	r4,r4,255
  10e8d0:	2001891e 	bne	r4,zero,10eef8 <_strtod_r+0x159c>
  10e8d4:	d9000717 	ldw	r4,28(sp)
  10e8d8:	20016a1e 	bne	r4,zero,10ee84 <_strtod_r+0x1528>
  10e8dc:	000d883a 	mov	r6,zero
  10e8e0:	000f883a 	mov	r7,zero
  10e8e4:	b809883a 	mov	r4,r23
  10e8e8:	b00b883a 	mov	r5,r22
  10e8ec:	01175140 	call	117514 <__eqdf2>
  10e8f0:	103de01e 	bne	r2,zero,10e074 <__alt_data_end+0xfffce074>
  10e8f4:	00800884 	movi	r2,34
  10e8f8:	88800015 	stw	r2,0(r17)
  10e8fc:	d8000815 	stw	zero,32(sp)
  10e900:	0039883a 	mov	fp,zero
  10e904:	003cbe06 	br	10dc00 <__alt_data_end+0xfffcdc00>
  10e908:	011387c4 	movi	r4,19999
  10e90c:	003d5606 	br	10de68 <__alt_data_end+0xfffcde68>
  10e910:	0580d434 	movhi	r22,848
  10e914:	1dad883a 	add	r22,r3,r22
  10e918:	b029883a 	mov	r20,r22
  10e91c:	003e9906 	br	10e384 <__alt_data_end+0xfffce384>
  10e920:	e5c03fcc 	andi	r23,fp,255
  10e924:	bdc0201c 	xori	r23,r23,128
  10e928:	bdffe004 	addi	r23,r23,-128
  10e92c:	dc800817 	ldw	r18,32(sp)
  10e930:	0029883a 	mov	r20,zero
  10e934:	0027883a 	mov	r19,zero
  10e938:	0021883a 	mov	r16,zero
  10e93c:	003c9806 	br	10dba0 <__alt_data_end+0xfffcdba0>
  10e940:	00c00944 	movi	r3,37
  10e944:	1f07c83a 	sub	r3,r3,fp
  10e948:	1d7d7e16 	blt	r3,r21,10df44 <__alt_data_end+0xfffcdf44>
  10e94c:	1721c83a 	sub	r16,r2,fp
  10e950:	800490fa 	slli	r2,r16,3
  10e954:	044004b4 	movhi	r17,18
  10e958:	8c4f2c04 	addi	r17,r17,15536
  10e95c:	8885883a 	add	r2,r17,r2
  10e960:	11000017 	ldw	r4,0(r2)
  10e964:	11400117 	ldw	r5,4(r2)
  10e968:	b80d883a 	mov	r6,r23
  10e96c:	b00f883a 	mov	r7,r22
  10e970:	011776c0 	call	11776c <__muldf3>
  10e974:	ac2bc83a 	sub	r21,r21,r16
  10e978:	a80c90fa 	slli	r6,r21,3
  10e97c:	1009883a 	mov	r4,r2
  10e980:	180b883a 	mov	r5,r3
  10e984:	8985883a 	add	r2,r17,r6
  10e988:	11800017 	ldw	r6,0(r2)
  10e98c:	11c00117 	ldw	r7,4(r2)
  10e990:	011776c0 	call	11776c <__muldf3>
  10e994:	d8800815 	stw	r2,32(sp)
  10e998:	1839883a 	mov	fp,r3
  10e99c:	003c9806 	br	10dc00 <__alt_data_end+0xfffcdc00>
  10e9a0:	da000d17 	ldw	r8,52(sp)
  10e9a4:	003f1606 	br	10e600 <__alt_data_end+0xfffce600>
  10e9a8:	014ffc34 	movhi	r5,16368
  10e9ac:	d8001015 	stw	zero,64(sp)
  10e9b0:	d9400d15 	stw	r5,52(sp)
  10e9b4:	003f0f06 	br	10e5f4 <__alt_data_end+0xfffce5f4>
  10e9b8:	b03f001e 	bne	r22,zero,10e5bc <__alt_data_end+0xfffce5bc>
  10e9bc:	9011883a 	mov	r8,r18
  10e9c0:	00800884 	movi	r2,34
  10e9c4:	88800015 	stw	r2,0(r17)
  10e9c8:	d8000815 	stw	zero,32(sp)
  10e9cc:	d8800517 	ldw	r2,20(sp)
  10e9d0:	0039883a 	mov	fp,zero
  10e9d4:	003f1906 	br	10e63c <__alt_data_end+0xfffce63c>
  10e9d8:	d9800517 	ldw	r6,20(sp)
  10e9dc:	30000826 	beq	r6,zero,10ea00 <_strtod_r+0x10a4>
  10e9e0:	01400d44 	movi	r5,53
  10e9e4:	d9000204 	addi	r4,sp,8
  10e9e8:	d8801315 	stw	r2,76(sp)
  10e9ec:	010d0e40 	call	10d0e4 <__copybits>
  10e9f0:	d9400517 	ldw	r5,20(sp)
  10e9f4:	8809883a 	mov	r4,r17
  10e9f8:	010c1d80 	call	10c1d8 <_Bfree>
  10e9fc:	d8801317 	ldw	r2,76(sp)
  10ea00:	00c00184 	movi	r3,6
  10ea04:	1c800f36 	bltu	r3,r18,10ea44 <_strtod_r+0x10e8>
  10ea08:	902490ba 	slli	r18,r18,2
  10ea0c:	00c00474 	movhi	r3,17
  10ea10:	18fa8804 	addi	r3,r3,-5600
  10ea14:	90e5883a 	add	r18,r18,r3
  10ea18:	90c00017 	ldw	r3,0(r18)
  10ea1c:	1800683a 	jmp	r3
  10ea20:	0010ea9c 	xori	zero,zero,17322
  10ea24:	0010ea74 	movhi	zero,17321
  10ea28:	0010ea58 	cmpnei	zero,zero,17321
  10ea2c:	0010ea3c 	xorhi	zero,zero,17320
  10ea30:	0010ea64 	muli	zero,zero,17321
  10ea34:	0010ea74 	movhi	zero,17321
  10ea38:	0010ea9c 	xori	zero,zero,17322
  10ea3c:	059ffc34 	movhi	r22,32752
  10ea40:	002f883a 	mov	r23,zero
  10ea44:	1080020c 	andi	r2,r2,8
  10ea48:	ddc00815 	stw	r23,32(sp)
  10ea4c:	103cc426 	beq	r2,zero,10dd60 <__alt_data_end+0xfffcdd60>
  10ea50:	b7200034 	orhi	fp,r22,32768
  10ea54:	003c6a06 	br	10dc00 <__alt_data_end+0xfffcdc00>
  10ea58:	ddc00217 	ldw	r23,8(sp)
  10ea5c:	dd800317 	ldw	r22,12(sp)
  10ea60:	003ff806 	br	10ea44 <__alt_data_end+0xfffcea44>
  10ea64:	05a00034 	movhi	r22,32768
  10ea68:	b5bfffc4 	addi	r22,r22,-1
  10ea6c:	05ffffc4 	movi	r23,-1
  10ea70:	003ff406 	br	10ea44 <__alt_data_end+0xfffcea44>
  10ea74:	d8c00417 	ldw	r3,16(sp)
  10ea78:	dd800317 	ldw	r22,12(sp)
  10ea7c:	013ffc34 	movhi	r4,65520
  10ea80:	18c10cc4 	addi	r3,r3,1075
  10ea84:	1806953a 	slli	r3,r3,20
  10ea88:	213fffc4 	addi	r4,r4,-1
  10ea8c:	b12c703a 	and	r22,r22,r4
  10ea90:	ddc00217 	ldw	r23,8(sp)
  10ea94:	b0ecb03a 	or	r22,r22,r3
  10ea98:	003fea06 	br	10ea44 <__alt_data_end+0xfffcea44>
  10ea9c:	002d883a 	mov	r22,zero
  10eaa0:	002f883a 	mov	r23,zero
  10eaa4:	003fe706 	br	10ea44 <__alt_data_end+0xfffcea44>
  10eaa8:	d8c00b17 	ldw	r3,44(sp)
  10eaac:	b72d883a 	add	r22,r22,fp
  10eab0:	1887883a 	add	r3,r3,r2
  10eab4:	d8c00b15 	stw	r3,44(sp)
  10eab8:	00c00044 	movi	r3,1
  10eabc:	10c11126 	beq	r2,r3,10ef04 <_strtod_r+0x15a8>
  10eac0:	05c00204 	movi	r23,8
  10eac4:	04800404 	movi	r18,16
  10eac8:	e7000044 	addi	fp,fp,1
  10eacc:	e0bfffc4 	addi	r2,fp,-1
  10ead0:	b8802016 	blt	r23,r2,10eb54 <_strtod_r+0x11f8>
  10ead4:	9809883a 	mov	r4,r19
  10ead8:	01400284 	movi	r5,10
  10eadc:	01160740 	call	116074 <__mulsi3>
  10eae0:	1027883a 	mov	r19,r2
  10eae4:	e5bff81e 	bne	fp,r22,10eac8 <__alt_data_end+0xfffceac8>
  10eae8:	ddc00617 	ldw	r23,24(sp)
  10eaec:	e7000044 	addi	fp,fp,1
  10eaf0:	00800204 	movi	r2,8
  10eaf4:	1580100e 	bge	r2,r22,10eb38 <_strtod_r+0x11dc>
  10eaf8:	00800404 	movi	r2,16
  10eafc:	002d883a 	mov	r22,zero
  10eb00:	173e7b16 	blt	r2,fp,10e4f0 <__alt_data_end+0xfffce4f0>
  10eb04:	a009883a 	mov	r4,r20
  10eb08:	01400284 	movi	r5,10
  10eb0c:	01160740 	call	116074 <__mulsi3>
  10eb10:	a8a9883a 	add	r20,r21,r2
  10eb14:	003e7606 	br	10e4f0 <__alt_data_end+0xfffce4f0>
  10eb18:	d9000617 	ldw	r4,24(sp)
  10eb1c:	bdfff404 	addi	r23,r23,-48
  10eb20:	b5800044 	addi	r22,r22,1
  10eb24:	ddc00e15 	stw	r23,56(sp)
  10eb28:	d9000815 	stw	r4,32(sp)
  10eb2c:	dd800b15 	stw	r22,44(sp)
  10eb30:	202f883a 	mov	r23,r4
  10eb34:	07000044 	movi	fp,1
  10eb38:	9809883a 	mov	r4,r19
  10eb3c:	01400284 	movi	r5,10
  10eb40:	01160740 	call	116074 <__mulsi3>
  10eb44:	d8c00e17 	ldw	r3,56(sp)
  10eb48:	002d883a 	mov	r22,zero
  10eb4c:	18a7883a 	add	r19,r3,r2
  10eb50:	003e6706 	br	10e4f0 <__alt_data_end+0xfffce4f0>
  10eb54:	973fe316 	blt	r18,fp,10eae4 <__alt_data_end+0xfffceae4>
  10eb58:	a009883a 	mov	r4,r20
  10eb5c:	01400284 	movi	r5,10
  10eb60:	01160740 	call	116074 <__mulsi3>
  10eb64:	1029883a 	mov	r20,r2
  10eb68:	003fde06 	br	10eae4 <__alt_data_end+0xfffceae4>
  10eb6c:	00bffa84 	movi	r2,-22
  10eb70:	a8bcf416 	blt	r21,r2,10df44 <__alt_data_end+0xfffcdf44>
  10eb74:	a82a90fa 	slli	r21,r21,3
  10eb78:	008004b4 	movhi	r2,18
  10eb7c:	108f2c04 	addi	r2,r2,15536
  10eb80:	1545c83a 	sub	r2,r2,r21
  10eb84:	11800017 	ldw	r6,0(r2)
  10eb88:	11c00117 	ldw	r7,4(r2)
  10eb8c:	b809883a 	mov	r4,r23
  10eb90:	b00b883a 	mov	r5,r22
  10eb94:	0116b440 	call	116b44 <__divdf3>
  10eb98:	d8800815 	stw	r2,32(sp)
  10eb9c:	1839883a 	mov	fp,r3
  10eba0:	003c1706 	br	10dc00 <__alt_data_end+0xfffcdc00>
  10eba4:	9011883a 	mov	r8,r18
  10eba8:	003ea006 	br	10e62c <__alt_data_end+0xfffce62c>
  10ebac:	014004b4 	movhi	r5,18
  10ebb0:	d9000617 	ldw	r4,24(sp)
  10ebb4:	294f5e04 	addi	r5,r5,15736
  10ebb8:	01c00644 	movi	r7,25
  10ebbc:	00000b06 	br	10ebec <_strtod_r+0x1290>
  10ebc0:	21000044 	addi	r4,r4,1
  10ebc4:	20800003 	ldbu	r2,0(r4)
  10ebc8:	10ffefc4 	addi	r3,r2,-65
  10ebcc:	10803fcc 	andi	r2,r2,255
  10ebd0:	1080201c 	xori	r2,r2,128
  10ebd4:	18c03fcc 	andi	r3,r3,255
  10ebd8:	10bfe004 	addi	r2,r2,-128
  10ebdc:	38c00136 	bltu	r7,r3,10ebe4 <_strtod_r+0x1288>
  10ebe0:	10800804 	addi	r2,r2,32
  10ebe4:	29400044 	addi	r5,r5,1
  10ebe8:	11bba91e 	bne	r2,r6,10da90 <__alt_data_end+0xfffcda90>
  10ebec:	29800007 	ldb	r6,0(r5)
  10ebf0:	303ff31e 	bne	r6,zero,10ebc0 <__alt_data_end+0xfffcebc0>
  10ebf4:	018004b4 	movhi	r6,18
  10ebf8:	d9000615 	stw	r4,24(sp)
  10ebfc:	318f5f04 	addi	r6,r6,15740
  10ec00:	200b883a 	mov	r5,r4
  10ec04:	02000644 	movi	r8,25
  10ec08:	00000a06 	br	10ec34 <_strtod_r+0x12d8>
  10ec0c:	28800003 	ldbu	r2,0(r5)
  10ec10:	10ffefc4 	addi	r3,r2,-65
  10ec14:	10803fcc 	andi	r2,r2,255
  10ec18:	1080201c 	xori	r2,r2,128
  10ec1c:	18c03fcc 	andi	r3,r3,255
  10ec20:	10bfe004 	addi	r2,r2,-128
  10ec24:	40c00136 	bltu	r8,r3,10ec2c <_strtod_r+0x12d0>
  10ec28:	10800804 	addi	r2,r2,32
  10ec2c:	31800044 	addi	r6,r6,1
  10ec30:	11c0691e 	bne	r2,r7,10edd8 <_strtod_r+0x147c>
  10ec34:	31c00007 	ldb	r7,0(r6)
  10ec38:	29400044 	addi	r5,r5,1
  10ec3c:	383ff31e 	bne	r7,zero,10ec0c <__alt_data_end+0xfffcec0c>
  10ec40:	d9400615 	stw	r5,24(sp)
  10ec44:	059ffc34 	movhi	r22,32752
  10ec48:	002f883a 	mov	r23,zero
  10ec4c:	003c4306 	br	10dd5c <__alt_data_end+0xfffcdd5c>
  10ec50:	002d883a 	mov	r22,zero
  10ec54:	003cad06 	br	10df0c <__alt_data_end+0xfffcdf0c>
  10ec58:	9011883a 	mov	r8,r18
  10ec5c:	df001217 	ldw	fp,72(sp)
  10ec60:	a800461e 	bne	r21,zero,10ed7c <_strtod_r+0x1420>
  10ec64:	b800451e 	bne	r23,zero,10ed7c <_strtod_r+0x1420>
  10ec68:	00800434 	movhi	r2,16
  10ec6c:	10bfffc4 	addi	r2,r2,-1
  10ec70:	b084703a 	and	r2,r22,r2
  10ec74:	1000411e 	bne	r2,zero,10ed7c <_strtod_r+0x1420>
  10ec78:	b49ffc2c 	andhi	r18,r22,32752
  10ec7c:	0081ac34 	movhi	r2,1712
  10ec80:	14803e2e 	bgeu	r2,r18,10ed7c <_strtod_r+0x1420>
  10ec84:	40800517 	ldw	r2,20(r8)
  10ec88:	1000031e 	bne	r2,zero,10ec98 <_strtod_r+0x133c>
  10ec8c:	40800417 	ldw	r2,16(r8)
  10ec90:	00c00044 	movi	r3,1
  10ec94:	1880390e 	bge	r3,r2,10ed7c <_strtod_r+0x1420>
  10ec98:	400b883a 	mov	r5,r8
  10ec9c:	01800044 	movi	r6,1
  10eca0:	8809883a 	mov	r4,r17
  10eca4:	010c96c0 	call	10c96c <__lshift>
  10eca8:	800b883a 	mov	r5,r16
  10ecac:	1009883a 	mov	r4,r2
  10ecb0:	d8801315 	stw	r2,76(sp)
  10ecb4:	010cab40 	call	10cab4 <__mcmp>
  10ecb8:	da001317 	ldw	r8,76(sp)
  10ecbc:	00802f0e 	bge	zero,r2,10ed7c <_strtod_r+0x1420>
  10ecc0:	d9000717 	ldw	r4,28(sp)
  10ecc4:	20008026 	beq	r4,zero,10eec8 <_strtod_r+0x156c>
  10ecc8:	0081ac34 	movhi	r2,1712
  10eccc:	14807e16 	blt	r2,r18,10eec8 <_strtod_r+0x156c>
  10ecd0:	0080dc34 	movhi	r2,880
  10ecd4:	14bf3a0e 	bge	r2,r18,10e9c0 <__alt_data_end+0xfffce9c0>
  10ecd8:	d9000817 	ldw	r4,32(sp)
  10ecdc:	e00b883a 	mov	r5,fp
  10ece0:	000d883a 	mov	r6,zero
  10ece4:	01ce5434 	movhi	r7,14672
  10ece8:	da001315 	stw	r8,76(sp)
  10ecec:	011776c0 	call	11776c <__muldf3>
  10ecf0:	d8800815 	stw	r2,32(sp)
  10ecf4:	1839883a 	mov	fp,r3
  10ecf8:	da001317 	ldw	r8,76(sp)
  10ecfc:	1800211e 	bne	r3,zero,10ed84 <_strtod_r+0x1428>
  10ed00:	d8c00817 	ldw	r3,32(sp)
  10ed04:	d8800517 	ldw	r2,20(sp)
  10ed08:	183e4c1e 	bne	r3,zero,10e63c <__alt_data_end+0xfffce63c>
  10ed0c:	00c00884 	movi	r3,34
  10ed10:	88c00015 	stw	r3,0(r17)
  10ed14:	003e4906 	br	10e63c <__alt_data_end+0xfffce63c>
  10ed18:	00800434 	movhi	r2,16
  10ed1c:	9011883a 	mov	r8,r18
  10ed20:	df001217 	ldw	fp,72(sp)
  10ed24:	10bfffc4 	addi	r2,r2,-1
  10ed28:	a8002226 	beq	r21,zero,10edb4 <_strtod_r+0x1458>
  10ed2c:	b086703a 	and	r3,r22,r2
  10ed30:	18804126 	beq	r3,r2,10ee38 <_strtod_r+0x14dc>
  10ed34:	d8c00d17 	ldw	r3,52(sp)
  10ed38:	18002326 	beq	r3,zero,10edc8 <_strtod_r+0x146c>
  10ed3c:	1da4703a 	and	r18,r3,r22
  10ed40:	90000e26 	beq	r18,zero,10ed7c <_strtod_r+0x1420>
  10ed44:	da001315 	stw	r8,76(sp)
  10ed48:	d9800717 	ldw	r6,28(sp)
  10ed4c:	b809883a 	mov	r4,r23
  10ed50:	b00b883a 	mov	r5,r22
  10ed54:	a8002826 	beq	r21,zero,10edf8 <_strtod_r+0x149c>
  10ed58:	010d8f80 	call	10d8f8 <sulp>
  10ed5c:	100d883a 	mov	r6,r2
  10ed60:	180f883a 	mov	r7,r3
  10ed64:	b809883a 	mov	r4,r23
  10ed68:	b00b883a 	mov	r5,r22
  10ed6c:	01162980 	call	116298 <__adddf3>
  10ed70:	da001317 	ldw	r8,76(sp)
  10ed74:	d8800815 	stw	r2,32(sp)
  10ed78:	1839883a 	mov	fp,r3
  10ed7c:	d8800717 	ldw	r2,28(sp)
  10ed80:	103fd51e 	bne	r2,zero,10ecd8 <__alt_data_end+0xfffcecd8>
  10ed84:	d8800517 	ldw	r2,20(sp)
  10ed88:	003e2c06 	br	10e63c <__alt_data_end+0xfffce63c>
  10ed8c:	0580d434 	movhi	r22,848
  10ed90:	1dad883a 	add	r22,r3,r22
  10ed94:	d8000715 	stw	zero,28(sp)
  10ed98:	003cb606 	br	10e074 <__alt_data_end+0xfffce074>
  10ed9c:	008ff834 	movhi	r2,16352
  10eda0:	0029883a 	mov	r20,zero
  10eda4:	022ff834 	movhi	r8,49120
  10eda8:	d8001015 	stw	zero,64(sp)
  10edac:	d8800d15 	stw	r2,52(sp)
  10edb0:	003dc106 	br	10e4b8 <__alt_data_end+0xfffce4b8>
  10edb4:	b084703a 	and	r2,r22,r2
  10edb8:	103fde1e 	bne	r2,zero,10ed34 <__alt_data_end+0xfffced34>
  10edbc:	b83fdd1e 	bne	r23,zero,10ed34 <__alt_data_end+0xfffced34>
  10edc0:	b49ffc2c 	andhi	r18,r22,32752
  10edc4:	003fbe06 	br	10ecc0 <__alt_data_end+0xfffcecc0>
  10edc8:	d8c00f17 	ldw	r3,60(sp)
  10edcc:	1de8703a 	and	r20,r3,r23
  10edd0:	a03fea26 	beq	r20,zero,10ed7c <__alt_data_end+0xfffced7c>
  10edd4:	003fdb06 	br	10ed44 <__alt_data_end+0xfffced44>
  10edd8:	21000044 	addi	r4,r4,1
  10eddc:	d9000615 	stw	r4,24(sp)
  10ede0:	003f9806 	br	10ec44 <__alt_data_end+0xfffcec44>
  10ede4:	014004b4 	movhi	r5,18
  10ede8:	294f2204 	addi	r5,r5,15496
  10edec:	d9400715 	stw	r5,28(sp)
  10edf0:	0025883a 	mov	r18,zero
  10edf4:	003c8c06 	br	10e028 <__alt_data_end+0xfffce028>
  10edf8:	010d8f80 	call	10d8f8 <sulp>
  10edfc:	100d883a 	mov	r6,r2
  10ee00:	180f883a 	mov	r7,r3
  10ee04:	b809883a 	mov	r4,r23
  10ee08:	b00b883a 	mov	r5,r22
  10ee0c:	0117fd80 	call	117fd8 <__subdf3>
  10ee10:	000d883a 	mov	r6,zero
  10ee14:	000f883a 	mov	r7,zero
  10ee18:	1009883a 	mov	r4,r2
  10ee1c:	180b883a 	mov	r5,r3
  10ee20:	d8800815 	stw	r2,32(sp)
  10ee24:	1839883a 	mov	fp,r3
  10ee28:	01175140 	call	117514 <__eqdf2>
  10ee2c:	da001317 	ldw	r8,76(sp)
  10ee30:	103ee326 	beq	r2,zero,10e9c0 <__alt_data_end+0xfffce9c0>
  10ee34:	003fd106 	br	10ed7c <__alt_data_end+0xfffced7c>
  10ee38:	d8c00717 	ldw	r3,28(sp)
  10ee3c:	18002026 	beq	r3,zero,10eec0 <_strtod_r+0x1564>
  10ee40:	b09ffc2c 	andhi	r2,r22,32752
  10ee44:	00c1a834 	movhi	r3,1696
  10ee48:	18801d36 	bltu	r3,r2,10eec0 <_strtod_r+0x1564>
  10ee4c:	1004d53a 	srli	r2,r2,20
  10ee50:	00c01ac4 	movi	r3,107
  10ee54:	1887c83a 	sub	r3,r3,r2
  10ee58:	00bfffc4 	movi	r2,-1
  10ee5c:	10c4983a 	sll	r2,r2,r3
  10ee60:	15ffb41e 	bne	r2,r23,10ed34 <__alt_data_end+0xfffced34>
  10ee64:	00dffc34 	movhi	r3,32752
  10ee68:	18ffffc4 	addi	r3,r3,-1
  10ee6c:	b0c03126 	beq	r22,r3,10ef34 <_strtod_r+0x15d8>
  10ee70:	b59ffc2c 	andhi	r22,r22,32752
  10ee74:	00800434 	movhi	r2,16
  10ee78:	d8000815 	stw	zero,32(sp)
  10ee7c:	b0b9883a 	add	fp,r22,r2
  10ee80:	003fbe06 	br	10ed7c <__alt_data_end+0xfffced7c>
  10ee84:	b49ffc2c 	andhi	r18,r22,32752
  10ee88:	9024d53a 	srli	r18,r18,20
  10ee8c:	00801ac4 	movi	r2,107
  10ee90:	14a5c83a 	sub	r18,r2,r18
  10ee94:	04be910e 	bge	zero,r18,10e8dc <__alt_data_end+0xfffce8dc>
  10ee98:	008007c4 	movi	r2,31
  10ee9c:	1480120e 	bge	r2,r18,10eee8 <_strtod_r+0x158c>
  10eea0:	00800d04 	movi	r2,52
  10eea4:	002f883a 	mov	r23,zero
  10eea8:	14801a0e 	bge	r2,r18,10ef14 <_strtod_r+0x15b8>
  10eeac:	0580dc34 	movhi	r22,880
  10eeb0:	003e8a06 	br	10e8dc <__alt_data_end+0xfffce8dc>
  10eeb4:	d8000715 	stw	zero,28(sp)
  10eeb8:	04be7416 	blt	zero,r18,10e88c <__alt_data_end+0xfffce88c>
  10eebc:	003e8706 	br	10e8dc <__alt_data_end+0xfffce8dc>
  10eec0:	00bfffc4 	movi	r2,-1
  10eec4:	003fe606 	br	10ee60 <__alt_data_end+0xfffcee60>
  10eec8:	073ffc34 	movhi	fp,65520
  10eecc:	9725883a 	add	r18,r18,fp
  10eed0:	017fffc4 	movi	r5,-1
  10eed4:	07000434 	movhi	fp,16
  10eed8:	e179883a 	add	fp,fp,r5
  10eedc:	d9400815 	stw	r5,32(sp)
  10eee0:	9738b03a 	or	fp,r18,fp
  10eee4:	003fa506 	br	10ed7c <__alt_data_end+0xfffced7c>
  10eee8:	00bfffc4 	movi	r2,-1
  10eeec:	14a4983a 	sll	r18,r2,r18
  10eef0:	95ee703a 	and	r23,r18,r23
  10eef4:	003e7906 	br	10e8dc <__alt_data_end+0xfffce8dc>
  10eef8:	102f883a 	mov	r23,r2
  10eefc:	182d883a 	mov	r22,r3
  10ef00:	003e7406 	br	10e8d4 <__alt_data_end+0xfffce8d4>
  10ef04:	e02d883a 	mov	r22,fp
  10ef08:	ddc00617 	ldw	r23,24(sp)
  10ef0c:	e0f9883a 	add	fp,fp,r3
  10ef10:	003ef706 	br	10eaf0 <__alt_data_end+0xfffceaf0>
  10ef14:	94bff804 	addi	r18,r18,-32
  10ef18:	00bfffc4 	movi	r2,-1
  10ef1c:	14a4983a 	sll	r18,r2,r18
  10ef20:	95ac703a 	and	r22,r18,r22
  10ef24:	003e6d06 	br	10e8dc <__alt_data_end+0xfffce8dc>
  10ef28:	102f883a 	mov	r23,r2
  10ef2c:	182d883a 	mov	r22,r3
  10ef30:	003c3d06 	br	10e028 <__alt_data_end+0xfffce028>
  10ef34:	00ffffc4 	movi	r3,-1
  10ef38:	10ffcd1e 	bne	r2,r3,10ee70 <__alt_data_end+0xfffcee70>
  10ef3c:	003dba06 	br	10e628 <__alt_data_end+0xfffce628>

0010ef40 <strtod>:
  10ef40:	008004b4 	movhi	r2,18
  10ef44:	10972d04 	addi	r2,r2,23732
  10ef48:	280d883a 	mov	r6,r5
  10ef4c:	200b883a 	mov	r5,r4
  10ef50:	11000017 	ldw	r4,0(r2)
  10ef54:	010d95c1 	jmpi	10d95c <_strtod_r>

0010ef58 <strtof>:
  10ef58:	defffb04 	addi	sp,sp,-20
  10ef5c:	dcc00315 	stw	r19,12(sp)
  10ef60:	04c004b4 	movhi	r19,18
  10ef64:	9cd72d04 	addi	r19,r19,23732
  10ef68:	280d883a 	mov	r6,r5
  10ef6c:	200b883a 	mov	r5,r4
  10ef70:	99000017 	ldw	r4,0(r19)
  10ef74:	dfc00415 	stw	ra,16(sp)
  10ef78:	dc800215 	stw	r18,8(sp)
  10ef7c:	dc400115 	stw	r17,4(sp)
  10ef80:	dc000015 	stw	r16,0(sp)
  10ef84:	010d95c0 	call	10d95c <_strtod_r>
  10ef88:	1009883a 	mov	r4,r2
  10ef8c:	180b883a 	mov	r5,r3
  10ef90:	1025883a 	mov	r18,r2
  10ef94:	1823883a 	mov	r17,r3
  10ef98:	0118ad80 	call	118ad8 <__truncdfsf2>
  10ef9c:	000b883a 	mov	r5,zero
  10efa0:	1009883a 	mov	r4,r2
  10efa4:	1021883a 	mov	r16,r2
  10efa8:	011609c0 	call	11609c <__eqsf2>
  10efac:	1000111e 	bne	r2,zero,10eff4 <strtof+0x9c>
  10efb0:	000d883a 	mov	r6,zero
  10efb4:	000f883a 	mov	r7,zero
  10efb8:	9009883a 	mov	r4,r18
  10efbc:	880b883a 	mov	r5,r17
  10efc0:	01175140 	call	117514 <__eqdf2>
  10efc4:	10000b26 	beq	r2,zero,10eff4 <strtof+0x9c>
  10efc8:	98800017 	ldw	r2,0(r19)
  10efcc:	00c00884 	movi	r3,34
  10efd0:	10c00015 	stw	r3,0(r2)
  10efd4:	8005883a 	mov	r2,r16
  10efd8:	dfc00417 	ldw	ra,16(sp)
  10efdc:	dcc00317 	ldw	r19,12(sp)
  10efe0:	dc800217 	ldw	r18,8(sp)
  10efe4:	dc400117 	ldw	r17,4(sp)
  10efe8:	dc000017 	ldw	r16,0(sp)
  10efec:	dec00504 	addi	sp,sp,20
  10eff0:	f800283a 	ret
  10eff4:	015fe034 	movhi	r5,32640
  10eff8:	297fffc4 	addi	r5,r5,-1
  10effc:	8009883a 	mov	r4,r16
  10f000:	01161140 	call	116114 <__gesf2>
  10f004:	0080070e 	bge	zero,r2,10f024 <strtof+0xcc>
  10f008:	01dffc34 	movhi	r7,32752
  10f00c:	39ffffc4 	addi	r7,r7,-1
  10f010:	01bfffc4 	movi	r6,-1
  10f014:	9009883a 	mov	r4,r18
  10f018:	880b883a 	mov	r5,r17
  10f01c:	011759c0 	call	11759c <__gedf2>
  10f020:	00bfe90e 	bge	zero,r2,10efc8 <__alt_data_end+0xfffcefc8>
  10f024:	017fe034 	movhi	r5,65408
  10f028:	297fffc4 	addi	r5,r5,-1
  10f02c:	8009883a 	mov	r4,r16
  10f030:	01161d00 	call	1161d0 <__lesf2>
  10f034:	103fe70e 	bge	r2,zero,10efd4 <__alt_data_end+0xfffcefd4>
  10f038:	01fffc34 	movhi	r7,65520
  10f03c:	39ffffc4 	addi	r7,r7,-1
  10f040:	01bfffc4 	movi	r6,-1
  10f044:	9009883a 	mov	r4,r18
  10f048:	880b883a 	mov	r5,r17
  10f04c:	01176780 	call	117678 <__ledf2>
  10f050:	103fdd0e 	bge	r2,zero,10efc8 <__alt_data_end+0xfffcefc8>
  10f054:	003fdf06 	br	10efd4 <__alt_data_end+0xfffcefd4>

0010f058 <_strtol_r>:
  10f058:	008004b4 	movhi	r2,18
  10f05c:	defff204 	addi	sp,sp,-56
  10f060:	10973004 	addi	r2,r2,23744
  10f064:	dd800a15 	stw	r22,40(sp)
  10f068:	15800017 	ldw	r22,0(r2)
  10f06c:	df000c15 	stw	fp,48(sp)
  10f070:	d9000315 	stw	r4,12(sp)
  10f074:	dfc00d15 	stw	ra,52(sp)
  10f078:	ddc00b15 	stw	r23,44(sp)
  10f07c:	dd400915 	stw	r21,36(sp)
  10f080:	dd000815 	stw	r20,32(sp)
  10f084:	dcc00715 	stw	r19,28(sp)
  10f088:	dc800615 	stw	r18,24(sp)
  10f08c:	dc400515 	stw	r17,20(sp)
  10f090:	dc000415 	stw	r16,16(sp)
  10f094:	d9400215 	stw	r5,8(sp)
  10f098:	d9800015 	stw	r6,0(sp)
  10f09c:	3839883a 	mov	fp,r7
  10f0a0:	2809883a 	mov	r4,r5
  10f0a4:	24000003 	ldbu	r16,0(r4)
  10f0a8:	24400044 	addi	r17,r4,1
  10f0ac:	2007883a 	mov	r3,r4
  10f0b0:	b405883a 	add	r2,r22,r16
  10f0b4:	10800043 	ldbu	r2,1(r2)
  10f0b8:	8809883a 	mov	r4,r17
  10f0bc:	1080020c 	andi	r2,r2,8
  10f0c0:	103ff81e 	bne	r2,zero,10f0a4 <__alt_data_end+0xfffcf0a4>
  10f0c4:	00800b44 	movi	r2,45
  10f0c8:	80805526 	beq	r16,r2,10f220 <_strtol_r+0x1c8>
  10f0cc:	00800ac4 	movi	r2,43
  10f0d0:	80806026 	beq	r16,r2,10f254 <_strtol_r+0x1fc>
  10f0d4:	0029883a 	mov	r20,zero
  10f0d8:	e0004726 	beq	fp,zero,10f1f8 <_strtol_r+0x1a0>
  10f0dc:	00800404 	movi	r2,16
  10f0e0:	e0806626 	beq	fp,r2,10f27c <_strtol_r+0x224>
  10f0e4:	e027883a 	mov	r19,fp
  10f0e8:	00a00034 	movhi	r2,32768
  10f0ec:	a025003a 	cmpeq	r18,r20,zero
  10f0f0:	14a5c83a 	sub	r18,r2,r18
  10f0f4:	9009883a 	mov	r4,r18
  10f0f8:	980b883a 	mov	r5,r19
  10f0fc:	011601c0 	call	11601c <__umodsi3>
  10f100:	9009883a 	mov	r4,r18
  10f104:	980b883a 	mov	r5,r19
  10f108:	d8800115 	stw	r2,4(sp)
  10f10c:	0115fb80 	call	115fb8 <__udivsi3>
  10f110:	b407883a 	add	r3,r22,r16
  10f114:	18c00043 	ldbu	r3,1(r3)
  10f118:	102b883a 	mov	r21,r2
  10f11c:	0009883a 	mov	r4,zero
  10f120:	1940010c 	andi	r5,r3,4
  10f124:	0005883a 	mov	r2,zero
  10f128:	04800044 	movi	r18,1
  10f12c:	05ffffc4 	movi	r23,-1
  10f130:	28000f26 	beq	r5,zero,10f170 <_strtol_r+0x118>
  10f134:	843ff404 	addi	r16,r16,-48
  10f138:	8700130e 	bge	r16,fp,10f188 <_strtol_r+0x130>
  10f13c:	15c00626 	beq	r2,r23,10f158 <_strtol_r+0x100>
  10f140:	a9002936 	bltu	r21,r4,10f1e8 <_strtol_r+0x190>
  10f144:	25402626 	beq	r4,r21,10f1e0 <_strtol_r+0x188>
  10f148:	980b883a 	mov	r5,r19
  10f14c:	01160740 	call	116074 <__mulsi3>
  10f150:	8089883a 	add	r4,r16,r2
  10f154:	00800044 	movi	r2,1
  10f158:	8c000003 	ldbu	r16,0(r17)
  10f15c:	8c400044 	addi	r17,r17,1
  10f160:	b407883a 	add	r3,r22,r16
  10f164:	18c00043 	ldbu	r3,1(r3)
  10f168:	1940010c 	andi	r5,r3,4
  10f16c:	283ff11e 	bne	r5,zero,10f134 <__alt_data_end+0xfffcf134>
  10f170:	18c000cc 	andi	r3,r3,3
  10f174:	18000426 	beq	r3,zero,10f188 <_strtol_r+0x130>
  10f178:	1c801d26 	beq	r3,r18,10f1f0 <_strtol_r+0x198>
  10f17c:	00c015c4 	movi	r3,87
  10f180:	80e1c83a 	sub	r16,r16,r3
  10f184:	873fed16 	blt	r16,fp,10f13c <__alt_data_end+0xfffcf13c>
  10f188:	00ffffc4 	movi	r3,-1
  10f18c:	10c02826 	beq	r2,r3,10f230 <_strtol_r+0x1d8>
  10f190:	a0001e1e 	bne	r20,zero,10f20c <_strtol_r+0x1b4>
  10f194:	d8c00017 	ldw	r3,0(sp)
  10f198:	18004326 	beq	r3,zero,10f2a8 <_strtol_r+0x250>
  10f19c:	10001d1e 	bne	r2,zero,10f214 <_strtol_r+0x1bc>
  10f1a0:	dd800217 	ldw	r22,8(sp)
  10f1a4:	2005883a 	mov	r2,r4
  10f1a8:	d8c00017 	ldw	r3,0(sp)
  10f1ac:	1d800015 	stw	r22,0(r3)
  10f1b0:	dfc00d17 	ldw	ra,52(sp)
  10f1b4:	df000c17 	ldw	fp,48(sp)
  10f1b8:	ddc00b17 	ldw	r23,44(sp)
  10f1bc:	dd800a17 	ldw	r22,40(sp)
  10f1c0:	dd400917 	ldw	r21,36(sp)
  10f1c4:	dd000817 	ldw	r20,32(sp)
  10f1c8:	dcc00717 	ldw	r19,28(sp)
  10f1cc:	dc800617 	ldw	r18,24(sp)
  10f1d0:	dc400517 	ldw	r17,20(sp)
  10f1d4:	dc000417 	ldw	r16,16(sp)
  10f1d8:	dec00e04 	addi	sp,sp,56
  10f1dc:	f800283a 	ret
  10f1e0:	d8c00117 	ldw	r3,4(sp)
  10f1e4:	1c3fd80e 	bge	r3,r16,10f148 <__alt_data_end+0xfffcf148>
  10f1e8:	00bfffc4 	movi	r2,-1
  10f1ec:	003fda06 	br	10f158 <__alt_data_end+0xfffcf158>
  10f1f0:	00c00dc4 	movi	r3,55
  10f1f4:	003fe206 	br	10f180 <__alt_data_end+0xfffcf180>
  10f1f8:	00800c04 	movi	r2,48
  10f1fc:	80801926 	beq	r16,r2,10f264 <_strtol_r+0x20c>
  10f200:	07000284 	movi	fp,10
  10f204:	e027883a 	mov	r19,fp
  10f208:	003fb706 	br	10f0e8 <__alt_data_end+0xfffcf0e8>
  10f20c:	0109c83a 	sub	r4,zero,r4
  10f210:	003fe006 	br	10f194 <__alt_data_end+0xfffcf194>
  10f214:	2005883a 	mov	r2,r4
  10f218:	8dbfffc4 	addi	r22,r17,-1
  10f21c:	003fe206 	br	10f1a8 <__alt_data_end+0xfffcf1a8>
  10f220:	1c400084 	addi	r17,r3,2
  10f224:	1c000043 	ldbu	r16,1(r3)
  10f228:	05000044 	movi	r20,1
  10f22c:	003faa06 	br	10f0d8 <__alt_data_end+0xfffcf0d8>
  10f230:	d9000317 	ldw	r4,12(sp)
  10f234:	00c00884 	movi	r3,34
  10f238:	a005003a 	cmpeq	r2,r20,zero
  10f23c:	20c00015 	stw	r3,0(r4)
  10f240:	00e00034 	movhi	r3,32768
  10f244:	1885c83a 	sub	r2,r3,r2
  10f248:	d8c00017 	ldw	r3,0(sp)
  10f24c:	183ff21e 	bne	r3,zero,10f218 <__alt_data_end+0xfffcf218>
  10f250:	003fd706 	br	10f1b0 <__alt_data_end+0xfffcf1b0>
  10f254:	1c400084 	addi	r17,r3,2
  10f258:	1c000043 	ldbu	r16,1(r3)
  10f25c:	0029883a 	mov	r20,zero
  10f260:	003f9d06 	br	10f0d8 <__alt_data_end+0xfffcf0d8>
  10f264:	88800003 	ldbu	r2,0(r17)
  10f268:	00c01604 	movi	r3,88
  10f26c:	108037cc 	andi	r2,r2,223
  10f270:	10c00826 	beq	r2,r3,10f294 <_strtol_r+0x23c>
  10f274:	07000204 	movi	fp,8
  10f278:	003f9a06 	br	10f0e4 <__alt_data_end+0xfffcf0e4>
  10f27c:	00800c04 	movi	r2,48
  10f280:	80bf981e 	bne	r16,r2,10f0e4 <__alt_data_end+0xfffcf0e4>
  10f284:	88800003 	ldbu	r2,0(r17)
  10f288:	00c01604 	movi	r3,88
  10f28c:	108037cc 	andi	r2,r2,223
  10f290:	10ff941e 	bne	r2,r3,10f0e4 <__alt_data_end+0xfffcf0e4>
  10f294:	04c00404 	movi	r19,16
  10f298:	8c000043 	ldbu	r16,1(r17)
  10f29c:	9839883a 	mov	fp,r19
  10f2a0:	8c400084 	addi	r17,r17,2
  10f2a4:	003f9006 	br	10f0e8 <__alt_data_end+0xfffcf0e8>
  10f2a8:	2005883a 	mov	r2,r4
  10f2ac:	003fc006 	br	10f1b0 <__alt_data_end+0xfffcf1b0>

0010f2b0 <strtol>:
  10f2b0:	008004b4 	movhi	r2,18
  10f2b4:	10972d04 	addi	r2,r2,23732
  10f2b8:	300f883a 	mov	r7,r6
  10f2bc:	280d883a 	mov	r6,r5
  10f2c0:	200b883a 	mov	r5,r4
  10f2c4:	11000017 	ldw	r4,0(r2)
  10f2c8:	010f0581 	jmpi	10f058 <_strtol_r>

0010f2cc <_strtoll_r>:
  10f2cc:	008004b4 	movhi	r2,18
  10f2d0:	deffef04 	addi	sp,sp,-68
  10f2d4:	10973004 	addi	r2,r2,23744
  10f2d8:	dd800d15 	stw	r22,52(sp)
  10f2dc:	15800017 	ldw	r22,0(r2)
  10f2e0:	df000f15 	stw	fp,60(sp)
  10f2e4:	d9000515 	stw	r4,20(sp)
  10f2e8:	dfc01015 	stw	ra,64(sp)
  10f2ec:	ddc00e15 	stw	r23,56(sp)
  10f2f0:	dd400c15 	stw	r21,48(sp)
  10f2f4:	dd000b15 	stw	r20,44(sp)
  10f2f8:	dcc00a15 	stw	r19,40(sp)
  10f2fc:	dc800915 	stw	r18,36(sp)
  10f300:	dc400815 	stw	r17,32(sp)
  10f304:	dc000715 	stw	r16,28(sp)
  10f308:	d9400415 	stw	r5,16(sp)
  10f30c:	d9800215 	stw	r6,8(sp)
  10f310:	3839883a 	mov	fp,r7
  10f314:	2809883a 	mov	r4,r5
  10f318:	22000003 	ldbu	r8,0(r4)
  10f31c:	24400044 	addi	r17,r4,1
  10f320:	2007883a 	mov	r3,r4
  10f324:	b205883a 	add	r2,r22,r8
  10f328:	10800043 	ldbu	r2,1(r2)
  10f32c:	8809883a 	mov	r4,r17
  10f330:	1080020c 	andi	r2,r2,8
  10f334:	103ff81e 	bne	r2,zero,10f318 <__alt_data_end+0xfffcf318>
  10f338:	00800b44 	movi	r2,45
  10f33c:	40807e26 	beq	r8,r2,10f538 <_strtoll_r+0x26c>
  10f340:	00800ac4 	movi	r2,43
  10f344:	40808126 	beq	r8,r2,10f54c <_strtoll_r+0x280>
  10f348:	d8000115 	stw	zero,4(sp)
  10f34c:	e0000b26 	beq	fp,zero,10f37c <_strtoll_r+0xb0>
  10f350:	00800404 	movi	r2,16
  10f354:	e0808926 	beq	fp,r2,10f57c <_strtoll_r+0x2b0>
  10f358:	e00bd7fa 	srai	r5,fp,31
  10f35c:	d9000117 	ldw	r4,4(sp)
  10f360:	e025883a 	mov	r18,fp
  10f364:	d9400015 	stw	r5,0(sp)
  10f368:	20000b1e 	bne	r4,zero,10f398 <_strtoll_r+0xcc>
  10f36c:	04200034 	movhi	r16,32768
  10f370:	843fffc4 	addi	r16,r16,-1
  10f374:	053fffc4 	movi	r20,-1
  10f378:	00000906 	br	10f3a0 <_strtoll_r+0xd4>
  10f37c:	00800c04 	movi	r2,48
  10f380:	40807626 	beq	r8,r2,10f55c <_strtoll_r+0x290>
  10f384:	04800284 	movi	r18,10
  10f388:	d8000015 	stw	zero,0(sp)
  10f38c:	9039883a 	mov	fp,r18
  10f390:	d9000117 	ldw	r4,4(sp)
  10f394:	203ff526 	beq	r4,zero,10f36c <__alt_data_end+0xfffcf36c>
  10f398:	0029883a 	mov	r20,zero
  10f39c:	04200034 	movhi	r16,32768
  10f3a0:	d9c00017 	ldw	r7,0(sp)
  10f3a4:	a009883a 	mov	r4,r20
  10f3a8:	800b883a 	mov	r5,r16
  10f3ac:	900d883a 	mov	r6,r18
  10f3b0:	da000615 	stw	r8,24(sp)
  10f3b4:	01158fc0 	call	1158fc <__umoddi3>
  10f3b8:	d9c00017 	ldw	r7,0(sp)
  10f3bc:	a009883a 	mov	r4,r20
  10f3c0:	800b883a 	mov	r5,r16
  10f3c4:	900d883a 	mov	r6,r18
  10f3c8:	d8800315 	stw	r2,12(sp)
  10f3cc:	01153000 	call	115300 <__udivdi3>
  10f3d0:	da000617 	ldw	r8,24(sp)
  10f3d4:	1829883a 	mov	r20,r3
  10f3d8:	882f883a 	mov	r23,r17
  10f3dc:	b207883a 	add	r3,r22,r8
  10f3e0:	19800043 	ldbu	r6,1(r3)
  10f3e4:	1021883a 	mov	r16,r2
  10f3e8:	000f883a 	mov	r7,zero
  10f3ec:	30c0010c 	andi	r3,r6,4
  10f3f0:	0009883a 	mov	r4,zero
  10f3f4:	000b883a 	mov	r5,zero
  10f3f8:	04400044 	movi	r17,1
  10f3fc:	057fffc4 	movi	r21,-1
  10f400:	18000d26 	beq	r3,zero,10f438 <_strtoll_r+0x16c>
  10f404:	44fff404 	addi	r19,r8,-48
  10f408:	9f00110e 	bge	r19,fp,10f450 <_strtoll_r+0x184>
  10f40c:	3d400426 	beq	r7,r21,10f420 <_strtoll_r+0x154>
  10f410:	a1400236 	bltu	r20,r5,10f41c <_strtoll_r+0x150>
  10f414:	2d002a1e 	bne	r5,r20,10f4c0 <_strtoll_r+0x1f4>
  10f418:	8100292e 	bgeu	r16,r4,10f4c0 <_strtoll_r+0x1f4>
  10f41c:	01ffffc4 	movi	r7,-1
  10f420:	ba000003 	ldbu	r8,0(r23)
  10f424:	bdc00044 	addi	r23,r23,1
  10f428:	b207883a 	add	r3,r22,r8
  10f42c:	19800043 	ldbu	r6,1(r3)
  10f430:	30c0010c 	andi	r3,r6,4
  10f434:	183ff31e 	bne	r3,zero,10f404 <__alt_data_end+0xfffcf404>
  10f438:	318000cc 	andi	r6,r6,3
  10f43c:	30000426 	beq	r6,zero,10f450 <_strtoll_r+0x184>
  10f440:	34402b26 	beq	r6,r17,10f4f0 <_strtoll_r+0x224>
  10f444:	00c015c4 	movi	r3,87
  10f448:	40e7c83a 	sub	r19,r8,r3
  10f44c:	9f3fef16 	blt	r19,fp,10f40c <__alt_data_end+0xfffcf40c>
  10f450:	00bfffc4 	movi	r2,-1
  10f454:	38802c26 	beq	r7,r2,10f508 <_strtoll_r+0x23c>
  10f458:	d8800117 	ldw	r2,4(sp)
  10f45c:	10000426 	beq	r2,zero,10f470 <_strtoll_r+0x1a4>
  10f460:	0109c83a 	sub	r4,zero,r4
  10f464:	2004c03a 	cmpne	r2,r4,zero
  10f468:	0151c83a 	sub	r8,zero,r5
  10f46c:	408bc83a 	sub	r5,r8,r2
  10f470:	d8800217 	ldw	r2,8(sp)
  10f474:	10005026 	beq	r2,zero,10f5b8 <_strtoll_r+0x2ec>
  10f478:	2005883a 	mov	r2,r4
  10f47c:	2807883a 	mov	r3,r5
  10f480:	38002b1e 	bne	r7,zero,10f530 <_strtoll_r+0x264>
  10f484:	dd800417 	ldw	r22,16(sp)
  10f488:	d9000217 	ldw	r4,8(sp)
  10f48c:	25800015 	stw	r22,0(r4)
  10f490:	dfc01017 	ldw	ra,64(sp)
  10f494:	df000f17 	ldw	fp,60(sp)
  10f498:	ddc00e17 	ldw	r23,56(sp)
  10f49c:	dd800d17 	ldw	r22,52(sp)
  10f4a0:	dd400c17 	ldw	r21,48(sp)
  10f4a4:	dd000b17 	ldw	r20,44(sp)
  10f4a8:	dcc00a17 	ldw	r19,40(sp)
  10f4ac:	dc800917 	ldw	r18,36(sp)
  10f4b0:	dc400817 	ldw	r17,32(sp)
  10f4b4:	dc000717 	ldw	r16,28(sp)
  10f4b8:	dec01104 	addi	sp,sp,68
  10f4bc:	f800283a 	ret
  10f4c0:	24000d26 	beq	r4,r16,10f4f8 <_strtoll_r+0x22c>
  10f4c4:	d9c00017 	ldw	r7,0(sp)
  10f4c8:	900d883a 	mov	r6,r18
  10f4cc:	01151800 	call	115180 <__muldi3>
  10f4d0:	980bd7fa 	srai	r5,r19,31
  10f4d4:	9885883a 	add	r2,r19,r2
  10f4d8:	14d1803a 	cmpltu	r8,r2,r19
  10f4dc:	28c7883a 	add	r3,r5,r3
  10f4e0:	1009883a 	mov	r4,r2
  10f4e4:	40cb883a 	add	r5,r8,r3
  10f4e8:	01c00044 	movi	r7,1
  10f4ec:	003fcc06 	br	10f420 <__alt_data_end+0xfffcf420>
  10f4f0:	00c00dc4 	movi	r3,55
  10f4f4:	003fd406 	br	10f448 <__alt_data_end+0xfffcf448>
  10f4f8:	2d3ff21e 	bne	r5,r20,10f4c4 <__alt_data_end+0xfffcf4c4>
  10f4fc:	d8800317 	ldw	r2,12(sp)
  10f500:	14ffc616 	blt	r2,r19,10f41c <__alt_data_end+0xfffcf41c>
  10f504:	003fef06 	br	10f4c4 <__alt_data_end+0xfffcf4c4>
  10f508:	d9000117 	ldw	r4,4(sp)
  10f50c:	2000271e 	bne	r4,zero,10f5ac <_strtoll_r+0x2e0>
  10f510:	00e00034 	movhi	r3,32768
  10f514:	18ffffc4 	addi	r3,r3,-1
  10f518:	3805883a 	mov	r2,r7
  10f51c:	d9400517 	ldw	r5,20(sp)
  10f520:	01000884 	movi	r4,34
  10f524:	29000015 	stw	r4,0(r5)
  10f528:	d9000217 	ldw	r4,8(sp)
  10f52c:	203fd826 	beq	r4,zero,10f490 <__alt_data_end+0xfffcf490>
  10f530:	bdbfffc4 	addi	r22,r23,-1
  10f534:	003fd406 	br	10f488 <__alt_data_end+0xfffcf488>
  10f538:	00800044 	movi	r2,1
  10f53c:	1c400084 	addi	r17,r3,2
  10f540:	1a000043 	ldbu	r8,1(r3)
  10f544:	d8800115 	stw	r2,4(sp)
  10f548:	003f8006 	br	10f34c <__alt_data_end+0xfffcf34c>
  10f54c:	1c400084 	addi	r17,r3,2
  10f550:	1a000043 	ldbu	r8,1(r3)
  10f554:	d8000115 	stw	zero,4(sp)
  10f558:	003f7c06 	br	10f34c <__alt_data_end+0xfffcf34c>
  10f55c:	88800003 	ldbu	r2,0(r17)
  10f560:	00c01604 	movi	r3,88
  10f564:	108037cc 	andi	r2,r2,223
  10f568:	10c00a26 	beq	r2,r3,10f594 <_strtoll_r+0x2c8>
  10f56c:	04800204 	movi	r18,8
  10f570:	d8000015 	stw	zero,0(sp)
  10f574:	9039883a 	mov	fp,r18
  10f578:	003f8506 	br	10f390 <__alt_data_end+0xfffcf390>
  10f57c:	00800c04 	movi	r2,48
  10f580:	4080101e 	bne	r8,r2,10f5c4 <_strtoll_r+0x2f8>
  10f584:	88800003 	ldbu	r2,0(r17)
  10f588:	00c01604 	movi	r3,88
  10f58c:	108037cc 	andi	r2,r2,223
  10f590:	10c00c1e 	bne	r2,r3,10f5c4 <_strtoll_r+0x2f8>
  10f594:	04800404 	movi	r18,16
  10f598:	8a000043 	ldbu	r8,1(r17)
  10f59c:	d8000015 	stw	zero,0(sp)
  10f5a0:	8c400084 	addi	r17,r17,2
  10f5a4:	9039883a 	mov	fp,r18
  10f5a8:	003f7906 	br	10f390 <__alt_data_end+0xfffcf390>
  10f5ac:	0005883a 	mov	r2,zero
  10f5b0:	00e00034 	movhi	r3,32768
  10f5b4:	003fd906 	br	10f51c <__alt_data_end+0xfffcf51c>
  10f5b8:	2005883a 	mov	r2,r4
  10f5bc:	2807883a 	mov	r3,r5
  10f5c0:	003fb306 	br	10f490 <__alt_data_end+0xfffcf490>
  10f5c4:	e025883a 	mov	r18,fp
  10f5c8:	d8000015 	stw	zero,0(sp)
  10f5cc:	003f7006 	br	10f390 <__alt_data_end+0xfffcf390>

0010f5d0 <_strtoul_r>:
  10f5d0:	008004b4 	movhi	r2,18
  10f5d4:	defff204 	addi	sp,sp,-56
  10f5d8:	10973004 	addi	r2,r2,23744
  10f5dc:	dd800a15 	stw	r22,40(sp)
  10f5e0:	15800017 	ldw	r22,0(r2)
  10f5e4:	df000c15 	stw	fp,48(sp)
  10f5e8:	dd400915 	stw	r21,36(sp)
  10f5ec:	d9000315 	stw	r4,12(sp)
  10f5f0:	dfc00d15 	stw	ra,52(sp)
  10f5f4:	ddc00b15 	stw	r23,44(sp)
  10f5f8:	dd000815 	stw	r20,32(sp)
  10f5fc:	dcc00715 	stw	r19,28(sp)
  10f600:	dc800615 	stw	r18,24(sp)
  10f604:	dc400515 	stw	r17,20(sp)
  10f608:	dc000415 	stw	r16,16(sp)
  10f60c:	d9400015 	stw	r5,0(sp)
  10f610:	302b883a 	mov	r21,r6
  10f614:	3839883a 	mov	fp,r7
  10f618:	2809883a 	mov	r4,r5
  10f61c:	24000003 	ldbu	r16,0(r4)
  10f620:	24400044 	addi	r17,r4,1
  10f624:	2007883a 	mov	r3,r4
  10f628:	b405883a 	add	r2,r22,r16
  10f62c:	10800043 	ldbu	r2,1(r2)
  10f630:	8809883a 	mov	r4,r17
  10f634:	1080020c 	andi	r2,r2,8
  10f638:	103ff81e 	bne	r2,zero,10f61c <__alt_data_end+0xfffcf61c>
  10f63c:	00800b44 	movi	r2,45
  10f640:	80805826 	beq	r16,r2,10f7a4 <_strtoul_r+0x1d4>
  10f644:	00800ac4 	movi	r2,43
  10f648:	80805b26 	beq	r16,r2,10f7b8 <_strtoul_r+0x1e8>
  10f64c:	d8000215 	stw	zero,8(sp)
  10f650:	e0000d26 	beq	fp,zero,10f688 <_strtoul_r+0xb8>
  10f654:	00800404 	movi	r2,16
  10f658:	e0806626 	beq	fp,r2,10f7f4 <_strtoul_r+0x224>
  10f65c:	013fffc4 	movi	r4,-1
  10f660:	e00b883a 	mov	r5,fp
  10f664:	0115fb80 	call	115fb8 <__udivsi3>
  10f668:	e00b883a 	mov	r5,fp
  10f66c:	013fffc4 	movi	r4,-1
  10f670:	1025883a 	mov	r18,r2
  10f674:	011601c0 	call	11601c <__umodsi3>
  10f678:	d8800115 	stw	r2,4(sp)
  10f67c:	e027883a 	mov	r19,fp
  10f680:	902f883a 	mov	r23,r18
  10f684:	00000806 	br	10f6a8 <_strtoul_r+0xd8>
  10f688:	00800c04 	movi	r2,48
  10f68c:	80804e26 	beq	r16,r2,10f7c8 <_strtoul_r+0x1f8>
  10f690:	07000284 	movi	fp,10
  10f694:	00c00144 	movi	r3,5
  10f698:	05c666b4 	movhi	r23,6554
  10f69c:	d8c00115 	stw	r3,4(sp)
  10f6a0:	bde66644 	addi	r23,r23,-26215
  10f6a4:	e027883a 	mov	r19,fp
  10f6a8:	b407883a 	add	r3,r22,r16
  10f6ac:	18c00043 	ldbu	r3,1(r3)
  10f6b0:	0005883a 	mov	r2,zero
  10f6b4:	0009883a 	mov	r4,zero
  10f6b8:	1940010c 	andi	r5,r3,4
  10f6bc:	04800044 	movi	r18,1
  10f6c0:	053fffc4 	movi	r20,-1
  10f6c4:	28000f26 	beq	r5,zero,10f704 <_strtoul_r+0x134>
  10f6c8:	843ff404 	addi	r16,r16,-48
  10f6cc:	8700130e 	bge	r16,fp,10f71c <_strtoul_r+0x14c>
  10f6d0:	15000626 	beq	r2,r20,10f6ec <_strtoul_r+0x11c>
  10f6d4:	b9002836 	bltu	r23,r4,10f778 <_strtoul_r+0x1a8>
  10f6d8:	25c02526 	beq	r4,r23,10f770 <_strtoul_r+0x1a0>
  10f6dc:	980b883a 	mov	r5,r19
  10f6e0:	01160740 	call	116074 <__mulsi3>
  10f6e4:	8089883a 	add	r4,r16,r2
  10f6e8:	00800044 	movi	r2,1
  10f6ec:	8c000003 	ldbu	r16,0(r17)
  10f6f0:	8c400044 	addi	r17,r17,1
  10f6f4:	b407883a 	add	r3,r22,r16
  10f6f8:	18c00043 	ldbu	r3,1(r3)
  10f6fc:	1940010c 	andi	r5,r3,4
  10f700:	283ff11e 	bne	r5,zero,10f6c8 <__alt_data_end+0xfffcf6c8>
  10f704:	18c000cc 	andi	r3,r3,3
  10f708:	18000426 	beq	r3,zero,10f71c <_strtoul_r+0x14c>
  10f70c:	1c801c26 	beq	r3,r18,10f780 <_strtoul_r+0x1b0>
  10f710:	00c015c4 	movi	r3,87
  10f714:	80e1c83a 	sub	r16,r16,r3
  10f718:	873fed16 	blt	r16,fp,10f6d0 <__alt_data_end+0xfffcf6d0>
  10f71c:	10001a16 	blt	r2,zero,10f788 <_strtoul_r+0x1b8>
  10f720:	d8c00217 	ldw	r3,8(sp)
  10f724:	18000126 	beq	r3,zero,10f72c <_strtoul_r+0x15c>
  10f728:	0109c83a 	sub	r4,zero,r4
  10f72c:	a8000326 	beq	r21,zero,10f73c <_strtoul_r+0x16c>
  10f730:	dd000017 	ldw	r20,0(sp)
  10f734:	1000191e 	bne	r2,zero,10f79c <_strtoul_r+0x1cc>
  10f738:	ad000015 	stw	r20,0(r21)
  10f73c:	2005883a 	mov	r2,r4
  10f740:	dfc00d17 	ldw	ra,52(sp)
  10f744:	df000c17 	ldw	fp,48(sp)
  10f748:	ddc00b17 	ldw	r23,44(sp)
  10f74c:	dd800a17 	ldw	r22,40(sp)
  10f750:	dd400917 	ldw	r21,36(sp)
  10f754:	dd000817 	ldw	r20,32(sp)
  10f758:	dcc00717 	ldw	r19,28(sp)
  10f75c:	dc800617 	ldw	r18,24(sp)
  10f760:	dc400517 	ldw	r17,20(sp)
  10f764:	dc000417 	ldw	r16,16(sp)
  10f768:	dec00e04 	addi	sp,sp,56
  10f76c:	f800283a 	ret
  10f770:	d8c00117 	ldw	r3,4(sp)
  10f774:	1c3fd90e 	bge	r3,r16,10f6dc <__alt_data_end+0xfffcf6dc>
  10f778:	00bfffc4 	movi	r2,-1
  10f77c:	003fdb06 	br	10f6ec <__alt_data_end+0xfffcf6ec>
  10f780:	00c00dc4 	movi	r3,55
  10f784:	003fe306 	br	10f714 <__alt_data_end+0xfffcf714>
  10f788:	d8c00317 	ldw	r3,12(sp)
  10f78c:	00800884 	movi	r2,34
  10f790:	013fffc4 	movi	r4,-1
  10f794:	18800015 	stw	r2,0(r3)
  10f798:	a83fe826 	beq	r21,zero,10f73c <__alt_data_end+0xfffcf73c>
  10f79c:	8d3fffc4 	addi	r20,r17,-1
  10f7a0:	003fe506 	br	10f738 <__alt_data_end+0xfffcf738>
  10f7a4:	1c400084 	addi	r17,r3,2
  10f7a8:	1c000043 	ldbu	r16,1(r3)
  10f7ac:	00c00044 	movi	r3,1
  10f7b0:	d8c00215 	stw	r3,8(sp)
  10f7b4:	003fa606 	br	10f650 <__alt_data_end+0xfffcf650>
  10f7b8:	1c400084 	addi	r17,r3,2
  10f7bc:	1c000043 	ldbu	r16,1(r3)
  10f7c0:	d8000215 	stw	zero,8(sp)
  10f7c4:	003fa206 	br	10f650 <__alt_data_end+0xfffcf650>
  10f7c8:	88800003 	ldbu	r2,0(r17)
  10f7cc:	00c01604 	movi	r3,88
  10f7d0:	108037cc 	andi	r2,r2,223
  10f7d4:	10c00d26 	beq	r2,r3,10f80c <_strtoul_r+0x23c>
  10f7d8:	07000204 	movi	fp,8
  10f7dc:	00c001c4 	movi	r3,7
  10f7e0:	05c80034 	movhi	r23,8192
  10f7e4:	d8c00115 	stw	r3,4(sp)
  10f7e8:	bdffffc4 	addi	r23,r23,-1
  10f7ec:	e027883a 	mov	r19,fp
  10f7f0:	003fad06 	br	10f6a8 <__alt_data_end+0xfffcf6a8>
  10f7f4:	00800c04 	movi	r2,48
  10f7f8:	80800d1e 	bne	r16,r2,10f830 <_strtoul_r+0x260>
  10f7fc:	88800003 	ldbu	r2,0(r17)
  10f800:	00c01604 	movi	r3,88
  10f804:	108037cc 	andi	r2,r2,223
  10f808:	10c0091e 	bne	r2,r3,10f830 <_strtoul_r+0x260>
  10f80c:	04c00404 	movi	r19,16
  10f810:	00c003c4 	movi	r3,15
  10f814:	04840034 	movhi	r18,4096
  10f818:	8c000043 	ldbu	r16,1(r17)
  10f81c:	d8c00115 	stw	r3,4(sp)
  10f820:	8c400084 	addi	r17,r17,2
  10f824:	94bfffc4 	addi	r18,r18,-1
  10f828:	9839883a 	mov	fp,r19
  10f82c:	003f9406 	br	10f680 <__alt_data_end+0xfffcf680>
  10f830:	00c003c4 	movi	r3,15
  10f834:	05c40034 	movhi	r23,4096
  10f838:	d8c00115 	stw	r3,4(sp)
  10f83c:	bdffffc4 	addi	r23,r23,-1
  10f840:	e027883a 	mov	r19,fp
  10f844:	003f9806 	br	10f6a8 <__alt_data_end+0xfffcf6a8>

0010f848 <strtoul>:
  10f848:	008004b4 	movhi	r2,18
  10f84c:	10972d04 	addi	r2,r2,23732
  10f850:	300f883a 	mov	r7,r6
  10f854:	280d883a 	mov	r6,r5
  10f858:	200b883a 	mov	r5,r4
  10f85c:	11000017 	ldw	r4,0(r2)
  10f860:	010f5d01 	jmpi	10f5d0 <_strtoul_r>

0010f864 <_strtoull_r>:
  10f864:	008004b4 	movhi	r2,18
  10f868:	deffef04 	addi	sp,sp,-68
  10f86c:	10973004 	addi	r2,r2,23744
  10f870:	dd800d15 	stw	r22,52(sp)
  10f874:	15800017 	ldw	r22,0(r2)
  10f878:	df000f15 	stw	fp,60(sp)
  10f87c:	d9000515 	stw	r4,20(sp)
  10f880:	dfc01015 	stw	ra,64(sp)
  10f884:	ddc00e15 	stw	r23,56(sp)
  10f888:	dd400c15 	stw	r21,48(sp)
  10f88c:	dd000b15 	stw	r20,44(sp)
  10f890:	dcc00a15 	stw	r19,40(sp)
  10f894:	dc800915 	stw	r18,36(sp)
  10f898:	dc400815 	stw	r17,32(sp)
  10f89c:	dc000715 	stw	r16,28(sp)
  10f8a0:	d9400215 	stw	r5,8(sp)
  10f8a4:	d9800115 	stw	r6,4(sp)
  10f8a8:	3839883a 	mov	fp,r7
  10f8ac:	2809883a 	mov	r4,r5
  10f8b0:	22000003 	ldbu	r8,0(r4)
  10f8b4:	24400044 	addi	r17,r4,1
  10f8b8:	2007883a 	mov	r3,r4
  10f8bc:	b205883a 	add	r2,r22,r8
  10f8c0:	10800043 	ldbu	r2,1(r2)
  10f8c4:	8809883a 	mov	r4,r17
  10f8c8:	1080020c 	andi	r2,r2,8
  10f8cc:	103ff81e 	bne	r2,zero,10f8b0 <__alt_data_end+0xfffcf8b0>
  10f8d0:	00800b44 	movi	r2,45
  10f8d4:	40807726 	beq	r8,r2,10fab4 <_strtoull_r+0x250>
  10f8d8:	00800ac4 	movi	r2,43
  10f8dc:	40807a26 	beq	r8,r2,10fac8 <_strtoull_r+0x264>
  10f8e0:	d8000415 	stw	zero,16(sp)
  10f8e4:	e0001426 	beq	fp,zero,10f938 <_strtoull_r+0xd4>
  10f8e8:	00800404 	movi	r2,16
  10f8ec:	e0808826 	beq	fp,r2,10fb10 <_strtoull_r+0x2ac>
  10f8f0:	e025d7fa 	srai	r18,fp,31
  10f8f4:	013fffc4 	movi	r4,-1
  10f8f8:	200b883a 	mov	r5,r4
  10f8fc:	e00d883a 	mov	r6,fp
  10f900:	900f883a 	mov	r7,r18
  10f904:	da000615 	stw	r8,24(sp)
  10f908:	01153000 	call	115300 <__udivdi3>
  10f90c:	013fffc4 	movi	r4,-1
  10f910:	e00d883a 	mov	r6,fp
  10f914:	900f883a 	mov	r7,r18
  10f918:	200b883a 	mov	r5,r4
  10f91c:	1021883a 	mov	r16,r2
  10f920:	182f883a 	mov	r23,r3
  10f924:	01158fc0 	call	1158fc <__umoddi3>
  10f928:	d8800315 	stw	r2,12(sp)
  10f92c:	df000015 	stw	fp,0(sp)
  10f930:	da000617 	ldw	r8,24(sp)
  10f934:	00000c06 	br	10f968 <_strtoull_r+0x104>
  10f938:	00800c04 	movi	r2,48
  10f93c:	40806626 	beq	r8,r2,10fad8 <_strtoull_r+0x274>
  10f940:	00800284 	movi	r2,10
  10f944:	00c00144 	movi	r3,5
  10f948:	042666b4 	movhi	r16,39322
  10f94c:	05c666b4 	movhi	r23,6554
  10f950:	d8800015 	stw	r2,0(sp)
  10f954:	d8c00315 	stw	r3,12(sp)
  10f958:	84266644 	addi	r16,r16,-26215
  10f95c:	bde66644 	addi	r23,r23,-26215
  10f960:	0025883a 	mov	r18,zero
  10f964:	1039883a 	mov	fp,r2
  10f968:	b205883a 	add	r2,r22,r8
  10f96c:	11800043 	ldbu	r6,1(r2)
  10f970:	882b883a 	mov	r21,r17
  10f974:	000f883a 	mov	r7,zero
  10f978:	3080010c 	andi	r2,r6,4
  10f97c:	0009883a 	mov	r4,zero
  10f980:	000b883a 	mov	r5,zero
  10f984:	04400044 	movi	r17,1
  10f988:	053fffc4 	movi	r20,-1
  10f98c:	10000d26 	beq	r2,zero,10f9c4 <_strtoull_r+0x160>
  10f990:	44fff404 	addi	r19,r8,-48
  10f994:	9f00110e 	bge	r19,fp,10f9dc <_strtoull_r+0x178>
  10f998:	3d000426 	beq	r7,r20,10f9ac <_strtoull_r+0x148>
  10f99c:	b9400236 	bltu	r23,r5,10f9a8 <_strtoull_r+0x144>
  10f9a0:	2dc0291e 	bne	r5,r23,10fa48 <_strtoull_r+0x1e4>
  10f9a4:	8100282e 	bgeu	r16,r4,10fa48 <_strtoull_r+0x1e4>
  10f9a8:	01ffffc4 	movi	r7,-1
  10f9ac:	aa000003 	ldbu	r8,0(r21)
  10f9b0:	ad400044 	addi	r21,r21,1
  10f9b4:	b205883a 	add	r2,r22,r8
  10f9b8:	11800043 	ldbu	r6,1(r2)
  10f9bc:	3080010c 	andi	r2,r6,4
  10f9c0:	103ff31e 	bne	r2,zero,10f990 <__alt_data_end+0xfffcf990>
  10f9c4:	318000cc 	andi	r6,r6,3
  10f9c8:	30000426 	beq	r6,zero,10f9dc <_strtoull_r+0x178>
  10f9cc:	34402a26 	beq	r6,r17,10fa78 <_strtoull_r+0x214>
  10f9d0:	00c015c4 	movi	r3,87
  10f9d4:	40e7c83a 	sub	r19,r8,r3
  10f9d8:	9f3fef16 	blt	r19,fp,10f998 <__alt_data_end+0xfffcf998>
  10f9dc:	38002c16 	blt	r7,zero,10fa90 <_strtoull_r+0x22c>
  10f9e0:	d8c00417 	ldw	r3,16(sp)
  10f9e4:	18000426 	beq	r3,zero,10f9f8 <_strtoull_r+0x194>
  10f9e8:	0109c83a 	sub	r4,zero,r4
  10f9ec:	2004c03a 	cmpne	r2,r4,zero
  10f9f0:	0151c83a 	sub	r8,zero,r5
  10f9f4:	408bc83a 	sub	r5,r8,r2
  10f9f8:	d8800117 	ldw	r2,4(sp)
  10f9fc:	10000426 	beq	r2,zero,10fa10 <_strtoull_r+0x1ac>
  10fa00:	dd000217 	ldw	r20,8(sp)
  10fa04:	3800291e 	bne	r7,zero,10faac <_strtoull_r+0x248>
  10fa08:	d8c00117 	ldw	r3,4(sp)
  10fa0c:	1d000015 	stw	r20,0(r3)
  10fa10:	2005883a 	mov	r2,r4
  10fa14:	2807883a 	mov	r3,r5
  10fa18:	dfc01017 	ldw	ra,64(sp)
  10fa1c:	df000f17 	ldw	fp,60(sp)
  10fa20:	ddc00e17 	ldw	r23,56(sp)
  10fa24:	dd800d17 	ldw	r22,52(sp)
  10fa28:	dd400c17 	ldw	r21,48(sp)
  10fa2c:	dd000b17 	ldw	r20,44(sp)
  10fa30:	dcc00a17 	ldw	r19,40(sp)
  10fa34:	dc800917 	ldw	r18,36(sp)
  10fa38:	dc400817 	ldw	r17,32(sp)
  10fa3c:	dc000717 	ldw	r16,28(sp)
  10fa40:	dec01104 	addi	sp,sp,68
  10fa44:	f800283a 	ret
  10fa48:	24000d26 	beq	r4,r16,10fa80 <_strtoull_r+0x21c>
  10fa4c:	d9800017 	ldw	r6,0(sp)
  10fa50:	900f883a 	mov	r7,r18
  10fa54:	01151800 	call	115180 <__muldi3>
  10fa58:	980bd7fa 	srai	r5,r19,31
  10fa5c:	9885883a 	add	r2,r19,r2
  10fa60:	14d1803a 	cmpltu	r8,r2,r19
  10fa64:	28c7883a 	add	r3,r5,r3
  10fa68:	1009883a 	mov	r4,r2
  10fa6c:	40cb883a 	add	r5,r8,r3
  10fa70:	01c00044 	movi	r7,1
  10fa74:	003fcd06 	br	10f9ac <__alt_data_end+0xfffcf9ac>
  10fa78:	00c00dc4 	movi	r3,55
  10fa7c:	003fd506 	br	10f9d4 <__alt_data_end+0xfffcf9d4>
  10fa80:	2dfff21e 	bne	r5,r23,10fa4c <__alt_data_end+0xfffcfa4c>
  10fa84:	d8c00317 	ldw	r3,12(sp)
  10fa88:	1cffc716 	blt	r3,r19,10f9a8 <__alt_data_end+0xfffcf9a8>
  10fa8c:	003fef06 	br	10fa4c <__alt_data_end+0xfffcfa4c>
  10fa90:	d8c00517 	ldw	r3,20(sp)
  10fa94:	00800884 	movi	r2,34
  10fa98:	013fffc4 	movi	r4,-1
  10fa9c:	18800015 	stw	r2,0(r3)
  10faa0:	d8800117 	ldw	r2,4(sp)
  10faa4:	200b883a 	mov	r5,r4
  10faa8:	103fd926 	beq	r2,zero,10fa10 <__alt_data_end+0xfffcfa10>
  10faac:	ad3fffc4 	addi	r20,r21,-1
  10fab0:	003fd506 	br	10fa08 <__alt_data_end+0xfffcfa08>
  10fab4:	00800044 	movi	r2,1
  10fab8:	1c400084 	addi	r17,r3,2
  10fabc:	1a000043 	ldbu	r8,1(r3)
  10fac0:	d8800415 	stw	r2,16(sp)
  10fac4:	003f8706 	br	10f8e4 <__alt_data_end+0xfffcf8e4>
  10fac8:	1c400084 	addi	r17,r3,2
  10facc:	1a000043 	ldbu	r8,1(r3)
  10fad0:	d8000415 	stw	zero,16(sp)
  10fad4:	003f8306 	br	10f8e4 <__alt_data_end+0xfffcf8e4>
  10fad8:	88800003 	ldbu	r2,0(r17)
  10fadc:	00c01604 	movi	r3,88
  10fae0:	108037cc 	andi	r2,r2,223
  10fae4:	10c01026 	beq	r2,r3,10fb28 <_strtoull_r+0x2c4>
  10fae8:	00c00204 	movi	r3,8
  10faec:	008001c4 	movi	r2,7
  10faf0:	043fffc4 	movi	r16,-1
  10faf4:	05c80034 	movhi	r23,8192
  10faf8:	d8c00015 	stw	r3,0(sp)
  10fafc:	d8800315 	stw	r2,12(sp)
  10fb00:	bc2f883a 	add	r23,r23,r16
  10fb04:	0025883a 	mov	r18,zero
  10fb08:	1839883a 	mov	fp,r3
  10fb0c:	003f9606 	br	10f968 <__alt_data_end+0xfffcf968>
  10fb10:	00800c04 	movi	r2,48
  10fb14:	4080101e 	bne	r8,r2,10fb58 <_strtoull_r+0x2f4>
  10fb18:	88800003 	ldbu	r2,0(r17)
  10fb1c:	00c01604 	movi	r3,88
  10fb20:	108037cc 	andi	r2,r2,223
  10fb24:	10c0141e 	bne	r2,r3,10fb78 <_strtoull_r+0x314>
  10fb28:	00c00404 	movi	r3,16
  10fb2c:	008003c4 	movi	r2,15
  10fb30:	043fffc4 	movi	r16,-1
  10fb34:	05c40034 	movhi	r23,4096
  10fb38:	8a000043 	ldbu	r8,1(r17)
  10fb3c:	d8c00015 	stw	r3,0(sp)
  10fb40:	d8800315 	stw	r2,12(sp)
  10fb44:	8c400084 	addi	r17,r17,2
  10fb48:	bc2f883a 	add	r23,r23,r16
  10fb4c:	0025883a 	mov	r18,zero
  10fb50:	1839883a 	mov	fp,r3
  10fb54:	003f8406 	br	10f968 <__alt_data_end+0xfffcf968>
  10fb58:	008003c4 	movi	r2,15
  10fb5c:	d8800315 	stw	r2,12(sp)
  10fb60:	043fffc4 	movi	r16,-1
  10fb64:	05c40034 	movhi	r23,4096
  10fb68:	bc2f883a 	add	r23,r23,r16
  10fb6c:	df000015 	stw	fp,0(sp)
  10fb70:	0025883a 	mov	r18,zero
  10fb74:	003f7c06 	br	10f968 <__alt_data_end+0xfffcf968>
  10fb78:	00c003c4 	movi	r3,15
  10fb7c:	d8c00315 	stw	r3,12(sp)
  10fb80:	003ff706 	br	10fb60 <__alt_data_end+0xfffcfb60>

0010fb84 <__ssprint_r>:
  10fb84:	30800217 	ldw	r2,8(r6)
  10fb88:	defff604 	addi	sp,sp,-40
  10fb8c:	dc800215 	stw	r18,8(sp)
  10fb90:	dfc00915 	stw	ra,36(sp)
  10fb94:	df000815 	stw	fp,32(sp)
  10fb98:	ddc00715 	stw	r23,28(sp)
  10fb9c:	dd800615 	stw	r22,24(sp)
  10fba0:	dd400515 	stw	r21,20(sp)
  10fba4:	dd000415 	stw	r20,16(sp)
  10fba8:	dcc00315 	stw	r19,12(sp)
  10fbac:	dc400115 	stw	r17,4(sp)
  10fbb0:	dc000015 	stw	r16,0(sp)
  10fbb4:	3025883a 	mov	r18,r6
  10fbb8:	10005826 	beq	r2,zero,10fd1c <__ssprint_r+0x198>
  10fbbc:	2027883a 	mov	r19,r4
  10fbc0:	35c00017 	ldw	r23,0(r6)
  10fbc4:	29000017 	ldw	r4,0(r5)
  10fbc8:	28800217 	ldw	r2,8(r5)
  10fbcc:	2823883a 	mov	r17,r5
  10fbd0:	0039883a 	mov	fp,zero
  10fbd4:	0021883a 	mov	r16,zero
  10fbd8:	80003926 	beq	r16,zero,10fcc0 <__ssprint_r+0x13c>
  10fbdc:	102b883a 	mov	r21,r2
  10fbe0:	102d883a 	mov	r22,r2
  10fbe4:	80803a36 	bltu	r16,r2,10fcd0 <__ssprint_r+0x14c>
  10fbe8:	88c0030b 	ldhu	r3,12(r17)
  10fbec:	1881200c 	andi	r2,r3,1152
  10fbf0:	10002626 	beq	r2,zero,10fc8c <__ssprint_r+0x108>
  10fbf4:	88800517 	ldw	r2,20(r17)
  10fbf8:	89400417 	ldw	r5,16(r17)
  10fbfc:	81800044 	addi	r6,r16,1
  10fc00:	108f883a 	add	r7,r2,r2
  10fc04:	3885883a 	add	r2,r7,r2
  10fc08:	100ed7fa 	srli	r7,r2,31
  10fc0c:	216dc83a 	sub	r22,r4,r5
  10fc10:	3589883a 	add	r4,r6,r22
  10fc14:	3885883a 	add	r2,r7,r2
  10fc18:	102bd07a 	srai	r21,r2,1
  10fc1c:	a80d883a 	mov	r6,r21
  10fc20:	a900022e 	bgeu	r21,r4,10fc2c <__ssprint_r+0xa8>
  10fc24:	202b883a 	mov	r21,r4
  10fc28:	200d883a 	mov	r6,r4
  10fc2c:	18c1000c 	andi	r3,r3,1024
  10fc30:	18002a26 	beq	r3,zero,10fcdc <__ssprint_r+0x158>
  10fc34:	300b883a 	mov	r5,r6
  10fc38:	9809883a 	mov	r4,r19
  10fc3c:	0101e280 	call	101e28 <_malloc_r>
  10fc40:	1029883a 	mov	r20,r2
  10fc44:	10002c26 	beq	r2,zero,10fcf8 <__ssprint_r+0x174>
  10fc48:	89400417 	ldw	r5,16(r17)
  10fc4c:	b00d883a 	mov	r6,r22
  10fc50:	1009883a 	mov	r4,r2
  10fc54:	01027180 	call	102718 <memcpy>
  10fc58:	8880030b 	ldhu	r2,12(r17)
  10fc5c:	00fedfc4 	movi	r3,-1153
  10fc60:	10c4703a 	and	r2,r2,r3
  10fc64:	10802014 	ori	r2,r2,128
  10fc68:	8880030d 	sth	r2,12(r17)
  10fc6c:	a589883a 	add	r4,r20,r22
  10fc70:	adadc83a 	sub	r22,r21,r22
  10fc74:	8d400515 	stw	r21,20(r17)
  10fc78:	8d800215 	stw	r22,8(r17)
  10fc7c:	8d000415 	stw	r20,16(r17)
  10fc80:	89000015 	stw	r4,0(r17)
  10fc84:	802b883a 	mov	r21,r16
  10fc88:	802d883a 	mov	r22,r16
  10fc8c:	b00d883a 	mov	r6,r22
  10fc90:	e00b883a 	mov	r5,fp
  10fc94:	010bfd40 	call	10bfd4 <memmove>
  10fc98:	88800217 	ldw	r2,8(r17)
  10fc9c:	89000017 	ldw	r4,0(r17)
  10fca0:	90c00217 	ldw	r3,8(r18)
  10fca4:	1545c83a 	sub	r2,r2,r21
  10fca8:	2589883a 	add	r4,r4,r22
  10fcac:	88800215 	stw	r2,8(r17)
  10fcb0:	89000015 	stw	r4,0(r17)
  10fcb4:	1c21c83a 	sub	r16,r3,r16
  10fcb8:	94000215 	stw	r16,8(r18)
  10fcbc:	80001726 	beq	r16,zero,10fd1c <__ssprint_r+0x198>
  10fcc0:	bf000017 	ldw	fp,0(r23)
  10fcc4:	bc000117 	ldw	r16,4(r23)
  10fcc8:	bdc00204 	addi	r23,r23,8
  10fccc:	003fc206 	br	10fbd8 <__alt_data_end+0xfffcfbd8>
  10fcd0:	802b883a 	mov	r21,r16
  10fcd4:	802d883a 	mov	r22,r16
  10fcd8:	003fec06 	br	10fc8c <__alt_data_end+0xfffcfc8c>
  10fcdc:	9809883a 	mov	r4,r19
  10fce0:	010d2480 	call	10d248 <_realloc_r>
  10fce4:	1029883a 	mov	r20,r2
  10fce8:	103fe01e 	bne	r2,zero,10fc6c <__alt_data_end+0xfffcfc6c>
  10fcec:	89400417 	ldw	r5,16(r17)
  10fcf0:	9809883a 	mov	r4,r19
  10fcf4:	010b2b00 	call	10b2b0 <_free_r>
  10fcf8:	88c0030b 	ldhu	r3,12(r17)
  10fcfc:	00800304 	movi	r2,12
  10fd00:	98800015 	stw	r2,0(r19)
  10fd04:	18c01014 	ori	r3,r3,64
  10fd08:	88c0030d 	sth	r3,12(r17)
  10fd0c:	00bfffc4 	movi	r2,-1
  10fd10:	90000215 	stw	zero,8(r18)
  10fd14:	90000115 	stw	zero,4(r18)
  10fd18:	00000206 	br	10fd24 <__ssprint_r+0x1a0>
  10fd1c:	90000115 	stw	zero,4(r18)
  10fd20:	0005883a 	mov	r2,zero
  10fd24:	dfc00917 	ldw	ra,36(sp)
  10fd28:	df000817 	ldw	fp,32(sp)
  10fd2c:	ddc00717 	ldw	r23,28(sp)
  10fd30:	dd800617 	ldw	r22,24(sp)
  10fd34:	dd400517 	ldw	r21,20(sp)
  10fd38:	dd000417 	ldw	r20,16(sp)
  10fd3c:	dcc00317 	ldw	r19,12(sp)
  10fd40:	dc800217 	ldw	r18,8(sp)
  10fd44:	dc400117 	ldw	r17,4(sp)
  10fd48:	dc000017 	ldw	r16,0(sp)
  10fd4c:	dec00a04 	addi	sp,sp,40
  10fd50:	f800283a 	ret

0010fd54 <___svfiprintf_internal_r>:
  10fd54:	2880030b 	ldhu	r2,12(r5)
  10fd58:	deffc804 	addi	sp,sp,-224
  10fd5c:	dcc03115 	stw	r19,196(sp)
  10fd60:	dfc03715 	stw	ra,220(sp)
  10fd64:	df003615 	stw	fp,216(sp)
  10fd68:	ddc03515 	stw	r23,212(sp)
  10fd6c:	dd803415 	stw	r22,208(sp)
  10fd70:	dd403315 	stw	r21,204(sp)
  10fd74:	dd003215 	stw	r20,200(sp)
  10fd78:	dc803015 	stw	r18,192(sp)
  10fd7c:	dc402f15 	stw	r17,188(sp)
  10fd80:	dc002e15 	stw	r16,184(sp)
  10fd84:	d9402315 	stw	r5,140(sp)
  10fd88:	d9002715 	stw	r4,156(sp)
  10fd8c:	1080200c 	andi	r2,r2,128
  10fd90:	d9c02415 	stw	r7,144(sp)
  10fd94:	3027883a 	mov	r19,r6
  10fd98:	10000226 	beq	r2,zero,10fda4 <___svfiprintf_internal_r+0x50>
  10fd9c:	28800417 	ldw	r2,16(r5)
  10fda0:	10046d26 	beq	r2,zero,110f58 <___svfiprintf_internal_r+0x1204>
  10fda4:	d8801a04 	addi	r2,sp,104
  10fda8:	d8c019c4 	addi	r3,sp,103
  10fdac:	058004b4 	movhi	r22,18
  10fdb0:	10c9c83a 	sub	r4,r2,r3
  10fdb4:	b58f7604 	addi	r22,r22,15832
  10fdb8:	d8801e15 	stw	r2,120(sp)
  10fdbc:	d8c01f15 	stw	r3,124(sp)
  10fdc0:	dec01a15 	stw	sp,104(sp)
  10fdc4:	d8001c15 	stw	zero,112(sp)
  10fdc8:	d8001b15 	stw	zero,108(sp)
  10fdcc:	d811883a 	mov	r8,sp
  10fdd0:	d8002915 	stw	zero,164(sp)
  10fdd4:	d8002615 	stw	zero,152(sp)
  10fdd8:	d9002c15 	stw	r4,176(sp)
  10fddc:	98800007 	ldb	r2,0(r19)
  10fde0:	10031426 	beq	r2,zero,110a34 <___svfiprintf_internal_r+0xce0>
  10fde4:	00c00944 	movi	r3,37
  10fde8:	9825883a 	mov	r18,r19
  10fdec:	10c0021e 	bne	r2,r3,10fdf8 <___svfiprintf_internal_r+0xa4>
  10fdf0:	00001406 	br	10fe44 <___svfiprintf_internal_r+0xf0>
  10fdf4:	10c00326 	beq	r2,r3,10fe04 <___svfiprintf_internal_r+0xb0>
  10fdf8:	94800044 	addi	r18,r18,1
  10fdfc:	90800007 	ldb	r2,0(r18)
  10fe00:	103ffc1e 	bne	r2,zero,10fdf4 <__alt_data_end+0xfffcfdf4>
  10fe04:	94e1c83a 	sub	r16,r18,r19
  10fe08:	80000e26 	beq	r16,zero,10fe44 <___svfiprintf_internal_r+0xf0>
  10fe0c:	d8c01c17 	ldw	r3,112(sp)
  10fe10:	d8801b17 	ldw	r2,108(sp)
  10fe14:	44c00015 	stw	r19,0(r8)
  10fe18:	1c07883a 	add	r3,r3,r16
  10fe1c:	10800044 	addi	r2,r2,1
  10fe20:	d8c01c15 	stw	r3,112(sp)
  10fe24:	44000115 	stw	r16,4(r8)
  10fe28:	d8801b15 	stw	r2,108(sp)
  10fe2c:	00c001c4 	movi	r3,7
  10fe30:	18835c16 	blt	r3,r2,110ba4 <___svfiprintf_internal_r+0xe50>
  10fe34:	42000204 	addi	r8,r8,8
  10fe38:	d9402617 	ldw	r5,152(sp)
  10fe3c:	2c0b883a 	add	r5,r5,r16
  10fe40:	d9402615 	stw	r5,152(sp)
  10fe44:	90800007 	ldb	r2,0(r18)
  10fe48:	1002fc26 	beq	r2,zero,110a3c <___svfiprintf_internal_r+0xce8>
  10fe4c:	0023883a 	mov	r17,zero
  10fe50:	00bfffc4 	movi	r2,-1
  10fe54:	0021883a 	mov	r16,zero
  10fe58:	94c00044 	addi	r19,r18,1
  10fe5c:	90c00047 	ldb	r3,1(r18)
  10fe60:	dc402105 	stb	r17,132(sp)
  10fe64:	d8001d85 	stb	zero,118(sp)
  10fe68:	002b883a 	mov	r21,zero
  10fe6c:	d8802015 	stw	r2,128(sp)
  10fe70:	d8002515 	stw	zero,148(sp)
  10fe74:	04801604 	movi	r18,88
  10fe78:	05000244 	movi	r20,9
  10fe7c:	402f883a 	mov	r23,r8
  10fe80:	8023883a 	mov	r17,r16
  10fe84:	9cc00044 	addi	r19,r19,1
  10fe88:	18bff804 	addi	r2,r3,-32
  10fe8c:	9081fb36 	bltu	r18,r2,11067c <___svfiprintf_internal_r+0x928>
  10fe90:	100490ba 	slli	r2,r2,2
  10fe94:	01000474 	movhi	r4,17
  10fe98:	213faa04 	addi	r4,r4,-344
  10fe9c:	1105883a 	add	r2,r2,r4
  10fea0:	10800017 	ldw	r2,0(r2)
  10fea4:	1000683a 	jmp	r2
  10fea8:	001100a8 	cmpgeui	zero,zero,17410
  10feac:	0011067c 	xorhi	zero,zero,17433
  10feb0:	0011067c 	xorhi	zero,zero,17433
  10feb4:	0011009c 	xori	zero,zero,17410
  10feb8:	0011067c 	xorhi	zero,zero,17433
  10febc:	0011067c 	xorhi	zero,zero,17433
  10fec0:	0011067c 	xorhi	zero,zero,17433
  10fec4:	0011067c 	xorhi	zero,zero,17433
  10fec8:	0011067c 	xorhi	zero,zero,17433
  10fecc:	0011067c 	xorhi	zero,zero,17433
  10fed0:	0011000c 	andi	zero,zero,17408
  10fed4:	00110208 	cmpgei	zero,zero,17416
  10fed8:	0011067c 	xorhi	zero,zero,17433
  10fedc:	00110034 	movhi	zero,17408
  10fee0:	001106b8 	rdprs	zero,zero,17434
  10fee4:	0011067c 	xorhi	zero,zero,17433
  10fee8:	001106ac 	andhi	zero,zero,17434
  10feec:	00110640 	call	11064 <OSCtxSw_SWITCH_PC+0x11024>
  10fef0:	00110640 	call	11064 <OSCtxSw_SWITCH_PC+0x11024>
  10fef4:	00110640 	call	11064 <OSCtxSw_SWITCH_PC+0x11024>
  10fef8:	00110640 	call	11064 <OSCtxSw_SWITCH_PC+0x11024>
  10fefc:	00110640 	call	11064 <OSCtxSw_SWITCH_PC+0x11024>
  10ff00:	00110640 	call	11064 <OSCtxSw_SWITCH_PC+0x11024>
  10ff04:	00110640 	call	11064 <OSCtxSw_SWITCH_PC+0x11024>
  10ff08:	00110640 	call	11064 <OSCtxSw_SWITCH_PC+0x11024>
  10ff0c:	00110640 	call	11064 <OSCtxSw_SWITCH_PC+0x11024>
  10ff10:	0011067c 	xorhi	zero,zero,17433
  10ff14:	0011067c 	xorhi	zero,zero,17433
  10ff18:	0011067c 	xorhi	zero,zero,17433
  10ff1c:	0011067c 	xorhi	zero,zero,17433
  10ff20:	0011067c 	xorhi	zero,zero,17433
  10ff24:	0011067c 	xorhi	zero,zero,17433
  10ff28:	0011067c 	xorhi	zero,zero,17433
  10ff2c:	0011067c 	xorhi	zero,zero,17433
  10ff30:	0011067c 	xorhi	zero,zero,17433
  10ff34:	0011067c 	xorhi	zero,zero,17433
  10ff38:	001105c4 	movi	zero,17431
  10ff3c:	0011067c 	xorhi	zero,zero,17433
  10ff40:	0011067c 	xorhi	zero,zero,17433
  10ff44:	0011067c 	xorhi	zero,zero,17433
  10ff48:	0011067c 	xorhi	zero,zero,17433
  10ff4c:	0011067c 	xorhi	zero,zero,17433
  10ff50:	0011067c 	xorhi	zero,zero,17433
  10ff54:	0011067c 	xorhi	zero,zero,17433
  10ff58:	0011067c 	xorhi	zero,zero,17433
  10ff5c:	0011067c 	xorhi	zero,zero,17433
  10ff60:	0011067c 	xorhi	zero,zero,17433
  10ff64:	00110774 	movhi	zero,17437
  10ff68:	0011067c 	xorhi	zero,zero,17433
  10ff6c:	0011067c 	xorhi	zero,zero,17433
  10ff70:	0011067c 	xorhi	zero,zero,17433
  10ff74:	0011067c 	xorhi	zero,zero,17433
  10ff78:	0011067c 	xorhi	zero,zero,17433
  10ff7c:	00110700 	call	11070 <OSCtxSw_SWITCH_PC+0x11030>
  10ff80:	0011067c 	xorhi	zero,zero,17433
  10ff84:	0011067c 	xorhi	zero,zero,17433
  10ff88:	00110400 	call	11040 <OSCtxSw_SWITCH_PC+0x11000>
  10ff8c:	0011067c 	xorhi	zero,zero,17433
  10ff90:	0011067c 	xorhi	zero,zero,17433
  10ff94:	0011067c 	xorhi	zero,zero,17433
  10ff98:	0011067c 	xorhi	zero,zero,17433
  10ff9c:	0011067c 	xorhi	zero,zero,17433
  10ffa0:	0011067c 	xorhi	zero,zero,17433
  10ffa4:	0011067c 	xorhi	zero,zero,17433
  10ffa8:	0011067c 	xorhi	zero,zero,17433
  10ffac:	0011067c 	xorhi	zero,zero,17433
  10ffb0:	0011067c 	xorhi	zero,zero,17433
  10ffb4:	001102cc 	andi	zero,zero,17419
  10ffb8:	001104b0 	cmpltui	zero,zero,17426
  10ffbc:	0011067c 	xorhi	zero,zero,17433
  10ffc0:	0011067c 	xorhi	zero,zero,17433
  10ffc4:	0011067c 	xorhi	zero,zero,17433
  10ffc8:	001104a4 	muli	zero,zero,17426
  10ffcc:	001104b0 	cmpltui	zero,zero,17426
  10ffd0:	0011067c 	xorhi	zero,zero,17433
  10ffd4:	0011067c 	xorhi	zero,zero,17433
  10ffd8:	00110490 	cmplti	zero,zero,17426
  10ffdc:	0011067c 	xorhi	zero,zero,17433
  10ffe0:	00110450 	cmplti	zero,zero,17425
  10ffe4:	0011021c 	xori	zero,zero,17416
  10ffe8:	00110040 	call	11004 <OSCtxSw_SWITCH_PC+0x10fc4>
  10ffec:	001105b8 	rdprs	zero,zero,17430
  10fff0:	0011067c 	xorhi	zero,zero,17433
  10fff4:	00110564 	muli	zero,zero,17429
  10fff8:	0011067c 	xorhi	zero,zero,17433
  10fffc:	00110180 	call	11018 <OSCtxSw_SWITCH_PC+0x10fd8>
  110000:	0011067c 	xorhi	zero,zero,17433
  110004:	0011067c 	xorhi	zero,zero,17433
  110008:	001100cc 	andi	zero,zero,17411
  11000c:	d9002417 	ldw	r4,144(sp)
  110010:	d9402417 	ldw	r5,144(sp)
  110014:	21000017 	ldw	r4,0(r4)
  110018:	28800104 	addi	r2,r5,4
  11001c:	d9002515 	stw	r4,148(sp)
  110020:	20032b0e 	bge	r4,zero,110cd0 <___svfiprintf_internal_r+0xf7c>
  110024:	d8c02517 	ldw	r3,148(sp)
  110028:	d8802415 	stw	r2,144(sp)
  11002c:	00c7c83a 	sub	r3,zero,r3
  110030:	d8c02515 	stw	r3,148(sp)
  110034:	8c400114 	ori	r17,r17,4
  110038:	98c00007 	ldb	r3,0(r19)
  11003c:	003f9106 	br	10fe84 <__alt_data_end+0xfffcfe84>
  110040:	00800c04 	movi	r2,48
  110044:	d9402417 	ldw	r5,144(sp)
  110048:	d9002017 	ldw	r4,128(sp)
  11004c:	d8801d05 	stb	r2,116(sp)
  110050:	00801e04 	movi	r2,120
  110054:	d8801d45 	stb	r2,117(sp)
  110058:	d8001d85 	stb	zero,118(sp)
  11005c:	b811883a 	mov	r8,r23
  110060:	28c00104 	addi	r3,r5,4
  110064:	2c800017 	ldw	r18,0(r5)
  110068:	0029883a 	mov	r20,zero
  11006c:	88800094 	ori	r2,r17,2
  110070:	20036316 	blt	r4,zero,110e00 <___svfiprintf_internal_r+0x10ac>
  110074:	00bfdfc4 	movi	r2,-129
  110078:	88a0703a 	and	r16,r17,r2
  11007c:	d8c02415 	stw	r3,144(sp)
  110080:	84000094 	ori	r16,r16,2
  110084:	90031c26 	beq	r18,zero,110cf8 <___svfiprintf_internal_r+0xfa4>
  110088:	014004b4 	movhi	r5,18
  11008c:	294e4b04 	addi	r5,r5,14636
  110090:	002b883a 	mov	r21,zero
  110094:	d9402915 	stw	r5,164(sp)
  110098:	00002906 	br	110140 <___svfiprintf_internal_r+0x3ec>
  11009c:	8c400054 	ori	r17,r17,1
  1100a0:	98c00007 	ldb	r3,0(r19)
  1100a4:	003f7706 	br	10fe84 <__alt_data_end+0xfffcfe84>
  1100a8:	a8803fcc 	andi	r2,r21,255
  1100ac:	1080201c 	xori	r2,r2,128
  1100b0:	10bfe004 	addi	r2,r2,-128
  1100b4:	10032a1e 	bne	r2,zero,110d60 <___svfiprintf_internal_r+0x100c>
  1100b8:	00c00044 	movi	r3,1
  1100bc:	d8c02105 	stb	r3,132(sp)
  1100c0:	05400804 	movi	r21,32
  1100c4:	98c00007 	ldb	r3,0(r19)
  1100c8:	003f6e06 	br	10fe84 <__alt_data_end+0xfffcfe84>
  1100cc:	8821883a 	mov	r16,r17
  1100d0:	dc402103 	ldbu	r17,132(sp)
  1100d4:	b811883a 	mov	r8,r23
  1100d8:	8c403fcc 	andi	r17,r17,255
  1100dc:	8803f01e 	bne	r17,zero,1110a0 <___svfiprintf_internal_r+0x134c>
  1100e0:	008004b4 	movhi	r2,18
  1100e4:	108e4b04 	addi	r2,r2,14636
  1100e8:	d8802915 	stw	r2,164(sp)
  1100ec:	8080080c 	andi	r2,r16,32
  1100f0:	1000cd26 	beq	r2,zero,110428 <___svfiprintf_internal_r+0x6d4>
  1100f4:	d9002417 	ldw	r4,144(sp)
  1100f8:	24800017 	ldw	r18,0(r4)
  1100fc:	25000117 	ldw	r20,4(r4)
  110100:	21000204 	addi	r4,r4,8
  110104:	d9002415 	stw	r4,144(sp)
  110108:	8080004c 	andi	r2,r16,1
  11010c:	1002c726 	beq	r2,zero,110c2c <___svfiprintf_internal_r+0xed8>
  110110:	9504b03a 	or	r2,r18,r20
  110114:	1003061e 	bne	r2,zero,110d30 <___svfiprintf_internal_r+0xfdc>
  110118:	d9002017 	ldw	r4,128(sp)
  11011c:	d8001d85 	stb	zero,118(sp)
  110120:	20033e16 	blt	r4,zero,110e1c <___svfiprintf_internal_r+0x10c8>
  110124:	00bfdfc4 	movi	r2,-129
  110128:	80a0703a 	and	r16,r16,r2
  11012c:	d9402017 	ldw	r5,128(sp)
  110130:	002b883a 	mov	r21,zero
  110134:	28002826 	beq	r5,zero,1101d8 <___svfiprintf_internal_r+0x484>
  110138:	0025883a 	mov	r18,zero
  11013c:	0029883a 	mov	r20,zero
  110140:	d9002917 	ldw	r4,164(sp)
  110144:	dc401a04 	addi	r17,sp,104
  110148:	908003cc 	andi	r2,r18,15
  11014c:	a006973a 	slli	r3,r20,28
  110150:	2085883a 	add	r2,r4,r2
  110154:	9024d13a 	srli	r18,r18,4
  110158:	10800003 	ldbu	r2,0(r2)
  11015c:	a028d13a 	srli	r20,r20,4
  110160:	8c7fffc4 	addi	r17,r17,-1
  110164:	1ca4b03a 	or	r18,r3,r18
  110168:	88800005 	stb	r2,0(r17)
  11016c:	9504b03a 	or	r2,r18,r20
  110170:	103ff51e 	bne	r2,zero,110148 <__alt_data_end+0xfffd0148>
  110174:	d8801e17 	ldw	r2,120(sp)
  110178:	1469c83a 	sub	r20,r2,r17
  11017c:	00001906 	br	1101e4 <___svfiprintf_internal_r+0x490>
  110180:	8821883a 	mov	r16,r17
  110184:	dc402103 	ldbu	r17,132(sp)
  110188:	b811883a 	mov	r8,r23
  11018c:	8c403fcc 	andi	r17,r17,255
  110190:	8803d01e 	bne	r17,zero,1110d4 <___svfiprintf_internal_r+0x1380>
  110194:	8080080c 	andi	r2,r16,32
  110198:	10016126 	beq	r2,zero,110720 <___svfiprintf_internal_r+0x9cc>
  11019c:	d9002417 	ldw	r4,144(sp)
  1101a0:	d9402017 	ldw	r5,128(sp)
  1101a4:	d8001d85 	stb	zero,118(sp)
  1101a8:	20c00204 	addi	r3,r4,8
  1101ac:	24800017 	ldw	r18,0(r4)
  1101b0:	25000117 	ldw	r20,4(r4)
  1101b4:	28030f16 	blt	r5,zero,110df4 <___svfiprintf_internal_r+0x10a0>
  1101b8:	013fdfc4 	movi	r4,-129
  1101bc:	9504b03a 	or	r2,r18,r20
  1101c0:	d8c02415 	stw	r3,144(sp)
  1101c4:	8120703a 	and	r16,r16,r4
  1101c8:	002b883a 	mov	r21,zero
  1101cc:	1000cd1e 	bne	r2,zero,110504 <___svfiprintf_internal_r+0x7b0>
  1101d0:	d8c02017 	ldw	r3,128(sp)
  1101d4:	1803141e 	bne	r3,zero,110e28 <___svfiprintf_internal_r+0x10d4>
  1101d8:	d8002015 	stw	zero,128(sp)
  1101dc:	0029883a 	mov	r20,zero
  1101e0:	dc401a04 	addi	r17,sp,104
  1101e4:	dc802017 	ldw	r18,128(sp)
  1101e8:	9500010e 	bge	r18,r20,1101f0 <___svfiprintf_internal_r+0x49c>
  1101ec:	a025883a 	mov	r18,r20
  1101f0:	ad403fcc 	andi	r21,r21,255
  1101f4:	ad40201c 	xori	r21,r21,128
  1101f8:	ad7fe004 	addi	r21,r21,-128
  1101fc:	a8003f26 	beq	r21,zero,1102fc <___svfiprintf_internal_r+0x5a8>
  110200:	94800044 	addi	r18,r18,1
  110204:	00003d06 	br	1102fc <___svfiprintf_internal_r+0x5a8>
  110208:	00c00044 	movi	r3,1
  11020c:	d8c02105 	stb	r3,132(sp)
  110210:	05400ac4 	movi	r21,43
  110214:	98c00007 	ldb	r3,0(r19)
  110218:	003f1a06 	br	10fe84 <__alt_data_end+0xfffcfe84>
  11021c:	8821883a 	mov	r16,r17
  110220:	dc402103 	ldbu	r17,132(sp)
  110224:	b811883a 	mov	r8,r23
  110228:	8c403fcc 	andi	r17,r17,255
  11022c:	8803a71e 	bne	r17,zero,1110cc <___svfiprintf_internal_r+0x1378>
  110230:	8080080c 	andi	r2,r16,32
  110234:	10015726 	beq	r2,zero,110794 <___svfiprintf_internal_r+0xa40>
  110238:	d8c02417 	ldw	r3,144(sp)
  11023c:	d9002017 	ldw	r4,128(sp)
  110240:	d8001d85 	stb	zero,118(sp)
  110244:	18800204 	addi	r2,r3,8
  110248:	1c800017 	ldw	r18,0(r3)
  11024c:	1d000117 	ldw	r20,4(r3)
  110250:	2002db16 	blt	r4,zero,110dc0 <___svfiprintf_internal_r+0x106c>
  110254:	013fdfc4 	movi	r4,-129
  110258:	9506b03a 	or	r3,r18,r20
  11025c:	d8802415 	stw	r2,144(sp)
  110260:	8120703a 	and	r16,r16,r4
  110264:	18015826 	beq	r3,zero,1107c8 <___svfiprintf_internal_r+0xa74>
  110268:	002b883a 	mov	r21,zero
  11026c:	dc401a04 	addi	r17,sp,104
  110270:	9006d0fa 	srli	r3,r18,3
  110274:	a008977a 	slli	r4,r20,29
  110278:	a028d0fa 	srli	r20,r20,3
  11027c:	948001cc 	andi	r18,r18,7
  110280:	90800c04 	addi	r2,r18,48
  110284:	8c7fffc4 	addi	r17,r17,-1
  110288:	20e4b03a 	or	r18,r4,r3
  11028c:	88800005 	stb	r2,0(r17)
  110290:	9506b03a 	or	r3,r18,r20
  110294:	183ff61e 	bne	r3,zero,110270 <__alt_data_end+0xfffd0270>
  110298:	80c0004c 	andi	r3,r16,1
  11029c:	18028926 	beq	r3,zero,110cc4 <___svfiprintf_internal_r+0xf70>
  1102a0:	10803fcc 	andi	r2,r2,255
  1102a4:	1080201c 	xori	r2,r2,128
  1102a8:	10bfe004 	addi	r2,r2,-128
  1102ac:	00c00c04 	movi	r3,48
  1102b0:	10ffb026 	beq	r2,r3,110174 <__alt_data_end+0xfffd0174>
  1102b4:	88ffffc5 	stb	r3,-1(r17)
  1102b8:	d8c01e17 	ldw	r3,120(sp)
  1102bc:	88bfffc4 	addi	r2,r17,-1
  1102c0:	1023883a 	mov	r17,r2
  1102c4:	18a9c83a 	sub	r20,r3,r2
  1102c8:	003fc606 	br	1101e4 <__alt_data_end+0xfffd01e4>
  1102cc:	d8c02417 	ldw	r3,144(sp)
  1102d0:	04800044 	movi	r18,1
  1102d4:	8821883a 	mov	r16,r17
  1102d8:	18800017 	ldw	r2,0(r3)
  1102dc:	18c00104 	addi	r3,r3,4
  1102e0:	b811883a 	mov	r8,r23
  1102e4:	d8001d85 	stb	zero,118(sp)
  1102e8:	d8801005 	stb	r2,64(sp)
  1102ec:	d8c02415 	stw	r3,144(sp)
  1102f0:	9029883a 	mov	r20,r18
  1102f4:	dc401004 	addi	r17,sp,64
  1102f8:	d8002015 	stw	zero,128(sp)
  1102fc:	80c0008c 	andi	r3,r16,2
  110300:	d8c02115 	stw	r3,132(sp)
  110304:	18000126 	beq	r3,zero,11030c <___svfiprintf_internal_r+0x5b8>
  110308:	94800084 	addi	r18,r18,2
  11030c:	80c0210c 	andi	r3,r16,132
  110310:	d8c02215 	stw	r3,136(sp)
  110314:	1801321e 	bne	r3,zero,1107e0 <___svfiprintf_internal_r+0xa8c>
  110318:	d9002517 	ldw	r4,148(sp)
  11031c:	24b9c83a 	sub	fp,r4,r18
  110320:	07012f0e 	bge	zero,fp,1107e0 <___svfiprintf_internal_r+0xa8c>
  110324:	02400404 	movi	r9,16
  110328:	d8c01c17 	ldw	r3,112(sp)
  11032c:	d8801b17 	ldw	r2,108(sp)
  110330:	4f03250e 	bge	r9,fp,110fc8 <___svfiprintf_internal_r+0x1274>
  110334:	010004b4 	movhi	r4,18
  110338:	210f7a04 	addi	r4,r4,15848
  11033c:	dc002a15 	stw	r16,168(sp)
  110340:	dc402b15 	stw	r17,172(sp)
  110344:	d9002815 	stw	r4,160(sp)
  110348:	e023883a 	mov	r17,fp
  11034c:	482f883a 	mov	r23,r9
  110350:	9839883a 	mov	fp,r19
  110354:	054001c4 	movi	r21,7
  110358:	9027883a 	mov	r19,r18
  11035c:	dc002717 	ldw	r16,156(sp)
  110360:	dc802317 	ldw	r18,140(sp)
  110364:	00000306 	br	110374 <___svfiprintf_internal_r+0x620>
  110368:	8c7ffc04 	addi	r17,r17,-16
  11036c:	42000204 	addi	r8,r8,8
  110370:	bc40130e 	bge	r23,r17,1103c0 <___svfiprintf_internal_r+0x66c>
  110374:	014004b4 	movhi	r5,18
  110378:	18c00404 	addi	r3,r3,16
  11037c:	10800044 	addi	r2,r2,1
  110380:	294f7a04 	addi	r5,r5,15848
  110384:	41400015 	stw	r5,0(r8)
  110388:	45c00115 	stw	r23,4(r8)
  11038c:	d8c01c15 	stw	r3,112(sp)
  110390:	d8801b15 	stw	r2,108(sp)
  110394:	a8bff40e 	bge	r21,r2,110368 <__alt_data_end+0xfffd0368>
  110398:	d9801a04 	addi	r6,sp,104
  11039c:	900b883a 	mov	r5,r18
  1103a0:	8009883a 	mov	r4,r16
  1103a4:	010fb840 	call	10fb84 <__ssprint_r>
  1103a8:	1001aa1e 	bne	r2,zero,110a54 <___svfiprintf_internal_r+0xd00>
  1103ac:	8c7ffc04 	addi	r17,r17,-16
  1103b0:	d8c01c17 	ldw	r3,112(sp)
  1103b4:	d8801b17 	ldw	r2,108(sp)
  1103b8:	d811883a 	mov	r8,sp
  1103bc:	bc7fed16 	blt	r23,r17,110374 <__alt_data_end+0xfffd0374>
  1103c0:	9825883a 	mov	r18,r19
  1103c4:	dc002a17 	ldw	r16,168(sp)
  1103c8:	e027883a 	mov	r19,fp
  1103cc:	8839883a 	mov	fp,r17
  1103d0:	dc402b17 	ldw	r17,172(sp)
  1103d4:	d9002817 	ldw	r4,160(sp)
  1103d8:	e0c7883a 	add	r3,fp,r3
  1103dc:	10800044 	addi	r2,r2,1
  1103e0:	41000015 	stw	r4,0(r8)
  1103e4:	47000115 	stw	fp,4(r8)
  1103e8:	d8c01c15 	stw	r3,112(sp)
  1103ec:	d8801b15 	stw	r2,108(sp)
  1103f0:	010001c4 	movi	r4,7
  1103f4:	20821616 	blt	r4,r2,110c50 <___svfiprintf_internal_r+0xefc>
  1103f8:	42000204 	addi	r8,r8,8
  1103fc:	0000fa06 	br	1107e8 <___svfiprintf_internal_r+0xa94>
  110400:	8821883a 	mov	r16,r17
  110404:	dc402103 	ldbu	r17,132(sp)
  110408:	b811883a 	mov	r8,r23
  11040c:	8c403fcc 	andi	r17,r17,255
  110410:	8803361e 	bne	r17,zero,1110ec <___svfiprintf_internal_r+0x1398>
  110414:	014004b4 	movhi	r5,18
  110418:	294e4604 	addi	r5,r5,14616
  11041c:	d9402915 	stw	r5,164(sp)
  110420:	8080080c 	andi	r2,r16,32
  110424:	103f331e 	bne	r2,zero,1100f4 <__alt_data_end+0xfffd00f4>
  110428:	8080040c 	andi	r2,r16,16
  11042c:	1002551e 	bne	r2,zero,110d84 <___svfiprintf_internal_r+0x1030>
  110430:	8080100c 	andi	r2,r16,64
  110434:	1002a626 	beq	r2,zero,110ed0 <___svfiprintf_internal_r+0x117c>
  110438:	d8802417 	ldw	r2,144(sp)
  11043c:	0029883a 	mov	r20,zero
  110440:	1480000b 	ldhu	r18,0(r2)
  110444:	10800104 	addi	r2,r2,4
  110448:	d8802415 	stw	r2,144(sp)
  11044c:	003f2e06 	br	110108 <__alt_data_end+0xfffd0108>
  110450:	8821883a 	mov	r16,r17
  110454:	dc402103 	ldbu	r17,132(sp)
  110458:	b811883a 	mov	r8,r23
  11045c:	8c403fcc 	andi	r17,r17,255
  110460:	88030b1e 	bne	r17,zero,111090 <___svfiprintf_internal_r+0x133c>
  110464:	8080080c 	andi	r2,r16,32
  110468:	1002271e 	bne	r2,zero,110d08 <___svfiprintf_internal_r+0xfb4>
  11046c:	8080040c 	andi	r2,r16,16
  110470:	10028e26 	beq	r2,zero,110eac <___svfiprintf_internal_r+0x1158>
  110474:	d8c02417 	ldw	r3,144(sp)
  110478:	d9002617 	ldw	r4,152(sp)
  11047c:	18800017 	ldw	r2,0(r3)
  110480:	18c00104 	addi	r3,r3,4
  110484:	d8c02415 	stw	r3,144(sp)
  110488:	11000015 	stw	r4,0(r2)
  11048c:	003e5306 	br	10fddc <__alt_data_end+0xfffcfddc>
  110490:	98c00007 	ldb	r3,0(r19)
  110494:	01401b04 	movi	r5,108
  110498:	19424f26 	beq	r3,r5,110dd8 <___svfiprintf_internal_r+0x1084>
  11049c:	8c400414 	ori	r17,r17,16
  1104a0:	003e7806 	br	10fe84 <__alt_data_end+0xfffcfe84>
  1104a4:	8c401014 	ori	r17,r17,64
  1104a8:	98c00007 	ldb	r3,0(r19)
  1104ac:	003e7506 	br	10fe84 <__alt_data_end+0xfffcfe84>
  1104b0:	8821883a 	mov	r16,r17
  1104b4:	dc402103 	ldbu	r17,132(sp)
  1104b8:	b811883a 	mov	r8,r23
  1104bc:	8c403fcc 	andi	r17,r17,255
  1104c0:	8802fe1e 	bne	r17,zero,1110bc <___svfiprintf_internal_r+0x1368>
  1104c4:	8080080c 	andi	r2,r16,32
  1104c8:	10004626 	beq	r2,zero,1105e4 <___svfiprintf_internal_r+0x890>
  1104cc:	d9002417 	ldw	r4,144(sp)
  1104d0:	20800117 	ldw	r2,4(r4)
  1104d4:	24800017 	ldw	r18,0(r4)
  1104d8:	21000204 	addi	r4,r4,8
  1104dc:	d9002415 	stw	r4,144(sp)
  1104e0:	1029883a 	mov	r20,r2
  1104e4:	10004a16 	blt	r2,zero,110610 <___svfiprintf_internal_r+0x8bc>
  1104e8:	d9002017 	ldw	r4,128(sp)
  1104ec:	dd401d83 	ldbu	r21,118(sp)
  1104f0:	2001eb16 	blt	r4,zero,110ca0 <___svfiprintf_internal_r+0xf4c>
  1104f4:	00ffdfc4 	movi	r3,-129
  1104f8:	9504b03a 	or	r2,r18,r20
  1104fc:	80e0703a 	and	r16,r16,r3
  110500:	103f3326 	beq	r2,zero,1101d0 <__alt_data_end+0xfffd01d0>
  110504:	a0009426 	beq	r20,zero,110758 <___svfiprintf_internal_r+0xa04>
  110508:	dc401a04 	addi	r17,sp,104
  11050c:	402f883a 	mov	r23,r8
  110510:	9009883a 	mov	r4,r18
  110514:	a00b883a 	mov	r5,r20
  110518:	01800284 	movi	r6,10
  11051c:	000f883a 	mov	r7,zero
  110520:	01158fc0 	call	1158fc <__umoddi3>
  110524:	10800c04 	addi	r2,r2,48
  110528:	8c7fffc4 	addi	r17,r17,-1
  11052c:	9009883a 	mov	r4,r18
  110530:	a00b883a 	mov	r5,r20
  110534:	88800005 	stb	r2,0(r17)
  110538:	01800284 	movi	r6,10
  11053c:	000f883a 	mov	r7,zero
  110540:	01153000 	call	115300 <__udivdi3>
  110544:	1025883a 	mov	r18,r2
  110548:	10c4b03a 	or	r2,r2,r3
  11054c:	1829883a 	mov	r20,r3
  110550:	103fef1e 	bne	r2,zero,110510 <__alt_data_end+0xfffd0510>
  110554:	d9001e17 	ldw	r4,120(sp)
  110558:	b811883a 	mov	r8,r23
  11055c:	2469c83a 	sub	r20,r4,r17
  110560:	003f2006 	br	1101e4 <__alt_data_end+0xfffd01e4>
  110564:	d8802417 	ldw	r2,144(sp)
  110568:	8821883a 	mov	r16,r17
  11056c:	d8001d85 	stb	zero,118(sp)
  110570:	14400017 	ldw	r17,0(r2)
  110574:	b811883a 	mov	r8,r23
  110578:	15c00104 	addi	r23,r2,4
  11057c:	88026c26 	beq	r17,zero,110f30 <___svfiprintf_internal_r+0x11dc>
  110580:	d8c02017 	ldw	r3,128(sp)
  110584:	18025f16 	blt	r3,zero,110f04 <___svfiprintf_internal_r+0x11b0>
  110588:	180d883a 	mov	r6,r3
  11058c:	000b883a 	mov	r5,zero
  110590:	8809883a 	mov	r4,r17
  110594:	da002d15 	stw	r8,180(sp)
  110598:	01026340 	call	102634 <memchr>
  11059c:	da002d17 	ldw	r8,180(sp)
  1105a0:	1002a526 	beq	r2,zero,111038 <___svfiprintf_internal_r+0x12e4>
  1105a4:	1469c83a 	sub	r20,r2,r17
  1105a8:	dd401d83 	ldbu	r21,118(sp)
  1105ac:	ddc02415 	stw	r23,144(sp)
  1105b0:	d8002015 	stw	zero,128(sp)
  1105b4:	003f0b06 	br	1101e4 <__alt_data_end+0xfffd01e4>
  1105b8:	8c400814 	ori	r17,r17,32
  1105bc:	98c00007 	ldb	r3,0(r19)
  1105c0:	003e3006 	br	10fe84 <__alt_data_end+0xfffcfe84>
  1105c4:	8821883a 	mov	r16,r17
  1105c8:	dc402103 	ldbu	r17,132(sp)
  1105cc:	b811883a 	mov	r8,r23
  1105d0:	8c403fcc 	andi	r17,r17,255
  1105d4:	8802b01e 	bne	r17,zero,111098 <___svfiprintf_internal_r+0x1344>
  1105d8:	84000414 	ori	r16,r16,16
  1105dc:	8080080c 	andi	r2,r16,32
  1105e0:	103fba1e 	bne	r2,zero,1104cc <__alt_data_end+0xfffd04cc>
  1105e4:	8080040c 	andi	r2,r16,16
  1105e8:	1001df1e 	bne	r2,zero,110d68 <___svfiprintf_internal_r+0x1014>
  1105ec:	8080100c 	andi	r2,r16,64
  1105f0:	10023d26 	beq	r2,zero,110ee8 <___svfiprintf_internal_r+0x1194>
  1105f4:	d8802417 	ldw	r2,144(sp)
  1105f8:	1480000f 	ldh	r18,0(r2)
  1105fc:	10800104 	addi	r2,r2,4
  110600:	d8802415 	stw	r2,144(sp)
  110604:	9029d7fa 	srai	r20,r18,31
  110608:	a005883a 	mov	r2,r20
  11060c:	103fb60e 	bge	r2,zero,1104e8 <__alt_data_end+0xfffd04e8>
  110610:	d9402017 	ldw	r5,128(sp)
  110614:	04a5c83a 	sub	r18,zero,r18
  110618:	05400b44 	movi	r21,45
  11061c:	9004c03a 	cmpne	r2,r18,zero
  110620:	0529c83a 	sub	r20,zero,r20
  110624:	dd401d85 	stb	r21,118(sp)
  110628:	a0a9c83a 	sub	r20,r20,r2
  11062c:	28026c16 	blt	r5,zero,110fe0 <___svfiprintf_internal_r+0x128c>
  110630:	00bfdfc4 	movi	r2,-129
  110634:	80a0703a 	and	r16,r16,r2
  110638:	a03fb31e 	bne	r20,zero,110508 <__alt_data_end+0xfffd0508>
  11063c:	00004606 	br	110758 <___svfiprintf_internal_r+0xa04>
  110640:	9839883a 	mov	fp,r19
  110644:	d8002515 	stw	zero,148(sp)
  110648:	1c3ff404 	addi	r16,r3,-48
  11064c:	0009883a 	mov	r4,zero
  110650:	01400284 	movi	r5,10
  110654:	01160740 	call	116074 <__mulsi3>
  110658:	e0c00007 	ldb	r3,0(fp)
  11065c:	8089883a 	add	r4,r16,r2
  110660:	9cc00044 	addi	r19,r19,1
  110664:	1c3ff404 	addi	r16,r3,-48
  110668:	9839883a 	mov	fp,r19
  11066c:	a43ff82e 	bgeu	r20,r16,110650 <__alt_data_end+0xfffd0650>
  110670:	d9002515 	stw	r4,148(sp)
  110674:	18bff804 	addi	r2,r3,-32
  110678:	90be052e 	bgeu	r18,r2,10fe90 <__alt_data_end+0xfffcfe90>
  11067c:	8821883a 	mov	r16,r17
  110680:	dc402103 	ldbu	r17,132(sp)
  110684:	b811883a 	mov	r8,r23
  110688:	8c403fcc 	andi	r17,r17,255
  11068c:	88028d1e 	bne	r17,zero,1110c4 <___svfiprintf_internal_r+0x1370>
  110690:	1800ea26 	beq	r3,zero,110a3c <___svfiprintf_internal_r+0xce8>
  110694:	04800044 	movi	r18,1
  110698:	d8c01005 	stb	r3,64(sp)
  11069c:	d8001d85 	stb	zero,118(sp)
  1106a0:	9029883a 	mov	r20,r18
  1106a4:	dc401004 	addi	r17,sp,64
  1106a8:	003f1306 	br	1102f8 <__alt_data_end+0xfffd02f8>
  1106ac:	8c402014 	ori	r17,r17,128
  1106b0:	98c00007 	ldb	r3,0(r19)
  1106b4:	003df306 	br	10fe84 <__alt_data_end+0xfffcfe84>
  1106b8:	98c00007 	ldb	r3,0(r19)
  1106bc:	01000a84 	movi	r4,42
  1106c0:	9f000044 	addi	fp,r19,1
  1106c4:	19026326 	beq	r3,r4,111054 <___svfiprintf_internal_r+0x1300>
  1106c8:	1c3ff404 	addi	r16,r3,-48
  1106cc:	0009883a 	mov	r4,zero
  1106d0:	a4025636 	bltu	r20,r16,11102c <___svfiprintf_internal_r+0x12d8>
  1106d4:	01400284 	movi	r5,10
  1106d8:	01160740 	call	116074 <__mulsi3>
  1106dc:	e0c00007 	ldb	r3,0(fp)
  1106e0:	1409883a 	add	r4,r2,r16
  1106e4:	e4c00044 	addi	r19,fp,1
  1106e8:	1c3ff404 	addi	r16,r3,-48
  1106ec:	9839883a 	mov	fp,r19
  1106f0:	a43ff82e 	bgeu	r20,r16,1106d4 <__alt_data_end+0xfffd06d4>
  1106f4:	20020c16 	blt	r4,zero,110f28 <___svfiprintf_internal_r+0x11d4>
  1106f8:	d9002015 	stw	r4,128(sp)
  1106fc:	003de206 	br	10fe88 <__alt_data_end+0xfffcfe88>
  110700:	8821883a 	mov	r16,r17
  110704:	dc402103 	ldbu	r17,132(sp)
  110708:	b811883a 	mov	r8,r23
  11070c:	8c403fcc 	andi	r17,r17,255
  110710:	8802721e 	bne	r17,zero,1110dc <___svfiprintf_internal_r+0x1388>
  110714:	84000414 	ori	r16,r16,16
  110718:	8080080c 	andi	r2,r16,32
  11071c:	103e9f1e 	bne	r2,zero,11019c <__alt_data_end+0xfffd019c>
  110720:	8080040c 	andi	r2,r16,16
  110724:	10015326 	beq	r2,zero,110c74 <___svfiprintf_internal_r+0xf20>
  110728:	d8c02417 	ldw	r3,144(sp)
  11072c:	d9002017 	ldw	r4,128(sp)
  110730:	d8001d85 	stb	zero,118(sp)
  110734:	18800104 	addi	r2,r3,4
  110738:	1c800017 	ldw	r18,0(r3)
  11073c:	0029883a 	mov	r20,zero
  110740:	20015516 	blt	r4,zero,110c98 <___svfiprintf_internal_r+0xf44>
  110744:	00ffdfc4 	movi	r3,-129
  110748:	d8802415 	stw	r2,144(sp)
  11074c:	80e0703a 	and	r16,r16,r3
  110750:	002b883a 	mov	r21,zero
  110754:	903e9e26 	beq	r18,zero,1101d0 <__alt_data_end+0xfffd01d0>
  110758:	00800244 	movi	r2,9
  11075c:	14bf6a36 	bltu	r2,r18,110508 <__alt_data_end+0xfffd0508>
  110760:	94800c04 	addi	r18,r18,48
  110764:	dc8019c5 	stb	r18,103(sp)
  110768:	dd002c17 	ldw	r20,176(sp)
  11076c:	dc4019c4 	addi	r17,sp,103
  110770:	003e9c06 	br	1101e4 <__alt_data_end+0xfffd01e4>
  110774:	8821883a 	mov	r16,r17
  110778:	dc402103 	ldbu	r17,132(sp)
  11077c:	b811883a 	mov	r8,r23
  110780:	8c403fcc 	andi	r17,r17,255
  110784:	8802571e 	bne	r17,zero,1110e4 <___svfiprintf_internal_r+0x1390>
  110788:	84000414 	ori	r16,r16,16
  11078c:	8080080c 	andi	r2,r16,32
  110790:	103ea91e 	bne	r2,zero,110238 <__alt_data_end+0xfffd0238>
  110794:	8080040c 	andi	r2,r16,16
  110798:	10018026 	beq	r2,zero,110d9c <___svfiprintf_internal_r+0x1048>
  11079c:	d9402417 	ldw	r5,144(sp)
  1107a0:	d8c02017 	ldw	r3,128(sp)
  1107a4:	d8001d85 	stb	zero,118(sp)
  1107a8:	28800104 	addi	r2,r5,4
  1107ac:	2c800017 	ldw	r18,0(r5)
  1107b0:	0029883a 	mov	r20,zero
  1107b4:	18018216 	blt	r3,zero,110dc0 <___svfiprintf_internal_r+0x106c>
  1107b8:	00ffdfc4 	movi	r3,-129
  1107bc:	d8802415 	stw	r2,144(sp)
  1107c0:	80e0703a 	and	r16,r16,r3
  1107c4:	903ea81e 	bne	r18,zero,110268 <__alt_data_end+0xfffd0268>
  1107c8:	d8802017 	ldw	r2,128(sp)
  1107cc:	002b883a 	mov	r21,zero
  1107d0:	1001f226 	beq	r2,zero,110f9c <___svfiprintf_internal_r+0x1248>
  1107d4:	0025883a 	mov	r18,zero
  1107d8:	0029883a 	mov	r20,zero
  1107dc:	003ea306 	br	11026c <__alt_data_end+0xfffd026c>
  1107e0:	d8c01c17 	ldw	r3,112(sp)
  1107e4:	d8801b17 	ldw	r2,108(sp)
  1107e8:	d9001d87 	ldb	r4,118(sp)
  1107ec:	20000b26 	beq	r4,zero,11081c <___svfiprintf_internal_r+0xac8>
  1107f0:	d9001d84 	addi	r4,sp,118
  1107f4:	18c00044 	addi	r3,r3,1
  1107f8:	10800044 	addi	r2,r2,1
  1107fc:	41000015 	stw	r4,0(r8)
  110800:	01000044 	movi	r4,1
  110804:	41000115 	stw	r4,4(r8)
  110808:	d8c01c15 	stw	r3,112(sp)
  11080c:	d8801b15 	stw	r2,108(sp)
  110810:	010001c4 	movi	r4,7
  110814:	2080f316 	blt	r4,r2,110be4 <___svfiprintf_internal_r+0xe90>
  110818:	42000204 	addi	r8,r8,8
  11081c:	d9402117 	ldw	r5,132(sp)
  110820:	28000b26 	beq	r5,zero,110850 <___svfiprintf_internal_r+0xafc>
  110824:	d9001d04 	addi	r4,sp,116
  110828:	18c00084 	addi	r3,r3,2
  11082c:	10800044 	addi	r2,r2,1
  110830:	41000015 	stw	r4,0(r8)
  110834:	01000084 	movi	r4,2
  110838:	41000115 	stw	r4,4(r8)
  11083c:	d8c01c15 	stw	r3,112(sp)
  110840:	d8801b15 	stw	r2,108(sp)
  110844:	010001c4 	movi	r4,7
  110848:	2080ef16 	blt	r4,r2,110c08 <___svfiprintf_internal_r+0xeb4>
  11084c:	42000204 	addi	r8,r8,8
  110850:	d9402217 	ldw	r5,136(sp)
  110854:	01002004 	movi	r4,128
  110858:	29008f26 	beq	r5,r4,110a98 <___svfiprintf_internal_r+0xd44>
  11085c:	d9002017 	ldw	r4,128(sp)
  110860:	252fc83a 	sub	r23,r4,r20
  110864:	05c0310e 	bge	zero,r23,11092c <___svfiprintf_internal_r+0xbd8>
  110868:	07000404 	movi	fp,16
  11086c:	e5c17d0e 	bge	fp,r23,110e64 <___svfiprintf_internal_r+0x1110>
  110870:	010004b4 	movhi	r4,18
  110874:	210f7604 	addi	r4,r4,15832
  110878:	dc002015 	stw	r16,128(sp)
  11087c:	dc402215 	stw	r17,136(sp)
  110880:	d9002115 	stw	r4,132(sp)
  110884:	b823883a 	mov	r17,r23
  110888:	054001c4 	movi	r21,7
  11088c:	982f883a 	mov	r23,r19
  110890:	dc002717 	ldw	r16,156(sp)
  110894:	9027883a 	mov	r19,r18
  110898:	dc802317 	ldw	r18,140(sp)
  11089c:	00000306 	br	1108ac <___svfiprintf_internal_r+0xb58>
  1108a0:	8c7ffc04 	addi	r17,r17,-16
  1108a4:	42000204 	addi	r8,r8,8
  1108a8:	e440110e 	bge	fp,r17,1108f0 <___svfiprintf_internal_r+0xb9c>
  1108ac:	18c00404 	addi	r3,r3,16
  1108b0:	10800044 	addi	r2,r2,1
  1108b4:	45800015 	stw	r22,0(r8)
  1108b8:	47000115 	stw	fp,4(r8)
  1108bc:	d8c01c15 	stw	r3,112(sp)
  1108c0:	d8801b15 	stw	r2,108(sp)
  1108c4:	a8bff60e 	bge	r21,r2,1108a0 <__alt_data_end+0xfffd08a0>
  1108c8:	d9801a04 	addi	r6,sp,104
  1108cc:	900b883a 	mov	r5,r18
  1108d0:	8009883a 	mov	r4,r16
  1108d4:	010fb840 	call	10fb84 <__ssprint_r>
  1108d8:	10005e1e 	bne	r2,zero,110a54 <___svfiprintf_internal_r+0xd00>
  1108dc:	8c7ffc04 	addi	r17,r17,-16
  1108e0:	d8c01c17 	ldw	r3,112(sp)
  1108e4:	d8801b17 	ldw	r2,108(sp)
  1108e8:	d811883a 	mov	r8,sp
  1108ec:	e47fef16 	blt	fp,r17,1108ac <__alt_data_end+0xfffd08ac>
  1108f0:	9825883a 	mov	r18,r19
  1108f4:	dc002017 	ldw	r16,128(sp)
  1108f8:	b827883a 	mov	r19,r23
  1108fc:	882f883a 	mov	r23,r17
  110900:	dc402217 	ldw	r17,136(sp)
  110904:	d9402117 	ldw	r5,132(sp)
  110908:	1dc7883a 	add	r3,r3,r23
  11090c:	10800044 	addi	r2,r2,1
  110910:	41400015 	stw	r5,0(r8)
  110914:	45c00115 	stw	r23,4(r8)
  110918:	d8c01c15 	stw	r3,112(sp)
  11091c:	d8801b15 	stw	r2,108(sp)
  110920:	010001c4 	movi	r4,7
  110924:	2080a616 	blt	r4,r2,110bc0 <___svfiprintf_internal_r+0xe6c>
  110928:	42000204 	addi	r8,r8,8
  11092c:	a0c7883a 	add	r3,r20,r3
  110930:	10800044 	addi	r2,r2,1
  110934:	44400015 	stw	r17,0(r8)
  110938:	45000115 	stw	r20,4(r8)
  11093c:	d8c01c15 	stw	r3,112(sp)
  110940:	d8801b15 	stw	r2,108(sp)
  110944:	010001c4 	movi	r4,7
  110948:	20808816 	blt	r4,r2,110b6c <___svfiprintf_internal_r+0xe18>
  11094c:	42000204 	addi	r8,r8,8
  110950:	8400010c 	andi	r16,r16,4
  110954:	80002c26 	beq	r16,zero,110a08 <___svfiprintf_internal_r+0xcb4>
  110958:	d8802517 	ldw	r2,148(sp)
  11095c:	14a1c83a 	sub	r16,r2,r18
  110960:	0400290e 	bge	zero,r16,110a08 <___svfiprintf_internal_r+0xcb4>
  110964:	04400404 	movi	r17,16
  110968:	d8801b17 	ldw	r2,108(sp)
  11096c:	8c01a70e 	bge	r17,r16,11100c <___svfiprintf_internal_r+0x12b8>
  110970:	014004b4 	movhi	r5,18
  110974:	294f7a04 	addi	r5,r5,15848
  110978:	d9402815 	stw	r5,160(sp)
  11097c:	050001c4 	movi	r20,7
  110980:	dd402717 	ldw	r21,156(sp)
  110984:	ddc02317 	ldw	r23,140(sp)
  110988:	00000306 	br	110998 <___svfiprintf_internal_r+0xc44>
  11098c:	843ffc04 	addi	r16,r16,-16
  110990:	42000204 	addi	r8,r8,8
  110994:	8c00130e 	bge	r17,r16,1109e4 <___svfiprintf_internal_r+0xc90>
  110998:	010004b4 	movhi	r4,18
  11099c:	18c00404 	addi	r3,r3,16
  1109a0:	10800044 	addi	r2,r2,1
  1109a4:	210f7a04 	addi	r4,r4,15848
  1109a8:	41000015 	stw	r4,0(r8)
  1109ac:	44400115 	stw	r17,4(r8)
  1109b0:	d8c01c15 	stw	r3,112(sp)
  1109b4:	d8801b15 	stw	r2,108(sp)
  1109b8:	a0bff40e 	bge	r20,r2,11098c <__alt_data_end+0xfffd098c>
  1109bc:	d9801a04 	addi	r6,sp,104
  1109c0:	b80b883a 	mov	r5,r23
  1109c4:	a809883a 	mov	r4,r21
  1109c8:	010fb840 	call	10fb84 <__ssprint_r>
  1109cc:	1000211e 	bne	r2,zero,110a54 <___svfiprintf_internal_r+0xd00>
  1109d0:	843ffc04 	addi	r16,r16,-16
  1109d4:	d8c01c17 	ldw	r3,112(sp)
  1109d8:	d8801b17 	ldw	r2,108(sp)
  1109dc:	d811883a 	mov	r8,sp
  1109e0:	8c3fed16 	blt	r17,r16,110998 <__alt_data_end+0xfffd0998>
  1109e4:	d9402817 	ldw	r5,160(sp)
  1109e8:	1c07883a 	add	r3,r3,r16
  1109ec:	10800044 	addi	r2,r2,1
  1109f0:	41400015 	stw	r5,0(r8)
  1109f4:	44000115 	stw	r16,4(r8)
  1109f8:	d8c01c15 	stw	r3,112(sp)
  1109fc:	d8801b15 	stw	r2,108(sp)
  110a00:	010001c4 	movi	r4,7
  110a04:	2080b516 	blt	r4,r2,110cdc <___svfiprintf_internal_r+0xf88>
  110a08:	d8802517 	ldw	r2,148(sp)
  110a0c:	1480010e 	bge	r2,r18,110a14 <___svfiprintf_internal_r+0xcc0>
  110a10:	9005883a 	mov	r2,r18
  110a14:	d9002617 	ldw	r4,152(sp)
  110a18:	2089883a 	add	r4,r4,r2
  110a1c:	d9002615 	stw	r4,152(sp)
  110a20:	18005a1e 	bne	r3,zero,110b8c <___svfiprintf_internal_r+0xe38>
  110a24:	98800007 	ldb	r2,0(r19)
  110a28:	d8001b15 	stw	zero,108(sp)
  110a2c:	d811883a 	mov	r8,sp
  110a30:	103cec1e 	bne	r2,zero,10fde4 <__alt_data_end+0xfffcfde4>
  110a34:	9825883a 	mov	r18,r19
  110a38:	003d0206 	br	10fe44 <__alt_data_end+0xfffcfe44>
  110a3c:	d8801c17 	ldw	r2,112(sp)
  110a40:	10000426 	beq	r2,zero,110a54 <___svfiprintf_internal_r+0xd00>
  110a44:	d9402317 	ldw	r5,140(sp)
  110a48:	d9002717 	ldw	r4,156(sp)
  110a4c:	d9801a04 	addi	r6,sp,104
  110a50:	010fb840 	call	10fb84 <__ssprint_r>
  110a54:	d9402317 	ldw	r5,140(sp)
  110a58:	d8802617 	ldw	r2,152(sp)
  110a5c:	28c0030b 	ldhu	r3,12(r5)
  110a60:	18c0100c 	andi	r3,r3,64
  110a64:	18015c1e 	bne	r3,zero,110fd8 <___svfiprintf_internal_r+0x1284>
  110a68:	dfc03717 	ldw	ra,220(sp)
  110a6c:	df003617 	ldw	fp,216(sp)
  110a70:	ddc03517 	ldw	r23,212(sp)
  110a74:	dd803417 	ldw	r22,208(sp)
  110a78:	dd403317 	ldw	r21,204(sp)
  110a7c:	dd003217 	ldw	r20,200(sp)
  110a80:	dcc03117 	ldw	r19,196(sp)
  110a84:	dc803017 	ldw	r18,192(sp)
  110a88:	dc402f17 	ldw	r17,188(sp)
  110a8c:	dc002e17 	ldw	r16,184(sp)
  110a90:	dec03804 	addi	sp,sp,224
  110a94:	f800283a 	ret
  110a98:	d9002517 	ldw	r4,148(sp)
  110a9c:	24afc83a 	sub	r23,r4,r18
  110aa0:	05ff6e0e 	bge	zero,r23,11085c <__alt_data_end+0xfffd085c>
  110aa4:	07000404 	movi	fp,16
  110aa8:	e5c15c0e 	bge	fp,r23,11101c <___svfiprintf_internal_r+0x12c8>
  110aac:	010004b4 	movhi	r4,18
  110ab0:	210f7604 	addi	r4,r4,15832
  110ab4:	dc002215 	stw	r16,136(sp)
  110ab8:	dc402815 	stw	r17,160(sp)
  110abc:	d9002115 	stw	r4,132(sp)
  110ac0:	b823883a 	mov	r17,r23
  110ac4:	054001c4 	movi	r21,7
  110ac8:	982f883a 	mov	r23,r19
  110acc:	dc002717 	ldw	r16,156(sp)
  110ad0:	9027883a 	mov	r19,r18
  110ad4:	dc802317 	ldw	r18,140(sp)
  110ad8:	00000306 	br	110ae8 <___svfiprintf_internal_r+0xd94>
  110adc:	8c7ffc04 	addi	r17,r17,-16
  110ae0:	42000204 	addi	r8,r8,8
  110ae4:	e440110e 	bge	fp,r17,110b2c <___svfiprintf_internal_r+0xdd8>
  110ae8:	18c00404 	addi	r3,r3,16
  110aec:	10800044 	addi	r2,r2,1
  110af0:	45800015 	stw	r22,0(r8)
  110af4:	47000115 	stw	fp,4(r8)
  110af8:	d8c01c15 	stw	r3,112(sp)
  110afc:	d8801b15 	stw	r2,108(sp)
  110b00:	a8bff60e 	bge	r21,r2,110adc <__alt_data_end+0xfffd0adc>
  110b04:	d9801a04 	addi	r6,sp,104
  110b08:	900b883a 	mov	r5,r18
  110b0c:	8009883a 	mov	r4,r16
  110b10:	010fb840 	call	10fb84 <__ssprint_r>
  110b14:	103fcf1e 	bne	r2,zero,110a54 <__alt_data_end+0xfffd0a54>
  110b18:	8c7ffc04 	addi	r17,r17,-16
  110b1c:	d8c01c17 	ldw	r3,112(sp)
  110b20:	d8801b17 	ldw	r2,108(sp)
  110b24:	d811883a 	mov	r8,sp
  110b28:	e47fef16 	blt	fp,r17,110ae8 <__alt_data_end+0xfffd0ae8>
  110b2c:	9825883a 	mov	r18,r19
  110b30:	dc002217 	ldw	r16,136(sp)
  110b34:	b827883a 	mov	r19,r23
  110b38:	882f883a 	mov	r23,r17
  110b3c:	dc402817 	ldw	r17,160(sp)
  110b40:	d9402117 	ldw	r5,132(sp)
  110b44:	1dc7883a 	add	r3,r3,r23
  110b48:	10800044 	addi	r2,r2,1
  110b4c:	41400015 	stw	r5,0(r8)
  110b50:	45c00115 	stw	r23,4(r8)
  110b54:	d8c01c15 	stw	r3,112(sp)
  110b58:	d8801b15 	stw	r2,108(sp)
  110b5c:	010001c4 	movi	r4,7
  110b60:	2080b716 	blt	r4,r2,110e40 <___svfiprintf_internal_r+0x10ec>
  110b64:	42000204 	addi	r8,r8,8
  110b68:	003f3c06 	br	11085c <__alt_data_end+0xfffd085c>
  110b6c:	d9402317 	ldw	r5,140(sp)
  110b70:	d9002717 	ldw	r4,156(sp)
  110b74:	d9801a04 	addi	r6,sp,104
  110b78:	010fb840 	call	10fb84 <__ssprint_r>
  110b7c:	103fb51e 	bne	r2,zero,110a54 <__alt_data_end+0xfffd0a54>
  110b80:	d8c01c17 	ldw	r3,112(sp)
  110b84:	d811883a 	mov	r8,sp
  110b88:	003f7106 	br	110950 <__alt_data_end+0xfffd0950>
  110b8c:	d9402317 	ldw	r5,140(sp)
  110b90:	d9002717 	ldw	r4,156(sp)
  110b94:	d9801a04 	addi	r6,sp,104
  110b98:	010fb840 	call	10fb84 <__ssprint_r>
  110b9c:	103fa126 	beq	r2,zero,110a24 <__alt_data_end+0xfffd0a24>
  110ba0:	003fac06 	br	110a54 <__alt_data_end+0xfffd0a54>
  110ba4:	d9402317 	ldw	r5,140(sp)
  110ba8:	d9002717 	ldw	r4,156(sp)
  110bac:	d9801a04 	addi	r6,sp,104
  110bb0:	010fb840 	call	10fb84 <__ssprint_r>
  110bb4:	103fa71e 	bne	r2,zero,110a54 <__alt_data_end+0xfffd0a54>
  110bb8:	d811883a 	mov	r8,sp
  110bbc:	003c9e06 	br	10fe38 <__alt_data_end+0xfffcfe38>
  110bc0:	d9402317 	ldw	r5,140(sp)
  110bc4:	d9002717 	ldw	r4,156(sp)
  110bc8:	d9801a04 	addi	r6,sp,104
  110bcc:	010fb840 	call	10fb84 <__ssprint_r>
  110bd0:	103fa01e 	bne	r2,zero,110a54 <__alt_data_end+0xfffd0a54>
  110bd4:	d8c01c17 	ldw	r3,112(sp)
  110bd8:	d8801b17 	ldw	r2,108(sp)
  110bdc:	d811883a 	mov	r8,sp
  110be0:	003f5206 	br	11092c <__alt_data_end+0xfffd092c>
  110be4:	d9402317 	ldw	r5,140(sp)
  110be8:	d9002717 	ldw	r4,156(sp)
  110bec:	d9801a04 	addi	r6,sp,104
  110bf0:	010fb840 	call	10fb84 <__ssprint_r>
  110bf4:	103f971e 	bne	r2,zero,110a54 <__alt_data_end+0xfffd0a54>
  110bf8:	d8c01c17 	ldw	r3,112(sp)
  110bfc:	d8801b17 	ldw	r2,108(sp)
  110c00:	d811883a 	mov	r8,sp
  110c04:	003f0506 	br	11081c <__alt_data_end+0xfffd081c>
  110c08:	d9402317 	ldw	r5,140(sp)
  110c0c:	d9002717 	ldw	r4,156(sp)
  110c10:	d9801a04 	addi	r6,sp,104
  110c14:	010fb840 	call	10fb84 <__ssprint_r>
  110c18:	103f8e1e 	bne	r2,zero,110a54 <__alt_data_end+0xfffd0a54>
  110c1c:	d8c01c17 	ldw	r3,112(sp)
  110c20:	d8801b17 	ldw	r2,108(sp)
  110c24:	d811883a 	mov	r8,sp
  110c28:	003f0906 	br	110850 <__alt_data_end+0xfffd0850>
  110c2c:	d9402017 	ldw	r5,128(sp)
  110c30:	d8001d85 	stb	zero,118(sp)
  110c34:	28007716 	blt	r5,zero,110e14 <___svfiprintf_internal_r+0x10c0>
  110c38:	00ffdfc4 	movi	r3,-129
  110c3c:	9504b03a 	or	r2,r18,r20
  110c40:	80e0703a 	and	r16,r16,r3
  110c44:	103d3926 	beq	r2,zero,11012c <__alt_data_end+0xfffd012c>
  110c48:	002b883a 	mov	r21,zero
  110c4c:	003d3c06 	br	110140 <__alt_data_end+0xfffd0140>
  110c50:	d9402317 	ldw	r5,140(sp)
  110c54:	d9002717 	ldw	r4,156(sp)
  110c58:	d9801a04 	addi	r6,sp,104
  110c5c:	010fb840 	call	10fb84 <__ssprint_r>
  110c60:	103f7c1e 	bne	r2,zero,110a54 <__alt_data_end+0xfffd0a54>
  110c64:	d8c01c17 	ldw	r3,112(sp)
  110c68:	d8801b17 	ldw	r2,108(sp)
  110c6c:	d811883a 	mov	r8,sp
  110c70:	003edd06 	br	1107e8 <__alt_data_end+0xfffd07e8>
  110c74:	8080100c 	andi	r2,r16,64
  110c78:	d8001d85 	stb	zero,118(sp)
  110c7c:	10008426 	beq	r2,zero,110e90 <___svfiprintf_internal_r+0x113c>
  110c80:	d9402417 	ldw	r5,144(sp)
  110c84:	d8c02017 	ldw	r3,128(sp)
  110c88:	0029883a 	mov	r20,zero
  110c8c:	28800104 	addi	r2,r5,4
  110c90:	2c80000b 	ldhu	r18,0(r5)
  110c94:	183eab0e 	bge	r3,zero,110744 <__alt_data_end+0xfffd0744>
  110c98:	d8802415 	stw	r2,144(sp)
  110c9c:	002b883a 	mov	r21,zero
  110ca0:	9504b03a 	or	r2,r18,r20
  110ca4:	103e171e 	bne	r2,zero,110504 <__alt_data_end+0xfffd0504>
  110ca8:	00800044 	movi	r2,1
  110cac:	10803fcc 	andi	r2,r2,255
  110cb0:	00c00044 	movi	r3,1
  110cb4:	10c05c26 	beq	r2,r3,110e28 <___svfiprintf_internal_r+0x10d4>
  110cb8:	00c00084 	movi	r3,2
  110cbc:	10fd1e26 	beq	r2,r3,110138 <__alt_data_end+0xfffd0138>
  110cc0:	003ec406 	br	1107d4 <__alt_data_end+0xfffd07d4>
  110cc4:	d9401e17 	ldw	r5,120(sp)
  110cc8:	2c69c83a 	sub	r20,r5,r17
  110ccc:	003d4506 	br	1101e4 <__alt_data_end+0xfffd01e4>
  110cd0:	d8802415 	stw	r2,144(sp)
  110cd4:	98c00007 	ldb	r3,0(r19)
  110cd8:	003c6a06 	br	10fe84 <__alt_data_end+0xfffcfe84>
  110cdc:	d9402317 	ldw	r5,140(sp)
  110ce0:	d9002717 	ldw	r4,156(sp)
  110ce4:	d9801a04 	addi	r6,sp,104
  110ce8:	010fb840 	call	10fb84 <__ssprint_r>
  110cec:	103f591e 	bne	r2,zero,110a54 <__alt_data_end+0xfffd0a54>
  110cf0:	d8c01c17 	ldw	r3,112(sp)
  110cf4:	003f4406 	br	110a08 <__alt_data_end+0xfffd0a08>
  110cf8:	014004b4 	movhi	r5,18
  110cfc:	294e4b04 	addi	r5,r5,14636
  110d00:	d9402915 	stw	r5,164(sp)
  110d04:	003d0906 	br	11012c <__alt_data_end+0xfffd012c>
  110d08:	d8c02417 	ldw	r3,144(sp)
  110d0c:	d9002617 	ldw	r4,152(sp)
  110d10:	d9402417 	ldw	r5,144(sp)
  110d14:	18800017 	ldw	r2,0(r3)
  110d18:	2007d7fa 	srai	r3,r4,31
  110d1c:	29400104 	addi	r5,r5,4
  110d20:	d9402415 	stw	r5,144(sp)
  110d24:	11000015 	stw	r4,0(r2)
  110d28:	10c00115 	stw	r3,4(r2)
  110d2c:	003c2b06 	br	10fddc <__alt_data_end+0xfffcfddc>
  110d30:	d8c01d45 	stb	r3,117(sp)
  110d34:	d8c02017 	ldw	r3,128(sp)
  110d38:	00800c04 	movi	r2,48
  110d3c:	d8801d05 	stb	r2,116(sp)
  110d40:	d8001d85 	stb	zero,118(sp)
  110d44:	80800094 	ori	r2,r16,2
  110d48:	1800ac16 	blt	r3,zero,110ffc <___svfiprintf_internal_r+0x12a8>
  110d4c:	00bfdfc4 	movi	r2,-129
  110d50:	80a0703a 	and	r16,r16,r2
  110d54:	84000094 	ori	r16,r16,2
  110d58:	002b883a 	mov	r21,zero
  110d5c:	003cf806 	br	110140 <__alt_data_end+0xfffd0140>
  110d60:	98c00007 	ldb	r3,0(r19)
  110d64:	003c4706 	br	10fe84 <__alt_data_end+0xfffcfe84>
  110d68:	d9402417 	ldw	r5,144(sp)
  110d6c:	2c800017 	ldw	r18,0(r5)
  110d70:	29400104 	addi	r5,r5,4
  110d74:	d9402415 	stw	r5,144(sp)
  110d78:	9029d7fa 	srai	r20,r18,31
  110d7c:	a005883a 	mov	r2,r20
  110d80:	003dd806 	br	1104e4 <__alt_data_end+0xfffd04e4>
  110d84:	d9402417 	ldw	r5,144(sp)
  110d88:	0029883a 	mov	r20,zero
  110d8c:	2c800017 	ldw	r18,0(r5)
  110d90:	29400104 	addi	r5,r5,4
  110d94:	d9402415 	stw	r5,144(sp)
  110d98:	003cdb06 	br	110108 <__alt_data_end+0xfffd0108>
  110d9c:	8080100c 	andi	r2,r16,64
  110da0:	d8001d85 	stb	zero,118(sp)
  110da4:	10003326 	beq	r2,zero,110e74 <___svfiprintf_internal_r+0x1120>
  110da8:	d9002417 	ldw	r4,144(sp)
  110dac:	d9402017 	ldw	r5,128(sp)
  110db0:	0029883a 	mov	r20,zero
  110db4:	20800104 	addi	r2,r4,4
  110db8:	2480000b 	ldhu	r18,0(r4)
  110dbc:	283e7e0e 	bge	r5,zero,1107b8 <__alt_data_end+0xfffd07b8>
  110dc0:	9506b03a 	or	r3,r18,r20
  110dc4:	d8802415 	stw	r2,144(sp)
  110dc8:	183d271e 	bne	r3,zero,110268 <__alt_data_end+0xfffd0268>
  110dcc:	002b883a 	mov	r21,zero
  110dd0:	0005883a 	mov	r2,zero
  110dd4:	003fb506 	br	110cac <__alt_data_end+0xfffd0cac>
  110dd8:	98c00043 	ldbu	r3,1(r19)
  110ddc:	8c400814 	ori	r17,r17,32
  110de0:	9cc00044 	addi	r19,r19,1
  110de4:	18c03fcc 	andi	r3,r3,255
  110de8:	18c0201c 	xori	r3,r3,128
  110dec:	18ffe004 	addi	r3,r3,-128
  110df0:	003c2406 	br	10fe84 <__alt_data_end+0xfffcfe84>
  110df4:	d8c02415 	stw	r3,144(sp)
  110df8:	002b883a 	mov	r21,zero
  110dfc:	003fa806 	br	110ca0 <__alt_data_end+0xfffd0ca0>
  110e00:	010004b4 	movhi	r4,18
  110e04:	210e4b04 	addi	r4,r4,14636
  110e08:	d9002915 	stw	r4,164(sp)
  110e0c:	d8c02415 	stw	r3,144(sp)
  110e10:	1021883a 	mov	r16,r2
  110e14:	9504b03a 	or	r2,r18,r20
  110e18:	103f8b1e 	bne	r2,zero,110c48 <__alt_data_end+0xfffd0c48>
  110e1c:	002b883a 	mov	r21,zero
  110e20:	00800084 	movi	r2,2
  110e24:	003fa106 	br	110cac <__alt_data_end+0xfffd0cac>
  110e28:	0025883a 	mov	r18,zero
  110e2c:	94800c04 	addi	r18,r18,48
  110e30:	dc8019c5 	stb	r18,103(sp)
  110e34:	dd002c17 	ldw	r20,176(sp)
  110e38:	dc4019c4 	addi	r17,sp,103
  110e3c:	003ce906 	br	1101e4 <__alt_data_end+0xfffd01e4>
  110e40:	d9402317 	ldw	r5,140(sp)
  110e44:	d9002717 	ldw	r4,156(sp)
  110e48:	d9801a04 	addi	r6,sp,104
  110e4c:	010fb840 	call	10fb84 <__ssprint_r>
  110e50:	103f001e 	bne	r2,zero,110a54 <__alt_data_end+0xfffd0a54>
  110e54:	d8c01c17 	ldw	r3,112(sp)
  110e58:	d8801b17 	ldw	r2,108(sp)
  110e5c:	d811883a 	mov	r8,sp
  110e60:	003e7e06 	br	11085c <__alt_data_end+0xfffd085c>
  110e64:	014004b4 	movhi	r5,18
  110e68:	294f7604 	addi	r5,r5,15832
  110e6c:	d9402115 	stw	r5,132(sp)
  110e70:	003ea406 	br	110904 <__alt_data_end+0xfffd0904>
  110e74:	d8c02417 	ldw	r3,144(sp)
  110e78:	d9002017 	ldw	r4,128(sp)
  110e7c:	0029883a 	mov	r20,zero
  110e80:	18800104 	addi	r2,r3,4
  110e84:	1c800017 	ldw	r18,0(r3)
  110e88:	203e4b0e 	bge	r4,zero,1107b8 <__alt_data_end+0xfffd07b8>
  110e8c:	003fcc06 	br	110dc0 <__alt_data_end+0xfffd0dc0>
  110e90:	d9002417 	ldw	r4,144(sp)
  110e94:	d9402017 	ldw	r5,128(sp)
  110e98:	0029883a 	mov	r20,zero
  110e9c:	20800104 	addi	r2,r4,4
  110ea0:	24800017 	ldw	r18,0(r4)
  110ea4:	283e270e 	bge	r5,zero,110744 <__alt_data_end+0xfffd0744>
  110ea8:	003f7b06 	br	110c98 <__alt_data_end+0xfffd0c98>
  110eac:	8400100c 	andi	r16,r16,64
  110eb0:	80003326 	beq	r16,zero,110f80 <___svfiprintf_internal_r+0x122c>
  110eb4:	d9402417 	ldw	r5,144(sp)
  110eb8:	d8c02617 	ldw	r3,152(sp)
  110ebc:	28800017 	ldw	r2,0(r5)
  110ec0:	29400104 	addi	r5,r5,4
  110ec4:	d9402415 	stw	r5,144(sp)
  110ec8:	10c0000d 	sth	r3,0(r2)
  110ecc:	003bc306 	br	10fddc <__alt_data_end+0xfffcfddc>
  110ed0:	d9002417 	ldw	r4,144(sp)
  110ed4:	0029883a 	mov	r20,zero
  110ed8:	24800017 	ldw	r18,0(r4)
  110edc:	21000104 	addi	r4,r4,4
  110ee0:	d9002415 	stw	r4,144(sp)
  110ee4:	003c8806 	br	110108 <__alt_data_end+0xfffd0108>
  110ee8:	d8c02417 	ldw	r3,144(sp)
  110eec:	1c800017 	ldw	r18,0(r3)
  110ef0:	18c00104 	addi	r3,r3,4
  110ef4:	d8c02415 	stw	r3,144(sp)
  110ef8:	9029d7fa 	srai	r20,r18,31
  110efc:	a005883a 	mov	r2,r20
  110f00:	003d7806 	br	1104e4 <__alt_data_end+0xfffd04e4>
  110f04:	8809883a 	mov	r4,r17
  110f08:	da002d15 	stw	r8,180(sp)
  110f0c:	01031f00 	call	1031f0 <strlen>
  110f10:	1029883a 	mov	r20,r2
  110f14:	dd401d83 	ldbu	r21,118(sp)
  110f18:	ddc02415 	stw	r23,144(sp)
  110f1c:	d8002015 	stw	zero,128(sp)
  110f20:	da002d17 	ldw	r8,180(sp)
  110f24:	003caf06 	br	1101e4 <__alt_data_end+0xfffd01e4>
  110f28:	013fffc4 	movi	r4,-1
  110f2c:	003df206 	br	1106f8 <__alt_data_end+0xfffd06f8>
  110f30:	dd002017 	ldw	r20,128(sp)
  110f34:	00800184 	movi	r2,6
  110f38:	1500012e 	bgeu	r2,r20,110f40 <___svfiprintf_internal_r+0x11ec>
  110f3c:	1029883a 	mov	r20,r2
  110f40:	a025883a 	mov	r18,r20
  110f44:	a0004116 	blt	r20,zero,11104c <___svfiprintf_internal_r+0x12f8>
  110f48:	044004b4 	movhi	r17,18
  110f4c:	ddc02415 	stw	r23,144(sp)
  110f50:	8c4e5004 	addi	r17,r17,14656
  110f54:	003ce806 	br	1102f8 <__alt_data_end+0xfffd02f8>
  110f58:	04001004 	movi	r16,64
  110f5c:	800b883a 	mov	r5,r16
  110f60:	0101e280 	call	101e28 <_malloc_r>
  110f64:	d8c02317 	ldw	r3,140(sp)
  110f68:	18800015 	stw	r2,0(r3)
  110f6c:	18800415 	stw	r2,16(r3)
  110f70:	10004d26 	beq	r2,zero,1110a8 <___svfiprintf_internal_r+0x1354>
  110f74:	d9402317 	ldw	r5,140(sp)
  110f78:	2c000515 	stw	r16,20(r5)
  110f7c:	003b8906 	br	10fda4 <__alt_data_end+0xfffcfda4>
  110f80:	d9002417 	ldw	r4,144(sp)
  110f84:	d9402617 	ldw	r5,152(sp)
  110f88:	20800017 	ldw	r2,0(r4)
  110f8c:	21000104 	addi	r4,r4,4
  110f90:	d9002415 	stw	r4,144(sp)
  110f94:	11400015 	stw	r5,0(r2)
  110f98:	003b9006 	br	10fddc <__alt_data_end+0xfffcfddc>
  110f9c:	8080004c 	andi	r2,r16,1
  110fa0:	002b883a 	mov	r21,zero
  110fa4:	10000526 	beq	r2,zero,110fbc <___svfiprintf_internal_r+0x1268>
  110fa8:	00800c04 	movi	r2,48
  110fac:	d88019c5 	stb	r2,103(sp)
  110fb0:	dd002c17 	ldw	r20,176(sp)
  110fb4:	dc4019c4 	addi	r17,sp,103
  110fb8:	003c8a06 	br	1101e4 <__alt_data_end+0xfffd01e4>
  110fbc:	0029883a 	mov	r20,zero
  110fc0:	dc401a04 	addi	r17,sp,104
  110fc4:	003c8706 	br	1101e4 <__alt_data_end+0xfffd01e4>
  110fc8:	014004b4 	movhi	r5,18
  110fcc:	294f7a04 	addi	r5,r5,15848
  110fd0:	d9402815 	stw	r5,160(sp)
  110fd4:	003cff06 	br	1103d4 <__alt_data_end+0xfffd03d4>
  110fd8:	00bfffc4 	movi	r2,-1
  110fdc:	003ea206 	br	110a68 <__alt_data_end+0xfffd0a68>
  110fe0:	00800044 	movi	r2,1
  110fe4:	10803fcc 	andi	r2,r2,255
  110fe8:	00c00044 	movi	r3,1
  110fec:	10fd4526 	beq	r2,r3,110504 <__alt_data_end+0xfffd0504>
  110ff0:	00c00084 	movi	r3,2
  110ff4:	10fc5226 	beq	r2,r3,110140 <__alt_data_end+0xfffd0140>
  110ff8:	003c9c06 	br	11026c <__alt_data_end+0xfffd026c>
  110ffc:	1021883a 	mov	r16,r2
  111000:	002b883a 	mov	r21,zero
  111004:	00800084 	movi	r2,2
  111008:	003ff606 	br	110fe4 <__alt_data_end+0xfffd0fe4>
  11100c:	010004b4 	movhi	r4,18
  111010:	210f7a04 	addi	r4,r4,15848
  111014:	d9002815 	stw	r4,160(sp)
  111018:	003e7206 	br	1109e4 <__alt_data_end+0xfffd09e4>
  11101c:	014004b4 	movhi	r5,18
  111020:	294f7604 	addi	r5,r5,15832
  111024:	d9402115 	stw	r5,132(sp)
  111028:	003ec506 	br	110b40 <__alt_data_end+0xfffd0b40>
  11102c:	e027883a 	mov	r19,fp
  111030:	d8002015 	stw	zero,128(sp)
  111034:	003b9406 	br	10fe88 <__alt_data_end+0xfffcfe88>
  111038:	dd002017 	ldw	r20,128(sp)
  11103c:	dd401d83 	ldbu	r21,118(sp)
  111040:	ddc02415 	stw	r23,144(sp)
  111044:	d8002015 	stw	zero,128(sp)
  111048:	003c6606 	br	1101e4 <__alt_data_end+0xfffd01e4>
  11104c:	0025883a 	mov	r18,zero
  111050:	003fbd06 	br	110f48 <__alt_data_end+0xfffd0f48>
  111054:	d9402417 	ldw	r5,144(sp)
  111058:	d8c02417 	ldw	r3,144(sp)
  11105c:	29400017 	ldw	r5,0(r5)
  111060:	19000104 	addi	r4,r3,4
  111064:	d9002415 	stw	r4,144(sp)
  111068:	d9402015 	stw	r5,128(sp)
  11106c:	98c00043 	ldbu	r3,1(r19)
  111070:	e027883a 	mov	r19,fp
  111074:	283f5b0e 	bge	r5,zero,110de4 <__alt_data_end+0xfffd0de4>
  111078:	18c03fcc 	andi	r3,r3,255
  11107c:	013fffc4 	movi	r4,-1
  111080:	18c0201c 	xori	r3,r3,128
  111084:	d9002015 	stw	r4,128(sp)
  111088:	18ffe004 	addi	r3,r3,-128
  11108c:	003b7d06 	br	10fe84 <__alt_data_end+0xfffcfe84>
  111090:	dd401d85 	stb	r21,118(sp)
  111094:	003cf306 	br	110464 <__alt_data_end+0xfffd0464>
  111098:	dd401d85 	stb	r21,118(sp)
  11109c:	003d4e06 	br	1105d8 <__alt_data_end+0xfffd05d8>
  1110a0:	dd401d85 	stb	r21,118(sp)
  1110a4:	003c0e06 	br	1100e0 <__alt_data_end+0xfffd00e0>
  1110a8:	d9002717 	ldw	r4,156(sp)
  1110ac:	00800304 	movi	r2,12
  1110b0:	20800015 	stw	r2,0(r4)
  1110b4:	00bfffc4 	movi	r2,-1
  1110b8:	003e6b06 	br	110a68 <__alt_data_end+0xfffd0a68>
  1110bc:	dd401d85 	stb	r21,118(sp)
  1110c0:	003d0006 	br	1104c4 <__alt_data_end+0xfffd04c4>
  1110c4:	dd401d85 	stb	r21,118(sp)
  1110c8:	003d7106 	br	110690 <__alt_data_end+0xfffd0690>
  1110cc:	dd401d85 	stb	r21,118(sp)
  1110d0:	003c5706 	br	110230 <__alt_data_end+0xfffd0230>
  1110d4:	dd401d85 	stb	r21,118(sp)
  1110d8:	003c2e06 	br	110194 <__alt_data_end+0xfffd0194>
  1110dc:	dd401d85 	stb	r21,118(sp)
  1110e0:	003d8c06 	br	110714 <__alt_data_end+0xfffd0714>
  1110e4:	dd401d85 	stb	r21,118(sp)
  1110e8:	003da706 	br	110788 <__alt_data_end+0xfffd0788>
  1110ec:	dd401d85 	stb	r21,118(sp)
  1110f0:	003cc806 	br	110414 <__alt_data_end+0xfffd0414>

001110f4 <_sungetc_r>:
  1110f4:	00bfffc4 	movi	r2,-1
  1110f8:	28803726 	beq	r5,r2,1111d8 <_sungetc_r+0xe4>
  1110fc:	3080030b 	ldhu	r2,12(r6)
  111100:	30c00c17 	ldw	r3,48(r6)
  111104:	defffc04 	addi	sp,sp,-16
  111108:	10bff7cc 	andi	r2,r2,65503
  11110c:	dc800215 	stw	r18,8(sp)
  111110:	dfc00315 	stw	ra,12(sp)
  111114:	dc400115 	stw	r17,4(sp)
  111118:	dc000015 	stw	r16,0(sp)
  11111c:	3080030d 	sth	r2,12(r6)
  111120:	2c803fcc 	andi	r18,r5,255
  111124:	18001826 	beq	r3,zero,111188 <_sungetc_r+0x94>
  111128:	30c00117 	ldw	r3,4(r6)
  11112c:	30800d17 	ldw	r2,52(r6)
  111130:	3021883a 	mov	r16,r6
  111134:	2823883a 	mov	r17,r5
  111138:	18800e0e 	bge	r3,r2,111174 <_sungetc_r+0x80>
  11113c:	80c00017 	ldw	r3,0(r16)
  111140:	9005883a 	mov	r2,r18
  111144:	193fffc4 	addi	r4,r3,-1
  111148:	81000015 	stw	r4,0(r16)
  11114c:	1c7fffc5 	stb	r17,-1(r3)
  111150:	80c00117 	ldw	r3,4(r16)
  111154:	18c00044 	addi	r3,r3,1
  111158:	80c00115 	stw	r3,4(r16)
  11115c:	dfc00317 	ldw	ra,12(sp)
  111160:	dc800217 	ldw	r18,8(sp)
  111164:	dc400117 	ldw	r17,4(sp)
  111168:	dc000017 	ldw	r16,0(sp)
  11116c:	dec00404 	addi	sp,sp,16
  111170:	f800283a 	ret
  111174:	300b883a 	mov	r5,r6
  111178:	01124b80 	call	1124b8 <__submore>
  11117c:	103fef26 	beq	r2,zero,11113c <__alt_data_end+0xfffd113c>
  111180:	00bfffc4 	movi	r2,-1
  111184:	003ff506 	br	11115c <__alt_data_end+0xfffd115c>
  111188:	30c00417 	ldw	r3,16(r6)
  11118c:	30800017 	ldw	r2,0(r6)
  111190:	18000326 	beq	r3,zero,1111a0 <_sungetc_r+0xac>
  111194:	1880022e 	bgeu	r3,r2,1111a0 <_sungetc_r+0xac>
  111198:	10ffffc3 	ldbu	r3,-1(r2)
  11119c:	90c01026 	beq	r18,r3,1111e0 <_sungetc_r+0xec>
  1111a0:	31c00117 	ldw	r7,4(r6)
  1111a4:	30800e15 	stw	r2,56(r6)
  1111a8:	008000c4 	movi	r2,3
  1111ac:	31001004 	addi	r4,r6,64
  1111b0:	30c01084 	addi	r3,r6,66
  1111b4:	30800d15 	stw	r2,52(r6)
  1111b8:	00800044 	movi	r2,1
  1111bc:	30800115 	stw	r2,4(r6)
  1111c0:	31c00f15 	stw	r7,60(r6)
  1111c4:	31000c15 	stw	r4,48(r6)
  1111c8:	31401085 	stb	r5,66(r6)
  1111cc:	30c00015 	stw	r3,0(r6)
  1111d0:	9005883a 	mov	r2,r18
  1111d4:	003fe106 	br	11115c <__alt_data_end+0xfffd115c>
  1111d8:	00bfffc4 	movi	r2,-1
  1111dc:	f800283a 	ret
  1111e0:	30c00117 	ldw	r3,4(r6)
  1111e4:	10bfffc4 	addi	r2,r2,-1
  1111e8:	30800015 	stw	r2,0(r6)
  1111ec:	18800044 	addi	r2,r3,1
  1111f0:	30800115 	stw	r2,4(r6)
  1111f4:	9005883a 	mov	r2,r18
  1111f8:	003fd806 	br	11115c <__alt_data_end+0xfffd115c>

001111fc <__ssrefill_r>:
  1111fc:	defffe04 	addi	sp,sp,-8
  111200:	dc000015 	stw	r16,0(sp)
  111204:	2821883a 	mov	r16,r5
  111208:	29400c17 	ldw	r5,48(r5)
  11120c:	dfc00115 	stw	ra,4(sp)
  111210:	28000e26 	beq	r5,zero,11124c <__ssrefill_r+0x50>
  111214:	80801004 	addi	r2,r16,64
  111218:	28800126 	beq	r5,r2,111220 <__ssrefill_r+0x24>
  11121c:	010b2b00 	call	10b2b0 <_free_r>
  111220:	80800f17 	ldw	r2,60(r16)
  111224:	80000c15 	stw	zero,48(r16)
  111228:	80800115 	stw	r2,4(r16)
  11122c:	10000726 	beq	r2,zero,11124c <__ssrefill_r+0x50>
  111230:	80c00e17 	ldw	r3,56(r16)
  111234:	0005883a 	mov	r2,zero
  111238:	80c00015 	stw	r3,0(r16)
  11123c:	dfc00117 	ldw	ra,4(sp)
  111240:	dc000017 	ldw	r16,0(sp)
  111244:	dec00204 	addi	sp,sp,8
  111248:	f800283a 	ret
  11124c:	8080030b 	ldhu	r2,12(r16)
  111250:	80c00417 	ldw	r3,16(r16)
  111254:	80000115 	stw	zero,4(r16)
  111258:	10800814 	ori	r2,r2,32
  11125c:	8080030d 	sth	r2,12(r16)
  111260:	80c00015 	stw	r3,0(r16)
  111264:	00bfffc4 	movi	r2,-1
  111268:	003ff406 	br	11123c <__alt_data_end+0xfffd123c>

0011126c <_sfread_r>:
  11126c:	defff704 	addi	sp,sp,-36
  111270:	dd000415 	stw	r20,16(sp)
  111274:	dcc00315 	stw	r19,12(sp)
  111278:	2029883a 	mov	r20,r4
  11127c:	2827883a 	mov	r19,r5
  111280:	3809883a 	mov	r4,r7
  111284:	300b883a 	mov	r5,r6
  111288:	ddc00715 	stw	r23,28(sp)
  11128c:	dd400515 	stw	r21,20(sp)
  111290:	dc400115 	stw	r17,4(sp)
  111294:	dfc00815 	stw	ra,32(sp)
  111298:	dd800615 	stw	r22,24(sp)
  11129c:	dc800215 	stw	r18,8(sp)
  1112a0:	dc000015 	stw	r16,0(sp)
  1112a4:	302f883a 	mov	r23,r6
  1112a8:	382b883a 	mov	r21,r7
  1112ac:	01160740 	call	116074 <__mulsi3>
  1112b0:	dc400917 	ldw	r17,36(sp)
  1112b4:	10002726 	beq	r2,zero,111354 <_sfread_r+0xe8>
  1112b8:	102d883a 	mov	r22,r2
  1112bc:	1025883a 	mov	r18,r2
  1112c0:	00000b06 	br	1112f0 <_sfread_r+0x84>
  1112c4:	01027180 	call	102718 <memcpy>
  1112c8:	88800017 	ldw	r2,0(r17)
  1112cc:	9c27883a 	add	r19,r19,r16
  1112d0:	9425c83a 	sub	r18,r18,r16
  1112d4:	1421883a 	add	r16,r2,r16
  1112d8:	88000115 	stw	zero,4(r17)
  1112dc:	880b883a 	mov	r5,r17
  1112e0:	8c000015 	stw	r16,0(r17)
  1112e4:	a009883a 	mov	r4,r20
  1112e8:	01111fc0 	call	1111fc <__ssrefill_r>
  1112ec:	10001b1e 	bne	r2,zero,11135c <_sfread_r+0xf0>
  1112f0:	8c000117 	ldw	r16,4(r17)
  1112f4:	9809883a 	mov	r4,r19
  1112f8:	89400017 	ldw	r5,0(r17)
  1112fc:	800d883a 	mov	r6,r16
  111300:	84bff036 	bltu	r16,r18,1112c4 <__alt_data_end+0xfffd12c4>
  111304:	900d883a 	mov	r6,r18
  111308:	01027180 	call	102718 <memcpy>
  11130c:	88c00117 	ldw	r3,4(r17)
  111310:	89000017 	ldw	r4,0(r17)
  111314:	a805883a 	mov	r2,r21
  111318:	1c87c83a 	sub	r3,r3,r18
  11131c:	24a5883a 	add	r18,r4,r18
  111320:	88c00115 	stw	r3,4(r17)
  111324:	8c800015 	stw	r18,0(r17)
  111328:	dfc00817 	ldw	ra,32(sp)
  11132c:	ddc00717 	ldw	r23,28(sp)
  111330:	dd800617 	ldw	r22,24(sp)
  111334:	dd400517 	ldw	r21,20(sp)
  111338:	dd000417 	ldw	r20,16(sp)
  11133c:	dcc00317 	ldw	r19,12(sp)
  111340:	dc800217 	ldw	r18,8(sp)
  111344:	dc400117 	ldw	r17,4(sp)
  111348:	dc000017 	ldw	r16,0(sp)
  11134c:	dec00904 	addi	sp,sp,36
  111350:	f800283a 	ret
  111354:	0005883a 	mov	r2,zero
  111358:	003ff306 	br	111328 <__alt_data_end+0xfffd1328>
  11135c:	b80b883a 	mov	r5,r23
  111360:	b489c83a 	sub	r4,r22,r18
  111364:	0115fb80 	call	115fb8 <__udivsi3>
  111368:	003fef06 	br	111328 <__alt_data_end+0xfffd1328>

0011136c <__ssvfiscanf_r>:
  11136c:	2880030b 	ldhu	r2,12(r5)
  111370:	deff9b04 	addi	sp,sp,-404
  111374:	dd005f15 	stw	r20,380(sp)
  111378:	dc405c15 	stw	r17,368(sp)
  11137c:	dfc06415 	stw	ra,400(sp)
  111380:	df006315 	stw	fp,396(sp)
  111384:	ddc06215 	stw	r23,392(sp)
  111388:	dd806115 	stw	r22,388(sp)
  11138c:	dd406015 	stw	r21,384(sp)
  111390:	dcc05e15 	stw	r19,376(sp)
  111394:	dc805d15 	stw	r18,372(sp)
  111398:	dc005b15 	stw	r16,364(sp)
  11139c:	10c8000c 	andi	r3,r2,8192
  1113a0:	d9c04f15 	stw	r7,316(sp)
  1113a4:	2829883a 	mov	r20,r5
  1113a8:	2023883a 	mov	r17,r4
  1113ac:	1800061e 	bne	r3,zero,1113c8 <__ssvfiscanf_r+0x5c>
  1113b0:	29001917 	ldw	r4,100(r5)
  1113b4:	00f7ffc4 	movi	r3,-8193
  1113b8:	10880014 	ori	r2,r2,8192
  1113bc:	20c6703a 	and	r3,r4,r3
  1113c0:	2880030d 	sth	r2,12(r5)
  1113c4:	28c01915 	stw	r3,100(r5)
  1113c8:	30800003 	ldbu	r2,0(r6)
  1113cc:	dac04104 	addi	r11,sp,260
  1113d0:	0039883a 	mov	fp,zero
  1113d4:	048004b4 	movhi	r18,18
  1113d8:	d8005215 	stw	zero,328(sp)
  1113dc:	d8005015 	stw	zero,320(sp)
  1113e0:	d8005115 	stw	zero,324(sp)
  1113e4:	dac04e15 	stw	r11,312(sp)
  1113e8:	d8804d15 	stw	r2,308(sp)
  1113ec:	e027883a 	mov	r19,fp
  1113f0:	94973004 	addi	r18,r18,23744
  1113f4:	a039883a 	mov	fp,r20
  1113f8:	35000044 	addi	r20,r6,1
  1113fc:	10001e26 	beq	r2,zero,111478 <__ssvfiscanf_r+0x10c>
  111400:	95800017 	ldw	r22,0(r18)
  111404:	b087883a 	add	r3,r22,r2
  111408:	18c00043 	ldbu	r3,1(r3)
  11140c:	18c0020c 	andi	r3,r3,8
  111410:	18001b26 	beq	r3,zero,111480 <__ssvfiscanf_r+0x114>
  111414:	e0800117 	ldw	r2,4(fp)
  111418:	00800e0e 	bge	zero,r2,111454 <__ssvfiscanf_r+0xe8>
  11141c:	e0c00017 	ldw	r3,0(fp)
  111420:	91000017 	ldw	r4,0(r18)
  111424:	18800003 	ldbu	r2,0(r3)
  111428:	2085883a 	add	r2,r4,r2
  11142c:	10800043 	ldbu	r2,1(r2)
  111430:	1080020c 	andi	r2,r2,8
  111434:	10000b26 	beq	r2,zero,111464 <__ssvfiscanf_r+0xf8>
  111438:	e0800117 	ldw	r2,4(fp)
  11143c:	18c00044 	addi	r3,r3,1
  111440:	e0c00015 	stw	r3,0(fp)
  111444:	10bfffc4 	addi	r2,r2,-1
  111448:	e0800115 	stw	r2,4(fp)
  11144c:	9cc00044 	addi	r19,r19,1
  111450:	00bff216 	blt	zero,r2,11141c <__alt_data_end+0xfffd141c>
  111454:	e00b883a 	mov	r5,fp
  111458:	8809883a 	mov	r4,r17
  11145c:	01111fc0 	call	1111fc <__ssrefill_r>
  111460:	103fee26 	beq	r2,zero,11141c <__alt_data_end+0xfffd141c>
  111464:	a00d883a 	mov	r6,r20
  111468:	30800003 	ldbu	r2,0(r6)
  11146c:	35000044 	addi	r20,r6,1
  111470:	d8804d15 	stw	r2,308(sp)
  111474:	103fe21e 	bne	r2,zero,111400 <__alt_data_end+0xfffd1400>
  111478:	d8805117 	ldw	r2,324(sp)
  11147c:	00009a06 	br	1116e8 <__ssvfiscanf_r+0x37c>
  111480:	00c00944 	movi	r3,37
  111484:	10c0891e 	bne	r2,r3,1116ac <__ssvfiscanf_r+0x340>
  111488:	31800043 	ldbu	r6,1(r6)
  11148c:	002f883a 	mov	r23,zero
  111490:	b809883a 	mov	r4,r23
  111494:	0021883a 	mov	r16,zero
  111498:	01c01e04 	movi	r7,120
  11149c:	00c01b04 	movi	r3,108
  1114a0:	302f883a 	mov	r23,r6
  1114a4:	a5400044 	addi	r21,r20,1
  1114a8:	3dc0e436 	bltu	r7,r23,11183c <__ssvfiscanf_r+0x4d0>
  1114ac:	b80490ba 	slli	r2,r23,2
  1114b0:	01400474 	movhi	r5,17
  1114b4:	29453104 	addi	r5,r5,5316
  1114b8:	1145883a 	add	r2,r2,r5
  1114bc:	10800017 	ldw	r2,0(r2)
  1114c0:	1000683a 	jmp	r2
  1114c4:	001116e4 	muli	zero,zero,17499
  1114c8:	0011183c 	xorhi	zero,zero,17504
  1114cc:	0011183c 	xorhi	zero,zero,17504
  1114d0:	0011183c 	xorhi	zero,zero,17504
  1114d4:	0011183c 	xorhi	zero,zero,17504
  1114d8:	0011183c 	xorhi	zero,zero,17504
  1114dc:	0011183c 	xorhi	zero,zero,17504
  1114e0:	0011183c 	xorhi	zero,zero,17504
  1114e4:	0011183c 	xorhi	zero,zero,17504
  1114e8:	0011183c 	xorhi	zero,zero,17504
  1114ec:	0011183c 	xorhi	zero,zero,17504
  1114f0:	0011183c 	xorhi	zero,zero,17504
  1114f4:	0011183c 	xorhi	zero,zero,17504
  1114f8:	0011183c 	xorhi	zero,zero,17504
  1114fc:	0011183c 	xorhi	zero,zero,17504
  111500:	0011183c 	xorhi	zero,zero,17504
  111504:	0011183c 	xorhi	zero,zero,17504
  111508:	0011183c 	xorhi	zero,zero,17504
  11150c:	0011183c 	xorhi	zero,zero,17504
  111510:	0011183c 	xorhi	zero,zero,17504
  111514:	0011183c 	xorhi	zero,zero,17504
  111518:	0011183c 	xorhi	zero,zero,17504
  11151c:	0011183c 	xorhi	zero,zero,17504
  111520:	0011183c 	xorhi	zero,zero,17504
  111524:	0011183c 	xorhi	zero,zero,17504
  111528:	0011183c 	xorhi	zero,zero,17504
  11152c:	0011183c 	xorhi	zero,zero,17504
  111530:	0011183c 	xorhi	zero,zero,17504
  111534:	0011183c 	xorhi	zero,zero,17504
  111538:	0011183c 	xorhi	zero,zero,17504
  11153c:	0011183c 	xorhi	zero,zero,17504
  111540:	0011183c 	xorhi	zero,zero,17504
  111544:	0011183c 	xorhi	zero,zero,17504
  111548:	0011183c 	xorhi	zero,zero,17504
  11154c:	0011183c 	xorhi	zero,zero,17504
  111550:	0011183c 	xorhi	zero,zero,17504
  111554:	0011183c 	xorhi	zero,zero,17504
  111558:	001116a8 	cmpgeui	zero,zero,17498
  11155c:	0011183c 	xorhi	zero,zero,17504
  111560:	0011183c 	xorhi	zero,zero,17504
  111564:	0011183c 	xorhi	zero,zero,17504
  111568:	0011183c 	xorhi	zero,zero,17504
  11156c:	00111a80 	call	111a8 <OSCtxSw_SWITCH_PC+0x11168>
  111570:	0011183c 	xorhi	zero,zero,17504
  111574:	0011183c 	xorhi	zero,zero,17504
  111578:	0011183c 	xorhi	zero,zero,17504
  11157c:	0011183c 	xorhi	zero,zero,17504
  111580:	0011183c 	xorhi	zero,zero,17504
  111584:	001119ec 	andhi	zero,zero,17511
  111588:	001119ec 	andhi	zero,zero,17511
  11158c:	001119ec 	andhi	zero,zero,17511
  111590:	001119ec 	andhi	zero,zero,17511
  111594:	001119ec 	andhi	zero,zero,17511
  111598:	001119ec 	andhi	zero,zero,17511
  11159c:	001119ec 	andhi	zero,zero,17511
  1115a0:	001119ec 	andhi	zero,zero,17511
  1115a4:	001119ec 	andhi	zero,zero,17511
  1115a8:	001119ec 	andhi	zero,zero,17511
  1115ac:	0011183c 	xorhi	zero,zero,17504
  1115b0:	0011183c 	xorhi	zero,zero,17504
  1115b4:	0011183c 	xorhi	zero,zero,17504
  1115b8:	0011183c 	xorhi	zero,zero,17504
  1115bc:	0011183c 	xorhi	zero,zero,17504
  1115c0:	0011183c 	xorhi	zero,zero,17504
  1115c4:	0011183c 	xorhi	zero,zero,17504
  1115c8:	0011183c 	xorhi	zero,zero,17504
  1115cc:	0011183c 	xorhi	zero,zero,17504
  1115d0:	0011183c 	xorhi	zero,zero,17504
  1115d4:	001119c0 	call	1119c <OSCtxSw_SWITCH_PC+0x1115c>
  1115d8:	0011183c 	xorhi	zero,zero,17504
  1115dc:	0011183c 	xorhi	zero,zero,17504
  1115e0:	0011183c 	xorhi	zero,zero,17504
  1115e4:	0011183c 	xorhi	zero,zero,17504
  1115e8:	0011183c 	xorhi	zero,zero,17504
  1115ec:	0011183c 	xorhi	zero,zero,17504
  1115f0:	0011183c 	xorhi	zero,zero,17504
  1115f4:	00111a44 	movi	zero,17513
  1115f8:	0011183c 	xorhi	zero,zero,17504
  1115fc:	0011183c 	xorhi	zero,zero,17504
  111600:	00111a1c 	xori	zero,zero,17512
  111604:	0011183c 	xorhi	zero,zero,17504
  111608:	0011183c 	xorhi	zero,zero,17504
  11160c:	0011183c 	xorhi	zero,zero,17504
  111610:	0011183c 	xorhi	zero,zero,17504
  111614:	0011183c 	xorhi	zero,zero,17504
  111618:	0011183c 	xorhi	zero,zero,17504
  11161c:	0011183c 	xorhi	zero,zero,17504
  111620:	0011183c 	xorhi	zero,zero,17504
  111624:	00111a58 	cmpnei	zero,zero,17513
  111628:	0011183c 	xorhi	zero,zero,17504
  11162c:	0011183c 	xorhi	zero,zero,17504
  111630:	00111934 	movhi	zero,17508
  111634:	0011183c 	xorhi	zero,zero,17504
  111638:	0011183c 	xorhi	zero,zero,17504
  11163c:	0011183c 	xorhi	zero,zero,17504
  111640:	0011183c 	xorhi	zero,zero,17504
  111644:	0011183c 	xorhi	zero,zero,17504
  111648:	0011183c 	xorhi	zero,zero,17504
  11164c:	0011183c 	xorhi	zero,zero,17504
  111650:	001118b8 	rdprs	zero,zero,17506
  111654:	00111890 	cmplti	zero,zero,17506
  111658:	0011183c 	xorhi	zero,zero,17504
  11165c:	0011183c 	xorhi	zero,zero,17504
  111660:	0011183c 	xorhi	zero,zero,17504
  111664:	0011187c 	xorhi	zero,zero,17505
  111668:	00111a94 	movui	zero,17514
  11166c:	0011183c 	xorhi	zero,zero,17504
  111670:	0011183c 	xorhi	zero,zero,17504
  111674:	00111824 	muli	zero,zero,17504
  111678:	0011183c 	xorhi	zero,zero,17504
  11167c:	001117f8 	rdprs	zero,zero,17503
  111680:	001117d0 	cmplti	zero,zero,17503
  111684:	001117a4 	muli	zero,zero,17502
  111688:	0011183c 	xorhi	zero,zero,17504
  11168c:	0011183c 	xorhi	zero,zero,17504
  111690:	00111790 	cmplti	zero,zero,17502
  111694:	0011183c 	xorhi	zero,zero,17504
  111698:	00111718 	cmpnei	zero,zero,17500
  11169c:	0011183c 	xorhi	zero,zero,17504
  1116a0:	0011183c 	xorhi	zero,zero,17504
  1116a4:	00111a58 	cmpnei	zero,zero,17513
  1116a8:	a829883a 	mov	r20,r21
  1116ac:	e0800117 	ldw	r2,4(fp)
  1116b0:	0081e40e 	bge	zero,r2,111e44 <__ssvfiscanf_r+0xad8>
  1116b4:	e0800017 	ldw	r2,0(fp)
  1116b8:	a0ffffc3 	ldbu	r3,-1(r20)
  1116bc:	11000003 	ldbu	r4,0(r2)
  1116c0:	20ff6d1e 	bne	r4,r3,111478 <__alt_data_end+0xfffd1478>
  1116c4:	e0c00117 	ldw	r3,4(fp)
  1116c8:	10800044 	addi	r2,r2,1
  1116cc:	e0800015 	stw	r2,0(fp)
  1116d0:	18bfffc4 	addi	r2,r3,-1
  1116d4:	e0800115 	stw	r2,4(fp)
  1116d8:	9cc00044 	addi	r19,r19,1
  1116dc:	a00d883a 	mov	r6,r20
  1116e0:	003f6106 	br	111468 <__alt_data_end+0xfffd1468>
  1116e4:	00bfffc4 	movi	r2,-1
  1116e8:	dfc06417 	ldw	ra,400(sp)
  1116ec:	df006317 	ldw	fp,396(sp)
  1116f0:	ddc06217 	ldw	r23,392(sp)
  1116f4:	dd806117 	ldw	r22,388(sp)
  1116f8:	dd406017 	ldw	r21,384(sp)
  1116fc:	dd005f17 	ldw	r20,380(sp)
  111700:	dcc05e17 	ldw	r19,376(sp)
  111704:	dc805d17 	ldw	r18,372(sp)
  111708:	dc405c17 	ldw	r17,368(sp)
  11170c:	dc005b17 	ldw	r16,364(sp)
  111710:	dec06504 	addi	sp,sp,404
  111714:	f800283a 	ret
  111718:	e0800117 	ldw	r2,4(fp)
  11171c:	202f883a 	mov	r23,r4
  111720:	0081f20e 	bge	zero,r2,111eec <__ssvfiscanf_r+0xb80>
  111724:	00800474 	movhi	r2,17
  111728:	10bd7404 	addi	r2,r2,-2608
  11172c:	02c00284 	movi	r11,10
  111730:	d8805215 	stw	r2,328(sp)
  111734:	dac05015 	stw	r11,320(sp)
  111738:	050000c4 	movi	r20,3
  11173c:	e0800017 	ldw	r2,0(fp)
  111740:	00000206 	br	11174c <__ssvfiscanf_r+0x3e0>
  111744:	10800044 	addi	r2,r2,1
  111748:	e0800015 	stw	r2,0(fp)
  11174c:	11000003 	ldbu	r4,0(r2)
  111750:	20c03fcc 	andi	r3,r4,255
  111754:	b0c7883a 	add	r3,r22,r3
  111758:	18c00043 	ldbu	r3,1(r3)
  11175c:	1940020c 	andi	r5,r3,8
  111760:	2801ee26 	beq	r5,zero,111f1c <__ssvfiscanf_r+0xbb0>
  111764:	e0c00117 	ldw	r3,4(fp)
  111768:	9cc00044 	addi	r19,r19,1
  11176c:	18ffffc4 	addi	r3,r3,-1
  111770:	e0c00115 	stw	r3,4(fp)
  111774:	00fff316 	blt	zero,r3,111744 <__alt_data_end+0xfffd1744>
  111778:	e00b883a 	mov	r5,fp
  11177c:	8809883a 	mov	r4,r17
  111780:	01111fc0 	call	1111fc <__ssrefill_r>
  111784:	10016a1e 	bne	r2,zero,111d30 <__ssvfiscanf_r+0x9c4>
  111788:	95800017 	ldw	r22,0(r18)
  11178c:	003feb06 	br	11173c <__alt_data_end+0xfffd173c>
  111790:	e0800117 	ldw	r2,4(fp)
  111794:	202f883a 	mov	r23,r4
  111798:	0081c80e 	bge	zero,r2,111ebc <__ssvfiscanf_r+0xb50>
  11179c:	05000084 	movi	r20,2
  1117a0:	003fe606 	br	11173c <__alt_data_end+0xfffd173c>
  1117a4:	e0800117 	ldw	r2,4(fp)
  1117a8:	202f883a 	mov	r23,r4
  1117ac:	84008814 	ori	r16,r16,544
  1117b0:	0080ad0e 	bge	zero,r2,111a68 <__ssvfiscanf_r+0x6fc>
  1117b4:	00800474 	movhi	r2,17
  1117b8:	10bd7404 	addi	r2,r2,-2608
  1117bc:	02c00404 	movi	r11,16
  1117c0:	d8805215 	stw	r2,328(sp)
  1117c4:	dac05015 	stw	r11,320(sp)
  1117c8:	050000c4 	movi	r20,3
  1117cc:	003fdb06 	br	11173c <__alt_data_end+0xfffd173c>
  1117d0:	e0800117 	ldw	r2,4(fp)
  1117d4:	202f883a 	mov	r23,r4
  1117d8:	0080940e 	bge	zero,r2,111a2c <__ssvfiscanf_r+0x6c0>
  1117dc:	00800474 	movhi	r2,17
  1117e0:	10bd7404 	addi	r2,r2,-2608
  1117e4:	02c00204 	movi	r11,8
  1117e8:	d8805215 	stw	r2,328(sp)
  1117ec:	dac05015 	stw	r11,320(sp)
  1117f0:	050000c4 	movi	r20,3
  1117f4:	003fd106 	br	11173c <__alt_data_end+0xfffd173c>
  1117f8:	8080040c 	andi	r2,r16,16
  1117fc:	1000e41e 	bne	r2,zero,111b90 <__ssvfiscanf_r+0x824>
  111800:	8080010c 	andi	r2,r16,4
  111804:	10019926 	beq	r2,zero,111e6c <__ssvfiscanf_r+0xb00>
  111808:	dac04f17 	ldw	r11,316(sp)
  11180c:	a829883a 	mov	r20,r21
  111810:	58800017 	ldw	r2,0(r11)
  111814:	5ac00104 	addi	r11,r11,4
  111818:	dac04f15 	stw	r11,316(sp)
  11181c:	14c0000d 	sth	r19,0(r2)
  111820:	003f1006 	br	111464 <__alt_data_end+0xfffd1464>
  111824:	a5c00043 	ldbu	r23,1(r20)
  111828:	b8c18b26 	beq	r23,r3,111e58 <__ssvfiscanf_r+0xaec>
  11182c:	a829883a 	mov	r20,r21
  111830:	84000054 	ori	r16,r16,1
  111834:	a5400044 	addi	r21,r20,1
  111838:	3dff1c2e 	bgeu	r7,r23,1114ac <__alt_data_end+0xfffd14ac>
  11183c:	b80d883a 	mov	r6,r23
  111840:	b185883a 	add	r2,r22,r6
  111844:	10800043 	ldbu	r2,1(r2)
  111848:	00c00044 	movi	r3,1
  11184c:	202f883a 	mov	r23,r4
  111850:	108000cc 	andi	r2,r2,3
  111854:	10c17226 	beq	r2,r3,111e20 <__ssvfiscanf_r+0xab4>
  111858:	e0800117 	ldw	r2,4(fp)
  11185c:	0081730e 	bge	zero,r2,111e2c <__ssvfiscanf_r+0xac0>
  111860:	00800474 	movhi	r2,17
  111864:	10bc1604 	addi	r2,r2,-4008
  111868:	02c00284 	movi	r11,10
  11186c:	d8805215 	stw	r2,328(sp)
  111870:	dac05015 	stw	r11,320(sp)
  111874:	050000c4 	movi	r20,3
  111878:	003fb006 	br	11173c <__alt_data_end+0xfffd173c>
  11187c:	a1400043 	ldbu	r5,1(r20)
  111880:	84000114 	ori	r16,r16,4
  111884:	a829883a 	mov	r20,r21
  111888:	2dc03fcc 	andi	r23,r5,255
  11188c:	003f0506 	br	1114a4 <__alt_data_end+0xfffd14a4>
  111890:	e0800117 	ldw	r2,4(fp)
  111894:	202f883a 	mov	r23,r4
  111898:	0081640e 	bge	zero,r2,111e2c <__ssvfiscanf_r+0xac0>
  11189c:	02c00474 	movhi	r11,17
  1118a0:	5afc1604 	addi	r11,r11,-4008
  1118a4:	dac05215 	stw	r11,328(sp)
  1118a8:	02c00284 	movi	r11,10
  1118ac:	dac05015 	stw	r11,320(sp)
  1118b0:	050000c4 	movi	r20,3
  1118b4:	003fa106 	br	11173c <__alt_data_end+0xfffd173c>
  1118b8:	e0800117 	ldw	r2,4(fp)
  1118bc:	202f883a 	mov	r23,r4
  1118c0:	00812c0e 	bge	zero,r2,111d74 <__ssvfiscanf_r+0xa08>
  1118c4:	b800011e 	bne	r23,zero,1118cc <__ssvfiscanf_r+0x560>
  1118c8:	05c00044 	movi	r23,1
  1118cc:	8080004c 	andi	r2,r16,1
  1118d0:	1000791e 	bne	r2,zero,111ab8 <__ssvfiscanf_r+0x74c>
  1118d4:	8400040c 	andi	r16,r16,16
  1118d8:	80013f26 	beq	r16,zero,111dd8 <__ssvfiscanf_r+0xa6c>
  1118dc:	0021883a 	mov	r16,zero
  1118e0:	00000806 	br	111904 <__ssvfiscanf_r+0x598>
  1118e4:	1887883a 	add	r3,r3,r2
  1118e8:	e00b883a 	mov	r5,fp
  1118ec:	8809883a 	mov	r4,r17
  1118f0:	e0c00015 	stw	r3,0(fp)
  1118f4:	80a1883a 	add	r16,r16,r2
  1118f8:	b8afc83a 	sub	r23,r23,r2
  1118fc:	01111fc0 	call	1111fc <__ssrefill_r>
  111900:	1001331e 	bne	r2,zero,111dd0 <__ssvfiscanf_r+0xa64>
  111904:	e0800117 	ldw	r2,4(fp)
  111908:	e0c00017 	ldw	r3,0(fp)
  11190c:	15fff516 	blt	r2,r23,1118e4 <__alt_data_end+0xfffd18e4>
  111910:	15c5c83a 	sub	r2,r2,r23
  111914:	1dd5883a 	add	r10,r3,r23
  111918:	85e1883a 	add	r16,r16,r23
  11191c:	e0800115 	stw	r2,4(fp)
  111920:	e2800015 	stw	r10,0(fp)
  111924:	a829883a 	mov	r20,r21
  111928:	9c27883a 	add	r19,r19,r16
  11192c:	a00d883a 	mov	r6,r20
  111930:	003ecd06 	br	111468 <__alt_data_end+0xfffd1468>
  111934:	202f883a 	mov	r23,r4
  111938:	a80b883a 	mov	r5,r21
  11193c:	d9000104 	addi	r4,sp,4
  111940:	010d8200 	call	10d820 <__sccl>
  111944:	1029883a 	mov	r20,r2
  111948:	e0800117 	ldw	r2,4(fp)
  11194c:	0081620e 	bge	zero,r2,111ed8 <__ssvfiscanf_r+0xb6c>
  111950:	e1000017 	ldw	r4,0(fp)
  111954:	20800003 	ldbu	r2,0(r4)
  111958:	b8009026 	beq	r23,zero,111b9c <__ssvfiscanf_r+0x830>
  11195c:	8400040c 	andi	r16,r16,16
  111960:	80009126 	beq	r16,zero,111ba8 <__ssvfiscanf_r+0x83c>
  111964:	b821883a 	mov	r16,r23
  111968:	002b883a 	mov	r21,zero
  11196c:	00000106 	br	111974 <__ssvfiscanf_r+0x608>
  111970:	20800003 	ldbu	r2,0(r4)
  111974:	10803fcc 	andi	r2,r2,255
  111978:	d8c00104 	addi	r3,sp,4
  11197c:	1885883a 	add	r2,r3,r2
  111980:	10800007 	ldb	r2,0(r2)
  111984:	10011026 	beq	r2,zero,111dc8 <__ssvfiscanf_r+0xa5c>
  111988:	e0800117 	ldw	r2,4(fp)
  11198c:	21000044 	addi	r4,r4,1
  111990:	ad400044 	addi	r21,r21,1
  111994:	10bfffc4 	addi	r2,r2,-1
  111998:	e0800115 	stw	r2,4(fp)
  11199c:	e1000015 	stw	r4,0(fp)
  1119a0:	adc0eb26 	beq	r21,r23,111d50 <__ssvfiscanf_r+0x9e4>
  1119a4:	00bff216 	blt	zero,r2,111970 <__alt_data_end+0xfffd1970>
  1119a8:	e00b883a 	mov	r5,fp
  1119ac:	8809883a 	mov	r4,r17
  1119b0:	01111fc0 	call	1111fc <__ssrefill_r>
  1119b4:	1000e51e 	bne	r2,zero,111d4c <__ssvfiscanf_r+0x9e0>
  1119b8:	e1000017 	ldw	r4,0(fp)
  1119bc:	003fec06 	br	111970 <__alt_data_end+0xfffd1970>
  1119c0:	e0800117 	ldw	r2,4(fp)
  1119c4:	202f883a 	mov	r23,r4
  1119c8:	84000054 	ori	r16,r16,1
  1119cc:	0081170e 	bge	zero,r2,111e2c <__ssvfiscanf_r+0xac0>
  1119d0:	00c00474 	movhi	r3,17
  1119d4:	18fc1604 	addi	r3,r3,-4008
  1119d8:	02c00284 	movi	r11,10
  1119dc:	d8c05215 	stw	r3,328(sp)
  1119e0:	dac05015 	stw	r11,320(sp)
  1119e4:	050000c4 	movi	r20,3
  1119e8:	003f5406 	br	11173c <__alt_data_end+0xfffd173c>
  1119ec:	01400284 	movi	r5,10
  1119f0:	d8c05a15 	stw	r3,360(sp)
  1119f4:	d9c05915 	stw	r7,356(sp)
  1119f8:	01160740 	call	116074 <__mulsi3>
  1119fc:	a1400043 	ldbu	r5,1(r20)
  111a00:	15c5883a 	add	r2,r2,r23
  111a04:	113ff404 	addi	r4,r2,-48
  111a08:	a829883a 	mov	r20,r21
  111a0c:	2dc03fcc 	andi	r23,r5,255
  111a10:	d8c05a17 	ldw	r3,360(sp)
  111a14:	d9c05917 	ldw	r7,356(sp)
  111a18:	003ea206 	br	1114a4 <__alt_data_end+0xfffd14a4>
  111a1c:	e0800117 	ldw	r2,4(fp)
  111a20:	202f883a 	mov	r23,r4
  111a24:	84000054 	ori	r16,r16,1
  111a28:	00bf6c16 	blt	zero,r2,1117dc <__alt_data_end+0xfffd17dc>
  111a2c:	e00b883a 	mov	r5,fp
  111a30:	8809883a 	mov	r4,r17
  111a34:	01111fc0 	call	1111fc <__ssrefill_r>
  111a38:	1000bd1e 	bne	r2,zero,111d30 <__ssvfiscanf_r+0x9c4>
  111a3c:	95800017 	ldw	r22,0(r18)
  111a40:	003f6606 	br	1117dc <__alt_data_end+0xfffd17dc>
  111a44:	a1400043 	ldbu	r5,1(r20)
  111a48:	84000094 	ori	r16,r16,2
  111a4c:	a829883a 	mov	r20,r21
  111a50:	2dc03fcc 	andi	r23,r5,255
  111a54:	003e9306 	br	1114a4 <__alt_data_end+0xfffd14a4>
  111a58:	e0800117 	ldw	r2,4(fp)
  111a5c:	202f883a 	mov	r23,r4
  111a60:	84008014 	ori	r16,r16,512
  111a64:	00bf5316 	blt	zero,r2,1117b4 <__alt_data_end+0xfffd17b4>
  111a68:	e00b883a 	mov	r5,fp
  111a6c:	8809883a 	mov	r4,r17
  111a70:	01111fc0 	call	1111fc <__ssrefill_r>
  111a74:	1000ae1e 	bne	r2,zero,111d30 <__ssvfiscanf_r+0x9c4>
  111a78:	95800017 	ldw	r22,0(r18)
  111a7c:	003f4d06 	br	1117b4 <__alt_data_end+0xfffd17b4>
  111a80:	a1400043 	ldbu	r5,1(r20)
  111a84:	84000414 	ori	r16,r16,16
  111a88:	a829883a 	mov	r20,r21
  111a8c:	2dc03fcc 	andi	r23,r5,255
  111a90:	003e8406 	br	1114a4 <__alt_data_end+0xfffd14a4>
  111a94:	e0800117 	ldw	r2,4(fp)
  111a98:	202f883a 	mov	r23,r4
  111a9c:	0081190e 	bge	zero,r2,111f04 <__ssvfiscanf_r+0xb98>
  111aa0:	00800474 	movhi	r2,17
  111aa4:	10bc1604 	addi	r2,r2,-4008
  111aa8:	d8805215 	stw	r2,328(sp)
  111aac:	d8005015 	stw	zero,320(sp)
  111ab0:	050000c4 	movi	r20,3
  111ab4:	003f2106 	br	11173c <__alt_data_end+0xfffd173c>
  111ab8:	d8c04b04 	addi	r3,sp,300
  111abc:	8400040c 	andi	r16,r16,16
  111ac0:	01800204 	movi	r6,8
  111ac4:	000b883a 	mov	r5,zero
  111ac8:	1809883a 	mov	r4,r3
  111acc:	dc005415 	stw	r16,336(sp)
  111ad0:	d8c05315 	stw	r3,332(sp)
  111ad4:	01028600 	call	102860 <memset>
  111ad8:	dc005417 	ldw	r16,336(sp)
  111adc:	8000a026 	beq	r16,zero,111d60 <__ssvfiscanf_r+0x9f4>
  111ae0:	002d883a 	mov	r22,zero
  111ae4:	0021883a 	mov	r16,zero
  111ae8:	010bb400 	call	10bb40 <__locale_mb_cur_max>
  111aec:	14009026 	beq	r2,r16,111d30 <__ssvfiscanf_r+0x9c4>
  111af0:	e0800017 	ldw	r2,0(fp)
  111af4:	e0c00117 	ldw	r3,4(fp)
  111af8:	dac05317 	ldw	r11,332(sp)
  111afc:	12000003 	ldbu	r8,0(r2)
  111b00:	18ffffc4 	addi	r3,r3,-1
  111b04:	10800044 	addi	r2,r2,1
  111b08:	d9004104 	addi	r4,sp,260
  111b0c:	e0c00115 	stw	r3,4(fp)
  111b10:	e0800015 	stw	r2,0(fp)
  111b14:	85000044 	addi	r20,r16,1
  111b18:	dac00015 	stw	r11,0(sp)
  111b1c:	2421883a 	add	r16,r4,r16
  111b20:	200d883a 	mov	r6,r4
  111b24:	a00f883a 	mov	r7,r20
  111b28:	b00b883a 	mov	r5,r22
  111b2c:	8809883a 	mov	r4,r17
  111b30:	82000005 	stb	r8,0(r16)
  111b34:	010bdb00 	call	10bdb0 <_mbrtowc_r>
  111b38:	00ffffc4 	movi	r3,-1
  111b3c:	10c07c26 	beq	r2,r3,111d30 <__ssvfiscanf_r+0x9c4>
  111b40:	1000911e 	bne	r2,zero,111d88 <__ssvfiscanf_r+0xa1c>
  111b44:	dac05417 	ldw	r11,336(sp)
  111b48:	5800951e 	bne	r11,zero,111da0 <__ssvfiscanf_r+0xa34>
  111b4c:	b0000015 	stw	zero,0(r22)
  111b50:	9d27883a 	add	r19,r19,r20
  111b54:	b8ef883a 	add	r23,r23,r3
  111b58:	b5800104 	addi	r22,r22,4
  111b5c:	e0800117 	ldw	r2,4(fp)
  111b60:	0021883a 	mov	r16,zero
  111b64:	00807c16 	blt	zero,r2,111d58 <__ssvfiscanf_r+0x9ec>
  111b68:	e00b883a 	mov	r5,fp
  111b6c:	8809883a 	mov	r4,r17
  111b70:	01111fc0 	call	1111fc <__ssrefill_r>
  111b74:	10007826 	beq	r2,zero,111d58 <__ssvfiscanf_r+0x9ec>
  111b78:	80006d1e 	bne	r16,zero,111d30 <__ssvfiscanf_r+0x9c4>
  111b7c:	d8c05417 	ldw	r3,336(sp)
  111b80:	1800031e 	bne	r3,zero,111b90 <__ssvfiscanf_r+0x824>
  111b84:	dac05117 	ldw	r11,324(sp)
  111b88:	5ac00044 	addi	r11,r11,1
  111b8c:	dac05115 	stw	r11,324(sp)
  111b90:	a829883a 	mov	r20,r21
  111b94:	a00d883a 	mov	r6,r20
  111b98:	003e3306 	br	111468 <__alt_data_end+0xfffd1468>
  111b9c:	8400040c 	andi	r16,r16,16
  111ba0:	05ffffc4 	movi	r23,-1
  111ba4:	803f6f1e 	bne	r16,zero,111964 <__alt_data_end+0xfffd1964>
  111ba8:	dac04f17 	ldw	r11,316(sp)
  111bac:	babfffc4 	addi	r10,r23,-1
  111bb0:	5d400017 	ldw	r21,0(r11)
  111bb4:	5c000104 	addi	r16,r11,4
  111bb8:	a807883a 	mov	r3,r21
  111bbc:	aaaf883a 	add	r23,r21,r10
  111bc0:	00000306 	br	111bd0 <__ssvfiscanf_r+0x864>
  111bc4:	e1000017 	ldw	r4,0(fp)
  111bc8:	b007883a 	mov	r3,r22
  111bcc:	20800003 	ldbu	r2,0(r4)
  111bd0:	10803fcc 	andi	r2,r2,255
  111bd4:	d9400104 	addi	r5,sp,4
  111bd8:	2885883a 	add	r2,r5,r2
  111bdc:	10800007 	ldb	r2,0(r2)
  111be0:	10007726 	beq	r2,zero,111dc0 <__ssvfiscanf_r+0xa54>
  111be4:	e0800117 	ldw	r2,4(fp)
  111be8:	21400044 	addi	r5,r4,1
  111bec:	e1400015 	stw	r5,0(fp)
  111bf0:	10bfffc4 	addi	r2,r2,-1
  111bf4:	e0800115 	stw	r2,4(fp)
  111bf8:	20800003 	ldbu	r2,0(r4)
  111bfc:	1d800044 	addi	r22,r3,1
  111c00:	18800005 	stb	r2,0(r3)
  111c04:	1dc00726 	beq	r3,r23,111c24 <__ssvfiscanf_r+0x8b8>
  111c08:	e0800117 	ldw	r2,4(fp)
  111c0c:	00bfed16 	blt	zero,r2,111bc4 <__alt_data_end+0xfffd1bc4>
  111c10:	e00b883a 	mov	r5,fp
  111c14:	8809883a 	mov	r4,r17
  111c18:	01111fc0 	call	1111fc <__ssrefill_r>
  111c1c:	103fe926 	beq	r2,zero,111bc4 <__alt_data_end+0xfffd1bc4>
  111c20:	ad804326 	beq	r21,r22,111d30 <__ssvfiscanf_r+0x9c4>
  111c24:	b56bc83a 	sub	r21,r22,r21
  111c28:	a83e1326 	beq	r21,zero,111478 <__alt_data_end+0xfffd1478>
  111c2c:	dac05117 	ldw	r11,324(sp)
  111c30:	b0000005 	stb	zero,0(r22)
  111c34:	dc004f15 	stw	r16,316(sp)
  111c38:	5ac00044 	addi	r11,r11,1
  111c3c:	dac05115 	stw	r11,324(sp)
  111c40:	9d67883a 	add	r19,r19,r21
  111c44:	a00d883a 	mov	r6,r20
  111c48:	003e0706 	br	111468 <__alt_data_end+0xfffd1468>
  111c4c:	d8c04b04 	addi	r3,sp,300
  111c50:	8400040c 	andi	r16,r16,16
  111c54:	01800204 	movi	r6,8
  111c58:	000b883a 	mov	r5,zero
  111c5c:	1809883a 	mov	r4,r3
  111c60:	d8c05315 	stw	r3,332(sp)
  111c64:	01028600 	call	102860 <memset>
  111c68:	8001eb1e 	bne	r16,zero,112418 <__ssvfiscanf_r+0x10ac>
  111c6c:	dac04f17 	ldw	r11,316(sp)
  111c70:	5d800017 	ldw	r22,0(r11)
  111c74:	5ac00104 	addi	r11,r11,4
  111c78:	dac04f15 	stw	r11,316(sp)
  111c7c:	000d883a 	mov	r6,zero
  111c80:	3029883a 	mov	r20,r6
  111c84:	e0800017 	ldw	r2,0(fp)
  111c88:	90c00017 	ldw	r3,0(r18)
  111c8c:	10800003 	ldbu	r2,0(r2)
  111c90:	1885883a 	add	r2,r3,r2
  111c94:	10800043 	ldbu	r2,1(r2)
  111c98:	1080020c 	andi	r2,r2,8
  111c9c:	1001ce1e 	bne	r2,zero,1123d8 <__ssvfiscanf_r+0x106c>
  111ca0:	b801cd26 	beq	r23,zero,1123d8 <__ssvfiscanf_r+0x106c>
  111ca4:	010bb400 	call	10bb40 <__locale_mb_cur_max>
  111ca8:	a0802126 	beq	r20,r2,111d30 <__ssvfiscanf_r+0x9c4>
  111cac:	e0800017 	ldw	r2,0(fp)
  111cb0:	e1000117 	ldw	r4,4(fp)
  111cb4:	dac05317 	ldw	r11,332(sp)
  111cb8:	12000003 	ldbu	r8,0(r2)
  111cbc:	213fffc4 	addi	r4,r4,-1
  111cc0:	10800044 	addi	r2,r2,1
  111cc4:	e1000115 	stw	r4,4(fp)
  111cc8:	d9404104 	addi	r5,sp,260
  111ccc:	e0800015 	stw	r2,0(fp)
  111cd0:	a0c00044 	addi	r3,r20,1
  111cd4:	dac00015 	stw	r11,0(sp)
  111cd8:	2d29883a 	add	r20,r5,r20
  111cdc:	180f883a 	mov	r7,r3
  111ce0:	280d883a 	mov	r6,r5
  111ce4:	8809883a 	mov	r4,r17
  111ce8:	a2000005 	stb	r8,0(r20)
  111cec:	b00b883a 	mov	r5,r22
  111cf0:	d8c05a15 	stw	r3,360(sp)
  111cf4:	010bdb00 	call	10bdb0 <_mbrtowc_r>
  111cf8:	013fffc4 	movi	r4,-1
  111cfc:	d8c05a17 	ldw	r3,360(sp)
  111d00:	11000b26 	beq	r2,r4,111d30 <__ssvfiscanf_r+0x9c4>
  111d04:	1001a226 	beq	r2,zero,112390 <__ssvfiscanf_r+0x1024>
  111d08:	017fff84 	movi	r5,-2
  111d0c:	1829883a 	mov	r20,r3
  111d10:	1141e51e 	bne	r2,r5,1124a8 <__ssvfiscanf_r+0x113c>
  111d14:	e0800117 	ldw	r2,4(fp)
  111d18:	00bfda16 	blt	zero,r2,111c84 <__alt_data_end+0xfffd1c84>
  111d1c:	e00b883a 	mov	r5,fp
  111d20:	8809883a 	mov	r4,r17
  111d24:	01111fc0 	call	1111fc <__ssrefill_r>
  111d28:	103fd626 	beq	r2,zero,111c84 <__alt_data_end+0xfffd1c84>
  111d2c:	a001aa26 	beq	r20,zero,1123d8 <__ssvfiscanf_r+0x106c>
  111d30:	dac05117 	ldw	r11,324(sp)
  111d34:	583e6b26 	beq	r11,zero,1116e4 <__alt_data_end+0xfffd16e4>
  111d38:	e080030b 	ldhu	r2,12(fp)
  111d3c:	1080100c 	andi	r2,r2,64
  111d40:	103e681e 	bne	r2,zero,1116e4 <__alt_data_end+0xfffd16e4>
  111d44:	5805883a 	mov	r2,r11
  111d48:	003e6706 	br	1116e8 <__alt_data_end+0xfffd16e8>
  111d4c:	a821883a 	mov	r16,r21
  111d50:	802b883a 	mov	r21,r16
  111d54:	003fba06 	br	111c40 <__alt_data_end+0xfffd1c40>
  111d58:	b83f631e 	bne	r23,zero,111ae8 <__alt_data_end+0xfffd1ae8>
  111d5c:	003f8706 	br	111b7c <__alt_data_end+0xfffd1b7c>
  111d60:	dac04f17 	ldw	r11,316(sp)
  111d64:	5d800017 	ldw	r22,0(r11)
  111d68:	5ac00104 	addi	r11,r11,4
  111d6c:	dac04f15 	stw	r11,316(sp)
  111d70:	003f5c06 	br	111ae4 <__alt_data_end+0xfffd1ae4>
  111d74:	e00b883a 	mov	r5,fp
  111d78:	8809883a 	mov	r4,r17
  111d7c:	01111fc0 	call	1111fc <__ssrefill_r>
  111d80:	103ed026 	beq	r2,zero,1118c4 <__alt_data_end+0xfffd18c4>
  111d84:	003fea06 	br	111d30 <__alt_data_end+0xfffd1d30>
  111d88:	00ffff84 	movi	r3,-2
  111d8c:	10c0071e 	bne	r2,r3,111dac <__ssvfiscanf_r+0xa40>
  111d90:	e0800117 	ldw	r2,4(fp)
  111d94:	a021883a 	mov	r16,r20
  111d98:	00bf5316 	blt	zero,r2,111ae8 <__alt_data_end+0xfffd1ae8>
  111d9c:	003f7206 	br	111b68 <__alt_data_end+0xfffd1b68>
  111da0:	9d27883a 	add	r19,r19,r20
  111da4:	bdffffc4 	addi	r23,r23,-1
  111da8:	003f6c06 	br	111b5c <__alt_data_end+0xfffd1b5c>
  111dac:	dac05417 	ldw	r11,336(sp)
  111db0:	9d27883a 	add	r19,r19,r20
  111db4:	bdffffc4 	addi	r23,r23,-1
  111db8:	583f6726 	beq	r11,zero,111b58 <__alt_data_end+0xfffd1b58>
  111dbc:	003f6706 	br	111b5c <__alt_data_end+0xfffd1b5c>
  111dc0:	182d883a 	mov	r22,r3
  111dc4:	003f9706 	br	111c24 <__alt_data_end+0xfffd1c24>
  111dc8:	a83f9d1e 	bne	r21,zero,111c40 <__alt_data_end+0xfffd1c40>
  111dcc:	003daa06 	br	111478 <__alt_data_end+0xfffd1478>
  111dd0:	803ed41e 	bne	r16,zero,111924 <__alt_data_end+0xfffd1924>
  111dd4:	003fd606 	br	111d30 <__alt_data_end+0xfffd1d30>
  111dd8:	dac04f17 	ldw	r11,316(sp)
  111ddc:	df000015 	stw	fp,0(sp)
  111de0:	b80f883a 	mov	r7,r23
  111de4:	59400017 	ldw	r5,0(r11)
  111de8:	01800044 	movi	r6,1
  111dec:	8809883a 	mov	r4,r17
  111df0:	011126c0 	call	11126c <_sfread_r>
  111df4:	dac04f17 	ldw	r11,316(sp)
  111df8:	58c00104 	addi	r3,r11,4
  111dfc:	103fcc26 	beq	r2,zero,111d30 <__alt_data_end+0xfffd1d30>
  111e00:	dac05117 	ldw	r11,324(sp)
  111e04:	a829883a 	mov	r20,r21
  111e08:	98a7883a 	add	r19,r19,r2
  111e0c:	5ac00044 	addi	r11,r11,1
  111e10:	dac05115 	stw	r11,324(sp)
  111e14:	d8c04f15 	stw	r3,316(sp)
  111e18:	a00d883a 	mov	r6,r20
  111e1c:	003d9206 	br	111468 <__alt_data_end+0xfffd1468>
  111e20:	e0800117 	ldw	r2,4(fp)
  111e24:	80e0b03a 	or	r16,r16,r3
  111e28:	00be8d16 	blt	zero,r2,111860 <__alt_data_end+0xfffd1860>
  111e2c:	e00b883a 	mov	r5,fp
  111e30:	8809883a 	mov	r4,r17
  111e34:	01111fc0 	call	1111fc <__ssrefill_r>
  111e38:	103fbd1e 	bne	r2,zero,111d30 <__alt_data_end+0xfffd1d30>
  111e3c:	95800017 	ldw	r22,0(r18)
  111e40:	003e8706 	br	111860 <__alt_data_end+0xfffd1860>
  111e44:	e00b883a 	mov	r5,fp
  111e48:	8809883a 	mov	r4,r17
  111e4c:	01111fc0 	call	1111fc <__ssrefill_r>
  111e50:	103e1826 	beq	r2,zero,1116b4 <__alt_data_end+0xfffd16b4>
  111e54:	003fb606 	br	111d30 <__alt_data_end+0xfffd1d30>
  111e58:	a1400083 	ldbu	r5,2(r20)
  111e5c:	84000094 	ori	r16,r16,2
  111e60:	a5000084 	addi	r20,r20,2
  111e64:	2dc03fcc 	andi	r23,r5,255
  111e68:	003d8e06 	br	1114a4 <__alt_data_end+0xfffd14a4>
  111e6c:	8080004c 	andi	r2,r16,1
  111e70:	10000b1e 	bne	r2,zero,111ea0 <__ssvfiscanf_r+0xb34>
  111e74:	8400008c 	andi	r16,r16,2
  111e78:	80000926 	beq	r16,zero,111ea0 <__ssvfiscanf_r+0xb34>
  111e7c:	dac04f17 	ldw	r11,316(sp)
  111e80:	9807d7fa 	srai	r3,r19,31
  111e84:	a829883a 	mov	r20,r21
  111e88:	58800017 	ldw	r2,0(r11)
  111e8c:	5ac00104 	addi	r11,r11,4
  111e90:	dac04f15 	stw	r11,316(sp)
  111e94:	14c00015 	stw	r19,0(r2)
  111e98:	10c00115 	stw	r3,4(r2)
  111e9c:	003d7106 	br	111464 <__alt_data_end+0xfffd1464>
  111ea0:	dac04f17 	ldw	r11,316(sp)
  111ea4:	a829883a 	mov	r20,r21
  111ea8:	58800017 	ldw	r2,0(r11)
  111eac:	5ac00104 	addi	r11,r11,4
  111eb0:	dac04f15 	stw	r11,316(sp)
  111eb4:	14c00015 	stw	r19,0(r2)
  111eb8:	003d6a06 	br	111464 <__alt_data_end+0xfffd1464>
  111ebc:	e00b883a 	mov	r5,fp
  111ec0:	8809883a 	mov	r4,r17
  111ec4:	01111fc0 	call	1111fc <__ssrefill_r>
  111ec8:	103f991e 	bne	r2,zero,111d30 <__alt_data_end+0xfffd1d30>
  111ecc:	95800017 	ldw	r22,0(r18)
  111ed0:	05000084 	movi	r20,2
  111ed4:	003e1906 	br	11173c <__alt_data_end+0xfffd173c>
  111ed8:	e00b883a 	mov	r5,fp
  111edc:	8809883a 	mov	r4,r17
  111ee0:	01111fc0 	call	1111fc <__ssrefill_r>
  111ee4:	103e9a26 	beq	r2,zero,111950 <__alt_data_end+0xfffd1950>
  111ee8:	003f9106 	br	111d30 <__alt_data_end+0xfffd1d30>
  111eec:	e00b883a 	mov	r5,fp
  111ef0:	8809883a 	mov	r4,r17
  111ef4:	01111fc0 	call	1111fc <__ssrefill_r>
  111ef8:	103f8d1e 	bne	r2,zero,111d30 <__alt_data_end+0xfffd1d30>
  111efc:	95800017 	ldw	r22,0(r18)
  111f00:	003e0806 	br	111724 <__alt_data_end+0xfffd1724>
  111f04:	e00b883a 	mov	r5,fp
  111f08:	8809883a 	mov	r4,r17
  111f0c:	01111fc0 	call	1111fc <__ssrefill_r>
  111f10:	103f871e 	bne	r2,zero,111d30 <__alt_data_end+0xfffd1d30>
  111f14:	95800017 	ldw	r22,0(r18)
  111f18:	003ee106 	br	111aa0 <__alt_data_end+0xfffd1aa0>
  111f1c:	014000c4 	movi	r5,3
  111f20:	a140ae1e 	bne	r20,r5,1121dc <__ssvfiscanf_r+0xe70>
  111f24:	b8ffffc4 	addi	r3,r23,-1
  111f28:	01400984 	movi	r5,38
  111f2c:	28c0d82e 	bgeu	r5,r3,112290 <__ssvfiscanf_r+0xf24>
  111f30:	b9bff644 	addi	r6,r23,-39
  111f34:	05c009c4 	movi	r23,39
  111f38:	85836014 	ori	r22,r16,3456
  111f3c:	0021883a 	mov	r16,zero
  111f40:	a815883a 	mov	r10,r21
  111f44:	982b883a 	mov	r21,r19
  111f48:	8027883a 	mov	r19,r16
  111f4c:	dc005017 	ldw	r16,320(sp)
  111f50:	dd004104 	addi	r20,sp,260
  111f54:	02401344 	movi	r9,77
  111f58:	01c08004 	movi	r7,512
  111f5c:	00ff7fc4 	movi	r3,-513
  111f60:	023fdfc4 	movi	r8,-129
  111f64:	217ff544 	addi	r5,r4,-43
  111f68:	29403fcc 	andi	r5,r5,255
  111f6c:	49408836 	bltu	r9,r5,112190 <__ssvfiscanf_r+0xe24>
  111f70:	280a90ba 	slli	r5,r5,2
  111f74:	02c00474 	movhi	r11,17
  111f78:	5ac7e204 	addi	r11,r11,8072
  111f7c:	2acb883a 	add	r5,r5,r11
  111f80:	29400017 	ldw	r5,0(r5)
  111f84:	2800683a 	jmp	r5
  111f88:	0011211c 	xori	zero,zero,17540
  111f8c:	00112190 	cmplti	zero,zero,17542
  111f90:	0011211c 	xori	zero,zero,17540
  111f94:	00112190 	cmplti	zero,zero,17542
  111f98:	00112190 	cmplti	zero,zero,17542
  111f9c:	0011214c 	andi	zero,zero,17541
  111fa0:	0011212c 	andhi	zero,zero,17540
  111fa4:	0011212c 	andhi	zero,zero,17540
  111fa8:	0011212c 	andhi	zero,zero,17540
  111fac:	0011212c 	andhi	zero,zero,17540
  111fb0:	0011212c 	andhi	zero,zero,17540
  111fb4:	0011212c 	andhi	zero,zero,17540
  111fb8:	0011212c 	andhi	zero,zero,17540
  111fbc:	00112174 	movhi	zero,17541
  111fc0:	00112174 	movhi	zero,17541
  111fc4:	00112190 	cmplti	zero,zero,17542
  111fc8:	00112190 	cmplti	zero,zero,17542
  111fcc:	00112190 	cmplti	zero,zero,17542
  111fd0:	00112190 	cmplti	zero,zero,17542
  111fd4:	00112190 	cmplti	zero,zero,17542
  111fd8:	00112190 	cmplti	zero,zero,17542
  111fdc:	00112190 	cmplti	zero,zero,17542
  111fe0:	00112108 	cmpgei	zero,zero,17540
  111fe4:	00112108 	cmpgei	zero,zero,17540
  111fe8:	00112108 	cmpgei	zero,zero,17540
  111fec:	00112108 	cmpgei	zero,zero,17540
  111ff0:	00112108 	cmpgei	zero,zero,17540
  111ff4:	00112108 	cmpgei	zero,zero,17540
  111ff8:	00112190 	cmplti	zero,zero,17542
  111ffc:	00112190 	cmplti	zero,zero,17542
  112000:	00112190 	cmplti	zero,zero,17542
  112004:	00112190 	cmplti	zero,zero,17542
  112008:	00112190 	cmplti	zero,zero,17542
  11200c:	00112190 	cmplti	zero,zero,17542
  112010:	00112190 	cmplti	zero,zero,17542
  112014:	00112190 	cmplti	zero,zero,17542
  112018:	00112190 	cmplti	zero,zero,17542
  11201c:	00112190 	cmplti	zero,zero,17542
  112020:	00112190 	cmplti	zero,zero,17542
  112024:	00112190 	cmplti	zero,zero,17542
  112028:	00112190 	cmplti	zero,zero,17542
  11202c:	00112190 	cmplti	zero,zero,17542
  112030:	00112190 	cmplti	zero,zero,17542
  112034:	00112190 	cmplti	zero,zero,17542
  112038:	00112190 	cmplti	zero,zero,17542
  11203c:	001120c0 	call	1120c <OSCtxSw_SWITCH_PC+0x111cc>
  112040:	00112190 	cmplti	zero,zero,17542
  112044:	00112190 	cmplti	zero,zero,17542
  112048:	00112190 	cmplti	zero,zero,17542
  11204c:	00112190 	cmplti	zero,zero,17542
  112050:	00112190 	cmplti	zero,zero,17542
  112054:	00112190 	cmplti	zero,zero,17542
  112058:	00112190 	cmplti	zero,zero,17542
  11205c:	00112190 	cmplti	zero,zero,17542
  112060:	00112108 	cmpgei	zero,zero,17540
  112064:	00112108 	cmpgei	zero,zero,17540
  112068:	00112108 	cmpgei	zero,zero,17540
  11206c:	00112108 	cmpgei	zero,zero,17540
  112070:	00112108 	cmpgei	zero,zero,17540
  112074:	00112108 	cmpgei	zero,zero,17540
  112078:	00112190 	cmplti	zero,zero,17542
  11207c:	00112190 	cmplti	zero,zero,17542
  112080:	00112190 	cmplti	zero,zero,17542
  112084:	00112190 	cmplti	zero,zero,17542
  112088:	00112190 	cmplti	zero,zero,17542
  11208c:	00112190 	cmplti	zero,zero,17542
  112090:	00112190 	cmplti	zero,zero,17542
  112094:	00112190 	cmplti	zero,zero,17542
  112098:	00112190 	cmplti	zero,zero,17542
  11209c:	00112190 	cmplti	zero,zero,17542
  1120a0:	00112190 	cmplti	zero,zero,17542
  1120a4:	00112190 	cmplti	zero,zero,17542
  1120a8:	00112190 	cmplti	zero,zero,17542
  1120ac:	00112190 	cmplti	zero,zero,17542
  1120b0:	00112190 	cmplti	zero,zero,17542
  1120b4:	00112190 	cmplti	zero,zero,17542
  1120b8:	00112190 	cmplti	zero,zero,17542
  1120bc:	001120c0 	call	1120c <OSCtxSw_SWITCH_PC+0x111cc>
  1120c0:	b141800c 	andi	r5,r22,1536
  1120c4:	29c0321e 	bne	r5,r7,112190 <__ssvfiscanf_r+0xe24>
  1120c8:	b0ec703a 	and	r22,r22,r3
  1120cc:	b5814014 	ori	r22,r22,1280
  1120d0:	04000404 	movi	r16,16
  1120d4:	a1000005 	stb	r4,0(r20)
  1120d8:	a5000044 	addi	r20,r20,1
  1120dc:	e1000117 	ldw	r4,4(fp)
  1120e0:	213fffc4 	addi	r4,r4,-1
  1120e4:	e1000115 	stw	r4,4(fp)
  1120e8:	0100580e 	bge	zero,r4,11224c <__ssvfiscanf_r+0xee0>
  1120ec:	10800044 	addi	r2,r2,1
  1120f0:	e0800015 	stw	r2,0(fp)
  1120f4:	bdffffc4 	addi	r23,r23,-1
  1120f8:	b8002526 	beq	r23,zero,112190 <__ssvfiscanf_r+0xe24>
  1120fc:	e0800017 	ldw	r2,0(fp)
  112100:	11000003 	ldbu	r4,0(r2)
  112104:	003f9706 	br	111f64 <__alt_data_end+0xfffd1f64>
  112108:	01400284 	movi	r5,10
  11210c:	2c00200e 	bge	r5,r16,112190 <__ssvfiscanf_r+0xe24>
  112110:	017d1fc4 	movi	r5,-2945
  112114:	b16c703a 	and	r22,r22,r5
  112118:	003fee06 	br	1120d4 <__alt_data_end+0xfffd20d4>
  11211c:	b140200c 	andi	r5,r22,128
  112120:	28001b26 	beq	r5,zero,112190 <__ssvfiscanf_r+0xe24>
  112124:	b22c703a 	and	r22,r22,r8
  112128:	003fea06 	br	1120d4 <__alt_data_end+0xfffd20d4>
  11212c:	02c004b4 	movhi	r11,18
  112130:	8421883a 	add	r16,r16,r16
  112134:	5acf7e04 	addi	r11,r11,15864
  112138:	5c0b883a 	add	r5,r11,r16
  11213c:	2c00000f 	ldh	r16,0(r5)
  112140:	017d1fc4 	movi	r5,-2945
  112144:	b16c703a 	and	r22,r22,r5
  112148:	003fe206 	br	1120d4 <__alt_data_end+0xfffd20d4>
  11214c:	b142000c 	andi	r5,r22,2048
  112150:	283fe026 	beq	r5,zero,1120d4 <__alt_data_end+0xfffd20d4>
  112154:	8000021e 	bne	r16,zero,112160 <__ssvfiscanf_r+0xdf4>
  112158:	b5808014 	ori	r22,r22,512
  11215c:	04000204 	movi	r16,8
  112160:	b141000c 	andi	r5,r22,1024
  112164:	28009f26 	beq	r5,zero,1123e4 <__ssvfiscanf_r+0x1078>
  112168:	017e9fc4 	movi	r5,-1409
  11216c:	b16c703a 	and	r22,r22,r5
  112170:	003fd806 	br	1120d4 <__alt_data_end+0xfffd20d4>
  112174:	02c004b4 	movhi	r11,18
  112178:	8421883a 	add	r16,r16,r16
  11217c:	5acf7e04 	addi	r11,r11,15864
  112180:	5c0b883a 	add	r5,r11,r16
  112184:	2c00000f 	ldh	r16,0(r5)
  112188:	01400204 	movi	r5,8
  11218c:	2c3fe016 	blt	r5,r16,112110 <__alt_data_end+0xfffd2110>
  112190:	dc005015 	stw	r16,320(sp)
  112194:	b080400c 	andi	r2,r22,256
  112198:	9821883a 	mov	r16,r19
  11219c:	a827883a 	mov	r19,r21
  1121a0:	502b883a 	mov	r21,r10
  1121a4:	10000426 	beq	r2,zero,1121b8 <__ssvfiscanf_r+0xe4c>
  1121a8:	dac04e17 	ldw	r11,312(sp)
  1121ac:	5d009c36 	bltu	r11,r20,112420 <__ssvfiscanf_r+0x10b4>
  1121b0:	dac04e17 	ldw	r11,312(sp)
  1121b4:	a2fcb026 	beq	r20,r11,111478 <__alt_data_end+0xfffd1478>
  1121b8:	b080040c 	andi	r2,r22,16
  1121bc:	10006026 	beq	r2,zero,112340 <__ssvfiscanf_r+0xfd4>
  1121c0:	dac04e17 	ldw	r11,312(sp)
  1121c4:	a2e9c83a 	sub	r20,r20,r11
  1121c8:	a429883a 	add	r20,r20,r16
  1121cc:	9d27883a 	add	r19,r19,r20
  1121d0:	a829883a 	mov	r20,r21
  1121d4:	a00d883a 	mov	r6,r20
  1121d8:	003ca306 	br	111468 <__alt_data_end+0xfffd1468>
  1121dc:	b800011e 	bne	r23,zero,1121e4 <__ssvfiscanf_r+0xe78>
  1121e0:	05ffffc4 	movi	r23,-1
  1121e4:	8100004c 	andi	r4,r16,1
  1121e8:	203e981e 	bne	r4,zero,111c4c <__alt_data_end+0xfffd1c4c>
  1121ec:	8400040c 	andi	r16,r16,16
  1121f0:	80002926 	beq	r16,zero,112298 <__ssvfiscanf_r+0xf2c>
  1121f4:	0021883a 	mov	r16,zero
  1121f8:	00000306 	br	112208 <__ssvfiscanf_r+0xe9c>
  1121fc:	10c00003 	ldbu	r3,0(r2)
  112200:	b0c7883a 	add	r3,r22,r3
  112204:	18c00043 	ldbu	r3,1(r3)
  112208:	18c0020c 	andi	r3,r3,8
  11220c:	183dc51e 	bne	r3,zero,111924 <__alt_data_end+0xfffd1924>
  112210:	e0c00117 	ldw	r3,4(fp)
  112214:	10800044 	addi	r2,r2,1
  112218:	84000044 	addi	r16,r16,1
  11221c:	18ffffc4 	addi	r3,r3,-1
  112220:	e0c00115 	stw	r3,4(fp)
  112224:	e0800015 	stw	r2,0(fp)
  112228:	85fdbe26 	beq	r16,r23,111924 <__alt_data_end+0xfffd1924>
  11222c:	00fff316 	blt	zero,r3,1121fc <__alt_data_end+0xfffd21fc>
  112230:	e00b883a 	mov	r5,fp
  112234:	8809883a 	mov	r4,r17
  112238:	01111fc0 	call	1111fc <__ssrefill_r>
  11223c:	103db91e 	bne	r2,zero,111924 <__alt_data_end+0xfffd1924>
  112240:	95800017 	ldw	r22,0(r18)
  112244:	e0800017 	ldw	r2,0(fp)
  112248:	003fec06 	br	1121fc <__alt_data_end+0xfffd21fc>
  11224c:	e00b883a 	mov	r5,fp
  112250:	8809883a 	mov	r4,r17
  112254:	d8c05a15 	stw	r3,360(sp)
  112258:	d9805715 	stw	r6,348(sp)
  11225c:	d9c05915 	stw	r7,356(sp)
  112260:	da005615 	stw	r8,344(sp)
  112264:	da405515 	stw	r9,340(sp)
  112268:	da805815 	stw	r10,352(sp)
  11226c:	01111fc0 	call	1111fc <__ssrefill_r>
  112270:	d8c05a17 	ldw	r3,360(sp)
  112274:	d9805717 	ldw	r6,348(sp)
  112278:	d9c05917 	ldw	r7,356(sp)
  11227c:	da005617 	ldw	r8,344(sp)
  112280:	da405517 	ldw	r9,340(sp)
  112284:	da805817 	ldw	r10,352(sp)
  112288:	103f9a26 	beq	r2,zero,1120f4 <__alt_data_end+0xfffd20f4>
  11228c:	003fc006 	br	112190 <__alt_data_end+0xfffd2190>
  112290:	000d883a 	mov	r6,zero
  112294:	003f2806 	br	111f38 <__alt_data_end+0xfffd1f38>
  112298:	dac04f17 	ldw	r11,316(sp)
  11229c:	babfffc4 	addi	r10,r23,-1
  1122a0:	5d000017 	ldw	r20,0(r11)
  1122a4:	5c000104 	addi	r16,r11,4
  1122a8:	a00b883a 	mov	r5,r20
  1122ac:	a2ad883a 	add	r22,r20,r10
  1122b0:	00000606 	br	1122cc <__ssvfiscanf_r+0xf60>
  1122b4:	e0800017 	ldw	r2,0(fp)
  1122b8:	91000017 	ldw	r4,0(r18)
  1122bc:	b80b883a 	mov	r5,r23
  1122c0:	10c00003 	ldbu	r3,0(r2)
  1122c4:	20c7883a 	add	r3,r4,r3
  1122c8:	18c00043 	ldbu	r3,1(r3)
  1122cc:	18c0020c 	andi	r3,r3,8
  1122d0:	2809883a 	mov	r4,r5
  1122d4:	1800101e 	bne	r3,zero,112318 <__ssvfiscanf_r+0xfac>
  1122d8:	e0c00117 	ldw	r3,4(fp)
  1122dc:	11800044 	addi	r6,r2,1
  1122e0:	e1800015 	stw	r6,0(fp)
  1122e4:	18ffffc4 	addi	r3,r3,-1
  1122e8:	e0c00115 	stw	r3,4(fp)
  1122ec:	10800003 	ldbu	r2,0(r2)
  1122f0:	25c00044 	addi	r23,r4,1
  1122f4:	28800005 	stb	r2,0(r5)
  1122f8:	25800626 	beq	r4,r22,112314 <__ssvfiscanf_r+0xfa8>
  1122fc:	e0800117 	ldw	r2,4(fp)
  112300:	00bfec16 	blt	zero,r2,1122b4 <__alt_data_end+0xfffd22b4>
  112304:	e00b883a 	mov	r5,fp
  112308:	8809883a 	mov	r4,r17
  11230c:	01111fc0 	call	1111fc <__ssrefill_r>
  112310:	103fe826 	beq	r2,zero,1122b4 <__alt_data_end+0xfffd22b4>
  112314:	b809883a 	mov	r4,r23
  112318:	dac05117 	ldw	r11,324(sp)
  11231c:	2529c83a 	sub	r20,r4,r20
  112320:	9d27883a 	add	r19,r19,r20
  112324:	5ac00044 	addi	r11,r11,1
  112328:	a829883a 	mov	r20,r21
  11232c:	20000005 	stb	zero,0(r4)
  112330:	dac05115 	stw	r11,324(sp)
  112334:	dc004f15 	stw	r16,316(sp)
  112338:	a00d883a 	mov	r6,r20
  11233c:	003c4a06 	br	111468 <__alt_data_end+0xfffd1468>
  112340:	d9c05017 	ldw	r7,320(sp)
  112344:	dac05217 	ldw	r11,328(sp)
  112348:	000d883a 	mov	r6,zero
  11234c:	d9404104 	addi	r5,sp,260
  112350:	8809883a 	mov	r4,r17
  112354:	a0000005 	stb	zero,0(r20)
  112358:	583ee83a 	callr	r11
  11235c:	b0c0080c 	andi	r3,r22,32
  112360:	1800271e 	bne	r3,zero,112400 <__ssvfiscanf_r+0x1094>
  112364:	b0c0010c 	andi	r3,r22,4
  112368:	18003326 	beq	r3,zero,112438 <__ssvfiscanf_r+0x10cc>
  11236c:	dac04f17 	ldw	r11,316(sp)
  112370:	58c00017 	ldw	r3,0(r11)
  112374:	5ac00104 	addi	r11,r11,4
  112378:	dac04f15 	stw	r11,316(sp)
  11237c:	1880000d 	sth	r2,0(r3)
  112380:	dac05117 	ldw	r11,324(sp)
  112384:	5ac00044 	addi	r11,r11,1
  112388:	dac05115 	stw	r11,324(sp)
  11238c:	003f8c06 	br	1121c0 <__alt_data_end+0xfffd21c0>
  112390:	b0000015 	stw	zero,0(r22)
  112394:	0009883a 	mov	r4,zero
  112398:	d8c05a15 	stw	r3,360(sp)
  11239c:	010ba880 	call	10ba88 <iswspace>
  1123a0:	d8c05a17 	ldw	r3,360(sp)
  1123a4:	10003826 	beq	r2,zero,112488 <__ssvfiscanf_r+0x111c>
  1123a8:	18000b26 	beq	r3,zero,1123d8 <__ssvfiscanf_r+0x106c>
  1123ac:	1d3fffc4 	addi	r20,r3,-1
  1123b0:	dac04104 	addi	r11,sp,260
  1123b4:	5d2f883a 	add	r23,r11,r20
  1123b8:	00000106 	br	1123c0 <__ssvfiscanf_r+0x1054>
  1123bc:	a53fffc4 	addi	r20,r20,-1
  1123c0:	b9400003 	ldbu	r5,0(r23)
  1123c4:	e00d883a 	mov	r6,fp
  1123c8:	8809883a 	mov	r4,r17
  1123cc:	01110f40 	call	1110f4 <_sungetc_r>
  1123d0:	bdffffc4 	addi	r23,r23,-1
  1123d4:	a03ff91e 	bne	r20,zero,1123bc <__alt_data_end+0xfffd23bc>
  1123d8:	803ded1e 	bne	r16,zero,111b90 <__alt_data_end+0xfffd1b90>
  1123dc:	b0000015 	stw	zero,0(r22)
  1123e0:	003de806 	br	111b84 <__alt_data_end+0xfffd1b84>
  1123e4:	013f1fc4 	movi	r4,-897
  1123e8:	b12c703a 	and	r22,r22,r4
  1123ec:	30000226 	beq	r6,zero,1123f8 <__ssvfiscanf_r+0x108c>
  1123f0:	31bfffc4 	addi	r6,r6,-1
  1123f4:	bdc00044 	addi	r23,r23,1
  1123f8:	9cc00044 	addi	r19,r19,1
  1123fc:	003f3706 	br	1120dc <__alt_data_end+0xfffd20dc>
  112400:	dac04f17 	ldw	r11,316(sp)
  112404:	58c00017 	ldw	r3,0(r11)
  112408:	5ac00104 	addi	r11,r11,4
  11240c:	dac04f15 	stw	r11,316(sp)
  112410:	18800015 	stw	r2,0(r3)
  112414:	003fda06 	br	112380 <__alt_data_end+0xfffd2380>
  112418:	dd804d04 	addi	r22,sp,308
  11241c:	003e1706 	br	111c7c <__alt_data_end+0xfffd1c7c>
  112420:	a17fffc7 	ldb	r5,-1(r20)
  112424:	e00d883a 	mov	r6,fp
  112428:	8809883a 	mov	r4,r17
  11242c:	a53fffc4 	addi	r20,r20,-1
  112430:	01110f40 	call	1110f4 <_sungetc_r>
  112434:	003f5e06 	br	1121b0 <__alt_data_end+0xfffd21b0>
  112438:	b0c0004c 	andi	r3,r22,1
  11243c:	183ff01e 	bne	r3,zero,112400 <__alt_data_end+0xfffd2400>
  112440:	b580008c 	andi	r22,r22,2
  112444:	b03fee26 	beq	r22,zero,112400 <__alt_data_end+0xfffd2400>
  112448:	dac05217 	ldw	r11,328(sp)
  11244c:	00800474 	movhi	r2,17
  112450:	10bd7404 	addi	r2,r2,-2608
  112454:	d9c05017 	ldw	r7,320(sp)
  112458:	000d883a 	mov	r6,zero
  11245c:	d9404104 	addi	r5,sp,260
  112460:	8809883a 	mov	r4,r17
  112464:	58801226 	beq	r11,r2,1124b0 <__ssvfiscanf_r+0x1144>
  112468:	010f2cc0 	call	10f2cc <_strtoll_r>
  11246c:	dac04f17 	ldw	r11,316(sp)
  112470:	59000017 	ldw	r4,0(r11)
  112474:	5ac00104 	addi	r11,r11,4
  112478:	dac04f15 	stw	r11,316(sp)
  11247c:	20800015 	stw	r2,0(r4)
  112480:	20c00115 	stw	r3,4(r4)
  112484:	003fbe06 	br	112380 <__alt_data_end+0xfffd2380>
  112488:	98e7883a 	add	r19,r19,r3
  11248c:	bdffffc4 	addi	r23,r23,-1
  112490:	8000031e 	bne	r16,zero,1124a0 <__ssvfiscanf_r+0x1134>
  112494:	b5800104 	addi	r22,r22,4
  112498:	0029883a 	mov	r20,zero
  11249c:	003e1d06 	br	111d14 <__alt_data_end+0xfffd1d14>
  1124a0:	0029883a 	mov	r20,zero
  1124a4:	003e1b06 	br	111d14 <__alt_data_end+0xfffd1d14>
  1124a8:	b1000017 	ldw	r4,0(r22)
  1124ac:	003fba06 	br	112398 <__alt_data_end+0xfffd2398>
  1124b0:	010f8640 	call	10f864 <_strtoull_r>
  1124b4:	003fed06 	br	11246c <__alt_data_end+0xfffd246c>

001124b8 <__submore>:
  1124b8:	defffa04 	addi	sp,sp,-24
  1124bc:	dc000015 	stw	r16,0(sp)
  1124c0:	2821883a 	mov	r16,r5
  1124c4:	29400c17 	ldw	r5,48(r5)
  1124c8:	dfc00515 	stw	ra,20(sp)
  1124cc:	dd000415 	stw	r20,16(sp)
  1124d0:	dcc00315 	stw	r19,12(sp)
  1124d4:	dc800215 	stw	r18,8(sp)
  1124d8:	dc400115 	stw	r17,4(sp)
  1124dc:	80801004 	addi	r2,r16,64
  1124e0:	28801726 	beq	r5,r2,112540 <__submore+0x88>
  1124e4:	84400d17 	ldw	r17,52(r16)
  1124e8:	8c67883a 	add	r19,r17,r17
  1124ec:	980d883a 	mov	r6,r19
  1124f0:	010d2480 	call	10d248 <_realloc_r>
  1124f4:	1025883a 	mov	r18,r2
  1124f8:	10002226 	beq	r2,zero,112584 <__submore+0xcc>
  1124fc:	1469883a 	add	r20,r2,r17
  112500:	880d883a 	mov	r6,r17
  112504:	100b883a 	mov	r5,r2
  112508:	a009883a 	mov	r4,r20
  11250c:	01027180 	call	102718 <memcpy>
  112510:	0005883a 	mov	r2,zero
  112514:	85000015 	stw	r20,0(r16)
  112518:	84800c15 	stw	r18,48(r16)
  11251c:	84c00d15 	stw	r19,52(r16)
  112520:	dfc00517 	ldw	ra,20(sp)
  112524:	dd000417 	ldw	r20,16(sp)
  112528:	dcc00317 	ldw	r19,12(sp)
  11252c:	dc800217 	ldw	r18,8(sp)
  112530:	dc400117 	ldw	r17,4(sp)
  112534:	dc000017 	ldw	r16,0(sp)
  112538:	dec00604 	addi	sp,sp,24
  11253c:	f800283a 	ret
  112540:	04410004 	movi	r17,1024
  112544:	880b883a 	mov	r5,r17
  112548:	0101e280 	call	101e28 <_malloc_r>
  11254c:	1007883a 	mov	r3,r2
  112550:	10000c26 	beq	r2,zero,112584 <__submore+0xcc>
  112554:	80801083 	ldbu	r2,66(r16)
  112558:	80c00c15 	stw	r3,48(r16)
  11255c:	84400d15 	stw	r17,52(r16)
  112560:	1880ffc5 	stb	r2,1023(r3)
  112564:	81401043 	ldbu	r5,65(r16)
  112568:	1900ff44 	addi	r4,r3,1021
  11256c:	0005883a 	mov	r2,zero
  112570:	1940ff85 	stb	r5,1022(r3)
  112574:	81401003 	ldbu	r5,64(r16)
  112578:	1940ff45 	stb	r5,1021(r3)
  11257c:	81000015 	stw	r4,0(r16)
  112580:	003fe706 	br	112520 <__alt_data_end+0xfffd2520>
  112584:	00bfffc4 	movi	r2,-1
  112588:	003fe506 	br	112520 <__alt_data_end+0xfffd2520>

0011258c <_ungetc_r>:
  11258c:	00bfffc4 	movi	r2,-1
  112590:	28806126 	beq	r5,r2,112718 <_ungetc_r+0x18c>
  112594:	defffb04 	addi	sp,sp,-20
  112598:	dcc00315 	stw	r19,12(sp)
  11259c:	dc400115 	stw	r17,4(sp)
  1125a0:	dc000015 	stw	r16,0(sp)
  1125a4:	dfc00415 	stw	ra,16(sp)
  1125a8:	dc800215 	stw	r18,8(sp)
  1125ac:	2023883a 	mov	r17,r4
  1125b0:	3021883a 	mov	r16,r6
  1125b4:	2827883a 	mov	r19,r5
  1125b8:	20000226 	beq	r4,zero,1125c4 <_ungetc_r+0x38>
  1125bc:	20800e17 	ldw	r2,56(r4)
  1125c0:	10002e26 	beq	r2,zero,11267c <_ungetc_r+0xf0>
  1125c4:	80c0030b 	ldhu	r3,12(r16)
  1125c8:	1888000c 	andi	r2,r3,8192
  1125cc:	1000051e 	bne	r2,zero,1125e4 <_ungetc_r+0x58>
  1125d0:	81001917 	ldw	r4,100(r16)
  1125d4:	00b7ffc4 	movi	r2,-8193
  1125d8:	18c80014 	ori	r3,r3,8192
  1125dc:	2084703a 	and	r2,r4,r2
  1125e0:	80801915 	stw	r2,100(r16)
  1125e4:	00bff7c4 	movi	r2,-33
  1125e8:	1884703a 	and	r2,r3,r2
  1125ec:	8080030d 	sth	r2,12(r16)
  1125f0:	1900010c 	andi	r4,r3,4
  1125f4:	2000061e 	bne	r4,zero,112610 <_ungetc_r+0x84>
  1125f8:	1900040c 	andi	r4,r3,16
  1125fc:	20001d26 	beq	r4,zero,112674 <_ungetc_r+0xe8>
  112600:	18c0020c 	andi	r3,r3,8
  112604:	1800331e 	bne	r3,zero,1126d4 <_ungetc_r+0x148>
  112608:	10800114 	ori	r2,r2,4
  11260c:	8080030d 	sth	r2,12(r16)
  112610:	80800c17 	ldw	r2,48(r16)
  112614:	9c803fcc 	andi	r18,r19,255
  112618:	10001a26 	beq	r2,zero,112684 <_ungetc_r+0xf8>
  11261c:	80c00117 	ldw	r3,4(r16)
  112620:	80800d17 	ldw	r2,52(r16)
  112624:	18800f0e 	bge	r3,r2,112664 <_ungetc_r+0xd8>
  112628:	80c00017 	ldw	r3,0(r16)
  11262c:	9005883a 	mov	r2,r18
  112630:	193fffc4 	addi	r4,r3,-1
  112634:	81000015 	stw	r4,0(r16)
  112638:	1cffffc5 	stb	r19,-1(r3)
  11263c:	80c00117 	ldw	r3,4(r16)
  112640:	18c00044 	addi	r3,r3,1
  112644:	80c00115 	stw	r3,4(r16)
  112648:	dfc00417 	ldw	ra,16(sp)
  11264c:	dcc00317 	ldw	r19,12(sp)
  112650:	dc800217 	ldw	r18,8(sp)
  112654:	dc400117 	ldw	r17,4(sp)
  112658:	dc000017 	ldw	r16,0(sp)
  11265c:	dec00504 	addi	sp,sp,20
  112660:	f800283a 	ret
  112664:	800b883a 	mov	r5,r16
  112668:	8809883a 	mov	r4,r17
  11266c:	01124b80 	call	1124b8 <__submore>
  112670:	103fed26 	beq	r2,zero,112628 <__alt_data_end+0xfffd2628>
  112674:	00bfffc4 	movi	r2,-1
  112678:	003ff306 	br	112648 <__alt_data_end+0xfffd2648>
  11267c:	0101c500 	call	101c50 <__sinit>
  112680:	003fd006 	br	1125c4 <__alt_data_end+0xfffd25c4>
  112684:	80c00417 	ldw	r3,16(r16)
  112688:	80800017 	ldw	r2,0(r16)
  11268c:	18000326 	beq	r3,zero,11269c <_ungetc_r+0x110>
  112690:	1880022e 	bgeu	r3,r2,11269c <_ungetc_r+0x110>
  112694:	10ffffc3 	ldbu	r3,-1(r2)
  112698:	90c01826 	beq	r18,r3,1126fc <_ungetc_r+0x170>
  11269c:	81400117 	ldw	r5,4(r16)
  1126a0:	80800e15 	stw	r2,56(r16)
  1126a4:	008000c4 	movi	r2,3
  1126a8:	81001004 	addi	r4,r16,64
  1126ac:	80c01084 	addi	r3,r16,66
  1126b0:	80800d15 	stw	r2,52(r16)
  1126b4:	00800044 	movi	r2,1
  1126b8:	80800115 	stw	r2,4(r16)
  1126bc:	81400f15 	stw	r5,60(r16)
  1126c0:	81000c15 	stw	r4,48(r16)
  1126c4:	84c01085 	stb	r19,66(r16)
  1126c8:	80c00015 	stw	r3,0(r16)
  1126cc:	9005883a 	mov	r2,r18
  1126d0:	003fdd06 	br	112648 <__alt_data_end+0xfffd2648>
  1126d4:	800b883a 	mov	r5,r16
  1126d8:	8809883a 	mov	r4,r17
  1126dc:	010b1000 	call	10b100 <_fflush_r>
  1126e0:	103fe41e 	bne	r2,zero,112674 <__alt_data_end+0xfffd2674>
  1126e4:	8080030b 	ldhu	r2,12(r16)
  1126e8:	00fffdc4 	movi	r3,-9
  1126ec:	80000215 	stw	zero,8(r16)
  1126f0:	1884703a 	and	r2,r3,r2
  1126f4:	80000615 	stw	zero,24(r16)
  1126f8:	003fc306 	br	112608 <__alt_data_end+0xfffd2608>
  1126fc:	80c00117 	ldw	r3,4(r16)
  112700:	10bfffc4 	addi	r2,r2,-1
  112704:	80800015 	stw	r2,0(r16)
  112708:	18800044 	addi	r2,r3,1
  11270c:	80800115 	stw	r2,4(r16)
  112710:	9005883a 	mov	r2,r18
  112714:	003fcc06 	br	112648 <__alt_data_end+0xfffd2648>
  112718:	00bfffc4 	movi	r2,-1
  11271c:	f800283a 	ret

00112720 <ungetc>:
  112720:	008004b4 	movhi	r2,18
  112724:	10972d04 	addi	r2,r2,23732
  112728:	280d883a 	mov	r6,r5
  11272c:	200b883a 	mov	r5,r4
  112730:	11000017 	ldw	r4,0(r2)
  112734:	011258c1 	jmpi	11258c <_ungetc_r>

00112738 <__sprint_r.part.0>:
  112738:	28801917 	ldw	r2,100(r5)
  11273c:	defff604 	addi	sp,sp,-40
  112740:	dd400515 	stw	r21,20(sp)
  112744:	dfc00915 	stw	ra,36(sp)
  112748:	df000815 	stw	fp,32(sp)
  11274c:	ddc00715 	stw	r23,28(sp)
  112750:	dd800615 	stw	r22,24(sp)
  112754:	dd000415 	stw	r20,16(sp)
  112758:	dcc00315 	stw	r19,12(sp)
  11275c:	dc800215 	stw	r18,8(sp)
  112760:	dc400115 	stw	r17,4(sp)
  112764:	dc000015 	stw	r16,0(sp)
  112768:	1088000c 	andi	r2,r2,8192
  11276c:	302b883a 	mov	r21,r6
  112770:	10002e26 	beq	r2,zero,11282c <__sprint_r.part.0+0xf4>
  112774:	30800217 	ldw	r2,8(r6)
  112778:	35800017 	ldw	r22,0(r6)
  11277c:	10002926 	beq	r2,zero,112824 <__sprint_r.part.0+0xec>
  112780:	2827883a 	mov	r19,r5
  112784:	2029883a 	mov	r20,r4
  112788:	b5c00104 	addi	r23,r22,4
  11278c:	04bfffc4 	movi	r18,-1
  112790:	bc400017 	ldw	r17,0(r23)
  112794:	b4000017 	ldw	r16,0(r22)
  112798:	0039883a 	mov	fp,zero
  11279c:	8822d0ba 	srli	r17,r17,2
  1127a0:	8800031e 	bne	r17,zero,1127b0 <__sprint_r.part.0+0x78>
  1127a4:	00001806 	br	112808 <__sprint_r.part.0+0xd0>
  1127a8:	84000104 	addi	r16,r16,4
  1127ac:	8f001526 	beq	r17,fp,112804 <__sprint_r.part.0+0xcc>
  1127b0:	81400017 	ldw	r5,0(r16)
  1127b4:	980d883a 	mov	r6,r19
  1127b8:	a009883a 	mov	r4,r20
  1127bc:	01140700 	call	114070 <_fputwc_r>
  1127c0:	e7000044 	addi	fp,fp,1
  1127c4:	14bff81e 	bne	r2,r18,1127a8 <__alt_data_end+0xfffd27a8>
  1127c8:	9005883a 	mov	r2,r18
  1127cc:	a8000215 	stw	zero,8(r21)
  1127d0:	a8000115 	stw	zero,4(r21)
  1127d4:	dfc00917 	ldw	ra,36(sp)
  1127d8:	df000817 	ldw	fp,32(sp)
  1127dc:	ddc00717 	ldw	r23,28(sp)
  1127e0:	dd800617 	ldw	r22,24(sp)
  1127e4:	dd400517 	ldw	r21,20(sp)
  1127e8:	dd000417 	ldw	r20,16(sp)
  1127ec:	dcc00317 	ldw	r19,12(sp)
  1127f0:	dc800217 	ldw	r18,8(sp)
  1127f4:	dc400117 	ldw	r17,4(sp)
  1127f8:	dc000017 	ldw	r16,0(sp)
  1127fc:	dec00a04 	addi	sp,sp,40
  112800:	f800283a 	ret
  112804:	a8800217 	ldw	r2,8(r21)
  112808:	8c63883a 	add	r17,r17,r17
  11280c:	8c63883a 	add	r17,r17,r17
  112810:	1445c83a 	sub	r2,r2,r17
  112814:	a8800215 	stw	r2,8(r21)
  112818:	b5800204 	addi	r22,r22,8
  11281c:	bdc00204 	addi	r23,r23,8
  112820:	103fdb1e 	bne	r2,zero,112790 <__alt_data_end+0xfffd2790>
  112824:	0005883a 	mov	r2,zero
  112828:	003fe806 	br	1127cc <__alt_data_end+0xfffd27cc>
  11282c:	010b5c00 	call	10b5c0 <__sfvwrite_r>
  112830:	003fe606 	br	1127cc <__alt_data_end+0xfffd27cc>

00112834 <__sprint_r>:
  112834:	30c00217 	ldw	r3,8(r6)
  112838:	18000126 	beq	r3,zero,112840 <__sprint_r+0xc>
  11283c:	01127381 	jmpi	112738 <__sprint_r.part.0>
  112840:	30000115 	stw	zero,4(r6)
  112844:	0005883a 	mov	r2,zero
  112848:	f800283a 	ret

0011284c <___vfiprintf_internal_r>:
  11284c:	deffca04 	addi	sp,sp,-216
  112850:	dd403115 	stw	r21,196(sp)
  112854:	dfc03515 	stw	ra,212(sp)
  112858:	df003415 	stw	fp,208(sp)
  11285c:	ddc03315 	stw	r23,204(sp)
  112860:	dd803215 	stw	r22,200(sp)
  112864:	dd003015 	stw	r20,192(sp)
  112868:	dcc02f15 	stw	r19,188(sp)
  11286c:	dc802e15 	stw	r18,184(sp)
  112870:	dc402d15 	stw	r17,180(sp)
  112874:	dc002c15 	stw	r16,176(sp)
  112878:	d9002115 	stw	r4,132(sp)
  11287c:	d9402015 	stw	r5,128(sp)
  112880:	d9c02215 	stw	r7,136(sp)
  112884:	302b883a 	mov	r21,r6
  112888:	20000226 	beq	r4,zero,112894 <___vfiprintf_internal_r+0x48>
  11288c:	20800e17 	ldw	r2,56(r4)
  112890:	1000cf26 	beq	r2,zero,112bd0 <___vfiprintf_internal_r+0x384>
  112894:	d8c02017 	ldw	r3,128(sp)
  112898:	1880030b 	ldhu	r2,12(r3)
  11289c:	10c8000c 	andi	r3,r2,8192
  1128a0:	1800071e 	bne	r3,zero,1128c0 <___vfiprintf_internal_r+0x74>
  1128a4:	d9402017 	ldw	r5,128(sp)
  1128a8:	00f7ffc4 	movi	r3,-8193
  1128ac:	10880014 	ori	r2,r2,8192
  1128b0:	29001917 	ldw	r4,100(r5)
  1128b4:	2880030d 	sth	r2,12(r5)
  1128b8:	20c6703a 	and	r3,r4,r3
  1128bc:	28c01915 	stw	r3,100(r5)
  1128c0:	10c0020c 	andi	r3,r2,8
  1128c4:	1800a526 	beq	r3,zero,112b5c <___vfiprintf_internal_r+0x310>
  1128c8:	d9002017 	ldw	r4,128(sp)
  1128cc:	20c00417 	ldw	r3,16(r4)
  1128d0:	1800a226 	beq	r3,zero,112b5c <___vfiprintf_internal_r+0x310>
  1128d4:	1080068c 	andi	r2,r2,26
  1128d8:	00c00284 	movi	r3,10
  1128dc:	10c0a826 	beq	r2,r3,112b80 <___vfiprintf_internal_r+0x334>
  1128e0:	d9001a04 	addi	r4,sp,104
  1128e4:	d94019c4 	addi	r5,sp,103
  1128e8:	048004b4 	movhi	r18,18
  1128ec:	2145c83a 	sub	r2,r4,r5
  1128f0:	948f8684 	addi	r18,r18,15898
  1128f4:	d9001e15 	stw	r4,120(sp)
  1128f8:	d9401f15 	stw	r5,124(sp)
  1128fc:	dec01a15 	stw	sp,104(sp)
  112900:	d8001c15 	stw	zero,112(sp)
  112904:	d8001b15 	stw	zero,108(sp)
  112908:	d811883a 	mov	r8,sp
  11290c:	d8002615 	stw	zero,152(sp)
  112910:	d8002415 	stw	zero,144(sp)
  112914:	d8802815 	stw	r2,160(sp)
  112918:	a82d883a 	mov	r22,r21
  11291c:	b0800007 	ldb	r2,0(r22)
  112920:	10040d26 	beq	r2,zero,113958 <___vfiprintf_internal_r+0x110c>
  112924:	00c00944 	movi	r3,37
  112928:	b029883a 	mov	r20,r22
  11292c:	10c0021e 	bne	r2,r3,112938 <___vfiprintf_internal_r+0xec>
  112930:	00001606 	br	11298c <___vfiprintf_internal_r+0x140>
  112934:	10c00326 	beq	r2,r3,112944 <___vfiprintf_internal_r+0xf8>
  112938:	a5000044 	addi	r20,r20,1
  11293c:	a0800007 	ldb	r2,0(r20)
  112940:	103ffc1e 	bne	r2,zero,112934 <__alt_data_end+0xfffd2934>
  112944:	a5a1c83a 	sub	r16,r20,r22
  112948:	80001026 	beq	r16,zero,11298c <___vfiprintf_internal_r+0x140>
  11294c:	d8c01c17 	ldw	r3,112(sp)
  112950:	d8801b17 	ldw	r2,108(sp)
  112954:	45800015 	stw	r22,0(r8)
  112958:	80c7883a 	add	r3,r16,r3
  11295c:	10800044 	addi	r2,r2,1
  112960:	44000115 	stw	r16,4(r8)
  112964:	d8c01c15 	stw	r3,112(sp)
  112968:	d8801b15 	stw	r2,108(sp)
  11296c:	010001c4 	movi	r4,7
  112970:	2080750e 	bge	r4,r2,112b48 <___vfiprintf_internal_r+0x2fc>
  112974:	1803951e 	bne	r3,zero,1137cc <___vfiprintf_internal_r+0xf80>
  112978:	d8c02417 	ldw	r3,144(sp)
  11297c:	d8001b15 	stw	zero,108(sp)
  112980:	d811883a 	mov	r8,sp
  112984:	1c07883a 	add	r3,r3,r16
  112988:	d8c02415 	stw	r3,144(sp)
  11298c:	a0800007 	ldb	r2,0(r20)
  112990:	1002e026 	beq	r2,zero,113514 <___vfiprintf_internal_r+0xcc8>
  112994:	a5800044 	addi	r22,r20,1
  112998:	a0c00047 	ldb	r3,1(r20)
  11299c:	d8001d85 	stb	zero,118(sp)
  1129a0:	0027883a 	mov	r19,zero
  1129a4:	d8002305 	stb	zero,140(sp)
  1129a8:	043fffc4 	movi	r16,-1
  1129ac:	d8002515 	stw	zero,148(sp)
  1129b0:	0023883a 	mov	r17,zero
  1129b4:	05001604 	movi	r20,88
  1129b8:	05400244 	movi	r21,9
  1129bc:	402f883a 	mov	r23,r8
  1129c0:	b5800044 	addi	r22,r22,1
  1129c4:	18bff804 	addi	r2,r3,-32
  1129c8:	a0827736 	bltu	r20,r2,1133a8 <___vfiprintf_internal_r+0xb5c>
  1129cc:	100490ba 	slli	r2,r2,2
  1129d0:	01000474 	movhi	r4,17
  1129d4:	210a7904 	addi	r4,r4,10724
  1129d8:	1105883a 	add	r2,r2,r4
  1129dc:	10800017 	ldw	r2,0(r2)
  1129e0:	1000683a 	jmp	r2
  1129e4:	001130a8 	cmpgeui	zero,zero,17602
  1129e8:	001133a8 	cmpgeui	zero,zero,17614
  1129ec:	001133a8 	cmpgeui	zero,zero,17614
  1129f0:	001130c4 	movi	zero,17603
  1129f4:	001133a8 	cmpgeui	zero,zero,17614
  1129f8:	001133a8 	cmpgeui	zero,zero,17614
  1129fc:	001133a8 	cmpgeui	zero,zero,17614
  112a00:	001133a8 	cmpgeui	zero,zero,17614
  112a04:	001133a8 	cmpgeui	zero,zero,17614
  112a08:	001133a8 	cmpgeui	zero,zero,17614
  112a0c:	001132cc 	andi	zero,zero,17611
  112a10:	001132f0 	cmpltui	zero,zero,17611
  112a14:	001133a8 	cmpgeui	zero,zero,17614
  112a18:	00112be8 	cmpgeui	zero,zero,17583
  112a1c:	00113304 	movi	zero,17612
  112a20:	001133a8 	cmpgeui	zero,zero,17614
  112a24:	001130d0 	cmplti	zero,zero,17603
  112a28:	001130dc 	xori	zero,zero,17603
  112a2c:	001130dc 	xori	zero,zero,17603
  112a30:	001130dc 	xori	zero,zero,17603
  112a34:	001130dc 	xori	zero,zero,17603
  112a38:	001130dc 	xori	zero,zero,17603
  112a3c:	001130dc 	xori	zero,zero,17603
  112a40:	001130dc 	xori	zero,zero,17603
  112a44:	001130dc 	xori	zero,zero,17603
  112a48:	001130dc 	xori	zero,zero,17603
  112a4c:	001133a8 	cmpgeui	zero,zero,17614
  112a50:	001133a8 	cmpgeui	zero,zero,17614
  112a54:	001133a8 	cmpgeui	zero,zero,17614
  112a58:	001133a8 	cmpgeui	zero,zero,17614
  112a5c:	001133a8 	cmpgeui	zero,zero,17614
  112a60:	001133a8 	cmpgeui	zero,zero,17614
  112a64:	001133a8 	cmpgeui	zero,zero,17614
  112a68:	001133a8 	cmpgeui	zero,zero,17614
  112a6c:	001133a8 	cmpgeui	zero,zero,17614
  112a70:	001133a8 	cmpgeui	zero,zero,17614
  112a74:	0011311c 	xori	zero,zero,17604
  112a78:	001133a8 	cmpgeui	zero,zero,17614
  112a7c:	001133a8 	cmpgeui	zero,zero,17614
  112a80:	001133a8 	cmpgeui	zero,zero,17614
  112a84:	001133a8 	cmpgeui	zero,zero,17614
  112a88:	001133a8 	cmpgeui	zero,zero,17614
  112a8c:	001133a8 	cmpgeui	zero,zero,17614
  112a90:	001133a8 	cmpgeui	zero,zero,17614
  112a94:	001133a8 	cmpgeui	zero,zero,17614
  112a98:	001133a8 	cmpgeui	zero,zero,17614
  112a9c:	001133a8 	cmpgeui	zero,zero,17614
  112aa0:	00113158 	cmpnei	zero,zero,17605
  112aa4:	001133a8 	cmpgeui	zero,zero,17614
  112aa8:	001133a8 	cmpgeui	zero,zero,17614
  112aac:	001133a8 	cmpgeui	zero,zero,17614
  112ab0:	001133a8 	cmpgeui	zero,zero,17614
  112ab4:	001133a8 	cmpgeui	zero,zero,17614
  112ab8:	001131b4 	movhi	zero,17606
  112abc:	001133a8 	cmpgeui	zero,zero,17614
  112ac0:	001133a8 	cmpgeui	zero,zero,17614
  112ac4:	00113228 	cmpgeui	zero,zero,17608
  112ac8:	001133a8 	cmpgeui	zero,zero,17614
  112acc:	001133a8 	cmpgeui	zero,zero,17614
  112ad0:	001133a8 	cmpgeui	zero,zero,17614
  112ad4:	001133a8 	cmpgeui	zero,zero,17614
  112ad8:	001133a8 	cmpgeui	zero,zero,17614
  112adc:	001133a8 	cmpgeui	zero,zero,17614
  112ae0:	001133a8 	cmpgeui	zero,zero,17614
  112ae4:	001133a8 	cmpgeui	zero,zero,17614
  112ae8:	001133a8 	cmpgeui	zero,zero,17614
  112aec:	001133a8 	cmpgeui	zero,zero,17614
  112af0:	00112fd0 	cmplti	zero,zero,17599
  112af4:	00113000 	call	11300 <OSCtxSw_SWITCH_PC+0x112c0>
  112af8:	001133a8 	cmpgeui	zero,zero,17614
  112afc:	001133a8 	cmpgeui	zero,zero,17614
  112b00:	001133a8 	cmpgeui	zero,zero,17614
  112b04:	00113350 	cmplti	zero,zero,17613
  112b08:	00113000 	call	11300 <OSCtxSw_SWITCH_PC+0x112c0>
  112b0c:	001133a8 	cmpgeui	zero,zero,17614
  112b10:	001133a8 	cmpgeui	zero,zero,17614
  112b14:	00112ea8 	cmpgeui	zero,zero,17594
  112b18:	001133a8 	cmpgeui	zero,zero,17614
  112b1c:	00112ebc 	xorhi	zero,zero,17594
  112b20:	00112ef4 	movhi	zero,17595
  112b24:	00112bf4 	movhi	zero,17583
  112b28:	00112e9c 	xori	zero,zero,17594
  112b2c:	001133a8 	cmpgeui	zero,zero,17614
  112b30:	00113268 	cmpgeui	zero,zero,17609
  112b34:	001133a8 	cmpgeui	zero,zero,17614
  112b38:	001132b4 	movhi	zero,17610
  112b3c:	001133a8 	cmpgeui	zero,zero,17614
  112b40:	001133a8 	cmpgeui	zero,zero,17614
  112b44:	00112f78 	rdprs	zero,zero,17597
  112b48:	42000204 	addi	r8,r8,8
  112b4c:	d8c02417 	ldw	r3,144(sp)
  112b50:	1c07883a 	add	r3,r3,r16
  112b54:	d8c02415 	stw	r3,144(sp)
  112b58:	003f8c06 	br	11298c <__alt_data_end+0xfffd298c>
  112b5c:	d9402017 	ldw	r5,128(sp)
  112b60:	d9002117 	ldw	r4,132(sp)
  112b64:	01093880 	call	109388 <__swsetup_r>
  112b68:	1003c11e 	bne	r2,zero,113a70 <___vfiprintf_internal_r+0x1224>
  112b6c:	d9402017 	ldw	r5,128(sp)
  112b70:	00c00284 	movi	r3,10
  112b74:	2880030b 	ldhu	r2,12(r5)
  112b78:	1080068c 	andi	r2,r2,26
  112b7c:	10ff581e 	bne	r2,r3,1128e0 <__alt_data_end+0xfffd28e0>
  112b80:	d8c02017 	ldw	r3,128(sp)
  112b84:	1880038f 	ldh	r2,14(r3)
  112b88:	103f5516 	blt	r2,zero,1128e0 <__alt_data_end+0xfffd28e0>
  112b8c:	d9c02217 	ldw	r7,136(sp)
  112b90:	d9002117 	ldw	r4,132(sp)
  112b94:	a80d883a 	mov	r6,r21
  112b98:	180b883a 	mov	r5,r3
  112b9c:	0113d740 	call	113d74 <__sbprintf>
  112ba0:	dfc03517 	ldw	ra,212(sp)
  112ba4:	df003417 	ldw	fp,208(sp)
  112ba8:	ddc03317 	ldw	r23,204(sp)
  112bac:	dd803217 	ldw	r22,200(sp)
  112bb0:	dd403117 	ldw	r21,196(sp)
  112bb4:	dd003017 	ldw	r20,192(sp)
  112bb8:	dcc02f17 	ldw	r19,188(sp)
  112bbc:	dc802e17 	ldw	r18,184(sp)
  112bc0:	dc402d17 	ldw	r17,180(sp)
  112bc4:	dc002c17 	ldw	r16,176(sp)
  112bc8:	dec03604 	addi	sp,sp,216
  112bcc:	f800283a 	ret
  112bd0:	0101c500 	call	101c50 <__sinit>
  112bd4:	003f2f06 	br	112894 <__alt_data_end+0xfffd2894>
  112bd8:	d8c02517 	ldw	r3,148(sp)
  112bdc:	d8802215 	stw	r2,136(sp)
  112be0:	00c7c83a 	sub	r3,zero,r3
  112be4:	d8c02515 	stw	r3,148(sp)
  112be8:	8c400114 	ori	r17,r17,4
  112bec:	b0c00007 	ldb	r3,0(r22)
  112bf0:	003f7306 	br	1129c0 <__alt_data_end+0xfffd29c0>
  112bf4:	00800c04 	movi	r2,48
  112bf8:	d9402217 	ldw	r5,136(sp)
  112bfc:	d8801d05 	stb	r2,116(sp)
  112c00:	00801e04 	movi	r2,120
  112c04:	d8801d45 	stb	r2,117(sp)
  112c08:	d8001d85 	stb	zero,118(sp)
  112c0c:	b811883a 	mov	r8,r23
  112c10:	28c00104 	addi	r3,r5,4
  112c14:	2cc00017 	ldw	r19,0(r5)
  112c18:	0029883a 	mov	r20,zero
  112c1c:	88800094 	ori	r2,r17,2
  112c20:	80032516 	blt	r16,zero,1138b8 <___vfiprintf_internal_r+0x106c>
  112c24:	00bfdfc4 	movi	r2,-129
  112c28:	88a2703a 	and	r17,r17,r2
  112c2c:	d8c02215 	stw	r3,136(sp)
  112c30:	8c400094 	ori	r17,r17,2
  112c34:	98032a1e 	bne	r19,zero,1138e0 <___vfiprintf_internal_r+0x1094>
  112c38:	008004b4 	movhi	r2,18
  112c3c:	108e4b04 	addi	r2,r2,14636
  112c40:	d8802615 	stw	r2,152(sp)
  112c44:	002b883a 	mov	r21,zero
  112c48:	8001741e 	bne	r16,zero,11321c <___vfiprintf_internal_r+0x9d0>
  112c4c:	0021883a 	mov	r16,zero
  112c50:	0029883a 	mov	r20,zero
  112c54:	ddc01a04 	addi	r23,sp,104
  112c58:	8027883a 	mov	r19,r16
  112c5c:	8500010e 	bge	r16,r20,112c64 <___vfiprintf_internal_r+0x418>
  112c60:	a027883a 	mov	r19,r20
  112c64:	ad403fcc 	andi	r21,r21,255
  112c68:	ad40201c 	xori	r21,r21,128
  112c6c:	ad7fe004 	addi	r21,r21,-128
  112c70:	a8000126 	beq	r21,zero,112c78 <___vfiprintf_internal_r+0x42c>
  112c74:	9cc00044 	addi	r19,r19,1
  112c78:	89c0008c 	andi	r7,r17,2
  112c7c:	38000126 	beq	r7,zero,112c84 <___vfiprintf_internal_r+0x438>
  112c80:	9cc00084 	addi	r19,r19,2
  112c84:	88c0210c 	andi	r3,r17,132
  112c88:	1801dd1e 	bne	r3,zero,113400 <___vfiprintf_internal_r+0xbb4>
  112c8c:	d9402517 	ldw	r5,148(sp)
  112c90:	2cebc83a 	sub	r21,r5,r19
  112c94:	0541da0e 	bge	zero,r21,113400 <___vfiprintf_internal_r+0xbb4>
  112c98:	07000404 	movi	fp,16
  112c9c:	d8801c17 	ldw	r2,112(sp)
  112ca0:	e543be0e 	bge	fp,r21,113b9c <___vfiprintf_internal_r+0x1350>
  112ca4:	014004b4 	movhi	r5,18
  112ca8:	294f8a84 	addi	r5,r5,15914
  112cac:	dc002715 	stw	r16,156(sp)
  112cb0:	d9801b17 	ldw	r6,108(sp)
  112cb4:	a821883a 	mov	r16,r21
  112cb8:	d9402315 	stw	r5,140(sp)
  112cbc:	028001c4 	movi	r10,7
  112cc0:	d9c02915 	stw	r7,164(sp)
  112cc4:	182b883a 	mov	r21,r3
  112cc8:	00000506 	br	112ce0 <___vfiprintf_internal_r+0x494>
  112ccc:	31000084 	addi	r4,r6,2
  112cd0:	42000204 	addi	r8,r8,8
  112cd4:	180d883a 	mov	r6,r3
  112cd8:	843ffc04 	addi	r16,r16,-16
  112cdc:	e4000f0e 	bge	fp,r16,112d1c <___vfiprintf_internal_r+0x4d0>
  112ce0:	010004b4 	movhi	r4,18
  112ce4:	10800404 	addi	r2,r2,16
  112ce8:	30c00044 	addi	r3,r6,1
  112cec:	210f8a84 	addi	r4,r4,15914
  112cf0:	41000015 	stw	r4,0(r8)
  112cf4:	47000115 	stw	fp,4(r8)
  112cf8:	d8801c15 	stw	r2,112(sp)
  112cfc:	d8c01b15 	stw	r3,108(sp)
  112d00:	50fff20e 	bge	r10,r3,112ccc <__alt_data_end+0xfffd2ccc>
  112d04:	1001b21e 	bne	r2,zero,1133d0 <___vfiprintf_internal_r+0xb84>
  112d08:	843ffc04 	addi	r16,r16,-16
  112d0c:	000d883a 	mov	r6,zero
  112d10:	01000044 	movi	r4,1
  112d14:	d811883a 	mov	r8,sp
  112d18:	e43ff116 	blt	fp,r16,112ce0 <__alt_data_end+0xfffd2ce0>
  112d1c:	a807883a 	mov	r3,r21
  112d20:	d9c02917 	ldw	r7,164(sp)
  112d24:	802b883a 	mov	r21,r16
  112d28:	dc002717 	ldw	r16,156(sp)
  112d2c:	d9402317 	ldw	r5,140(sp)
  112d30:	a885883a 	add	r2,r21,r2
  112d34:	45400115 	stw	r21,4(r8)
  112d38:	41400015 	stw	r5,0(r8)
  112d3c:	d8801c15 	stw	r2,112(sp)
  112d40:	d9001b15 	stw	r4,108(sp)
  112d44:	014001c4 	movi	r5,7
  112d48:	29026216 	blt	r5,r4,1136d4 <___vfiprintf_internal_r+0xe88>
  112d4c:	d9801d87 	ldb	r6,118(sp)
  112d50:	42000204 	addi	r8,r8,8
  112d54:	21400044 	addi	r5,r4,1
  112d58:	3001ae1e 	bne	r6,zero,113414 <___vfiprintf_internal_r+0xbc8>
  112d5c:	3801bb26 	beq	r7,zero,11344c <___vfiprintf_internal_r+0xc00>
  112d60:	d9001d04 	addi	r4,sp,116
  112d64:	10800084 	addi	r2,r2,2
  112d68:	41000015 	stw	r4,0(r8)
  112d6c:	01000084 	movi	r4,2
  112d70:	41000115 	stw	r4,4(r8)
  112d74:	d8801c15 	stw	r2,112(sp)
  112d78:	d9401b15 	stw	r5,108(sp)
  112d7c:	010001c4 	movi	r4,7
  112d80:	2142680e 	bge	r4,r5,113724 <___vfiprintf_internal_r+0xed8>
  112d84:	1002b11e 	bne	r2,zero,11384c <___vfiprintf_internal_r+0x1000>
  112d88:	01802004 	movi	r6,128
  112d8c:	01400044 	movi	r5,1
  112d90:	0009883a 	mov	r4,zero
  112d94:	d811883a 	mov	r8,sp
  112d98:	1981ae1e 	bne	r3,r6,113454 <___vfiprintf_internal_r+0xc08>
  112d9c:	d8c02517 	ldw	r3,148(sp)
  112da0:	1cf9c83a 	sub	fp,r3,r19
  112da4:	0701ab0e 	bge	zero,fp,113454 <___vfiprintf_internal_r+0xc08>
  112da8:	05400404 	movi	r21,16
  112dac:	af03a90e 	bge	r21,fp,113c54 <___vfiprintf_internal_r+0x1408>
  112db0:	014004b4 	movhi	r5,18
  112db4:	294f8684 	addi	r5,r5,15898
  112db8:	d9402315 	stw	r5,140(sp)
  112dbc:	01c001c4 	movi	r7,7
  112dc0:	00000506 	br	112dd8 <___vfiprintf_internal_r+0x58c>
  112dc4:	21800084 	addi	r6,r4,2
  112dc8:	42000204 	addi	r8,r8,8
  112dcc:	1809883a 	mov	r4,r3
  112dd0:	e73ffc04 	addi	fp,fp,-16
  112dd4:	af000d0e 	bge	r21,fp,112e0c <___vfiprintf_internal_r+0x5c0>
  112dd8:	10800404 	addi	r2,r2,16
  112ddc:	20c00044 	addi	r3,r4,1
  112de0:	44800015 	stw	r18,0(r8)
  112de4:	45400115 	stw	r21,4(r8)
  112de8:	d8801c15 	stw	r2,112(sp)
  112dec:	d8c01b15 	stw	r3,108(sp)
  112df0:	38fff40e 	bge	r7,r3,112dc4 <__alt_data_end+0xfffd2dc4>
  112df4:	10022b1e 	bne	r2,zero,1136a4 <___vfiprintf_internal_r+0xe58>
  112df8:	e73ffc04 	addi	fp,fp,-16
  112dfc:	01800044 	movi	r6,1
  112e00:	0009883a 	mov	r4,zero
  112e04:	d811883a 	mov	r8,sp
  112e08:	af3ff316 	blt	r21,fp,112dd8 <__alt_data_end+0xfffd2dd8>
  112e0c:	d8c02317 	ldw	r3,140(sp)
  112e10:	1705883a 	add	r2,r2,fp
  112e14:	47000115 	stw	fp,4(r8)
  112e18:	40c00015 	stw	r3,0(r8)
  112e1c:	d8801c15 	stw	r2,112(sp)
  112e20:	d9801b15 	stw	r6,108(sp)
  112e24:	00c001c4 	movi	r3,7
  112e28:	19829416 	blt	r3,r6,11387c <___vfiprintf_internal_r+0x1030>
  112e2c:	8521c83a 	sub	r16,r16,r20
  112e30:	42000204 	addi	r8,r8,8
  112e34:	31400044 	addi	r5,r6,1
  112e38:	3009883a 	mov	r4,r6
  112e3c:	04018716 	blt	zero,r16,11345c <___vfiprintf_internal_r+0xc10>
  112e40:	a085883a 	add	r2,r20,r2
  112e44:	45c00015 	stw	r23,0(r8)
  112e48:	45000115 	stw	r20,4(r8)
  112e4c:	d8801c15 	stw	r2,112(sp)
  112e50:	d9401b15 	stw	r5,108(sp)
  112e54:	00c001c4 	movi	r3,7
  112e58:	1941c20e 	bge	r3,r5,113564 <___vfiprintf_internal_r+0xd18>
  112e5c:	1002531e 	bne	r2,zero,1137ac <___vfiprintf_internal_r+0xf60>
  112e60:	d8001b15 	stw	zero,108(sp)
  112e64:	8c40010c 	andi	r17,r17,4
  112e68:	88023226 	beq	r17,zero,113734 <___vfiprintf_internal_r+0xee8>
  112e6c:	d9002517 	ldw	r4,148(sp)
  112e70:	24e3c83a 	sub	r17,r4,r19
  112e74:	04432916 	blt	zero,r17,113b1c <___vfiprintf_internal_r+0x12d0>
  112e78:	d8802517 	ldw	r2,148(sp)
  112e7c:	14c0010e 	bge	r2,r19,112e84 <___vfiprintf_internal_r+0x638>
  112e80:	9805883a 	mov	r2,r19
  112e84:	d8c02417 	ldw	r3,144(sp)
  112e88:	1887883a 	add	r3,r3,r2
  112e8c:	d8c02415 	stw	r3,144(sp)
  112e90:	d8001b15 	stw	zero,108(sp)
  112e94:	d811883a 	mov	r8,sp
  112e98:	003ea006 	br	11291c <__alt_data_end+0xfffd291c>
  112e9c:	8c400814 	ori	r17,r17,32
  112ea0:	b0c00007 	ldb	r3,0(r22)
  112ea4:	003ec606 	br	1129c0 <__alt_data_end+0xfffd29c0>
  112ea8:	b0c00007 	ldb	r3,0(r22)
  112eac:	00801b04 	movi	r2,108
  112eb0:	18832026 	beq	r3,r2,113b34 <___vfiprintf_internal_r+0x12e8>
  112eb4:	8c400414 	ori	r17,r17,16
  112eb8:	003ec106 	br	1129c0 <__alt_data_end+0xfffd29c0>
  112ebc:	9cc03fcc 	andi	r19,r19,255
  112ec0:	b811883a 	mov	r8,r23
  112ec4:	9803981e 	bne	r19,zero,113d28 <___vfiprintf_internal_r+0x14dc>
  112ec8:	8880080c 	andi	r2,r17,32
  112ecc:	1002be26 	beq	r2,zero,1139c8 <___vfiprintf_internal_r+0x117c>
  112ed0:	d9002217 	ldw	r4,136(sp)
  112ed4:	d9402417 	ldw	r5,144(sp)
  112ed8:	20800017 	ldw	r2,0(r4)
  112edc:	2807d7fa 	srai	r3,r5,31
  112ee0:	21000104 	addi	r4,r4,4
  112ee4:	d9002215 	stw	r4,136(sp)
  112ee8:	11400015 	stw	r5,0(r2)
  112eec:	10c00115 	stw	r3,4(r2)
  112ef0:	003e8a06 	br	11291c <__alt_data_end+0xfffd291c>
  112ef4:	9cc03fcc 	andi	r19,r19,255
  112ef8:	b811883a 	mov	r8,r23
  112efc:	9803871e 	bne	r19,zero,113d1c <___vfiprintf_internal_r+0x14d0>
  112f00:	8880080c 	andi	r2,r17,32
  112f04:	10009a26 	beq	r2,zero,113170 <___vfiprintf_internal_r+0x924>
  112f08:	d9002217 	ldw	r4,136(sp)
  112f0c:	d8001d85 	stb	zero,118(sp)
  112f10:	20800204 	addi	r2,r4,8
  112f14:	24c00017 	ldw	r19,0(r4)
  112f18:	25000117 	ldw	r20,4(r4)
  112f1c:	8002a416 	blt	r16,zero,1139b0 <___vfiprintf_internal_r+0x1164>
  112f20:	013fdfc4 	movi	r4,-129
  112f24:	9d06b03a 	or	r3,r19,r20
  112f28:	d8802215 	stw	r2,136(sp)
  112f2c:	8922703a 	and	r17,r17,r4
  112f30:	18009b26 	beq	r3,zero,1131a0 <___vfiprintf_internal_r+0x954>
  112f34:	002b883a 	mov	r21,zero
  112f38:	ddc01a04 	addi	r23,sp,104
  112f3c:	9806d0fa 	srli	r3,r19,3
  112f40:	a008977a 	slli	r4,r20,29
  112f44:	a028d0fa 	srli	r20,r20,3
  112f48:	9cc001cc 	andi	r19,r19,7
  112f4c:	98800c04 	addi	r2,r19,48
  112f50:	bdffffc4 	addi	r23,r23,-1
  112f54:	20e6b03a 	or	r19,r4,r3
  112f58:	b8800005 	stb	r2,0(r23)
  112f5c:	9d06b03a 	or	r3,r19,r20
  112f60:	183ff61e 	bne	r3,zero,112f3c <__alt_data_end+0xfffd2f3c>
  112f64:	88c0004c 	andi	r3,r17,1
  112f68:	18021f1e 	bne	r3,zero,1137e8 <___vfiprintf_internal_r+0xf9c>
  112f6c:	d9401e17 	ldw	r5,120(sp)
  112f70:	2de9c83a 	sub	r20,r5,r23
  112f74:	003f3806 	br	112c58 <__alt_data_end+0xfffd2c58>
  112f78:	9cc03fcc 	andi	r19,r19,255
  112f7c:	b811883a 	mov	r8,r23
  112f80:	98034f1e 	bne	r19,zero,113cc0 <___vfiprintf_internal_r+0x1474>
  112f84:	008004b4 	movhi	r2,18
  112f88:	108e4b04 	addi	r2,r2,14636
  112f8c:	d8802615 	stw	r2,152(sp)
  112f90:	8880080c 	andi	r2,r17,32
  112f94:	1000ac26 	beq	r2,zero,113248 <___vfiprintf_internal_r+0x9fc>
  112f98:	d9002217 	ldw	r4,136(sp)
  112f9c:	24c00017 	ldw	r19,0(r4)
  112fa0:	25000117 	ldw	r20,4(r4)
  112fa4:	21000204 	addi	r4,r4,8
  112fa8:	d9002215 	stw	r4,136(sp)
  112fac:	8880004c 	andi	r2,r17,1
  112fb0:	1001e726 	beq	r2,zero,113750 <___vfiprintf_internal_r+0xf04>
  112fb4:	9d04b03a 	or	r2,r19,r20
  112fb8:	10025c1e 	bne	r2,zero,11392c <___vfiprintf_internal_r+0x10e0>
  112fbc:	d8001d85 	stb	zero,118(sp)
  112fc0:	80024416 	blt	r16,zero,1138d4 <___vfiprintf_internal_r+0x1088>
  112fc4:	00bfdfc4 	movi	r2,-129
  112fc8:	88a2703a 	and	r17,r17,r2
  112fcc:	003f1d06 	br	112c44 <__alt_data_end+0xfffd2c44>
  112fd0:	d8c02217 	ldw	r3,136(sp)
  112fd4:	04c00044 	movi	r19,1
  112fd8:	b811883a 	mov	r8,r23
  112fdc:	18800017 	ldw	r2,0(r3)
  112fe0:	18c00104 	addi	r3,r3,4
  112fe4:	d8001d85 	stb	zero,118(sp)
  112fe8:	d8801005 	stb	r2,64(sp)
  112fec:	d8c02215 	stw	r3,136(sp)
  112ff0:	9829883a 	mov	r20,r19
  112ff4:	ddc01004 	addi	r23,sp,64
  112ff8:	0021883a 	mov	r16,zero
  112ffc:	003f1e06 	br	112c78 <__alt_data_end+0xfffd2c78>
  113000:	9cc03fcc 	andi	r19,r19,255
  113004:	b811883a 	mov	r8,r23
  113008:	9803331e 	bne	r19,zero,113cd8 <___vfiprintf_internal_r+0x148c>
  11300c:	8880080c 	andi	r2,r17,32
  113010:	10004826 	beq	r2,zero,113134 <___vfiprintf_internal_r+0x8e8>
  113014:	d9002217 	ldw	r4,136(sp)
  113018:	20800117 	ldw	r2,4(r4)
  11301c:	24c00017 	ldw	r19,0(r4)
  113020:	21000204 	addi	r4,r4,8
  113024:	d9002215 	stw	r4,136(sp)
  113028:	1029883a 	mov	r20,r2
  11302c:	10024c16 	blt	r2,zero,113960 <___vfiprintf_internal_r+0x1114>
  113030:	dd401d83 	ldbu	r21,118(sp)
  113034:	80007116 	blt	r16,zero,1131fc <___vfiprintf_internal_r+0x9b0>
  113038:	00ffdfc4 	movi	r3,-129
  11303c:	9d04b03a 	or	r2,r19,r20
  113040:	88e2703a 	and	r17,r17,r3
  113044:	1000d126 	beq	r2,zero,11338c <___vfiprintf_internal_r+0xb40>
  113048:	a0023526 	beq	r20,zero,113920 <___vfiprintf_internal_r+0x10d4>
  11304c:	ddc01a04 	addi	r23,sp,104
  113050:	4039883a 	mov	fp,r8
  113054:	9809883a 	mov	r4,r19
  113058:	a00b883a 	mov	r5,r20
  11305c:	01800284 	movi	r6,10
  113060:	000f883a 	mov	r7,zero
  113064:	01158fc0 	call	1158fc <__umoddi3>
  113068:	10800c04 	addi	r2,r2,48
  11306c:	bdffffc4 	addi	r23,r23,-1
  113070:	9809883a 	mov	r4,r19
  113074:	a00b883a 	mov	r5,r20
  113078:	b8800005 	stb	r2,0(r23)
  11307c:	01800284 	movi	r6,10
  113080:	000f883a 	mov	r7,zero
  113084:	01153000 	call	115300 <__udivdi3>
  113088:	1027883a 	mov	r19,r2
  11308c:	10c4b03a 	or	r2,r2,r3
  113090:	1829883a 	mov	r20,r3
  113094:	103fef1e 	bne	r2,zero,113054 <__alt_data_end+0xfffd3054>
  113098:	d9001e17 	ldw	r4,120(sp)
  11309c:	e011883a 	mov	r8,fp
  1130a0:	25e9c83a 	sub	r20,r4,r23
  1130a4:	003eec06 	br	112c58 <__alt_data_end+0xfffd2c58>
  1130a8:	d8802307 	ldb	r2,140(sp)
  1130ac:	1002361e 	bne	r2,zero,113988 <___vfiprintf_internal_r+0x113c>
  1130b0:	00c00804 	movi	r3,32
  1130b4:	d8c02305 	stb	r3,140(sp)
  1130b8:	04c00044 	movi	r19,1
  1130bc:	b0c00007 	ldb	r3,0(r22)
  1130c0:	003e3f06 	br	1129c0 <__alt_data_end+0xfffd29c0>
  1130c4:	8c400054 	ori	r17,r17,1
  1130c8:	b0c00007 	ldb	r3,0(r22)
  1130cc:	003e3c06 	br	1129c0 <__alt_data_end+0xfffd29c0>
  1130d0:	8c402014 	ori	r17,r17,128
  1130d4:	b0c00007 	ldb	r3,0(r22)
  1130d8:	003e3906 	br	1129c0 <__alt_data_end+0xfffd29c0>
  1130dc:	dc002715 	stw	r16,156(sp)
  1130e0:	d8002515 	stw	zero,148(sp)
  1130e4:	1f3ff404 	addi	fp,r3,-48
  1130e8:	0009883a 	mov	r4,zero
  1130ec:	b021883a 	mov	r16,r22
  1130f0:	01400284 	movi	r5,10
  1130f4:	01160740 	call	116074 <__mulsi3>
  1130f8:	80c00007 	ldb	r3,0(r16)
  1130fc:	e089883a 	add	r4,fp,r2
  113100:	b5800044 	addi	r22,r22,1
  113104:	1f3ff404 	addi	fp,r3,-48
  113108:	b021883a 	mov	r16,r22
  11310c:	af3ff82e 	bgeu	r21,fp,1130f0 <__alt_data_end+0xfffd30f0>
  113110:	d9002515 	stw	r4,148(sp)
  113114:	dc002717 	ldw	r16,156(sp)
  113118:	003e2a06 	br	1129c4 <__alt_data_end+0xfffd29c4>
  11311c:	9cc03fcc 	andi	r19,r19,255
  113120:	b811883a 	mov	r8,r23
  113124:	9802e91e 	bne	r19,zero,113ccc <___vfiprintf_internal_r+0x1480>
  113128:	8c400414 	ori	r17,r17,16
  11312c:	8880080c 	andi	r2,r17,32
  113130:	103fb81e 	bne	r2,zero,113014 <__alt_data_end+0xfffd3014>
  113134:	8880040c 	andi	r2,r17,16
  113138:	10022e26 	beq	r2,zero,1139f4 <___vfiprintf_internal_r+0x11a8>
  11313c:	d9402217 	ldw	r5,136(sp)
  113140:	2cc00017 	ldw	r19,0(r5)
  113144:	29400104 	addi	r5,r5,4
  113148:	d9402215 	stw	r5,136(sp)
  11314c:	9829d7fa 	srai	r20,r19,31
  113150:	a005883a 	mov	r2,r20
  113154:	003fb506 	br	11302c <__alt_data_end+0xfffd302c>
  113158:	9cc03fcc 	andi	r19,r19,255
  11315c:	b811883a 	mov	r8,r23
  113160:	9802fa1e 	bne	r19,zero,113d4c <___vfiprintf_internal_r+0x1500>
  113164:	8c400414 	ori	r17,r17,16
  113168:	8880080c 	andi	r2,r17,32
  11316c:	103f661e 	bne	r2,zero,112f08 <__alt_data_end+0xfffd2f08>
  113170:	8880040c 	andi	r2,r17,16
  113174:	10020626 	beq	r2,zero,113990 <___vfiprintf_internal_r+0x1144>
  113178:	d9402217 	ldw	r5,136(sp)
  11317c:	d8001d85 	stb	zero,118(sp)
  113180:	0029883a 	mov	r20,zero
  113184:	28800104 	addi	r2,r5,4
  113188:	2cc00017 	ldw	r19,0(r5)
  11318c:	80020816 	blt	r16,zero,1139b0 <___vfiprintf_internal_r+0x1164>
  113190:	00ffdfc4 	movi	r3,-129
  113194:	d8802215 	stw	r2,136(sp)
  113198:	88e2703a 	and	r17,r17,r3
  11319c:	983f651e 	bne	r19,zero,112f34 <__alt_data_end+0xfffd2f34>
  1131a0:	002b883a 	mov	r21,zero
  1131a4:	8002cf26 	beq	r16,zero,113ce4 <___vfiprintf_internal_r+0x1498>
  1131a8:	0027883a 	mov	r19,zero
  1131ac:	0029883a 	mov	r20,zero
  1131b0:	003f6106 	br	112f38 <__alt_data_end+0xfffd2f38>
  1131b4:	9cc03fcc 	andi	r19,r19,255
  1131b8:	b811883a 	mov	r8,r23
  1131bc:	9802e01e 	bne	r19,zero,113d40 <___vfiprintf_internal_r+0x14f4>
  1131c0:	8c400414 	ori	r17,r17,16
  1131c4:	8880080c 	andi	r2,r17,32
  1131c8:	1000641e 	bne	r2,zero,11335c <___vfiprintf_internal_r+0xb10>
  1131cc:	8880040c 	andi	r2,r17,16
  1131d0:	1001c81e 	bne	r2,zero,1138f4 <___vfiprintf_internal_r+0x10a8>
  1131d4:	8880100c 	andi	r2,r17,64
  1131d8:	d8001d85 	stb	zero,118(sp)
  1131dc:	1002281e 	bne	r2,zero,113a80 <___vfiprintf_internal_r+0x1234>
  1131e0:	d9002217 	ldw	r4,136(sp)
  1131e4:	0029883a 	mov	r20,zero
  1131e8:	20800104 	addi	r2,r4,4
  1131ec:	24c00017 	ldw	r19,0(r4)
  1131f0:	8001c60e 	bge	r16,zero,11390c <___vfiprintf_internal_r+0x10c0>
  1131f4:	d8802215 	stw	r2,136(sp)
  1131f8:	002b883a 	mov	r21,zero
  1131fc:	9d04b03a 	or	r2,r19,r20
  113200:	103f911e 	bne	r2,zero,113048 <__alt_data_end+0xfffd3048>
  113204:	00800044 	movi	r2,1
  113208:	10803fcc 	andi	r2,r2,255
  11320c:	00c00044 	movi	r3,1
  113210:	10c05f26 	beq	r2,r3,113390 <___vfiprintf_internal_r+0xb44>
  113214:	00c00084 	movi	r3,2
  113218:	10ffe31e 	bne	r2,r3,1131a8 <__alt_data_end+0xfffd31a8>
  11321c:	0027883a 	mov	r19,zero
  113220:	0029883a 	mov	r20,zero
  113224:	00015106 	br	11376c <___vfiprintf_internal_r+0xf20>
  113228:	9cc03fcc 	andi	r19,r19,255
  11322c:	b811883a 	mov	r8,r23
  113230:	9802c01e 	bne	r19,zero,113d34 <___vfiprintf_internal_r+0x14e8>
  113234:	014004b4 	movhi	r5,18
  113238:	294e4604 	addi	r5,r5,14616
  11323c:	d9402615 	stw	r5,152(sp)
  113240:	8880080c 	andi	r2,r17,32
  113244:	103f541e 	bne	r2,zero,112f98 <__alt_data_end+0xfffd2f98>
  113248:	8880040c 	andi	r2,r17,16
  11324c:	1001f226 	beq	r2,zero,113a18 <___vfiprintf_internal_r+0x11cc>
  113250:	d9402217 	ldw	r5,136(sp)
  113254:	0029883a 	mov	r20,zero
  113258:	2cc00017 	ldw	r19,0(r5)
  11325c:	29400104 	addi	r5,r5,4
  113260:	d9402215 	stw	r5,136(sp)
  113264:	003f5106 	br	112fac <__alt_data_end+0xfffd2fac>
  113268:	d8c02217 	ldw	r3,136(sp)
  11326c:	b811883a 	mov	r8,r23
  113270:	d8001d85 	stb	zero,118(sp)
  113274:	1dc00017 	ldw	r23,0(r3)
  113278:	1f000104 	addi	fp,r3,4
  11327c:	b8025926 	beq	r23,zero,113be4 <___vfiprintf_internal_r+0x1398>
  113280:	80023316 	blt	r16,zero,113b50 <___vfiprintf_internal_r+0x1304>
  113284:	800d883a 	mov	r6,r16
  113288:	000b883a 	mov	r5,zero
  11328c:	b809883a 	mov	r4,r23
  113290:	da002a15 	stw	r8,168(sp)
  113294:	01026340 	call	102634 <memchr>
  113298:	da002a17 	ldw	r8,168(sp)
  11329c:	10026826 	beq	r2,zero,113c40 <___vfiprintf_internal_r+0x13f4>
  1132a0:	15e9c83a 	sub	r20,r2,r23
  1132a4:	dd401d83 	ldbu	r21,118(sp)
  1132a8:	df002215 	stw	fp,136(sp)
  1132ac:	0021883a 	mov	r16,zero
  1132b0:	003e6906 	br	112c58 <__alt_data_end+0xfffd2c58>
  1132b4:	9cc03fcc 	andi	r19,r19,255
  1132b8:	b811883a 	mov	r8,r23
  1132bc:	983fc126 	beq	r19,zero,1131c4 <__alt_data_end+0xfffd31c4>
  1132c0:	d8c02303 	ldbu	r3,140(sp)
  1132c4:	d8c01d85 	stb	r3,118(sp)
  1132c8:	003fbe06 	br	1131c4 <__alt_data_end+0xfffd31c4>
  1132cc:	d9002217 	ldw	r4,136(sp)
  1132d0:	d9402217 	ldw	r5,136(sp)
  1132d4:	21000017 	ldw	r4,0(r4)
  1132d8:	28800104 	addi	r2,r5,4
  1132dc:	d9002515 	stw	r4,148(sp)
  1132e0:	203e3d16 	blt	r4,zero,112bd8 <__alt_data_end+0xfffd2bd8>
  1132e4:	d8802215 	stw	r2,136(sp)
  1132e8:	b0c00007 	ldb	r3,0(r22)
  1132ec:	003db406 	br	1129c0 <__alt_data_end+0xfffd29c0>
  1132f0:	00c00ac4 	movi	r3,43
  1132f4:	d8c02305 	stb	r3,140(sp)
  1132f8:	04c00044 	movi	r19,1
  1132fc:	b0c00007 	ldb	r3,0(r22)
  113300:	003daf06 	br	1129c0 <__alt_data_end+0xfffd29c0>
  113304:	b0c00007 	ldb	r3,0(r22)
  113308:	01000a84 	movi	r4,42
  11330c:	b4000044 	addi	r16,r22,1
  113310:	19025e26 	beq	r3,r4,113c8c <___vfiprintf_internal_r+0x1440>
  113314:	1f3ff404 	addi	fp,r3,-48
  113318:	0009883a 	mov	r4,zero
  11331c:	af025236 	bltu	r21,fp,113c68 <___vfiprintf_internal_r+0x141c>
  113320:	01400284 	movi	r5,10
  113324:	01160740 	call	116074 <__mulsi3>
  113328:	80c00007 	ldb	r3,0(r16)
  11332c:	1709883a 	add	r4,r2,fp
  113330:	85800044 	addi	r22,r16,1
  113334:	1f3ff404 	addi	fp,r3,-48
  113338:	b021883a 	mov	r16,r22
  11333c:	af3ff82e 	bgeu	r21,fp,113320 <__alt_data_end+0xfffd3320>
  113340:	2021883a 	mov	r16,r4
  113344:	203d9f0e 	bge	r4,zero,1129c4 <__alt_data_end+0xfffd29c4>
  113348:	043fffc4 	movi	r16,-1
  11334c:	003d9d06 	br	1129c4 <__alt_data_end+0xfffd29c4>
  113350:	8c401014 	ori	r17,r17,64
  113354:	b0c00007 	ldb	r3,0(r22)
  113358:	003d9906 	br	1129c0 <__alt_data_end+0xfffd29c0>
  11335c:	d9002217 	ldw	r4,136(sp)
  113360:	d8001d85 	stb	zero,118(sp)
  113364:	20c00204 	addi	r3,r4,8
  113368:	24c00017 	ldw	r19,0(r4)
  11336c:	25000117 	ldw	r20,4(r4)
  113370:	8001e716 	blt	r16,zero,113b10 <___vfiprintf_internal_r+0x12c4>
  113374:	013fdfc4 	movi	r4,-129
  113378:	9d04b03a 	or	r2,r19,r20
  11337c:	d8c02215 	stw	r3,136(sp)
  113380:	8922703a 	and	r17,r17,r4
  113384:	002b883a 	mov	r21,zero
  113388:	103f2f1e 	bne	r2,zero,113048 <__alt_data_end+0xfffd3048>
  11338c:	803e2f26 	beq	r16,zero,112c4c <__alt_data_end+0xfffd2c4c>
  113390:	0027883a 	mov	r19,zero
  113394:	9cc00c04 	addi	r19,r19,48
  113398:	dcc019c5 	stb	r19,103(sp)
  11339c:	dd002817 	ldw	r20,160(sp)
  1133a0:	ddc019c4 	addi	r23,sp,103
  1133a4:	003e2c06 	br	112c58 <__alt_data_end+0xfffd2c58>
  1133a8:	9cc03fcc 	andi	r19,r19,255
  1133ac:	b811883a 	mov	r8,r23
  1133b0:	9802571e 	bne	r19,zero,113d10 <___vfiprintf_internal_r+0x14c4>
  1133b4:	18005726 	beq	r3,zero,113514 <___vfiprintf_internal_r+0xcc8>
  1133b8:	04c00044 	movi	r19,1
  1133bc:	d8c01005 	stb	r3,64(sp)
  1133c0:	d8001d85 	stb	zero,118(sp)
  1133c4:	9829883a 	mov	r20,r19
  1133c8:	ddc01004 	addi	r23,sp,64
  1133cc:	003f0a06 	br	112ff8 <__alt_data_end+0xfffd2ff8>
  1133d0:	d9402017 	ldw	r5,128(sp)
  1133d4:	d9002117 	ldw	r4,132(sp)
  1133d8:	d9801a04 	addi	r6,sp,104
  1133dc:	da802a15 	stw	r10,168(sp)
  1133e0:	01127380 	call	112738 <__sprint_r.part.0>
  1133e4:	da802a17 	ldw	r10,168(sp)
  1133e8:	1000501e 	bne	r2,zero,11352c <___vfiprintf_internal_r+0xce0>
  1133ec:	d9801b17 	ldw	r6,108(sp)
  1133f0:	d8801c17 	ldw	r2,112(sp)
  1133f4:	d811883a 	mov	r8,sp
  1133f8:	31000044 	addi	r4,r6,1
  1133fc:	003e3606 	br	112cd8 <__alt_data_end+0xfffd2cd8>
  113400:	d9001b17 	ldw	r4,108(sp)
  113404:	d8801c17 	ldw	r2,112(sp)
  113408:	21400044 	addi	r5,r4,1
  11340c:	d9801d87 	ldb	r6,118(sp)
  113410:	303e5226 	beq	r6,zero,112d5c <__alt_data_end+0xfffd2d5c>
  113414:	01800044 	movi	r6,1
  113418:	d9001d84 	addi	r4,sp,118
  11341c:	1185883a 	add	r2,r2,r6
  113420:	41000015 	stw	r4,0(r8)
  113424:	41800115 	stw	r6,4(r8)
  113428:	d8801c15 	stw	r2,112(sp)
  11342c:	d9401b15 	stw	r5,108(sp)
  113430:	010001c4 	movi	r4,7
  113434:	2140b00e 	bge	r4,r5,1136f8 <___vfiprintf_internal_r+0xeac>
  113438:	1000f61e 	bne	r2,zero,113814 <___vfiprintf_internal_r+0xfc8>
  11343c:	3800b31e 	bne	r7,zero,11370c <___vfiprintf_internal_r+0xec0>
  113440:	0009883a 	mov	r4,zero
  113444:	300b883a 	mov	r5,r6
  113448:	d811883a 	mov	r8,sp
  11344c:	01802004 	movi	r6,128
  113450:	19be5226 	beq	r3,r6,112d9c <__alt_data_end+0xfffd2d9c>
  113454:	8521c83a 	sub	r16,r16,r20
  113458:	043e790e 	bge	zero,r16,112e40 <__alt_data_end+0xfffd2e40>
  11345c:	05400404 	movi	r21,16
  113460:	ac01b00e 	bge	r21,r16,113b24 <___vfiprintf_internal_r+0x12d8>
  113464:	014004b4 	movhi	r5,18
  113468:	294f8684 	addi	r5,r5,15898
  11346c:	d9402315 	stw	r5,140(sp)
  113470:	070001c4 	movi	fp,7
  113474:	00000506 	br	11348c <___vfiprintf_internal_r+0xc40>
  113478:	21400084 	addi	r5,r4,2
  11347c:	42000204 	addi	r8,r8,8
  113480:	1809883a 	mov	r4,r3
  113484:	843ffc04 	addi	r16,r16,-16
  113488:	ac000d0e 	bge	r21,r16,1134c0 <___vfiprintf_internal_r+0xc74>
  11348c:	10800404 	addi	r2,r2,16
  113490:	20c00044 	addi	r3,r4,1
  113494:	44800015 	stw	r18,0(r8)
  113498:	45400115 	stw	r21,4(r8)
  11349c:	d8801c15 	stw	r2,112(sp)
  1134a0:	d8c01b15 	stw	r3,108(sp)
  1134a4:	e0fff40e 	bge	fp,r3,113478 <__alt_data_end+0xfffd3478>
  1134a8:	1000101e 	bne	r2,zero,1134ec <___vfiprintf_internal_r+0xca0>
  1134ac:	843ffc04 	addi	r16,r16,-16
  1134b0:	01400044 	movi	r5,1
  1134b4:	0009883a 	mov	r4,zero
  1134b8:	d811883a 	mov	r8,sp
  1134bc:	ac3ff316 	blt	r21,r16,11348c <__alt_data_end+0xfffd348c>
  1134c0:	d8c02317 	ldw	r3,140(sp)
  1134c4:	1405883a 	add	r2,r2,r16
  1134c8:	44000115 	stw	r16,4(r8)
  1134cc:	40c00015 	stw	r3,0(r8)
  1134d0:	d8801c15 	stw	r2,112(sp)
  1134d4:	d9401b15 	stw	r5,108(sp)
  1134d8:	00c001c4 	movi	r3,7
  1134dc:	19401916 	blt	r3,r5,113544 <___vfiprintf_internal_r+0xcf8>
  1134e0:	42000204 	addi	r8,r8,8
  1134e4:	29400044 	addi	r5,r5,1
  1134e8:	003e5506 	br	112e40 <__alt_data_end+0xfffd2e40>
  1134ec:	d9402017 	ldw	r5,128(sp)
  1134f0:	d9002117 	ldw	r4,132(sp)
  1134f4:	d9801a04 	addi	r6,sp,104
  1134f8:	01127380 	call	112738 <__sprint_r.part.0>
  1134fc:	10000b1e 	bne	r2,zero,11352c <___vfiprintf_internal_r+0xce0>
  113500:	d9001b17 	ldw	r4,108(sp)
  113504:	d8801c17 	ldw	r2,112(sp)
  113508:	d811883a 	mov	r8,sp
  11350c:	21400044 	addi	r5,r4,1
  113510:	003fdc06 	br	113484 <__alt_data_end+0xfffd3484>
  113514:	d8801c17 	ldw	r2,112(sp)
  113518:	10000426 	beq	r2,zero,11352c <___vfiprintf_internal_r+0xce0>
  11351c:	d9402017 	ldw	r5,128(sp)
  113520:	d9002117 	ldw	r4,132(sp)
  113524:	d9801a04 	addi	r6,sp,104
  113528:	01127380 	call	112738 <__sprint_r.part.0>
  11352c:	d9402017 	ldw	r5,128(sp)
  113530:	2880030b 	ldhu	r2,12(r5)
  113534:	1080100c 	andi	r2,r2,64
  113538:	10014d1e 	bne	r2,zero,113a70 <___vfiprintf_internal_r+0x1224>
  11353c:	d8802417 	ldw	r2,144(sp)
  113540:	003d9706 	br	112ba0 <__alt_data_end+0xfffd2ba0>
  113544:	1000d21e 	bne	r2,zero,113890 <___vfiprintf_internal_r+0x1044>
  113548:	00c00044 	movi	r3,1
  11354c:	a005883a 	mov	r2,r20
  113550:	ddc00015 	stw	r23,0(sp)
  113554:	dd000115 	stw	r20,4(sp)
  113558:	dd001c15 	stw	r20,112(sp)
  11355c:	d8c01b15 	stw	r3,108(sp)
  113560:	d811883a 	mov	r8,sp
  113564:	42000204 	addi	r8,r8,8
  113568:	8c40010c 	andi	r17,r17,4
  11356c:	88004026 	beq	r17,zero,113670 <___vfiprintf_internal_r+0xe24>
  113570:	d9002517 	ldw	r4,148(sp)
  113574:	24e3c83a 	sub	r17,r4,r19
  113578:	04403d0e 	bge	zero,r17,113670 <___vfiprintf_internal_r+0xe24>
  11357c:	04000404 	movi	r16,16
  113580:	8441a90e 	bge	r16,r17,113c28 <___vfiprintf_internal_r+0x13dc>
  113584:	00c004b4 	movhi	r3,18
  113588:	18cf8a84 	addi	r3,r3,15914
  11358c:	d9001b17 	ldw	r4,108(sp)
  113590:	d8c02315 	stw	r3,140(sp)
  113594:	050001c4 	movi	r20,7
  113598:	dd402117 	ldw	r21,132(sp)
  11359c:	ddc02017 	ldw	r23,128(sp)
  1135a0:	00000506 	br	1135b8 <___vfiprintf_internal_r+0xd6c>
  1135a4:	21400084 	addi	r5,r4,2
  1135a8:	42000204 	addi	r8,r8,8
  1135ac:	1809883a 	mov	r4,r3
  1135b0:	8c7ffc04 	addi	r17,r17,-16
  1135b4:	84400f0e 	bge	r16,r17,1135f4 <___vfiprintf_internal_r+0xda8>
  1135b8:	014004b4 	movhi	r5,18
  1135bc:	10800404 	addi	r2,r2,16
  1135c0:	20c00044 	addi	r3,r4,1
  1135c4:	294f8a84 	addi	r5,r5,15914
  1135c8:	41400015 	stw	r5,0(r8)
  1135cc:	44000115 	stw	r16,4(r8)
  1135d0:	d8801c15 	stw	r2,112(sp)
  1135d4:	d8c01b15 	stw	r3,108(sp)
  1135d8:	a0fff20e 	bge	r20,r3,1135a4 <__alt_data_end+0xfffd35a4>
  1135dc:	1000141e 	bne	r2,zero,113630 <___vfiprintf_internal_r+0xde4>
  1135e0:	8c7ffc04 	addi	r17,r17,-16
  1135e4:	01400044 	movi	r5,1
  1135e8:	0009883a 	mov	r4,zero
  1135ec:	d811883a 	mov	r8,sp
  1135f0:	847ff116 	blt	r16,r17,1135b8 <__alt_data_end+0xfffd35b8>
  1135f4:	d8c02317 	ldw	r3,140(sp)
  1135f8:	1445883a 	add	r2,r2,r17
  1135fc:	44400115 	stw	r17,4(r8)
  113600:	40c00015 	stw	r3,0(r8)
  113604:	d8801c15 	stw	r2,112(sp)
  113608:	d9401b15 	stw	r5,108(sp)
  11360c:	00c001c4 	movi	r3,7
  113610:	1940170e 	bge	r3,r5,113670 <___vfiprintf_internal_r+0xe24>
  113614:	1000101e 	bne	r2,zero,113658 <___vfiprintf_internal_r+0xe0c>
  113618:	d8802517 	ldw	r2,148(sp)
  11361c:	14c11616 	blt	r2,r19,113a78 <___vfiprintf_internal_r+0x122c>
  113620:	d9002417 	ldw	r4,144(sp)
  113624:	2089883a 	add	r4,r4,r2
  113628:	d9002415 	stw	r4,144(sp)
  11362c:	003e1806 	br	112e90 <__alt_data_end+0xfffd2e90>
  113630:	d9801a04 	addi	r6,sp,104
  113634:	b80b883a 	mov	r5,r23
  113638:	a809883a 	mov	r4,r21
  11363c:	01127380 	call	112738 <__sprint_r.part.0>
  113640:	103fba1e 	bne	r2,zero,11352c <__alt_data_end+0xfffd352c>
  113644:	d9001b17 	ldw	r4,108(sp)
  113648:	d8801c17 	ldw	r2,112(sp)
  11364c:	d811883a 	mov	r8,sp
  113650:	21400044 	addi	r5,r4,1
  113654:	003fd606 	br	1135b0 <__alt_data_end+0xfffd35b0>
  113658:	d9402017 	ldw	r5,128(sp)
  11365c:	d9002117 	ldw	r4,132(sp)
  113660:	d9801a04 	addi	r6,sp,104
  113664:	01127380 	call	112738 <__sprint_r.part.0>
  113668:	103fb01e 	bne	r2,zero,11352c <__alt_data_end+0xfffd352c>
  11366c:	d8801c17 	ldw	r2,112(sp)
  113670:	d8c02517 	ldw	r3,148(sp)
  113674:	1cc0010e 	bge	r3,r19,11367c <___vfiprintf_internal_r+0xe30>
  113678:	9807883a 	mov	r3,r19
  11367c:	d9002417 	ldw	r4,144(sp)
  113680:	20c9883a 	add	r4,r4,r3
  113684:	d9002415 	stw	r4,144(sp)
  113688:	103e0126 	beq	r2,zero,112e90 <__alt_data_end+0xfffd2e90>
  11368c:	d9402017 	ldw	r5,128(sp)
  113690:	d9002117 	ldw	r4,132(sp)
  113694:	d9801a04 	addi	r6,sp,104
  113698:	01127380 	call	112738 <__sprint_r.part.0>
  11369c:	103dfc26 	beq	r2,zero,112e90 <__alt_data_end+0xfffd2e90>
  1136a0:	003fa206 	br	11352c <__alt_data_end+0xfffd352c>
  1136a4:	d9402017 	ldw	r5,128(sp)
  1136a8:	d9002117 	ldw	r4,132(sp)
  1136ac:	d9801a04 	addi	r6,sp,104
  1136b0:	d9c02b15 	stw	r7,172(sp)
  1136b4:	01127380 	call	112738 <__sprint_r.part.0>
  1136b8:	d9c02b17 	ldw	r7,172(sp)
  1136bc:	103f9b1e 	bne	r2,zero,11352c <__alt_data_end+0xfffd352c>
  1136c0:	d9001b17 	ldw	r4,108(sp)
  1136c4:	d8801c17 	ldw	r2,112(sp)
  1136c8:	d811883a 	mov	r8,sp
  1136cc:	21800044 	addi	r6,r4,1
  1136d0:	003dbf06 	br	112dd0 <__alt_data_end+0xfffd2dd0>
  1136d4:	1000d81e 	bne	r2,zero,113a38 <___vfiprintf_internal_r+0x11ec>
  1136d8:	d9001d87 	ldb	r4,118(sp)
  1136dc:	20000a26 	beq	r4,zero,113708 <___vfiprintf_internal_r+0xebc>
  1136e0:	00800044 	movi	r2,1
  1136e4:	d9001d84 	addi	r4,sp,118
  1136e8:	100b883a 	mov	r5,r2
  1136ec:	d9000015 	stw	r4,0(sp)
  1136f0:	d8800115 	stw	r2,4(sp)
  1136f4:	d811883a 	mov	r8,sp
  1136f8:	2809883a 	mov	r4,r5
  1136fc:	42000204 	addi	r8,r8,8
  113700:	29400044 	addi	r5,r5,1
  113704:	003d9506 	br	112d5c <__alt_data_end+0xfffd2d5c>
  113708:	3800fd26 	beq	r7,zero,113b00 <___vfiprintf_internal_r+0x12b4>
  11370c:	00800084 	movi	r2,2
  113710:	d9001d04 	addi	r4,sp,116
  113714:	d9000015 	stw	r4,0(sp)
  113718:	d8800115 	stw	r2,4(sp)
  11371c:	01400044 	movi	r5,1
  113720:	d811883a 	mov	r8,sp
  113724:	2809883a 	mov	r4,r5
  113728:	42000204 	addi	r8,r8,8
  11372c:	29400044 	addi	r5,r5,1
  113730:	003f4606 	br	11344c <__alt_data_end+0xfffd344c>
  113734:	d8802517 	ldw	r2,148(sp)
  113738:	14c0010e 	bge	r2,r19,113740 <___vfiprintf_internal_r+0xef4>
  11373c:	9805883a 	mov	r2,r19
  113740:	d9402417 	ldw	r5,144(sp)
  113744:	288b883a 	add	r5,r5,r2
  113748:	d9402415 	stw	r5,144(sp)
  11374c:	003dd006 	br	112e90 <__alt_data_end+0xfffd2e90>
  113750:	d8001d85 	stb	zero,118(sp)
  113754:	80005d16 	blt	r16,zero,1138cc <___vfiprintf_internal_r+0x1080>
  113758:	00ffdfc4 	movi	r3,-129
  11375c:	9d04b03a 	or	r2,r19,r20
  113760:	88e2703a 	and	r17,r17,r3
  113764:	103d3726 	beq	r2,zero,112c44 <__alt_data_end+0xfffd2c44>
  113768:	002b883a 	mov	r21,zero
  11376c:	d9002617 	ldw	r4,152(sp)
  113770:	ddc01a04 	addi	r23,sp,104
  113774:	988003cc 	andi	r2,r19,15
  113778:	a006973a 	slli	r3,r20,28
  11377c:	2085883a 	add	r2,r4,r2
  113780:	9826d13a 	srli	r19,r19,4
  113784:	10800003 	ldbu	r2,0(r2)
  113788:	a028d13a 	srli	r20,r20,4
  11378c:	bdffffc4 	addi	r23,r23,-1
  113790:	1ce6b03a 	or	r19,r3,r19
  113794:	b8800005 	stb	r2,0(r23)
  113798:	9d04b03a 	or	r2,r19,r20
  11379c:	103ff51e 	bne	r2,zero,113774 <__alt_data_end+0xfffd3774>
  1137a0:	d8801e17 	ldw	r2,120(sp)
  1137a4:	15e9c83a 	sub	r20,r2,r23
  1137a8:	003d2b06 	br	112c58 <__alt_data_end+0xfffd2c58>
  1137ac:	d9402017 	ldw	r5,128(sp)
  1137b0:	d9002117 	ldw	r4,132(sp)
  1137b4:	d9801a04 	addi	r6,sp,104
  1137b8:	01127380 	call	112738 <__sprint_r.part.0>
  1137bc:	103f5b1e 	bne	r2,zero,11352c <__alt_data_end+0xfffd352c>
  1137c0:	d8801c17 	ldw	r2,112(sp)
  1137c4:	d811883a 	mov	r8,sp
  1137c8:	003f6706 	br	113568 <__alt_data_end+0xfffd3568>
  1137cc:	d9402017 	ldw	r5,128(sp)
  1137d0:	d9002117 	ldw	r4,132(sp)
  1137d4:	d9801a04 	addi	r6,sp,104
  1137d8:	01127380 	call	112738 <__sprint_r.part.0>
  1137dc:	103f531e 	bne	r2,zero,11352c <__alt_data_end+0xfffd352c>
  1137e0:	d811883a 	mov	r8,sp
  1137e4:	003cd906 	br	112b4c <__alt_data_end+0xfffd2b4c>
  1137e8:	10803fcc 	andi	r2,r2,255
  1137ec:	1080201c 	xori	r2,r2,128
  1137f0:	10bfe004 	addi	r2,r2,-128
  1137f4:	00c00c04 	movi	r3,48
  1137f8:	10ffe926 	beq	r2,r3,1137a0 <__alt_data_end+0xfffd37a0>
  1137fc:	b8ffffc5 	stb	r3,-1(r23)
  113800:	d8c01e17 	ldw	r3,120(sp)
  113804:	b8bfffc4 	addi	r2,r23,-1
  113808:	102f883a 	mov	r23,r2
  11380c:	18a9c83a 	sub	r20,r3,r2
  113810:	003d1106 	br	112c58 <__alt_data_end+0xfffd2c58>
  113814:	d9402017 	ldw	r5,128(sp)
  113818:	d9002117 	ldw	r4,132(sp)
  11381c:	d9801a04 	addi	r6,sp,104
  113820:	d8c02a15 	stw	r3,168(sp)
  113824:	d9c02b15 	stw	r7,172(sp)
  113828:	01127380 	call	112738 <__sprint_r.part.0>
  11382c:	d8c02a17 	ldw	r3,168(sp)
  113830:	d9c02b17 	ldw	r7,172(sp)
  113834:	103f3d1e 	bne	r2,zero,11352c <__alt_data_end+0xfffd352c>
  113838:	d9001b17 	ldw	r4,108(sp)
  11383c:	d8801c17 	ldw	r2,112(sp)
  113840:	d811883a 	mov	r8,sp
  113844:	21400044 	addi	r5,r4,1
  113848:	003d4406 	br	112d5c <__alt_data_end+0xfffd2d5c>
  11384c:	d9402017 	ldw	r5,128(sp)
  113850:	d9002117 	ldw	r4,132(sp)
  113854:	d9801a04 	addi	r6,sp,104
  113858:	d8c02a15 	stw	r3,168(sp)
  11385c:	01127380 	call	112738 <__sprint_r.part.0>
  113860:	d8c02a17 	ldw	r3,168(sp)
  113864:	103f311e 	bne	r2,zero,11352c <__alt_data_end+0xfffd352c>
  113868:	d9001b17 	ldw	r4,108(sp)
  11386c:	d8801c17 	ldw	r2,112(sp)
  113870:	d811883a 	mov	r8,sp
  113874:	21400044 	addi	r5,r4,1
  113878:	003ef406 	br	11344c <__alt_data_end+0xfffd344c>
  11387c:	1000bd1e 	bne	r2,zero,113b74 <___vfiprintf_internal_r+0x1328>
  113880:	01400044 	movi	r5,1
  113884:	0009883a 	mov	r4,zero
  113888:	d811883a 	mov	r8,sp
  11388c:	003ef106 	br	113454 <__alt_data_end+0xfffd3454>
  113890:	d9402017 	ldw	r5,128(sp)
  113894:	d9002117 	ldw	r4,132(sp)
  113898:	d9801a04 	addi	r6,sp,104
  11389c:	01127380 	call	112738 <__sprint_r.part.0>
  1138a0:	103f221e 	bne	r2,zero,11352c <__alt_data_end+0xfffd352c>
  1138a4:	d9401b17 	ldw	r5,108(sp)
  1138a8:	d8801c17 	ldw	r2,112(sp)
  1138ac:	d811883a 	mov	r8,sp
  1138b0:	29400044 	addi	r5,r5,1
  1138b4:	003d6206 	br	112e40 <__alt_data_end+0xfffd2e40>
  1138b8:	014004b4 	movhi	r5,18
  1138bc:	294e4b04 	addi	r5,r5,14636
  1138c0:	d9402615 	stw	r5,152(sp)
  1138c4:	d8c02215 	stw	r3,136(sp)
  1138c8:	1023883a 	mov	r17,r2
  1138cc:	9d04b03a 	or	r2,r19,r20
  1138d0:	103fa51e 	bne	r2,zero,113768 <__alt_data_end+0xfffd3768>
  1138d4:	002b883a 	mov	r21,zero
  1138d8:	00800084 	movi	r2,2
  1138dc:	003e4a06 	br	113208 <__alt_data_end+0xfffd3208>
  1138e0:	014004b4 	movhi	r5,18
  1138e4:	294e4b04 	addi	r5,r5,14636
  1138e8:	002b883a 	mov	r21,zero
  1138ec:	d9402615 	stw	r5,152(sp)
  1138f0:	003f9e06 	br	11376c <__alt_data_end+0xfffd376c>
  1138f4:	d9402217 	ldw	r5,136(sp)
  1138f8:	d8001d85 	stb	zero,118(sp)
  1138fc:	0029883a 	mov	r20,zero
  113900:	28800104 	addi	r2,r5,4
  113904:	2cc00017 	ldw	r19,0(r5)
  113908:	803e3a16 	blt	r16,zero,1131f4 <__alt_data_end+0xfffd31f4>
  11390c:	00ffdfc4 	movi	r3,-129
  113910:	d8802215 	stw	r2,136(sp)
  113914:	88e2703a 	and	r17,r17,r3
  113918:	002b883a 	mov	r21,zero
  11391c:	983e9b26 	beq	r19,zero,11338c <__alt_data_end+0xfffd338c>
  113920:	00800244 	movi	r2,9
  113924:	14fdc936 	bltu	r2,r19,11304c <__alt_data_end+0xfffd304c>
  113928:	003e9a06 	br	113394 <__alt_data_end+0xfffd3394>
  11392c:	00800c04 	movi	r2,48
  113930:	d8c01d45 	stb	r3,117(sp)
  113934:	d8801d05 	stb	r2,116(sp)
  113938:	d8001d85 	stb	zero,118(sp)
  11393c:	88c00094 	ori	r3,r17,2
  113940:	80009c16 	blt	r16,zero,113bb4 <___vfiprintf_internal_r+0x1368>
  113944:	00bfdfc4 	movi	r2,-129
  113948:	88a2703a 	and	r17,r17,r2
  11394c:	8c400094 	ori	r17,r17,2
  113950:	002b883a 	mov	r21,zero
  113954:	003f8506 	br	11376c <__alt_data_end+0xfffd376c>
  113958:	b029883a 	mov	r20,r22
  11395c:	003c0b06 	br	11298c <__alt_data_end+0xfffd298c>
  113960:	04e7c83a 	sub	r19,zero,r19
  113964:	05400b44 	movi	r21,45
  113968:	9804c03a 	cmpne	r2,r19,zero
  11396c:	0529c83a 	sub	r20,zero,r20
  113970:	dd401d85 	stb	r21,118(sp)
  113974:	a0a9c83a 	sub	r20,r20,r2
  113978:	80009716 	blt	r16,zero,113bd8 <___vfiprintf_internal_r+0x138c>
  11397c:	00bfdfc4 	movi	r2,-129
  113980:	88a2703a 	and	r17,r17,r2
  113984:	003db006 	br	113048 <__alt_data_end+0xfffd3048>
  113988:	b0c00007 	ldb	r3,0(r22)
  11398c:	003c0c06 	br	1129c0 <__alt_data_end+0xfffd29c0>
  113990:	8880100c 	andi	r2,r17,64
  113994:	d8001d85 	stb	zero,118(sp)
  113998:	1000461e 	bne	r2,zero,113ab4 <___vfiprintf_internal_r+0x1268>
  11399c:	d9002217 	ldw	r4,136(sp)
  1139a0:	0029883a 	mov	r20,zero
  1139a4:	20800104 	addi	r2,r4,4
  1139a8:	24c00017 	ldw	r19,0(r4)
  1139ac:	803df80e 	bge	r16,zero,113190 <__alt_data_end+0xfffd3190>
  1139b0:	9d06b03a 	or	r3,r19,r20
  1139b4:	d8802215 	stw	r2,136(sp)
  1139b8:	183d5e1e 	bne	r3,zero,112f34 <__alt_data_end+0xfffd2f34>
  1139bc:	002b883a 	mov	r21,zero
  1139c0:	0005883a 	mov	r2,zero
  1139c4:	003e1006 	br	113208 <__alt_data_end+0xfffd3208>
  1139c8:	8880040c 	andi	r2,r17,16
  1139cc:	1000321e 	bne	r2,zero,113a98 <___vfiprintf_internal_r+0x124c>
  1139d0:	8c40100c 	andi	r17,r17,64
  1139d4:	88008d26 	beq	r17,zero,113c0c <___vfiprintf_internal_r+0x13c0>
  1139d8:	d9402217 	ldw	r5,136(sp)
  1139dc:	d8c02417 	ldw	r3,144(sp)
  1139e0:	28800017 	ldw	r2,0(r5)
  1139e4:	29400104 	addi	r5,r5,4
  1139e8:	d9402215 	stw	r5,136(sp)
  1139ec:	10c0000d 	sth	r3,0(r2)
  1139f0:	003bca06 	br	11291c <__alt_data_end+0xfffd291c>
  1139f4:	8880100c 	andi	r2,r17,64
  1139f8:	10003a26 	beq	r2,zero,113ae4 <___vfiprintf_internal_r+0x1298>
  1139fc:	d8802217 	ldw	r2,136(sp)
  113a00:	14c0000f 	ldh	r19,0(r2)
  113a04:	10800104 	addi	r2,r2,4
  113a08:	d8802215 	stw	r2,136(sp)
  113a0c:	9829d7fa 	srai	r20,r19,31
  113a10:	a005883a 	mov	r2,r20
  113a14:	003d8506 	br	11302c <__alt_data_end+0xfffd302c>
  113a18:	8880100c 	andi	r2,r17,64
  113a1c:	10002b26 	beq	r2,zero,113acc <___vfiprintf_internal_r+0x1280>
  113a20:	d8802217 	ldw	r2,136(sp)
  113a24:	0029883a 	mov	r20,zero
  113a28:	14c0000b 	ldhu	r19,0(r2)
  113a2c:	10800104 	addi	r2,r2,4
  113a30:	d8802215 	stw	r2,136(sp)
  113a34:	003d5d06 	br	112fac <__alt_data_end+0xfffd2fac>
  113a38:	d9402017 	ldw	r5,128(sp)
  113a3c:	d9002117 	ldw	r4,132(sp)
  113a40:	d9801a04 	addi	r6,sp,104
  113a44:	d8c02a15 	stw	r3,168(sp)
  113a48:	d9c02b15 	stw	r7,172(sp)
  113a4c:	01127380 	call	112738 <__sprint_r.part.0>
  113a50:	d8c02a17 	ldw	r3,168(sp)
  113a54:	d9c02b17 	ldw	r7,172(sp)
  113a58:	103eb41e 	bne	r2,zero,11352c <__alt_data_end+0xfffd352c>
  113a5c:	d9001b17 	ldw	r4,108(sp)
  113a60:	d8801c17 	ldw	r2,112(sp)
  113a64:	d811883a 	mov	r8,sp
  113a68:	21400044 	addi	r5,r4,1
  113a6c:	003e6706 	br	11340c <__alt_data_end+0xfffd340c>
  113a70:	00bfffc4 	movi	r2,-1
  113a74:	003c4a06 	br	112ba0 <__alt_data_end+0xfffd2ba0>
  113a78:	9805883a 	mov	r2,r19
  113a7c:	003ee806 	br	113620 <__alt_data_end+0xfffd3620>
  113a80:	d8c02217 	ldw	r3,136(sp)
  113a84:	0029883a 	mov	r20,zero
  113a88:	18800104 	addi	r2,r3,4
  113a8c:	1cc0000b 	ldhu	r19,0(r3)
  113a90:	803f9e0e 	bge	r16,zero,11390c <__alt_data_end+0xfffd390c>
  113a94:	003dd706 	br	1131f4 <__alt_data_end+0xfffd31f4>
  113a98:	d8c02217 	ldw	r3,136(sp)
  113a9c:	d9002417 	ldw	r4,144(sp)
  113aa0:	18800017 	ldw	r2,0(r3)
  113aa4:	18c00104 	addi	r3,r3,4
  113aa8:	d8c02215 	stw	r3,136(sp)
  113aac:	11000015 	stw	r4,0(r2)
  113ab0:	003b9a06 	br	11291c <__alt_data_end+0xfffd291c>
  113ab4:	d8c02217 	ldw	r3,136(sp)
  113ab8:	0029883a 	mov	r20,zero
  113abc:	18800104 	addi	r2,r3,4
  113ac0:	1cc0000b 	ldhu	r19,0(r3)
  113ac4:	803db20e 	bge	r16,zero,113190 <__alt_data_end+0xfffd3190>
  113ac8:	003fb906 	br	1139b0 <__alt_data_end+0xfffd39b0>
  113acc:	d9002217 	ldw	r4,136(sp)
  113ad0:	0029883a 	mov	r20,zero
  113ad4:	24c00017 	ldw	r19,0(r4)
  113ad8:	21000104 	addi	r4,r4,4
  113adc:	d9002215 	stw	r4,136(sp)
  113ae0:	003d3206 	br	112fac <__alt_data_end+0xfffd2fac>
  113ae4:	d8c02217 	ldw	r3,136(sp)
  113ae8:	1cc00017 	ldw	r19,0(r3)
  113aec:	18c00104 	addi	r3,r3,4
  113af0:	d8c02215 	stw	r3,136(sp)
  113af4:	9829d7fa 	srai	r20,r19,31
  113af8:	a005883a 	mov	r2,r20
  113afc:	003d4b06 	br	11302c <__alt_data_end+0xfffd302c>
  113b00:	0009883a 	mov	r4,zero
  113b04:	01400044 	movi	r5,1
  113b08:	d811883a 	mov	r8,sp
  113b0c:	003e4f06 	br	11344c <__alt_data_end+0xfffd344c>
  113b10:	d8c02215 	stw	r3,136(sp)
  113b14:	002b883a 	mov	r21,zero
  113b18:	003db806 	br	1131fc <__alt_data_end+0xfffd31fc>
  113b1c:	d811883a 	mov	r8,sp
  113b20:	003e9606 	br	11357c <__alt_data_end+0xfffd357c>
  113b24:	010004b4 	movhi	r4,18
  113b28:	210f8684 	addi	r4,r4,15898
  113b2c:	d9002315 	stw	r4,140(sp)
  113b30:	003e6306 	br	1134c0 <__alt_data_end+0xfffd34c0>
  113b34:	b0c00043 	ldbu	r3,1(r22)
  113b38:	8c400814 	ori	r17,r17,32
  113b3c:	b5800044 	addi	r22,r22,1
  113b40:	18c03fcc 	andi	r3,r3,255
  113b44:	18c0201c 	xori	r3,r3,128
  113b48:	18ffe004 	addi	r3,r3,-128
  113b4c:	003b9c06 	br	1129c0 <__alt_data_end+0xfffd29c0>
  113b50:	b809883a 	mov	r4,r23
  113b54:	da002a15 	stw	r8,168(sp)
  113b58:	01031f00 	call	1031f0 <strlen>
  113b5c:	1029883a 	mov	r20,r2
  113b60:	dd401d83 	ldbu	r21,118(sp)
  113b64:	df002215 	stw	fp,136(sp)
  113b68:	0021883a 	mov	r16,zero
  113b6c:	da002a17 	ldw	r8,168(sp)
  113b70:	003c3906 	br	112c58 <__alt_data_end+0xfffd2c58>
  113b74:	d9402017 	ldw	r5,128(sp)
  113b78:	d9002117 	ldw	r4,132(sp)
  113b7c:	d9801a04 	addi	r6,sp,104
  113b80:	01127380 	call	112738 <__sprint_r.part.0>
  113b84:	103e691e 	bne	r2,zero,11352c <__alt_data_end+0xfffd352c>
  113b88:	d9001b17 	ldw	r4,108(sp)
  113b8c:	d8801c17 	ldw	r2,112(sp)
  113b90:	d811883a 	mov	r8,sp
  113b94:	21400044 	addi	r5,r4,1
  113b98:	003e2e06 	br	113454 <__alt_data_end+0xfffd3454>
  113b9c:	010004b4 	movhi	r4,18
  113ba0:	210f8a84 	addi	r4,r4,15914
  113ba4:	d9002315 	stw	r4,140(sp)
  113ba8:	d9001b17 	ldw	r4,108(sp)
  113bac:	21000044 	addi	r4,r4,1
  113bb0:	003c5e06 	br	112d2c <__alt_data_end+0xfffd2d2c>
  113bb4:	002b883a 	mov	r21,zero
  113bb8:	00800084 	movi	r2,2
  113bbc:	10803fcc 	andi	r2,r2,255
  113bc0:	01000044 	movi	r4,1
  113bc4:	11002b26 	beq	r2,r4,113c74 <___vfiprintf_internal_r+0x1428>
  113bc8:	01000084 	movi	r4,2
  113bcc:	11002b1e 	bne	r2,r4,113c7c <___vfiprintf_internal_r+0x1430>
  113bd0:	1823883a 	mov	r17,r3
  113bd4:	003ee506 	br	11376c <__alt_data_end+0xfffd376c>
  113bd8:	8807883a 	mov	r3,r17
  113bdc:	00800044 	movi	r2,1
  113be0:	003ff606 	br	113bbc <__alt_data_end+0xfffd3bbc>
  113be4:	00800184 	movi	r2,6
  113be8:	1400012e 	bgeu	r2,r16,113bf0 <___vfiprintf_internal_r+0x13a4>
  113bec:	1021883a 	mov	r16,r2
  113bf0:	8029883a 	mov	r20,r16
  113bf4:	8027883a 	mov	r19,r16
  113bf8:	80002216 	blt	r16,zero,113c84 <___vfiprintf_internal_r+0x1438>
  113bfc:	05c004b4 	movhi	r23,18
  113c00:	df002215 	stw	fp,136(sp)
  113c04:	bdce5004 	addi	r23,r23,14656
  113c08:	003cfb06 	br	112ff8 <__alt_data_end+0xfffd2ff8>
  113c0c:	d9002217 	ldw	r4,136(sp)
  113c10:	d9402417 	ldw	r5,144(sp)
  113c14:	20800017 	ldw	r2,0(r4)
  113c18:	21000104 	addi	r4,r4,4
  113c1c:	d9002215 	stw	r4,136(sp)
  113c20:	11400015 	stw	r5,0(r2)
  113c24:	003b3d06 	br	11291c <__alt_data_end+0xfffd291c>
  113c28:	014004b4 	movhi	r5,18
  113c2c:	294f8a84 	addi	r5,r5,15914
  113c30:	d9402315 	stw	r5,140(sp)
  113c34:	d9401b17 	ldw	r5,108(sp)
  113c38:	29400044 	addi	r5,r5,1
  113c3c:	003e6d06 	br	1135f4 <__alt_data_end+0xfffd35f4>
  113c40:	8029883a 	mov	r20,r16
  113c44:	dd401d83 	ldbu	r21,118(sp)
  113c48:	df002215 	stw	fp,136(sp)
  113c4c:	0021883a 	mov	r16,zero
  113c50:	003c0106 	br	112c58 <__alt_data_end+0xfffd2c58>
  113c54:	00c004b4 	movhi	r3,18
  113c58:	18cf8684 	addi	r3,r3,15898
  113c5c:	d8c02315 	stw	r3,140(sp)
  113c60:	280d883a 	mov	r6,r5
  113c64:	003c6906 	br	112e0c <__alt_data_end+0xfffd2e0c>
  113c68:	802d883a 	mov	r22,r16
  113c6c:	0021883a 	mov	r16,zero
  113c70:	003b5406 	br	1129c4 <__alt_data_end+0xfffd29c4>
  113c74:	1823883a 	mov	r17,r3
  113c78:	003cf306 	br	113048 <__alt_data_end+0xfffd3048>
  113c7c:	1823883a 	mov	r17,r3
  113c80:	003cad06 	br	112f38 <__alt_data_end+0xfffd2f38>
  113c84:	0027883a 	mov	r19,zero
  113c88:	003fdc06 	br	113bfc <__alt_data_end+0xfffd3bfc>
  113c8c:	d9402217 	ldw	r5,136(sp)
  113c90:	8005883a 	mov	r2,r16
  113c94:	b0c00043 	ldbu	r3,1(r22)
  113c98:	2c000017 	ldw	r16,0(r5)
  113c9c:	29000104 	addi	r4,r5,4
  113ca0:	d9002215 	stw	r4,136(sp)
  113ca4:	102d883a 	mov	r22,r2
  113ca8:	803fa50e 	bge	r16,zero,113b40 <__alt_data_end+0xfffd3b40>
  113cac:	18c03fcc 	andi	r3,r3,255
  113cb0:	18c0201c 	xori	r3,r3,128
  113cb4:	043fffc4 	movi	r16,-1
  113cb8:	18ffe004 	addi	r3,r3,-128
  113cbc:	003b4006 	br	1129c0 <__alt_data_end+0xfffd29c0>
  113cc0:	d9402303 	ldbu	r5,140(sp)
  113cc4:	d9401d85 	stb	r5,118(sp)
  113cc8:	003cae06 	br	112f84 <__alt_data_end+0xfffd2f84>
  113ccc:	d8c02303 	ldbu	r3,140(sp)
  113cd0:	d8c01d85 	stb	r3,118(sp)
  113cd4:	003d1406 	br	113128 <__alt_data_end+0xfffd3128>
  113cd8:	d8c02303 	ldbu	r3,140(sp)
  113cdc:	d8c01d85 	stb	r3,118(sp)
  113ce0:	003cca06 	br	11300c <__alt_data_end+0xfffd300c>
  113ce4:	8880004c 	andi	r2,r17,1
  113ce8:	002b883a 	mov	r21,zero
  113cec:	10000526 	beq	r2,zero,113d04 <___vfiprintf_internal_r+0x14b8>
  113cf0:	00800c04 	movi	r2,48
  113cf4:	d88019c5 	stb	r2,103(sp)
  113cf8:	dd002817 	ldw	r20,160(sp)
  113cfc:	ddc019c4 	addi	r23,sp,103
  113d00:	003bd506 	br	112c58 <__alt_data_end+0xfffd2c58>
  113d04:	0029883a 	mov	r20,zero
  113d08:	ddc01a04 	addi	r23,sp,104
  113d0c:	003bd206 	br	112c58 <__alt_data_end+0xfffd2c58>
  113d10:	d9002303 	ldbu	r4,140(sp)
  113d14:	d9001d85 	stb	r4,118(sp)
  113d18:	003da606 	br	1133b4 <__alt_data_end+0xfffd33b4>
  113d1c:	d8c02303 	ldbu	r3,140(sp)
  113d20:	d8c01d85 	stb	r3,118(sp)
  113d24:	003c7606 	br	112f00 <__alt_data_end+0xfffd2f00>
  113d28:	d8c02303 	ldbu	r3,140(sp)
  113d2c:	d8c01d85 	stb	r3,118(sp)
  113d30:	003c6506 	br	112ec8 <__alt_data_end+0xfffd2ec8>
  113d34:	d9002303 	ldbu	r4,140(sp)
  113d38:	d9001d85 	stb	r4,118(sp)
  113d3c:	003d3d06 	br	113234 <__alt_data_end+0xfffd3234>
  113d40:	d8c02303 	ldbu	r3,140(sp)
  113d44:	d8c01d85 	stb	r3,118(sp)
  113d48:	003d1d06 	br	1131c0 <__alt_data_end+0xfffd31c0>
  113d4c:	d8c02303 	ldbu	r3,140(sp)
  113d50:	d8c01d85 	stb	r3,118(sp)
  113d54:	003d0306 	br	113164 <__alt_data_end+0xfffd3164>

00113d58 <__vfiprintf_internal>:
  113d58:	008004b4 	movhi	r2,18
  113d5c:	10972d04 	addi	r2,r2,23732
  113d60:	300f883a 	mov	r7,r6
  113d64:	280d883a 	mov	r6,r5
  113d68:	200b883a 	mov	r5,r4
  113d6c:	11000017 	ldw	r4,0(r2)
  113d70:	011284c1 	jmpi	11284c <___vfiprintf_internal_r>

00113d74 <__sbprintf>:
  113d74:	2880030b 	ldhu	r2,12(r5)
  113d78:	2ac01917 	ldw	r11,100(r5)
  113d7c:	2a80038b 	ldhu	r10,14(r5)
  113d80:	2a400717 	ldw	r9,28(r5)
  113d84:	2a000917 	ldw	r8,36(r5)
  113d88:	defee204 	addi	sp,sp,-1144
  113d8c:	00c10004 	movi	r3,1024
  113d90:	dc011a15 	stw	r16,1128(sp)
  113d94:	10bfff4c 	andi	r2,r2,65533
  113d98:	2821883a 	mov	r16,r5
  113d9c:	d8cb883a 	add	r5,sp,r3
  113da0:	dc811c15 	stw	r18,1136(sp)
  113da4:	dc411b15 	stw	r17,1132(sp)
  113da8:	dfc11d15 	stw	ra,1140(sp)
  113dac:	2025883a 	mov	r18,r4
  113db0:	d881030d 	sth	r2,1036(sp)
  113db4:	dac11915 	stw	r11,1124(sp)
  113db8:	da81038d 	sth	r10,1038(sp)
  113dbc:	da410715 	stw	r9,1052(sp)
  113dc0:	da010915 	stw	r8,1060(sp)
  113dc4:	dec10015 	stw	sp,1024(sp)
  113dc8:	dec10415 	stw	sp,1040(sp)
  113dcc:	d8c10215 	stw	r3,1032(sp)
  113dd0:	d8c10515 	stw	r3,1044(sp)
  113dd4:	d8010615 	stw	zero,1048(sp)
  113dd8:	011284c0 	call	11284c <___vfiprintf_internal_r>
  113ddc:	1023883a 	mov	r17,r2
  113de0:	10000416 	blt	r2,zero,113df4 <__sbprintf+0x80>
  113de4:	d9410004 	addi	r5,sp,1024
  113de8:	9009883a 	mov	r4,r18
  113dec:	010b1000 	call	10b100 <_fflush_r>
  113df0:	10000d1e 	bne	r2,zero,113e28 <__sbprintf+0xb4>
  113df4:	d881030b 	ldhu	r2,1036(sp)
  113df8:	1080100c 	andi	r2,r2,64
  113dfc:	10000326 	beq	r2,zero,113e0c <__sbprintf+0x98>
  113e00:	8080030b 	ldhu	r2,12(r16)
  113e04:	10801014 	ori	r2,r2,64
  113e08:	8080030d 	sth	r2,12(r16)
  113e0c:	8805883a 	mov	r2,r17
  113e10:	dfc11d17 	ldw	ra,1140(sp)
  113e14:	dc811c17 	ldw	r18,1136(sp)
  113e18:	dc411b17 	ldw	r17,1132(sp)
  113e1c:	dc011a17 	ldw	r16,1128(sp)
  113e20:	dec11e04 	addi	sp,sp,1144
  113e24:	f800283a 	ret
  113e28:	047fffc4 	movi	r17,-1
  113e2c:	003ff106 	br	113df4 <__alt_data_end+0xfffd3df4>

00113e30 <_calloc_r>:
  113e30:	defffe04 	addi	sp,sp,-8
  113e34:	2805883a 	mov	r2,r5
  113e38:	dc000015 	stw	r16,0(sp)
  113e3c:	300b883a 	mov	r5,r6
  113e40:	2021883a 	mov	r16,r4
  113e44:	1009883a 	mov	r4,r2
  113e48:	dfc00115 	stw	ra,4(sp)
  113e4c:	01160740 	call	116074 <__mulsi3>
  113e50:	100b883a 	mov	r5,r2
  113e54:	8009883a 	mov	r4,r16
  113e58:	0101e280 	call	101e28 <_malloc_r>
  113e5c:	10002926 	beq	r2,zero,113f04 <_calloc_r+0xd4>
  113e60:	11bfff17 	ldw	r6,-4(r2)
  113e64:	1021883a 	mov	r16,r2
  113e68:	00bfff04 	movi	r2,-4
  113e6c:	308c703a 	and	r6,r6,r2
  113e70:	00c00904 	movi	r3,36
  113e74:	308d883a 	add	r6,r6,r2
  113e78:	19801636 	bltu	r3,r6,113ed4 <_calloc_r+0xa4>
  113e7c:	008004c4 	movi	r2,19
  113e80:	11800b2e 	bgeu	r2,r6,113eb0 <_calloc_r+0x80>
  113e84:	80000015 	stw	zero,0(r16)
  113e88:	80000115 	stw	zero,4(r16)
  113e8c:	008006c4 	movi	r2,27
  113e90:	11801a2e 	bgeu	r2,r6,113efc <_calloc_r+0xcc>
  113e94:	80000215 	stw	zero,8(r16)
  113e98:	80000315 	stw	zero,12(r16)
  113e9c:	30c0151e 	bne	r6,r3,113ef4 <_calloc_r+0xc4>
  113ea0:	80000415 	stw	zero,16(r16)
  113ea4:	80800604 	addi	r2,r16,24
  113ea8:	80000515 	stw	zero,20(r16)
  113eac:	00000106 	br	113eb4 <_calloc_r+0x84>
  113eb0:	8005883a 	mov	r2,r16
  113eb4:	10000015 	stw	zero,0(r2)
  113eb8:	10000115 	stw	zero,4(r2)
  113ebc:	10000215 	stw	zero,8(r2)
  113ec0:	8005883a 	mov	r2,r16
  113ec4:	dfc00117 	ldw	ra,4(sp)
  113ec8:	dc000017 	ldw	r16,0(sp)
  113ecc:	dec00204 	addi	sp,sp,8
  113ed0:	f800283a 	ret
  113ed4:	000b883a 	mov	r5,zero
  113ed8:	8009883a 	mov	r4,r16
  113edc:	01028600 	call	102860 <memset>
  113ee0:	8005883a 	mov	r2,r16
  113ee4:	dfc00117 	ldw	ra,4(sp)
  113ee8:	dc000017 	ldw	r16,0(sp)
  113eec:	dec00204 	addi	sp,sp,8
  113ef0:	f800283a 	ret
  113ef4:	80800404 	addi	r2,r16,16
  113ef8:	003fee06 	br	113eb4 <__alt_data_end+0xfffd3eb4>
  113efc:	80800204 	addi	r2,r16,8
  113f00:	003fec06 	br	113eb4 <__alt_data_end+0xfffd3eb4>
  113f04:	0005883a 	mov	r2,zero
  113f08:	003fee06 	br	113ec4 <__alt_data_end+0xfffd3ec4>

00113f0c <__fputwc>:
  113f0c:	defff804 	addi	sp,sp,-32
  113f10:	dcc00415 	stw	r19,16(sp)
  113f14:	dc800315 	stw	r18,12(sp)
  113f18:	dc000115 	stw	r16,4(sp)
  113f1c:	dfc00715 	stw	ra,28(sp)
  113f20:	dd400615 	stw	r21,24(sp)
  113f24:	dd000515 	stw	r20,20(sp)
  113f28:	dc400215 	stw	r17,8(sp)
  113f2c:	2027883a 	mov	r19,r4
  113f30:	2825883a 	mov	r18,r5
  113f34:	3021883a 	mov	r16,r6
  113f38:	010bb400 	call	10bb40 <__locale_mb_cur_max>
  113f3c:	00c00044 	movi	r3,1
  113f40:	10c03e26 	beq	r2,r3,11403c <__fputwc+0x130>
  113f44:	81c01704 	addi	r7,r16,92
  113f48:	900d883a 	mov	r6,r18
  113f4c:	d80b883a 	mov	r5,sp
  113f50:	9809883a 	mov	r4,r19
  113f54:	0114f980 	call	114f98 <_wcrtomb_r>
  113f58:	1029883a 	mov	r20,r2
  113f5c:	00bfffc4 	movi	r2,-1
  113f60:	a0802026 	beq	r20,r2,113fe4 <__fputwc+0xd8>
  113f64:	d9400003 	ldbu	r5,0(sp)
  113f68:	a0001c26 	beq	r20,zero,113fdc <__fputwc+0xd0>
  113f6c:	0023883a 	mov	r17,zero
  113f70:	05400284 	movi	r21,10
  113f74:	00000906 	br	113f9c <__fputwc+0x90>
  113f78:	80800017 	ldw	r2,0(r16)
  113f7c:	11400005 	stb	r5,0(r2)
  113f80:	80c00017 	ldw	r3,0(r16)
  113f84:	18c00044 	addi	r3,r3,1
  113f88:	80c00015 	stw	r3,0(r16)
  113f8c:	8c400044 	addi	r17,r17,1
  113f90:	dc45883a 	add	r2,sp,r17
  113f94:	8d00112e 	bgeu	r17,r20,113fdc <__fputwc+0xd0>
  113f98:	11400003 	ldbu	r5,0(r2)
  113f9c:	80c00217 	ldw	r3,8(r16)
  113fa0:	18ffffc4 	addi	r3,r3,-1
  113fa4:	80c00215 	stw	r3,8(r16)
  113fa8:	183ff30e 	bge	r3,zero,113f78 <__alt_data_end+0xfffd3f78>
  113fac:	80800617 	ldw	r2,24(r16)
  113fb0:	18801916 	blt	r3,r2,114018 <__fputwc+0x10c>
  113fb4:	80800017 	ldw	r2,0(r16)
  113fb8:	11400005 	stb	r5,0(r2)
  113fbc:	80800017 	ldw	r2,0(r16)
  113fc0:	10c00003 	ldbu	r3,0(r2)
  113fc4:	10800044 	addi	r2,r2,1
  113fc8:	1d402326 	beq	r3,r21,114058 <__fputwc+0x14c>
  113fcc:	80800015 	stw	r2,0(r16)
  113fd0:	8c400044 	addi	r17,r17,1
  113fd4:	dc45883a 	add	r2,sp,r17
  113fd8:	8d3fef36 	bltu	r17,r20,113f98 <__alt_data_end+0xfffd3f98>
  113fdc:	9005883a 	mov	r2,r18
  113fe0:	00000406 	br	113ff4 <__fputwc+0xe8>
  113fe4:	80c0030b 	ldhu	r3,12(r16)
  113fe8:	a005883a 	mov	r2,r20
  113fec:	18c01014 	ori	r3,r3,64
  113ff0:	80c0030d 	sth	r3,12(r16)
  113ff4:	dfc00717 	ldw	ra,28(sp)
  113ff8:	dd400617 	ldw	r21,24(sp)
  113ffc:	dd000517 	ldw	r20,20(sp)
  114000:	dcc00417 	ldw	r19,16(sp)
  114004:	dc800317 	ldw	r18,12(sp)
  114008:	dc400217 	ldw	r17,8(sp)
  11400c:	dc000117 	ldw	r16,4(sp)
  114010:	dec00804 	addi	sp,sp,32
  114014:	f800283a 	ret
  114018:	800d883a 	mov	r6,r16
  11401c:	29403fcc 	andi	r5,r5,255
  114020:	9809883a 	mov	r4,r19
  114024:	0114e400 	call	114e40 <__swbuf_r>
  114028:	10bfffe0 	cmpeqi	r2,r2,-1
  11402c:	10803fcc 	andi	r2,r2,255
  114030:	103fd626 	beq	r2,zero,113f8c <__alt_data_end+0xfffd3f8c>
  114034:	00bfffc4 	movi	r2,-1
  114038:	003fee06 	br	113ff4 <__alt_data_end+0xfffd3ff4>
  11403c:	90ffffc4 	addi	r3,r18,-1
  114040:	01003f84 	movi	r4,254
  114044:	20ffbf36 	bltu	r4,r3,113f44 <__alt_data_end+0xfffd3f44>
  114048:	900b883a 	mov	r5,r18
  11404c:	dc800005 	stb	r18,0(sp)
  114050:	1029883a 	mov	r20,r2
  114054:	003fc506 	br	113f6c <__alt_data_end+0xfffd3f6c>
  114058:	800d883a 	mov	r6,r16
  11405c:	a80b883a 	mov	r5,r21
  114060:	9809883a 	mov	r4,r19
  114064:	0114e400 	call	114e40 <__swbuf_r>
  114068:	10bfffe0 	cmpeqi	r2,r2,-1
  11406c:	003fef06 	br	11402c <__alt_data_end+0xfffd402c>

00114070 <_fputwc_r>:
  114070:	3080030b 	ldhu	r2,12(r6)
  114074:	10c8000c 	andi	r3,r2,8192
  114078:	1800051e 	bne	r3,zero,114090 <_fputwc_r+0x20>
  11407c:	30c01917 	ldw	r3,100(r6)
  114080:	10880014 	ori	r2,r2,8192
  114084:	3080030d 	sth	r2,12(r6)
  114088:	18880014 	ori	r2,r3,8192
  11408c:	30801915 	stw	r2,100(r6)
  114090:	0113f0c1 	jmpi	113f0c <__fputwc>

00114094 <fputwc>:
  114094:	008004b4 	movhi	r2,18
  114098:	defffc04 	addi	sp,sp,-16
  11409c:	10972d04 	addi	r2,r2,23732
  1140a0:	dc000115 	stw	r16,4(sp)
  1140a4:	14000017 	ldw	r16,0(r2)
  1140a8:	dc400215 	stw	r17,8(sp)
  1140ac:	dfc00315 	stw	ra,12(sp)
  1140b0:	2023883a 	mov	r17,r4
  1140b4:	80000226 	beq	r16,zero,1140c0 <fputwc+0x2c>
  1140b8:	80800e17 	ldw	r2,56(r16)
  1140bc:	10001026 	beq	r2,zero,114100 <fputwc+0x6c>
  1140c0:	2880030b 	ldhu	r2,12(r5)
  1140c4:	10c8000c 	andi	r3,r2,8192
  1140c8:	1800051e 	bne	r3,zero,1140e0 <fputwc+0x4c>
  1140cc:	28c01917 	ldw	r3,100(r5)
  1140d0:	10880014 	ori	r2,r2,8192
  1140d4:	2880030d 	sth	r2,12(r5)
  1140d8:	18880014 	ori	r2,r3,8192
  1140dc:	28801915 	stw	r2,100(r5)
  1140e0:	280d883a 	mov	r6,r5
  1140e4:	8009883a 	mov	r4,r16
  1140e8:	880b883a 	mov	r5,r17
  1140ec:	dfc00317 	ldw	ra,12(sp)
  1140f0:	dc400217 	ldw	r17,8(sp)
  1140f4:	dc000117 	ldw	r16,4(sp)
  1140f8:	dec00404 	addi	sp,sp,16
  1140fc:	0113f0c1 	jmpi	113f0c <__fputwc>
  114100:	8009883a 	mov	r4,r16
  114104:	d9400015 	stw	r5,0(sp)
  114108:	0101c500 	call	101c50 <__sinit>
  11410c:	d9400017 	ldw	r5,0(sp)
  114110:	003feb06 	br	1140c0 <__alt_data_end+0xfffd40c0>

00114114 <_fstat_r>:
  114114:	defffd04 	addi	sp,sp,-12
  114118:	2805883a 	mov	r2,r5
  11411c:	dc000015 	stw	r16,0(sp)
  114120:	040004b4 	movhi	r16,18
  114124:	dc400115 	stw	r17,4(sp)
  114128:	841e5904 	addi	r16,r16,31076
  11412c:	2023883a 	mov	r17,r4
  114130:	300b883a 	mov	r5,r6
  114134:	1009883a 	mov	r4,r2
  114138:	dfc00215 	stw	ra,8(sp)
  11413c:	80000015 	stw	zero,0(r16)
  114140:	0118e600 	call	118e60 <fstat>
  114144:	00ffffc4 	movi	r3,-1
  114148:	10c00526 	beq	r2,r3,114160 <_fstat_r+0x4c>
  11414c:	dfc00217 	ldw	ra,8(sp)
  114150:	dc400117 	ldw	r17,4(sp)
  114154:	dc000017 	ldw	r16,0(sp)
  114158:	dec00304 	addi	sp,sp,12
  11415c:	f800283a 	ret
  114160:	80c00017 	ldw	r3,0(r16)
  114164:	183ff926 	beq	r3,zero,11414c <__alt_data_end+0xfffd414c>
  114168:	88c00015 	stw	r3,0(r17)
  11416c:	003ff706 	br	11414c <__alt_data_end+0xfffd414c>

00114170 <rshift>:
  114170:	2807d17a 	srai	r3,r5,5
  114174:	20800417 	ldw	r2,16(r4)
  114178:	22000504 	addi	r8,r4,20
  11417c:	1880250e 	bge	r3,r2,114214 <rshift+0xa4>
  114180:	1085883a 	add	r2,r2,r2
  114184:	18c7883a 	add	r3,r3,r3
  114188:	1085883a 	add	r2,r2,r2
  11418c:	18c7883a 	add	r3,r3,r3
  114190:	294007cc 	andi	r5,r5,31
  114194:	4085883a 	add	r2,r8,r2
  114198:	40c7883a 	add	r3,r8,r3
  11419c:	28002026 	beq	r5,zero,114220 <rshift+0xb0>
  1141a0:	19800017 	ldw	r6,0(r3)
  1141a4:	02c00804 	movi	r11,32
  1141a8:	19c00104 	addi	r7,r3,4
  1141ac:	5957c83a 	sub	r11,r11,r5
  1141b0:	314cd83a 	srl	r6,r6,r5
  1141b4:	38802c2e 	bgeu	r7,r2,114268 <rshift+0xf8>
  1141b8:	4015883a 	mov	r10,r8
  1141bc:	3a400017 	ldw	r9,0(r7)
  1141c0:	52800104 	addi	r10,r10,4
  1141c4:	39c00104 	addi	r7,r7,4
  1141c8:	4ad2983a 	sll	r9,r9,r11
  1141cc:	498cb03a 	or	r6,r9,r6
  1141d0:	51bfff15 	stw	r6,-4(r10)
  1141d4:	39bfff17 	ldw	r6,-4(r7)
  1141d8:	314cd83a 	srl	r6,r6,r5
  1141dc:	38bff736 	bltu	r7,r2,1141bc <__alt_data_end+0xfffd41bc>
  1141e0:	10c7c83a 	sub	r3,r2,r3
  1141e4:	18fffec4 	addi	r3,r3,-5
  1141e8:	1806d0ba 	srli	r3,r3,2
  1141ec:	18c00044 	addi	r3,r3,1
  1141f0:	18c7883a 	add	r3,r3,r3
  1141f4:	18c7883a 	add	r3,r3,r3
  1141f8:	40c7883a 	add	r3,r8,r3
  1141fc:	19800015 	stw	r6,0(r3)
  114200:	30000126 	beq	r6,zero,114208 <rshift+0x98>
  114204:	18c00104 	addi	r3,r3,4
  114208:	1a05c83a 	sub	r2,r3,r8
  11420c:	1005d0ba 	srai	r2,r2,2
  114210:	00001206 	br	11425c <rshift+0xec>
  114214:	20000415 	stw	zero,16(r4)
  114218:	20000515 	stw	zero,20(r4)
  11421c:	f800283a 	ret
  114220:	18bffc2e 	bgeu	r3,r2,114214 <__alt_data_end+0xfffd4214>
  114224:	180d883a 	mov	r6,r3
  114228:	400b883a 	mov	r5,r8
  11422c:	31c00017 	ldw	r7,0(r6)
  114230:	29400104 	addi	r5,r5,4
  114234:	31800104 	addi	r6,r6,4
  114238:	29ffff15 	stw	r7,-4(r5)
  11423c:	30bffb36 	bltu	r6,r2,11422c <__alt_data_end+0xfffd422c>
  114240:	00c6303a 	nor	r3,zero,r3
  114244:	1885883a 	add	r2,r3,r2
  114248:	1004d0ba 	srli	r2,r2,2
  11424c:	10800044 	addi	r2,r2,1
  114250:	1085883a 	add	r2,r2,r2
  114254:	1085883a 	add	r2,r2,r2
  114258:	1005d0ba 	srai	r2,r2,2
  11425c:	20800415 	stw	r2,16(r4)
  114260:	103fed26 	beq	r2,zero,114218 <__alt_data_end+0xfffd4218>
  114264:	f800283a 	ret
  114268:	4007883a 	mov	r3,r8
  11426c:	003fe306 	br	1141fc <__alt_data_end+0xfffd41fc>

00114270 <__gethex>:
  114270:	deffea04 	addi	sp,sp,-88
  114274:	d9c00415 	stw	r7,16(sp)
  114278:	dfc01515 	stw	ra,84(sp)
  11427c:	dd001015 	stw	r20,64(sp)
  114280:	dcc00f15 	stw	r19,60(sp)
  114284:	2829883a 	mov	r20,r5
  114288:	dc800e15 	stw	r18,56(sp)
  11428c:	d9000215 	stw	r4,8(sp)
  114290:	d9800115 	stw	r6,4(sp)
  114294:	df001415 	stw	fp,80(sp)
  114298:	ddc01315 	stw	r23,76(sp)
  11429c:	dd801215 	stw	r22,72(sp)
  1142a0:	dd401115 	stw	r21,68(sp)
  1142a4:	dc400d15 	stw	r17,52(sp)
  1142a8:	dc000c15 	stw	r16,48(sp)
  1142ac:	010bb640 	call	10bb64 <_localeconv_r>
  1142b0:	14800017 	ldw	r18,0(r2)
  1142b4:	9009883a 	mov	r4,r18
  1142b8:	01031f00 	call	1031f0 <strlen>
  1142bc:	a1c00017 	ldw	r7,0(r20)
  1142c0:	1027883a 	mov	r19,r2
  1142c4:	9085883a 	add	r2,r18,r2
  1142c8:	10bfffc3 	ldbu	r2,-1(r2)
  1142cc:	38c00083 	ldbu	r3,2(r7)
  1142d0:	d8800305 	stb	r2,12(sp)
  1142d4:	00800c04 	movi	r2,48
  1142d8:	18815a1e 	bne	r3,r2,114844 <__gethex+0x5d4>
  1142dc:	013fff84 	movi	r4,-2
  1142e0:	388000c4 	addi	r2,r7,3
  1142e4:	21c9c83a 	sub	r4,r4,r7
  1142e8:	180b883a 	mov	r5,r3
  1142ec:	20b9883a 	add	fp,r4,r2
  1142f0:	102f883a 	mov	r23,r2
  1142f4:	10800044 	addi	r2,r2,1
  1142f8:	10ffffc3 	ldbu	r3,-1(r2)
  1142fc:	197ffb26 	beq	r3,r5,1142ec <__alt_data_end+0xfffd42ec>
  114300:	058004b4 	movhi	r22,18
  114304:	b58f8e84 	addi	r22,r22,15930
  114308:	b0c7883a 	add	r3,r22,r3
  11430c:	18800003 	ldbu	r2,0(r3)
  114310:	10008726 	beq	r2,zero,114530 <__gethex+0x2c0>
  114314:	b8800003 	ldbu	r2,0(r23)
  114318:	d8000015 	stw	zero,0(sp)
  11431c:	0021883a 	mov	r16,zero
  114320:	b085883a 	add	r2,r22,r2
  114324:	10800003 	ldbu	r2,0(r2)
  114328:	b823883a 	mov	r17,r23
  11432c:	10000526 	beq	r2,zero,114344 <__gethex+0xd4>
  114330:	8c400044 	addi	r17,r17,1
  114334:	88800003 	ldbu	r2,0(r17)
  114338:	b085883a 	add	r2,r22,r2
  11433c:	10800003 	ldbu	r2,0(r2)
  114340:	103ffb1e 	bne	r2,zero,114330 <__alt_data_end+0xfffd4330>
  114344:	980d883a 	mov	r6,r19
  114348:	900b883a 	mov	r5,r18
  11434c:	8809883a 	mov	r4,r17
  114350:	0114d700 	call	114d70 <strncmp>
  114354:	1000031e 	bne	r2,zero,114364 <__gethex+0xf4>
  114358:	80015c26 	beq	r16,zero,1148cc <__gethex+0x65c>
  11435c:	88800003 	ldbu	r2,0(r17)
  114360:	00000206 	br	11436c <__gethex+0xfc>
  114364:	88800003 	ldbu	r2,0(r17)
  114368:	80012926 	beq	r16,zero,114810 <__gethex+0x5a0>
  11436c:	8c21c83a 	sub	r16,r17,r16
  114370:	8421883a 	add	r16,r16,r16
  114374:	8421883a 	add	r16,r16,r16
  114378:	0421c83a 	sub	r16,zero,r16
  11437c:	10803fcc 	andi	r2,r2,255
  114380:	01001404 	movi	r4,80
  114384:	11008826 	beq	r2,r4,1145a8 <__gethex+0x338>
  114388:	01001c04 	movi	r4,112
  11438c:	11008626 	beq	r2,r4,1145a8 <__gethex+0x338>
  114390:	882b883a 	mov	r21,r17
  114394:	d8c00017 	ldw	r3,0(sp)
  114398:	a4400015 	stw	r17,0(r20)
  11439c:	1800711e 	bne	r3,zero,114564 <__gethex+0x2f4>
  1143a0:	adc5c83a 	sub	r2,r21,r23
  1143a4:	10bfffc4 	addi	r2,r2,-1
  1143a8:	00c001c4 	movi	r3,7
  1143ac:	000b883a 	mov	r5,zero
  1143b0:	1880030e 	bge	r3,r2,1143c0 <__gethex+0x150>
  1143b4:	1005d07a 	srai	r2,r2,1
  1143b8:	29400044 	addi	r5,r5,1
  1143bc:	18bffd16 	blt	r3,r2,1143b4 <__alt_data_end+0xfffd43b4>
  1143c0:	d9000217 	ldw	r4,8(sp)
  1143c4:	010c1300 	call	10c130 <_Balloc>
  1143c8:	10c00504 	addi	r3,r2,20
  1143cc:	d8c00015 	stw	r3,0(sp)
  1143d0:	1029883a 	mov	r20,r2
  1143d4:	bd417c2e 	bgeu	r23,r21,1149c8 <__gethex+0x758>
  1143d8:	dc400303 	ldbu	r17,12(sp)
  1143dc:	03000044 	movi	r12,1
  1143e0:	1813883a 	mov	r9,r3
  1143e4:	0039883a 	mov	fp,zero
  1143e8:	0007883a 	mov	r3,zero
  1143ec:	64d9c83a 	sub	r12,r12,r19
  1143f0:	02800804 	movi	r10,32
  1143f4:	a8bfffc3 	ldbu	r2,-1(r21)
  1143f8:	ab7fffc4 	addi	r13,r21,-1
  1143fc:	88803026 	beq	r17,r2,1144c0 <__gethex+0x250>
  114400:	e2804526 	beq	fp,r10,114518 <__gethex+0x2a8>
  114404:	e00b883a 	mov	r5,fp
  114408:	e7000104 	addi	fp,fp,4
  11440c:	a93fffc3 	ldbu	r4,-1(r21)
  114410:	682b883a 	mov	r21,r13
  114414:	b109883a 	add	r4,r22,r4
  114418:	20800003 	ldbu	r2,0(r4)
  11441c:	108003cc 	andi	r2,r2,15
  114420:	1144983a 	sll	r2,r2,r5
  114424:	1886b03a 	or	r3,r3,r2
  114428:	bd7ff236 	bltu	r23,r21,1143f4 <__alt_data_end+0xfffd43f4>
  11442c:	d9000017 	ldw	r4,0(sp)
  114430:	48800104 	addi	r2,r9,4
  114434:	48c00015 	stw	r3,0(r9)
  114438:	1105c83a 	sub	r2,r2,r4
  11443c:	1005d0ba 	srai	r2,r2,2
  114440:	1809883a 	mov	r4,r3
  114444:	a0800415 	stw	r2,16(r20)
  114448:	1022917a 	slli	r17,r2,5
  11444c:	010c44c0 	call	10c44c <__hi0bits>
  114450:	d8c00117 	ldw	r3,4(sp)
  114454:	8885c83a 	sub	r2,r17,r2
  114458:	1c800017 	ldw	r18,0(r3)
  11445c:	9080d016 	blt	r18,r2,1147a0 <__gethex+0x530>
  114460:	1480ed16 	blt	r2,r18,114818 <__gethex+0x5a8>
  114464:	0027883a 	mov	r19,zero
  114468:	d8c00117 	ldw	r3,4(sp)
  11446c:	18800217 	ldw	r2,8(r3)
  114470:	14009416 	blt	r2,r16,1146c4 <__gethex+0x454>
  114474:	d8c00117 	ldw	r3,4(sp)
  114478:	18800117 	ldw	r2,4(r3)
  11447c:	8080b30e 	bge	r16,r2,11474c <__gethex+0x4dc>
  114480:	1421c83a 	sub	r16,r2,r16
  114484:	8480f616 	blt	r16,r18,114860 <__gethex+0x5f0>
  114488:	18c00317 	ldw	r3,12(r3)
  11448c:	01000084 	movi	r4,2
  114490:	19015226 	beq	r3,r4,1149dc <__gethex+0x76c>
  114494:	010000c4 	movi	r4,3
  114498:	19013726 	beq	r3,r4,114978 <__gethex+0x708>
  11449c:	01000044 	movi	r4,1
  1144a0:	19015126 	beq	r3,r4,1149e8 <__gethex+0x778>
  1144a4:	d9000217 	ldw	r4,8(sp)
  1144a8:	a00b883a 	mov	r5,r20
  1144ac:	010c1d80 	call	10c1d8 <_Bfree>
  1144b0:	d8801617 	ldw	r2,88(sp)
  1144b4:	10000015 	stw	zero,0(r2)
  1144b8:	00801404 	movi	r2,80
  1144bc:	00002b06 	br	11456c <__gethex+0x2fc>
  1144c0:	6b1d883a 	add	r14,r13,r12
  1144c4:	75ffce36 	bltu	r14,r23,114400 <__alt_data_end+0xfffd4400>
  1144c8:	7009883a 	mov	r4,r14
  1144cc:	980d883a 	mov	r6,r19
  1144d0:	900b883a 	mov	r5,r18
  1144d4:	d8c00715 	stw	r3,28(sp)
  1144d8:	da400615 	stw	r9,24(sp)
  1144dc:	da800b15 	stw	r10,44(sp)
  1144e0:	db000a15 	stw	r12,40(sp)
  1144e4:	db400815 	stw	r13,32(sp)
  1144e8:	db800915 	stw	r14,36(sp)
  1144ec:	0114d700 	call	114d70 <strncmp>
  1144f0:	d8c00717 	ldw	r3,28(sp)
  1144f4:	da400617 	ldw	r9,24(sp)
  1144f8:	da800b17 	ldw	r10,44(sp)
  1144fc:	db000a17 	ldw	r12,40(sp)
  114500:	db400817 	ldw	r13,32(sp)
  114504:	db800917 	ldw	r14,36(sp)
  114508:	103fbd1e 	bne	r2,zero,114400 <__alt_data_end+0xfffd4400>
  11450c:	702b883a 	mov	r21,r14
  114510:	bd7fb836 	bltu	r23,r21,1143f4 <__alt_data_end+0xfffd43f4>
  114514:	003fc506 	br	11442c <__alt_data_end+0xfffd442c>
  114518:	07000104 	movi	fp,4
  11451c:	48c00015 	stw	r3,0(r9)
  114520:	000b883a 	mov	r5,zero
  114524:	4f13883a 	add	r9,r9,fp
  114528:	0007883a 	mov	r3,zero
  11452c:	003fb706 	br	11440c <__alt_data_end+0xfffd440c>
  114530:	980d883a 	mov	r6,r19
  114534:	900b883a 	mov	r5,r18
  114538:	b809883a 	mov	r4,r23
  11453c:	0114d700 	call	114d70 <strncmp>
  114540:	10006c26 	beq	r2,zero,1146f4 <__gethex+0x484>
  114544:	b8800003 	ldbu	r2,0(r23)
  114548:	b823883a 	mov	r17,r23
  11454c:	10803fcc 	andi	r2,r2,255
  114550:	01001404 	movi	r4,80
  114554:	11001126 	beq	r2,r4,11459c <__gethex+0x32c>
  114558:	01001c04 	movi	r4,112
  11455c:	11000f26 	beq	r2,r4,11459c <__gethex+0x32c>
  114560:	a4400015 	stw	r17,0(r20)
  114564:	e0008c1e 	bne	fp,zero,114798 <__gethex+0x528>
  114568:	00800184 	movi	r2,6
  11456c:	dfc01517 	ldw	ra,84(sp)
  114570:	df001417 	ldw	fp,80(sp)
  114574:	ddc01317 	ldw	r23,76(sp)
  114578:	dd801217 	ldw	r22,72(sp)
  11457c:	dd401117 	ldw	r21,68(sp)
  114580:	dd001017 	ldw	r20,64(sp)
  114584:	dcc00f17 	ldw	r19,60(sp)
  114588:	dc800e17 	ldw	r18,56(sp)
  11458c:	dc400d17 	ldw	r17,52(sp)
  114590:	dc000c17 	ldw	r16,48(sp)
  114594:	dec01604 	addi	sp,sp,88
  114598:	f800283a 	ret
  11459c:	00c00044 	movi	r3,1
  1145a0:	0021883a 	mov	r16,zero
  1145a4:	d8c00015 	stw	r3,0(sp)
  1145a8:	88800043 	ldbu	r2,1(r17)
  1145ac:	01400ac4 	movi	r5,43
  1145b0:	11003fcc 	andi	r4,r2,255
  1145b4:	21407626 	beq	r4,r5,114790 <__gethex+0x520>
  1145b8:	01400b44 	movi	r5,45
  1145bc:	21404826 	beq	r4,r5,1146e0 <__gethex+0x470>
  1145c0:	8ac00044 	addi	r11,r17,1
  1145c4:	d8000515 	stw	zero,20(sp)
  1145c8:	10803fcc 	andi	r2,r2,255
  1145cc:	b085883a 	add	r2,r22,r2
  1145d0:	11000003 	ldbu	r4,0(r2)
  1145d4:	05400604 	movi	r21,24
  1145d8:	20bfffc4 	addi	r2,r4,-1
  1145dc:	10803fcc 	andi	r2,r2,255
  1145e0:	a8bf6b36 	bltu	r21,r2,114390 <__alt_data_end+0xfffd4390>
  1145e4:	58800043 	ldbu	r2,1(r11)
  1145e8:	014004b4 	movhi	r5,18
  1145ec:	294f8e84 	addi	r5,r5,15930
  1145f0:	2885883a 	add	r2,r5,r2
  1145f4:	12800003 	ldbu	r10,0(r2)
  1145f8:	21003fcc 	andi	r4,r4,255
  1145fc:	213ffc04 	addi	r4,r4,-16
  114600:	50bfffc4 	addi	r2,r10,-1
  114604:	10803fcc 	andi	r2,r2,255
  114608:	5ac00044 	addi	r11,r11,1
  11460c:	51803fcc 	andi	r6,r10,255
  114610:	a8801036 	bltu	r21,r2,114654 <__gethex+0x3e4>
  114614:	5ac00044 	addi	r11,r11,1
  114618:	01400284 	movi	r5,10
  11461c:	d9800715 	stw	r6,28(sp)
  114620:	dac00615 	stw	r11,24(sp)
  114624:	01160740 	call	116074 <__mulsi3>
  114628:	dac00617 	ldw	r11,24(sp)
  11462c:	d9800717 	ldw	r6,28(sp)
  114630:	5a800003 	ldbu	r10,0(r11)
  114634:	1185883a 	add	r2,r2,r6
  114638:	113ffc04 	addi	r4,r2,-16
  11463c:	b295883a 	add	r10,r22,r10
  114640:	51400003 	ldbu	r5,0(r10)
  114644:	2abfffc4 	addi	r10,r5,-1
  114648:	52803fcc 	andi	r10,r10,255
  11464c:	29803fcc 	andi	r6,r5,255
  114650:	aabff02e 	bgeu	r21,r10,114614 <__alt_data_end+0xfffd4614>
  114654:	d8c00517 	ldw	r3,20(sp)
  114658:	18000126 	beq	r3,zero,114660 <__gethex+0x3f0>
  11465c:	0109c83a 	sub	r4,zero,r4
  114660:	882b883a 	mov	r21,r17
  114664:	8121883a 	add	r16,r16,r4
  114668:	5823883a 	mov	r17,r11
  11466c:	003f4906 	br	114394 <__alt_data_end+0xfffd4394>
  114670:	a0800217 	ldw	r2,8(r20)
  114674:	a880f20e 	bge	r21,r2,114a40 <__gethex+0x7d0>
  114678:	a807883a 	mov	r3,r21
  11467c:	18800144 	addi	r2,r3,5
  114680:	1085883a 	add	r2,r2,r2
  114684:	18c00044 	addi	r3,r3,1
  114688:	1085883a 	add	r2,r2,r2
  11468c:	a085883a 	add	r2,r20,r2
  114690:	a0c00415 	stw	r3,16(r20)
  114694:	01000044 	movi	r4,1
  114698:	11000015 	stw	r4,0(r2)
  11469c:	00800084 	movi	r2,2
  1146a0:	8880da26 	beq	r17,r2,114a0c <__gethex+0x79c>
  1146a4:	a8c0ae0e 	bge	r21,r3,114960 <__gethex+0x6f0>
  1146a8:	01400044 	movi	r5,1
  1146ac:	a009883a 	mov	r4,r20
  1146b0:	01141700 	call	114170 <rshift>
  1146b4:	d8c00117 	ldw	r3,4(sp)
  1146b8:	84000044 	addi	r16,r16,1
  1146bc:	18800217 	ldw	r2,8(r3)
  1146c0:	1400a90e 	bge	r2,r16,114968 <__gethex+0x6f8>
  1146c4:	d9000217 	ldw	r4,8(sp)
  1146c8:	a00b883a 	mov	r5,r20
  1146cc:	010c1d80 	call	10c1d8 <_Bfree>
  1146d0:	d9001617 	ldw	r4,88(sp)
  1146d4:	008028c4 	movi	r2,163
  1146d8:	20000015 	stw	zero,0(r4)
  1146dc:	003fa306 	br	11456c <__alt_data_end+0xfffd456c>
  1146e0:	00c00044 	movi	r3,1
  1146e4:	d8c00515 	stw	r3,20(sp)
  1146e8:	88800083 	ldbu	r2,2(r17)
  1146ec:	8ac00084 	addi	r11,r17,2
  1146f0:	003fb506 	br	1145c8 <__alt_data_end+0xfffd45c8>
  1146f4:	bce3883a 	add	r17,r23,r19
  1146f8:	89000003 	ldbu	r4,0(r17)
  1146fc:	21403fcc 	andi	r5,r4,255
  114700:	b145883a 	add	r2,r22,r5
  114704:	10800003 	ldbu	r2,0(r2)
  114708:	11803fcc 	andi	r6,r2,255
  11470c:	30005026 	beq	r6,zero,114850 <__gethex+0x5e0>
  114710:	01000c04 	movi	r4,48
  114714:	882f883a 	mov	r23,r17
  114718:	2900061e 	bne	r5,r4,114734 <__gethex+0x4c4>
  11471c:	2809883a 	mov	r4,r5
  114720:	bdc00044 	addi	r23,r23,1
  114724:	b8800003 	ldbu	r2,0(r23)
  114728:	113ffd26 	beq	r2,r4,114720 <__alt_data_end+0xfffd4720>
  11472c:	b085883a 	add	r2,r22,r2
  114730:	10800003 	ldbu	r2,0(r2)
  114734:	10803fcc 	andi	r2,r2,255
  114738:	1007003a 	cmpeq	r3,r2,zero
  11473c:	d8c00015 	stw	r3,0(sp)
  114740:	8821883a 	mov	r16,r17
  114744:	07000044 	movi	fp,1
  114748:	003ef706 	br	114328 <__alt_data_end+0xfffd4328>
  11474c:	04400044 	movi	r17,1
  114750:	98000926 	beq	r19,zero,114778 <__gethex+0x508>
  114754:	d8c00117 	ldw	r3,4(sp)
  114758:	18800317 	ldw	r2,12(r3)
  11475c:	00c00084 	movi	r3,2
  114760:	10c06826 	beq	r2,r3,114904 <__gethex+0x694>
  114764:	00c000c4 	movi	r3,3
  114768:	10c06a26 	beq	r2,r3,114914 <__gethex+0x6a4>
  11476c:	00c00044 	movi	r3,1
  114770:	10c08d26 	beq	r2,r3,1149a8 <__gethex+0x738>
  114774:	8c400414 	ori	r17,r17,16
  114778:	d9001617 	ldw	r4,88(sp)
  11477c:	d8c00417 	ldw	r3,16(sp)
  114780:	8805883a 	mov	r2,r17
  114784:	25000015 	stw	r20,0(r4)
  114788:	1c000015 	stw	r16,0(r3)
  11478c:	003f7706 	br	11456c <__alt_data_end+0xfffd456c>
  114790:	d8000515 	stw	zero,20(sp)
  114794:	003fd406 	br	1146e8 <__alt_data_end+0xfffd46e8>
  114798:	0005883a 	mov	r2,zero
  11479c:	003f7306 	br	11456c <__alt_data_end+0xfffd456c>
  1147a0:	14a3c83a 	sub	r17,r2,r18
  1147a4:	880b883a 	mov	r5,r17
  1147a8:	a009883a 	mov	r4,r20
  1147ac:	010d15c0 	call	10d15c <__any_on>
  1147b0:	10002926 	beq	r2,zero,114858 <__gethex+0x5e8>
  1147b4:	897fffc4 	addi	r5,r17,-1
  1147b8:	2807d17a 	srai	r3,r5,5
  1147bc:	d8800017 	ldw	r2,0(sp)
  1147c0:	290007cc 	andi	r4,r5,31
  1147c4:	18c7883a 	add	r3,r3,r3
  1147c8:	18c7883a 	add	r3,r3,r3
  1147cc:	04c00044 	movi	r19,1
  1147d0:	10c7883a 	add	r3,r2,r3
  1147d4:	9908983a 	sll	r4,r19,r4
  1147d8:	18c00017 	ldw	r3,0(r3)
  1147dc:	20c6703a 	and	r3,r4,r3
  1147e0:	18000626 	beq	r3,zero,1147fc <__gethex+0x58c>
  1147e4:	99407b0e 	bge	r19,r5,1149d4 <__gethex+0x764>
  1147e8:	897fff84 	addi	r5,r17,-2
  1147ec:	a009883a 	mov	r4,r20
  1147f0:	010d15c0 	call	10d15c <__any_on>
  1147f4:	10007726 	beq	r2,zero,1149d4 <__gethex+0x764>
  1147f8:	04c000c4 	movi	r19,3
  1147fc:	880b883a 	mov	r5,r17
  114800:	a009883a 	mov	r4,r20
  114804:	01141700 	call	114170 <rshift>
  114808:	8461883a 	add	r16,r16,r17
  11480c:	003f1606 	br	114468 <__alt_data_end+0xfffd4468>
  114810:	0021883a 	mov	r16,zero
  114814:	003ed906 	br	11437c <__alt_data_end+0xfffd437c>
  114818:	d9000217 	ldw	r4,8(sp)
  11481c:	90a3c83a 	sub	r17,r18,r2
  114820:	a00b883a 	mov	r5,r20
  114824:	880d883a 	mov	r6,r17
  114828:	010c96c0 	call	10c96c <__lshift>
  11482c:	10c00504 	addi	r3,r2,20
  114830:	1029883a 	mov	r20,r2
  114834:	8461c83a 	sub	r16,r16,r17
  114838:	d8c00015 	stw	r3,0(sp)
  11483c:	0027883a 	mov	r19,zero
  114840:	003f0906 	br	114468 <__alt_data_end+0xfffd4468>
  114844:	3dc00084 	addi	r23,r7,2
  114848:	0039883a 	mov	fp,zero
  11484c:	003eac06 	br	114300 <__alt_data_end+0xfffd4300>
  114850:	2005883a 	mov	r2,r4
  114854:	003f3d06 	br	11454c <__alt_data_end+0xfffd454c>
  114858:	0027883a 	mov	r19,zero
  11485c:	003fe706 	br	1147fc <__alt_data_end+0xfffd47fc>
  114860:	847fffc4 	addi	r17,r16,-1
  114864:	9800421e 	bne	r19,zero,114970 <__gethex+0x700>
  114868:	88000426 	beq	r17,zero,11487c <__gethex+0x60c>
  11486c:	880b883a 	mov	r5,r17
  114870:	a009883a 	mov	r4,r20
  114874:	010d15c0 	call	10d15c <__any_on>
  114878:	1027883a 	mov	r19,r2
  11487c:	8805d17a 	srai	r2,r17,5
  114880:	d8c00017 	ldw	r3,0(sp)
  114884:	8c4007cc 	andi	r17,r17,31
  114888:	1085883a 	add	r2,r2,r2
  11488c:	1085883a 	add	r2,r2,r2
  114890:	1885883a 	add	r2,r3,r2
  114894:	00c00044 	movi	r3,1
  114898:	1c62983a 	sll	r17,r3,r17
  11489c:	10800017 	ldw	r2,0(r2)
  1148a0:	8884703a 	and	r2,r17,r2
  1148a4:	10000126 	beq	r2,zero,1148ac <__gethex+0x63c>
  1148a8:	9cc00094 	ori	r19,r19,2
  1148ac:	800b883a 	mov	r5,r16
  1148b0:	a009883a 	mov	r4,r20
  1148b4:	01141700 	call	114170 <rshift>
  1148b8:	d8c00117 	ldw	r3,4(sp)
  1148bc:	9425c83a 	sub	r18,r18,r16
  1148c0:	04400084 	movi	r17,2
  1148c4:	1c000117 	ldw	r16,4(r3)
  1148c8:	003fa106 	br	114750 <__alt_data_end+0xfffd4750>
  1148cc:	8ce1883a 	add	r16,r17,r19
  1148d0:	80800003 	ldbu	r2,0(r16)
  1148d4:	8023883a 	mov	r17,r16
  1148d8:	10c03fcc 	andi	r3,r2,255
  1148dc:	b0c7883a 	add	r3,r22,r3
  1148e0:	18c00003 	ldbu	r3,0(r3)
  1148e4:	183ea026 	beq	r3,zero,114368 <__alt_data_end+0xfffd4368>
  1148e8:	8c400044 	addi	r17,r17,1
  1148ec:	88800003 	ldbu	r2,0(r17)
  1148f0:	11003fcc 	andi	r4,r2,255
  1148f4:	b109883a 	add	r4,r22,r4
  1148f8:	21000003 	ldbu	r4,0(r4)
  1148fc:	203ffa1e 	bne	r4,zero,1148e8 <__alt_data_end+0xfffd48e8>
  114900:	003e9906 	br	114368 <__alt_data_end+0xfffd4368>
  114904:	d9001717 	ldw	r4,92(sp)
  114908:	00800044 	movi	r2,1
  11490c:	1109c83a 	sub	r4,r2,r4
  114910:	d9001715 	stw	r4,92(sp)
  114914:	d8801717 	ldw	r2,92(sp)
  114918:	103f9626 	beq	r2,zero,114774 <__alt_data_end+0xfffd4774>
  11491c:	a5400417 	ldw	r21,16(r20)
  114920:	d9800017 	ldw	r6,0(sp)
  114924:	013fffc4 	movi	r4,-1
  114928:	ad67883a 	add	r19,r21,r21
  11492c:	9ce7883a 	add	r19,r19,r19
  114930:	3005883a 	mov	r2,r6
  114934:	34cb883a 	add	r5,r6,r19
  114938:	00000306 	br	114948 <__gethex+0x6d8>
  11493c:	10000015 	stw	zero,0(r2)
  114940:	10800104 	addi	r2,r2,4
  114944:	117f4a2e 	bgeu	r2,r5,114670 <__alt_data_end+0xfffd4670>
  114948:	10c00017 	ldw	r3,0(r2)
  11494c:	193ffb26 	beq	r3,r4,11493c <__alt_data_end+0xfffd493c>
  114950:	18c00044 	addi	r3,r3,1
  114954:	10c00015 	stw	r3,0(r2)
  114958:	00800084 	movi	r2,2
  11495c:	88802b26 	beq	r17,r2,114a0c <__gethex+0x79c>
  114960:	948007cc 	andi	r18,r18,31
  114964:	90002f1e 	bne	r18,zero,114a24 <__gethex+0x7b4>
  114968:	04400844 	movi	r17,33
  11496c:	003f8206 	br	114778 <__alt_data_end+0xfffd4778>
  114970:	04c00044 	movi	r19,1
  114974:	003fc106 	br	11487c <__alt_data_end+0xfffd487c>
  114978:	d8c01717 	ldw	r3,92(sp)
  11497c:	183ec926 	beq	r3,zero,1144a4 <__alt_data_end+0xfffd44a4>
  114980:	d8c00417 	ldw	r3,16(sp)
  114984:	d9001617 	ldw	r4,88(sp)
  114988:	18800015 	stw	r2,0(r3)
  11498c:	d8c00017 	ldw	r3,0(sp)
  114990:	00800044 	movi	r2,1
  114994:	a0800415 	stw	r2,16(r20)
  114998:	18800015 	stw	r2,0(r3)
  11499c:	25000015 	stw	r20,0(r4)
  1149a0:	00801884 	movi	r2,98
  1149a4:	003ef106 	br	11456c <__alt_data_end+0xfffd456c>
  1149a8:	9880008c 	andi	r2,r19,2
  1149ac:	103f7126 	beq	r2,zero,114774 <__alt_data_end+0xfffd4774>
  1149b0:	d8c00017 	ldw	r3,0(sp)
  1149b4:	18800017 	ldw	r2,0(r3)
  1149b8:	9884b03a 	or	r2,r19,r2
  1149bc:	1080004c 	andi	r2,r2,1
  1149c0:	103fd61e 	bne	r2,zero,11491c <__alt_data_end+0xfffd491c>
  1149c4:	003f6b06 	br	114774 <__alt_data_end+0xfffd4774>
  1149c8:	da400017 	ldw	r9,0(sp)
  1149cc:	0007883a 	mov	r3,zero
  1149d0:	003e9606 	br	11442c <__alt_data_end+0xfffd442c>
  1149d4:	04c00084 	movi	r19,2
  1149d8:	003f8806 	br	1147fc <__alt_data_end+0xfffd47fc>
  1149dc:	d9001717 	ldw	r4,92(sp)
  1149e0:	203fe726 	beq	r4,zero,114980 <__alt_data_end+0xfffd4980>
  1149e4:	003eaf06 	br	1144a4 <__alt_data_end+0xfffd44a4>
  1149e8:	943eae1e 	bne	r18,r16,1144a4 <__alt_data_end+0xfffd44a4>
  1149ec:	1cbfe40e 	bge	r3,r18,114980 <__alt_data_end+0xfffd4980>
  1149f0:	917fffc4 	addi	r5,r18,-1
  1149f4:	a009883a 	mov	r4,r20
  1149f8:	010d15c0 	call	10d15c <__any_on>
  1149fc:	103ea926 	beq	r2,zero,1144a4 <__alt_data_end+0xfffd44a4>
  114a00:	d8c00117 	ldw	r3,4(sp)
  114a04:	18800117 	ldw	r2,4(r3)
  114a08:	003fdd06 	br	114980 <__alt_data_end+0xfffd4980>
  114a0c:	d8c00117 	ldw	r3,4(sp)
  114a10:	18800017 	ldw	r2,0(r3)
  114a14:	10bfffc4 	addi	r2,r2,-1
  114a18:	90801c26 	beq	r18,r2,114a8c <__gethex+0x81c>
  114a1c:	04400884 	movi	r17,34
  114a20:	003f5506 	br	114778 <__alt_data_end+0xfffd4778>
  114a24:	34c5883a 	add	r2,r6,r19
  114a28:	113fff17 	ldw	r4,-4(r2)
  114a2c:	010c44c0 	call	10c44c <__hi0bits>
  114a30:	00c00804 	movi	r3,32
  114a34:	1ca5c83a 	sub	r18,r3,r18
  114a38:	14bfcb0e 	bge	r2,r18,114968 <__alt_data_end+0xfffd4968>
  114a3c:	003f1a06 	br	1146a8 <__alt_data_end+0xfffd46a8>
  114a40:	a1400117 	ldw	r5,4(r20)
  114a44:	d9000217 	ldw	r4,8(sp)
  114a48:	29400044 	addi	r5,r5,1
  114a4c:	010c1300 	call	10c130 <_Balloc>
  114a50:	a1800417 	ldw	r6,16(r20)
  114a54:	a1400304 	addi	r5,r20,12
  114a58:	11000304 	addi	r4,r2,12
  114a5c:	31800084 	addi	r6,r6,2
  114a60:	318d883a 	add	r6,r6,r6
  114a64:	318d883a 	add	r6,r6,r6
  114a68:	102d883a 	mov	r22,r2
  114a6c:	01027180 	call	102718 <memcpy>
  114a70:	d9000217 	ldw	r4,8(sp)
  114a74:	a00b883a 	mov	r5,r20
  114a78:	b029883a 	mov	r20,r22
  114a7c:	010c1d80 	call	10c1d8 <_Bfree>
  114a80:	b0c00417 	ldw	r3,16(r22)
  114a84:	b1800504 	addi	r6,r22,20
  114a88:	003efc06 	br	11467c <__alt_data_end+0xfffd467c>
  114a8c:	9005d17a 	srai	r2,r18,5
  114a90:	944007cc 	andi	r17,r18,31
  114a94:	1085883a 	add	r2,r2,r2
  114a98:	1085883a 	add	r2,r2,r2
  114a9c:	3087883a 	add	r3,r6,r2
  114aa0:	00800044 	movi	r2,1
  114aa4:	1462983a 	sll	r17,r2,r17
  114aa8:	18800017 	ldw	r2,0(r3)
  114aac:	8884703a 	and	r2,r17,r2
  114ab0:	1022c03a 	cmpne	r17,r2,zero
  114ab4:	00800884 	movi	r2,34
  114ab8:	1463c83a 	sub	r17,r2,r17
  114abc:	003f2e06 	br	114778 <__alt_data_end+0xfffd4778>

00114ac0 <__hexnan>:
  114ac0:	defff904 	addi	sp,sp,-28
  114ac4:	dc800215 	stw	r18,8(sp)
  114ac8:	2c800017 	ldw	r18,0(r5)
  114acc:	dfc00615 	stw	ra,24(sp)
  114ad0:	dd400515 	stw	r21,20(sp)
  114ad4:	901fd17a 	srai	r15,r18,5
  114ad8:	dd000415 	stw	r20,16(sp)
  114adc:	dcc00315 	stw	r19,12(sp)
  114ae0:	7bdf883a 	add	r15,r15,r15
  114ae4:	7bdf883a 	add	r15,r15,r15
  114ae8:	dc400115 	stw	r17,4(sp)
  114aec:	dc000015 	stw	r16,0(sp)
  114af0:	948007cc 	andi	r18,r18,31
  114af4:	33df883a 	add	r15,r6,r15
  114af8:	90000126 	beq	r18,zero,114b00 <__hexnan+0x40>
  114afc:	7bc00104 	addi	r15,r15,4
  114b00:	22000017 	ldw	r8,0(r4)
  114b04:	7affff04 	addi	r11,r15,-4
  114b08:	038004b4 	movhi	r14,18
  114b0c:	783fff15 	stw	zero,-4(r15)
  114b10:	581b883a 	mov	r13,r11
  114b14:	580b883a 	mov	r5,r11
  114b18:	000f883a 	mov	r7,zero
  114b1c:	003f883a 	mov	ra,zero
  114b20:	0019883a 	mov	r12,zero
  114b24:	738f8e84 	addi	r14,r14,15930
  114b28:	04400204 	movi	r17,8
  114b2c:	04000804 	movi	r16,32
  114b30:	04c001c4 	movi	r19,7
  114b34:	42000044 	addi	r8,r8,1
  114b38:	40c00003 	ldbu	r3,0(r8)
  114b3c:	18001d26 	beq	r3,zero,114bb4 <__hexnan+0xf4>
  114b40:	70c5883a 	add	r2,r14,r3
  114b44:	10800003 	ldbu	r2,0(r2)
  114b48:	12403fcc 	andi	r9,r2,255
  114b4c:	4800301e 	bne	r9,zero,114c10 <__hexnan+0x150>
  114b50:	80c04236 	bltu	r16,r3,114c5c <__hexnan+0x19c>
  114b54:	fb3ff70e 	bge	ra,r12,114b34 <__alt_data_end+0xfffd4b34>
  114b58:	2b40112e 	bgeu	r5,r13,114ba0 <__hexnan+0xe0>
  114b5c:	99c01016 	blt	r19,r7,114ba0 <__hexnan+0xe0>
  114b60:	89e9c83a 	sub	r20,r17,r7
  114b64:	a529883a 	add	r20,r20,r20
  114b68:	2a800017 	ldw	r10,0(r5)
  114b6c:	a529883a 	add	r20,r20,r20
  114b70:	852bc83a 	sub	r21,r16,r20
  114b74:	28c00104 	addi	r3,r5,4
  114b78:	2805883a 	mov	r2,r5
  114b7c:	19c00017 	ldw	r7,0(r3)
  114b80:	10800104 	addi	r2,r2,4
  114b84:	18c00104 	addi	r3,r3,4
  114b88:	3d52983a 	sll	r9,r7,r21
  114b8c:	4a92b03a 	or	r9,r9,r10
  114b90:	3d14d83a 	srl	r10,r7,r20
  114b94:	127fff15 	stw	r9,-4(r2)
  114b98:	1abfff15 	stw	r10,-4(r3)
  114b9c:	137ff736 	bltu	r2,r13,114b7c <__alt_data_end+0xfffd4b7c>
  114ba0:	31402836 	bltu	r6,r5,114c44 <__hexnan+0x184>
  114ba4:	42000044 	addi	r8,r8,1
  114ba8:	40c00003 	ldbu	r3,0(r8)
  114bac:	01c00204 	movi	r7,8
  114bb0:	183fe31e 	bne	r3,zero,114b40 <__alt_data_end+0xfffd4b40>
  114bb4:	60002b26 	beq	r12,zero,114c64 <__hexnan+0x1a4>
  114bb8:	2b40022e 	bgeu	r5,r13,114bc4 <__hexnan+0x104>
  114bbc:	008001c4 	movi	r2,7
  114bc0:	11c0430e 	bge	r2,r7,114cd0 <__hexnan+0x210>
  114bc4:	3140312e 	bgeu	r6,r5,114c8c <__hexnan+0x1cc>
  114bc8:	3007883a 	mov	r3,r6
  114bcc:	29000017 	ldw	r4,0(r5)
  114bd0:	18800104 	addi	r2,r3,4
  114bd4:	29400104 	addi	r5,r5,4
  114bd8:	19000015 	stw	r4,0(r3)
  114bdc:	1007883a 	mov	r3,r2
  114be0:	597ffa2e 	bgeu	r11,r5,114bcc <__alt_data_end+0xfffd4bcc>
  114be4:	10000015 	stw	zero,0(r2)
  114be8:	10800104 	addi	r2,r2,4
  114bec:	58bffd2e 	bgeu	r11,r2,114be4 <__alt_data_end+0xfffd4be4>
  114bf0:	78bfff17 	ldw	r2,-4(r15)
  114bf4:	1000041e 	bne	r2,zero,114c08 <__hexnan+0x148>
  114bf8:	32c02d26 	beq	r6,r11,114cb0 <__hexnan+0x1f0>
  114bfc:	5affff04 	addi	r11,r11,-4
  114c00:	58800017 	ldw	r2,0(r11)
  114c04:	103ffc26 	beq	r2,zero,114bf8 <__alt_data_end+0xfffd4bf8>
  114c08:	00800144 	movi	r2,5
  114c0c:	00001606 	br	114c68 <__hexnan+0x1a8>
  114c10:	39c00044 	addi	r7,r7,1
  114c14:	63000044 	addi	r12,r12,1
  114c18:	89c0040e 	bge	r17,r7,114c2c <__hexnan+0x16c>
  114c1c:	317fc52e 	bgeu	r6,r5,114b34 <__alt_data_end+0xfffd4b34>
  114c20:	283fff15 	stw	zero,-4(r5)
  114c24:	01c00044 	movi	r7,1
  114c28:	297fff04 	addi	r5,r5,-4
  114c2c:	28c00017 	ldw	r3,0(r5)
  114c30:	108003cc 	andi	r2,r2,15
  114c34:	1806913a 	slli	r3,r3,4
  114c38:	1884b03a 	or	r2,r3,r2
  114c3c:	28800015 	stw	r2,0(r5)
  114c40:	003fbc06 	br	114b34 <__alt_data_end+0xfffd4b34>
  114c44:	2b7fff04 	addi	r13,r5,-4
  114c48:	283fff15 	stw	zero,-4(r5)
  114c4c:	603f883a 	mov	ra,r12
  114c50:	680b883a 	mov	r5,r13
  114c54:	000f883a 	mov	r7,zero
  114c58:	003fb606 	br	114b34 <__alt_data_end+0xfffd4b34>
  114c5c:	00800a44 	movi	r2,41
  114c60:	18801726 	beq	r3,r2,114cc0 <__hexnan+0x200>
  114c64:	00800104 	movi	r2,4
  114c68:	dfc00617 	ldw	ra,24(sp)
  114c6c:	dd400517 	ldw	r21,20(sp)
  114c70:	dd000417 	ldw	r20,16(sp)
  114c74:	dcc00317 	ldw	r19,12(sp)
  114c78:	dc800217 	ldw	r18,8(sp)
  114c7c:	dc400117 	ldw	r17,4(sp)
  114c80:	dc000017 	ldw	r16,0(sp)
  114c84:	dec00704 	addi	sp,sp,28
  114c88:	f800283a 	ret
  114c8c:	903fd826 	beq	r18,zero,114bf0 <__alt_data_end+0xfffd4bf0>
  114c90:	00c00804 	movi	r3,32
  114c94:	1ca5c83a 	sub	r18,r3,r18
  114c98:	00ffffc4 	movi	r3,-1
  114c9c:	78bfff17 	ldw	r2,-4(r15)
  114ca0:	1c86d83a 	srl	r3,r3,r18
  114ca4:	1884703a 	and	r2,r3,r2
  114ca8:	78bfff15 	stw	r2,-4(r15)
  114cac:	003fd106 	br	114bf4 <__alt_data_end+0xfffd4bf4>
  114cb0:	00800044 	movi	r2,1
  114cb4:	58800015 	stw	r2,0(r11)
  114cb8:	00800144 	movi	r2,5
  114cbc:	003fea06 	br	114c68 <__alt_data_end+0xfffd4c68>
  114cc0:	42000044 	addi	r8,r8,1
  114cc4:	22000015 	stw	r8,0(r4)
  114cc8:	603fbb1e 	bne	r12,zero,114bb8 <__alt_data_end+0xfffd4bb8>
  114ccc:	003fe506 	br	114c64 <__alt_data_end+0xfffd4c64>
  114cd0:	02400204 	movi	r9,8
  114cd4:	49d3c83a 	sub	r9,r9,r7
  114cd8:	4a53883a 	add	r9,r9,r9
  114cdc:	2a000017 	ldw	r8,0(r5)
  114ce0:	4a53883a 	add	r9,r9,r9
  114ce4:	02800804 	movi	r10,32
  114ce8:	5255c83a 	sub	r10,r10,r9
  114cec:	28c00104 	addi	r3,r5,4
  114cf0:	2805883a 	mov	r2,r5
  114cf4:	19c00017 	ldw	r7,0(r3)
  114cf8:	10800104 	addi	r2,r2,4
  114cfc:	18c00104 	addi	r3,r3,4
  114d00:	3a88983a 	sll	r4,r7,r10
  114d04:	2208b03a 	or	r4,r4,r8
  114d08:	3a50d83a 	srl	r8,r7,r9
  114d0c:	113fff15 	stw	r4,-4(r2)
  114d10:	1a3fff15 	stw	r8,-4(r3)
  114d14:	137ff736 	bltu	r2,r13,114cf4 <__alt_data_end+0xfffd4cf4>
  114d18:	003faa06 	br	114bc4 <__alt_data_end+0xfffd4bc4>

00114d1c <_isatty_r>:
  114d1c:	defffd04 	addi	sp,sp,-12
  114d20:	dc000015 	stw	r16,0(sp)
  114d24:	040004b4 	movhi	r16,18
  114d28:	dc400115 	stw	r17,4(sp)
  114d2c:	841e5904 	addi	r16,r16,31076
  114d30:	2023883a 	mov	r17,r4
  114d34:	2809883a 	mov	r4,r5
  114d38:	dfc00215 	stw	ra,8(sp)
  114d3c:	80000015 	stw	zero,0(r16)
  114d40:	0118f540 	call	118f54 <isatty>
  114d44:	00ffffc4 	movi	r3,-1
  114d48:	10c00526 	beq	r2,r3,114d60 <_isatty_r+0x44>
  114d4c:	dfc00217 	ldw	ra,8(sp)
  114d50:	dc400117 	ldw	r17,4(sp)
  114d54:	dc000017 	ldw	r16,0(sp)
  114d58:	dec00304 	addi	sp,sp,12
  114d5c:	f800283a 	ret
  114d60:	80c00017 	ldw	r3,0(r16)
  114d64:	183ff926 	beq	r3,zero,114d4c <__alt_data_end+0xfffd4d4c>
  114d68:	88c00015 	stw	r3,0(r17)
  114d6c:	003ff706 	br	114d4c <__alt_data_end+0xfffd4d4c>

00114d70 <strncmp>:
  114d70:	30003126 	beq	r6,zero,114e38 <strncmp+0xc8>
  114d74:	2144b03a 	or	r2,r4,r5
  114d78:	108000cc 	andi	r2,r2,3
  114d7c:	10001e1e 	bne	r2,zero,114df8 <strncmp+0x88>
  114d80:	024000c4 	movi	r9,3
  114d84:	49801c2e 	bgeu	r9,r6,114df8 <strncmp+0x88>
  114d88:	20800017 	ldw	r2,0(r4)
  114d8c:	28c00017 	ldw	r3,0(r5)
  114d90:	10c0191e 	bne	r2,r3,114df8 <strncmp+0x88>
  114d94:	31bfff04 	addi	r6,r6,-4
  114d98:	30002726 	beq	r6,zero,114e38 <strncmp+0xc8>
  114d9c:	02ffbff4 	movhi	r11,65279
  114da0:	5affbfc4 	addi	r11,r11,-257
  114da4:	0086303a 	nor	r3,zero,r2
  114da8:	02a02074 	movhi	r10,32897
  114dac:	12c5883a 	add	r2,r2,r11
  114db0:	52a02004 	addi	r10,r10,-32640
  114db4:	10c4703a 	and	r2,r2,r3
  114db8:	1284703a 	and	r2,r2,r10
  114dbc:	10000b26 	beq	r2,zero,114dec <strncmp+0x7c>
  114dc0:	00001d06 	br	114e38 <strncmp+0xc8>
  114dc4:	20c00017 	ldw	r3,0(r4)
  114dc8:	29c00017 	ldw	r7,0(r5)
  114dcc:	1ad1883a 	add	r8,r3,r11
  114dd0:	00c4303a 	nor	r2,zero,r3
  114dd4:	4084703a 	and	r2,r8,r2
  114dd8:	1284703a 	and	r2,r2,r10
  114ddc:	19c0061e 	bne	r3,r7,114df8 <strncmp+0x88>
  114de0:	31bfff04 	addi	r6,r6,-4
  114de4:	30001426 	beq	r6,zero,114e38 <strncmp+0xc8>
  114de8:	1000131e 	bne	r2,zero,114e38 <strncmp+0xc8>
  114dec:	21000104 	addi	r4,r4,4
  114df0:	29400104 	addi	r5,r5,4
  114df4:	49bff336 	bltu	r9,r6,114dc4 <__alt_data_end+0xfffd4dc4>
  114df8:	28800007 	ldb	r2,0(r5)
  114dfc:	20c00007 	ldb	r3,0(r4)
  114e00:	31bfffc4 	addi	r6,r6,-1
  114e04:	10c0081e 	bne	r2,r3,114e28 <strncmp+0xb8>
  114e08:	30000b26 	beq	r6,zero,114e38 <strncmp+0xc8>
  114e0c:	10000a26 	beq	r2,zero,114e38 <strncmp+0xc8>
  114e10:	21000044 	addi	r4,r4,1
  114e14:	29400044 	addi	r5,r5,1
  114e18:	20800007 	ldb	r2,0(r4)
  114e1c:	28c00007 	ldb	r3,0(r5)
  114e20:	31bfffc4 	addi	r6,r6,-1
  114e24:	10fff826 	beq	r2,r3,114e08 <__alt_data_end+0xfffd4e08>
  114e28:	20800003 	ldbu	r2,0(r4)
  114e2c:	28c00003 	ldbu	r3,0(r5)
  114e30:	10c5c83a 	sub	r2,r2,r3
  114e34:	f800283a 	ret
  114e38:	0005883a 	mov	r2,zero
  114e3c:	f800283a 	ret

00114e40 <__swbuf_r>:
  114e40:	defffb04 	addi	sp,sp,-20
  114e44:	dcc00315 	stw	r19,12(sp)
  114e48:	dc800215 	stw	r18,8(sp)
  114e4c:	dc000015 	stw	r16,0(sp)
  114e50:	dfc00415 	stw	ra,16(sp)
  114e54:	dc400115 	stw	r17,4(sp)
  114e58:	2025883a 	mov	r18,r4
  114e5c:	2827883a 	mov	r19,r5
  114e60:	3021883a 	mov	r16,r6
  114e64:	20000226 	beq	r4,zero,114e70 <__swbuf_r+0x30>
  114e68:	20800e17 	ldw	r2,56(r4)
  114e6c:	10004226 	beq	r2,zero,114f78 <__swbuf_r+0x138>
  114e70:	80800617 	ldw	r2,24(r16)
  114e74:	8100030b 	ldhu	r4,12(r16)
  114e78:	80800215 	stw	r2,8(r16)
  114e7c:	2080020c 	andi	r2,r4,8
  114e80:	10003626 	beq	r2,zero,114f5c <__swbuf_r+0x11c>
  114e84:	80c00417 	ldw	r3,16(r16)
  114e88:	18003426 	beq	r3,zero,114f5c <__swbuf_r+0x11c>
  114e8c:	2088000c 	andi	r2,r4,8192
  114e90:	9c403fcc 	andi	r17,r19,255
  114e94:	10001a26 	beq	r2,zero,114f00 <__swbuf_r+0xc0>
  114e98:	80800017 	ldw	r2,0(r16)
  114e9c:	81000517 	ldw	r4,20(r16)
  114ea0:	10c7c83a 	sub	r3,r2,r3
  114ea4:	1900200e 	bge	r3,r4,114f28 <__swbuf_r+0xe8>
  114ea8:	18c00044 	addi	r3,r3,1
  114eac:	81000217 	ldw	r4,8(r16)
  114eb0:	11400044 	addi	r5,r2,1
  114eb4:	81400015 	stw	r5,0(r16)
  114eb8:	213fffc4 	addi	r4,r4,-1
  114ebc:	81000215 	stw	r4,8(r16)
  114ec0:	14c00005 	stb	r19,0(r2)
  114ec4:	80800517 	ldw	r2,20(r16)
  114ec8:	10c01e26 	beq	r2,r3,114f44 <__swbuf_r+0x104>
  114ecc:	8080030b 	ldhu	r2,12(r16)
  114ed0:	1080004c 	andi	r2,r2,1
  114ed4:	10000226 	beq	r2,zero,114ee0 <__swbuf_r+0xa0>
  114ed8:	00800284 	movi	r2,10
  114edc:	88801926 	beq	r17,r2,114f44 <__swbuf_r+0x104>
  114ee0:	8805883a 	mov	r2,r17
  114ee4:	dfc00417 	ldw	ra,16(sp)
  114ee8:	dcc00317 	ldw	r19,12(sp)
  114eec:	dc800217 	ldw	r18,8(sp)
  114ef0:	dc400117 	ldw	r17,4(sp)
  114ef4:	dc000017 	ldw	r16,0(sp)
  114ef8:	dec00504 	addi	sp,sp,20
  114efc:	f800283a 	ret
  114f00:	81401917 	ldw	r5,100(r16)
  114f04:	00b7ffc4 	movi	r2,-8193
  114f08:	21080014 	ori	r4,r4,8192
  114f0c:	2884703a 	and	r2,r5,r2
  114f10:	80801915 	stw	r2,100(r16)
  114f14:	80800017 	ldw	r2,0(r16)
  114f18:	8100030d 	sth	r4,12(r16)
  114f1c:	81000517 	ldw	r4,20(r16)
  114f20:	10c7c83a 	sub	r3,r2,r3
  114f24:	193fe016 	blt	r3,r4,114ea8 <__alt_data_end+0xfffd4ea8>
  114f28:	800b883a 	mov	r5,r16
  114f2c:	9009883a 	mov	r4,r18
  114f30:	010b1000 	call	10b100 <_fflush_r>
  114f34:	1000071e 	bne	r2,zero,114f54 <__swbuf_r+0x114>
  114f38:	80800017 	ldw	r2,0(r16)
  114f3c:	00c00044 	movi	r3,1
  114f40:	003fda06 	br	114eac <__alt_data_end+0xfffd4eac>
  114f44:	800b883a 	mov	r5,r16
  114f48:	9009883a 	mov	r4,r18
  114f4c:	010b1000 	call	10b100 <_fflush_r>
  114f50:	103fe326 	beq	r2,zero,114ee0 <__alt_data_end+0xfffd4ee0>
  114f54:	00bfffc4 	movi	r2,-1
  114f58:	003fe206 	br	114ee4 <__alt_data_end+0xfffd4ee4>
  114f5c:	800b883a 	mov	r5,r16
  114f60:	9009883a 	mov	r4,r18
  114f64:	01093880 	call	109388 <__swsetup_r>
  114f68:	103ffa1e 	bne	r2,zero,114f54 <__alt_data_end+0xfffd4f54>
  114f6c:	8100030b 	ldhu	r4,12(r16)
  114f70:	80c00417 	ldw	r3,16(r16)
  114f74:	003fc506 	br	114e8c <__alt_data_end+0xfffd4e8c>
  114f78:	0101c500 	call	101c50 <__sinit>
  114f7c:	003fbc06 	br	114e70 <__alt_data_end+0xfffd4e70>

00114f80 <__swbuf>:
  114f80:	008004b4 	movhi	r2,18
  114f84:	10972d04 	addi	r2,r2,23732
  114f88:	280d883a 	mov	r6,r5
  114f8c:	200b883a 	mov	r5,r4
  114f90:	11000017 	ldw	r4,0(r2)
  114f94:	0114e401 	jmpi	114e40 <__swbuf_r>

00114f98 <_wcrtomb_r>:
  114f98:	defff604 	addi	sp,sp,-40
  114f9c:	008004b4 	movhi	r2,18
  114fa0:	dc800815 	stw	r18,32(sp)
  114fa4:	dc400715 	stw	r17,28(sp)
  114fa8:	dc000615 	stw	r16,24(sp)
  114fac:	10973304 	addi	r2,r2,23756
  114fb0:	dfc00915 	stw	ra,36(sp)
  114fb4:	2021883a 	mov	r16,r4
  114fb8:	3823883a 	mov	r17,r7
  114fbc:	14800017 	ldw	r18,0(r2)
  114fc0:	28001426 	beq	r5,zero,115014 <_wcrtomb_r+0x7c>
  114fc4:	d9400415 	stw	r5,16(sp)
  114fc8:	d9800515 	stw	r6,20(sp)
  114fcc:	010bb340 	call	10bb34 <__locale_charset>
  114fd0:	d9800517 	ldw	r6,20(sp)
  114fd4:	d9400417 	ldw	r5,16(sp)
  114fd8:	100f883a 	mov	r7,r2
  114fdc:	dc400015 	stw	r17,0(sp)
  114fe0:	8009883a 	mov	r4,r16
  114fe4:	903ee83a 	callr	r18
  114fe8:	00ffffc4 	movi	r3,-1
  114fec:	10c0031e 	bne	r2,r3,114ffc <_wcrtomb_r+0x64>
  114ff0:	88000015 	stw	zero,0(r17)
  114ff4:	00c02284 	movi	r3,138
  114ff8:	80c00015 	stw	r3,0(r16)
  114ffc:	dfc00917 	ldw	ra,36(sp)
  115000:	dc800817 	ldw	r18,32(sp)
  115004:	dc400717 	ldw	r17,28(sp)
  115008:	dc000617 	ldw	r16,24(sp)
  11500c:	dec00a04 	addi	sp,sp,40
  115010:	f800283a 	ret
  115014:	010bb340 	call	10bb34 <__locale_charset>
  115018:	100f883a 	mov	r7,r2
  11501c:	dc400015 	stw	r17,0(sp)
  115020:	000d883a 	mov	r6,zero
  115024:	d9400104 	addi	r5,sp,4
  115028:	8009883a 	mov	r4,r16
  11502c:	903ee83a 	callr	r18
  115030:	003fed06 	br	114fe8 <__alt_data_end+0xfffd4fe8>

00115034 <wcrtomb>:
  115034:	defff604 	addi	sp,sp,-40
  115038:	008004b4 	movhi	r2,18
  11503c:	dc800615 	stw	r18,24(sp)
  115040:	dc400515 	stw	r17,20(sp)
  115044:	10972d04 	addi	r2,r2,23732
  115048:	dfc00915 	stw	ra,36(sp)
  11504c:	dd000815 	stw	r20,32(sp)
  115050:	dcc00715 	stw	r19,28(sp)
  115054:	dc000415 	stw	r16,16(sp)
  115058:	3025883a 	mov	r18,r6
  11505c:	14400017 	ldw	r17,0(r2)
  115060:	20001926 	beq	r4,zero,1150c8 <wcrtomb+0x94>
  115064:	008004b4 	movhi	r2,18
  115068:	10973304 	addi	r2,r2,23756
  11506c:	15000017 	ldw	r20,0(r2)
  115070:	2021883a 	mov	r16,r4
  115074:	2827883a 	mov	r19,r5
  115078:	010bb340 	call	10bb34 <__locale_charset>
  11507c:	100f883a 	mov	r7,r2
  115080:	dc800015 	stw	r18,0(sp)
  115084:	980d883a 	mov	r6,r19
  115088:	800b883a 	mov	r5,r16
  11508c:	8809883a 	mov	r4,r17
  115090:	a03ee83a 	callr	r20
  115094:	00ffffc4 	movi	r3,-1
  115098:	10c0031e 	bne	r2,r3,1150a8 <wcrtomb+0x74>
  11509c:	90000015 	stw	zero,0(r18)
  1150a0:	00c02284 	movi	r3,138
  1150a4:	88c00015 	stw	r3,0(r17)
  1150a8:	dfc00917 	ldw	ra,36(sp)
  1150ac:	dd000817 	ldw	r20,32(sp)
  1150b0:	dcc00717 	ldw	r19,28(sp)
  1150b4:	dc800617 	ldw	r18,24(sp)
  1150b8:	dc400517 	ldw	r17,20(sp)
  1150bc:	dc000417 	ldw	r16,16(sp)
  1150c0:	dec00a04 	addi	sp,sp,40
  1150c4:	f800283a 	ret
  1150c8:	008004b4 	movhi	r2,18
  1150cc:	10973304 	addi	r2,r2,23756
  1150d0:	14000017 	ldw	r16,0(r2)
  1150d4:	010bb340 	call	10bb34 <__locale_charset>
  1150d8:	100f883a 	mov	r7,r2
  1150dc:	dc800015 	stw	r18,0(sp)
  1150e0:	000d883a 	mov	r6,zero
  1150e4:	d9400104 	addi	r5,sp,4
  1150e8:	8809883a 	mov	r4,r17
  1150ec:	803ee83a 	callr	r16
  1150f0:	003fe806 	br	115094 <__alt_data_end+0xfffd5094>

001150f4 <__ascii_wctomb>:
  1150f4:	28000526 	beq	r5,zero,11510c <__ascii_wctomb+0x18>
  1150f8:	00803fc4 	movi	r2,255
  1150fc:	11800536 	bltu	r2,r6,115114 <__ascii_wctomb+0x20>
  115100:	29800005 	stb	r6,0(r5)
  115104:	00800044 	movi	r2,1
  115108:	f800283a 	ret
  11510c:	0005883a 	mov	r2,zero
  115110:	f800283a 	ret
  115114:	00802284 	movi	r2,138
  115118:	20800015 	stw	r2,0(r4)
  11511c:	00bfffc4 	movi	r2,-1
  115120:	f800283a 	ret

00115124 <_wctomb_r>:
  115124:	008004b4 	movhi	r2,18
  115128:	defff904 	addi	sp,sp,-28
  11512c:	10973304 	addi	r2,r2,23756
  115130:	dfc00615 	stw	ra,24(sp)
  115134:	dc400515 	stw	r17,20(sp)
  115138:	dc000415 	stw	r16,16(sp)
  11513c:	3823883a 	mov	r17,r7
  115140:	14000017 	ldw	r16,0(r2)
  115144:	d9000115 	stw	r4,4(sp)
  115148:	d9400215 	stw	r5,8(sp)
  11514c:	d9800315 	stw	r6,12(sp)
  115150:	010bb340 	call	10bb34 <__locale_charset>
  115154:	d9800317 	ldw	r6,12(sp)
  115158:	d9400217 	ldw	r5,8(sp)
  11515c:	d9000117 	ldw	r4,4(sp)
  115160:	100f883a 	mov	r7,r2
  115164:	dc400015 	stw	r17,0(sp)
  115168:	803ee83a 	callr	r16
  11516c:	dfc00617 	ldw	ra,24(sp)
  115170:	dc400517 	ldw	r17,20(sp)
  115174:	dc000417 	ldw	r16,16(sp)
  115178:	dec00704 	addi	sp,sp,28
  11517c:	f800283a 	ret

00115180 <__muldi3>:
  115180:	defff604 	addi	sp,sp,-40
  115184:	dd800615 	stw	r22,24(sp)
  115188:	dd400515 	stw	r21,20(sp)
  11518c:	dc400115 	stw	r17,4(sp)
  115190:	357fffcc 	andi	r21,r6,65535
  115194:	2022d43a 	srli	r17,r4,16
  115198:	25bfffcc 	andi	r22,r4,65535
  11519c:	dcc00315 	stw	r19,12(sp)
  1151a0:	dc800215 	stw	r18,8(sp)
  1151a4:	2027883a 	mov	r19,r4
  1151a8:	2825883a 	mov	r18,r5
  1151ac:	b009883a 	mov	r4,r22
  1151b0:	a80b883a 	mov	r5,r21
  1151b4:	dfc00915 	stw	ra,36(sp)
  1151b8:	df000815 	stw	fp,32(sp)
  1151bc:	ddc00715 	stw	r23,28(sp)
  1151c0:	3839883a 	mov	fp,r7
  1151c4:	302ed43a 	srli	r23,r6,16
  1151c8:	dd000415 	stw	r20,16(sp)
  1151cc:	dc000015 	stw	r16,0(sp)
  1151d0:	3029883a 	mov	r20,r6
  1151d4:	01160740 	call	116074 <__mulsi3>
  1151d8:	a80b883a 	mov	r5,r21
  1151dc:	8809883a 	mov	r4,r17
  1151e0:	1021883a 	mov	r16,r2
  1151e4:	01160740 	call	116074 <__mulsi3>
  1151e8:	8809883a 	mov	r4,r17
  1151ec:	b80b883a 	mov	r5,r23
  1151f0:	102b883a 	mov	r21,r2
  1151f4:	01160740 	call	116074 <__mulsi3>
  1151f8:	b80b883a 	mov	r5,r23
  1151fc:	b009883a 	mov	r4,r22
  115200:	1023883a 	mov	r17,r2
  115204:	01160740 	call	116074 <__mulsi3>
  115208:	8006d43a 	srli	r3,r16,16
  11520c:	1545883a 	add	r2,r2,r21
  115210:	1885883a 	add	r2,r3,r2
  115214:	1540022e 	bgeu	r2,r21,115220 <__muldi3+0xa0>
  115218:	00c00074 	movhi	r3,1
  11521c:	88e3883a 	add	r17,r17,r3
  115220:	1006d43a 	srli	r3,r2,16
  115224:	1004943a 	slli	r2,r2,16
  115228:	e00b883a 	mov	r5,fp
  11522c:	9809883a 	mov	r4,r19
  115230:	843fffcc 	andi	r16,r16,65535
  115234:	1c63883a 	add	r17,r3,r17
  115238:	1421883a 	add	r16,r2,r16
  11523c:	01160740 	call	116074 <__mulsi3>
  115240:	900b883a 	mov	r5,r18
  115244:	a009883a 	mov	r4,r20
  115248:	1027883a 	mov	r19,r2
  11524c:	01160740 	call	116074 <__mulsi3>
  115250:	9885883a 	add	r2,r19,r2
  115254:	1447883a 	add	r3,r2,r17
  115258:	8005883a 	mov	r2,r16
  11525c:	dfc00917 	ldw	ra,36(sp)
  115260:	df000817 	ldw	fp,32(sp)
  115264:	ddc00717 	ldw	r23,28(sp)
  115268:	dd800617 	ldw	r22,24(sp)
  11526c:	dd400517 	ldw	r21,20(sp)
  115270:	dd000417 	ldw	r20,16(sp)
  115274:	dcc00317 	ldw	r19,12(sp)
  115278:	dc800217 	ldw	r18,8(sp)
  11527c:	dc400117 	ldw	r17,4(sp)
  115280:	dc000017 	ldw	r16,0(sp)
  115284:	dec00a04 	addi	sp,sp,40
  115288:	f800283a 	ret

0011528c <__fixunsdfsi>:
  11528c:	defffd04 	addi	sp,sp,-12
  115290:	000d883a 	mov	r6,zero
  115294:	01d07834 	movhi	r7,16864
  115298:	dc400115 	stw	r17,4(sp)
  11529c:	dc000015 	stw	r16,0(sp)
  1152a0:	dfc00215 	stw	ra,8(sp)
  1152a4:	2023883a 	mov	r17,r4
  1152a8:	2821883a 	mov	r16,r5
  1152ac:	011759c0 	call	11759c <__gedf2>
  1152b0:	1000080e 	bge	r2,zero,1152d4 <__fixunsdfsi+0x48>
  1152b4:	8809883a 	mov	r4,r17
  1152b8:	800b883a 	mov	r5,r16
  1152bc:	01188d40 	call	1188d4 <__fixdfsi>
  1152c0:	dfc00217 	ldw	ra,8(sp)
  1152c4:	dc400117 	ldw	r17,4(sp)
  1152c8:	dc000017 	ldw	r16,0(sp)
  1152cc:	dec00304 	addi	sp,sp,12
  1152d0:	f800283a 	ret
  1152d4:	000d883a 	mov	r6,zero
  1152d8:	01d07834 	movhi	r7,16864
  1152dc:	8809883a 	mov	r4,r17
  1152e0:	800b883a 	mov	r5,r16
  1152e4:	0117fd80 	call	117fd8 <__subdf3>
  1152e8:	180b883a 	mov	r5,r3
  1152ec:	1009883a 	mov	r4,r2
  1152f0:	01188d40 	call	1188d4 <__fixdfsi>
  1152f4:	00e00034 	movhi	r3,32768
  1152f8:	10c5883a 	add	r2,r2,r3
  1152fc:	003ff006 	br	1152c0 <__alt_data_end+0xfffd52c0>

00115300 <__udivdi3>:
  115300:	defff404 	addi	sp,sp,-48
  115304:	dcc00515 	stw	r19,20(sp)
  115308:	dc000215 	stw	r16,8(sp)
  11530c:	dfc00b15 	stw	ra,44(sp)
  115310:	df000a15 	stw	fp,40(sp)
  115314:	ddc00915 	stw	r23,36(sp)
  115318:	dd800815 	stw	r22,32(sp)
  11531c:	dd400715 	stw	r21,28(sp)
  115320:	dd000615 	stw	r20,24(sp)
  115324:	dc800415 	stw	r18,16(sp)
  115328:	dc400315 	stw	r17,12(sp)
  11532c:	2027883a 	mov	r19,r4
  115330:	2821883a 	mov	r16,r5
  115334:	3800461e 	bne	r7,zero,115450 <__udivdi3+0x150>
  115338:	3023883a 	mov	r17,r6
  11533c:	2025883a 	mov	r18,r4
  115340:	2980572e 	bgeu	r5,r6,1154a0 <__udivdi3+0x1a0>
  115344:	00bfffd4 	movui	r2,65535
  115348:	282d883a 	mov	r22,r5
  11534c:	1180b236 	bltu	r2,r6,115618 <__udivdi3+0x318>
  115350:	00803fc4 	movi	r2,255
  115354:	1185803a 	cmpltu	r2,r2,r6
  115358:	100490fa 	slli	r2,r2,3
  11535c:	3086d83a 	srl	r3,r6,r2
  115360:	010004b4 	movhi	r4,18
  115364:	210fce84 	addi	r4,r4,16186
  115368:	20c7883a 	add	r3,r4,r3
  11536c:	18c00003 	ldbu	r3,0(r3)
  115370:	1885883a 	add	r2,r3,r2
  115374:	00c00804 	movi	r3,32
  115378:	1887c83a 	sub	r3,r3,r2
  11537c:	18000526 	beq	r3,zero,115394 <__udivdi3+0x94>
  115380:	80e0983a 	sll	r16,r16,r3
  115384:	9884d83a 	srl	r2,r19,r2
  115388:	30e2983a 	sll	r17,r6,r3
  11538c:	98e4983a 	sll	r18,r19,r3
  115390:	142cb03a 	or	r22,r2,r16
  115394:	882ad43a 	srli	r21,r17,16
  115398:	b009883a 	mov	r4,r22
  11539c:	8d3fffcc 	andi	r20,r17,65535
  1153a0:	a80b883a 	mov	r5,r21
  1153a4:	011601c0 	call	11601c <__umodsi3>
  1153a8:	b009883a 	mov	r4,r22
  1153ac:	a80b883a 	mov	r5,r21
  1153b0:	1027883a 	mov	r19,r2
  1153b4:	0115fb80 	call	115fb8 <__udivsi3>
  1153b8:	100b883a 	mov	r5,r2
  1153bc:	a009883a 	mov	r4,r20
  1153c0:	102d883a 	mov	r22,r2
  1153c4:	01160740 	call	116074 <__mulsi3>
  1153c8:	9826943a 	slli	r19,r19,16
  1153cc:	9006d43a 	srli	r3,r18,16
  1153d0:	1cc6b03a 	or	r3,r3,r19
  1153d4:	1880052e 	bgeu	r3,r2,1153ec <__udivdi3+0xec>
  1153d8:	1c47883a 	add	r3,r3,r17
  1153dc:	b13fffc4 	addi	r4,r22,-1
  1153e0:	1c400136 	bltu	r3,r17,1153e8 <__udivdi3+0xe8>
  1153e4:	18814236 	bltu	r3,r2,1158f0 <__udivdi3+0x5f0>
  1153e8:	202d883a 	mov	r22,r4
  1153ec:	18a1c83a 	sub	r16,r3,r2
  1153f0:	8009883a 	mov	r4,r16
  1153f4:	a80b883a 	mov	r5,r21
  1153f8:	011601c0 	call	11601c <__umodsi3>
  1153fc:	1027883a 	mov	r19,r2
  115400:	8009883a 	mov	r4,r16
  115404:	a80b883a 	mov	r5,r21
  115408:	9826943a 	slli	r19,r19,16
  11540c:	0115fb80 	call	115fb8 <__udivsi3>
  115410:	100b883a 	mov	r5,r2
  115414:	a009883a 	mov	r4,r20
  115418:	94bfffcc 	andi	r18,r18,65535
  11541c:	1021883a 	mov	r16,r2
  115420:	94e4b03a 	or	r18,r18,r19
  115424:	01160740 	call	116074 <__mulsi3>
  115428:	9080052e 	bgeu	r18,r2,115440 <__udivdi3+0x140>
  11542c:	8ca5883a 	add	r18,r17,r18
  115430:	80ffffc4 	addi	r3,r16,-1
  115434:	94410c36 	bltu	r18,r17,115868 <__udivdi3+0x568>
  115438:	90810b2e 	bgeu	r18,r2,115868 <__udivdi3+0x568>
  11543c:	843fff84 	addi	r16,r16,-2
  115440:	b004943a 	slli	r2,r22,16
  115444:	0007883a 	mov	r3,zero
  115448:	1404b03a 	or	r2,r2,r16
  11544c:	00005e06 	br	1155c8 <__udivdi3+0x2c8>
  115450:	29c05b36 	bltu	r5,r7,1155c0 <__udivdi3+0x2c0>
  115454:	00bfffd4 	movui	r2,65535
  115458:	11c0672e 	bgeu	r2,r7,1155f8 <__udivdi3+0x2f8>
  11545c:	00804034 	movhi	r2,256
  115460:	10bfffc4 	addi	r2,r2,-1
  115464:	11c10a36 	bltu	r2,r7,115890 <__udivdi3+0x590>
  115468:	00800404 	movi	r2,16
  11546c:	3886d83a 	srl	r3,r7,r2
  115470:	010004b4 	movhi	r4,18
  115474:	210fce84 	addi	r4,r4,16186
  115478:	20c7883a 	add	r3,r4,r3
  11547c:	18c00003 	ldbu	r3,0(r3)
  115480:	05c00804 	movi	r23,32
  115484:	1885883a 	add	r2,r3,r2
  115488:	b8afc83a 	sub	r23,r23,r2
  11548c:	b800671e 	bne	r23,zero,11562c <__udivdi3+0x32c>
  115490:	3c010536 	bltu	r7,r16,1158a8 <__udivdi3+0x5a8>
  115494:	9985403a 	cmpgeu	r2,r19,r6
  115498:	0007883a 	mov	r3,zero
  11549c:	00004a06 	br	1155c8 <__udivdi3+0x2c8>
  1154a0:	3000041e 	bne	r6,zero,1154b4 <__udivdi3+0x1b4>
  1154a4:	000b883a 	mov	r5,zero
  1154a8:	01000044 	movi	r4,1
  1154ac:	0115fb80 	call	115fb8 <__udivsi3>
  1154b0:	1023883a 	mov	r17,r2
  1154b4:	00bfffd4 	movui	r2,65535
  1154b8:	1440532e 	bgeu	r2,r17,115608 <__udivdi3+0x308>
  1154bc:	00804034 	movhi	r2,256
  1154c0:	10bfffc4 	addi	r2,r2,-1
  1154c4:	1440f436 	bltu	r2,r17,115898 <__udivdi3+0x598>
  1154c8:	00800404 	movi	r2,16
  1154cc:	8886d83a 	srl	r3,r17,r2
  1154d0:	010004b4 	movhi	r4,18
  1154d4:	210fce84 	addi	r4,r4,16186
  1154d8:	20c7883a 	add	r3,r4,r3
  1154dc:	18c00003 	ldbu	r3,0(r3)
  1154e0:	1885883a 	add	r2,r3,r2
  1154e4:	00c00804 	movi	r3,32
  1154e8:	1887c83a 	sub	r3,r3,r2
  1154ec:	1800a51e 	bne	r3,zero,115784 <__udivdi3+0x484>
  1154f0:	882ad43a 	srli	r21,r17,16
  1154f4:	8461c83a 	sub	r16,r16,r17
  1154f8:	8d3fffcc 	andi	r20,r17,65535
  1154fc:	00c00044 	movi	r3,1
  115500:	a80b883a 	mov	r5,r21
  115504:	8009883a 	mov	r4,r16
  115508:	d8c00115 	stw	r3,4(sp)
  11550c:	011601c0 	call	11601c <__umodsi3>
  115510:	a80b883a 	mov	r5,r21
  115514:	8009883a 	mov	r4,r16
  115518:	1027883a 	mov	r19,r2
  11551c:	0115fb80 	call	115fb8 <__udivsi3>
  115520:	a00b883a 	mov	r5,r20
  115524:	1009883a 	mov	r4,r2
  115528:	102d883a 	mov	r22,r2
  11552c:	01160740 	call	116074 <__mulsi3>
  115530:	9826943a 	slli	r19,r19,16
  115534:	900ed43a 	srli	r7,r18,16
  115538:	d8c00117 	ldw	r3,4(sp)
  11553c:	3cceb03a 	or	r7,r7,r19
  115540:	3880052e 	bgeu	r7,r2,115558 <__udivdi3+0x258>
  115544:	3c4f883a 	add	r7,r7,r17
  115548:	b13fffc4 	addi	r4,r22,-1
  11554c:	3c400136 	bltu	r7,r17,115554 <__udivdi3+0x254>
  115550:	3880e436 	bltu	r7,r2,1158e4 <__udivdi3+0x5e4>
  115554:	202d883a 	mov	r22,r4
  115558:	38a1c83a 	sub	r16,r7,r2
  11555c:	8009883a 	mov	r4,r16
  115560:	a80b883a 	mov	r5,r21
  115564:	d8c00115 	stw	r3,4(sp)
  115568:	011601c0 	call	11601c <__umodsi3>
  11556c:	1027883a 	mov	r19,r2
  115570:	8009883a 	mov	r4,r16
  115574:	a80b883a 	mov	r5,r21
  115578:	9826943a 	slli	r19,r19,16
  11557c:	0115fb80 	call	115fb8 <__udivsi3>
  115580:	a00b883a 	mov	r5,r20
  115584:	1009883a 	mov	r4,r2
  115588:	94bfffcc 	andi	r18,r18,65535
  11558c:	1021883a 	mov	r16,r2
  115590:	94e4b03a 	or	r18,r18,r19
  115594:	01160740 	call	116074 <__mulsi3>
  115598:	d8c00117 	ldw	r3,4(sp)
  11559c:	9080052e 	bgeu	r18,r2,1155b4 <__udivdi3+0x2b4>
  1155a0:	8ca5883a 	add	r18,r17,r18
  1155a4:	813fffc4 	addi	r4,r16,-1
  1155a8:	9440ad36 	bltu	r18,r17,115860 <__udivdi3+0x560>
  1155ac:	9080ac2e 	bgeu	r18,r2,115860 <__udivdi3+0x560>
  1155b0:	843fff84 	addi	r16,r16,-2
  1155b4:	b004943a 	slli	r2,r22,16
  1155b8:	1404b03a 	or	r2,r2,r16
  1155bc:	00000206 	br	1155c8 <__udivdi3+0x2c8>
  1155c0:	0007883a 	mov	r3,zero
  1155c4:	0005883a 	mov	r2,zero
  1155c8:	dfc00b17 	ldw	ra,44(sp)
  1155cc:	df000a17 	ldw	fp,40(sp)
  1155d0:	ddc00917 	ldw	r23,36(sp)
  1155d4:	dd800817 	ldw	r22,32(sp)
  1155d8:	dd400717 	ldw	r21,28(sp)
  1155dc:	dd000617 	ldw	r20,24(sp)
  1155e0:	dcc00517 	ldw	r19,20(sp)
  1155e4:	dc800417 	ldw	r18,16(sp)
  1155e8:	dc400317 	ldw	r17,12(sp)
  1155ec:	dc000217 	ldw	r16,8(sp)
  1155f0:	dec00c04 	addi	sp,sp,48
  1155f4:	f800283a 	ret
  1155f8:	00803fc4 	movi	r2,255
  1155fc:	11c5803a 	cmpltu	r2,r2,r7
  115600:	100490fa 	slli	r2,r2,3
  115604:	003f9906 	br	11546c <__alt_data_end+0xfffd546c>
  115608:	00803fc4 	movi	r2,255
  11560c:	1445803a 	cmpltu	r2,r2,r17
  115610:	100490fa 	slli	r2,r2,3
  115614:	003fad06 	br	1154cc <__alt_data_end+0xfffd54cc>
  115618:	00804034 	movhi	r2,256
  11561c:	10bfffc4 	addi	r2,r2,-1
  115620:	11809f36 	bltu	r2,r6,1158a0 <__udivdi3+0x5a0>
  115624:	00800404 	movi	r2,16
  115628:	003f4c06 	br	11535c <__alt_data_end+0xfffd535c>
  11562c:	3dce983a 	sll	r7,r7,r23
  115630:	30b8d83a 	srl	fp,r6,r2
  115634:	80a2d83a 	srl	r17,r16,r2
  115638:	35cc983a 	sll	r6,r6,r23
  11563c:	3f38b03a 	or	fp,r7,fp
  115640:	e024d43a 	srli	r18,fp,16
  115644:	9884d83a 	srl	r2,r19,r2
  115648:	85e0983a 	sll	r16,r16,r23
  11564c:	8809883a 	mov	r4,r17
  115650:	900b883a 	mov	r5,r18
  115654:	d9800015 	stw	r6,0(sp)
  115658:	1420b03a 	or	r16,r2,r16
  11565c:	011601c0 	call	11601c <__umodsi3>
  115660:	900b883a 	mov	r5,r18
  115664:	8809883a 	mov	r4,r17
  115668:	1029883a 	mov	r20,r2
  11566c:	e5bfffcc 	andi	r22,fp,65535
  115670:	0115fb80 	call	115fb8 <__udivsi3>
  115674:	100b883a 	mov	r5,r2
  115678:	b009883a 	mov	r4,r22
  11567c:	102b883a 	mov	r21,r2
  115680:	01160740 	call	116074 <__mulsi3>
  115684:	a028943a 	slli	r20,r20,16
  115688:	8006d43a 	srli	r3,r16,16
  11568c:	1d06b03a 	or	r3,r3,r20
  115690:	1880042e 	bgeu	r3,r2,1156a4 <__udivdi3+0x3a4>
  115694:	1f07883a 	add	r3,r3,fp
  115698:	a93fffc4 	addi	r4,r21,-1
  11569c:	1f00892e 	bgeu	r3,fp,1158c4 <__udivdi3+0x5c4>
  1156a0:	202b883a 	mov	r21,r4
  1156a4:	18a3c83a 	sub	r17,r3,r2
  1156a8:	8809883a 	mov	r4,r17
  1156ac:	900b883a 	mov	r5,r18
  1156b0:	011601c0 	call	11601c <__umodsi3>
  1156b4:	1029883a 	mov	r20,r2
  1156b8:	8809883a 	mov	r4,r17
  1156bc:	900b883a 	mov	r5,r18
  1156c0:	a028943a 	slli	r20,r20,16
  1156c4:	0115fb80 	call	115fb8 <__udivsi3>
  1156c8:	100b883a 	mov	r5,r2
  1156cc:	b009883a 	mov	r4,r22
  1156d0:	843fffcc 	andi	r16,r16,65535
  1156d4:	1023883a 	mov	r17,r2
  1156d8:	8520b03a 	or	r16,r16,r20
  1156dc:	01160740 	call	116074 <__mulsi3>
  1156e0:	8080042e 	bgeu	r16,r2,1156f4 <__udivdi3+0x3f4>
  1156e4:	8721883a 	add	r16,r16,fp
  1156e8:	88ffffc4 	addi	r3,r17,-1
  1156ec:	8700712e 	bgeu	r16,fp,1158b4 <__udivdi3+0x5b4>
  1156f0:	1823883a 	mov	r17,r3
  1156f4:	a80e943a 	slli	r7,r21,16
  1156f8:	d8c00017 	ldw	r3,0(sp)
  1156fc:	80a1c83a 	sub	r16,r16,r2
  115700:	3c64b03a 	or	r18,r7,r17
  115704:	1d3fffcc 	andi	r20,r3,65535
  115708:	9022d43a 	srli	r17,r18,16
  11570c:	95bfffcc 	andi	r22,r18,65535
  115710:	a00b883a 	mov	r5,r20
  115714:	b009883a 	mov	r4,r22
  115718:	182ad43a 	srli	r21,r3,16
  11571c:	01160740 	call	116074 <__mulsi3>
  115720:	a00b883a 	mov	r5,r20
  115724:	8809883a 	mov	r4,r17
  115728:	1039883a 	mov	fp,r2
  11572c:	01160740 	call	116074 <__mulsi3>
  115730:	8809883a 	mov	r4,r17
  115734:	a80b883a 	mov	r5,r21
  115738:	1029883a 	mov	r20,r2
  11573c:	01160740 	call	116074 <__mulsi3>
  115740:	a80b883a 	mov	r5,r21
  115744:	b009883a 	mov	r4,r22
  115748:	1023883a 	mov	r17,r2
  11574c:	01160740 	call	116074 <__mulsi3>
  115750:	e006d43a 	srli	r3,fp,16
  115754:	1505883a 	add	r2,r2,r20
  115758:	1887883a 	add	r3,r3,r2
  11575c:	1d00022e 	bgeu	r3,r20,115768 <__udivdi3+0x468>
  115760:	00800074 	movhi	r2,1
  115764:	88a3883a 	add	r17,r17,r2
  115768:	1804d43a 	srli	r2,r3,16
  11576c:	1463883a 	add	r17,r2,r17
  115770:	84404436 	bltu	r16,r17,115884 <__udivdi3+0x584>
  115774:	84403e26 	beq	r16,r17,115870 <__udivdi3+0x570>
  115778:	9005883a 	mov	r2,r18
  11577c:	0007883a 	mov	r3,zero
  115780:	003f9106 	br	1155c8 <__alt_data_end+0xfffd55c8>
  115784:	88e2983a 	sll	r17,r17,r3
  115788:	80aed83a 	srl	r23,r16,r2
  11578c:	80e0983a 	sll	r16,r16,r3
  115790:	882ad43a 	srli	r21,r17,16
  115794:	9884d83a 	srl	r2,r19,r2
  115798:	b809883a 	mov	r4,r23
  11579c:	a80b883a 	mov	r5,r21
  1157a0:	98e4983a 	sll	r18,r19,r3
  1157a4:	142cb03a 	or	r22,r2,r16
  1157a8:	011601c0 	call	11601c <__umodsi3>
  1157ac:	b809883a 	mov	r4,r23
  1157b0:	a80b883a 	mov	r5,r21
  1157b4:	1027883a 	mov	r19,r2
  1157b8:	8d3fffcc 	andi	r20,r17,65535
  1157bc:	0115fb80 	call	115fb8 <__udivsi3>
  1157c0:	a009883a 	mov	r4,r20
  1157c4:	100b883a 	mov	r5,r2
  1157c8:	102f883a 	mov	r23,r2
  1157cc:	01160740 	call	116074 <__mulsi3>
  1157d0:	9826943a 	slli	r19,r19,16
  1157d4:	b008d43a 	srli	r4,r22,16
  1157d8:	24c8b03a 	or	r4,r4,r19
  1157dc:	2080062e 	bgeu	r4,r2,1157f8 <__udivdi3+0x4f8>
  1157e0:	2449883a 	add	r4,r4,r17
  1157e4:	b8ffffc4 	addi	r3,r23,-1
  1157e8:	24403c36 	bltu	r4,r17,1158dc <__udivdi3+0x5dc>
  1157ec:	20803b2e 	bgeu	r4,r2,1158dc <__udivdi3+0x5dc>
  1157f0:	bdffff84 	addi	r23,r23,-2
  1157f4:	2449883a 	add	r4,r4,r17
  1157f8:	20a1c83a 	sub	r16,r4,r2
  1157fc:	a80b883a 	mov	r5,r21
  115800:	8009883a 	mov	r4,r16
  115804:	011601c0 	call	11601c <__umodsi3>
  115808:	a80b883a 	mov	r5,r21
  11580c:	8009883a 	mov	r4,r16
  115810:	1027883a 	mov	r19,r2
  115814:	0115fb80 	call	115fb8 <__udivsi3>
  115818:	a009883a 	mov	r4,r20
  11581c:	100b883a 	mov	r5,r2
  115820:	9826943a 	slli	r19,r19,16
  115824:	1039883a 	mov	fp,r2
  115828:	01160740 	call	116074 <__mulsi3>
  11582c:	b13fffcc 	andi	r4,r22,65535
  115830:	24c8b03a 	or	r4,r4,r19
  115834:	2080062e 	bgeu	r4,r2,115850 <__udivdi3+0x550>
  115838:	2449883a 	add	r4,r4,r17
  11583c:	e0ffffc4 	addi	r3,fp,-1
  115840:	24402436 	bltu	r4,r17,1158d4 <__udivdi3+0x5d4>
  115844:	2080232e 	bgeu	r4,r2,1158d4 <__udivdi3+0x5d4>
  115848:	e73fff84 	addi	fp,fp,-2
  11584c:	2449883a 	add	r4,r4,r17
  115850:	b82e943a 	slli	r23,r23,16
  115854:	20a1c83a 	sub	r16,r4,r2
  115858:	bf06b03a 	or	r3,r23,fp
  11585c:	003f2806 	br	115500 <__alt_data_end+0xfffd5500>
  115860:	2021883a 	mov	r16,r4
  115864:	003f5306 	br	1155b4 <__alt_data_end+0xfffd55b4>
  115868:	1821883a 	mov	r16,r3
  11586c:	003ef406 	br	115440 <__alt_data_end+0xfffd5440>
  115870:	1806943a 	slli	r3,r3,16
  115874:	9de6983a 	sll	r19,r19,r23
  115878:	e73fffcc 	andi	fp,fp,65535
  11587c:	1f07883a 	add	r3,r3,fp
  115880:	98ffbd2e 	bgeu	r19,r3,115778 <__alt_data_end+0xfffd5778>
  115884:	90bfffc4 	addi	r2,r18,-1
  115888:	0007883a 	mov	r3,zero
  11588c:	003f4e06 	br	1155c8 <__alt_data_end+0xfffd55c8>
  115890:	00800604 	movi	r2,24
  115894:	003ef506 	br	11546c <__alt_data_end+0xfffd546c>
  115898:	00800604 	movi	r2,24
  11589c:	003f0b06 	br	1154cc <__alt_data_end+0xfffd54cc>
  1158a0:	00800604 	movi	r2,24
  1158a4:	003ead06 	br	11535c <__alt_data_end+0xfffd535c>
  1158a8:	0007883a 	mov	r3,zero
  1158ac:	00800044 	movi	r2,1
  1158b0:	003f4506 	br	1155c8 <__alt_data_end+0xfffd55c8>
  1158b4:	80bf8e2e 	bgeu	r16,r2,1156f0 <__alt_data_end+0xfffd56f0>
  1158b8:	8c7fff84 	addi	r17,r17,-2
  1158bc:	8721883a 	add	r16,r16,fp
  1158c0:	003f8c06 	br	1156f4 <__alt_data_end+0xfffd56f4>
  1158c4:	18bf762e 	bgeu	r3,r2,1156a0 <__alt_data_end+0xfffd56a0>
  1158c8:	ad7fff84 	addi	r21,r21,-2
  1158cc:	1f07883a 	add	r3,r3,fp
  1158d0:	003f7406 	br	1156a4 <__alt_data_end+0xfffd56a4>
  1158d4:	1839883a 	mov	fp,r3
  1158d8:	003fdd06 	br	115850 <__alt_data_end+0xfffd5850>
  1158dc:	182f883a 	mov	r23,r3
  1158e0:	003fc506 	br	1157f8 <__alt_data_end+0xfffd57f8>
  1158e4:	b5bfff84 	addi	r22,r22,-2
  1158e8:	3c4f883a 	add	r7,r7,r17
  1158ec:	003f1a06 	br	115558 <__alt_data_end+0xfffd5558>
  1158f0:	b5bfff84 	addi	r22,r22,-2
  1158f4:	1c47883a 	add	r3,r3,r17
  1158f8:	003ebc06 	br	1153ec <__alt_data_end+0xfffd53ec>

001158fc <__umoddi3>:
  1158fc:	defff304 	addi	sp,sp,-52
  115900:	df000b15 	stw	fp,44(sp)
  115904:	dc400415 	stw	r17,16(sp)
  115908:	dc000315 	stw	r16,12(sp)
  11590c:	dfc00c15 	stw	ra,48(sp)
  115910:	ddc00a15 	stw	r23,40(sp)
  115914:	dd800915 	stw	r22,36(sp)
  115918:	dd400815 	stw	r21,32(sp)
  11591c:	dd000715 	stw	r20,28(sp)
  115920:	dcc00615 	stw	r19,24(sp)
  115924:	dc800515 	stw	r18,20(sp)
  115928:	2021883a 	mov	r16,r4
  11592c:	2823883a 	mov	r17,r5
  115930:	2839883a 	mov	fp,r5
  115934:	3800401e 	bne	r7,zero,115a38 <__umoddi3+0x13c>
  115938:	3027883a 	mov	r19,r6
  11593c:	2029883a 	mov	r20,r4
  115940:	2980552e 	bgeu	r5,r6,115a98 <__umoddi3+0x19c>
  115944:	00bfffd4 	movui	r2,65535
  115948:	1180a236 	bltu	r2,r6,115bd4 <__umoddi3+0x2d8>
  11594c:	01003fc4 	movi	r4,255
  115950:	2189803a 	cmpltu	r4,r4,r6
  115954:	200890fa 	slli	r4,r4,3
  115958:	3104d83a 	srl	r2,r6,r4
  11595c:	00c004b4 	movhi	r3,18
  115960:	18cfce84 	addi	r3,r3,16186
  115964:	1885883a 	add	r2,r3,r2
  115968:	10c00003 	ldbu	r3,0(r2)
  11596c:	00800804 	movi	r2,32
  115970:	1909883a 	add	r4,r3,r4
  115974:	1125c83a 	sub	r18,r2,r4
  115978:	90000526 	beq	r18,zero,115990 <__umoddi3+0x94>
  11597c:	8ca2983a 	sll	r17,r17,r18
  115980:	8108d83a 	srl	r4,r16,r4
  115984:	34a6983a 	sll	r19,r6,r18
  115988:	84a8983a 	sll	r20,r16,r18
  11598c:	2478b03a 	or	fp,r4,r17
  115990:	982cd43a 	srli	r22,r19,16
  115994:	e009883a 	mov	r4,fp
  115998:	9dffffcc 	andi	r23,r19,65535
  11599c:	b00b883a 	mov	r5,r22
  1159a0:	011601c0 	call	11601c <__umodsi3>
  1159a4:	b00b883a 	mov	r5,r22
  1159a8:	e009883a 	mov	r4,fp
  1159ac:	102b883a 	mov	r21,r2
  1159b0:	0115fb80 	call	115fb8 <__udivsi3>
  1159b4:	100b883a 	mov	r5,r2
  1159b8:	b809883a 	mov	r4,r23
  1159bc:	01160740 	call	116074 <__mulsi3>
  1159c0:	a82a943a 	slli	r21,r21,16
  1159c4:	a006d43a 	srli	r3,r20,16
  1159c8:	1d46b03a 	or	r3,r3,r21
  1159cc:	1880032e 	bgeu	r3,r2,1159dc <__umoddi3+0xe0>
  1159d0:	1cc7883a 	add	r3,r3,r19
  1159d4:	1cc00136 	bltu	r3,r19,1159dc <__umoddi3+0xe0>
  1159d8:	18813136 	bltu	r3,r2,115ea0 <__umoddi3+0x5a4>
  1159dc:	18a1c83a 	sub	r16,r3,r2
  1159e0:	b00b883a 	mov	r5,r22
  1159e4:	8009883a 	mov	r4,r16
  1159e8:	011601c0 	call	11601c <__umodsi3>
  1159ec:	b00b883a 	mov	r5,r22
  1159f0:	8009883a 	mov	r4,r16
  1159f4:	1023883a 	mov	r17,r2
  1159f8:	0115fb80 	call	115fb8 <__udivsi3>
  1159fc:	100b883a 	mov	r5,r2
  115a00:	b809883a 	mov	r4,r23
  115a04:	8822943a 	slli	r17,r17,16
  115a08:	01160740 	call	116074 <__mulsi3>
  115a0c:	a0ffffcc 	andi	r3,r20,65535
  115a10:	1c46b03a 	or	r3,r3,r17
  115a14:	1880042e 	bgeu	r3,r2,115a28 <__umoddi3+0x12c>
  115a18:	1cc7883a 	add	r3,r3,r19
  115a1c:	1cc00236 	bltu	r3,r19,115a28 <__umoddi3+0x12c>
  115a20:	1880012e 	bgeu	r3,r2,115a28 <__umoddi3+0x12c>
  115a24:	1cc7883a 	add	r3,r3,r19
  115a28:	1885c83a 	sub	r2,r3,r2
  115a2c:	1484d83a 	srl	r2,r2,r18
  115a30:	0007883a 	mov	r3,zero
  115a34:	00005306 	br	115b84 <__umoddi3+0x288>
  115a38:	29c05036 	bltu	r5,r7,115b7c <__umoddi3+0x280>
  115a3c:	00bfffd4 	movui	r2,65535
  115a40:	11c05c2e 	bgeu	r2,r7,115bb4 <__umoddi3+0x2b8>
  115a44:	00804034 	movhi	r2,256
  115a48:	10bfffc4 	addi	r2,r2,-1
  115a4c:	11c10636 	bltu	r2,r7,115e68 <__umoddi3+0x56c>
  115a50:	01000404 	movi	r4,16
  115a54:	3904d83a 	srl	r2,r7,r4
  115a58:	00c004b4 	movhi	r3,18
  115a5c:	18cfce84 	addi	r3,r3,16186
  115a60:	1885883a 	add	r2,r3,r2
  115a64:	14c00003 	ldbu	r19,0(r2)
  115a68:	00c00804 	movi	r3,32
  115a6c:	9927883a 	add	r19,r19,r4
  115a70:	1ce9c83a 	sub	r20,r3,r19
  115a74:	a0005c1e 	bne	r20,zero,115be8 <__umoddi3+0x2ec>
  115a78:	3c400136 	bltu	r7,r17,115a80 <__umoddi3+0x184>
  115a7c:	81810a36 	bltu	r16,r6,115ea8 <__umoddi3+0x5ac>
  115a80:	8185c83a 	sub	r2,r16,r6
  115a84:	89e3c83a 	sub	r17,r17,r7
  115a88:	8089803a 	cmpltu	r4,r16,r2
  115a8c:	8939c83a 	sub	fp,r17,r4
  115a90:	e007883a 	mov	r3,fp
  115a94:	00003b06 	br	115b84 <__umoddi3+0x288>
  115a98:	3000041e 	bne	r6,zero,115aac <__umoddi3+0x1b0>
  115a9c:	000b883a 	mov	r5,zero
  115aa0:	01000044 	movi	r4,1
  115aa4:	0115fb80 	call	115fb8 <__udivsi3>
  115aa8:	1027883a 	mov	r19,r2
  115aac:	00bfffd4 	movui	r2,65535
  115ab0:	14c0442e 	bgeu	r2,r19,115bc4 <__umoddi3+0x2c8>
  115ab4:	00804034 	movhi	r2,256
  115ab8:	10bfffc4 	addi	r2,r2,-1
  115abc:	14c0ec36 	bltu	r2,r19,115e70 <__umoddi3+0x574>
  115ac0:	00800404 	movi	r2,16
  115ac4:	9886d83a 	srl	r3,r19,r2
  115ac8:	010004b4 	movhi	r4,18
  115acc:	210fce84 	addi	r4,r4,16186
  115ad0:	20c7883a 	add	r3,r4,r3
  115ad4:	18c00003 	ldbu	r3,0(r3)
  115ad8:	1887883a 	add	r3,r3,r2
  115adc:	00800804 	movi	r2,32
  115ae0:	10e5c83a 	sub	r18,r2,r3
  115ae4:	9000ab1e 	bne	r18,zero,115d94 <__umoddi3+0x498>
  115ae8:	982cd43a 	srli	r22,r19,16
  115aec:	8ce3c83a 	sub	r17,r17,r19
  115af0:	9dffffcc 	andi	r23,r19,65535
  115af4:	b00b883a 	mov	r5,r22
  115af8:	8809883a 	mov	r4,r17
  115afc:	011601c0 	call	11601c <__umodsi3>
  115b00:	b00b883a 	mov	r5,r22
  115b04:	8809883a 	mov	r4,r17
  115b08:	102b883a 	mov	r21,r2
  115b0c:	0115fb80 	call	115fb8 <__udivsi3>
  115b10:	b80b883a 	mov	r5,r23
  115b14:	1009883a 	mov	r4,r2
  115b18:	01160740 	call	116074 <__mulsi3>
  115b1c:	a82a943a 	slli	r21,r21,16
  115b20:	a006d43a 	srli	r3,r20,16
  115b24:	1d46b03a 	or	r3,r3,r21
  115b28:	1880042e 	bgeu	r3,r2,115b3c <__umoddi3+0x240>
  115b2c:	1cc7883a 	add	r3,r3,r19
  115b30:	1cc00236 	bltu	r3,r19,115b3c <__umoddi3+0x240>
  115b34:	1880012e 	bgeu	r3,r2,115b3c <__umoddi3+0x240>
  115b38:	1cc7883a 	add	r3,r3,r19
  115b3c:	18a1c83a 	sub	r16,r3,r2
  115b40:	b00b883a 	mov	r5,r22
  115b44:	8009883a 	mov	r4,r16
  115b48:	011601c0 	call	11601c <__umodsi3>
  115b4c:	1023883a 	mov	r17,r2
  115b50:	b00b883a 	mov	r5,r22
  115b54:	8009883a 	mov	r4,r16
  115b58:	0115fb80 	call	115fb8 <__udivsi3>
  115b5c:	8822943a 	slli	r17,r17,16
  115b60:	b80b883a 	mov	r5,r23
  115b64:	1009883a 	mov	r4,r2
  115b68:	01160740 	call	116074 <__mulsi3>
  115b6c:	a53fffcc 	andi	r20,r20,65535
  115b70:	a446b03a 	or	r3,r20,r17
  115b74:	18bfac2e 	bgeu	r3,r2,115a28 <__alt_data_end+0xfffd5a28>
  115b78:	003fa706 	br	115a18 <__alt_data_end+0xfffd5a18>
  115b7c:	2005883a 	mov	r2,r4
  115b80:	2807883a 	mov	r3,r5
  115b84:	dfc00c17 	ldw	ra,48(sp)
  115b88:	df000b17 	ldw	fp,44(sp)
  115b8c:	ddc00a17 	ldw	r23,40(sp)
  115b90:	dd800917 	ldw	r22,36(sp)
  115b94:	dd400817 	ldw	r21,32(sp)
  115b98:	dd000717 	ldw	r20,28(sp)
  115b9c:	dcc00617 	ldw	r19,24(sp)
  115ba0:	dc800517 	ldw	r18,20(sp)
  115ba4:	dc400417 	ldw	r17,16(sp)
  115ba8:	dc000317 	ldw	r16,12(sp)
  115bac:	dec00d04 	addi	sp,sp,52
  115bb0:	f800283a 	ret
  115bb4:	04c03fc4 	movi	r19,255
  115bb8:	99c9803a 	cmpltu	r4,r19,r7
  115bbc:	200890fa 	slli	r4,r4,3
  115bc0:	003fa406 	br	115a54 <__alt_data_end+0xfffd5a54>
  115bc4:	00803fc4 	movi	r2,255
  115bc8:	14c5803a 	cmpltu	r2,r2,r19
  115bcc:	100490fa 	slli	r2,r2,3
  115bd0:	003fbc06 	br	115ac4 <__alt_data_end+0xfffd5ac4>
  115bd4:	00804034 	movhi	r2,256
  115bd8:	10bfffc4 	addi	r2,r2,-1
  115bdc:	1180a636 	bltu	r2,r6,115e78 <__umoddi3+0x57c>
  115be0:	01000404 	movi	r4,16
  115be4:	003f5c06 	br	115958 <__alt_data_end+0xfffd5958>
  115be8:	3d0e983a 	sll	r7,r7,r20
  115bec:	34ead83a 	srl	r21,r6,r19
  115bf0:	8cc6d83a 	srl	r3,r17,r19
  115bf4:	8d10983a 	sll	r8,r17,r20
  115bf8:	3d6ab03a 	or	r21,r7,r21
  115bfc:	a82cd43a 	srli	r22,r21,16
  115c00:	84e2d83a 	srl	r17,r16,r19
  115c04:	1809883a 	mov	r4,r3
  115c08:	b00b883a 	mov	r5,r22
  115c0c:	8a22b03a 	or	r17,r17,r8
  115c10:	3524983a 	sll	r18,r6,r20
  115c14:	dc400015 	stw	r17,0(sp)
  115c18:	d8c00115 	stw	r3,4(sp)
  115c1c:	011601c0 	call	11601c <__umodsi3>
  115c20:	d8c00117 	ldw	r3,4(sp)
  115c24:	b00b883a 	mov	r5,r22
  115c28:	1039883a 	mov	fp,r2
  115c2c:	1809883a 	mov	r4,r3
  115c30:	0115fb80 	call	115fb8 <__udivsi3>
  115c34:	adffffcc 	andi	r23,r21,65535
  115c38:	100b883a 	mov	r5,r2
  115c3c:	b809883a 	mov	r4,r23
  115c40:	1023883a 	mov	r17,r2
  115c44:	01160740 	call	116074 <__mulsi3>
  115c48:	d9400017 	ldw	r5,0(sp)
  115c4c:	e008943a 	slli	r4,fp,16
  115c50:	8520983a 	sll	r16,r16,r20
  115c54:	2806d43a 	srli	r3,r5,16
  115c58:	1906b03a 	or	r3,r3,r4
  115c5c:	1880042e 	bgeu	r3,r2,115c70 <__umoddi3+0x374>
  115c60:	1d47883a 	add	r3,r3,r21
  115c64:	893fffc4 	addi	r4,r17,-1
  115c68:	1d40892e 	bgeu	r3,r21,115e90 <__umoddi3+0x594>
  115c6c:	2023883a 	mov	r17,r4
  115c70:	18b9c83a 	sub	fp,r3,r2
  115c74:	b00b883a 	mov	r5,r22
  115c78:	e009883a 	mov	r4,fp
  115c7c:	011601c0 	call	11601c <__umodsi3>
  115c80:	b00b883a 	mov	r5,r22
  115c84:	e009883a 	mov	r4,fp
  115c88:	d8800215 	stw	r2,8(sp)
  115c8c:	0115fb80 	call	115fb8 <__udivsi3>
  115c90:	100b883a 	mov	r5,r2
  115c94:	b809883a 	mov	r4,r23
  115c98:	102d883a 	mov	r22,r2
  115c9c:	01160740 	call	116074 <__mulsi3>
  115ca0:	d9800217 	ldw	r6,8(sp)
  115ca4:	d8c00017 	ldw	r3,0(sp)
  115ca8:	300c943a 	slli	r6,r6,16
  115cac:	1a3fffcc 	andi	r8,r3,65535
  115cb0:	4190b03a 	or	r8,r8,r6
  115cb4:	4080042e 	bgeu	r8,r2,115cc8 <__umoddi3+0x3cc>
  115cb8:	4551883a 	add	r8,r8,r21
  115cbc:	b0ffffc4 	addi	r3,r22,-1
  115cc0:	45406f2e 	bgeu	r8,r21,115e80 <__umoddi3+0x584>
  115cc4:	182d883a 	mov	r22,r3
  115cc8:	880e943a 	slli	r7,r17,16
  115ccc:	9006d43a 	srli	r3,r18,16
  115cd0:	91bfffcc 	andi	r6,r18,65535
  115cd4:	3dacb03a 	or	r22,r7,r22
  115cd8:	b02ed43a 	srli	r23,r22,16
  115cdc:	b5bfffcc 	andi	r22,r22,65535
  115ce0:	300b883a 	mov	r5,r6
  115ce4:	b009883a 	mov	r4,r22
  115ce8:	40a3c83a 	sub	r17,r8,r2
  115cec:	d8c00115 	stw	r3,4(sp)
  115cf0:	d9800215 	stw	r6,8(sp)
  115cf4:	01160740 	call	116074 <__mulsi3>
  115cf8:	d9800217 	ldw	r6,8(sp)
  115cfc:	b809883a 	mov	r4,r23
  115d00:	1039883a 	mov	fp,r2
  115d04:	300b883a 	mov	r5,r6
  115d08:	01160740 	call	116074 <__mulsi3>
  115d0c:	d8c00117 	ldw	r3,4(sp)
  115d10:	b809883a 	mov	r4,r23
  115d14:	d8800215 	stw	r2,8(sp)
  115d18:	180b883a 	mov	r5,r3
  115d1c:	01160740 	call	116074 <__mulsi3>
  115d20:	d8c00117 	ldw	r3,4(sp)
  115d24:	b009883a 	mov	r4,r22
  115d28:	102f883a 	mov	r23,r2
  115d2c:	180b883a 	mov	r5,r3
  115d30:	01160740 	call	116074 <__mulsi3>
  115d34:	d9800217 	ldw	r6,8(sp)
  115d38:	e006d43a 	srli	r3,fp,16
  115d3c:	1185883a 	add	r2,r2,r6
  115d40:	1885883a 	add	r2,r3,r2
  115d44:	1180022e 	bgeu	r2,r6,115d50 <__umoddi3+0x454>
  115d48:	00c00074 	movhi	r3,1
  115d4c:	b8ef883a 	add	r23,r23,r3
  115d50:	1006d43a 	srli	r3,r2,16
  115d54:	1004943a 	slli	r2,r2,16
  115d58:	e73fffcc 	andi	fp,fp,65535
  115d5c:	1dc7883a 	add	r3,r3,r23
  115d60:	1739883a 	add	fp,r2,fp
  115d64:	88c03a36 	bltu	r17,r3,115e50 <__umoddi3+0x554>
  115d68:	88c05126 	beq	r17,r3,115eb0 <__umoddi3+0x5b4>
  115d6c:	88c9c83a 	sub	r4,r17,r3
  115d70:	e00f883a 	mov	r7,fp
  115d74:	81cfc83a 	sub	r7,r16,r7
  115d78:	81c7803a 	cmpltu	r3,r16,r7
  115d7c:	20c7c83a 	sub	r3,r4,r3
  115d80:	1cc4983a 	sll	r2,r3,r19
  115d84:	3d0ed83a 	srl	r7,r7,r20
  115d88:	1d06d83a 	srl	r3,r3,r20
  115d8c:	11c4b03a 	or	r2,r2,r7
  115d90:	003f7c06 	br	115b84 <__alt_data_end+0xfffd5b84>
  115d94:	9ca6983a 	sll	r19,r19,r18
  115d98:	88f8d83a 	srl	fp,r17,r3
  115d9c:	80c4d83a 	srl	r2,r16,r3
  115da0:	982cd43a 	srli	r22,r19,16
  115da4:	8ca2983a 	sll	r17,r17,r18
  115da8:	e009883a 	mov	r4,fp
  115dac:	b00b883a 	mov	r5,r22
  115db0:	146ab03a 	or	r21,r2,r17
  115db4:	011601c0 	call	11601c <__umodsi3>
  115db8:	b00b883a 	mov	r5,r22
  115dbc:	e009883a 	mov	r4,fp
  115dc0:	1029883a 	mov	r20,r2
  115dc4:	9dffffcc 	andi	r23,r19,65535
  115dc8:	0115fb80 	call	115fb8 <__udivsi3>
  115dcc:	b809883a 	mov	r4,r23
  115dd0:	100b883a 	mov	r5,r2
  115dd4:	01160740 	call	116074 <__mulsi3>
  115dd8:	a008943a 	slli	r4,r20,16
  115ddc:	a806d43a 	srli	r3,r21,16
  115de0:	84a8983a 	sll	r20,r16,r18
  115de4:	1906b03a 	or	r3,r3,r4
  115de8:	1880042e 	bgeu	r3,r2,115dfc <__umoddi3+0x500>
  115dec:	1cc7883a 	add	r3,r3,r19
  115df0:	1cc00236 	bltu	r3,r19,115dfc <__umoddi3+0x500>
  115df4:	1880012e 	bgeu	r3,r2,115dfc <__umoddi3+0x500>
  115df8:	1cc7883a 	add	r3,r3,r19
  115dfc:	18a3c83a 	sub	r17,r3,r2
  115e00:	b00b883a 	mov	r5,r22
  115e04:	8809883a 	mov	r4,r17
  115e08:	011601c0 	call	11601c <__umodsi3>
  115e0c:	b00b883a 	mov	r5,r22
  115e10:	8809883a 	mov	r4,r17
  115e14:	1021883a 	mov	r16,r2
  115e18:	0115fb80 	call	115fb8 <__udivsi3>
  115e1c:	100b883a 	mov	r5,r2
  115e20:	b809883a 	mov	r4,r23
  115e24:	8020943a 	slli	r16,r16,16
  115e28:	01160740 	call	116074 <__mulsi3>
  115e2c:	a8ffffcc 	andi	r3,r21,65535
  115e30:	1c06b03a 	or	r3,r3,r16
  115e34:	1880042e 	bgeu	r3,r2,115e48 <__umoddi3+0x54c>
  115e38:	1cc7883a 	add	r3,r3,r19
  115e3c:	1cc00236 	bltu	r3,r19,115e48 <__umoddi3+0x54c>
  115e40:	1880012e 	bgeu	r3,r2,115e48 <__umoddi3+0x54c>
  115e44:	1cc7883a 	add	r3,r3,r19
  115e48:	18a3c83a 	sub	r17,r3,r2
  115e4c:	003f2906 	br	115af4 <__alt_data_end+0xfffd5af4>
  115e50:	e48fc83a 	sub	r7,fp,r18
  115e54:	1d49c83a 	sub	r4,r3,r21
  115e58:	e1f9803a 	cmpltu	fp,fp,r7
  115e5c:	2739c83a 	sub	fp,r4,fp
  115e60:	8f09c83a 	sub	r4,r17,fp
  115e64:	003fc306 	br	115d74 <__alt_data_end+0xfffd5d74>
  115e68:	01000604 	movi	r4,24
  115e6c:	003ef906 	br	115a54 <__alt_data_end+0xfffd5a54>
  115e70:	00800604 	movi	r2,24
  115e74:	003f1306 	br	115ac4 <__alt_data_end+0xfffd5ac4>
  115e78:	01000604 	movi	r4,24
  115e7c:	003eb606 	br	115958 <__alt_data_end+0xfffd5958>
  115e80:	40bf902e 	bgeu	r8,r2,115cc4 <__alt_data_end+0xfffd5cc4>
  115e84:	b5bfff84 	addi	r22,r22,-2
  115e88:	4551883a 	add	r8,r8,r21
  115e8c:	003f8e06 	br	115cc8 <__alt_data_end+0xfffd5cc8>
  115e90:	18bf762e 	bgeu	r3,r2,115c6c <__alt_data_end+0xfffd5c6c>
  115e94:	8c7fff84 	addi	r17,r17,-2
  115e98:	1d47883a 	add	r3,r3,r21
  115e9c:	003f7406 	br	115c70 <__alt_data_end+0xfffd5c70>
  115ea0:	1cc7883a 	add	r3,r3,r19
  115ea4:	003ecd06 	br	1159dc <__alt_data_end+0xfffd59dc>
  115ea8:	8005883a 	mov	r2,r16
  115eac:	003ef806 	br	115a90 <__alt_data_end+0xfffd5a90>
  115eb0:	873fe736 	bltu	r16,fp,115e50 <__alt_data_end+0xfffd5e50>
  115eb4:	e00f883a 	mov	r7,fp
  115eb8:	0009883a 	mov	r4,zero
  115ebc:	003fad06 	br	115d74 <__alt_data_end+0xfffd5d74>

00115ec0 <__divsi3>:
  115ec0:	20001b16 	blt	r4,zero,115f30 <__divsi3+0x70>
  115ec4:	000f883a 	mov	r7,zero
  115ec8:	28001616 	blt	r5,zero,115f24 <__divsi3+0x64>
  115ecc:	200d883a 	mov	r6,r4
  115ed0:	29001a2e 	bgeu	r5,r4,115f3c <__divsi3+0x7c>
  115ed4:	00800804 	movi	r2,32
  115ed8:	00c00044 	movi	r3,1
  115edc:	00000106 	br	115ee4 <__divsi3+0x24>
  115ee0:	10000d26 	beq	r2,zero,115f18 <__divsi3+0x58>
  115ee4:	294b883a 	add	r5,r5,r5
  115ee8:	10bfffc4 	addi	r2,r2,-1
  115eec:	18c7883a 	add	r3,r3,r3
  115ef0:	293ffb36 	bltu	r5,r4,115ee0 <__alt_data_end+0xfffd5ee0>
  115ef4:	0005883a 	mov	r2,zero
  115ef8:	18000726 	beq	r3,zero,115f18 <__divsi3+0x58>
  115efc:	0005883a 	mov	r2,zero
  115f00:	31400236 	bltu	r6,r5,115f0c <__divsi3+0x4c>
  115f04:	314dc83a 	sub	r6,r6,r5
  115f08:	10c4b03a 	or	r2,r2,r3
  115f0c:	1806d07a 	srli	r3,r3,1
  115f10:	280ad07a 	srli	r5,r5,1
  115f14:	183ffa1e 	bne	r3,zero,115f00 <__alt_data_end+0xfffd5f00>
  115f18:	38000126 	beq	r7,zero,115f20 <__divsi3+0x60>
  115f1c:	0085c83a 	sub	r2,zero,r2
  115f20:	f800283a 	ret
  115f24:	014bc83a 	sub	r5,zero,r5
  115f28:	39c0005c 	xori	r7,r7,1
  115f2c:	003fe706 	br	115ecc <__alt_data_end+0xfffd5ecc>
  115f30:	0109c83a 	sub	r4,zero,r4
  115f34:	01c00044 	movi	r7,1
  115f38:	003fe306 	br	115ec8 <__alt_data_end+0xfffd5ec8>
  115f3c:	00c00044 	movi	r3,1
  115f40:	003fee06 	br	115efc <__alt_data_end+0xfffd5efc>

00115f44 <__modsi3>:
  115f44:	20001716 	blt	r4,zero,115fa4 <__modsi3+0x60>
  115f48:	000f883a 	mov	r7,zero
  115f4c:	2005883a 	mov	r2,r4
  115f50:	28001216 	blt	r5,zero,115f9c <__modsi3+0x58>
  115f54:	2900162e 	bgeu	r5,r4,115fb0 <__modsi3+0x6c>
  115f58:	01800804 	movi	r6,32
  115f5c:	00c00044 	movi	r3,1
  115f60:	00000106 	br	115f68 <__modsi3+0x24>
  115f64:	30000a26 	beq	r6,zero,115f90 <__modsi3+0x4c>
  115f68:	294b883a 	add	r5,r5,r5
  115f6c:	31bfffc4 	addi	r6,r6,-1
  115f70:	18c7883a 	add	r3,r3,r3
  115f74:	293ffb36 	bltu	r5,r4,115f64 <__alt_data_end+0xfffd5f64>
  115f78:	18000526 	beq	r3,zero,115f90 <__modsi3+0x4c>
  115f7c:	1806d07a 	srli	r3,r3,1
  115f80:	11400136 	bltu	r2,r5,115f88 <__modsi3+0x44>
  115f84:	1145c83a 	sub	r2,r2,r5
  115f88:	280ad07a 	srli	r5,r5,1
  115f8c:	183ffb1e 	bne	r3,zero,115f7c <__alt_data_end+0xfffd5f7c>
  115f90:	38000126 	beq	r7,zero,115f98 <__modsi3+0x54>
  115f94:	0085c83a 	sub	r2,zero,r2
  115f98:	f800283a 	ret
  115f9c:	014bc83a 	sub	r5,zero,r5
  115fa0:	003fec06 	br	115f54 <__alt_data_end+0xfffd5f54>
  115fa4:	0109c83a 	sub	r4,zero,r4
  115fa8:	01c00044 	movi	r7,1
  115fac:	003fe706 	br	115f4c <__alt_data_end+0xfffd5f4c>
  115fb0:	00c00044 	movi	r3,1
  115fb4:	003ff106 	br	115f7c <__alt_data_end+0xfffd5f7c>

00115fb8 <__udivsi3>:
  115fb8:	200d883a 	mov	r6,r4
  115fbc:	2900152e 	bgeu	r5,r4,116014 <__udivsi3+0x5c>
  115fc0:	28001416 	blt	r5,zero,116014 <__udivsi3+0x5c>
  115fc4:	00800804 	movi	r2,32
  115fc8:	00c00044 	movi	r3,1
  115fcc:	00000206 	br	115fd8 <__udivsi3+0x20>
  115fd0:	10000e26 	beq	r2,zero,11600c <__udivsi3+0x54>
  115fd4:	28000516 	blt	r5,zero,115fec <__udivsi3+0x34>
  115fd8:	294b883a 	add	r5,r5,r5
  115fdc:	10bfffc4 	addi	r2,r2,-1
  115fe0:	18c7883a 	add	r3,r3,r3
  115fe4:	293ffa36 	bltu	r5,r4,115fd0 <__alt_data_end+0xfffd5fd0>
  115fe8:	18000826 	beq	r3,zero,11600c <__udivsi3+0x54>
  115fec:	0005883a 	mov	r2,zero
  115ff0:	31400236 	bltu	r6,r5,115ffc <__udivsi3+0x44>
  115ff4:	314dc83a 	sub	r6,r6,r5
  115ff8:	10c4b03a 	or	r2,r2,r3
  115ffc:	1806d07a 	srli	r3,r3,1
  116000:	280ad07a 	srli	r5,r5,1
  116004:	183ffa1e 	bne	r3,zero,115ff0 <__alt_data_end+0xfffd5ff0>
  116008:	f800283a 	ret
  11600c:	0005883a 	mov	r2,zero
  116010:	f800283a 	ret
  116014:	00c00044 	movi	r3,1
  116018:	003ff406 	br	115fec <__alt_data_end+0xfffd5fec>

0011601c <__umodsi3>:
  11601c:	2005883a 	mov	r2,r4
  116020:	2900122e 	bgeu	r5,r4,11606c <__umodsi3+0x50>
  116024:	28001116 	blt	r5,zero,11606c <__umodsi3+0x50>
  116028:	01800804 	movi	r6,32
  11602c:	00c00044 	movi	r3,1
  116030:	00000206 	br	11603c <__umodsi3+0x20>
  116034:	30000c26 	beq	r6,zero,116068 <__umodsi3+0x4c>
  116038:	28000516 	blt	r5,zero,116050 <__umodsi3+0x34>
  11603c:	294b883a 	add	r5,r5,r5
  116040:	31bfffc4 	addi	r6,r6,-1
  116044:	18c7883a 	add	r3,r3,r3
  116048:	293ffa36 	bltu	r5,r4,116034 <__alt_data_end+0xfffd6034>
  11604c:	18000626 	beq	r3,zero,116068 <__umodsi3+0x4c>
  116050:	1806d07a 	srli	r3,r3,1
  116054:	11400136 	bltu	r2,r5,11605c <__umodsi3+0x40>
  116058:	1145c83a 	sub	r2,r2,r5
  11605c:	280ad07a 	srli	r5,r5,1
  116060:	183ffb1e 	bne	r3,zero,116050 <__alt_data_end+0xfffd6050>
  116064:	f800283a 	ret
  116068:	f800283a 	ret
  11606c:	00c00044 	movi	r3,1
  116070:	003ff706 	br	116050 <__alt_data_end+0xfffd6050>

00116074 <__mulsi3>:
  116074:	0005883a 	mov	r2,zero
  116078:	20000726 	beq	r4,zero,116098 <__mulsi3+0x24>
  11607c:	20c0004c 	andi	r3,r4,1
  116080:	2008d07a 	srli	r4,r4,1
  116084:	18000126 	beq	r3,zero,11608c <__mulsi3+0x18>
  116088:	1145883a 	add	r2,r2,r5
  11608c:	294b883a 	add	r5,r5,r5
  116090:	203ffa1e 	bne	r4,zero,11607c <__alt_data_end+0xfffd607c>
  116094:	f800283a 	ret
  116098:	f800283a 	ret

0011609c <__eqsf2>:
  11609c:	2006d5fa 	srli	r3,r4,23
  1160a0:	280cd5fa 	srli	r6,r5,23
  1160a4:	01c02034 	movhi	r7,128
  1160a8:	39ffffc4 	addi	r7,r7,-1
  1160ac:	18c03fcc 	andi	r3,r3,255
  1160b0:	02003fc4 	movi	r8,255
  1160b4:	3904703a 	and	r2,r7,r4
  1160b8:	31803fcc 	andi	r6,r6,255
  1160bc:	394e703a 	and	r7,r7,r5
  1160c0:	2008d7fa 	srli	r4,r4,31
  1160c4:	280ad7fa 	srli	r5,r5,31
  1160c8:	1a000d26 	beq	r3,r8,116100 <__eqsf2+0x64>
  1160cc:	02003fc4 	movi	r8,255
  1160d0:	32000826 	beq	r6,r8,1160f4 <__eqsf2+0x58>
  1160d4:	19800226 	beq	r3,r6,1160e0 <__eqsf2+0x44>
  1160d8:	00800044 	movi	r2,1
  1160dc:	f800283a 	ret
  1160e0:	11fffd1e 	bne	r2,r7,1160d8 <__alt_data_end+0xfffd60d8>
  1160e4:	21400926 	beq	r4,r5,11610c <__eqsf2+0x70>
  1160e8:	183ffb1e 	bne	r3,zero,1160d8 <__alt_data_end+0xfffd60d8>
  1160ec:	1004c03a 	cmpne	r2,r2,zero
  1160f0:	f800283a 	ret
  1160f4:	383ff726 	beq	r7,zero,1160d4 <__alt_data_end+0xfffd60d4>
  1160f8:	00800044 	movi	r2,1
  1160fc:	f800283a 	ret
  116100:	103ff226 	beq	r2,zero,1160cc <__alt_data_end+0xfffd60cc>
  116104:	00800044 	movi	r2,1
  116108:	f800283a 	ret
  11610c:	0005883a 	mov	r2,zero
  116110:	f800283a 	ret

00116114 <__gesf2>:
  116114:	2004d5fa 	srli	r2,r4,23
  116118:	2806d5fa 	srli	r3,r5,23
  11611c:	01802034 	movhi	r6,128
  116120:	31bfffc4 	addi	r6,r6,-1
  116124:	10803fcc 	andi	r2,r2,255
  116128:	01c03fc4 	movi	r7,255
  11612c:	3110703a 	and	r8,r6,r4
  116130:	18c03fcc 	andi	r3,r3,255
  116134:	314c703a 	and	r6,r6,r5
  116138:	2008d7fa 	srli	r4,r4,31
  11613c:	280ad7fa 	srli	r5,r5,31
  116140:	11c01926 	beq	r2,r7,1161a8 <__gesf2+0x94>
  116144:	01c03fc4 	movi	r7,255
  116148:	19c00f26 	beq	r3,r7,116188 <__gesf2+0x74>
  11614c:	1000061e 	bne	r2,zero,116168 <__gesf2+0x54>
  116150:	400f003a 	cmpeq	r7,r8,zero
  116154:	1800071e 	bne	r3,zero,116174 <__gesf2+0x60>
  116158:	3000061e 	bne	r6,zero,116174 <__gesf2+0x60>
  11615c:	0005883a 	mov	r2,zero
  116160:	40000e1e 	bne	r8,zero,11619c <__gesf2+0x88>
  116164:	f800283a 	ret
  116168:	18000a1e 	bne	r3,zero,116194 <__gesf2+0x80>
  11616c:	30000b26 	beq	r6,zero,11619c <__gesf2+0x88>
  116170:	000f883a 	mov	r7,zero
  116174:	29403fcc 	andi	r5,r5,255
  116178:	38000726 	beq	r7,zero,116198 <__gesf2+0x84>
  11617c:	28000826 	beq	r5,zero,1161a0 <__gesf2+0x8c>
  116180:	00800044 	movi	r2,1
  116184:	f800283a 	ret
  116188:	303ff026 	beq	r6,zero,11614c <__alt_data_end+0xfffd614c>
  11618c:	00bfff84 	movi	r2,-2
  116190:	f800283a 	ret
  116194:	29403fcc 	andi	r5,r5,255
  116198:	21400526 	beq	r4,r5,1161b0 <__gesf2+0x9c>
  11619c:	203ff826 	beq	r4,zero,116180 <__alt_data_end+0xfffd6180>
  1161a0:	00bfffc4 	movi	r2,-1
  1161a4:	f800283a 	ret
  1161a8:	403fe626 	beq	r8,zero,116144 <__alt_data_end+0xfffd6144>
  1161ac:	003ff706 	br	11618c <__alt_data_end+0xfffd618c>
  1161b0:	18bffa16 	blt	r3,r2,11619c <__alt_data_end+0xfffd619c>
  1161b4:	10c00216 	blt	r2,r3,1161c0 <__gesf2+0xac>
  1161b8:	323ff836 	bltu	r6,r8,11619c <__alt_data_end+0xfffd619c>
  1161bc:	4180022e 	bgeu	r8,r6,1161c8 <__gesf2+0xb4>
  1161c0:	203fef1e 	bne	r4,zero,116180 <__alt_data_end+0xfffd6180>
  1161c4:	003ff606 	br	1161a0 <__alt_data_end+0xfffd61a0>
  1161c8:	0005883a 	mov	r2,zero
  1161cc:	f800283a 	ret

001161d0 <__lesf2>:
  1161d0:	2004d5fa 	srli	r2,r4,23
  1161d4:	280cd5fa 	srli	r6,r5,23
  1161d8:	00c02034 	movhi	r3,128
  1161dc:	18ffffc4 	addi	r3,r3,-1
  1161e0:	10803fcc 	andi	r2,r2,255
  1161e4:	01c03fc4 	movi	r7,255
  1161e8:	1910703a 	and	r8,r3,r4
  1161ec:	31803fcc 	andi	r6,r6,255
  1161f0:	1946703a 	and	r3,r3,r5
  1161f4:	2008d7fa 	srli	r4,r4,31
  1161f8:	280ad7fa 	srli	r5,r5,31
  1161fc:	11c01b26 	beq	r2,r7,11626c <__lesf2+0x9c>
  116200:	01c03fc4 	movi	r7,255
  116204:	31c01126 	beq	r6,r7,11624c <__lesf2+0x7c>
  116208:	1000071e 	bne	r2,zero,116228 <__lesf2+0x58>
  11620c:	400f003a 	cmpeq	r7,r8,zero
  116210:	21003fcc 	andi	r4,r4,255
  116214:	3000081e 	bne	r6,zero,116238 <__lesf2+0x68>
  116218:	1800071e 	bne	r3,zero,116238 <__lesf2+0x68>
  11621c:	0005883a 	mov	r2,zero
  116220:	40000f1e 	bne	r8,zero,116260 <__lesf2+0x90>
  116224:	f800283a 	ret
  116228:	21003fcc 	andi	r4,r4,255
  11622c:	30000a1e 	bne	r6,zero,116258 <__lesf2+0x88>
  116230:	18000b26 	beq	r3,zero,116260 <__lesf2+0x90>
  116234:	000f883a 	mov	r7,zero
  116238:	29403fcc 	andi	r5,r5,255
  11623c:	38000726 	beq	r7,zero,11625c <__lesf2+0x8c>
  116240:	28000826 	beq	r5,zero,116264 <__lesf2+0x94>
  116244:	00800044 	movi	r2,1
  116248:	f800283a 	ret
  11624c:	183fee26 	beq	r3,zero,116208 <__alt_data_end+0xfffd6208>
  116250:	00800084 	movi	r2,2
  116254:	f800283a 	ret
  116258:	29403fcc 	andi	r5,r5,255
  11625c:	21400626 	beq	r4,r5,116278 <__lesf2+0xa8>
  116260:	203ff826 	beq	r4,zero,116244 <__alt_data_end+0xfffd6244>
  116264:	00bfffc4 	movi	r2,-1
  116268:	f800283a 	ret
  11626c:	403fe426 	beq	r8,zero,116200 <__alt_data_end+0xfffd6200>
  116270:	00800084 	movi	r2,2
  116274:	f800283a 	ret
  116278:	30bff916 	blt	r6,r2,116260 <__alt_data_end+0xfffd6260>
  11627c:	11800216 	blt	r2,r6,116288 <__lesf2+0xb8>
  116280:	1a3ff736 	bltu	r3,r8,116260 <__alt_data_end+0xfffd6260>
  116284:	40c0022e 	bgeu	r8,r3,116290 <__lesf2+0xc0>
  116288:	203fee1e 	bne	r4,zero,116244 <__alt_data_end+0xfffd6244>
  11628c:	003ff506 	br	116264 <__alt_data_end+0xfffd6264>
  116290:	0005883a 	mov	r2,zero
  116294:	f800283a 	ret

00116298 <__adddf3>:
  116298:	02c00434 	movhi	r11,16
  11629c:	5affffc4 	addi	r11,r11,-1
  1162a0:	2806d7fa 	srli	r3,r5,31
  1162a4:	2ad4703a 	and	r10,r5,r11
  1162a8:	3ad2703a 	and	r9,r7,r11
  1162ac:	3804d53a 	srli	r2,r7,20
  1162b0:	3018d77a 	srli	r12,r6,29
  1162b4:	280ad53a 	srli	r5,r5,20
  1162b8:	501490fa 	slli	r10,r10,3
  1162bc:	2010d77a 	srli	r8,r4,29
  1162c0:	481290fa 	slli	r9,r9,3
  1162c4:	380ed7fa 	srli	r7,r7,31
  1162c8:	defffb04 	addi	sp,sp,-20
  1162cc:	dc800215 	stw	r18,8(sp)
  1162d0:	dc400115 	stw	r17,4(sp)
  1162d4:	dc000015 	stw	r16,0(sp)
  1162d8:	dfc00415 	stw	ra,16(sp)
  1162dc:	dcc00315 	stw	r19,12(sp)
  1162e0:	1c803fcc 	andi	r18,r3,255
  1162e4:	2c01ffcc 	andi	r16,r5,2047
  1162e8:	5210b03a 	or	r8,r10,r8
  1162ec:	202290fa 	slli	r17,r4,3
  1162f0:	1081ffcc 	andi	r2,r2,2047
  1162f4:	4b12b03a 	or	r9,r9,r12
  1162f8:	300c90fa 	slli	r6,r6,3
  1162fc:	91c07526 	beq	r18,r7,1164d4 <__adddf3+0x23c>
  116300:	8087c83a 	sub	r3,r16,r2
  116304:	00c0ab0e 	bge	zero,r3,1165b4 <__adddf3+0x31c>
  116308:	10002a1e 	bne	r2,zero,1163b4 <__adddf3+0x11c>
  11630c:	4984b03a 	or	r2,r9,r6
  116310:	1000961e 	bne	r2,zero,11656c <__adddf3+0x2d4>
  116314:	888001cc 	andi	r2,r17,7
  116318:	10000726 	beq	r2,zero,116338 <__adddf3+0xa0>
  11631c:	888003cc 	andi	r2,r17,15
  116320:	00c00104 	movi	r3,4
  116324:	10c00426 	beq	r2,r3,116338 <__adddf3+0xa0>
  116328:	88c7883a 	add	r3,r17,r3
  11632c:	1c63803a 	cmpltu	r17,r3,r17
  116330:	4451883a 	add	r8,r8,r17
  116334:	1823883a 	mov	r17,r3
  116338:	4080202c 	andhi	r2,r8,128
  11633c:	10005926 	beq	r2,zero,1164a4 <__adddf3+0x20c>
  116340:	84000044 	addi	r16,r16,1
  116344:	0081ffc4 	movi	r2,2047
  116348:	8080ba26 	beq	r16,r2,116634 <__adddf3+0x39c>
  11634c:	00bfe034 	movhi	r2,65408
  116350:	10bfffc4 	addi	r2,r2,-1
  116354:	4090703a 	and	r8,r8,r2
  116358:	4004977a 	slli	r2,r8,29
  11635c:	4010927a 	slli	r8,r8,9
  116360:	8822d0fa 	srli	r17,r17,3
  116364:	8401ffcc 	andi	r16,r16,2047
  116368:	4010d33a 	srli	r8,r8,12
  11636c:	9007883a 	mov	r3,r18
  116370:	1444b03a 	or	r2,r2,r17
  116374:	8401ffcc 	andi	r16,r16,2047
  116378:	8020953a 	slli	r16,r16,20
  11637c:	18c03fcc 	andi	r3,r3,255
  116380:	01000434 	movhi	r4,16
  116384:	213fffc4 	addi	r4,r4,-1
  116388:	180697fa 	slli	r3,r3,31
  11638c:	4110703a 	and	r8,r8,r4
  116390:	4410b03a 	or	r8,r8,r16
  116394:	40c6b03a 	or	r3,r8,r3
  116398:	dfc00417 	ldw	ra,16(sp)
  11639c:	dcc00317 	ldw	r19,12(sp)
  1163a0:	dc800217 	ldw	r18,8(sp)
  1163a4:	dc400117 	ldw	r17,4(sp)
  1163a8:	dc000017 	ldw	r16,0(sp)
  1163ac:	dec00504 	addi	sp,sp,20
  1163b0:	f800283a 	ret
  1163b4:	0081ffc4 	movi	r2,2047
  1163b8:	80bfd626 	beq	r16,r2,116314 <__alt_data_end+0xfffd6314>
  1163bc:	4a402034 	orhi	r9,r9,128
  1163c0:	00800e04 	movi	r2,56
  1163c4:	10c09f16 	blt	r2,r3,116644 <__adddf3+0x3ac>
  1163c8:	008007c4 	movi	r2,31
  1163cc:	10c0c216 	blt	r2,r3,1166d8 <__adddf3+0x440>
  1163d0:	00800804 	movi	r2,32
  1163d4:	10c5c83a 	sub	r2,r2,r3
  1163d8:	488a983a 	sll	r5,r9,r2
  1163dc:	30c8d83a 	srl	r4,r6,r3
  1163e0:	3084983a 	sll	r2,r6,r2
  1163e4:	48c6d83a 	srl	r3,r9,r3
  1163e8:	290cb03a 	or	r6,r5,r4
  1163ec:	1004c03a 	cmpne	r2,r2,zero
  1163f0:	308cb03a 	or	r6,r6,r2
  1163f4:	898dc83a 	sub	r6,r17,r6
  1163f8:	89a3803a 	cmpltu	r17,r17,r6
  1163fc:	40d1c83a 	sub	r8,r8,r3
  116400:	4451c83a 	sub	r8,r8,r17
  116404:	3023883a 	mov	r17,r6
  116408:	4080202c 	andhi	r2,r8,128
  11640c:	10002326 	beq	r2,zero,11649c <__adddf3+0x204>
  116410:	04c02034 	movhi	r19,128
  116414:	9cffffc4 	addi	r19,r19,-1
  116418:	44e6703a 	and	r19,r8,r19
  11641c:	98007626 	beq	r19,zero,1165f8 <__adddf3+0x360>
  116420:	9809883a 	mov	r4,r19
  116424:	0118c800 	call	118c80 <__clzsi2>
  116428:	10fffe04 	addi	r3,r2,-8
  11642c:	010007c4 	movi	r4,31
  116430:	20c07716 	blt	r4,r3,116610 <__adddf3+0x378>
  116434:	00800804 	movi	r2,32
  116438:	10c5c83a 	sub	r2,r2,r3
  11643c:	8884d83a 	srl	r2,r17,r2
  116440:	98d0983a 	sll	r8,r19,r3
  116444:	88e2983a 	sll	r17,r17,r3
  116448:	1204b03a 	or	r2,r2,r8
  11644c:	1c007416 	blt	r3,r16,116620 <__adddf3+0x388>
  116450:	1c21c83a 	sub	r16,r3,r16
  116454:	82000044 	addi	r8,r16,1
  116458:	00c007c4 	movi	r3,31
  11645c:	1a009116 	blt	r3,r8,1166a4 <__adddf3+0x40c>
  116460:	00c00804 	movi	r3,32
  116464:	1a07c83a 	sub	r3,r3,r8
  116468:	8a08d83a 	srl	r4,r17,r8
  11646c:	88e2983a 	sll	r17,r17,r3
  116470:	10c6983a 	sll	r3,r2,r3
  116474:	1210d83a 	srl	r8,r2,r8
  116478:	8804c03a 	cmpne	r2,r17,zero
  11647c:	1906b03a 	or	r3,r3,r4
  116480:	18a2b03a 	or	r17,r3,r2
  116484:	0021883a 	mov	r16,zero
  116488:	003fa206 	br	116314 <__alt_data_end+0xfffd6314>
  11648c:	1890b03a 	or	r8,r3,r2
  116490:	40017d26 	beq	r8,zero,116a88 <__adddf3+0x7f0>
  116494:	1011883a 	mov	r8,r2
  116498:	1823883a 	mov	r17,r3
  11649c:	888001cc 	andi	r2,r17,7
  1164a0:	103f9e1e 	bne	r2,zero,11631c <__alt_data_end+0xfffd631c>
  1164a4:	4004977a 	slli	r2,r8,29
  1164a8:	8822d0fa 	srli	r17,r17,3
  1164ac:	4010d0fa 	srli	r8,r8,3
  1164b0:	9007883a 	mov	r3,r18
  1164b4:	1444b03a 	or	r2,r2,r17
  1164b8:	0101ffc4 	movi	r4,2047
  1164bc:	81002426 	beq	r16,r4,116550 <__adddf3+0x2b8>
  1164c0:	8120703a 	and	r16,r16,r4
  1164c4:	01000434 	movhi	r4,16
  1164c8:	213fffc4 	addi	r4,r4,-1
  1164cc:	4110703a 	and	r8,r8,r4
  1164d0:	003fa806 	br	116374 <__alt_data_end+0xfffd6374>
  1164d4:	8089c83a 	sub	r4,r16,r2
  1164d8:	01005e0e 	bge	zero,r4,116654 <__adddf3+0x3bc>
  1164dc:	10002b26 	beq	r2,zero,11658c <__adddf3+0x2f4>
  1164e0:	0081ffc4 	movi	r2,2047
  1164e4:	80bf8b26 	beq	r16,r2,116314 <__alt_data_end+0xfffd6314>
  1164e8:	4a402034 	orhi	r9,r9,128
  1164ec:	00800e04 	movi	r2,56
  1164f0:	1100a40e 	bge	r2,r4,116784 <__adddf3+0x4ec>
  1164f4:	498cb03a 	or	r6,r9,r6
  1164f8:	300ac03a 	cmpne	r5,r6,zero
  1164fc:	0013883a 	mov	r9,zero
  116500:	2c4b883a 	add	r5,r5,r17
  116504:	2c63803a 	cmpltu	r17,r5,r17
  116508:	4a11883a 	add	r8,r9,r8
  11650c:	8a11883a 	add	r8,r17,r8
  116510:	2823883a 	mov	r17,r5
  116514:	4080202c 	andhi	r2,r8,128
  116518:	103fe026 	beq	r2,zero,11649c <__alt_data_end+0xfffd649c>
  11651c:	84000044 	addi	r16,r16,1
  116520:	0081ffc4 	movi	r2,2047
  116524:	8080d226 	beq	r16,r2,116870 <__adddf3+0x5d8>
  116528:	00bfe034 	movhi	r2,65408
  11652c:	10bfffc4 	addi	r2,r2,-1
  116530:	4090703a 	and	r8,r8,r2
  116534:	880ad07a 	srli	r5,r17,1
  116538:	400897fa 	slli	r4,r8,31
  11653c:	88c0004c 	andi	r3,r17,1
  116540:	28e2b03a 	or	r17,r5,r3
  116544:	4010d07a 	srli	r8,r8,1
  116548:	2462b03a 	or	r17,r4,r17
  11654c:	003f7106 	br	116314 <__alt_data_end+0xfffd6314>
  116550:	4088b03a 	or	r4,r8,r2
  116554:	20014526 	beq	r4,zero,116a6c <__adddf3+0x7d4>
  116558:	01000434 	movhi	r4,16
  11655c:	42000234 	orhi	r8,r8,8
  116560:	213fffc4 	addi	r4,r4,-1
  116564:	4110703a 	and	r8,r8,r4
  116568:	003f8206 	br	116374 <__alt_data_end+0xfffd6374>
  11656c:	18ffffc4 	addi	r3,r3,-1
  116570:	1800491e 	bne	r3,zero,116698 <__adddf3+0x400>
  116574:	898bc83a 	sub	r5,r17,r6
  116578:	8963803a 	cmpltu	r17,r17,r5
  11657c:	4251c83a 	sub	r8,r8,r9
  116580:	4451c83a 	sub	r8,r8,r17
  116584:	2823883a 	mov	r17,r5
  116588:	003f9f06 	br	116408 <__alt_data_end+0xfffd6408>
  11658c:	4984b03a 	or	r2,r9,r6
  116590:	103f6026 	beq	r2,zero,116314 <__alt_data_end+0xfffd6314>
  116594:	213fffc4 	addi	r4,r4,-1
  116598:	2000931e 	bne	r4,zero,1167e8 <__adddf3+0x550>
  11659c:	898d883a 	add	r6,r17,r6
  1165a0:	3463803a 	cmpltu	r17,r6,r17
  1165a4:	4251883a 	add	r8,r8,r9
  1165a8:	8a11883a 	add	r8,r17,r8
  1165ac:	3023883a 	mov	r17,r6
  1165b0:	003fd806 	br	116514 <__alt_data_end+0xfffd6514>
  1165b4:	1800541e 	bne	r3,zero,116708 <__adddf3+0x470>
  1165b8:	80800044 	addi	r2,r16,1
  1165bc:	1081ffcc 	andi	r2,r2,2047
  1165c0:	00c00044 	movi	r3,1
  1165c4:	1880a00e 	bge	r3,r2,116848 <__adddf3+0x5b0>
  1165c8:	8989c83a 	sub	r4,r17,r6
  1165cc:	8905803a 	cmpltu	r2,r17,r4
  1165d0:	4267c83a 	sub	r19,r8,r9
  1165d4:	98a7c83a 	sub	r19,r19,r2
  1165d8:	9880202c 	andhi	r2,r19,128
  1165dc:	10006326 	beq	r2,zero,11676c <__adddf3+0x4d4>
  1165e0:	3463c83a 	sub	r17,r6,r17
  1165e4:	4a07c83a 	sub	r3,r9,r8
  1165e8:	344d803a 	cmpltu	r6,r6,r17
  1165ec:	19a7c83a 	sub	r19,r3,r6
  1165f0:	3825883a 	mov	r18,r7
  1165f4:	983f8a1e 	bne	r19,zero,116420 <__alt_data_end+0xfffd6420>
  1165f8:	8809883a 	mov	r4,r17
  1165fc:	0118c800 	call	118c80 <__clzsi2>
  116600:	10800804 	addi	r2,r2,32
  116604:	10fffe04 	addi	r3,r2,-8
  116608:	010007c4 	movi	r4,31
  11660c:	20ff890e 	bge	r4,r3,116434 <__alt_data_end+0xfffd6434>
  116610:	10bff604 	addi	r2,r2,-40
  116614:	8884983a 	sll	r2,r17,r2
  116618:	0023883a 	mov	r17,zero
  11661c:	1c3f8c0e 	bge	r3,r16,116450 <__alt_data_end+0xfffd6450>
  116620:	023fe034 	movhi	r8,65408
  116624:	423fffc4 	addi	r8,r8,-1
  116628:	80e1c83a 	sub	r16,r16,r3
  11662c:	1210703a 	and	r8,r2,r8
  116630:	003f3806 	br	116314 <__alt_data_end+0xfffd6314>
  116634:	9007883a 	mov	r3,r18
  116638:	0011883a 	mov	r8,zero
  11663c:	0005883a 	mov	r2,zero
  116640:	003f4c06 	br	116374 <__alt_data_end+0xfffd6374>
  116644:	498cb03a 	or	r6,r9,r6
  116648:	300cc03a 	cmpne	r6,r6,zero
  11664c:	0007883a 	mov	r3,zero
  116650:	003f6806 	br	1163f4 <__alt_data_end+0xfffd63f4>
  116654:	20009c1e 	bne	r4,zero,1168c8 <__adddf3+0x630>
  116658:	80800044 	addi	r2,r16,1
  11665c:	1141ffcc 	andi	r5,r2,2047
  116660:	01000044 	movi	r4,1
  116664:	2140670e 	bge	r4,r5,116804 <__adddf3+0x56c>
  116668:	0101ffc4 	movi	r4,2047
  11666c:	11007f26 	beq	r2,r4,11686c <__adddf3+0x5d4>
  116670:	898d883a 	add	r6,r17,r6
  116674:	4247883a 	add	r3,r8,r9
  116678:	3451803a 	cmpltu	r8,r6,r17
  11667c:	40d1883a 	add	r8,r8,r3
  116680:	402297fa 	slli	r17,r8,31
  116684:	300cd07a 	srli	r6,r6,1
  116688:	4010d07a 	srli	r8,r8,1
  11668c:	1021883a 	mov	r16,r2
  116690:	89a2b03a 	or	r17,r17,r6
  116694:	003f1f06 	br	116314 <__alt_data_end+0xfffd6314>
  116698:	0081ffc4 	movi	r2,2047
  11669c:	80bf481e 	bne	r16,r2,1163c0 <__alt_data_end+0xfffd63c0>
  1166a0:	003f1c06 	br	116314 <__alt_data_end+0xfffd6314>
  1166a4:	843ff844 	addi	r16,r16,-31
  1166a8:	01000804 	movi	r4,32
  1166ac:	1406d83a 	srl	r3,r2,r16
  1166b0:	41005026 	beq	r8,r4,1167f4 <__adddf3+0x55c>
  1166b4:	01001004 	movi	r4,64
  1166b8:	2211c83a 	sub	r8,r4,r8
  1166bc:	1204983a 	sll	r2,r2,r8
  1166c0:	88a2b03a 	or	r17,r17,r2
  1166c4:	8822c03a 	cmpne	r17,r17,zero
  1166c8:	1c62b03a 	or	r17,r3,r17
  1166cc:	0011883a 	mov	r8,zero
  1166d0:	0021883a 	mov	r16,zero
  1166d4:	003f7106 	br	11649c <__alt_data_end+0xfffd649c>
  1166d8:	193ff804 	addi	r4,r3,-32
  1166dc:	00800804 	movi	r2,32
  1166e0:	4908d83a 	srl	r4,r9,r4
  1166e4:	18804526 	beq	r3,r2,1167fc <__adddf3+0x564>
  1166e8:	00801004 	movi	r2,64
  1166ec:	10c5c83a 	sub	r2,r2,r3
  1166f0:	4886983a 	sll	r3,r9,r2
  1166f4:	198cb03a 	or	r6,r3,r6
  1166f8:	300cc03a 	cmpne	r6,r6,zero
  1166fc:	218cb03a 	or	r6,r4,r6
  116700:	0007883a 	mov	r3,zero
  116704:	003f3b06 	br	1163f4 <__alt_data_end+0xfffd63f4>
  116708:	80002a26 	beq	r16,zero,1167b4 <__adddf3+0x51c>
  11670c:	0101ffc4 	movi	r4,2047
  116710:	11006826 	beq	r2,r4,1168b4 <__adddf3+0x61c>
  116714:	00c7c83a 	sub	r3,zero,r3
  116718:	42002034 	orhi	r8,r8,128
  11671c:	01000e04 	movi	r4,56
  116720:	20c07c16 	blt	r4,r3,116914 <__adddf3+0x67c>
  116724:	010007c4 	movi	r4,31
  116728:	20c0da16 	blt	r4,r3,116a94 <__adddf3+0x7fc>
  11672c:	01000804 	movi	r4,32
  116730:	20c9c83a 	sub	r4,r4,r3
  116734:	4114983a 	sll	r10,r8,r4
  116738:	88cad83a 	srl	r5,r17,r3
  11673c:	8908983a 	sll	r4,r17,r4
  116740:	40c6d83a 	srl	r3,r8,r3
  116744:	5162b03a 	or	r17,r10,r5
  116748:	2008c03a 	cmpne	r4,r4,zero
  11674c:	8922b03a 	or	r17,r17,r4
  116750:	3463c83a 	sub	r17,r6,r17
  116754:	48c7c83a 	sub	r3,r9,r3
  116758:	344d803a 	cmpltu	r6,r6,r17
  11675c:	1991c83a 	sub	r8,r3,r6
  116760:	1021883a 	mov	r16,r2
  116764:	3825883a 	mov	r18,r7
  116768:	003f2706 	br	116408 <__alt_data_end+0xfffd6408>
  11676c:	24d0b03a 	or	r8,r4,r19
  116770:	40001b1e 	bne	r8,zero,1167e0 <__adddf3+0x548>
  116774:	0005883a 	mov	r2,zero
  116778:	0007883a 	mov	r3,zero
  11677c:	0021883a 	mov	r16,zero
  116780:	003f4d06 	br	1164b8 <__alt_data_end+0xfffd64b8>
  116784:	008007c4 	movi	r2,31
  116788:	11003c16 	blt	r2,r4,11687c <__adddf3+0x5e4>
  11678c:	00800804 	movi	r2,32
  116790:	1105c83a 	sub	r2,r2,r4
  116794:	488e983a 	sll	r7,r9,r2
  116798:	310ad83a 	srl	r5,r6,r4
  11679c:	3084983a 	sll	r2,r6,r2
  1167a0:	4912d83a 	srl	r9,r9,r4
  1167a4:	394ab03a 	or	r5,r7,r5
  1167a8:	1004c03a 	cmpne	r2,r2,zero
  1167ac:	288ab03a 	or	r5,r5,r2
  1167b0:	003f5306 	br	116500 <__alt_data_end+0xfffd6500>
  1167b4:	4448b03a 	or	r4,r8,r17
  1167b8:	20003e26 	beq	r4,zero,1168b4 <__adddf3+0x61c>
  1167bc:	00c6303a 	nor	r3,zero,r3
  1167c0:	18003a1e 	bne	r3,zero,1168ac <__adddf3+0x614>
  1167c4:	3463c83a 	sub	r17,r6,r17
  1167c8:	4a07c83a 	sub	r3,r9,r8
  1167cc:	344d803a 	cmpltu	r6,r6,r17
  1167d0:	1991c83a 	sub	r8,r3,r6
  1167d4:	1021883a 	mov	r16,r2
  1167d8:	3825883a 	mov	r18,r7
  1167dc:	003f0a06 	br	116408 <__alt_data_end+0xfffd6408>
  1167e0:	2023883a 	mov	r17,r4
  1167e4:	003f0d06 	br	11641c <__alt_data_end+0xfffd641c>
  1167e8:	0081ffc4 	movi	r2,2047
  1167ec:	80bf3f1e 	bne	r16,r2,1164ec <__alt_data_end+0xfffd64ec>
  1167f0:	003ec806 	br	116314 <__alt_data_end+0xfffd6314>
  1167f4:	0005883a 	mov	r2,zero
  1167f8:	003fb106 	br	1166c0 <__alt_data_end+0xfffd66c0>
  1167fc:	0007883a 	mov	r3,zero
  116800:	003fbc06 	br	1166f4 <__alt_data_end+0xfffd66f4>
  116804:	4444b03a 	or	r2,r8,r17
  116808:	8000871e 	bne	r16,zero,116a28 <__adddf3+0x790>
  11680c:	1000ba26 	beq	r2,zero,116af8 <__adddf3+0x860>
  116810:	4984b03a 	or	r2,r9,r6
  116814:	103ebf26 	beq	r2,zero,116314 <__alt_data_end+0xfffd6314>
  116818:	8985883a 	add	r2,r17,r6
  11681c:	4247883a 	add	r3,r8,r9
  116820:	1451803a 	cmpltu	r8,r2,r17
  116824:	40d1883a 	add	r8,r8,r3
  116828:	40c0202c 	andhi	r3,r8,128
  11682c:	1023883a 	mov	r17,r2
  116830:	183f1a26 	beq	r3,zero,11649c <__alt_data_end+0xfffd649c>
  116834:	00bfe034 	movhi	r2,65408
  116838:	10bfffc4 	addi	r2,r2,-1
  11683c:	2021883a 	mov	r16,r4
  116840:	4090703a 	and	r8,r8,r2
  116844:	003eb306 	br	116314 <__alt_data_end+0xfffd6314>
  116848:	4444b03a 	or	r2,r8,r17
  11684c:	8000291e 	bne	r16,zero,1168f4 <__adddf3+0x65c>
  116850:	10004b1e 	bne	r2,zero,116980 <__adddf3+0x6e8>
  116854:	4990b03a 	or	r8,r9,r6
  116858:	40008b26 	beq	r8,zero,116a88 <__adddf3+0x7f0>
  11685c:	4811883a 	mov	r8,r9
  116860:	3023883a 	mov	r17,r6
  116864:	3825883a 	mov	r18,r7
  116868:	003eaa06 	br	116314 <__alt_data_end+0xfffd6314>
  11686c:	1021883a 	mov	r16,r2
  116870:	0011883a 	mov	r8,zero
  116874:	0005883a 	mov	r2,zero
  116878:	003f0f06 	br	1164b8 <__alt_data_end+0xfffd64b8>
  11687c:	217ff804 	addi	r5,r4,-32
  116880:	00800804 	movi	r2,32
  116884:	494ad83a 	srl	r5,r9,r5
  116888:	20807d26 	beq	r4,r2,116a80 <__adddf3+0x7e8>
  11688c:	00801004 	movi	r2,64
  116890:	1109c83a 	sub	r4,r2,r4
  116894:	4912983a 	sll	r9,r9,r4
  116898:	498cb03a 	or	r6,r9,r6
  11689c:	300cc03a 	cmpne	r6,r6,zero
  1168a0:	298ab03a 	or	r5,r5,r6
  1168a4:	0013883a 	mov	r9,zero
  1168a8:	003f1506 	br	116500 <__alt_data_end+0xfffd6500>
  1168ac:	0101ffc4 	movi	r4,2047
  1168b0:	113f9a1e 	bne	r2,r4,11671c <__alt_data_end+0xfffd671c>
  1168b4:	4811883a 	mov	r8,r9
  1168b8:	3023883a 	mov	r17,r6
  1168bc:	1021883a 	mov	r16,r2
  1168c0:	3825883a 	mov	r18,r7
  1168c4:	003e9306 	br	116314 <__alt_data_end+0xfffd6314>
  1168c8:	8000161e 	bne	r16,zero,116924 <__adddf3+0x68c>
  1168cc:	444ab03a 	or	r5,r8,r17
  1168d0:	28005126 	beq	r5,zero,116a18 <__adddf3+0x780>
  1168d4:	0108303a 	nor	r4,zero,r4
  1168d8:	20004d1e 	bne	r4,zero,116a10 <__adddf3+0x778>
  1168dc:	89a3883a 	add	r17,r17,r6
  1168e0:	4253883a 	add	r9,r8,r9
  1168e4:	898d803a 	cmpltu	r6,r17,r6
  1168e8:	3251883a 	add	r8,r6,r9
  1168ec:	1021883a 	mov	r16,r2
  1168f0:	003f0806 	br	116514 <__alt_data_end+0xfffd6514>
  1168f4:	1000301e 	bne	r2,zero,1169b8 <__adddf3+0x720>
  1168f8:	4984b03a 	or	r2,r9,r6
  1168fc:	10007126 	beq	r2,zero,116ac4 <__adddf3+0x82c>
  116900:	4811883a 	mov	r8,r9
  116904:	3023883a 	mov	r17,r6
  116908:	3825883a 	mov	r18,r7
  11690c:	0401ffc4 	movi	r16,2047
  116910:	003e8006 	br	116314 <__alt_data_end+0xfffd6314>
  116914:	4462b03a 	or	r17,r8,r17
  116918:	8822c03a 	cmpne	r17,r17,zero
  11691c:	0007883a 	mov	r3,zero
  116920:	003f8b06 	br	116750 <__alt_data_end+0xfffd6750>
  116924:	0141ffc4 	movi	r5,2047
  116928:	11403b26 	beq	r2,r5,116a18 <__adddf3+0x780>
  11692c:	0109c83a 	sub	r4,zero,r4
  116930:	42002034 	orhi	r8,r8,128
  116934:	01400e04 	movi	r5,56
  116938:	29006716 	blt	r5,r4,116ad8 <__adddf3+0x840>
  11693c:	014007c4 	movi	r5,31
  116940:	29007016 	blt	r5,r4,116b04 <__adddf3+0x86c>
  116944:	01400804 	movi	r5,32
  116948:	290bc83a 	sub	r5,r5,r4
  11694c:	4154983a 	sll	r10,r8,r5
  116950:	890ed83a 	srl	r7,r17,r4
  116954:	894a983a 	sll	r5,r17,r5
  116958:	4108d83a 	srl	r4,r8,r4
  11695c:	51e2b03a 	or	r17,r10,r7
  116960:	280ac03a 	cmpne	r5,r5,zero
  116964:	8962b03a 	or	r17,r17,r5
  116968:	89a3883a 	add	r17,r17,r6
  11696c:	2253883a 	add	r9,r4,r9
  116970:	898d803a 	cmpltu	r6,r17,r6
  116974:	3251883a 	add	r8,r6,r9
  116978:	1021883a 	mov	r16,r2
  11697c:	003ee506 	br	116514 <__alt_data_end+0xfffd6514>
  116980:	4984b03a 	or	r2,r9,r6
  116984:	103e6326 	beq	r2,zero,116314 <__alt_data_end+0xfffd6314>
  116988:	8987c83a 	sub	r3,r17,r6
  11698c:	88c9803a 	cmpltu	r4,r17,r3
  116990:	4245c83a 	sub	r2,r8,r9
  116994:	1105c83a 	sub	r2,r2,r4
  116998:	1100202c 	andhi	r4,r2,128
  11699c:	203ebb26 	beq	r4,zero,11648c <__alt_data_end+0xfffd648c>
  1169a0:	3463c83a 	sub	r17,r6,r17
  1169a4:	4a07c83a 	sub	r3,r9,r8
  1169a8:	344d803a 	cmpltu	r6,r6,r17
  1169ac:	1991c83a 	sub	r8,r3,r6
  1169b0:	3825883a 	mov	r18,r7
  1169b4:	003e5706 	br	116314 <__alt_data_end+0xfffd6314>
  1169b8:	4984b03a 	or	r2,r9,r6
  1169bc:	10002e26 	beq	r2,zero,116a78 <__adddf3+0x7e0>
  1169c0:	4004d0fa 	srli	r2,r8,3
  1169c4:	8822d0fa 	srli	r17,r17,3
  1169c8:	4010977a 	slli	r8,r8,29
  1169cc:	10c0022c 	andhi	r3,r2,8
  1169d0:	4462b03a 	or	r17,r8,r17
  1169d4:	18000826 	beq	r3,zero,1169f8 <__adddf3+0x760>
  1169d8:	4808d0fa 	srli	r4,r9,3
  1169dc:	20c0022c 	andhi	r3,r4,8
  1169e0:	1800051e 	bne	r3,zero,1169f8 <__adddf3+0x760>
  1169e4:	300cd0fa 	srli	r6,r6,3
  1169e8:	4806977a 	slli	r3,r9,29
  1169ec:	2005883a 	mov	r2,r4
  1169f0:	3825883a 	mov	r18,r7
  1169f4:	19a2b03a 	or	r17,r3,r6
  1169f8:	8810d77a 	srli	r8,r17,29
  1169fc:	100490fa 	slli	r2,r2,3
  116a00:	882290fa 	slli	r17,r17,3
  116a04:	0401ffc4 	movi	r16,2047
  116a08:	4090b03a 	or	r8,r8,r2
  116a0c:	003e4106 	br	116314 <__alt_data_end+0xfffd6314>
  116a10:	0141ffc4 	movi	r5,2047
  116a14:	117fc71e 	bne	r2,r5,116934 <__alt_data_end+0xfffd6934>
  116a18:	4811883a 	mov	r8,r9
  116a1c:	3023883a 	mov	r17,r6
  116a20:	1021883a 	mov	r16,r2
  116a24:	003e3b06 	br	116314 <__alt_data_end+0xfffd6314>
  116a28:	10002f26 	beq	r2,zero,116ae8 <__adddf3+0x850>
  116a2c:	4984b03a 	or	r2,r9,r6
  116a30:	10001126 	beq	r2,zero,116a78 <__adddf3+0x7e0>
  116a34:	4004d0fa 	srli	r2,r8,3
  116a38:	8822d0fa 	srli	r17,r17,3
  116a3c:	4010977a 	slli	r8,r8,29
  116a40:	10c0022c 	andhi	r3,r2,8
  116a44:	4462b03a 	or	r17,r8,r17
  116a48:	183feb26 	beq	r3,zero,1169f8 <__alt_data_end+0xfffd69f8>
  116a4c:	4808d0fa 	srli	r4,r9,3
  116a50:	20c0022c 	andhi	r3,r4,8
  116a54:	183fe81e 	bne	r3,zero,1169f8 <__alt_data_end+0xfffd69f8>
  116a58:	300cd0fa 	srli	r6,r6,3
  116a5c:	4806977a 	slli	r3,r9,29
  116a60:	2005883a 	mov	r2,r4
  116a64:	19a2b03a 	or	r17,r3,r6
  116a68:	003fe306 	br	1169f8 <__alt_data_end+0xfffd69f8>
  116a6c:	0011883a 	mov	r8,zero
  116a70:	0005883a 	mov	r2,zero
  116a74:	003e3f06 	br	116374 <__alt_data_end+0xfffd6374>
  116a78:	0401ffc4 	movi	r16,2047
  116a7c:	003e2506 	br	116314 <__alt_data_end+0xfffd6314>
  116a80:	0013883a 	mov	r9,zero
  116a84:	003f8406 	br	116898 <__alt_data_end+0xfffd6898>
  116a88:	0005883a 	mov	r2,zero
  116a8c:	0007883a 	mov	r3,zero
  116a90:	003e8906 	br	1164b8 <__alt_data_end+0xfffd64b8>
  116a94:	197ff804 	addi	r5,r3,-32
  116a98:	01000804 	movi	r4,32
  116a9c:	414ad83a 	srl	r5,r8,r5
  116aa0:	19002426 	beq	r3,r4,116b34 <__adddf3+0x89c>
  116aa4:	01001004 	movi	r4,64
  116aa8:	20c7c83a 	sub	r3,r4,r3
  116aac:	40c6983a 	sll	r3,r8,r3
  116ab0:	1c46b03a 	or	r3,r3,r17
  116ab4:	1806c03a 	cmpne	r3,r3,zero
  116ab8:	28e2b03a 	or	r17,r5,r3
  116abc:	0007883a 	mov	r3,zero
  116ac0:	003f2306 	br	116750 <__alt_data_end+0xfffd6750>
  116ac4:	0007883a 	mov	r3,zero
  116ac8:	5811883a 	mov	r8,r11
  116acc:	00bfffc4 	movi	r2,-1
  116ad0:	0401ffc4 	movi	r16,2047
  116ad4:	003e7806 	br	1164b8 <__alt_data_end+0xfffd64b8>
  116ad8:	4462b03a 	or	r17,r8,r17
  116adc:	8822c03a 	cmpne	r17,r17,zero
  116ae0:	0009883a 	mov	r4,zero
  116ae4:	003fa006 	br	116968 <__alt_data_end+0xfffd6968>
  116ae8:	4811883a 	mov	r8,r9
  116aec:	3023883a 	mov	r17,r6
  116af0:	0401ffc4 	movi	r16,2047
  116af4:	003e0706 	br	116314 <__alt_data_end+0xfffd6314>
  116af8:	4811883a 	mov	r8,r9
  116afc:	3023883a 	mov	r17,r6
  116b00:	003e0406 	br	116314 <__alt_data_end+0xfffd6314>
  116b04:	21fff804 	addi	r7,r4,-32
  116b08:	01400804 	movi	r5,32
  116b0c:	41ced83a 	srl	r7,r8,r7
  116b10:	21400a26 	beq	r4,r5,116b3c <__adddf3+0x8a4>
  116b14:	01401004 	movi	r5,64
  116b18:	2909c83a 	sub	r4,r5,r4
  116b1c:	4108983a 	sll	r4,r8,r4
  116b20:	2448b03a 	or	r4,r4,r17
  116b24:	2008c03a 	cmpne	r4,r4,zero
  116b28:	3922b03a 	or	r17,r7,r4
  116b2c:	0009883a 	mov	r4,zero
  116b30:	003f8d06 	br	116968 <__alt_data_end+0xfffd6968>
  116b34:	0007883a 	mov	r3,zero
  116b38:	003fdd06 	br	116ab0 <__alt_data_end+0xfffd6ab0>
  116b3c:	0009883a 	mov	r4,zero
  116b40:	003ff706 	br	116b20 <__alt_data_end+0xfffd6b20>

00116b44 <__divdf3>:
  116b44:	defff004 	addi	sp,sp,-64
  116b48:	dc800815 	stw	r18,32(sp)
  116b4c:	2824d53a 	srli	r18,r5,20
  116b50:	dd800c15 	stw	r22,48(sp)
  116b54:	282cd7fa 	srli	r22,r5,31
  116b58:	dc000615 	stw	r16,24(sp)
  116b5c:	04000434 	movhi	r16,16
  116b60:	843fffc4 	addi	r16,r16,-1
  116b64:	dfc00f15 	stw	ra,60(sp)
  116b68:	df000e15 	stw	fp,56(sp)
  116b6c:	ddc00d15 	stw	r23,52(sp)
  116b70:	dd400b15 	stw	r21,44(sp)
  116b74:	dd000a15 	stw	r20,40(sp)
  116b78:	dcc00915 	stw	r19,36(sp)
  116b7c:	dc400715 	stw	r17,28(sp)
  116b80:	9481ffcc 	andi	r18,r18,2047
  116b84:	2c20703a 	and	r16,r5,r16
  116b88:	b2003fcc 	andi	r8,r22,255
  116b8c:	90006126 	beq	r18,zero,116d14 <__divdf3+0x1d0>
  116b90:	0081ffc4 	movi	r2,2047
  116b94:	202b883a 	mov	r21,r4
  116b98:	90803726 	beq	r18,r2,116c78 <__divdf3+0x134>
  116b9c:	80800434 	orhi	r2,r16,16
  116ba0:	100490fa 	slli	r2,r2,3
  116ba4:	2020d77a 	srli	r16,r4,29
  116ba8:	202a90fa 	slli	r21,r4,3
  116bac:	94bf0044 	addi	r18,r18,-1023
  116bb0:	80a0b03a 	or	r16,r16,r2
  116bb4:	0013883a 	mov	r9,zero
  116bb8:	000b883a 	mov	r5,zero
  116bbc:	3806d53a 	srli	r3,r7,20
  116bc0:	382ed7fa 	srli	r23,r7,31
  116bc4:	04400434 	movhi	r17,16
  116bc8:	8c7fffc4 	addi	r17,r17,-1
  116bcc:	18c1ffcc 	andi	r3,r3,2047
  116bd0:	3029883a 	mov	r20,r6
  116bd4:	3c62703a 	and	r17,r7,r17
  116bd8:	bf003fcc 	andi	fp,r23,255
  116bdc:	18006e26 	beq	r3,zero,116d98 <__divdf3+0x254>
  116be0:	0081ffc4 	movi	r2,2047
  116be4:	18806626 	beq	r3,r2,116d80 <__divdf3+0x23c>
  116be8:	88800434 	orhi	r2,r17,16
  116bec:	100490fa 	slli	r2,r2,3
  116bf0:	3022d77a 	srli	r17,r6,29
  116bf4:	302890fa 	slli	r20,r6,3
  116bf8:	18ff0044 	addi	r3,r3,-1023
  116bfc:	88a2b03a 	or	r17,r17,r2
  116c00:	000f883a 	mov	r7,zero
  116c04:	b5e6f03a 	xor	r19,r22,r23
  116c08:	3a4cb03a 	or	r6,r7,r9
  116c0c:	008003c4 	movi	r2,15
  116c10:	9809883a 	mov	r4,r19
  116c14:	90c7c83a 	sub	r3,r18,r3
  116c18:	9cc03fcc 	andi	r19,r19,255
  116c1c:	11809636 	bltu	r2,r6,116e78 <__divdf3+0x334>
  116c20:	300c90ba 	slli	r6,r6,2
  116c24:	00800474 	movhi	r2,17
  116c28:	109b0e04 	addi	r2,r2,27704
  116c2c:	308d883a 	add	r6,r6,r2
  116c30:	30800017 	ldw	r2,0(r6)
  116c34:	1000683a 	jmp	r2
  116c38:	00116e78 	rdprs	zero,zero,17849
  116c3c:	00116cb0 	cmpltui	zero,zero,17842
  116c40:	00116e68 	cmpgeui	zero,zero,17849
  116c44:	00116ca4 	muli	zero,zero,17842
  116c48:	00116e68 	cmpgeui	zero,zero,17849
  116c4c:	00116e3c 	xorhi	zero,zero,17848
  116c50:	00116e68 	cmpgeui	zero,zero,17849
  116c54:	00116ca4 	muli	zero,zero,17842
  116c58:	00116cb0 	cmpltui	zero,zero,17842
  116c5c:	00116cb0 	cmpltui	zero,zero,17842
  116c60:	00116e3c 	xorhi	zero,zero,17848
  116c64:	00116ca4 	muli	zero,zero,17842
  116c68:	00116c94 	movui	zero,17842
  116c6c:	00116c94 	movui	zero,17842
  116c70:	00116c94 	movui	zero,17842
  116c74:	00117200 	call	11720 <OSCtxSw_SWITCH_PC+0x116e0>
  116c78:	2404b03a 	or	r2,r4,r16
  116c7c:	10006c1e 	bne	r2,zero,116e30 <__divdf3+0x2ec>
  116c80:	02400204 	movi	r9,8
  116c84:	0021883a 	mov	r16,zero
  116c88:	002b883a 	mov	r21,zero
  116c8c:	01400084 	movi	r5,2
  116c90:	003fca06 	br	116bbc <__alt_data_end+0xfffd6bbc>
  116c94:	8023883a 	mov	r17,r16
  116c98:	a829883a 	mov	r20,r21
  116c9c:	4039883a 	mov	fp,r8
  116ca0:	280f883a 	mov	r7,r5
  116ca4:	00800084 	movi	r2,2
  116ca8:	3881601e 	bne	r7,r2,11722c <__divdf3+0x6e8>
  116cac:	e027883a 	mov	r19,fp
  116cb0:	9900004c 	andi	r4,r19,1
  116cb4:	0081ffc4 	movi	r2,2047
  116cb8:	0021883a 	mov	r16,zero
  116cbc:	002b883a 	mov	r21,zero
  116cc0:	1004953a 	slli	r2,r2,20
  116cc4:	20c03fcc 	andi	r3,r4,255
  116cc8:	01400434 	movhi	r5,16
  116ccc:	297fffc4 	addi	r5,r5,-1
  116cd0:	180697fa 	slli	r3,r3,31
  116cd4:	8160703a 	and	r16,r16,r5
  116cd8:	80a0b03a 	or	r16,r16,r2
  116cdc:	80c6b03a 	or	r3,r16,r3
  116ce0:	a805883a 	mov	r2,r21
  116ce4:	dfc00f17 	ldw	ra,60(sp)
  116ce8:	df000e17 	ldw	fp,56(sp)
  116cec:	ddc00d17 	ldw	r23,52(sp)
  116cf0:	dd800c17 	ldw	r22,48(sp)
  116cf4:	dd400b17 	ldw	r21,44(sp)
  116cf8:	dd000a17 	ldw	r20,40(sp)
  116cfc:	dcc00917 	ldw	r19,36(sp)
  116d00:	dc800817 	ldw	r18,32(sp)
  116d04:	dc400717 	ldw	r17,28(sp)
  116d08:	dc000617 	ldw	r16,24(sp)
  116d0c:	dec01004 	addi	sp,sp,64
  116d10:	f800283a 	ret
  116d14:	2404b03a 	or	r2,r4,r16
  116d18:	2023883a 	mov	r17,r4
  116d1c:	10003f26 	beq	r2,zero,116e1c <__divdf3+0x2d8>
  116d20:	80015e26 	beq	r16,zero,11729c <__divdf3+0x758>
  116d24:	8009883a 	mov	r4,r16
  116d28:	d9800215 	stw	r6,8(sp)
  116d2c:	d9c00515 	stw	r7,20(sp)
  116d30:	da000415 	stw	r8,16(sp)
  116d34:	0118c800 	call	118c80 <__clzsi2>
  116d38:	d9800217 	ldw	r6,8(sp)
  116d3c:	d9c00517 	ldw	r7,20(sp)
  116d40:	da000417 	ldw	r8,16(sp)
  116d44:	113ffd44 	addi	r4,r2,-11
  116d48:	00c00704 	movi	r3,28
  116d4c:	19014f16 	blt	r3,r4,11728c <__divdf3+0x748>
  116d50:	00c00744 	movi	r3,29
  116d54:	157ffe04 	addi	r21,r2,-8
  116d58:	1907c83a 	sub	r3,r3,r4
  116d5c:	8560983a 	sll	r16,r16,r21
  116d60:	88c6d83a 	srl	r3,r17,r3
  116d64:	8d6a983a 	sll	r21,r17,r21
  116d68:	1c20b03a 	or	r16,r3,r16
  116d6c:	1080fcc4 	addi	r2,r2,1011
  116d70:	00a5c83a 	sub	r18,zero,r2
  116d74:	0013883a 	mov	r9,zero
  116d78:	000b883a 	mov	r5,zero
  116d7c:	003f8f06 	br	116bbc <__alt_data_end+0xfffd6bbc>
  116d80:	3444b03a 	or	r2,r6,r17
  116d84:	1000231e 	bne	r2,zero,116e14 <__divdf3+0x2d0>
  116d88:	0023883a 	mov	r17,zero
  116d8c:	0029883a 	mov	r20,zero
  116d90:	01c00084 	movi	r7,2
  116d94:	003f9b06 	br	116c04 <__alt_data_end+0xfffd6c04>
  116d98:	3444b03a 	or	r2,r6,r17
  116d9c:	10001926 	beq	r2,zero,116e04 <__divdf3+0x2c0>
  116da0:	88014b26 	beq	r17,zero,1172d0 <__divdf3+0x78c>
  116da4:	8809883a 	mov	r4,r17
  116da8:	d9400115 	stw	r5,4(sp)
  116dac:	d9800215 	stw	r6,8(sp)
  116db0:	da000415 	stw	r8,16(sp)
  116db4:	da400315 	stw	r9,12(sp)
  116db8:	0118c800 	call	118c80 <__clzsi2>
  116dbc:	d9400117 	ldw	r5,4(sp)
  116dc0:	d9800217 	ldw	r6,8(sp)
  116dc4:	da000417 	ldw	r8,16(sp)
  116dc8:	da400317 	ldw	r9,12(sp)
  116dcc:	113ffd44 	addi	r4,r2,-11
  116dd0:	00c00704 	movi	r3,28
  116dd4:	19013a16 	blt	r3,r4,1172c0 <__divdf3+0x77c>
  116dd8:	00c00744 	movi	r3,29
  116ddc:	153ffe04 	addi	r20,r2,-8
  116de0:	1907c83a 	sub	r3,r3,r4
  116de4:	8d22983a 	sll	r17,r17,r20
  116de8:	30c6d83a 	srl	r3,r6,r3
  116dec:	3528983a 	sll	r20,r6,r20
  116df0:	1c62b03a 	or	r17,r3,r17
  116df4:	1080fcc4 	addi	r2,r2,1011
  116df8:	0087c83a 	sub	r3,zero,r2
  116dfc:	000f883a 	mov	r7,zero
  116e00:	003f8006 	br	116c04 <__alt_data_end+0xfffd6c04>
  116e04:	0023883a 	mov	r17,zero
  116e08:	0029883a 	mov	r20,zero
  116e0c:	01c00044 	movi	r7,1
  116e10:	003f7c06 	br	116c04 <__alt_data_end+0xfffd6c04>
  116e14:	01c000c4 	movi	r7,3
  116e18:	003f7a06 	br	116c04 <__alt_data_end+0xfffd6c04>
  116e1c:	02400104 	movi	r9,4
  116e20:	0021883a 	mov	r16,zero
  116e24:	002b883a 	mov	r21,zero
  116e28:	01400044 	movi	r5,1
  116e2c:	003f6306 	br	116bbc <__alt_data_end+0xfffd6bbc>
  116e30:	02400304 	movi	r9,12
  116e34:	014000c4 	movi	r5,3
  116e38:	003f6006 	br	116bbc <__alt_data_end+0xfffd6bbc>
  116e3c:	04000434 	movhi	r16,16
  116e40:	0009883a 	mov	r4,zero
  116e44:	843fffc4 	addi	r16,r16,-1
  116e48:	057fffc4 	movi	r21,-1
  116e4c:	0081ffc4 	movi	r2,2047
  116e50:	003f9b06 	br	116cc0 <__alt_data_end+0xfffd6cc0>
  116e54:	00c00044 	movi	r3,1
  116e58:	1887c83a 	sub	r3,r3,r2
  116e5c:	01000e04 	movi	r4,56
  116e60:	20c1530e 	bge	r4,r3,1173b0 <__divdf3+0x86c>
  116e64:	9900004c 	andi	r4,r19,1
  116e68:	0005883a 	mov	r2,zero
  116e6c:	0021883a 	mov	r16,zero
  116e70:	002b883a 	mov	r21,zero
  116e74:	003f9206 	br	116cc0 <__alt_data_end+0xfffd6cc0>
  116e78:	8c012e36 	bltu	r17,r16,117334 <__divdf3+0x7f0>
  116e7c:	84412c26 	beq	r16,r17,117330 <__divdf3+0x7ec>
  116e80:	a82f883a 	mov	r23,r21
  116e84:	18ffffc4 	addi	r3,r3,-1
  116e88:	002b883a 	mov	r21,zero
  116e8c:	a004d63a 	srli	r2,r20,24
  116e90:	8822923a 	slli	r17,r17,8
  116e94:	a028923a 	slli	r20,r20,8
  116e98:	8009883a 	mov	r4,r16
  116e9c:	88acb03a 	or	r22,r17,r2
  116ea0:	dd000015 	stw	r20,0(sp)
  116ea4:	b028d43a 	srli	r20,r22,16
  116ea8:	d8c00215 	stw	r3,8(sp)
  116eac:	b4bfffcc 	andi	r18,r22,65535
  116eb0:	a00b883a 	mov	r5,r20
  116eb4:	0115fb80 	call	115fb8 <__udivsi3>
  116eb8:	100b883a 	mov	r5,r2
  116ebc:	9009883a 	mov	r4,r18
  116ec0:	1023883a 	mov	r17,r2
  116ec4:	01160740 	call	116074 <__mulsi3>
  116ec8:	8009883a 	mov	r4,r16
  116ecc:	a00b883a 	mov	r5,r20
  116ed0:	1039883a 	mov	fp,r2
  116ed4:	011601c0 	call	11601c <__umodsi3>
  116ed8:	1004943a 	slli	r2,r2,16
  116edc:	b808d43a 	srli	r4,r23,16
  116ee0:	d8c00217 	ldw	r3,8(sp)
  116ee4:	2084b03a 	or	r2,r4,r2
  116ee8:	1700062e 	bgeu	r2,fp,116f04 <__divdf3+0x3c0>
  116eec:	1585883a 	add	r2,r2,r22
  116ef0:	893fffc4 	addi	r4,r17,-1
  116ef4:	15811d36 	bltu	r2,r22,11736c <__divdf3+0x828>
  116ef8:	17011c2e 	bgeu	r2,fp,11736c <__divdf3+0x828>
  116efc:	8c7fff84 	addi	r17,r17,-2
  116f00:	1585883a 	add	r2,r2,r22
  116f04:	1739c83a 	sub	fp,r2,fp
  116f08:	a00b883a 	mov	r5,r20
  116f0c:	e009883a 	mov	r4,fp
  116f10:	d8c00215 	stw	r3,8(sp)
  116f14:	0115fb80 	call	115fb8 <__udivsi3>
  116f18:	100b883a 	mov	r5,r2
  116f1c:	9009883a 	mov	r4,r18
  116f20:	1021883a 	mov	r16,r2
  116f24:	01160740 	call	116074 <__mulsi3>
  116f28:	a00b883a 	mov	r5,r20
  116f2c:	e009883a 	mov	r4,fp
  116f30:	d8800415 	stw	r2,16(sp)
  116f34:	011601c0 	call	11601c <__umodsi3>
  116f38:	1004943a 	slli	r2,r2,16
  116f3c:	da000417 	ldw	r8,16(sp)
  116f40:	bdffffcc 	andi	r23,r23,65535
  116f44:	b884b03a 	or	r2,r23,r2
  116f48:	d8c00217 	ldw	r3,8(sp)
  116f4c:	1200062e 	bgeu	r2,r8,116f68 <__divdf3+0x424>
  116f50:	1585883a 	add	r2,r2,r22
  116f54:	813fffc4 	addi	r4,r16,-1
  116f58:	15810236 	bltu	r2,r22,117364 <__divdf3+0x820>
  116f5c:	1201012e 	bgeu	r2,r8,117364 <__divdf3+0x820>
  116f60:	843fff84 	addi	r16,r16,-2
  116f64:	1585883a 	add	r2,r2,r22
  116f68:	8822943a 	slli	r17,r17,16
  116f6c:	d9800017 	ldw	r6,0(sp)
  116f70:	1211c83a 	sub	r8,r2,r8
  116f74:	8c22b03a 	or	r17,r17,r16
  116f78:	373fffcc 	andi	fp,r6,65535
  116f7c:	8abfffcc 	andi	r10,r17,65535
  116f80:	8820d43a 	srli	r16,r17,16
  116f84:	5009883a 	mov	r4,r10
  116f88:	e00b883a 	mov	r5,fp
  116f8c:	302ed43a 	srli	r23,r6,16
  116f90:	d8c00215 	stw	r3,8(sp)
  116f94:	da000415 	stw	r8,16(sp)
  116f98:	da800115 	stw	r10,4(sp)
  116f9c:	01160740 	call	116074 <__mulsi3>
  116fa0:	800b883a 	mov	r5,r16
  116fa4:	e009883a 	mov	r4,fp
  116fa8:	d8800515 	stw	r2,20(sp)
  116fac:	01160740 	call	116074 <__mulsi3>
  116fb0:	8009883a 	mov	r4,r16
  116fb4:	b80b883a 	mov	r5,r23
  116fb8:	d8800315 	stw	r2,12(sp)
  116fbc:	01160740 	call	116074 <__mulsi3>
  116fc0:	da800117 	ldw	r10,4(sp)
  116fc4:	b80b883a 	mov	r5,r23
  116fc8:	1021883a 	mov	r16,r2
  116fcc:	5009883a 	mov	r4,r10
  116fd0:	01160740 	call	116074 <__mulsi3>
  116fd4:	d9c00517 	ldw	r7,20(sp)
  116fd8:	da400317 	ldw	r9,12(sp)
  116fdc:	d8c00217 	ldw	r3,8(sp)
  116fe0:	3808d43a 	srli	r4,r7,16
  116fe4:	1245883a 	add	r2,r2,r9
  116fe8:	da000417 	ldw	r8,16(sp)
  116fec:	2085883a 	add	r2,r4,r2
  116ff0:	1240022e 	bgeu	r2,r9,116ffc <__divdf3+0x4b8>
  116ff4:	01000074 	movhi	r4,1
  116ff8:	8121883a 	add	r16,r16,r4
  116ffc:	1008d43a 	srli	r4,r2,16
  117000:	1004943a 	slli	r2,r2,16
  117004:	39ffffcc 	andi	r7,r7,65535
  117008:	2409883a 	add	r4,r4,r16
  11700c:	11c5883a 	add	r2,r2,r7
  117010:	4100bb36 	bltu	r8,r4,117300 <__divdf3+0x7bc>
  117014:	4100d726 	beq	r8,r4,117374 <__divdf3+0x830>
  117018:	4109c83a 	sub	r4,r8,r4
  11701c:	a8a1c83a 	sub	r16,r21,r2
  117020:	ac2b803a 	cmpltu	r21,r21,r16
  117024:	256bc83a 	sub	r21,r4,r21
  117028:	b540d926 	beq	r22,r21,117390 <__divdf3+0x84c>
  11702c:	a00b883a 	mov	r5,r20
  117030:	a809883a 	mov	r4,r21
  117034:	d8c00215 	stw	r3,8(sp)
  117038:	0115fb80 	call	115fb8 <__udivsi3>
  11703c:	100b883a 	mov	r5,r2
  117040:	9009883a 	mov	r4,r18
  117044:	d8800515 	stw	r2,20(sp)
  117048:	01160740 	call	116074 <__mulsi3>
  11704c:	a809883a 	mov	r4,r21
  117050:	a00b883a 	mov	r5,r20
  117054:	d8800415 	stw	r2,16(sp)
  117058:	011601c0 	call	11601c <__umodsi3>
  11705c:	1004943a 	slli	r2,r2,16
  117060:	8008d43a 	srli	r4,r16,16
  117064:	da000417 	ldw	r8,16(sp)
  117068:	d8c00217 	ldw	r3,8(sp)
  11706c:	2084b03a 	or	r2,r4,r2
  117070:	d9c00517 	ldw	r7,20(sp)
  117074:	1200062e 	bgeu	r2,r8,117090 <__divdf3+0x54c>
  117078:	1585883a 	add	r2,r2,r22
  11707c:	393fffc4 	addi	r4,r7,-1
  117080:	1580c536 	bltu	r2,r22,117398 <__divdf3+0x854>
  117084:	1200c42e 	bgeu	r2,r8,117398 <__divdf3+0x854>
  117088:	39ffff84 	addi	r7,r7,-2
  11708c:	1585883a 	add	r2,r2,r22
  117090:	122bc83a 	sub	r21,r2,r8
  117094:	a00b883a 	mov	r5,r20
  117098:	a809883a 	mov	r4,r21
  11709c:	d8c00215 	stw	r3,8(sp)
  1170a0:	d9c00515 	stw	r7,20(sp)
  1170a4:	0115fb80 	call	115fb8 <__udivsi3>
  1170a8:	9009883a 	mov	r4,r18
  1170ac:	100b883a 	mov	r5,r2
  1170b0:	d8800415 	stw	r2,16(sp)
  1170b4:	01160740 	call	116074 <__mulsi3>
  1170b8:	a809883a 	mov	r4,r21
  1170bc:	a00b883a 	mov	r5,r20
  1170c0:	1025883a 	mov	r18,r2
  1170c4:	011601c0 	call	11601c <__umodsi3>
  1170c8:	1004943a 	slli	r2,r2,16
  1170cc:	813fffcc 	andi	r4,r16,65535
  1170d0:	d8c00217 	ldw	r3,8(sp)
  1170d4:	20a0b03a 	or	r16,r4,r2
  1170d8:	d9c00517 	ldw	r7,20(sp)
  1170dc:	da000417 	ldw	r8,16(sp)
  1170e0:	8480062e 	bgeu	r16,r18,1170fc <__divdf3+0x5b8>
  1170e4:	85a1883a 	add	r16,r16,r22
  1170e8:	40bfffc4 	addi	r2,r8,-1
  1170ec:	8580ac36 	bltu	r16,r22,1173a0 <__divdf3+0x85c>
  1170f0:	8480ab2e 	bgeu	r16,r18,1173a0 <__divdf3+0x85c>
  1170f4:	423fff84 	addi	r8,r8,-2
  1170f8:	85a1883a 	add	r16,r16,r22
  1170fc:	3804943a 	slli	r2,r7,16
  117100:	84a1c83a 	sub	r16,r16,r18
  117104:	e009883a 	mov	r4,fp
  117108:	1228b03a 	or	r20,r2,r8
  11710c:	a1ffffcc 	andi	r7,r20,65535
  117110:	a024d43a 	srli	r18,r20,16
  117114:	380b883a 	mov	r5,r7
  117118:	d8c00215 	stw	r3,8(sp)
  11711c:	d9c00515 	stw	r7,20(sp)
  117120:	01160740 	call	116074 <__mulsi3>
  117124:	900b883a 	mov	r5,r18
  117128:	e009883a 	mov	r4,fp
  11712c:	102b883a 	mov	r21,r2
  117130:	01160740 	call	116074 <__mulsi3>
  117134:	900b883a 	mov	r5,r18
  117138:	b809883a 	mov	r4,r23
  11713c:	1039883a 	mov	fp,r2
  117140:	01160740 	call	116074 <__mulsi3>
  117144:	d9c00517 	ldw	r7,20(sp)
  117148:	b80b883a 	mov	r5,r23
  11714c:	1025883a 	mov	r18,r2
  117150:	3809883a 	mov	r4,r7
  117154:	01160740 	call	116074 <__mulsi3>
  117158:	a808d43a 	srli	r4,r21,16
  11715c:	1705883a 	add	r2,r2,fp
  117160:	d8c00217 	ldw	r3,8(sp)
  117164:	2085883a 	add	r2,r4,r2
  117168:	1700022e 	bgeu	r2,fp,117174 <__divdf3+0x630>
  11716c:	01000074 	movhi	r4,1
  117170:	9125883a 	add	r18,r18,r4
  117174:	1008d43a 	srli	r4,r2,16
  117178:	1004943a 	slli	r2,r2,16
  11717c:	ad7fffcc 	andi	r21,r21,65535
  117180:	2489883a 	add	r4,r4,r18
  117184:	1545883a 	add	r2,r2,r21
  117188:	81003836 	bltu	r16,r4,11726c <__divdf3+0x728>
  11718c:	81003626 	beq	r16,r4,117268 <__divdf3+0x724>
  117190:	a5000054 	ori	r20,r20,1
  117194:	1880ffc4 	addi	r2,r3,1023
  117198:	00bf2e0e 	bge	zero,r2,116e54 <__alt_data_end+0xfffd6e54>
  11719c:	a10001cc 	andi	r4,r20,7
  1171a0:	20000726 	beq	r4,zero,1171c0 <__divdf3+0x67c>
  1171a4:	a10003cc 	andi	r4,r20,15
  1171a8:	01400104 	movi	r5,4
  1171ac:	21400426 	beq	r4,r5,1171c0 <__divdf3+0x67c>
  1171b0:	a149883a 	add	r4,r20,r5
  1171b4:	2529803a 	cmpltu	r20,r4,r20
  1171b8:	8d23883a 	add	r17,r17,r20
  1171bc:	2029883a 	mov	r20,r4
  1171c0:	8900402c 	andhi	r4,r17,256
  1171c4:	20000426 	beq	r4,zero,1171d8 <__divdf3+0x694>
  1171c8:	18810004 	addi	r2,r3,1024
  1171cc:	00ffc034 	movhi	r3,65280
  1171d0:	18ffffc4 	addi	r3,r3,-1
  1171d4:	88e2703a 	and	r17,r17,r3
  1171d8:	00c1ff84 	movi	r3,2046
  1171dc:	18beb416 	blt	r3,r2,116cb0 <__alt_data_end+0xfffd6cb0>
  1171e0:	a028d0fa 	srli	r20,r20,3
  1171e4:	882a977a 	slli	r21,r17,29
  1171e8:	8820927a 	slli	r16,r17,9
  1171ec:	1081ffcc 	andi	r2,r2,2047
  1171f0:	ad2ab03a 	or	r21,r21,r20
  1171f4:	8020d33a 	srli	r16,r16,12
  1171f8:	9900004c 	andi	r4,r19,1
  1171fc:	003eb006 	br	116cc0 <__alt_data_end+0xfffd6cc0>
  117200:	8080022c 	andhi	r2,r16,8
  117204:	10001226 	beq	r2,zero,117250 <__divdf3+0x70c>
  117208:	8880022c 	andhi	r2,r17,8
  11720c:	1000101e 	bne	r2,zero,117250 <__divdf3+0x70c>
  117210:	00800434 	movhi	r2,16
  117214:	8c000234 	orhi	r16,r17,8
  117218:	10bfffc4 	addi	r2,r2,-1
  11721c:	b809883a 	mov	r4,r23
  117220:	80a0703a 	and	r16,r16,r2
  117224:	a02b883a 	mov	r21,r20
  117228:	003f0806 	br	116e4c <__alt_data_end+0xfffd6e4c>
  11722c:	008000c4 	movi	r2,3
  117230:	3880b126 	beq	r7,r2,1174f8 <__divdf3+0x9b4>
  117234:	00800044 	movi	r2,1
  117238:	38805b1e 	bne	r7,r2,1173a8 <__divdf3+0x864>
  11723c:	e009883a 	mov	r4,fp
  117240:	0005883a 	mov	r2,zero
  117244:	0021883a 	mov	r16,zero
  117248:	002b883a 	mov	r21,zero
  11724c:	003e9c06 	br	116cc0 <__alt_data_end+0xfffd6cc0>
  117250:	00800434 	movhi	r2,16
  117254:	84000234 	orhi	r16,r16,8
  117258:	10bfffc4 	addi	r2,r2,-1
  11725c:	b009883a 	mov	r4,r22
  117260:	80a0703a 	and	r16,r16,r2
  117264:	003ef906 	br	116e4c <__alt_data_end+0xfffd6e4c>
  117268:	103fca26 	beq	r2,zero,117194 <__alt_data_end+0xfffd7194>
  11726c:	b421883a 	add	r16,r22,r16
  117270:	a17fffc4 	addi	r5,r20,-1
  117274:	8580422e 	bgeu	r16,r22,117380 <__divdf3+0x83c>
  117278:	2829883a 	mov	r20,r5
  11727c:	813fc41e 	bne	r16,r4,117190 <__alt_data_end+0xfffd7190>
  117280:	d9800017 	ldw	r6,0(sp)
  117284:	30bfc21e 	bne	r6,r2,117190 <__alt_data_end+0xfffd7190>
  117288:	003fc206 	br	117194 <__alt_data_end+0xfffd7194>
  11728c:	143ff604 	addi	r16,r2,-40
  117290:	8c20983a 	sll	r16,r17,r16
  117294:	002b883a 	mov	r21,zero
  117298:	003eb406 	br	116d6c <__alt_data_end+0xfffd6d6c>
  11729c:	d9800215 	stw	r6,8(sp)
  1172a0:	d9c00515 	stw	r7,20(sp)
  1172a4:	da000415 	stw	r8,16(sp)
  1172a8:	0118c800 	call	118c80 <__clzsi2>
  1172ac:	10800804 	addi	r2,r2,32
  1172b0:	da000417 	ldw	r8,16(sp)
  1172b4:	d9c00517 	ldw	r7,20(sp)
  1172b8:	d9800217 	ldw	r6,8(sp)
  1172bc:	003ea106 	br	116d44 <__alt_data_end+0xfffd6d44>
  1172c0:	147ff604 	addi	r17,r2,-40
  1172c4:	3462983a 	sll	r17,r6,r17
  1172c8:	0029883a 	mov	r20,zero
  1172cc:	003ec906 	br	116df4 <__alt_data_end+0xfffd6df4>
  1172d0:	3009883a 	mov	r4,r6
  1172d4:	d9400115 	stw	r5,4(sp)
  1172d8:	d9800215 	stw	r6,8(sp)
  1172dc:	da000415 	stw	r8,16(sp)
  1172e0:	da400315 	stw	r9,12(sp)
  1172e4:	0118c800 	call	118c80 <__clzsi2>
  1172e8:	10800804 	addi	r2,r2,32
  1172ec:	da400317 	ldw	r9,12(sp)
  1172f0:	da000417 	ldw	r8,16(sp)
  1172f4:	d9800217 	ldw	r6,8(sp)
  1172f8:	d9400117 	ldw	r5,4(sp)
  1172fc:	003eb306 	br	116dcc <__alt_data_end+0xfffd6dcc>
  117300:	d9800017 	ldw	r6,0(sp)
  117304:	a9ab883a 	add	r21,r21,r6
  117308:	a98b803a 	cmpltu	r5,r21,r6
  11730c:	2d8b883a 	add	r5,r5,r22
  117310:	2a11883a 	add	r8,r5,r8
  117314:	897fffc4 	addi	r5,r17,-1
  117318:	b2000c2e 	bgeu	r22,r8,11734c <__divdf3+0x808>
  11731c:	41003f36 	bltu	r8,r4,11741c <__divdf3+0x8d8>
  117320:	22006c26 	beq	r4,r8,1174d4 <__divdf3+0x990>
  117324:	4109c83a 	sub	r4,r8,r4
  117328:	2823883a 	mov	r17,r5
  11732c:	003f3b06 	br	11701c <__alt_data_end+0xfffd701c>
  117330:	ad3ed336 	bltu	r21,r20,116e80 <__alt_data_end+0xfffd6e80>
  117334:	a804d07a 	srli	r2,r21,1
  117338:	802e97fa 	slli	r23,r16,31
  11733c:	a82a97fa 	slli	r21,r21,31
  117340:	8020d07a 	srli	r16,r16,1
  117344:	b8aeb03a 	or	r23,r23,r2
  117348:	003ed006 	br	116e8c <__alt_data_end+0xfffd6e8c>
  11734c:	b23ff51e 	bne	r22,r8,117324 <__alt_data_end+0xfffd7324>
  117350:	d9800017 	ldw	r6,0(sp)
  117354:	a9bff12e 	bgeu	r21,r6,11731c <__alt_data_end+0xfffd731c>
  117358:	b109c83a 	sub	r4,r22,r4
  11735c:	2823883a 	mov	r17,r5
  117360:	003f2e06 	br	11701c <__alt_data_end+0xfffd701c>
  117364:	2021883a 	mov	r16,r4
  117368:	003eff06 	br	116f68 <__alt_data_end+0xfffd6f68>
  11736c:	2023883a 	mov	r17,r4
  117370:	003ee406 	br	116f04 <__alt_data_end+0xfffd6f04>
  117374:	a8bfe236 	bltu	r21,r2,117300 <__alt_data_end+0xfffd7300>
  117378:	0009883a 	mov	r4,zero
  11737c:	003f2706 	br	11701c <__alt_data_end+0xfffd701c>
  117380:	81002d36 	bltu	r16,r4,117438 <__divdf3+0x8f4>
  117384:	24005626 	beq	r4,r16,1174e0 <__divdf3+0x99c>
  117388:	2829883a 	mov	r20,r5
  11738c:	003f8006 	br	117190 <__alt_data_end+0xfffd7190>
  117390:	053fffc4 	movi	r20,-1
  117394:	003f7f06 	br	117194 <__alt_data_end+0xfffd7194>
  117398:	200f883a 	mov	r7,r4
  11739c:	003f3c06 	br	117090 <__alt_data_end+0xfffd7090>
  1173a0:	1011883a 	mov	r8,r2
  1173a4:	003f5506 	br	1170fc <__alt_data_end+0xfffd70fc>
  1173a8:	e027883a 	mov	r19,fp
  1173ac:	003f7906 	br	117194 <__alt_data_end+0xfffd7194>
  1173b0:	010007c4 	movi	r4,31
  1173b4:	20c02816 	blt	r4,r3,117458 <__divdf3+0x914>
  1173b8:	00800804 	movi	r2,32
  1173bc:	10c5c83a 	sub	r2,r2,r3
  1173c0:	888a983a 	sll	r5,r17,r2
  1173c4:	a0c8d83a 	srl	r4,r20,r3
  1173c8:	a084983a 	sll	r2,r20,r2
  1173cc:	88e2d83a 	srl	r17,r17,r3
  1173d0:	2906b03a 	or	r3,r5,r4
  1173d4:	1004c03a 	cmpne	r2,r2,zero
  1173d8:	1886b03a 	or	r3,r3,r2
  1173dc:	188001cc 	andi	r2,r3,7
  1173e0:	10000726 	beq	r2,zero,117400 <__divdf3+0x8bc>
  1173e4:	188003cc 	andi	r2,r3,15
  1173e8:	01000104 	movi	r4,4
  1173ec:	11000426 	beq	r2,r4,117400 <__divdf3+0x8bc>
  1173f0:	1805883a 	mov	r2,r3
  1173f4:	10c00104 	addi	r3,r2,4
  1173f8:	1885803a 	cmpltu	r2,r3,r2
  1173fc:	88a3883a 	add	r17,r17,r2
  117400:	8880202c 	andhi	r2,r17,128
  117404:	10002926 	beq	r2,zero,1174ac <__divdf3+0x968>
  117408:	9900004c 	andi	r4,r19,1
  11740c:	00800044 	movi	r2,1
  117410:	0021883a 	mov	r16,zero
  117414:	002b883a 	mov	r21,zero
  117418:	003e2906 	br	116cc0 <__alt_data_end+0xfffd6cc0>
  11741c:	d9800017 	ldw	r6,0(sp)
  117420:	8c7fff84 	addi	r17,r17,-2
  117424:	a9ab883a 	add	r21,r21,r6
  117428:	a98b803a 	cmpltu	r5,r21,r6
  11742c:	2d8b883a 	add	r5,r5,r22
  117430:	2a11883a 	add	r8,r5,r8
  117434:	003ef806 	br	117018 <__alt_data_end+0xfffd7018>
  117438:	d9800017 	ldw	r6,0(sp)
  11743c:	318f883a 	add	r7,r6,r6
  117440:	398b803a 	cmpltu	r5,r7,r6
  117444:	2d8d883a 	add	r6,r5,r22
  117448:	81a1883a 	add	r16,r16,r6
  11744c:	a17fff84 	addi	r5,r20,-2
  117450:	d9c00015 	stw	r7,0(sp)
  117454:	003f8806 	br	117278 <__alt_data_end+0xfffd7278>
  117458:	013ff844 	movi	r4,-31
  11745c:	2085c83a 	sub	r2,r4,r2
  117460:	8888d83a 	srl	r4,r17,r2
  117464:	00800804 	movi	r2,32
  117468:	18802126 	beq	r3,r2,1174f0 <__divdf3+0x9ac>
  11746c:	04001004 	movi	r16,64
  117470:	80c7c83a 	sub	r3,r16,r3
  117474:	88e0983a 	sll	r16,r17,r3
  117478:	8504b03a 	or	r2,r16,r20
  11747c:	1004c03a 	cmpne	r2,r2,zero
  117480:	2084b03a 	or	r2,r4,r2
  117484:	144001cc 	andi	r17,r2,7
  117488:	88000d1e 	bne	r17,zero,1174c0 <__divdf3+0x97c>
  11748c:	0021883a 	mov	r16,zero
  117490:	102ad0fa 	srli	r21,r2,3
  117494:	9900004c 	andi	r4,r19,1
  117498:	0005883a 	mov	r2,zero
  11749c:	ac6ab03a 	or	r21,r21,r17
  1174a0:	003e0706 	br	116cc0 <__alt_data_end+0xfffd6cc0>
  1174a4:	1007883a 	mov	r3,r2
  1174a8:	0023883a 	mov	r17,zero
  1174ac:	8820927a 	slli	r16,r17,9
  1174b0:	1805883a 	mov	r2,r3
  1174b4:	8822977a 	slli	r17,r17,29
  1174b8:	8020d33a 	srli	r16,r16,12
  1174bc:	003ff406 	br	117490 <__alt_data_end+0xfffd7490>
  1174c0:	10c003cc 	andi	r3,r2,15
  1174c4:	01000104 	movi	r4,4
  1174c8:	193ff626 	beq	r3,r4,1174a4 <__alt_data_end+0xfffd74a4>
  1174cc:	0023883a 	mov	r17,zero
  1174d0:	003fc806 	br	1173f4 <__alt_data_end+0xfffd73f4>
  1174d4:	a8bfd136 	bltu	r21,r2,11741c <__alt_data_end+0xfffd741c>
  1174d8:	2823883a 	mov	r17,r5
  1174dc:	003fa606 	br	117378 <__alt_data_end+0xfffd7378>
  1174e0:	d9800017 	ldw	r6,0(sp)
  1174e4:	30bfd436 	bltu	r6,r2,117438 <__alt_data_end+0xfffd7438>
  1174e8:	2829883a 	mov	r20,r5
  1174ec:	003f6406 	br	117280 <__alt_data_end+0xfffd7280>
  1174f0:	0021883a 	mov	r16,zero
  1174f4:	003fe006 	br	117478 <__alt_data_end+0xfffd7478>
  1174f8:	00800434 	movhi	r2,16
  1174fc:	8c000234 	orhi	r16,r17,8
  117500:	10bfffc4 	addi	r2,r2,-1
  117504:	e009883a 	mov	r4,fp
  117508:	80a0703a 	and	r16,r16,r2
  11750c:	a02b883a 	mov	r21,r20
  117510:	003e4e06 	br	116e4c <__alt_data_end+0xfffd6e4c>

00117514 <__eqdf2>:
  117514:	2804d53a 	srli	r2,r5,20
  117518:	3806d53a 	srli	r3,r7,20
  11751c:	02000434 	movhi	r8,16
  117520:	423fffc4 	addi	r8,r8,-1
  117524:	1081ffcc 	andi	r2,r2,2047
  117528:	0281ffc4 	movi	r10,2047
  11752c:	2a12703a 	and	r9,r5,r8
  117530:	18c1ffcc 	andi	r3,r3,2047
  117534:	3a10703a 	and	r8,r7,r8
  117538:	280ad7fa 	srli	r5,r5,31
  11753c:	380ed7fa 	srli	r7,r7,31
  117540:	12801026 	beq	r2,r10,117584 <__eqdf2+0x70>
  117544:	0281ffc4 	movi	r10,2047
  117548:	1a800a26 	beq	r3,r10,117574 <__eqdf2+0x60>
  11754c:	10c00226 	beq	r2,r3,117558 <__eqdf2+0x44>
  117550:	00800044 	movi	r2,1
  117554:	f800283a 	ret
  117558:	4a3ffd1e 	bne	r9,r8,117550 <__alt_data_end+0xfffd7550>
  11755c:	21bffc1e 	bne	r4,r6,117550 <__alt_data_end+0xfffd7550>
  117560:	29c00c26 	beq	r5,r7,117594 <__eqdf2+0x80>
  117564:	103ffa1e 	bne	r2,zero,117550 <__alt_data_end+0xfffd7550>
  117568:	2244b03a 	or	r2,r4,r9
  11756c:	1004c03a 	cmpne	r2,r2,zero
  117570:	f800283a 	ret
  117574:	3214b03a 	or	r10,r6,r8
  117578:	503ff426 	beq	r10,zero,11754c <__alt_data_end+0xfffd754c>
  11757c:	00800044 	movi	r2,1
  117580:	f800283a 	ret
  117584:	2254b03a 	or	r10,r4,r9
  117588:	503fee26 	beq	r10,zero,117544 <__alt_data_end+0xfffd7544>
  11758c:	00800044 	movi	r2,1
  117590:	f800283a 	ret
  117594:	0005883a 	mov	r2,zero
  117598:	f800283a 	ret

0011759c <__gedf2>:
  11759c:	2804d53a 	srli	r2,r5,20
  1175a0:	3806d53a 	srli	r3,r7,20
  1175a4:	02000434 	movhi	r8,16
  1175a8:	423fffc4 	addi	r8,r8,-1
  1175ac:	1081ffcc 	andi	r2,r2,2047
  1175b0:	0241ffc4 	movi	r9,2047
  1175b4:	2a14703a 	and	r10,r5,r8
  1175b8:	18c1ffcc 	andi	r3,r3,2047
  1175bc:	3a10703a 	and	r8,r7,r8
  1175c0:	280ad7fa 	srli	r5,r5,31
  1175c4:	380ed7fa 	srli	r7,r7,31
  1175c8:	12401d26 	beq	r2,r9,117640 <__gedf2+0xa4>
  1175cc:	0241ffc4 	movi	r9,2047
  1175d0:	1a401226 	beq	r3,r9,11761c <__gedf2+0x80>
  1175d4:	1000081e 	bne	r2,zero,1175f8 <__gedf2+0x5c>
  1175d8:	2296b03a 	or	r11,r4,r10
  1175dc:	5813003a 	cmpeq	r9,r11,zero
  1175e0:	1800091e 	bne	r3,zero,117608 <__gedf2+0x6c>
  1175e4:	3218b03a 	or	r12,r6,r8
  1175e8:	6000071e 	bne	r12,zero,117608 <__gedf2+0x6c>
  1175ec:	0005883a 	mov	r2,zero
  1175f0:	5800101e 	bne	r11,zero,117634 <__gedf2+0x98>
  1175f4:	f800283a 	ret
  1175f8:	18000c1e 	bne	r3,zero,11762c <__gedf2+0x90>
  1175fc:	3212b03a 	or	r9,r6,r8
  117600:	48000c26 	beq	r9,zero,117634 <__gedf2+0x98>
  117604:	0013883a 	mov	r9,zero
  117608:	39c03fcc 	andi	r7,r7,255
  11760c:	48000826 	beq	r9,zero,117630 <__gedf2+0x94>
  117610:	38000926 	beq	r7,zero,117638 <__gedf2+0x9c>
  117614:	00800044 	movi	r2,1
  117618:	f800283a 	ret
  11761c:	3212b03a 	or	r9,r6,r8
  117620:	483fec26 	beq	r9,zero,1175d4 <__alt_data_end+0xfffd75d4>
  117624:	00bfff84 	movi	r2,-2
  117628:	f800283a 	ret
  11762c:	39c03fcc 	andi	r7,r7,255
  117630:	29c00626 	beq	r5,r7,11764c <__gedf2+0xb0>
  117634:	283ff726 	beq	r5,zero,117614 <__alt_data_end+0xfffd7614>
  117638:	00bfffc4 	movi	r2,-1
  11763c:	f800283a 	ret
  117640:	2292b03a 	or	r9,r4,r10
  117644:	483fe126 	beq	r9,zero,1175cc <__alt_data_end+0xfffd75cc>
  117648:	003ff606 	br	117624 <__alt_data_end+0xfffd7624>
  11764c:	18bff916 	blt	r3,r2,117634 <__alt_data_end+0xfffd7634>
  117650:	10c00316 	blt	r2,r3,117660 <__gedf2+0xc4>
  117654:	42bff736 	bltu	r8,r10,117634 <__alt_data_end+0xfffd7634>
  117658:	52000326 	beq	r10,r8,117668 <__gedf2+0xcc>
  11765c:	5200042e 	bgeu	r10,r8,117670 <__gedf2+0xd4>
  117660:	283fec1e 	bne	r5,zero,117614 <__alt_data_end+0xfffd7614>
  117664:	003ff406 	br	117638 <__alt_data_end+0xfffd7638>
  117668:	313ff236 	bltu	r6,r4,117634 <__alt_data_end+0xfffd7634>
  11766c:	21bffc36 	bltu	r4,r6,117660 <__alt_data_end+0xfffd7660>
  117670:	0005883a 	mov	r2,zero
  117674:	f800283a 	ret

00117678 <__ledf2>:
  117678:	2804d53a 	srli	r2,r5,20
  11767c:	3810d53a 	srli	r8,r7,20
  117680:	00c00434 	movhi	r3,16
  117684:	18ffffc4 	addi	r3,r3,-1
  117688:	1081ffcc 	andi	r2,r2,2047
  11768c:	0241ffc4 	movi	r9,2047
  117690:	28d4703a 	and	r10,r5,r3
  117694:	4201ffcc 	andi	r8,r8,2047
  117698:	38c6703a 	and	r3,r7,r3
  11769c:	280ad7fa 	srli	r5,r5,31
  1176a0:	380ed7fa 	srli	r7,r7,31
  1176a4:	12401f26 	beq	r2,r9,117724 <__ledf2+0xac>
  1176a8:	0241ffc4 	movi	r9,2047
  1176ac:	42401426 	beq	r8,r9,117700 <__ledf2+0x88>
  1176b0:	1000091e 	bne	r2,zero,1176d8 <__ledf2+0x60>
  1176b4:	2296b03a 	or	r11,r4,r10
  1176b8:	5813003a 	cmpeq	r9,r11,zero
  1176bc:	29403fcc 	andi	r5,r5,255
  1176c0:	40000a1e 	bne	r8,zero,1176ec <__ledf2+0x74>
  1176c4:	30d8b03a 	or	r12,r6,r3
  1176c8:	6000081e 	bne	r12,zero,1176ec <__ledf2+0x74>
  1176cc:	0005883a 	mov	r2,zero
  1176d0:	5800111e 	bne	r11,zero,117718 <__ledf2+0xa0>
  1176d4:	f800283a 	ret
  1176d8:	29403fcc 	andi	r5,r5,255
  1176dc:	40000c1e 	bne	r8,zero,117710 <__ledf2+0x98>
  1176e0:	30d2b03a 	or	r9,r6,r3
  1176e4:	48000c26 	beq	r9,zero,117718 <__ledf2+0xa0>
  1176e8:	0013883a 	mov	r9,zero
  1176ec:	39c03fcc 	andi	r7,r7,255
  1176f0:	48000826 	beq	r9,zero,117714 <__ledf2+0x9c>
  1176f4:	38001126 	beq	r7,zero,11773c <__ledf2+0xc4>
  1176f8:	00800044 	movi	r2,1
  1176fc:	f800283a 	ret
  117700:	30d2b03a 	or	r9,r6,r3
  117704:	483fea26 	beq	r9,zero,1176b0 <__alt_data_end+0xfffd76b0>
  117708:	00800084 	movi	r2,2
  11770c:	f800283a 	ret
  117710:	39c03fcc 	andi	r7,r7,255
  117714:	39400726 	beq	r7,r5,117734 <__ledf2+0xbc>
  117718:	2800081e 	bne	r5,zero,11773c <__ledf2+0xc4>
  11771c:	00800044 	movi	r2,1
  117720:	f800283a 	ret
  117724:	2292b03a 	or	r9,r4,r10
  117728:	483fdf26 	beq	r9,zero,1176a8 <__alt_data_end+0xfffd76a8>
  11772c:	00800084 	movi	r2,2
  117730:	f800283a 	ret
  117734:	4080030e 	bge	r8,r2,117744 <__ledf2+0xcc>
  117738:	383fef26 	beq	r7,zero,1176f8 <__alt_data_end+0xfffd76f8>
  11773c:	00bfffc4 	movi	r2,-1
  117740:	f800283a 	ret
  117744:	123feb16 	blt	r2,r8,1176f4 <__alt_data_end+0xfffd76f4>
  117748:	1abff336 	bltu	r3,r10,117718 <__alt_data_end+0xfffd7718>
  11774c:	50c00326 	beq	r10,r3,11775c <__ledf2+0xe4>
  117750:	50c0042e 	bgeu	r10,r3,117764 <__ledf2+0xec>
  117754:	283fe81e 	bne	r5,zero,1176f8 <__alt_data_end+0xfffd76f8>
  117758:	003ff806 	br	11773c <__alt_data_end+0xfffd773c>
  11775c:	313fee36 	bltu	r6,r4,117718 <__alt_data_end+0xfffd7718>
  117760:	21bffc36 	bltu	r4,r6,117754 <__alt_data_end+0xfffd7754>
  117764:	0005883a 	mov	r2,zero
  117768:	f800283a 	ret

0011776c <__muldf3>:
  11776c:	deffee04 	addi	sp,sp,-72
  117770:	dd000c15 	stw	r20,48(sp)
  117774:	2828d53a 	srli	r20,r5,20
  117778:	ddc00f15 	stw	r23,60(sp)
  11777c:	282ed7fa 	srli	r23,r5,31
  117780:	dc000815 	stw	r16,32(sp)
  117784:	04000434 	movhi	r16,16
  117788:	dcc00b15 	stw	r19,44(sp)
  11778c:	843fffc4 	addi	r16,r16,-1
  117790:	dfc01115 	stw	ra,68(sp)
  117794:	df001015 	stw	fp,64(sp)
  117798:	dd800e15 	stw	r22,56(sp)
  11779c:	dd400d15 	stw	r21,52(sp)
  1177a0:	dc800a15 	stw	r18,40(sp)
  1177a4:	dc400915 	stw	r17,36(sp)
  1177a8:	a501ffcc 	andi	r20,r20,2047
  1177ac:	2c20703a 	and	r16,r5,r16
  1177b0:	b827883a 	mov	r19,r23
  1177b4:	ba403fcc 	andi	r9,r23,255
  1177b8:	a0006026 	beq	r20,zero,11793c <__muldf3+0x1d0>
  1177bc:	0081ffc4 	movi	r2,2047
  1177c0:	202d883a 	mov	r22,r4
  1177c4:	a0803626 	beq	r20,r2,1178a0 <__muldf3+0x134>
  1177c8:	84000434 	orhi	r16,r16,16
  1177cc:	200ad77a 	srli	r5,r4,29
  1177d0:	800490fa 	slli	r2,r16,3
  1177d4:	202c90fa 	slli	r22,r4,3
  1177d8:	a53f0044 	addi	r20,r20,-1023
  1177dc:	28a0b03a 	or	r16,r5,r2
  1177e0:	002b883a 	mov	r21,zero
  1177e4:	000b883a 	mov	r5,zero
  1177e8:	3804d53a 	srli	r2,r7,20
  1177ec:	3838d7fa 	srli	fp,r7,31
  1177f0:	04400434 	movhi	r17,16
  1177f4:	8c7fffc4 	addi	r17,r17,-1
  1177f8:	1081ffcc 	andi	r2,r2,2047
  1177fc:	3025883a 	mov	r18,r6
  117800:	3c62703a 	and	r17,r7,r17
  117804:	e2803fcc 	andi	r10,fp,255
  117808:	10006d26 	beq	r2,zero,1179c0 <__muldf3+0x254>
  11780c:	00c1ffc4 	movi	r3,2047
  117810:	10c06526 	beq	r2,r3,1179a8 <__muldf3+0x23c>
  117814:	8c400434 	orhi	r17,r17,16
  117818:	300ed77a 	srli	r7,r6,29
  11781c:	880690fa 	slli	r3,r17,3
  117820:	302490fa 	slli	r18,r6,3
  117824:	10bf0044 	addi	r2,r2,-1023
  117828:	38e2b03a 	or	r17,r7,r3
  11782c:	000f883a 	mov	r7,zero
  117830:	a087883a 	add	r3,r20,r2
  117834:	010003c4 	movi	r4,15
  117838:	3d44b03a 	or	r2,r7,r21
  11783c:	e5ccf03a 	xor	r6,fp,r23
  117840:	1a000044 	addi	r8,r3,1
  117844:	20809b36 	bltu	r4,r2,117ab4 <__muldf3+0x348>
  117848:	100490ba 	slli	r2,r2,2
  11784c:	01000474 	movhi	r4,17
  117850:	211e1804 	addi	r4,r4,30816
  117854:	1105883a 	add	r2,r2,r4
  117858:	10800017 	ldw	r2,0(r2)
  11785c:	1000683a 	jmp	r2
  117860:	00117ab4 	movhi	zero,17898
  117864:	001178c0 	call	1178c <OSCtxSw_SWITCH_PC+0x1174c>
  117868:	001178c0 	call	1178c <OSCtxSw_SWITCH_PC+0x1174c>
  11786c:	001178bc 	xorhi	zero,zero,17890
  117870:	00117a90 	cmplti	zero,zero,17898
  117874:	00117a90 	cmplti	zero,zero,17898
  117878:	00117a78 	rdprs	zero,zero,17897
  11787c:	001178bc 	xorhi	zero,zero,17890
  117880:	00117a90 	cmplti	zero,zero,17898
  117884:	00117a78 	rdprs	zero,zero,17897
  117888:	00117a90 	cmplti	zero,zero,17898
  11788c:	001178bc 	xorhi	zero,zero,17890
  117890:	00117aa0 	cmpeqi	zero,zero,17898
  117894:	00117aa0 	cmpeqi	zero,zero,17898
  117898:	00117aa0 	cmpeqi	zero,zero,17898
  11789c:	00117e00 	call	117e0 <OSCtxSw_SWITCH_PC+0x117a0>
  1178a0:	2404b03a 	or	r2,r4,r16
  1178a4:	1000711e 	bne	r2,zero,117a6c <__muldf3+0x300>
  1178a8:	05400204 	movi	r21,8
  1178ac:	0021883a 	mov	r16,zero
  1178b0:	002d883a 	mov	r22,zero
  1178b4:	01400084 	movi	r5,2
  1178b8:	003fcb06 	br	1177e8 <__alt_data_end+0xfffd77e8>
  1178bc:	500d883a 	mov	r6,r10
  1178c0:	00800084 	movi	r2,2
  1178c4:	38805926 	beq	r7,r2,117a2c <__muldf3+0x2c0>
  1178c8:	008000c4 	movi	r2,3
  1178cc:	3881bb26 	beq	r7,r2,117fbc <__muldf3+0x850>
  1178d0:	00800044 	movi	r2,1
  1178d4:	3881961e 	bne	r7,r2,117f30 <__muldf3+0x7c4>
  1178d8:	3027883a 	mov	r19,r6
  1178dc:	0005883a 	mov	r2,zero
  1178e0:	0021883a 	mov	r16,zero
  1178e4:	002d883a 	mov	r22,zero
  1178e8:	1004953a 	slli	r2,r2,20
  1178ec:	98c03fcc 	andi	r3,r19,255
  1178f0:	04400434 	movhi	r17,16
  1178f4:	8c7fffc4 	addi	r17,r17,-1
  1178f8:	180697fa 	slli	r3,r3,31
  1178fc:	8460703a 	and	r16,r16,r17
  117900:	80a0b03a 	or	r16,r16,r2
  117904:	80c6b03a 	or	r3,r16,r3
  117908:	b005883a 	mov	r2,r22
  11790c:	dfc01117 	ldw	ra,68(sp)
  117910:	df001017 	ldw	fp,64(sp)
  117914:	ddc00f17 	ldw	r23,60(sp)
  117918:	dd800e17 	ldw	r22,56(sp)
  11791c:	dd400d17 	ldw	r21,52(sp)
  117920:	dd000c17 	ldw	r20,48(sp)
  117924:	dcc00b17 	ldw	r19,44(sp)
  117928:	dc800a17 	ldw	r18,40(sp)
  11792c:	dc400917 	ldw	r17,36(sp)
  117930:	dc000817 	ldw	r16,32(sp)
  117934:	dec01204 	addi	sp,sp,72
  117938:	f800283a 	ret
  11793c:	2404b03a 	or	r2,r4,r16
  117940:	202b883a 	mov	r21,r4
  117944:	10004426 	beq	r2,zero,117a58 <__muldf3+0x2ec>
  117948:	80015126 	beq	r16,zero,117e90 <__muldf3+0x724>
  11794c:	8009883a 	mov	r4,r16
  117950:	d9800715 	stw	r6,28(sp)
  117954:	d9c00215 	stw	r7,8(sp)
  117958:	da400415 	stw	r9,16(sp)
  11795c:	0118c800 	call	118c80 <__clzsi2>
  117960:	d9800717 	ldw	r6,28(sp)
  117964:	d9c00217 	ldw	r7,8(sp)
  117968:	da400417 	ldw	r9,16(sp)
  11796c:	113ffd44 	addi	r4,r2,-11
  117970:	00c00704 	movi	r3,28
  117974:	19014216 	blt	r3,r4,117e80 <__muldf3+0x714>
  117978:	00c00744 	movi	r3,29
  11797c:	15bffe04 	addi	r22,r2,-8
  117980:	1907c83a 	sub	r3,r3,r4
  117984:	85a0983a 	sll	r16,r16,r22
  117988:	a8c6d83a 	srl	r3,r21,r3
  11798c:	adac983a 	sll	r22,r21,r22
  117990:	1c20b03a 	or	r16,r3,r16
  117994:	1080fcc4 	addi	r2,r2,1011
  117998:	00a9c83a 	sub	r20,zero,r2
  11799c:	002b883a 	mov	r21,zero
  1179a0:	000b883a 	mov	r5,zero
  1179a4:	003f9006 	br	1177e8 <__alt_data_end+0xfffd77e8>
  1179a8:	3446b03a 	or	r3,r6,r17
  1179ac:	1800281e 	bne	r3,zero,117a50 <__muldf3+0x2e4>
  1179b0:	0023883a 	mov	r17,zero
  1179b4:	0025883a 	mov	r18,zero
  1179b8:	01c00084 	movi	r7,2
  1179bc:	003f9c06 	br	117830 <__alt_data_end+0xfffd7830>
  1179c0:	3446b03a 	or	r3,r6,r17
  1179c4:	18001e26 	beq	r3,zero,117a40 <__muldf3+0x2d4>
  1179c8:	88012126 	beq	r17,zero,117e50 <__muldf3+0x6e4>
  1179cc:	8809883a 	mov	r4,r17
  1179d0:	d9400215 	stw	r5,8(sp)
  1179d4:	d9800715 	stw	r6,28(sp)
  1179d8:	da400415 	stw	r9,16(sp)
  1179dc:	da800315 	stw	r10,12(sp)
  1179e0:	0118c800 	call	118c80 <__clzsi2>
  1179e4:	d9400217 	ldw	r5,8(sp)
  1179e8:	d9800717 	ldw	r6,28(sp)
  1179ec:	da400417 	ldw	r9,16(sp)
  1179f0:	da800317 	ldw	r10,12(sp)
  1179f4:	113ffd44 	addi	r4,r2,-11
  1179f8:	00c00704 	movi	r3,28
  1179fc:	19011016 	blt	r3,r4,117e40 <__muldf3+0x6d4>
  117a00:	00c00744 	movi	r3,29
  117a04:	14bffe04 	addi	r18,r2,-8
  117a08:	1907c83a 	sub	r3,r3,r4
  117a0c:	8ca2983a 	sll	r17,r17,r18
  117a10:	30c6d83a 	srl	r3,r6,r3
  117a14:	34a4983a 	sll	r18,r6,r18
  117a18:	1c62b03a 	or	r17,r3,r17
  117a1c:	1080fcc4 	addi	r2,r2,1011
  117a20:	0085c83a 	sub	r2,zero,r2
  117a24:	000f883a 	mov	r7,zero
  117a28:	003f8106 	br	117830 <__alt_data_end+0xfffd7830>
  117a2c:	3027883a 	mov	r19,r6
  117a30:	0081ffc4 	movi	r2,2047
  117a34:	0021883a 	mov	r16,zero
  117a38:	002d883a 	mov	r22,zero
  117a3c:	003faa06 	br	1178e8 <__alt_data_end+0xfffd78e8>
  117a40:	0023883a 	mov	r17,zero
  117a44:	0025883a 	mov	r18,zero
  117a48:	01c00044 	movi	r7,1
  117a4c:	003f7806 	br	117830 <__alt_data_end+0xfffd7830>
  117a50:	01c000c4 	movi	r7,3
  117a54:	003f7606 	br	117830 <__alt_data_end+0xfffd7830>
  117a58:	05400104 	movi	r21,4
  117a5c:	0021883a 	mov	r16,zero
  117a60:	002d883a 	mov	r22,zero
  117a64:	01400044 	movi	r5,1
  117a68:	003f5f06 	br	1177e8 <__alt_data_end+0xfffd77e8>
  117a6c:	05400304 	movi	r21,12
  117a70:	014000c4 	movi	r5,3
  117a74:	003f5c06 	br	1177e8 <__alt_data_end+0xfffd77e8>
  117a78:	04000434 	movhi	r16,16
  117a7c:	0027883a 	mov	r19,zero
  117a80:	843fffc4 	addi	r16,r16,-1
  117a84:	05bfffc4 	movi	r22,-1
  117a88:	0081ffc4 	movi	r2,2047
  117a8c:	003f9606 	br	1178e8 <__alt_data_end+0xfffd78e8>
  117a90:	8023883a 	mov	r17,r16
  117a94:	b025883a 	mov	r18,r22
  117a98:	280f883a 	mov	r7,r5
  117a9c:	003f8806 	br	1178c0 <__alt_data_end+0xfffd78c0>
  117aa0:	8023883a 	mov	r17,r16
  117aa4:	b025883a 	mov	r18,r22
  117aa8:	480d883a 	mov	r6,r9
  117aac:	280f883a 	mov	r7,r5
  117ab0:	003f8306 	br	1178c0 <__alt_data_end+0xfffd78c0>
  117ab4:	b026d43a 	srli	r19,r22,16
  117ab8:	902ed43a 	srli	r23,r18,16
  117abc:	b5bfffcc 	andi	r22,r22,65535
  117ac0:	94bfffcc 	andi	r18,r18,65535
  117ac4:	b00b883a 	mov	r5,r22
  117ac8:	9009883a 	mov	r4,r18
  117acc:	d8c00515 	stw	r3,20(sp)
  117ad0:	d9800715 	stw	r6,28(sp)
  117ad4:	da000615 	stw	r8,24(sp)
  117ad8:	01160740 	call	116074 <__mulsi3>
  117adc:	980b883a 	mov	r5,r19
  117ae0:	9009883a 	mov	r4,r18
  117ae4:	1029883a 	mov	r20,r2
  117ae8:	01160740 	call	116074 <__mulsi3>
  117aec:	b80b883a 	mov	r5,r23
  117af0:	9809883a 	mov	r4,r19
  117af4:	102b883a 	mov	r21,r2
  117af8:	01160740 	call	116074 <__mulsi3>
  117afc:	b809883a 	mov	r4,r23
  117b00:	b00b883a 	mov	r5,r22
  117b04:	1039883a 	mov	fp,r2
  117b08:	01160740 	call	116074 <__mulsi3>
  117b0c:	a008d43a 	srli	r4,r20,16
  117b10:	1545883a 	add	r2,r2,r21
  117b14:	d8c00517 	ldw	r3,20(sp)
  117b18:	2085883a 	add	r2,r4,r2
  117b1c:	d9800717 	ldw	r6,28(sp)
  117b20:	da000617 	ldw	r8,24(sp)
  117b24:	1540022e 	bgeu	r2,r21,117b30 <__muldf3+0x3c4>
  117b28:	01000074 	movhi	r4,1
  117b2c:	e139883a 	add	fp,fp,r4
  117b30:	100e943a 	slli	r7,r2,16
  117b34:	1004d43a 	srli	r2,r2,16
  117b38:	882ad43a 	srli	r21,r17,16
  117b3c:	a53fffcc 	andi	r20,r20,65535
  117b40:	8c7fffcc 	andi	r17,r17,65535
  117b44:	3d29883a 	add	r20,r7,r20
  117b48:	b00b883a 	mov	r5,r22
  117b4c:	8809883a 	mov	r4,r17
  117b50:	d8c00515 	stw	r3,20(sp)
  117b54:	d9800715 	stw	r6,28(sp)
  117b58:	da000615 	stw	r8,24(sp)
  117b5c:	dd000115 	stw	r20,4(sp)
  117b60:	d8800015 	stw	r2,0(sp)
  117b64:	01160740 	call	116074 <__mulsi3>
  117b68:	980b883a 	mov	r5,r19
  117b6c:	8809883a 	mov	r4,r17
  117b70:	d8800215 	stw	r2,8(sp)
  117b74:	01160740 	call	116074 <__mulsi3>
  117b78:	9809883a 	mov	r4,r19
  117b7c:	a80b883a 	mov	r5,r21
  117b80:	1029883a 	mov	r20,r2
  117b84:	01160740 	call	116074 <__mulsi3>
  117b88:	b00b883a 	mov	r5,r22
  117b8c:	a809883a 	mov	r4,r21
  117b90:	d8800415 	stw	r2,16(sp)
  117b94:	01160740 	call	116074 <__mulsi3>
  117b98:	d9c00217 	ldw	r7,8(sp)
  117b9c:	1505883a 	add	r2,r2,r20
  117ba0:	d8c00517 	ldw	r3,20(sp)
  117ba4:	3826d43a 	srli	r19,r7,16
  117ba8:	d9800717 	ldw	r6,28(sp)
  117bac:	da000617 	ldw	r8,24(sp)
  117bb0:	9885883a 	add	r2,r19,r2
  117bb4:	da400417 	ldw	r9,16(sp)
  117bb8:	1500022e 	bgeu	r2,r20,117bc4 <__muldf3+0x458>
  117bbc:	01000074 	movhi	r4,1
  117bc0:	4913883a 	add	r9,r9,r4
  117bc4:	1028d43a 	srli	r20,r2,16
  117bc8:	1004943a 	slli	r2,r2,16
  117bcc:	802cd43a 	srli	r22,r16,16
  117bd0:	843fffcc 	andi	r16,r16,65535
  117bd4:	3cffffcc 	andi	r19,r7,65535
  117bd8:	9009883a 	mov	r4,r18
  117bdc:	800b883a 	mov	r5,r16
  117be0:	a269883a 	add	r20,r20,r9
  117be4:	d8c00515 	stw	r3,20(sp)
  117be8:	d9800715 	stw	r6,28(sp)
  117bec:	da000615 	stw	r8,24(sp)
  117bf0:	14e7883a 	add	r19,r2,r19
  117bf4:	01160740 	call	116074 <__mulsi3>
  117bf8:	9009883a 	mov	r4,r18
  117bfc:	b00b883a 	mov	r5,r22
  117c00:	d8800315 	stw	r2,12(sp)
  117c04:	01160740 	call	116074 <__mulsi3>
  117c08:	b809883a 	mov	r4,r23
  117c0c:	b00b883a 	mov	r5,r22
  117c10:	d8800215 	stw	r2,8(sp)
  117c14:	01160740 	call	116074 <__mulsi3>
  117c18:	b80b883a 	mov	r5,r23
  117c1c:	8009883a 	mov	r4,r16
  117c20:	d8800415 	stw	r2,16(sp)
  117c24:	01160740 	call	116074 <__mulsi3>
  117c28:	da800317 	ldw	r10,12(sp)
  117c2c:	d9c00217 	ldw	r7,8(sp)
  117c30:	d9000017 	ldw	r4,0(sp)
  117c34:	502ed43a 	srli	r23,r10,16
  117c38:	11c5883a 	add	r2,r2,r7
  117c3c:	24e5883a 	add	r18,r4,r19
  117c40:	b885883a 	add	r2,r23,r2
  117c44:	d8c00517 	ldw	r3,20(sp)
  117c48:	d9800717 	ldw	r6,28(sp)
  117c4c:	da000617 	ldw	r8,24(sp)
  117c50:	da400417 	ldw	r9,16(sp)
  117c54:	11c0022e 	bgeu	r2,r7,117c60 <__muldf3+0x4f4>
  117c58:	01000074 	movhi	r4,1
  117c5c:	4913883a 	add	r9,r9,r4
  117c60:	100ed43a 	srli	r7,r2,16
  117c64:	1004943a 	slli	r2,r2,16
  117c68:	55ffffcc 	andi	r23,r10,65535
  117c6c:	3a53883a 	add	r9,r7,r9
  117c70:	8809883a 	mov	r4,r17
  117c74:	800b883a 	mov	r5,r16
  117c78:	d8c00515 	stw	r3,20(sp)
  117c7c:	d9800715 	stw	r6,28(sp)
  117c80:	da000615 	stw	r8,24(sp)
  117c84:	da400415 	stw	r9,16(sp)
  117c88:	15ef883a 	add	r23,r2,r23
  117c8c:	01160740 	call	116074 <__mulsi3>
  117c90:	8809883a 	mov	r4,r17
  117c94:	b00b883a 	mov	r5,r22
  117c98:	d8800215 	stw	r2,8(sp)
  117c9c:	01160740 	call	116074 <__mulsi3>
  117ca0:	b00b883a 	mov	r5,r22
  117ca4:	a809883a 	mov	r4,r21
  117ca8:	d8800315 	stw	r2,12(sp)
  117cac:	01160740 	call	116074 <__mulsi3>
  117cb0:	8009883a 	mov	r4,r16
  117cb4:	a80b883a 	mov	r5,r21
  117cb8:	1023883a 	mov	r17,r2
  117cbc:	01160740 	call	116074 <__mulsi3>
  117cc0:	d9c00217 	ldw	r7,8(sp)
  117cc4:	da800317 	ldw	r10,12(sp)
  117cc8:	d8c00517 	ldw	r3,20(sp)
  117ccc:	3808d43a 	srli	r4,r7,16
  117cd0:	1285883a 	add	r2,r2,r10
  117cd4:	d9800717 	ldw	r6,28(sp)
  117cd8:	2085883a 	add	r2,r4,r2
  117cdc:	da000617 	ldw	r8,24(sp)
  117ce0:	da400417 	ldw	r9,16(sp)
  117ce4:	1280022e 	bgeu	r2,r10,117cf0 <__muldf3+0x584>
  117ce8:	01000074 	movhi	r4,1
  117cec:	8923883a 	add	r17,r17,r4
  117cf0:	1008943a 	slli	r4,r2,16
  117cf4:	39ffffcc 	andi	r7,r7,65535
  117cf8:	e4b9883a 	add	fp,fp,r18
  117cfc:	21cf883a 	add	r7,r4,r7
  117d00:	e4e7803a 	cmpltu	r19,fp,r19
  117d04:	3d0f883a 	add	r7,r7,r20
  117d08:	bf39883a 	add	fp,r23,fp
  117d0c:	99c9883a 	add	r4,r19,r7
  117d10:	e5ef803a 	cmpltu	r23,fp,r23
  117d14:	490b883a 	add	r5,r9,r4
  117d18:	1004d43a 	srli	r2,r2,16
  117d1c:	b965883a 	add	r18,r23,r5
  117d20:	24c9803a 	cmpltu	r4,r4,r19
  117d24:	3d29803a 	cmpltu	r20,r7,r20
  117d28:	a128b03a 	or	r20,r20,r4
  117d2c:	95ef803a 	cmpltu	r23,r18,r23
  117d30:	2a53803a 	cmpltu	r9,r5,r9
  117d34:	a0a9883a 	add	r20,r20,r2
  117d38:	4deeb03a 	or	r23,r9,r23
  117d3c:	a5ef883a 	add	r23,r20,r23
  117d40:	bc63883a 	add	r17,r23,r17
  117d44:	e004927a 	slli	r2,fp,9
  117d48:	d9000117 	ldw	r4,4(sp)
  117d4c:	882e927a 	slli	r23,r17,9
  117d50:	9022d5fa 	srli	r17,r18,23
  117d54:	e038d5fa 	srli	fp,fp,23
  117d58:	1104b03a 	or	r2,r2,r4
  117d5c:	9024927a 	slli	r18,r18,9
  117d60:	1004c03a 	cmpne	r2,r2,zero
  117d64:	bc62b03a 	or	r17,r23,r17
  117d68:	1738b03a 	or	fp,r2,fp
  117d6c:	8880402c 	andhi	r2,r17,256
  117d70:	e4a4b03a 	or	r18,fp,r18
  117d74:	10000726 	beq	r2,zero,117d94 <__muldf3+0x628>
  117d78:	9006d07a 	srli	r3,r18,1
  117d7c:	880497fa 	slli	r2,r17,31
  117d80:	9480004c 	andi	r18,r18,1
  117d84:	8822d07a 	srli	r17,r17,1
  117d88:	1ca4b03a 	or	r18,r3,r18
  117d8c:	14a4b03a 	or	r18,r2,r18
  117d90:	4007883a 	mov	r3,r8
  117d94:	1880ffc4 	addi	r2,r3,1023
  117d98:	0080460e 	bge	zero,r2,117eb4 <__muldf3+0x748>
  117d9c:	910001cc 	andi	r4,r18,7
  117da0:	20000726 	beq	r4,zero,117dc0 <__muldf3+0x654>
  117da4:	910003cc 	andi	r4,r18,15
  117da8:	01400104 	movi	r5,4
  117dac:	21400426 	beq	r4,r5,117dc0 <__muldf3+0x654>
  117db0:	9149883a 	add	r4,r18,r5
  117db4:	24a5803a 	cmpltu	r18,r4,r18
  117db8:	8ca3883a 	add	r17,r17,r18
  117dbc:	2025883a 	mov	r18,r4
  117dc0:	8900402c 	andhi	r4,r17,256
  117dc4:	20000426 	beq	r4,zero,117dd8 <__muldf3+0x66c>
  117dc8:	18810004 	addi	r2,r3,1024
  117dcc:	00ffc034 	movhi	r3,65280
  117dd0:	18ffffc4 	addi	r3,r3,-1
  117dd4:	88e2703a 	and	r17,r17,r3
  117dd8:	00c1ff84 	movi	r3,2046
  117ddc:	18bf1316 	blt	r3,r2,117a2c <__alt_data_end+0xfffd7a2c>
  117de0:	882c977a 	slli	r22,r17,29
  117de4:	9024d0fa 	srli	r18,r18,3
  117de8:	8822927a 	slli	r17,r17,9
  117dec:	1081ffcc 	andi	r2,r2,2047
  117df0:	b4acb03a 	or	r22,r22,r18
  117df4:	8820d33a 	srli	r16,r17,12
  117df8:	3027883a 	mov	r19,r6
  117dfc:	003eba06 	br	1178e8 <__alt_data_end+0xfffd78e8>
  117e00:	8080022c 	andhi	r2,r16,8
  117e04:	10000926 	beq	r2,zero,117e2c <__muldf3+0x6c0>
  117e08:	8880022c 	andhi	r2,r17,8
  117e0c:	1000071e 	bne	r2,zero,117e2c <__muldf3+0x6c0>
  117e10:	00800434 	movhi	r2,16
  117e14:	8c000234 	orhi	r16,r17,8
  117e18:	10bfffc4 	addi	r2,r2,-1
  117e1c:	e027883a 	mov	r19,fp
  117e20:	80a0703a 	and	r16,r16,r2
  117e24:	902d883a 	mov	r22,r18
  117e28:	003f1706 	br	117a88 <__alt_data_end+0xfffd7a88>
  117e2c:	00800434 	movhi	r2,16
  117e30:	84000234 	orhi	r16,r16,8
  117e34:	10bfffc4 	addi	r2,r2,-1
  117e38:	80a0703a 	and	r16,r16,r2
  117e3c:	003f1206 	br	117a88 <__alt_data_end+0xfffd7a88>
  117e40:	147ff604 	addi	r17,r2,-40
  117e44:	3462983a 	sll	r17,r6,r17
  117e48:	0025883a 	mov	r18,zero
  117e4c:	003ef306 	br	117a1c <__alt_data_end+0xfffd7a1c>
  117e50:	3009883a 	mov	r4,r6
  117e54:	d9400215 	stw	r5,8(sp)
  117e58:	d9800715 	stw	r6,28(sp)
  117e5c:	da400415 	stw	r9,16(sp)
  117e60:	da800315 	stw	r10,12(sp)
  117e64:	0118c800 	call	118c80 <__clzsi2>
  117e68:	10800804 	addi	r2,r2,32
  117e6c:	da800317 	ldw	r10,12(sp)
  117e70:	da400417 	ldw	r9,16(sp)
  117e74:	d9800717 	ldw	r6,28(sp)
  117e78:	d9400217 	ldw	r5,8(sp)
  117e7c:	003edd06 	br	1179f4 <__alt_data_end+0xfffd79f4>
  117e80:	143ff604 	addi	r16,r2,-40
  117e84:	ac20983a 	sll	r16,r21,r16
  117e88:	002d883a 	mov	r22,zero
  117e8c:	003ec106 	br	117994 <__alt_data_end+0xfffd7994>
  117e90:	d9800715 	stw	r6,28(sp)
  117e94:	d9c00215 	stw	r7,8(sp)
  117e98:	da400415 	stw	r9,16(sp)
  117e9c:	0118c800 	call	118c80 <__clzsi2>
  117ea0:	10800804 	addi	r2,r2,32
  117ea4:	da400417 	ldw	r9,16(sp)
  117ea8:	d9c00217 	ldw	r7,8(sp)
  117eac:	d9800717 	ldw	r6,28(sp)
  117eb0:	003eae06 	br	11796c <__alt_data_end+0xfffd796c>
  117eb4:	00c00044 	movi	r3,1
  117eb8:	1887c83a 	sub	r3,r3,r2
  117ebc:	01000e04 	movi	r4,56
  117ec0:	20fe8516 	blt	r4,r3,1178d8 <__alt_data_end+0xfffd78d8>
  117ec4:	010007c4 	movi	r4,31
  117ec8:	20c01b16 	blt	r4,r3,117f38 <__muldf3+0x7cc>
  117ecc:	00800804 	movi	r2,32
  117ed0:	10c5c83a 	sub	r2,r2,r3
  117ed4:	888a983a 	sll	r5,r17,r2
  117ed8:	90c8d83a 	srl	r4,r18,r3
  117edc:	9084983a 	sll	r2,r18,r2
  117ee0:	88e2d83a 	srl	r17,r17,r3
  117ee4:	2906b03a 	or	r3,r5,r4
  117ee8:	1004c03a 	cmpne	r2,r2,zero
  117eec:	1886b03a 	or	r3,r3,r2
  117ef0:	188001cc 	andi	r2,r3,7
  117ef4:	10000726 	beq	r2,zero,117f14 <__muldf3+0x7a8>
  117ef8:	188003cc 	andi	r2,r3,15
  117efc:	01000104 	movi	r4,4
  117f00:	11000426 	beq	r2,r4,117f14 <__muldf3+0x7a8>
  117f04:	1805883a 	mov	r2,r3
  117f08:	10c00104 	addi	r3,r2,4
  117f0c:	1885803a 	cmpltu	r2,r3,r2
  117f10:	88a3883a 	add	r17,r17,r2
  117f14:	8880202c 	andhi	r2,r17,128
  117f18:	10001c26 	beq	r2,zero,117f8c <__muldf3+0x820>
  117f1c:	3027883a 	mov	r19,r6
  117f20:	00800044 	movi	r2,1
  117f24:	0021883a 	mov	r16,zero
  117f28:	002d883a 	mov	r22,zero
  117f2c:	003e6e06 	br	1178e8 <__alt_data_end+0xfffd78e8>
  117f30:	4007883a 	mov	r3,r8
  117f34:	003f9706 	br	117d94 <__alt_data_end+0xfffd7d94>
  117f38:	017ff844 	movi	r5,-31
  117f3c:	2885c83a 	sub	r2,r5,r2
  117f40:	888ad83a 	srl	r5,r17,r2
  117f44:	00800804 	movi	r2,32
  117f48:	18801a26 	beq	r3,r2,117fb4 <__muldf3+0x848>
  117f4c:	01001004 	movi	r4,64
  117f50:	20c7c83a 	sub	r3,r4,r3
  117f54:	88e2983a 	sll	r17,r17,r3
  117f58:	8ca4b03a 	or	r18,r17,r18
  117f5c:	9004c03a 	cmpne	r2,r18,zero
  117f60:	2884b03a 	or	r2,r5,r2
  117f64:	144001cc 	andi	r17,r2,7
  117f68:	88000d1e 	bne	r17,zero,117fa0 <__muldf3+0x834>
  117f6c:	0021883a 	mov	r16,zero
  117f70:	102cd0fa 	srli	r22,r2,3
  117f74:	3027883a 	mov	r19,r6
  117f78:	0005883a 	mov	r2,zero
  117f7c:	b46cb03a 	or	r22,r22,r17
  117f80:	003e5906 	br	1178e8 <__alt_data_end+0xfffd78e8>
  117f84:	1007883a 	mov	r3,r2
  117f88:	0023883a 	mov	r17,zero
  117f8c:	8820927a 	slli	r16,r17,9
  117f90:	1805883a 	mov	r2,r3
  117f94:	8822977a 	slli	r17,r17,29
  117f98:	8020d33a 	srli	r16,r16,12
  117f9c:	003ff406 	br	117f70 <__alt_data_end+0xfffd7f70>
  117fa0:	10c003cc 	andi	r3,r2,15
  117fa4:	01000104 	movi	r4,4
  117fa8:	193ff626 	beq	r3,r4,117f84 <__alt_data_end+0xfffd7f84>
  117fac:	0023883a 	mov	r17,zero
  117fb0:	003fd506 	br	117f08 <__alt_data_end+0xfffd7f08>
  117fb4:	0023883a 	mov	r17,zero
  117fb8:	003fe706 	br	117f58 <__alt_data_end+0xfffd7f58>
  117fbc:	00800434 	movhi	r2,16
  117fc0:	8c000234 	orhi	r16,r17,8
  117fc4:	10bfffc4 	addi	r2,r2,-1
  117fc8:	3027883a 	mov	r19,r6
  117fcc:	80a0703a 	and	r16,r16,r2
  117fd0:	902d883a 	mov	r22,r18
  117fd4:	003eac06 	br	117a88 <__alt_data_end+0xfffd7a88>

00117fd8 <__subdf3>:
  117fd8:	02000434 	movhi	r8,16
  117fdc:	423fffc4 	addi	r8,r8,-1
  117fe0:	defffb04 	addi	sp,sp,-20
  117fe4:	2a14703a 	and	r10,r5,r8
  117fe8:	3812d53a 	srli	r9,r7,20
  117fec:	3a10703a 	and	r8,r7,r8
  117ff0:	2006d77a 	srli	r3,r4,29
  117ff4:	3004d77a 	srli	r2,r6,29
  117ff8:	dc000015 	stw	r16,0(sp)
  117ffc:	501490fa 	slli	r10,r10,3
  118000:	2820d53a 	srli	r16,r5,20
  118004:	401090fa 	slli	r8,r8,3
  118008:	dc800215 	stw	r18,8(sp)
  11800c:	dc400115 	stw	r17,4(sp)
  118010:	dfc00415 	stw	ra,16(sp)
  118014:	202290fa 	slli	r17,r4,3
  118018:	dcc00315 	stw	r19,12(sp)
  11801c:	4a41ffcc 	andi	r9,r9,2047
  118020:	0101ffc4 	movi	r4,2047
  118024:	2824d7fa 	srli	r18,r5,31
  118028:	8401ffcc 	andi	r16,r16,2047
  11802c:	50c6b03a 	or	r3,r10,r3
  118030:	380ed7fa 	srli	r7,r7,31
  118034:	408ab03a 	or	r5,r8,r2
  118038:	300c90fa 	slli	r6,r6,3
  11803c:	49009626 	beq	r9,r4,118298 <__subdf3+0x2c0>
  118040:	39c0005c 	xori	r7,r7,1
  118044:	8245c83a 	sub	r2,r16,r9
  118048:	3c807426 	beq	r7,r18,11821c <__subdf3+0x244>
  11804c:	0080af0e 	bge	zero,r2,11830c <__subdf3+0x334>
  118050:	48002a1e 	bne	r9,zero,1180fc <__subdf3+0x124>
  118054:	2988b03a 	or	r4,r5,r6
  118058:	20009a1e 	bne	r4,zero,1182c4 <__subdf3+0x2ec>
  11805c:	888001cc 	andi	r2,r17,7
  118060:	10000726 	beq	r2,zero,118080 <__subdf3+0xa8>
  118064:	888003cc 	andi	r2,r17,15
  118068:	01000104 	movi	r4,4
  11806c:	11000426 	beq	r2,r4,118080 <__subdf3+0xa8>
  118070:	890b883a 	add	r5,r17,r4
  118074:	2c63803a 	cmpltu	r17,r5,r17
  118078:	1c47883a 	add	r3,r3,r17
  11807c:	2823883a 	mov	r17,r5
  118080:	1880202c 	andhi	r2,r3,128
  118084:	10005926 	beq	r2,zero,1181ec <__subdf3+0x214>
  118088:	84000044 	addi	r16,r16,1
  11808c:	0081ffc4 	movi	r2,2047
  118090:	8080be26 	beq	r16,r2,11838c <__subdf3+0x3b4>
  118094:	017fe034 	movhi	r5,65408
  118098:	297fffc4 	addi	r5,r5,-1
  11809c:	1946703a 	and	r3,r3,r5
  1180a0:	1804977a 	slli	r2,r3,29
  1180a4:	1806927a 	slli	r3,r3,9
  1180a8:	8822d0fa 	srli	r17,r17,3
  1180ac:	8401ffcc 	andi	r16,r16,2047
  1180b0:	180ad33a 	srli	r5,r3,12
  1180b4:	9100004c 	andi	r4,r18,1
  1180b8:	1444b03a 	or	r2,r2,r17
  1180bc:	80c1ffcc 	andi	r3,r16,2047
  1180c0:	1820953a 	slli	r16,r3,20
  1180c4:	20c03fcc 	andi	r3,r4,255
  1180c8:	180897fa 	slli	r4,r3,31
  1180cc:	00c00434 	movhi	r3,16
  1180d0:	18ffffc4 	addi	r3,r3,-1
  1180d4:	28c6703a 	and	r3,r5,r3
  1180d8:	1c06b03a 	or	r3,r3,r16
  1180dc:	1906b03a 	or	r3,r3,r4
  1180e0:	dfc00417 	ldw	ra,16(sp)
  1180e4:	dcc00317 	ldw	r19,12(sp)
  1180e8:	dc800217 	ldw	r18,8(sp)
  1180ec:	dc400117 	ldw	r17,4(sp)
  1180f0:	dc000017 	ldw	r16,0(sp)
  1180f4:	dec00504 	addi	sp,sp,20
  1180f8:	f800283a 	ret
  1180fc:	0101ffc4 	movi	r4,2047
  118100:	813fd626 	beq	r16,r4,11805c <__alt_data_end+0xfffd805c>
  118104:	29402034 	orhi	r5,r5,128
  118108:	01000e04 	movi	r4,56
  11810c:	2080a316 	blt	r4,r2,11839c <__subdf3+0x3c4>
  118110:	010007c4 	movi	r4,31
  118114:	2080c616 	blt	r4,r2,118430 <__subdf3+0x458>
  118118:	01000804 	movi	r4,32
  11811c:	2089c83a 	sub	r4,r4,r2
  118120:	2910983a 	sll	r8,r5,r4
  118124:	308ed83a 	srl	r7,r6,r2
  118128:	3108983a 	sll	r4,r6,r4
  11812c:	2884d83a 	srl	r2,r5,r2
  118130:	41ccb03a 	or	r6,r8,r7
  118134:	2008c03a 	cmpne	r4,r4,zero
  118138:	310cb03a 	or	r6,r6,r4
  11813c:	898dc83a 	sub	r6,r17,r6
  118140:	89a3803a 	cmpltu	r17,r17,r6
  118144:	1887c83a 	sub	r3,r3,r2
  118148:	1c47c83a 	sub	r3,r3,r17
  11814c:	3023883a 	mov	r17,r6
  118150:	1880202c 	andhi	r2,r3,128
  118154:	10002326 	beq	r2,zero,1181e4 <__subdf3+0x20c>
  118158:	04c02034 	movhi	r19,128
  11815c:	9cffffc4 	addi	r19,r19,-1
  118160:	1ce6703a 	and	r19,r3,r19
  118164:	98007a26 	beq	r19,zero,118350 <__subdf3+0x378>
  118168:	9809883a 	mov	r4,r19
  11816c:	0118c800 	call	118c80 <__clzsi2>
  118170:	113ffe04 	addi	r4,r2,-8
  118174:	00c007c4 	movi	r3,31
  118178:	19007b16 	blt	r3,r4,118368 <__subdf3+0x390>
  11817c:	00800804 	movi	r2,32
  118180:	1105c83a 	sub	r2,r2,r4
  118184:	8884d83a 	srl	r2,r17,r2
  118188:	9906983a 	sll	r3,r19,r4
  11818c:	8922983a 	sll	r17,r17,r4
  118190:	10c4b03a 	or	r2,r2,r3
  118194:	24007816 	blt	r4,r16,118378 <__subdf3+0x3a0>
  118198:	2421c83a 	sub	r16,r4,r16
  11819c:	80c00044 	addi	r3,r16,1
  1181a0:	010007c4 	movi	r4,31
  1181a4:	20c09516 	blt	r4,r3,1183fc <__subdf3+0x424>
  1181a8:	01400804 	movi	r5,32
  1181ac:	28cbc83a 	sub	r5,r5,r3
  1181b0:	88c8d83a 	srl	r4,r17,r3
  1181b4:	8962983a 	sll	r17,r17,r5
  1181b8:	114a983a 	sll	r5,r2,r5
  1181bc:	10c6d83a 	srl	r3,r2,r3
  1181c0:	8804c03a 	cmpne	r2,r17,zero
  1181c4:	290ab03a 	or	r5,r5,r4
  1181c8:	28a2b03a 	or	r17,r5,r2
  1181cc:	0021883a 	mov	r16,zero
  1181d0:	003fa206 	br	11805c <__alt_data_end+0xfffd805c>
  1181d4:	2090b03a 	or	r8,r4,r2
  1181d8:	40018e26 	beq	r8,zero,118814 <__subdf3+0x83c>
  1181dc:	1007883a 	mov	r3,r2
  1181e0:	2023883a 	mov	r17,r4
  1181e4:	888001cc 	andi	r2,r17,7
  1181e8:	103f9e1e 	bne	r2,zero,118064 <__alt_data_end+0xfffd8064>
  1181ec:	1804977a 	slli	r2,r3,29
  1181f0:	8822d0fa 	srli	r17,r17,3
  1181f4:	1810d0fa 	srli	r8,r3,3
  1181f8:	9100004c 	andi	r4,r18,1
  1181fc:	1444b03a 	or	r2,r2,r17
  118200:	00c1ffc4 	movi	r3,2047
  118204:	80c02826 	beq	r16,r3,1182a8 <__subdf3+0x2d0>
  118208:	01400434 	movhi	r5,16
  11820c:	297fffc4 	addi	r5,r5,-1
  118210:	80e0703a 	and	r16,r16,r3
  118214:	414a703a 	and	r5,r8,r5
  118218:	003fa806 	br	1180bc <__alt_data_end+0xfffd80bc>
  11821c:	0080630e 	bge	zero,r2,1183ac <__subdf3+0x3d4>
  118220:	48003026 	beq	r9,zero,1182e4 <__subdf3+0x30c>
  118224:	0101ffc4 	movi	r4,2047
  118228:	813f8c26 	beq	r16,r4,11805c <__alt_data_end+0xfffd805c>
  11822c:	29402034 	orhi	r5,r5,128
  118230:	01000e04 	movi	r4,56
  118234:	2080a90e 	bge	r4,r2,1184dc <__subdf3+0x504>
  118238:	298cb03a 	or	r6,r5,r6
  11823c:	3012c03a 	cmpne	r9,r6,zero
  118240:	0005883a 	mov	r2,zero
  118244:	4c53883a 	add	r9,r9,r17
  118248:	4c63803a 	cmpltu	r17,r9,r17
  11824c:	10c7883a 	add	r3,r2,r3
  118250:	88c7883a 	add	r3,r17,r3
  118254:	4823883a 	mov	r17,r9
  118258:	1880202c 	andhi	r2,r3,128
  11825c:	1000d026 	beq	r2,zero,1185a0 <__subdf3+0x5c8>
  118260:	84000044 	addi	r16,r16,1
  118264:	0081ffc4 	movi	r2,2047
  118268:	8080fe26 	beq	r16,r2,118664 <__subdf3+0x68c>
  11826c:	00bfe034 	movhi	r2,65408
  118270:	10bfffc4 	addi	r2,r2,-1
  118274:	1886703a 	and	r3,r3,r2
  118278:	880ad07a 	srli	r5,r17,1
  11827c:	180497fa 	slli	r2,r3,31
  118280:	8900004c 	andi	r4,r17,1
  118284:	2922b03a 	or	r17,r5,r4
  118288:	1806d07a 	srli	r3,r3,1
  11828c:	1462b03a 	or	r17,r2,r17
  118290:	3825883a 	mov	r18,r7
  118294:	003f7106 	br	11805c <__alt_data_end+0xfffd805c>
  118298:	2984b03a 	or	r2,r5,r6
  11829c:	103f6826 	beq	r2,zero,118040 <__alt_data_end+0xfffd8040>
  1182a0:	39c03fcc 	andi	r7,r7,255
  1182a4:	003f6706 	br	118044 <__alt_data_end+0xfffd8044>
  1182a8:	4086b03a 	or	r3,r8,r2
  1182ac:	18015226 	beq	r3,zero,1187f8 <__subdf3+0x820>
  1182b0:	00c00434 	movhi	r3,16
  1182b4:	41400234 	orhi	r5,r8,8
  1182b8:	18ffffc4 	addi	r3,r3,-1
  1182bc:	28ca703a 	and	r5,r5,r3
  1182c0:	003f7e06 	br	1180bc <__alt_data_end+0xfffd80bc>
  1182c4:	10bfffc4 	addi	r2,r2,-1
  1182c8:	1000491e 	bne	r2,zero,1183f0 <__subdf3+0x418>
  1182cc:	898fc83a 	sub	r7,r17,r6
  1182d0:	89e3803a 	cmpltu	r17,r17,r7
  1182d4:	1947c83a 	sub	r3,r3,r5
  1182d8:	1c47c83a 	sub	r3,r3,r17
  1182dc:	3823883a 	mov	r17,r7
  1182e0:	003f9b06 	br	118150 <__alt_data_end+0xfffd8150>
  1182e4:	2988b03a 	or	r4,r5,r6
  1182e8:	203f5c26 	beq	r4,zero,11805c <__alt_data_end+0xfffd805c>
  1182ec:	10bfffc4 	addi	r2,r2,-1
  1182f0:	1000931e 	bne	r2,zero,118540 <__subdf3+0x568>
  1182f4:	898d883a 	add	r6,r17,r6
  1182f8:	3463803a 	cmpltu	r17,r6,r17
  1182fc:	1947883a 	add	r3,r3,r5
  118300:	88c7883a 	add	r3,r17,r3
  118304:	3023883a 	mov	r17,r6
  118308:	003fd306 	br	118258 <__alt_data_end+0xfffd8258>
  11830c:	1000541e 	bne	r2,zero,118460 <__subdf3+0x488>
  118310:	80800044 	addi	r2,r16,1
  118314:	1081ffcc 	andi	r2,r2,2047
  118318:	01000044 	movi	r4,1
  11831c:	2080a20e 	bge	r4,r2,1185a8 <__subdf3+0x5d0>
  118320:	8989c83a 	sub	r4,r17,r6
  118324:	8905803a 	cmpltu	r2,r17,r4
  118328:	1967c83a 	sub	r19,r3,r5
  11832c:	98a7c83a 	sub	r19,r19,r2
  118330:	9880202c 	andhi	r2,r19,128
  118334:	10006326 	beq	r2,zero,1184c4 <__subdf3+0x4ec>
  118338:	3463c83a 	sub	r17,r6,r17
  11833c:	28c7c83a 	sub	r3,r5,r3
  118340:	344d803a 	cmpltu	r6,r6,r17
  118344:	19a7c83a 	sub	r19,r3,r6
  118348:	3825883a 	mov	r18,r7
  11834c:	983f861e 	bne	r19,zero,118168 <__alt_data_end+0xfffd8168>
  118350:	8809883a 	mov	r4,r17
  118354:	0118c800 	call	118c80 <__clzsi2>
  118358:	10800804 	addi	r2,r2,32
  11835c:	113ffe04 	addi	r4,r2,-8
  118360:	00c007c4 	movi	r3,31
  118364:	193f850e 	bge	r3,r4,11817c <__alt_data_end+0xfffd817c>
  118368:	10bff604 	addi	r2,r2,-40
  11836c:	8884983a 	sll	r2,r17,r2
  118370:	0023883a 	mov	r17,zero
  118374:	243f880e 	bge	r4,r16,118198 <__alt_data_end+0xfffd8198>
  118378:	00ffe034 	movhi	r3,65408
  11837c:	18ffffc4 	addi	r3,r3,-1
  118380:	8121c83a 	sub	r16,r16,r4
  118384:	10c6703a 	and	r3,r2,r3
  118388:	003f3406 	br	11805c <__alt_data_end+0xfffd805c>
  11838c:	9100004c 	andi	r4,r18,1
  118390:	000b883a 	mov	r5,zero
  118394:	0005883a 	mov	r2,zero
  118398:	003f4806 	br	1180bc <__alt_data_end+0xfffd80bc>
  11839c:	298cb03a 	or	r6,r5,r6
  1183a0:	300cc03a 	cmpne	r6,r6,zero
  1183a4:	0005883a 	mov	r2,zero
  1183a8:	003f6406 	br	11813c <__alt_data_end+0xfffd813c>
  1183ac:	10009a1e 	bne	r2,zero,118618 <__subdf3+0x640>
  1183b0:	82400044 	addi	r9,r16,1
  1183b4:	4881ffcc 	andi	r2,r9,2047
  1183b8:	02800044 	movi	r10,1
  1183bc:	5080670e 	bge	r10,r2,11855c <__subdf3+0x584>
  1183c0:	0081ffc4 	movi	r2,2047
  1183c4:	4880af26 	beq	r9,r2,118684 <__subdf3+0x6ac>
  1183c8:	898d883a 	add	r6,r17,r6
  1183cc:	1945883a 	add	r2,r3,r5
  1183d0:	3447803a 	cmpltu	r3,r6,r17
  1183d4:	1887883a 	add	r3,r3,r2
  1183d8:	182297fa 	slli	r17,r3,31
  1183dc:	300cd07a 	srli	r6,r6,1
  1183e0:	1806d07a 	srli	r3,r3,1
  1183e4:	4821883a 	mov	r16,r9
  1183e8:	89a2b03a 	or	r17,r17,r6
  1183ec:	003f1b06 	br	11805c <__alt_data_end+0xfffd805c>
  1183f0:	0101ffc4 	movi	r4,2047
  1183f4:	813f441e 	bne	r16,r4,118108 <__alt_data_end+0xfffd8108>
  1183f8:	003f1806 	br	11805c <__alt_data_end+0xfffd805c>
  1183fc:	843ff844 	addi	r16,r16,-31
  118400:	01400804 	movi	r5,32
  118404:	1408d83a 	srl	r4,r2,r16
  118408:	19405026 	beq	r3,r5,11854c <__subdf3+0x574>
  11840c:	01401004 	movi	r5,64
  118410:	28c7c83a 	sub	r3,r5,r3
  118414:	10c4983a 	sll	r2,r2,r3
  118418:	88a2b03a 	or	r17,r17,r2
  11841c:	8822c03a 	cmpne	r17,r17,zero
  118420:	2462b03a 	or	r17,r4,r17
  118424:	0007883a 	mov	r3,zero
  118428:	0021883a 	mov	r16,zero
  11842c:	003f6d06 	br	1181e4 <__alt_data_end+0xfffd81e4>
  118430:	11fff804 	addi	r7,r2,-32
  118434:	01000804 	movi	r4,32
  118438:	29ced83a 	srl	r7,r5,r7
  11843c:	11004526 	beq	r2,r4,118554 <__subdf3+0x57c>
  118440:	01001004 	movi	r4,64
  118444:	2089c83a 	sub	r4,r4,r2
  118448:	2904983a 	sll	r2,r5,r4
  11844c:	118cb03a 	or	r6,r2,r6
  118450:	300cc03a 	cmpne	r6,r6,zero
  118454:	398cb03a 	or	r6,r7,r6
  118458:	0005883a 	mov	r2,zero
  11845c:	003f3706 	br	11813c <__alt_data_end+0xfffd813c>
  118460:	80002a26 	beq	r16,zero,11850c <__subdf3+0x534>
  118464:	0101ffc4 	movi	r4,2047
  118468:	49006626 	beq	r9,r4,118604 <__subdf3+0x62c>
  11846c:	0085c83a 	sub	r2,zero,r2
  118470:	18c02034 	orhi	r3,r3,128
  118474:	01000e04 	movi	r4,56
  118478:	20807e16 	blt	r4,r2,118674 <__subdf3+0x69c>
  11847c:	010007c4 	movi	r4,31
  118480:	2080e716 	blt	r4,r2,118820 <__subdf3+0x848>
  118484:	01000804 	movi	r4,32
  118488:	2089c83a 	sub	r4,r4,r2
  11848c:	1914983a 	sll	r10,r3,r4
  118490:	8890d83a 	srl	r8,r17,r2
  118494:	8908983a 	sll	r4,r17,r4
  118498:	1884d83a 	srl	r2,r3,r2
  11849c:	5222b03a 	or	r17,r10,r8
  1184a0:	2006c03a 	cmpne	r3,r4,zero
  1184a4:	88e2b03a 	or	r17,r17,r3
  1184a8:	3463c83a 	sub	r17,r6,r17
  1184ac:	2885c83a 	sub	r2,r5,r2
  1184b0:	344d803a 	cmpltu	r6,r6,r17
  1184b4:	1187c83a 	sub	r3,r2,r6
  1184b8:	4821883a 	mov	r16,r9
  1184bc:	3825883a 	mov	r18,r7
  1184c0:	003f2306 	br	118150 <__alt_data_end+0xfffd8150>
  1184c4:	24d0b03a 	or	r8,r4,r19
  1184c8:	40001b1e 	bne	r8,zero,118538 <__subdf3+0x560>
  1184cc:	0005883a 	mov	r2,zero
  1184d0:	0009883a 	mov	r4,zero
  1184d4:	0021883a 	mov	r16,zero
  1184d8:	003f4906 	br	118200 <__alt_data_end+0xfffd8200>
  1184dc:	010007c4 	movi	r4,31
  1184e0:	20803a16 	blt	r4,r2,1185cc <__subdf3+0x5f4>
  1184e4:	01000804 	movi	r4,32
  1184e8:	2089c83a 	sub	r4,r4,r2
  1184ec:	2912983a 	sll	r9,r5,r4
  1184f0:	3090d83a 	srl	r8,r6,r2
  1184f4:	3108983a 	sll	r4,r6,r4
  1184f8:	2884d83a 	srl	r2,r5,r2
  1184fc:	4a12b03a 	or	r9,r9,r8
  118500:	2008c03a 	cmpne	r4,r4,zero
  118504:	4912b03a 	or	r9,r9,r4
  118508:	003f4e06 	br	118244 <__alt_data_end+0xfffd8244>
  11850c:	1c48b03a 	or	r4,r3,r17
  118510:	20003c26 	beq	r4,zero,118604 <__subdf3+0x62c>
  118514:	0084303a 	nor	r2,zero,r2
  118518:	1000381e 	bne	r2,zero,1185fc <__subdf3+0x624>
  11851c:	3463c83a 	sub	r17,r6,r17
  118520:	28c5c83a 	sub	r2,r5,r3
  118524:	344d803a 	cmpltu	r6,r6,r17
  118528:	1187c83a 	sub	r3,r2,r6
  11852c:	4821883a 	mov	r16,r9
  118530:	3825883a 	mov	r18,r7
  118534:	003f0606 	br	118150 <__alt_data_end+0xfffd8150>
  118538:	2023883a 	mov	r17,r4
  11853c:	003f0906 	br	118164 <__alt_data_end+0xfffd8164>
  118540:	0101ffc4 	movi	r4,2047
  118544:	813f3a1e 	bne	r16,r4,118230 <__alt_data_end+0xfffd8230>
  118548:	003ec406 	br	11805c <__alt_data_end+0xfffd805c>
  11854c:	0005883a 	mov	r2,zero
  118550:	003fb106 	br	118418 <__alt_data_end+0xfffd8418>
  118554:	0005883a 	mov	r2,zero
  118558:	003fbc06 	br	11844c <__alt_data_end+0xfffd844c>
  11855c:	1c44b03a 	or	r2,r3,r17
  118560:	80008e1e 	bne	r16,zero,11879c <__subdf3+0x7c4>
  118564:	1000c826 	beq	r2,zero,118888 <__subdf3+0x8b0>
  118568:	2984b03a 	or	r2,r5,r6
  11856c:	103ebb26 	beq	r2,zero,11805c <__alt_data_end+0xfffd805c>
  118570:	8989883a 	add	r4,r17,r6
  118574:	1945883a 	add	r2,r3,r5
  118578:	2447803a 	cmpltu	r3,r4,r17
  11857c:	1887883a 	add	r3,r3,r2
  118580:	1880202c 	andhi	r2,r3,128
  118584:	2023883a 	mov	r17,r4
  118588:	103f1626 	beq	r2,zero,1181e4 <__alt_data_end+0xfffd81e4>
  11858c:	00bfe034 	movhi	r2,65408
  118590:	10bfffc4 	addi	r2,r2,-1
  118594:	5021883a 	mov	r16,r10
  118598:	1886703a 	and	r3,r3,r2
  11859c:	003eaf06 	br	11805c <__alt_data_end+0xfffd805c>
  1185a0:	3825883a 	mov	r18,r7
  1185a4:	003f0f06 	br	1181e4 <__alt_data_end+0xfffd81e4>
  1185a8:	1c44b03a 	or	r2,r3,r17
  1185ac:	8000251e 	bne	r16,zero,118644 <__subdf3+0x66c>
  1185b0:	1000661e 	bne	r2,zero,11874c <__subdf3+0x774>
  1185b4:	2990b03a 	or	r8,r5,r6
  1185b8:	40009626 	beq	r8,zero,118814 <__subdf3+0x83c>
  1185bc:	2807883a 	mov	r3,r5
  1185c0:	3023883a 	mov	r17,r6
  1185c4:	3825883a 	mov	r18,r7
  1185c8:	003ea406 	br	11805c <__alt_data_end+0xfffd805c>
  1185cc:	127ff804 	addi	r9,r2,-32
  1185d0:	01000804 	movi	r4,32
  1185d4:	2a52d83a 	srl	r9,r5,r9
  1185d8:	11008c26 	beq	r2,r4,11880c <__subdf3+0x834>
  1185dc:	01001004 	movi	r4,64
  1185e0:	2085c83a 	sub	r2,r4,r2
  1185e4:	2884983a 	sll	r2,r5,r2
  1185e8:	118cb03a 	or	r6,r2,r6
  1185ec:	300cc03a 	cmpne	r6,r6,zero
  1185f0:	4992b03a 	or	r9,r9,r6
  1185f4:	0005883a 	mov	r2,zero
  1185f8:	003f1206 	br	118244 <__alt_data_end+0xfffd8244>
  1185fc:	0101ffc4 	movi	r4,2047
  118600:	493f9c1e 	bne	r9,r4,118474 <__alt_data_end+0xfffd8474>
  118604:	2807883a 	mov	r3,r5
  118608:	3023883a 	mov	r17,r6
  11860c:	4821883a 	mov	r16,r9
  118610:	3825883a 	mov	r18,r7
  118614:	003e9106 	br	11805c <__alt_data_end+0xfffd805c>
  118618:	80001f1e 	bne	r16,zero,118698 <__subdf3+0x6c0>
  11861c:	1c48b03a 	or	r4,r3,r17
  118620:	20005a26 	beq	r4,zero,11878c <__subdf3+0x7b4>
  118624:	0084303a 	nor	r2,zero,r2
  118628:	1000561e 	bne	r2,zero,118784 <__subdf3+0x7ac>
  11862c:	89a3883a 	add	r17,r17,r6
  118630:	1945883a 	add	r2,r3,r5
  118634:	898d803a 	cmpltu	r6,r17,r6
  118638:	3087883a 	add	r3,r6,r2
  11863c:	4821883a 	mov	r16,r9
  118640:	003f0506 	br	118258 <__alt_data_end+0xfffd8258>
  118644:	10002b1e 	bne	r2,zero,1186f4 <__subdf3+0x71c>
  118648:	2984b03a 	or	r2,r5,r6
  11864c:	10008026 	beq	r2,zero,118850 <__subdf3+0x878>
  118650:	2807883a 	mov	r3,r5
  118654:	3023883a 	mov	r17,r6
  118658:	3825883a 	mov	r18,r7
  11865c:	0401ffc4 	movi	r16,2047
  118660:	003e7e06 	br	11805c <__alt_data_end+0xfffd805c>
  118664:	3809883a 	mov	r4,r7
  118668:	0011883a 	mov	r8,zero
  11866c:	0005883a 	mov	r2,zero
  118670:	003ee306 	br	118200 <__alt_data_end+0xfffd8200>
  118674:	1c62b03a 	or	r17,r3,r17
  118678:	8822c03a 	cmpne	r17,r17,zero
  11867c:	0005883a 	mov	r2,zero
  118680:	003f8906 	br	1184a8 <__alt_data_end+0xfffd84a8>
  118684:	3809883a 	mov	r4,r7
  118688:	4821883a 	mov	r16,r9
  11868c:	0011883a 	mov	r8,zero
  118690:	0005883a 	mov	r2,zero
  118694:	003eda06 	br	118200 <__alt_data_end+0xfffd8200>
  118698:	0101ffc4 	movi	r4,2047
  11869c:	49003b26 	beq	r9,r4,11878c <__subdf3+0x7b4>
  1186a0:	0085c83a 	sub	r2,zero,r2
  1186a4:	18c02034 	orhi	r3,r3,128
  1186a8:	01000e04 	movi	r4,56
  1186ac:	20806e16 	blt	r4,r2,118868 <__subdf3+0x890>
  1186b0:	010007c4 	movi	r4,31
  1186b4:	20807716 	blt	r4,r2,118894 <__subdf3+0x8bc>
  1186b8:	01000804 	movi	r4,32
  1186bc:	2089c83a 	sub	r4,r4,r2
  1186c0:	1914983a 	sll	r10,r3,r4
  1186c4:	8890d83a 	srl	r8,r17,r2
  1186c8:	8908983a 	sll	r4,r17,r4
  1186cc:	1884d83a 	srl	r2,r3,r2
  1186d0:	5222b03a 	or	r17,r10,r8
  1186d4:	2006c03a 	cmpne	r3,r4,zero
  1186d8:	88e2b03a 	or	r17,r17,r3
  1186dc:	89a3883a 	add	r17,r17,r6
  1186e0:	1145883a 	add	r2,r2,r5
  1186e4:	898d803a 	cmpltu	r6,r17,r6
  1186e8:	3087883a 	add	r3,r6,r2
  1186ec:	4821883a 	mov	r16,r9
  1186f0:	003ed906 	br	118258 <__alt_data_end+0xfffd8258>
  1186f4:	2984b03a 	or	r2,r5,r6
  1186f8:	10004226 	beq	r2,zero,118804 <__subdf3+0x82c>
  1186fc:	1808d0fa 	srli	r4,r3,3
  118700:	8822d0fa 	srli	r17,r17,3
  118704:	1806977a 	slli	r3,r3,29
  118708:	2080022c 	andhi	r2,r4,8
  11870c:	1c62b03a 	or	r17,r3,r17
  118710:	10000826 	beq	r2,zero,118734 <__subdf3+0x75c>
  118714:	2812d0fa 	srli	r9,r5,3
  118718:	4880022c 	andhi	r2,r9,8
  11871c:	1000051e 	bne	r2,zero,118734 <__subdf3+0x75c>
  118720:	300cd0fa 	srli	r6,r6,3
  118724:	2804977a 	slli	r2,r5,29
  118728:	4809883a 	mov	r4,r9
  11872c:	3825883a 	mov	r18,r7
  118730:	11a2b03a 	or	r17,r2,r6
  118734:	8806d77a 	srli	r3,r17,29
  118738:	200890fa 	slli	r4,r4,3
  11873c:	882290fa 	slli	r17,r17,3
  118740:	0401ffc4 	movi	r16,2047
  118744:	1906b03a 	or	r3,r3,r4
  118748:	003e4406 	br	11805c <__alt_data_end+0xfffd805c>
  11874c:	2984b03a 	or	r2,r5,r6
  118750:	103e4226 	beq	r2,zero,11805c <__alt_data_end+0xfffd805c>
  118754:	8989c83a 	sub	r4,r17,r6
  118758:	8911803a 	cmpltu	r8,r17,r4
  11875c:	1945c83a 	sub	r2,r3,r5
  118760:	1205c83a 	sub	r2,r2,r8
  118764:	1200202c 	andhi	r8,r2,128
  118768:	403e9a26 	beq	r8,zero,1181d4 <__alt_data_end+0xfffd81d4>
  11876c:	3463c83a 	sub	r17,r6,r17
  118770:	28c5c83a 	sub	r2,r5,r3
  118774:	344d803a 	cmpltu	r6,r6,r17
  118778:	1187c83a 	sub	r3,r2,r6
  11877c:	3825883a 	mov	r18,r7
  118780:	003e3606 	br	11805c <__alt_data_end+0xfffd805c>
  118784:	0101ffc4 	movi	r4,2047
  118788:	493fc71e 	bne	r9,r4,1186a8 <__alt_data_end+0xfffd86a8>
  11878c:	2807883a 	mov	r3,r5
  118790:	3023883a 	mov	r17,r6
  118794:	4821883a 	mov	r16,r9
  118798:	003e3006 	br	11805c <__alt_data_end+0xfffd805c>
  11879c:	10003626 	beq	r2,zero,118878 <__subdf3+0x8a0>
  1187a0:	2984b03a 	or	r2,r5,r6
  1187a4:	10001726 	beq	r2,zero,118804 <__subdf3+0x82c>
  1187a8:	1808d0fa 	srli	r4,r3,3
  1187ac:	8822d0fa 	srli	r17,r17,3
  1187b0:	1806977a 	slli	r3,r3,29
  1187b4:	2080022c 	andhi	r2,r4,8
  1187b8:	1c62b03a 	or	r17,r3,r17
  1187bc:	10000726 	beq	r2,zero,1187dc <__subdf3+0x804>
  1187c0:	2812d0fa 	srli	r9,r5,3
  1187c4:	4880022c 	andhi	r2,r9,8
  1187c8:	1000041e 	bne	r2,zero,1187dc <__subdf3+0x804>
  1187cc:	300cd0fa 	srli	r6,r6,3
  1187d0:	2804977a 	slli	r2,r5,29
  1187d4:	4809883a 	mov	r4,r9
  1187d8:	11a2b03a 	or	r17,r2,r6
  1187dc:	8806d77a 	srli	r3,r17,29
  1187e0:	200890fa 	slli	r4,r4,3
  1187e4:	882290fa 	slli	r17,r17,3
  1187e8:	3825883a 	mov	r18,r7
  1187ec:	1906b03a 	or	r3,r3,r4
  1187f0:	0401ffc4 	movi	r16,2047
  1187f4:	003e1906 	br	11805c <__alt_data_end+0xfffd805c>
  1187f8:	000b883a 	mov	r5,zero
  1187fc:	0005883a 	mov	r2,zero
  118800:	003e2e06 	br	1180bc <__alt_data_end+0xfffd80bc>
  118804:	0401ffc4 	movi	r16,2047
  118808:	003e1406 	br	11805c <__alt_data_end+0xfffd805c>
  11880c:	0005883a 	mov	r2,zero
  118810:	003f7506 	br	1185e8 <__alt_data_end+0xfffd85e8>
  118814:	0005883a 	mov	r2,zero
  118818:	0009883a 	mov	r4,zero
  11881c:	003e7806 	br	118200 <__alt_data_end+0xfffd8200>
  118820:	123ff804 	addi	r8,r2,-32
  118824:	01000804 	movi	r4,32
  118828:	1a10d83a 	srl	r8,r3,r8
  11882c:	11002526 	beq	r2,r4,1188c4 <__subdf3+0x8ec>
  118830:	01001004 	movi	r4,64
  118834:	2085c83a 	sub	r2,r4,r2
  118838:	1884983a 	sll	r2,r3,r2
  11883c:	1444b03a 	or	r2,r2,r17
  118840:	1004c03a 	cmpne	r2,r2,zero
  118844:	40a2b03a 	or	r17,r8,r2
  118848:	0005883a 	mov	r2,zero
  11884c:	003f1606 	br	1184a8 <__alt_data_end+0xfffd84a8>
  118850:	02000434 	movhi	r8,16
  118854:	0009883a 	mov	r4,zero
  118858:	423fffc4 	addi	r8,r8,-1
  11885c:	00bfffc4 	movi	r2,-1
  118860:	0401ffc4 	movi	r16,2047
  118864:	003e6606 	br	118200 <__alt_data_end+0xfffd8200>
  118868:	1c62b03a 	or	r17,r3,r17
  11886c:	8822c03a 	cmpne	r17,r17,zero
  118870:	0005883a 	mov	r2,zero
  118874:	003f9906 	br	1186dc <__alt_data_end+0xfffd86dc>
  118878:	2807883a 	mov	r3,r5
  11887c:	3023883a 	mov	r17,r6
  118880:	0401ffc4 	movi	r16,2047
  118884:	003df506 	br	11805c <__alt_data_end+0xfffd805c>
  118888:	2807883a 	mov	r3,r5
  11888c:	3023883a 	mov	r17,r6
  118890:	003df206 	br	11805c <__alt_data_end+0xfffd805c>
  118894:	123ff804 	addi	r8,r2,-32
  118898:	01000804 	movi	r4,32
  11889c:	1a10d83a 	srl	r8,r3,r8
  1188a0:	11000a26 	beq	r2,r4,1188cc <__subdf3+0x8f4>
  1188a4:	01001004 	movi	r4,64
  1188a8:	2085c83a 	sub	r2,r4,r2
  1188ac:	1884983a 	sll	r2,r3,r2
  1188b0:	1444b03a 	or	r2,r2,r17
  1188b4:	1004c03a 	cmpne	r2,r2,zero
  1188b8:	40a2b03a 	or	r17,r8,r2
  1188bc:	0005883a 	mov	r2,zero
  1188c0:	003f8606 	br	1186dc <__alt_data_end+0xfffd86dc>
  1188c4:	0005883a 	mov	r2,zero
  1188c8:	003fdc06 	br	11883c <__alt_data_end+0xfffd883c>
  1188cc:	0005883a 	mov	r2,zero
  1188d0:	003ff706 	br	1188b0 <__alt_data_end+0xfffd88b0>

001188d4 <__fixdfsi>:
  1188d4:	280cd53a 	srli	r6,r5,20
  1188d8:	00c00434 	movhi	r3,16
  1188dc:	18ffffc4 	addi	r3,r3,-1
  1188e0:	3181ffcc 	andi	r6,r6,2047
  1188e4:	01c0ff84 	movi	r7,1022
  1188e8:	28c6703a 	and	r3,r5,r3
  1188ec:	280ad7fa 	srli	r5,r5,31
  1188f0:	3980120e 	bge	r7,r6,11893c <__fixdfsi+0x68>
  1188f4:	00810744 	movi	r2,1053
  1188f8:	11800c16 	blt	r2,r6,11892c <__fixdfsi+0x58>
  1188fc:	00810cc4 	movi	r2,1075
  118900:	1185c83a 	sub	r2,r2,r6
  118904:	01c007c4 	movi	r7,31
  118908:	18c00434 	orhi	r3,r3,16
  11890c:	38800d16 	blt	r7,r2,118944 <__fixdfsi+0x70>
  118910:	31befb44 	addi	r6,r6,-1043
  118914:	2084d83a 	srl	r2,r4,r2
  118918:	1986983a 	sll	r3,r3,r6
  11891c:	1884b03a 	or	r2,r3,r2
  118920:	28000726 	beq	r5,zero,118940 <__fixdfsi+0x6c>
  118924:	0085c83a 	sub	r2,zero,r2
  118928:	f800283a 	ret
  11892c:	00a00034 	movhi	r2,32768
  118930:	10bfffc4 	addi	r2,r2,-1
  118934:	2885883a 	add	r2,r5,r2
  118938:	f800283a 	ret
  11893c:	0005883a 	mov	r2,zero
  118940:	f800283a 	ret
  118944:	008104c4 	movi	r2,1043
  118948:	1185c83a 	sub	r2,r2,r6
  11894c:	1884d83a 	srl	r2,r3,r2
  118950:	003ff306 	br	118920 <__alt_data_end+0xfffd8920>

00118954 <__floatsidf>:
  118954:	defffd04 	addi	sp,sp,-12
  118958:	dfc00215 	stw	ra,8(sp)
  11895c:	dc400115 	stw	r17,4(sp)
  118960:	dc000015 	stw	r16,0(sp)
  118964:	20002b26 	beq	r4,zero,118a14 <__floatsidf+0xc0>
  118968:	2023883a 	mov	r17,r4
  11896c:	2020d7fa 	srli	r16,r4,31
  118970:	20002d16 	blt	r4,zero,118a28 <__floatsidf+0xd4>
  118974:	8809883a 	mov	r4,r17
  118978:	0118c800 	call	118c80 <__clzsi2>
  11897c:	01410784 	movi	r5,1054
  118980:	288bc83a 	sub	r5,r5,r2
  118984:	01010cc4 	movi	r4,1075
  118988:	2149c83a 	sub	r4,r4,r5
  11898c:	00c007c4 	movi	r3,31
  118990:	1900160e 	bge	r3,r4,1189ec <__floatsidf+0x98>
  118994:	00c104c4 	movi	r3,1043
  118998:	1947c83a 	sub	r3,r3,r5
  11899c:	88c6983a 	sll	r3,r17,r3
  1189a0:	00800434 	movhi	r2,16
  1189a4:	10bfffc4 	addi	r2,r2,-1
  1189a8:	1886703a 	and	r3,r3,r2
  1189ac:	2941ffcc 	andi	r5,r5,2047
  1189b0:	800d883a 	mov	r6,r16
  1189b4:	0005883a 	mov	r2,zero
  1189b8:	280a953a 	slli	r5,r5,20
  1189bc:	31803fcc 	andi	r6,r6,255
  1189c0:	01000434 	movhi	r4,16
  1189c4:	300c97fa 	slli	r6,r6,31
  1189c8:	213fffc4 	addi	r4,r4,-1
  1189cc:	1906703a 	and	r3,r3,r4
  1189d0:	1946b03a 	or	r3,r3,r5
  1189d4:	1986b03a 	or	r3,r3,r6
  1189d8:	dfc00217 	ldw	ra,8(sp)
  1189dc:	dc400117 	ldw	r17,4(sp)
  1189e0:	dc000017 	ldw	r16,0(sp)
  1189e4:	dec00304 	addi	sp,sp,12
  1189e8:	f800283a 	ret
  1189ec:	00c002c4 	movi	r3,11
  1189f0:	1887c83a 	sub	r3,r3,r2
  1189f4:	88c6d83a 	srl	r3,r17,r3
  1189f8:	8904983a 	sll	r2,r17,r4
  1189fc:	01000434 	movhi	r4,16
  118a00:	213fffc4 	addi	r4,r4,-1
  118a04:	2941ffcc 	andi	r5,r5,2047
  118a08:	1906703a 	and	r3,r3,r4
  118a0c:	800d883a 	mov	r6,r16
  118a10:	003fe906 	br	1189b8 <__alt_data_end+0xfffd89b8>
  118a14:	000d883a 	mov	r6,zero
  118a18:	000b883a 	mov	r5,zero
  118a1c:	0007883a 	mov	r3,zero
  118a20:	0005883a 	mov	r2,zero
  118a24:	003fe406 	br	1189b8 <__alt_data_end+0xfffd89b8>
  118a28:	0123c83a 	sub	r17,zero,r4
  118a2c:	003fd106 	br	118974 <__alt_data_end+0xfffd8974>

00118a30 <__floatunsidf>:
  118a30:	defffe04 	addi	sp,sp,-8
  118a34:	dc000015 	stw	r16,0(sp)
  118a38:	dfc00115 	stw	ra,4(sp)
  118a3c:	2021883a 	mov	r16,r4
  118a40:	20002226 	beq	r4,zero,118acc <__floatunsidf+0x9c>
  118a44:	0118c800 	call	118c80 <__clzsi2>
  118a48:	01010784 	movi	r4,1054
  118a4c:	2089c83a 	sub	r4,r4,r2
  118a50:	01810cc4 	movi	r6,1075
  118a54:	310dc83a 	sub	r6,r6,r4
  118a58:	00c007c4 	movi	r3,31
  118a5c:	1980120e 	bge	r3,r6,118aa8 <__floatunsidf+0x78>
  118a60:	00c104c4 	movi	r3,1043
  118a64:	1907c83a 	sub	r3,r3,r4
  118a68:	80ca983a 	sll	r5,r16,r3
  118a6c:	00800434 	movhi	r2,16
  118a70:	10bfffc4 	addi	r2,r2,-1
  118a74:	2101ffcc 	andi	r4,r4,2047
  118a78:	0021883a 	mov	r16,zero
  118a7c:	288a703a 	and	r5,r5,r2
  118a80:	2008953a 	slli	r4,r4,20
  118a84:	00c00434 	movhi	r3,16
  118a88:	18ffffc4 	addi	r3,r3,-1
  118a8c:	28c6703a 	and	r3,r5,r3
  118a90:	8005883a 	mov	r2,r16
  118a94:	1906b03a 	or	r3,r3,r4
  118a98:	dfc00117 	ldw	ra,4(sp)
  118a9c:	dc000017 	ldw	r16,0(sp)
  118aa0:	dec00204 	addi	sp,sp,8
  118aa4:	f800283a 	ret
  118aa8:	00c002c4 	movi	r3,11
  118aac:	188bc83a 	sub	r5,r3,r2
  118ab0:	814ad83a 	srl	r5,r16,r5
  118ab4:	00c00434 	movhi	r3,16
  118ab8:	18ffffc4 	addi	r3,r3,-1
  118abc:	81a0983a 	sll	r16,r16,r6
  118ac0:	2101ffcc 	andi	r4,r4,2047
  118ac4:	28ca703a 	and	r5,r5,r3
  118ac8:	003fed06 	br	118a80 <__alt_data_end+0xfffd8a80>
  118acc:	0009883a 	mov	r4,zero
  118ad0:	000b883a 	mov	r5,zero
  118ad4:	003fea06 	br	118a80 <__alt_data_end+0xfffd8a80>

00118ad8 <__truncdfsf2>:
  118ad8:	2810d53a 	srli	r8,r5,20
  118adc:	01c00434 	movhi	r7,16
  118ae0:	39ffffc4 	addi	r7,r7,-1
  118ae4:	29ce703a 	and	r7,r5,r7
  118ae8:	4201ffcc 	andi	r8,r8,2047
  118aec:	380e90fa 	slli	r7,r7,3
  118af0:	200cd77a 	srli	r6,r4,29
  118af4:	42400044 	addi	r9,r8,1
  118af8:	4a41ffcc 	andi	r9,r9,2047
  118afc:	00c00044 	movi	r3,1
  118b00:	280ad7fa 	srli	r5,r5,31
  118b04:	31ceb03a 	or	r7,r6,r7
  118b08:	200490fa 	slli	r2,r4,3
  118b0c:	1a40230e 	bge	r3,r9,118b9c <__truncdfsf2+0xc4>
  118b10:	40ff2004 	addi	r3,r8,-896
  118b14:	01803f84 	movi	r6,254
  118b18:	30c01516 	blt	r6,r3,118b70 <__truncdfsf2+0x98>
  118b1c:	00c0380e 	bge	zero,r3,118c00 <__truncdfsf2+0x128>
  118b20:	200c91ba 	slli	r6,r4,6
  118b24:	380e90fa 	slli	r7,r7,3
  118b28:	1004d77a 	srli	r2,r2,29
  118b2c:	300cc03a 	cmpne	r6,r6,zero
  118b30:	31ccb03a 	or	r6,r6,r7
  118b34:	308cb03a 	or	r6,r6,r2
  118b38:	308001cc 	andi	r2,r6,7
  118b3c:	10000426 	beq	r2,zero,118b50 <__truncdfsf2+0x78>
  118b40:	308003cc 	andi	r2,r6,15
  118b44:	01000104 	movi	r4,4
  118b48:	11000126 	beq	r2,r4,118b50 <__truncdfsf2+0x78>
  118b4c:	31800104 	addi	r6,r6,4
  118b50:	3081002c 	andhi	r2,r6,1024
  118b54:	10001626 	beq	r2,zero,118bb0 <__truncdfsf2+0xd8>
  118b58:	18c00044 	addi	r3,r3,1
  118b5c:	00803fc4 	movi	r2,255
  118b60:	18800326 	beq	r3,r2,118b70 <__truncdfsf2+0x98>
  118b64:	300c91ba 	slli	r6,r6,6
  118b68:	300cd27a 	srli	r6,r6,9
  118b6c:	00000206 	br	118b78 <__truncdfsf2+0xa0>
  118b70:	00ffffc4 	movi	r3,-1
  118b74:	000d883a 	mov	r6,zero
  118b78:	18c03fcc 	andi	r3,r3,255
  118b7c:	180895fa 	slli	r4,r3,23
  118b80:	00c02034 	movhi	r3,128
  118b84:	280a97fa 	slli	r5,r5,31
  118b88:	18ffffc4 	addi	r3,r3,-1
  118b8c:	30c6703a 	and	r3,r6,r3
  118b90:	1906b03a 	or	r3,r3,r4
  118b94:	1944b03a 	or	r2,r3,r5
  118b98:	f800283a 	ret
  118b9c:	40000b1e 	bne	r8,zero,118bcc <__truncdfsf2+0xf4>
  118ba0:	388cb03a 	or	r6,r7,r2
  118ba4:	0007883a 	mov	r3,zero
  118ba8:	30000426 	beq	r6,zero,118bbc <__truncdfsf2+0xe4>
  118bac:	01800144 	movi	r6,5
  118bb0:	00803fc4 	movi	r2,255
  118bb4:	300cd0fa 	srli	r6,r6,3
  118bb8:	18800a26 	beq	r3,r2,118be4 <__truncdfsf2+0x10c>
  118bbc:	00802034 	movhi	r2,128
  118bc0:	10bfffc4 	addi	r2,r2,-1
  118bc4:	308c703a 	and	r6,r6,r2
  118bc8:	003feb06 	br	118b78 <__alt_data_end+0xfffd8b78>
  118bcc:	3888b03a 	or	r4,r7,r2
  118bd0:	203fe726 	beq	r4,zero,118b70 <__alt_data_end+0xfffd8b70>
  118bd4:	380c90fa 	slli	r6,r7,3
  118bd8:	00c03fc4 	movi	r3,255
  118bdc:	31808034 	orhi	r6,r6,512
  118be0:	003fd506 	br	118b38 <__alt_data_end+0xfffd8b38>
  118be4:	303fe226 	beq	r6,zero,118b70 <__alt_data_end+0xfffd8b70>
  118be8:	00802034 	movhi	r2,128
  118bec:	31801034 	orhi	r6,r6,64
  118bf0:	10bfffc4 	addi	r2,r2,-1
  118bf4:	00ffffc4 	movi	r3,-1
  118bf8:	308c703a 	and	r6,r6,r2
  118bfc:	003fde06 	br	118b78 <__alt_data_end+0xfffd8b78>
  118c00:	013ffa44 	movi	r4,-23
  118c04:	19000e16 	blt	r3,r4,118c40 <__truncdfsf2+0x168>
  118c08:	01000784 	movi	r4,30
  118c0c:	20c9c83a 	sub	r4,r4,r3
  118c10:	018007c4 	movi	r6,31
  118c14:	39c02034 	orhi	r7,r7,128
  118c18:	31000b16 	blt	r6,r4,118c48 <__truncdfsf2+0x170>
  118c1c:	423f2084 	addi	r8,r8,-894
  118c20:	120c983a 	sll	r6,r2,r8
  118c24:	3a0e983a 	sll	r7,r7,r8
  118c28:	1104d83a 	srl	r2,r2,r4
  118c2c:	300cc03a 	cmpne	r6,r6,zero
  118c30:	31ceb03a 	or	r7,r6,r7
  118c34:	388cb03a 	or	r6,r7,r2
  118c38:	0007883a 	mov	r3,zero
  118c3c:	003fbe06 	br	118b38 <__alt_data_end+0xfffd8b38>
  118c40:	0007883a 	mov	r3,zero
  118c44:	003fd906 	br	118bac <__alt_data_end+0xfffd8bac>
  118c48:	01bfff84 	movi	r6,-2
  118c4c:	30cdc83a 	sub	r6,r6,r3
  118c50:	00c00804 	movi	r3,32
  118c54:	398cd83a 	srl	r6,r7,r6
  118c58:	20c00726 	beq	r4,r3,118c78 <__truncdfsf2+0x1a0>
  118c5c:	423f2884 	addi	r8,r8,-862
  118c60:	3a0e983a 	sll	r7,r7,r8
  118c64:	3884b03a 	or	r2,r7,r2
  118c68:	1004c03a 	cmpne	r2,r2,zero
  118c6c:	118cb03a 	or	r6,r2,r6
  118c70:	0007883a 	mov	r3,zero
  118c74:	003fb006 	br	118b38 <__alt_data_end+0xfffd8b38>
  118c78:	000f883a 	mov	r7,zero
  118c7c:	003ff906 	br	118c64 <__alt_data_end+0xfffd8c64>

00118c80 <__clzsi2>:
  118c80:	00bfffd4 	movui	r2,65535
  118c84:	11000536 	bltu	r2,r4,118c9c <__clzsi2+0x1c>
  118c88:	00803fc4 	movi	r2,255
  118c8c:	11000f36 	bltu	r2,r4,118ccc <__clzsi2+0x4c>
  118c90:	00800804 	movi	r2,32
  118c94:	0007883a 	mov	r3,zero
  118c98:	00000506 	br	118cb0 <__clzsi2+0x30>
  118c9c:	00804034 	movhi	r2,256
  118ca0:	10bfffc4 	addi	r2,r2,-1
  118ca4:	11000c2e 	bgeu	r2,r4,118cd8 <__clzsi2+0x58>
  118ca8:	00800204 	movi	r2,8
  118cac:	00c00604 	movi	r3,24
  118cb0:	20c8d83a 	srl	r4,r4,r3
  118cb4:	00c004b4 	movhi	r3,18
  118cb8:	18cfce84 	addi	r3,r3,16186
  118cbc:	1909883a 	add	r4,r3,r4
  118cc0:	20c00003 	ldbu	r3,0(r4)
  118cc4:	10c5c83a 	sub	r2,r2,r3
  118cc8:	f800283a 	ret
  118ccc:	00800604 	movi	r2,24
  118cd0:	00c00204 	movi	r3,8
  118cd4:	003ff606 	br	118cb0 <__alt_data_end+0xfffd8cb0>
  118cd8:	00800404 	movi	r2,16
  118cdc:	1007883a 	mov	r3,r2
  118ce0:	003ff306 	br	118cb0 <__alt_data_end+0xfffd8cb0>

00118ce4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  118ce4:	defffe04 	addi	sp,sp,-8
  118ce8:	dfc00115 	stw	ra,4(sp)
  118cec:	df000015 	stw	fp,0(sp)
  118cf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  118cf4:	d0a00d17 	ldw	r2,-32716(gp)
  118cf8:	10000326 	beq	r2,zero,118d08 <alt_get_errno+0x24>
  118cfc:	d0a00d17 	ldw	r2,-32716(gp)
  118d00:	103ee83a 	callr	r2
  118d04:	00000106 	br	118d0c <alt_get_errno+0x28>
  118d08:	d0a72d04 	addi	r2,gp,-25420
}
  118d0c:	e037883a 	mov	sp,fp
  118d10:	dfc00117 	ldw	ra,4(sp)
  118d14:	df000017 	ldw	fp,0(sp)
  118d18:	dec00204 	addi	sp,sp,8
  118d1c:	f800283a 	ret

00118d20 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  118d20:	defffb04 	addi	sp,sp,-20
  118d24:	dfc00415 	stw	ra,16(sp)
  118d28:	df000315 	stw	fp,12(sp)
  118d2c:	df000304 	addi	fp,sp,12
  118d30:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  118d34:	e0bfff17 	ldw	r2,-4(fp)
  118d38:	10000816 	blt	r2,zero,118d5c <close+0x3c>
  118d3c:	01400304 	movi	r5,12
  118d40:	e13fff17 	ldw	r4,-4(fp)
  118d44:	01160740 	call	116074 <__mulsi3>
  118d48:	1007883a 	mov	r3,r2
  118d4c:	008004b4 	movhi	r2,18
  118d50:	1092b104 	addi	r2,r2,19140
  118d54:	1885883a 	add	r2,r3,r2
  118d58:	00000106 	br	118d60 <close+0x40>
  118d5c:	0005883a 	mov	r2,zero
  118d60:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  118d64:	e0bffd17 	ldw	r2,-12(fp)
  118d68:	10001926 	beq	r2,zero,118dd0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  118d6c:	e0bffd17 	ldw	r2,-12(fp)
  118d70:	10800017 	ldw	r2,0(r2)
  118d74:	10800417 	ldw	r2,16(r2)
  118d78:	10000626 	beq	r2,zero,118d94 <close+0x74>
  118d7c:	e0bffd17 	ldw	r2,-12(fp)
  118d80:	10800017 	ldw	r2,0(r2)
  118d84:	10800417 	ldw	r2,16(r2)
  118d88:	e13ffd17 	ldw	r4,-12(fp)
  118d8c:	103ee83a 	callr	r2
  118d90:	00000106 	br	118d98 <close+0x78>
  118d94:	0005883a 	mov	r2,zero
  118d98:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  118d9c:	e13fff17 	ldw	r4,-4(fp)
  118da0:	01194000 	call	119400 <alt_release_fd>
    if (rval < 0)
  118da4:	e0bffe17 	ldw	r2,-8(fp)
  118da8:	1000070e 	bge	r2,zero,118dc8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
  118dac:	0118ce40 	call	118ce4 <alt_get_errno>
  118db0:	1007883a 	mov	r3,r2
  118db4:	e0bffe17 	ldw	r2,-8(fp)
  118db8:	0085c83a 	sub	r2,zero,r2
  118dbc:	18800015 	stw	r2,0(r3)
      return -1;
  118dc0:	00bfffc4 	movi	r2,-1
  118dc4:	00000706 	br	118de4 <close+0xc4>
    }
    return 0;
  118dc8:	0005883a 	mov	r2,zero
  118dcc:	00000506 	br	118de4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  118dd0:	0118ce40 	call	118ce4 <alt_get_errno>
  118dd4:	1007883a 	mov	r3,r2
  118dd8:	00801444 	movi	r2,81
  118ddc:	18800015 	stw	r2,0(r3)
    return -1;
  118de0:	00bfffc4 	movi	r2,-1
  }
}
  118de4:	e037883a 	mov	sp,fp
  118de8:	dfc00117 	ldw	ra,4(sp)
  118dec:	df000017 	ldw	fp,0(sp)
  118df0:	dec00204 	addi	sp,sp,8
  118df4:	f800283a 	ret

00118df8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  118df8:	defffc04 	addi	sp,sp,-16
  118dfc:	df000315 	stw	fp,12(sp)
  118e00:	df000304 	addi	fp,sp,12
  118e04:	e13ffd15 	stw	r4,-12(fp)
  118e08:	e17ffe15 	stw	r5,-8(fp)
  118e0c:	e1bfff15 	stw	r6,-4(fp)
  return len;
  118e10:	e0bfff17 	ldw	r2,-4(fp)
}
  118e14:	e037883a 	mov	sp,fp
  118e18:	df000017 	ldw	fp,0(sp)
  118e1c:	dec00104 	addi	sp,sp,4
  118e20:	f800283a 	ret

00118e24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  118e24:	defffe04 	addi	sp,sp,-8
  118e28:	dfc00115 	stw	ra,4(sp)
  118e2c:	df000015 	stw	fp,0(sp)
  118e30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  118e34:	d0a00d17 	ldw	r2,-32716(gp)
  118e38:	10000326 	beq	r2,zero,118e48 <alt_get_errno+0x24>
  118e3c:	d0a00d17 	ldw	r2,-32716(gp)
  118e40:	103ee83a 	callr	r2
  118e44:	00000106 	br	118e4c <alt_get_errno+0x28>
  118e48:	d0a72d04 	addi	r2,gp,-25420
}
  118e4c:	e037883a 	mov	sp,fp
  118e50:	dfc00117 	ldw	ra,4(sp)
  118e54:	df000017 	ldw	fp,0(sp)
  118e58:	dec00204 	addi	sp,sp,8
  118e5c:	f800283a 	ret

00118e60 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  118e60:	defffb04 	addi	sp,sp,-20
  118e64:	dfc00415 	stw	ra,16(sp)
  118e68:	df000315 	stw	fp,12(sp)
  118e6c:	df000304 	addi	fp,sp,12
  118e70:	e13ffe15 	stw	r4,-8(fp)
  118e74:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  118e78:	e0bffe17 	ldw	r2,-8(fp)
  118e7c:	10000816 	blt	r2,zero,118ea0 <fstat+0x40>
  118e80:	01400304 	movi	r5,12
  118e84:	e13ffe17 	ldw	r4,-8(fp)
  118e88:	01160740 	call	116074 <__mulsi3>
  118e8c:	1007883a 	mov	r3,r2
  118e90:	008004b4 	movhi	r2,18
  118e94:	1092b104 	addi	r2,r2,19140
  118e98:	1885883a 	add	r2,r3,r2
  118e9c:	00000106 	br	118ea4 <fstat+0x44>
  118ea0:	0005883a 	mov	r2,zero
  118ea4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  118ea8:	e0bffd17 	ldw	r2,-12(fp)
  118eac:	10001026 	beq	r2,zero,118ef0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  118eb0:	e0bffd17 	ldw	r2,-12(fp)
  118eb4:	10800017 	ldw	r2,0(r2)
  118eb8:	10800817 	ldw	r2,32(r2)
  118ebc:	10000726 	beq	r2,zero,118edc <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
  118ec0:	e0bffd17 	ldw	r2,-12(fp)
  118ec4:	10800017 	ldw	r2,0(r2)
  118ec8:	10800817 	ldw	r2,32(r2)
  118ecc:	e17fff17 	ldw	r5,-4(fp)
  118ed0:	e13ffd17 	ldw	r4,-12(fp)
  118ed4:	103ee83a 	callr	r2
  118ed8:	00000a06 	br	118f04 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  118edc:	e0bfff17 	ldw	r2,-4(fp)
  118ee0:	00c80004 	movi	r3,8192
  118ee4:	10c00115 	stw	r3,4(r2)
      return 0;
  118ee8:	0005883a 	mov	r2,zero
  118eec:	00000506 	br	118f04 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  118ef0:	0118e240 	call	118e24 <alt_get_errno>
  118ef4:	1007883a 	mov	r3,r2
  118ef8:	00801444 	movi	r2,81
  118efc:	18800015 	stw	r2,0(r3)
    return -1;
  118f00:	00bfffc4 	movi	r2,-1
  }
}
  118f04:	e037883a 	mov	sp,fp
  118f08:	dfc00117 	ldw	ra,4(sp)
  118f0c:	df000017 	ldw	fp,0(sp)
  118f10:	dec00204 	addi	sp,sp,8
  118f14:	f800283a 	ret

00118f18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  118f18:	defffe04 	addi	sp,sp,-8
  118f1c:	dfc00115 	stw	ra,4(sp)
  118f20:	df000015 	stw	fp,0(sp)
  118f24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  118f28:	d0a00d17 	ldw	r2,-32716(gp)
  118f2c:	10000326 	beq	r2,zero,118f3c <alt_get_errno+0x24>
  118f30:	d0a00d17 	ldw	r2,-32716(gp)
  118f34:	103ee83a 	callr	r2
  118f38:	00000106 	br	118f40 <alt_get_errno+0x28>
  118f3c:	d0a72d04 	addi	r2,gp,-25420
}
  118f40:	e037883a 	mov	sp,fp
  118f44:	dfc00117 	ldw	ra,4(sp)
  118f48:	df000017 	ldw	fp,0(sp)
  118f4c:	dec00204 	addi	sp,sp,8
  118f50:	f800283a 	ret

00118f54 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  118f54:	deffed04 	addi	sp,sp,-76
  118f58:	dfc01215 	stw	ra,72(sp)
  118f5c:	df001115 	stw	fp,68(sp)
  118f60:	df001104 	addi	fp,sp,68
  118f64:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  118f68:	e0bfff17 	ldw	r2,-4(fp)
  118f6c:	10000816 	blt	r2,zero,118f90 <isatty+0x3c>
  118f70:	01400304 	movi	r5,12
  118f74:	e13fff17 	ldw	r4,-4(fp)
  118f78:	01160740 	call	116074 <__mulsi3>
  118f7c:	1007883a 	mov	r3,r2
  118f80:	008004b4 	movhi	r2,18
  118f84:	1092b104 	addi	r2,r2,19140
  118f88:	1885883a 	add	r2,r3,r2
  118f8c:	00000106 	br	118f94 <isatty+0x40>
  118f90:	0005883a 	mov	r2,zero
  118f94:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  118f98:	e0bfef17 	ldw	r2,-68(fp)
  118f9c:	10000e26 	beq	r2,zero,118fd8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  118fa0:	e0bfef17 	ldw	r2,-68(fp)
  118fa4:	10800017 	ldw	r2,0(r2)
  118fa8:	10800817 	ldw	r2,32(r2)
  118fac:	1000021e 	bne	r2,zero,118fb8 <isatty+0x64>
    {
      return 1;
  118fb0:	00800044 	movi	r2,1
  118fb4:	00000d06 	br	118fec <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  118fb8:	e0bff004 	addi	r2,fp,-64
  118fbc:	100b883a 	mov	r5,r2
  118fc0:	e13fff17 	ldw	r4,-4(fp)
  118fc4:	0118e600 	call	118e60 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  118fc8:	e0bff117 	ldw	r2,-60(fp)
  118fcc:	10880020 	cmpeqi	r2,r2,8192
  118fd0:	10803fcc 	andi	r2,r2,255
  118fd4:	00000506 	br	118fec <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  118fd8:	0118f180 	call	118f18 <alt_get_errno>
  118fdc:	1007883a 	mov	r3,r2
  118fe0:	00801444 	movi	r2,81
  118fe4:	18800015 	stw	r2,0(r3)
    return 0;
  118fe8:	0005883a 	mov	r2,zero
  }
}
  118fec:	e037883a 	mov	sp,fp
  118ff0:	dfc00117 	ldw	ra,4(sp)
  118ff4:	df000017 	ldw	fp,0(sp)
  118ff8:	dec00204 	addi	sp,sp,8
  118ffc:	f800283a 	ret

00119000 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  119000:	defffc04 	addi	sp,sp,-16
  119004:	df000315 	stw	fp,12(sp)
  119008:	df000304 	addi	fp,sp,12
  11900c:	e13ffd15 	stw	r4,-12(fp)
  119010:	e17ffe15 	stw	r5,-8(fp)
  119014:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  119018:	e0fffe17 	ldw	r3,-8(fp)
  11901c:	e0bffd17 	ldw	r2,-12(fp)
  119020:	18800c26 	beq	r3,r2,119054 <alt_load_section+0x54>
  {
    while( to != end )
  119024:	00000806 	br	119048 <alt_load_section+0x48>
    {
      *to++ = *from++;
  119028:	e0bffe17 	ldw	r2,-8(fp)
  11902c:	10c00104 	addi	r3,r2,4
  119030:	e0fffe15 	stw	r3,-8(fp)
  119034:	e0fffd17 	ldw	r3,-12(fp)
  119038:	19000104 	addi	r4,r3,4
  11903c:	e13ffd15 	stw	r4,-12(fp)
  119040:	18c00017 	ldw	r3,0(r3)
  119044:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  119048:	e0fffe17 	ldw	r3,-8(fp)
  11904c:	e0bfff17 	ldw	r2,-4(fp)
  119050:	18bff51e 	bne	r3,r2,119028 <__alt_data_end+0xfffd9028>
    {
      *to++ = *from++;
    }
  }
}
  119054:	0001883a 	nop
  119058:	e037883a 	mov	sp,fp
  11905c:	df000017 	ldw	fp,0(sp)
  119060:	dec00104 	addi	sp,sp,4
  119064:	f800283a 	ret

00119068 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  119068:	defffe04 	addi	sp,sp,-8
  11906c:	dfc00115 	stw	ra,4(sp)
  119070:	df000015 	stw	fp,0(sp)
  119074:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  119078:	018004b4 	movhi	r6,18
  11907c:	31975d04 	addi	r6,r6,23924
  119080:	014004b4 	movhi	r5,18
  119084:	29506504 	addi	r5,r5,16788
  119088:	010004b4 	movhi	r4,18
  11908c:	21175d04 	addi	r4,r4,23924
  119090:	01190000 	call	119000 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  119094:	01800434 	movhi	r6,16
  119098:	31807004 	addi	r6,r6,448
  11909c:	01400434 	movhi	r5,16
  1190a0:	29400804 	addi	r5,r5,32
  1190a4:	01000434 	movhi	r4,16
  1190a8:	21000804 	addi	r4,r4,32
  1190ac:	01190000 	call	119000 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  1190b0:	018004b4 	movhi	r6,18
  1190b4:	31906504 	addi	r6,r6,16788
  1190b8:	014004b4 	movhi	r5,18
  1190bc:	294d4c04 	addi	r5,r5,13616
  1190c0:	010004b4 	movhi	r4,18
  1190c4:	210d4c04 	addi	r4,r4,13616
  1190c8:	01190000 	call	119000 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  1190cc:	012218c0 	call	12218c <alt_dcache_flush_all>
  alt_icache_flush_all();
  1190d0:	012234c0 	call	12234c <alt_icache_flush_all>
}
  1190d4:	0001883a 	nop
  1190d8:	e037883a 	mov	sp,fp
  1190dc:	dfc00117 	ldw	ra,4(sp)
  1190e0:	df000017 	ldw	fp,0(sp)
  1190e4:	dec00204 	addi	sp,sp,8
  1190e8:	f800283a 	ret

001190ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  1190ec:	defffe04 	addi	sp,sp,-8
  1190f0:	dfc00115 	stw	ra,4(sp)
  1190f4:	df000015 	stw	fp,0(sp)
  1190f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  1190fc:	d0a00d17 	ldw	r2,-32716(gp)
  119100:	10000326 	beq	r2,zero,119110 <alt_get_errno+0x24>
  119104:	d0a00d17 	ldw	r2,-32716(gp)
  119108:	103ee83a 	callr	r2
  11910c:	00000106 	br	119114 <alt_get_errno+0x28>
  119110:	d0a72d04 	addi	r2,gp,-25420
}
  119114:	e037883a 	mov	sp,fp
  119118:	dfc00117 	ldw	ra,4(sp)
  11911c:	df000017 	ldw	fp,0(sp)
  119120:	dec00204 	addi	sp,sp,8
  119124:	f800283a 	ret

00119128 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  119128:	defff904 	addi	sp,sp,-28
  11912c:	dfc00615 	stw	ra,24(sp)
  119130:	df000515 	stw	fp,20(sp)
  119134:	df000504 	addi	fp,sp,20
  119138:	e13ffd15 	stw	r4,-12(fp)
  11913c:	e17ffe15 	stw	r5,-8(fp)
  119140:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  119144:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  119148:	e0bffd17 	ldw	r2,-12(fp)
  11914c:	10000816 	blt	r2,zero,119170 <lseek+0x48>
  119150:	01400304 	movi	r5,12
  119154:	e13ffd17 	ldw	r4,-12(fp)
  119158:	01160740 	call	116074 <__mulsi3>
  11915c:	1007883a 	mov	r3,r2
  119160:	008004b4 	movhi	r2,18
  119164:	1092b104 	addi	r2,r2,19140
  119168:	1885883a 	add	r2,r3,r2
  11916c:	00000106 	br	119174 <lseek+0x4c>
  119170:	0005883a 	mov	r2,zero
  119174:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  119178:	e0bffc17 	ldw	r2,-16(fp)
  11917c:	10001026 	beq	r2,zero,1191c0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  119180:	e0bffc17 	ldw	r2,-16(fp)
  119184:	10800017 	ldw	r2,0(r2)
  119188:	10800717 	ldw	r2,28(r2)
  11918c:	10000926 	beq	r2,zero,1191b4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  119190:	e0bffc17 	ldw	r2,-16(fp)
  119194:	10800017 	ldw	r2,0(r2)
  119198:	10800717 	ldw	r2,28(r2)
  11919c:	e1bfff17 	ldw	r6,-4(fp)
  1191a0:	e17ffe17 	ldw	r5,-8(fp)
  1191a4:	e13ffc17 	ldw	r4,-16(fp)
  1191a8:	103ee83a 	callr	r2
  1191ac:	e0bffb15 	stw	r2,-20(fp)
  1191b0:	00000506 	br	1191c8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  1191b4:	00bfde84 	movi	r2,-134
  1191b8:	e0bffb15 	stw	r2,-20(fp)
  1191bc:	00000206 	br	1191c8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
  1191c0:	00bfebc4 	movi	r2,-81
  1191c4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  1191c8:	e0bffb17 	ldw	r2,-20(fp)
  1191cc:	1000070e 	bge	r2,zero,1191ec <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
  1191d0:	01190ec0 	call	1190ec <alt_get_errno>
  1191d4:	1007883a 	mov	r3,r2
  1191d8:	e0bffb17 	ldw	r2,-20(fp)
  1191dc:	0085c83a 	sub	r2,zero,r2
  1191e0:	18800015 	stw	r2,0(r3)
    rc = -1;
  1191e4:	00bfffc4 	movi	r2,-1
  1191e8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  1191ec:	e0bffb17 	ldw	r2,-20(fp)
}
  1191f0:	e037883a 	mov	sp,fp
  1191f4:	dfc00117 	ldw	ra,4(sp)
  1191f8:	df000017 	ldw	fp,0(sp)
  1191fc:	dec00204 	addi	sp,sp,8
  119200:	f800283a 	ret

00119204 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  119204:	defff904 	addi	sp,sp,-28
  119208:	dfc00615 	stw	ra,24(sp)
  11920c:	df000515 	stw	fp,20(sp)
  119210:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  119214:	0009883a 	mov	r4,zero
  119218:	01211ac0 	call	1211ac <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  11921c:	011a1f00 	call	11a1f0 <OSInit>
  119220:	01000044 	movi	r4,1
  119224:	011eb4c0 	call	11eb4c <OSSemCreate>
  119228:	d0a73615 	stw	r2,-25384(gp)
  11922c:	01000044 	movi	r4,1
  119230:	011eb4c0 	call	11eb4c <OSSemCreate>
  119234:	d0a73815 	stw	r2,-25376(gp)
  119238:	d0a73104 	addi	r2,gp,-25404
  11923c:	e0bffc15 	stw	r2,-16(fp)
  119240:	00800044 	movi	r2,1
  119244:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  119248:	e0bffd0b 	ldhu	r2,-12(fp)
  11924c:	1009883a 	mov	r4,r2
  119250:	011eb4c0 	call	11eb4c <OSSemCreate>
  119254:	1007883a 	mov	r3,r2
  119258:	e0bffc17 	ldw	r2,-16(fp)
  11925c:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  119260:	01211e40 	call	1211e4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  119264:	018004b4 	movhi	r6,18
  119268:	31901204 	addi	r6,r6,16456
  11926c:	014004b4 	movhi	r5,18
  119270:	29501204 	addi	r5,r5,16456
  119274:	010004b4 	movhi	r4,18
  119278:	21101204 	addi	r4,r4,16456
  11927c:	01226f00 	call	1226f0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  119280:	012228c0 	call	12228c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  119284:	010004b4 	movhi	r4,18
  119288:	2108bb04 	addi	r4,r4,8940
  11928c:	012319c0 	call	12319c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  119290:	d0a73217 	ldw	r2,-25400(gp)
  119294:	d0e73317 	ldw	r3,-25396(gp)
  119298:	d1273417 	ldw	r4,-25392(gp)
  11929c:	200d883a 	mov	r6,r4
  1192a0:	180b883a 	mov	r5,r3
  1192a4:	1009883a 	mov	r4,r2
  1192a8:	01002d40 	call	1002d4 <main>
  1192ac:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
  1192b0:	01000044 	movi	r4,1
  1192b4:	0118d200 	call	118d20 <close>
  exit (result);
  1192b8:	e13ffb17 	ldw	r4,-20(fp)
  1192bc:	01231b00 	call	1231b0 <exit>

001192c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  1192c0:	defffe04 	addi	sp,sp,-8
  1192c4:	dfc00115 	stw	ra,4(sp)
  1192c8:	df000015 	stw	fp,0(sp)
  1192cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  1192d0:	d0a00d17 	ldw	r2,-32716(gp)
  1192d4:	10000326 	beq	r2,zero,1192e4 <alt_get_errno+0x24>
  1192d8:	d0a00d17 	ldw	r2,-32716(gp)
  1192dc:	103ee83a 	callr	r2
  1192e0:	00000106 	br	1192e8 <alt_get_errno+0x28>
  1192e4:	d0a72d04 	addi	r2,gp,-25420
}
  1192e8:	e037883a 	mov	sp,fp
  1192ec:	dfc00117 	ldw	ra,4(sp)
  1192f0:	df000017 	ldw	fp,0(sp)
  1192f4:	dec00204 	addi	sp,sp,8
  1192f8:	f800283a 	ret

001192fc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  1192fc:	defff904 	addi	sp,sp,-28
  119300:	dfc00615 	stw	ra,24(sp)
  119304:	df000515 	stw	fp,20(sp)
  119308:	df000504 	addi	fp,sp,20
  11930c:	e13ffd15 	stw	r4,-12(fp)
  119310:	e17ffe15 	stw	r5,-8(fp)
  119314:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  119318:	e0bffd17 	ldw	r2,-12(fp)
  11931c:	10000816 	blt	r2,zero,119340 <read+0x44>
  119320:	01400304 	movi	r5,12
  119324:	e13ffd17 	ldw	r4,-12(fp)
  119328:	01160740 	call	116074 <__mulsi3>
  11932c:	1007883a 	mov	r3,r2
  119330:	008004b4 	movhi	r2,18
  119334:	1092b104 	addi	r2,r2,19140
  119338:	1885883a 	add	r2,r3,r2
  11933c:	00000106 	br	119344 <read+0x48>
  119340:	0005883a 	mov	r2,zero
  119344:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  119348:	e0bffb17 	ldw	r2,-20(fp)
  11934c:	10002226 	beq	r2,zero,1193d8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  119350:	e0bffb17 	ldw	r2,-20(fp)
  119354:	10800217 	ldw	r2,8(r2)
  119358:	108000cc 	andi	r2,r2,3
  11935c:	10800060 	cmpeqi	r2,r2,1
  119360:	1000181e 	bne	r2,zero,1193c4 <read+0xc8>
        (fd->dev->read))
  119364:	e0bffb17 	ldw	r2,-20(fp)
  119368:	10800017 	ldw	r2,0(r2)
  11936c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  119370:	10001426 	beq	r2,zero,1193c4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  119374:	e0bffb17 	ldw	r2,-20(fp)
  119378:	10800017 	ldw	r2,0(r2)
  11937c:	10800517 	ldw	r2,20(r2)
  119380:	e0ffff17 	ldw	r3,-4(fp)
  119384:	180d883a 	mov	r6,r3
  119388:	e17ffe17 	ldw	r5,-8(fp)
  11938c:	e13ffb17 	ldw	r4,-20(fp)
  119390:	103ee83a 	callr	r2
  119394:	e0bffc15 	stw	r2,-16(fp)
  119398:	e0bffc17 	ldw	r2,-16(fp)
  11939c:	1000070e 	bge	r2,zero,1193bc <read+0xc0>
        {
          ALT_ERRNO = -rval;
  1193a0:	01192c00 	call	1192c0 <alt_get_errno>
  1193a4:	1007883a 	mov	r3,r2
  1193a8:	e0bffc17 	ldw	r2,-16(fp)
  1193ac:	0085c83a 	sub	r2,zero,r2
  1193b0:	18800015 	stw	r2,0(r3)
          return -1;
  1193b4:	00bfffc4 	movi	r2,-1
  1193b8:	00000c06 	br	1193ec <read+0xf0>
        }
        return rval;
  1193bc:	e0bffc17 	ldw	r2,-16(fp)
  1193c0:	00000a06 	br	1193ec <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
  1193c4:	01192c00 	call	1192c0 <alt_get_errno>
  1193c8:	1007883a 	mov	r3,r2
  1193cc:	00800344 	movi	r2,13
  1193d0:	18800015 	stw	r2,0(r3)
  1193d4:	00000406 	br	1193e8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  1193d8:	01192c00 	call	1192c0 <alt_get_errno>
  1193dc:	1007883a 	mov	r3,r2
  1193e0:	00801444 	movi	r2,81
  1193e4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  1193e8:	00bfffc4 	movi	r2,-1
}
  1193ec:	e037883a 	mov	sp,fp
  1193f0:	dfc00117 	ldw	ra,4(sp)
  1193f4:	df000017 	ldw	fp,0(sp)
  1193f8:	dec00204 	addi	sp,sp,8
  1193fc:	f800283a 	ret

00119400 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  119400:	defffc04 	addi	sp,sp,-16
  119404:	dfc00315 	stw	ra,12(sp)
  119408:	df000215 	stw	fp,8(sp)
  11940c:	dc000115 	stw	r16,4(sp)
  119410:	df000204 	addi	fp,sp,8
  119414:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
  119418:	e0bffe17 	ldw	r2,-8(fp)
  11941c:	108000d0 	cmplti	r2,r2,3
  119420:	1000111e 	bne	r2,zero,119468 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  119424:	040004b4 	movhi	r16,18
  119428:	8412b104 	addi	r16,r16,19140
  11942c:	e0bffe17 	ldw	r2,-8(fp)
  119430:	01400304 	movi	r5,12
  119434:	1009883a 	mov	r4,r2
  119438:	01160740 	call	116074 <__mulsi3>
  11943c:	8085883a 	add	r2,r16,r2
  119440:	10800204 	addi	r2,r2,8
  119444:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  119448:	040004b4 	movhi	r16,18
  11944c:	8412b104 	addi	r16,r16,19140
  119450:	e0bffe17 	ldw	r2,-8(fp)
  119454:	01400304 	movi	r5,12
  119458:	1009883a 	mov	r4,r2
  11945c:	01160740 	call	116074 <__mulsi3>
  119460:	8085883a 	add	r2,r16,r2
  119464:	10000015 	stw	zero,0(r2)
  }
}
  119468:	0001883a 	nop
  11946c:	e6ffff04 	addi	sp,fp,-4
  119470:	dfc00217 	ldw	ra,8(sp)
  119474:	df000117 	ldw	fp,4(sp)
  119478:	dc000017 	ldw	r16,0(sp)
  11947c:	dec00304 	addi	sp,sp,12
  119480:	f800283a 	ret

00119484 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  119484:	defff904 	addi	sp,sp,-28
  119488:	df000615 	stw	fp,24(sp)
  11948c:	df000604 	addi	fp,sp,24
  119490:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  119494:	0005303a 	rdctl	r2,status
  119498:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11949c:	e0fffe17 	ldw	r3,-8(fp)
  1194a0:	00bfff84 	movi	r2,-2
  1194a4:	1884703a 	and	r2,r3,r2
  1194a8:	1001703a 	wrctl	status,r2
  
  return context;
  1194ac:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  1194b0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  1194b4:	d0a00e17 	ldw	r2,-32712(gp)
  1194b8:	10c000c4 	addi	r3,r2,3
  1194bc:	00bfff04 	movi	r2,-4
  1194c0:	1884703a 	and	r2,r3,r2
  1194c4:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  1194c8:	d0e00e17 	ldw	r3,-32712(gp)
  1194cc:	e0bfff17 	ldw	r2,-4(fp)
  1194d0:	1887883a 	add	r3,r3,r2
  1194d4:	00800534 	movhi	r2,20
  1194d8:	10800004 	addi	r2,r2,0
  1194dc:	10c0062e 	bgeu	r2,r3,1194f8 <sbrk+0x74>
  1194e0:	e0bffb17 	ldw	r2,-20(fp)
  1194e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1194e8:	e0bffa17 	ldw	r2,-24(fp)
  1194ec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  1194f0:	00bfffc4 	movi	r2,-1
  1194f4:	00000b06 	br	119524 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  1194f8:	d0a00e17 	ldw	r2,-32712(gp)
  1194fc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  119500:	d0e00e17 	ldw	r3,-32712(gp)
  119504:	e0bfff17 	ldw	r2,-4(fp)
  119508:	1885883a 	add	r2,r3,r2
  11950c:	d0a00e15 	stw	r2,-32712(gp)
  119510:	e0bffb17 	ldw	r2,-20(fp)
  119514:	e0bffc15 	stw	r2,-16(fp)
  119518:	e0bffc17 	ldw	r2,-16(fp)
  11951c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  119520:	e0bffd17 	ldw	r2,-12(fp)
} 
  119524:	e037883a 	mov	sp,fp
  119528:	df000017 	ldw	fp,0(sp)
  11952c:	dec00104 	addi	sp,sp,4
  119530:	f800283a 	ret

00119534 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  119534:	defffe04 	addi	sp,sp,-8
  119538:	dfc00115 	stw	ra,4(sp)
  11953c:	df000015 	stw	fp,0(sp)
  119540:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  119544:	d0a00d17 	ldw	r2,-32716(gp)
  119548:	10000326 	beq	r2,zero,119558 <alt_get_errno+0x24>
  11954c:	d0a00d17 	ldw	r2,-32716(gp)
  119550:	103ee83a 	callr	r2
  119554:	00000106 	br	11955c <alt_get_errno+0x28>
  119558:	d0a72d04 	addi	r2,gp,-25420
}
  11955c:	e037883a 	mov	sp,fp
  119560:	dfc00117 	ldw	ra,4(sp)
  119564:	df000017 	ldw	fp,0(sp)
  119568:	dec00204 	addi	sp,sp,8
  11956c:	f800283a 	ret

00119570 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  119570:	defff904 	addi	sp,sp,-28
  119574:	dfc00615 	stw	ra,24(sp)
  119578:	df000515 	stw	fp,20(sp)
  11957c:	df000504 	addi	fp,sp,20
  119580:	e13ffd15 	stw	r4,-12(fp)
  119584:	e17ffe15 	stw	r5,-8(fp)
  119588:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  11958c:	e0bffd17 	ldw	r2,-12(fp)
  119590:	10000816 	blt	r2,zero,1195b4 <write+0x44>
  119594:	01400304 	movi	r5,12
  119598:	e13ffd17 	ldw	r4,-12(fp)
  11959c:	01160740 	call	116074 <__mulsi3>
  1195a0:	1007883a 	mov	r3,r2
  1195a4:	008004b4 	movhi	r2,18
  1195a8:	1092b104 	addi	r2,r2,19140
  1195ac:	1885883a 	add	r2,r3,r2
  1195b0:	00000106 	br	1195b8 <write+0x48>
  1195b4:	0005883a 	mov	r2,zero
  1195b8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  1195bc:	e0bffb17 	ldw	r2,-20(fp)
  1195c0:	10002126 	beq	r2,zero,119648 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  1195c4:	e0bffb17 	ldw	r2,-20(fp)
  1195c8:	10800217 	ldw	r2,8(r2)
  1195cc:	108000cc 	andi	r2,r2,3
  1195d0:	10001826 	beq	r2,zero,119634 <write+0xc4>
  1195d4:	e0bffb17 	ldw	r2,-20(fp)
  1195d8:	10800017 	ldw	r2,0(r2)
  1195dc:	10800617 	ldw	r2,24(r2)
  1195e0:	10001426 	beq	r2,zero,119634 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  1195e4:	e0bffb17 	ldw	r2,-20(fp)
  1195e8:	10800017 	ldw	r2,0(r2)
  1195ec:	10800617 	ldw	r2,24(r2)
  1195f0:	e0ffff17 	ldw	r3,-4(fp)
  1195f4:	180d883a 	mov	r6,r3
  1195f8:	e17ffe17 	ldw	r5,-8(fp)
  1195fc:	e13ffb17 	ldw	r4,-20(fp)
  119600:	103ee83a 	callr	r2
  119604:	e0bffc15 	stw	r2,-16(fp)
  119608:	e0bffc17 	ldw	r2,-16(fp)
  11960c:	1000070e 	bge	r2,zero,11962c <write+0xbc>
      {
        ALT_ERRNO = -rval;
  119610:	01195340 	call	119534 <alt_get_errno>
  119614:	1007883a 	mov	r3,r2
  119618:	e0bffc17 	ldw	r2,-16(fp)
  11961c:	0085c83a 	sub	r2,zero,r2
  119620:	18800015 	stw	r2,0(r3)
        return -1;
  119624:	00bfffc4 	movi	r2,-1
  119628:	00000c06 	br	11965c <write+0xec>
      }
      return rval;
  11962c:	e0bffc17 	ldw	r2,-16(fp)
  119630:	00000a06 	br	11965c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
  119634:	01195340 	call	119534 <alt_get_errno>
  119638:	1007883a 	mov	r3,r2
  11963c:	00800344 	movi	r2,13
  119640:	18800015 	stw	r2,0(r3)
  119644:	00000406 	br	119658 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  119648:	01195340 	call	119534 <alt_get_errno>
  11964c:	1007883a 	mov	r3,r2
  119650:	00801444 	movi	r2,81
  119654:	18800015 	stw	r2,0(r3)
  }
  return -1;
  119658:	00bfffc4 	movi	r2,-1
}
  11965c:	e037883a 	mov	sp,fp
  119660:	dfc00117 	ldw	ra,4(sp)
  119664:	df000017 	ldw	fp,0(sp)
  119668:	dec00204 	addi	sp,sp,8
  11966c:	f800283a 	ret

00119670 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  119670:	deffdf04 	addi	sp,sp,-132
  119674:	dfc02015 	stw	ra,128(sp)
  119678:	df001f15 	stw	fp,124(sp)
  11967c:	df001f04 	addi	fp,sp,124
  119680:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  119684:	e0bfe204 	addi	r2,fp,-120
  119688:	100b883a 	mov	r5,r2
  11968c:	01003fc4 	movi	r4,255
  119690:	0120ad40 	call	120ad4 <OSTaskQuery>
  119694:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  119698:	e0bffe83 	ldbu	r2,-6(fp)
  11969c:	10803fcc 	andi	r2,r2,255
  1196a0:	10001e1e 	bne	r2,zero,11971c <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
  1196a4:	e0bfee83 	ldbu	r2,-70(fp)
  1196a8:	10803fcc 	andi	r2,r2,255
  1196ac:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  1196b0:	d0a73617 	ldw	r2,-25384(gp)
  1196b4:	e0fffd04 	addi	r3,fp,-12
  1196b8:	180b883a 	mov	r5,r3
  1196bc:	1009883a 	mov	r4,r2
  1196c0:	011f2ec0 	call	11f2ec <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  1196c4:	e0bffe43 	ldbu	r2,-7(fp)
  1196c8:	10803fcc 	andi	r2,r2,255
  1196cc:	10000726 	beq	r2,zero,1196ec <__env_lock+0x7c>
  1196d0:	d0a00f17 	ldw	r2,-32708(gp)
  1196d4:	e0ffe117 	ldw	r3,-124(fp)
  1196d8:	1880041e 	bne	r3,r2,1196ec <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
  1196dc:	d0a73517 	ldw	r2,-25388(gp)
  1196e0:	10800044 	addi	r2,r2,1
  1196e4:	d0a73515 	stw	r2,-25388(gp)
  1196e8:	00000a06 	br	119714 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  1196ec:	d0a73617 	ldw	r2,-25384(gp)
  1196f0:	e0fffe84 	addi	r3,fp,-6
  1196f4:	180d883a 	mov	r6,r3
  1196f8:	000b883a 	mov	r5,zero
  1196fc:	1009883a 	mov	r4,r2
  119700:	011ee640 	call	11ee64 <OSSemPend>
    locks  = 1;
  119704:	00800044 	movi	r2,1
  119708:	d0a73515 	stw	r2,-25388(gp)
    lockid = id;
  11970c:	e0bfe117 	ldw	r2,-124(fp)
  119710:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
  119714:	0001883a 	nop
  119718:	00000106 	br	119720 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
  11971c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  119720:	e037883a 	mov	sp,fp
  119724:	dfc00117 	ldw	ra,4(sp)
  119728:	df000017 	ldw	fp,0(sp)
  11972c:	dec00204 	addi	sp,sp,8
  119730:	f800283a 	ret

00119734 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  119734:	defffd04 	addi	sp,sp,-12
  119738:	dfc00215 	stw	ra,8(sp)
  11973c:	df000115 	stw	fp,4(sp)
  119740:	df000104 	addi	fp,sp,4
  119744:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  119748:	d0a73517 	ldw	r2,-25388(gp)
  11974c:	10000b26 	beq	r2,zero,11977c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  119750:	d0a73517 	ldw	r2,-25388(gp)
  119754:	10bfffc4 	addi	r2,r2,-1
  119758:	d0a73515 	stw	r2,-25388(gp)
  11975c:	d0a73517 	ldw	r2,-25388(gp)
  119760:	1000071e 	bne	r2,zero,119780 <__env_unlock+0x4c>
  {
    lockid = -1;
  119764:	00bfffc4 	movi	r2,-1
  119768:	d0a00f15 	stw	r2,-32708(gp)
    OSSemPost( alt_envsem );
  11976c:	d0a73617 	ldw	r2,-25384(gp)
  119770:	1009883a 	mov	r4,r2
  119774:	011f1dc0 	call	11f1dc <OSSemPost>
  119778:	00000106 	br	119780 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
  11977c:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  119780:	e037883a 	mov	sp,fp
  119784:	dfc00117 	ldw	ra,4(sp)
  119788:	df000017 	ldw	fp,0(sp)
  11978c:	dec00204 	addi	sp,sp,8
  119790:	f800283a 	ret

00119794 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  119794:	deffdb04 	addi	sp,sp,-148
  119798:	dfc02415 	stw	ra,144(sp)
  11979c:	df002315 	stw	fp,140(sp)
  1197a0:	df002304 	addi	fp,sp,140
  1197a4:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  1197a8:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  1197ac:	d0a73943 	ldbu	r2,-25371(gp)
  1197b0:	10803fcc 	andi	r2,r2,255
  1197b4:	10800060 	cmpeqi	r2,r2,1
  1197b8:	10003626 	beq	r2,zero,119894 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  1197bc:	e0bfe204 	addi	r2,fp,-120
  1197c0:	100b883a 	mov	r5,r2
  1197c4:	01003fc4 	movi	r4,255
  1197c8:	0120ad40 	call	120ad4 <OSTaskQuery>
  1197cc:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  1197d0:	e0bffe83 	ldbu	r2,-6(fp)
  1197d4:	10803fcc 	andi	r2,r2,255
  1197d8:	1000301e 	bne	r2,zero,11989c <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
  1197dc:	e0bfee83 	ldbu	r2,-70(fp)
  1197e0:	10803fcc 	andi	r2,r2,255
  1197e4:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  1197e8:	d0a73817 	ldw	r2,-25376(gp)
  1197ec:	e0fffd04 	addi	r3,fp,-12
  1197f0:	180b883a 	mov	r5,r3
  1197f4:	1009883a 	mov	r4,r2
  1197f8:	011f2ec0 	call	11f2ec <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  1197fc:	0005303a 	rdctl	r2,status
  119800:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  119804:	e0ffe117 	ldw	r3,-124(fp)
  119808:	00bfff84 	movi	r2,-2
  11980c:	1884703a 	and	r2,r3,r2
  119810:	1001703a 	wrctl	status,r2
  
  return context;
  119814:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
  119818:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
  11981c:	e0bffd0b 	ldhu	r2,-12(fp)
  119820:	10bfffcc 	andi	r2,r2,65535
  119824:	10000b1e 	bne	r2,zero,119854 <__malloc_lock+0xc0>
  119828:	d0a01017 	ldw	r2,-32704(gp)
  11982c:	e0ffde17 	ldw	r3,-136(fp)
  119830:	1880081e 	bne	r3,r2,119854 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
  119834:	d0a73717 	ldw	r2,-25380(gp)
  119838:	10800044 	addi	r2,r2,1
  11983c:	d0a73715 	stw	r2,-25380(gp)
  119840:	e0bfdd17 	ldw	r2,-140(fp)
  119844:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  119848:	e0bfdf17 	ldw	r2,-132(fp)
  11984c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
  119850:	00000e06 	br	11988c <__malloc_lock+0xf8>
  119854:	e0bfdd17 	ldw	r2,-140(fp)
  119858:	e0bfe015 	stw	r2,-128(fp)
  11985c:	e0bfe017 	ldw	r2,-128(fp)
  119860:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  119864:	d0a73817 	ldw	r2,-25376(gp)
  119868:	e0fffe84 	addi	r3,fp,-6
  11986c:	180d883a 	mov	r6,r3
  119870:	000b883a 	mov	r5,zero
  119874:	1009883a 	mov	r4,r2
  119878:	011ee640 	call	11ee64 <OSSemPend>
    locks  = 1;
  11987c:	00800044 	movi	r2,1
  119880:	d0a73715 	stw	r2,-25380(gp)
    lockid = id;
  119884:	e0bfde17 	ldw	r2,-136(fp)
  119888:	d0a01015 	stw	r2,-32704(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
  11988c:	0001883a 	nop
  119890:	00000306 	br	1198a0 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
  119894:	0001883a 	nop
  119898:	00000106 	br	1198a0 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
  11989c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  1198a0:	e037883a 	mov	sp,fp
  1198a4:	dfc00117 	ldw	ra,4(sp)
  1198a8:	df000017 	ldw	fp,0(sp)
  1198ac:	dec00204 	addi	sp,sp,8
  1198b0:	f800283a 	ret

001198b4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  1198b4:	defff804 	addi	sp,sp,-32
  1198b8:	dfc00715 	stw	ra,28(sp)
  1198bc:	df000615 	stw	fp,24(sp)
  1198c0:	df000604 	addi	fp,sp,24
  1198c4:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  1198c8:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
  1198cc:	d0a73943 	ldbu	r2,-25371(gp)
  1198d0:	10803fcc 	andi	r2,r2,255
  1198d4:	10800060 	cmpeqi	r2,r2,1
  1198d8:	10002326 	beq	r2,zero,119968 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  1198dc:	0005303a 	rdctl	r2,status
  1198e0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1198e4:	e0fffe17 	ldw	r3,-8(fp)
  1198e8:	00bfff84 	movi	r2,-2
  1198ec:	1884703a 	and	r2,r3,r2
  1198f0:	1001703a 	wrctl	status,r2
  
  return context;
  1198f4:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
  1198f8:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
  1198fc:	d0a73717 	ldw	r2,-25380(gp)
  119900:	1000051e 	bne	r2,zero,119918 <__malloc_unlock+0x64>
  119904:	e0bffa17 	ldw	r2,-24(fp)
  119908:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11990c:	e0bffb17 	ldw	r2,-20(fp)
  119910:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  119914:	00001506 	br	11996c <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  119918:	d0a73717 	ldw	r2,-25380(gp)
  11991c:	10bfffc4 	addi	r2,r2,-1
  119920:	d0a73715 	stw	r2,-25380(gp)
  119924:	d0a73717 	ldw	r2,-25380(gp)
  119928:	10000a1e 	bne	r2,zero,119954 <__malloc_unlock+0xa0>
  {
    lockid = -1;
  11992c:	00bfffc4 	movi	r2,-1
  119930:	d0a01015 	stw	r2,-32704(gp)
  119934:	e0bffa17 	ldw	r2,-24(fp)
  119938:	e0bffc15 	stw	r2,-16(fp)
  11993c:	e0bffc17 	ldw	r2,-16(fp)
  119940:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  119944:	d0a73817 	ldw	r2,-25376(gp)
  119948:	1009883a 	mov	r4,r2
  11994c:	011f1dc0 	call	11f1dc <OSSemPost>
  119950:	00000606 	br	11996c <__malloc_unlock+0xb8>
  119954:	e0bffa17 	ldw	r2,-24(fp)
  119958:	e0bffd15 	stw	r2,-12(fp)
  11995c:	e0bffd17 	ldw	r2,-12(fp)
  119960:	1001703a 	wrctl	status,r2
  119964:	00000106 	br	11996c <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
  119968:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  11996c:	e037883a 	mov	sp,fp
  119970:	dfc00117 	ldw	ra,4(sp)
  119974:	df000017 	ldw	fp,0(sp)
  119978:	dec00204 	addi	sp,sp,8
  11997c:	f800283a 	ret

00119980 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  119980:	defff704 	addi	sp,sp,-36
  119984:	dfc00815 	stw	ra,32(sp)
  119988:	df000715 	stw	fp,28(sp)
  11998c:	df000704 	addi	fp,sp,28
  119990:	e13ffd15 	stw	r4,-12(fp)
  119994:	e17ffe15 	stw	r5,-8(fp)
  119998:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  11999c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  1199a0:	e0bfff17 	ldw	r2,-4(fp)
  1199a4:	1000021e 	bne	r2,zero,1199b0 <OSEventNameGet+0x30>
        return (0);
  1199a8:	0005883a 	mov	r2,zero
  1199ac:	00003706 	br	119a8c <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  1199b0:	e0bffd17 	ldw	r2,-12(fp)
  1199b4:	1000051e 	bne	r2,zero,1199cc <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  1199b8:	e0bfff17 	ldw	r2,-4(fp)
  1199bc:	00c00104 	movi	r3,4
  1199c0:	10c00005 	stb	r3,0(r2)
        return (0);
  1199c4:	0005883a 	mov	r2,zero
  1199c8:	00003006 	br	119a8c <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  1199cc:	e0bffe17 	ldw	r2,-8(fp)
  1199d0:	1000051e 	bne	r2,zero,1199e8 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  1199d4:	e0bfff17 	ldw	r2,-4(fp)
  1199d8:	00c00304 	movi	r3,12
  1199dc:	10c00005 	stb	r3,0(r2)
        return (0);
  1199e0:	0005883a 	mov	r2,zero
  1199e4:	00002906 	br	119a8c <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  1199e8:	d0a74703 	ldbu	r2,-25316(gp)
  1199ec:	10803fcc 	andi	r2,r2,255
  1199f0:	10000526 	beq	r2,zero,119a08 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
  1199f4:	e0bfff17 	ldw	r2,-4(fp)
  1199f8:	00c00444 	movi	r3,17
  1199fc:	10c00005 	stb	r3,0(r2)
        return (0);
  119a00:	0005883a 	mov	r2,zero
  119a04:	00002106 	br	119a8c <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
  119a08:	e0bffd17 	ldw	r2,-12(fp)
  119a0c:	10800003 	ldbu	r2,0(r2)
  119a10:	10803fcc 	andi	r2,r2,255
  119a14:	10bfffc4 	addi	r2,r2,-1
  119a18:	10800128 	cmpgeui	r2,r2,4
  119a1c:	10000526 	beq	r2,zero,119a34 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  119a20:	e0bfff17 	ldw	r2,-4(fp)
  119a24:	00c00044 	movi	r3,1
  119a28:	10c00005 	stb	r3,0(r2)
             return (0);
  119a2c:	0005883a 	mov	r2,zero
  119a30:	00001606 	br	119a8c <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
  119a34:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  119a38:	0005303a 	rdctl	r2,status
  119a3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  119a40:	e0fffb17 	ldw	r3,-20(fp)
  119a44:	00bfff84 	movi	r2,-2
  119a48:	1884703a 	and	r2,r3,r2
  119a4c:	1001703a 	wrctl	status,r2
  
  return context;
  119a50:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  119a54:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  119a58:	e0bffd17 	ldw	r2,-12(fp)
  119a5c:	10800384 	addi	r2,r2,14
  119a60:	100b883a 	mov	r5,r2
  119a64:	e13ffe17 	ldw	r4,-8(fp)
  119a68:	011b4040 	call	11b404 <OS_StrCopy>
  119a6c:	e0bffa05 	stb	r2,-24(fp)
  119a70:	e0bff917 	ldw	r2,-28(fp)
  119a74:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  119a78:	e0bffc17 	ldw	r2,-16(fp)
  119a7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  119a80:	e0bfff17 	ldw	r2,-4(fp)
  119a84:	10000005 	stb	zero,0(r2)
    return (len);
  119a88:	e0bffa03 	ldbu	r2,-24(fp)
}
  119a8c:	e037883a 	mov	sp,fp
  119a90:	dfc00117 	ldw	ra,4(sp)
  119a94:	df000017 	ldw	fp,0(sp)
  119a98:	dec00204 	addi	sp,sp,8
  119a9c:	f800283a 	ret

00119aa0 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  119aa0:	defff604 	addi	sp,sp,-40
  119aa4:	dfc00915 	stw	ra,36(sp)
  119aa8:	df000815 	stw	fp,32(sp)
  119aac:	df000804 	addi	fp,sp,32
  119ab0:	e13ffd15 	stw	r4,-12(fp)
  119ab4:	e17ffe15 	stw	r5,-8(fp)
  119ab8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  119abc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  119ac0:	e0bfff17 	ldw	r2,-4(fp)
  119ac4:	10004026 	beq	r2,zero,119bc8 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  119ac8:	e0bffd17 	ldw	r2,-12(fp)
  119acc:	1000041e 	bne	r2,zero,119ae0 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
  119ad0:	e0bfff17 	ldw	r2,-4(fp)
  119ad4:	00c00104 	movi	r3,4
  119ad8:	10c00005 	stb	r3,0(r2)
        return;
  119adc:	00003b06 	br	119bcc <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  119ae0:	e0bffe17 	ldw	r2,-8(fp)
  119ae4:	1000041e 	bne	r2,zero,119af8 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  119ae8:	e0bfff17 	ldw	r2,-4(fp)
  119aec:	00c00304 	movi	r3,12
  119af0:	10c00005 	stb	r3,0(r2)
        return;
  119af4:	00003506 	br	119bcc <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  119af8:	d0a74703 	ldbu	r2,-25316(gp)
  119afc:	10803fcc 	andi	r2,r2,255
  119b00:	10000426 	beq	r2,zero,119b14 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  119b04:	e0bfff17 	ldw	r2,-4(fp)
  119b08:	00c00484 	movi	r3,18
  119b0c:	10c00005 	stb	r3,0(r2)
        return;
  119b10:	00002e06 	br	119bcc <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
  119b14:	e0bffd17 	ldw	r2,-12(fp)
  119b18:	10800003 	ldbu	r2,0(r2)
  119b1c:	10803fcc 	andi	r2,r2,255
  119b20:	10bfffc4 	addi	r2,r2,-1
  119b24:	10800128 	cmpgeui	r2,r2,4
  119b28:	10000426 	beq	r2,zero,119b3c <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  119b2c:	e0bfff17 	ldw	r2,-4(fp)
  119b30:	00c00044 	movi	r3,1
  119b34:	10c00005 	stb	r3,0(r2)
             return;
  119b38:	00002406 	br	119bcc <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
  119b3c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  119b40:	0005303a 	rdctl	r2,status
  119b44:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  119b48:	e0fffc17 	ldw	r3,-16(fp)
  119b4c:	00bfff84 	movi	r2,-2
  119b50:	1884703a 	and	r2,r3,r2
  119b54:	1001703a 	wrctl	status,r2
  
  return context;
  119b58:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  119b5c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  119b60:	e13ffe17 	ldw	r4,-8(fp)
  119b64:	011b4780 	call	11b478 <OS_StrLen>
  119b68:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  119b6c:	e0bffa03 	ldbu	r2,-24(fp)
  119b70:	10800830 	cmpltui	r2,r2,32
  119b74:	1000081e 	bne	r2,zero,119b98 <OSEventNameSet+0xf8>
  119b78:	e0bff817 	ldw	r2,-32(fp)
  119b7c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  119b80:	e0bff917 	ldw	r2,-28(fp)
  119b84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  119b88:	e0bfff17 	ldw	r2,-4(fp)
  119b8c:	00c002c4 	movi	r3,11
  119b90:	10c00005 	stb	r3,0(r2)
        return;
  119b94:	00000d06 	br	119bcc <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  119b98:	e0bffd17 	ldw	r2,-12(fp)
  119b9c:	10800384 	addi	r2,r2,14
  119ba0:	e17ffe17 	ldw	r5,-8(fp)
  119ba4:	1009883a 	mov	r4,r2
  119ba8:	011b4040 	call	11b404 <OS_StrCopy>
  119bac:	e0bff817 	ldw	r2,-32(fp)
  119bb0:	e0bffb15 	stw	r2,-20(fp)
  119bb4:	e0bffb17 	ldw	r2,-20(fp)
  119bb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  119bbc:	e0bfff17 	ldw	r2,-4(fp)
  119bc0:	10000005 	stb	zero,0(r2)
  119bc4:	00000106 	br	119bcc <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  119bc8:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  119bcc:	e037883a 	mov	sp,fp
  119bd0:	dfc00117 	ldw	ra,4(sp)
  119bd4:	df000017 	ldw	fp,0(sp)
  119bd8:	dec00204 	addi	sp,sp,8
  119bdc:	f800283a 	ret

00119be0 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  119be0:	deffed04 	addi	sp,sp,-76
  119be4:	dfc01215 	stw	ra,72(sp)
  119be8:	df001115 	stw	fp,68(sp)
  119bec:	df001104 	addi	fp,sp,68
  119bf0:	e13ffc15 	stw	r4,-16(fp)
  119bf4:	e17ffd15 	stw	r5,-12(fp)
  119bf8:	e1bffe15 	stw	r6,-8(fp)
  119bfc:	3805883a 	mov	r2,r7
  119c00:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  119c04:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  119c08:	e0800217 	ldw	r2,8(fp)
  119c0c:	1000021e 	bne	r2,zero,119c18 <OSEventPendMulti+0x38>
        return (0);
  119c10:	0005883a 	mov	r2,zero
  119c14:	00017106 	br	11a1dc <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  119c18:	e0bffc17 	ldw	r2,-16(fp)
  119c1c:	1000051e 	bne	r2,zero,119c34 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
  119c20:	e0800217 	ldw	r2,8(fp)
  119c24:	00c00104 	movi	r3,4
  119c28:	10c00005 	stb	r3,0(r2)
        return (0);
  119c2c:	0005883a 	mov	r2,zero
  119c30:	00016a06 	br	11a1dc <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  119c34:	e0bffd17 	ldw	r2,-12(fp)
  119c38:	1000051e 	bne	r2,zero,119c50 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
  119c3c:	e0800217 	ldw	r2,8(fp)
  119c40:	00c00104 	movi	r3,4
  119c44:	10c00005 	stb	r3,0(r2)
        return (0);
  119c48:	0005883a 	mov	r2,zero
  119c4c:	00016306 	br	11a1dc <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  119c50:	e0bffe17 	ldw	r2,-8(fp)
  119c54:	1000051e 	bne	r2,zero,119c6c <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
  119c58:	e0800217 	ldw	r2,8(fp)
  119c5c:	00c00104 	movi	r3,4
  119c60:	10c00005 	stb	r3,0(r2)
        return (0);
  119c64:	0005883a 	mov	r2,zero
  119c68:	00015c06 	br	11a1dc <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  119c6c:	e0bffd17 	ldw	r2,-12(fp)
  119c70:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  119c74:	e0bffc17 	ldw	r2,-16(fp)
  119c78:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
  119c7c:	e0bfef17 	ldw	r2,-68(fp)
  119c80:	10800017 	ldw	r2,0(r2)
  119c84:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
  119c88:	00001906 	br	119cf0 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  119c8c:	e0bff017 	ldw	r2,-64(fp)
  119c90:	10800003 	ldbu	r2,0(r2)
  119c94:	10803fcc 	andi	r2,r2,255
  119c98:	10c000a0 	cmpeqi	r3,r2,2
  119c9c:	1800091e 	bne	r3,zero,119cc4 <OSEventPendMulti+0xe4>
  119ca0:	10c000e0 	cmpeqi	r3,r2,3
  119ca4:	1800091e 	bne	r3,zero,119ccc <OSEventPendMulti+0xec>
  119ca8:	10800060 	cmpeqi	r2,r2,1
  119cac:	1000091e 	bne	r2,zero,119cd4 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  119cb0:	e0800217 	ldw	r2,8(fp)
  119cb4:	00c00044 	movi	r3,1
  119cb8:	10c00005 	stb	r3,0(r2)
                 return (0);
  119cbc:	0005883a 	mov	r2,zero
  119cc0:	00014606 	br	11a1dc <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
  119cc4:	0001883a 	nop
  119cc8:	00000306 	br	119cd8 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
  119ccc:	0001883a 	nop
  119cd0:	00000106 	br	119cd8 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
  119cd4:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
  119cd8:	e0bfef17 	ldw	r2,-68(fp)
  119cdc:	10800104 	addi	r2,r2,4
  119ce0:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
  119ce4:	e0bfef17 	ldw	r2,-68(fp)
  119ce8:	10800017 	ldw	r2,0(r2)
  119cec:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  119cf0:	e0bff017 	ldw	r2,-64(fp)
  119cf4:	103fe51e 	bne	r2,zero,119c8c <__alt_data_end+0xfffd9c8c>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  119cf8:	d0a74703 	ldbu	r2,-25316(gp)
  119cfc:	10803fcc 	andi	r2,r2,255
  119d00:	10000526 	beq	r2,zero,119d18 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  119d04:	e0800217 	ldw	r2,8(fp)
  119d08:	00c00084 	movi	r3,2
  119d0c:	10c00005 	stb	r3,0(r2)
        return (0);
  119d10:	0005883a 	mov	r2,zero
  119d14:	00013106 	br	11a1dc <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  119d18:	d0a73903 	ldbu	r2,-25372(gp)
  119d1c:	10803fcc 	andi	r2,r2,255
  119d20:	10000526 	beq	r2,zero,119d38 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  119d24:	e0800217 	ldw	r2,8(fp)
  119d28:	00c00344 	movi	r3,13
  119d2c:	10c00005 	stb	r3,0(r2)
        return (0);
  119d30:	0005883a 	mov	r2,zero
  119d34:	00012906 	br	11a1dc <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  119d38:	0005303a 	rdctl	r2,status
  119d3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  119d40:	e0fffb17 	ldw	r3,-20(fp)
  119d44:	00bfff84 	movi	r2,-2
  119d48:	1884703a 	and	r2,r3,r2
  119d4c:	1001703a 	wrctl	status,r2
  
  return context;
  119d50:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  119d54:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
  119d58:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
  119d5c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  119d60:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
  119d64:	e0bffc17 	ldw	r2,-16(fp)
  119d68:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
  119d6c:	e0bfef17 	ldw	r2,-68(fp)
  119d70:	10800017 	ldw	r2,0(r2)
  119d74:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  119d78:	00008106 	br	119f80 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
  119d7c:	e0bff017 	ldw	r2,-64(fp)
  119d80:	10800003 	ldbu	r2,0(r2)
  119d84:	10803fcc 	andi	r2,r2,255
  119d88:	10c000a0 	cmpeqi	r3,r2,2
  119d8c:	18003c1e 	bne	r3,zero,119e80 <OSEventPendMulti+0x2a0>
  119d90:	10c000e0 	cmpeqi	r3,r2,3
  119d94:	1800031e 	bne	r3,zero,119da4 <OSEventPendMulti+0x1c4>
  119d98:	10800060 	cmpeqi	r2,r2,1
  119d9c:	10001e1e 	bne	r2,zero,119e18 <OSEventPendMulti+0x238>
  119da0:	00006606 	br	119f3c <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  119da4:	e0bff017 	ldw	r2,-64(fp)
  119da8:	1080020b 	ldhu	r2,8(r2)
  119dac:	10bfffcc 	andi	r2,r2,65535
  119db0:	10001526 	beq	r2,zero,119e08 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  119db4:	e0bff017 	ldw	r2,-64(fp)
  119db8:	1080020b 	ldhu	r2,8(r2)
  119dbc:	10bfffc4 	addi	r2,r2,-1
  119dc0:	1007883a 	mov	r3,r2
  119dc4:	e0bff017 	ldw	r2,-64(fp)
  119dc8:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  119dcc:	e0bffd17 	ldw	r2,-12(fp)
  119dd0:	10c00104 	addi	r3,r2,4
  119dd4:	e0fffd15 	stw	r3,-12(fp)
  119dd8:	e0fff017 	ldw	r3,-64(fp)
  119ddc:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
  119de0:	00800044 	movi	r2,1
  119de4:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  119de8:	e0bffe17 	ldw	r2,-8(fp)
  119dec:	10c00104 	addi	r3,r2,4
  119df0:	e0fffe15 	stw	r3,-8(fp)
  119df4:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
  119df8:	e0bff18b 	ldhu	r2,-58(fp)
  119dfc:	10800044 	addi	r2,r2,1
  119e00:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
  119e04:	00005806 	br	119f68 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  119e08:	e0bff203 	ldbu	r2,-56(fp)
  119e0c:	10800054 	ori	r2,r2,1
  119e10:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  119e14:	00005406 	br	119f68 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  119e18:	e0bff017 	ldw	r2,-64(fp)
  119e1c:	10800117 	ldw	r2,4(r2)
  119e20:	10001326 	beq	r2,zero,119e70 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  119e24:	e0bffe17 	ldw	r2,-8(fp)
  119e28:	10c00104 	addi	r3,r2,4
  119e2c:	e0fffe15 	stw	r3,-8(fp)
  119e30:	e0fff017 	ldw	r3,-64(fp)
  119e34:	18c00117 	ldw	r3,4(r3)
  119e38:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
  119e3c:	e0bff017 	ldw	r2,-64(fp)
  119e40:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  119e44:	e0bffd17 	ldw	r2,-12(fp)
  119e48:	10c00104 	addi	r3,r2,4
  119e4c:	e0fffd15 	stw	r3,-12(fp)
  119e50:	e0fff017 	ldw	r3,-64(fp)
  119e54:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
  119e58:	00800044 	movi	r2,1
  119e5c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
  119e60:	e0bff18b 	ldhu	r2,-58(fp)
  119e64:	10800044 	addi	r2,r2,1
  119e68:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
  119e6c:	00003e06 	br	119f68 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  119e70:	e0bff203 	ldbu	r2,-56(fp)
  119e74:	10800094 	ori	r2,r2,2
  119e78:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  119e7c:	00003a06 	br	119f68 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  119e80:	e0bff017 	ldw	r2,-64(fp)
  119e84:	10800117 	ldw	r2,4(r2)
  119e88:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  119e8c:	e0bff517 	ldw	r2,-44(fp)
  119e90:	1080058b 	ldhu	r2,22(r2)
  119e94:	10bfffcc 	andi	r2,r2,65535
  119e98:	10002426 	beq	r2,zero,119f2c <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  119e9c:	e0bffe17 	ldw	r2,-8(fp)
  119ea0:	10c00104 	addi	r3,r2,4
  119ea4:	e0fffe15 	stw	r3,-8(fp)
  119ea8:	e0fff517 	ldw	r3,-44(fp)
  119eac:	18c00417 	ldw	r3,16(r3)
  119eb0:	19400104 	addi	r5,r3,4
  119eb4:	e13ff517 	ldw	r4,-44(fp)
  119eb8:	21400415 	stw	r5,16(r4)
  119ebc:	18c00017 	ldw	r3,0(r3)
  119ec0:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  119ec4:	e0bff517 	ldw	r2,-44(fp)
  119ec8:	10c00417 	ldw	r3,16(r2)
  119ecc:	e0bff517 	ldw	r2,-44(fp)
  119ed0:	10800217 	ldw	r2,8(r2)
  119ed4:	1880041e 	bne	r3,r2,119ee8 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  119ed8:	e0bff517 	ldw	r2,-44(fp)
  119edc:	10c00117 	ldw	r3,4(r2)
  119ee0:	e0bff517 	ldw	r2,-44(fp)
  119ee4:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  119ee8:	e0bff517 	ldw	r2,-44(fp)
  119eec:	1080058b 	ldhu	r2,22(r2)
  119ef0:	10bfffc4 	addi	r2,r2,-1
  119ef4:	1007883a 	mov	r3,r2
  119ef8:	e0bff517 	ldw	r2,-44(fp)
  119efc:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  119f00:	e0bffd17 	ldw	r2,-12(fp)
  119f04:	10c00104 	addi	r3,r2,4
  119f08:	e0fffd15 	stw	r3,-12(fp)
  119f0c:	e0fff017 	ldw	r3,-64(fp)
  119f10:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
  119f14:	00800044 	movi	r2,1
  119f18:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
  119f1c:	e0bff18b 	ldhu	r2,-58(fp)
  119f20:	10800044 	addi	r2,r2,1
  119f24:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
  119f28:	00000f06 	br	119f68 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  119f2c:	e0bff203 	ldbu	r2,-56(fp)
  119f30:	10800114 	ori	r2,r2,4
  119f34:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  119f38:	00000b06 	br	119f68 <OSEventPendMulti+0x388>
  119f3c:	e0bff317 	ldw	r2,-52(fp)
  119f40:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  119f44:	e0bff417 	ldw	r2,-48(fp)
  119f48:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  119f4c:	e0bffd17 	ldw	r2,-12(fp)
  119f50:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  119f54:	e0800217 	ldw	r2,8(fp)
  119f58:	00c00044 	movi	r3,1
  119f5c:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
  119f60:	e0bff18b 	ldhu	r2,-58(fp)
  119f64:	00009d06 	br	11a1dc <OSEventPendMulti+0x5fc>
        }
        pevents++;
  119f68:	e0bfef17 	ldw	r2,-68(fp)
  119f6c:	10800104 	addi	r2,r2,4
  119f70:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
  119f74:	e0bfef17 	ldw	r2,-68(fp)
  119f78:	10800017 	ldw	r2,0(r2)
  119f7c:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  119f80:	e0bff017 	ldw	r2,-64(fp)
  119f84:	103f7d1e 	bne	r2,zero,119d7c <__alt_data_end+0xfffd9d7c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  119f88:	e0bff103 	ldbu	r2,-60(fp)
  119f8c:	10800058 	cmpnei	r2,r2,1
  119f90:	10000a1e 	bne	r2,zero,119fbc <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  119f94:	e0bffd17 	ldw	r2,-12(fp)
  119f98:	10000015 	stw	zero,0(r2)
  119f9c:	e0bff317 	ldw	r2,-52(fp)
  119fa0:	e0bff615 	stw	r2,-40(fp)
  119fa4:	e0bff617 	ldw	r2,-40(fp)
  119fa8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  119fac:	e0800217 	ldw	r2,8(fp)
  119fb0:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  119fb4:	e0bff18b 	ldhu	r2,-58(fp)
  119fb8:	00008806 	br	11a1dc <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  119fbc:	d0a74817 	ldw	r2,-25312(gp)
  119fc0:	d0e74817 	ldw	r3,-25312(gp)
  119fc4:	19000c03 	ldbu	r4,48(r3)
  119fc8:	e0fff203 	ldbu	r3,-56(fp)
  119fcc:	20c6b03a 	or	r3,r4,r3
  119fd0:	1809883a 	mov	r4,r3
  119fd4:	00ffe004 	movi	r3,-128
  119fd8:	20c6b03a 	or	r3,r4,r3
  119fdc:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  119fe0:	d0a74817 	ldw	r2,-25312(gp)
  119fe4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  119fe8:	d0a74817 	ldw	r2,-25312(gp)
  119fec:	e0ffff0b 	ldhu	r3,-4(fp)
  119ff0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  119ff4:	e13ffc17 	ldw	r4,-16(fp)
  119ff8:	011ab1c0 	call	11ab1c <OS_EventTaskWaitMulti>
  119ffc:	e0bff317 	ldw	r2,-52(fp)
  11a000:	e0bff915 	stw	r2,-28(fp)
  11a004:	e0bff917 	ldw	r2,-28(fp)
  11a008:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  11a00c:	011b2c00 	call	11b2c0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11a010:	0005303a 	rdctl	r2,status
  11a014:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11a018:	e0fff717 	ldw	r3,-36(fp)
  11a01c:	00bfff84 	movi	r2,-2
  11a020:	1884703a 	and	r2,r3,r2
  11a024:	1001703a 	wrctl	status,r2
  
  return context;
  11a028:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  11a02c:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  11a030:	d0a74817 	ldw	r2,-25312(gp)
  11a034:	10800c43 	ldbu	r2,49(r2)
  11a038:	10803fcc 	andi	r2,r2,255
  11a03c:	10000226 	beq	r2,zero,11a048 <OSEventPendMulti+0x468>
  11a040:	108000a0 	cmpeqi	r2,r2,2
  11a044:	10001826 	beq	r2,zero,11a0a8 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  11a048:	d0a74817 	ldw	r2,-25312(gp)
  11a04c:	10800717 	ldw	r2,28(r2)
  11a050:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  11a054:	e0bff017 	ldw	r2,-64(fp)
  11a058:	10000b26 	beq	r2,zero,11a088 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  11a05c:	e0bffd17 	ldw	r2,-12(fp)
  11a060:	10c00104 	addi	r3,r2,4
  11a064:	e0fffd15 	stw	r3,-12(fp)
  11a068:	e0fff017 	ldw	r3,-64(fp)
  11a06c:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  11a070:	e0bffd17 	ldw	r2,-12(fp)
  11a074:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  11a078:	e0bff18b 	ldhu	r2,-58(fp)
  11a07c:	10800044 	addi	r2,r2,1
  11a080:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
  11a084:	00000d06 	br	11a0bc <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  11a088:	d0a74817 	ldw	r2,-25312(gp)
  11a08c:	00c00044 	movi	r3,1
  11a090:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  11a094:	d0a74817 	ldw	r2,-25312(gp)
  11a098:	e17ffc17 	ldw	r5,-16(fp)
  11a09c:	1009883a 	mov	r4,r2
  11a0a0:	011ad240 	call	11ad24 <OS_EventTaskRemoveMulti>
             }
			 break;
  11a0a4:	00000506 	br	11a0bc <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  11a0a8:	d0a74817 	ldw	r2,-25312(gp)
  11a0ac:	e17ffc17 	ldw	r5,-16(fp)
  11a0b0:	1009883a 	mov	r4,r2
  11a0b4:	011ad240 	call	11ad24 <OS_EventTaskRemoveMulti>
             break;
  11a0b8:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
  11a0bc:	d0a74817 	ldw	r2,-25312(gp)
  11a0c0:	10800c43 	ldbu	r2,49(r2)
  11a0c4:	10803fcc 	andi	r2,r2,255
  11a0c8:	10000326 	beq	r2,zero,11a0d8 <OSEventPendMulti+0x4f8>
  11a0cc:	108000a0 	cmpeqi	r2,r2,2
  11a0d0:	1000231e 	bne	r2,zero,11a160 <OSEventPendMulti+0x580>
  11a0d4:	00002a06 	br	11a180 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  11a0d8:	e0bff017 	ldw	r2,-64(fp)
  11a0dc:	10800003 	ldbu	r2,0(r2)
  11a0e0:	10803fcc 	andi	r2,r2,255
  11a0e4:	0080100e 	bge	zero,r2,11a128 <OSEventPendMulti+0x548>
  11a0e8:	10c000d0 	cmplti	r3,r2,3
  11a0ec:	1800071e 	bne	r3,zero,11a10c <OSEventPendMulti+0x52c>
  11a0f0:	108000e0 	cmpeqi	r2,r2,3
  11a0f4:	10000c26 	beq	r2,zero,11a128 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  11a0f8:	e0bffe17 	ldw	r2,-8(fp)
  11a0fc:	10c00104 	addi	r3,r2,4
  11a100:	e0fffe15 	stw	r3,-8(fp)
  11a104:	10000015 	stw	zero,0(r2)
                      break;
  11a108:	00001206 	br	11a154 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  11a10c:	e0bffe17 	ldw	r2,-8(fp)
  11a110:	10c00104 	addi	r3,r2,4
  11a114:	e0fffe15 	stw	r3,-8(fp)
  11a118:	d0e74817 	ldw	r3,-25312(gp)
  11a11c:	18c00917 	ldw	r3,36(r3)
  11a120:	10c00015 	stw	r3,0(r2)
                      break;
  11a124:	00000b06 	br	11a154 <OSEventPendMulti+0x574>
  11a128:	e0bff317 	ldw	r2,-52(fp)
  11a12c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11a130:	e0bff817 	ldw	r2,-32(fp)
  11a134:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  11a138:	e0bffd17 	ldw	r2,-12(fp)
  11a13c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  11a140:	e0800217 	ldw	r2,8(fp)
  11a144:	00c00044 	movi	r3,1
  11a148:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
  11a14c:	e0bff18b 	ldhu	r2,-58(fp)
  11a150:	00002206 	br	11a1dc <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
  11a154:	e0800217 	ldw	r2,8(fp)
  11a158:	10000005 	stb	zero,0(r2)
             break;
  11a15c:	00001006 	br	11a1a0 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  11a160:	e0bffe17 	ldw	r2,-8(fp)
  11a164:	10c00104 	addi	r3,r2,4
  11a168:	e0fffe15 	stw	r3,-8(fp)
  11a16c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  11a170:	e0800217 	ldw	r2,8(fp)
  11a174:	00c00384 	movi	r3,14
  11a178:	10c00005 	stb	r3,0(r2)
             break;
  11a17c:	00000806 	br	11a1a0 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  11a180:	e0bffe17 	ldw	r2,-8(fp)
  11a184:	10c00104 	addi	r3,r2,4
  11a188:	e0fffe15 	stw	r3,-8(fp)
  11a18c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  11a190:	e0800217 	ldw	r2,8(fp)
  11a194:	00c00284 	movi	r3,10
  11a198:	10c00005 	stb	r3,0(r2)
             break;
  11a19c:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  11a1a0:	d0a74817 	ldw	r2,-25312(gp)
  11a1a4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  11a1a8:	d0a74817 	ldw	r2,-25312(gp)
  11a1ac:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  11a1b0:	d0a74817 	ldw	r2,-25312(gp)
  11a1b4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  11a1b8:	d0a74817 	ldw	r2,-25312(gp)
  11a1bc:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  11a1c0:	d0a74817 	ldw	r2,-25312(gp)
  11a1c4:	10000915 	stw	zero,36(r2)
  11a1c8:	e0bff317 	ldw	r2,-52(fp)
  11a1cc:	e0bffa15 	stw	r2,-24(fp)
  11a1d0:	e0bffa17 	ldw	r2,-24(fp)
  11a1d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  11a1d8:	e0bff18b 	ldhu	r2,-58(fp)
}
  11a1dc:	e037883a 	mov	sp,fp
  11a1e0:	dfc00117 	ldw	ra,4(sp)
  11a1e4:	df000017 	ldw	fp,0(sp)
  11a1e8:	dec00204 	addi	sp,sp,8
  11a1ec:	f800283a 	ret

0011a1f0 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  11a1f0:	defffe04 	addi	sp,sp,-8
  11a1f4:	dfc00115 	stw	ra,4(sp)
  11a1f8:	df000015 	stw	fp,0(sp)
  11a1fc:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  11a200:	0122e8c0 	call	122e8c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  11a204:	011af6c0 	call	11af6c <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  11a208:	011afb40 	call	11afb4 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  11a20c:	011b1200 	call	11b120 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  11a210:	011ae8c0 	call	11ae8c <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  11a214:	011cfc00 	call	11cfc0 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  11a218:	011d8c00 	call	11d8c0 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  11a21c:	011e9f40 	call	11e9f4 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  11a220:	011b0200 	call	11b020 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  11a224:	011b0a00 	call	11b0a0 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  11a228:	0122eac0 	call	122eac <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  11a22c:	011b9940 	call	11b994 <OSDebugInit>
#endif
}
  11a230:	0001883a 	nop
  11a234:	e037883a 	mov	sp,fp
  11a238:	dfc00117 	ldw	ra,4(sp)
  11a23c:	df000017 	ldw	fp,0(sp)
  11a240:	dec00204 	addi	sp,sp,8
  11a244:	f800283a 	ret

0011a248 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  11a248:	deffff04 	addi	sp,sp,-4
  11a24c:	df000015 	stw	fp,0(sp)
  11a250:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
  11a254:	d0a73943 	ldbu	r2,-25371(gp)
  11a258:	10803fcc 	andi	r2,r2,255
  11a25c:	10800058 	cmpnei	r2,r2,1
  11a260:	1000071e 	bne	r2,zero,11a280 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
  11a264:	d0a74703 	ldbu	r2,-25316(gp)
  11a268:	10803fcc 	andi	r2,r2,255
  11a26c:	10803fe0 	cmpeqi	r2,r2,255
  11a270:	1000031e 	bne	r2,zero,11a280 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  11a274:	d0a74703 	ldbu	r2,-25316(gp)
  11a278:	10800044 	addi	r2,r2,1
  11a27c:	d0a74705 	stb	r2,-25316(gp)
        }
    }
}
  11a280:	0001883a 	nop
  11a284:	e037883a 	mov	sp,fp
  11a288:	df000017 	ldw	fp,0(sp)
  11a28c:	dec00104 	addi	sp,sp,4
  11a290:	f800283a 	ret

0011a294 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  11a294:	defffb04 	addi	sp,sp,-20
  11a298:	dfc00415 	stw	ra,16(sp)
  11a29c:	df000315 	stw	fp,12(sp)
  11a2a0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  11a2a4:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
  11a2a8:	d0a73943 	ldbu	r2,-25371(gp)
  11a2ac:	10803fcc 	andi	r2,r2,255
  11a2b0:	10800058 	cmpnei	r2,r2,1
  11a2b4:	10002f1e 	bne	r2,zero,11a374 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11a2b8:	0005303a 	rdctl	r2,status
  11a2bc:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11a2c0:	e0ffff17 	ldw	r3,-4(fp)
  11a2c4:	00bfff84 	movi	r2,-2
  11a2c8:	1884703a 	and	r2,r3,r2
  11a2cc:	1001703a 	wrctl	status,r2
  
  return context;
  11a2d0:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  11a2d4:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  11a2d8:	d0a74703 	ldbu	r2,-25316(gp)
  11a2dc:	10803fcc 	andi	r2,r2,255
  11a2e0:	10000326 	beq	r2,zero,11a2f0 <OSIntExit+0x5c>
            OSIntNesting--;
  11a2e4:	d0a74703 	ldbu	r2,-25316(gp)
  11a2e8:	10bfffc4 	addi	r2,r2,-1
  11a2ec:	d0a74705 	stb	r2,-25316(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  11a2f0:	d0a74703 	ldbu	r2,-25316(gp)
  11a2f4:	10803fcc 	andi	r2,r2,255
  11a2f8:	10001a1e 	bne	r2,zero,11a364 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  11a2fc:	d0a73903 	ldbu	r2,-25372(gp)
  11a300:	10803fcc 	andi	r2,r2,255
  11a304:	1000171e 	bne	r2,zero,11a364 <OSIntExit+0xd0>
                OS_SchedNew();
  11a308:	011b3900 	call	11b390 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  11a30c:	d0e73b03 	ldbu	r3,-25364(gp)
  11a310:	d0a73b43 	ldbu	r2,-25363(gp)
  11a314:	18c03fcc 	andi	r3,r3,255
  11a318:	10803fcc 	andi	r2,r2,255
  11a31c:	18801126 	beq	r3,r2,11a364 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  11a320:	d0a73b03 	ldbu	r2,-25364(gp)
  11a324:	10c03fcc 	andi	r3,r2,255
  11a328:	008004f4 	movhi	r2,19
  11a32c:	10bb0204 	addi	r2,r2,-5112
  11a330:	18c7883a 	add	r3,r3,r3
  11a334:	18c7883a 	add	r3,r3,r3
  11a338:	10c5883a 	add	r2,r2,r3
  11a33c:	10800017 	ldw	r2,0(r2)
  11a340:	d0a74315 	stw	r2,-25332(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  11a344:	d0a74317 	ldw	r2,-25332(gp)
  11a348:	10c00e17 	ldw	r3,56(r2)
  11a34c:	18c00044 	addi	r3,r3,1
  11a350:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  11a354:	d0a73e17 	ldw	r2,-25352(gp)
  11a358:	10800044 	addi	r2,r2,1
  11a35c:	d0a73e15 	stw	r2,-25352(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  11a360:	0122bb80 	call	122bb8 <OSCtxSw>
  11a364:	e0bffd17 	ldw	r2,-12(fp)
  11a368:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11a36c:	e0bffe17 	ldw	r2,-8(fp)
  11a370:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  11a374:	0001883a 	nop
  11a378:	e037883a 	mov	sp,fp
  11a37c:	dfc00117 	ldw	ra,4(sp)
  11a380:	df000017 	ldw	fp,0(sp)
  11a384:	dec00204 	addi	sp,sp,8
  11a388:	f800283a 	ret

0011a38c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  11a38c:	defffc04 	addi	sp,sp,-16
  11a390:	df000315 	stw	fp,12(sp)
  11a394:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  11a398:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  11a39c:	d0a73943 	ldbu	r2,-25371(gp)
  11a3a0:	10803fcc 	andi	r2,r2,255
  11a3a4:	10800058 	cmpnei	r2,r2,1
  11a3a8:	1000161e 	bne	r2,zero,11a404 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11a3ac:	0005303a 	rdctl	r2,status
  11a3b0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11a3b4:	e0ffff17 	ldw	r3,-4(fp)
  11a3b8:	00bfff84 	movi	r2,-2
  11a3bc:	1884703a 	and	r2,r3,r2
  11a3c0:	1001703a 	wrctl	status,r2
  
  return context;
  11a3c4:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  11a3c8:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  11a3cc:	d0a74703 	ldbu	r2,-25316(gp)
  11a3d0:	10803fcc 	andi	r2,r2,255
  11a3d4:	1000071e 	bne	r2,zero,11a3f4 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  11a3d8:	d0a73903 	ldbu	r2,-25372(gp)
  11a3dc:	10803fcc 	andi	r2,r2,255
  11a3e0:	10803fe0 	cmpeqi	r2,r2,255
  11a3e4:	1000031e 	bne	r2,zero,11a3f4 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  11a3e8:	d0a73903 	ldbu	r2,-25372(gp)
  11a3ec:	10800044 	addi	r2,r2,1
  11a3f0:	d0a73905 	stb	r2,-25372(gp)
  11a3f4:	e0bffd17 	ldw	r2,-12(fp)
  11a3f8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11a3fc:	e0bffe17 	ldw	r2,-8(fp)
  11a400:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  11a404:	0001883a 	nop
  11a408:	e037883a 	mov	sp,fp
  11a40c:	df000017 	ldw	fp,0(sp)
  11a410:	dec00104 	addi	sp,sp,4
  11a414:	f800283a 	ret

0011a418 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  11a418:	defff804 	addi	sp,sp,-32
  11a41c:	dfc00715 	stw	ra,28(sp)
  11a420:	df000615 	stw	fp,24(sp)
  11a424:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  11a428:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  11a42c:	d0a73943 	ldbu	r2,-25371(gp)
  11a430:	10803fcc 	andi	r2,r2,255
  11a434:	10800058 	cmpnei	r2,r2,1
  11a438:	1000281e 	bne	r2,zero,11a4dc <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11a43c:	0005303a 	rdctl	r2,status
  11a440:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11a444:	e0ffff17 	ldw	r3,-4(fp)
  11a448:	00bfff84 	movi	r2,-2
  11a44c:	1884703a 	and	r2,r3,r2
  11a450:	1001703a 	wrctl	status,r2
  
  return context;
  11a454:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  11a458:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  11a45c:	d0a73903 	ldbu	r2,-25372(gp)
  11a460:	10803fcc 	andi	r2,r2,255
  11a464:	10001926 	beq	r2,zero,11a4cc <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  11a468:	d0a73903 	ldbu	r2,-25372(gp)
  11a46c:	10bfffc4 	addi	r2,r2,-1
  11a470:	d0a73905 	stb	r2,-25372(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  11a474:	d0a73903 	ldbu	r2,-25372(gp)
  11a478:	10803fcc 	andi	r2,r2,255
  11a47c:	10000e1e 	bne	r2,zero,11a4b8 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  11a480:	d0a74703 	ldbu	r2,-25316(gp)
  11a484:	10803fcc 	andi	r2,r2,255
  11a488:	1000061e 	bne	r2,zero,11a4a4 <OSSchedUnlock+0x8c>
  11a48c:	e0bffa17 	ldw	r2,-24(fp)
  11a490:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11a494:	e0bffb17 	ldw	r2,-20(fp)
  11a498:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  11a49c:	011b2c00 	call	11b2c0 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  11a4a0:	00000e06 	br	11a4dc <OSSchedUnlock+0xc4>
  11a4a4:	e0bffa17 	ldw	r2,-24(fp)
  11a4a8:	e0bffc15 	stw	r2,-16(fp)
  11a4ac:	e0bffc17 	ldw	r2,-16(fp)
  11a4b0:	1001703a 	wrctl	status,r2
  11a4b4:	00000906 	br	11a4dc <OSSchedUnlock+0xc4>
  11a4b8:	e0bffa17 	ldw	r2,-24(fp)
  11a4bc:	e0bffd15 	stw	r2,-12(fp)
  11a4c0:	e0bffd17 	ldw	r2,-12(fp)
  11a4c4:	1001703a 	wrctl	status,r2
  11a4c8:	00000406 	br	11a4dc <OSSchedUnlock+0xc4>
  11a4cc:	e0bffa17 	ldw	r2,-24(fp)
  11a4d0:	e0bffe15 	stw	r2,-8(fp)
  11a4d4:	e0bffe17 	ldw	r2,-8(fp)
  11a4d8:	1001703a 	wrctl	status,r2
  11a4dc:	0001883a 	nop
  11a4e0:	e037883a 	mov	sp,fp
  11a4e4:	dfc00117 	ldw	ra,4(sp)
  11a4e8:	df000017 	ldw	fp,0(sp)
  11a4ec:	dec00204 	addi	sp,sp,8
  11a4f0:	f800283a 	ret

0011a4f4 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  11a4f4:	defffe04 	addi	sp,sp,-8
  11a4f8:	dfc00115 	stw	ra,4(sp)
  11a4fc:	df000015 	stw	fp,0(sp)
  11a500:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  11a504:	d0a73943 	ldbu	r2,-25371(gp)
  11a508:	10803fcc 	andi	r2,r2,255
  11a50c:	10000f1e 	bne	r2,zero,11a54c <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  11a510:	011b3900 	call	11b390 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  11a514:	d0a73b03 	ldbu	r2,-25364(gp)
  11a518:	d0a73b45 	stb	r2,-25363(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  11a51c:	d0a73b03 	ldbu	r2,-25364(gp)
  11a520:	10c03fcc 	andi	r3,r2,255
  11a524:	008004f4 	movhi	r2,19
  11a528:	10bb0204 	addi	r2,r2,-5112
  11a52c:	18c7883a 	add	r3,r3,r3
  11a530:	18c7883a 	add	r3,r3,r3
  11a534:	10c5883a 	add	r2,r2,r3
  11a538:	10800017 	ldw	r2,0(r2)
  11a53c:	d0a74315 	stw	r2,-25332(gp)
        OSTCBCur      = OSTCBHighRdy;
  11a540:	d0a74317 	ldw	r2,-25332(gp)
  11a544:	d0a74815 	stw	r2,-25312(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  11a548:	0122c440 	call	122c44 <OSStartHighRdy>
    }
}
  11a54c:	0001883a 	nop
  11a550:	e037883a 	mov	sp,fp
  11a554:	dfc00117 	ldw	ra,4(sp)
  11a558:	df000017 	ldw	fp,0(sp)
  11a55c:	dec00204 	addi	sp,sp,8
  11a560:	f800283a 	ret

0011a564 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  11a564:	defff904 	addi	sp,sp,-28
  11a568:	dfc00615 	stw	ra,24(sp)
  11a56c:	df000515 	stw	fp,20(sp)
  11a570:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  11a574:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  11a578:	01000084 	movi	r4,2
  11a57c:	0120c680 	call	120c68 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11a580:	0005303a 	rdctl	r2,status
  11a584:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11a588:	e0fffc17 	ldw	r3,-16(fp)
  11a58c:	00bfff84 	movi	r2,-2
  11a590:	1884703a 	and	r2,r3,r2
  11a594:	1001703a 	wrctl	status,r2
  
  return context;
  11a598:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  11a59c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  11a5a0:	d0273a15 	stw	zero,-25368(gp)
  11a5a4:	e0bffb17 	ldw	r2,-20(fp)
  11a5a8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11a5ac:	e0bffd17 	ldw	r2,-12(fp)
  11a5b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  11a5b4:	01001904 	movi	r4,100
  11a5b8:	0120c680 	call	120c68 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11a5bc:	0005303a 	rdctl	r2,status
  11a5c0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11a5c4:	e0fffe17 	ldw	r3,-8(fp)
  11a5c8:	00bfff84 	movi	r2,-2
  11a5cc:	1884703a 	and	r2,r3,r2
  11a5d0:	1001703a 	wrctl	status,r2
  
  return context;
  11a5d4:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  11a5d8:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  11a5dc:	d0a73a17 	ldw	r2,-25368(gp)
  11a5e0:	d0a73f15 	stw	r2,-25348(gp)
    OSStatRdy    = OS_TRUE;
  11a5e4:	00800044 	movi	r2,1
  11a5e8:	d0a74b05 	stb	r2,-25300(gp)
  11a5ec:	e0bffb17 	ldw	r2,-20(fp)
  11a5f0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11a5f4:	e0bfff17 	ldw	r2,-4(fp)
  11a5f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  11a5fc:	0001883a 	nop
  11a600:	e037883a 	mov	sp,fp
  11a604:	dfc00117 	ldw	ra,4(sp)
  11a608:	df000017 	ldw	fp,0(sp)
  11a60c:	dec00204 	addi	sp,sp,8
  11a610:	f800283a 	ret

0011a614 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  11a614:	defff704 	addi	sp,sp,-36
  11a618:	dfc00815 	stw	ra,32(sp)
  11a61c:	df000715 	stw	fp,28(sp)
  11a620:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  11a624:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  11a628:	0122e6c0 	call	122e6c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11a62c:	0005303a 	rdctl	r2,status
  11a630:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11a634:	e0fffd17 	ldw	r3,-12(fp)
  11a638:	00bfff84 	movi	r2,-2
  11a63c:	1884703a 	and	r2,r3,r2
  11a640:	1001703a 	wrctl	status,r2
  
  return context;
  11a644:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  11a648:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
  11a64c:	d0a74917 	ldw	r2,-25308(gp)
  11a650:	10800044 	addi	r2,r2,1
  11a654:	d0a74915 	stw	r2,-25308(gp)
  11a658:	e0bffb17 	ldw	r2,-20(fp)
  11a65c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11a660:	e0bfff17 	ldw	r2,-4(fp)
  11a664:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  11a668:	d0a73943 	ldbu	r2,-25371(gp)
  11a66c:	10803fcc 	andi	r2,r2,255
  11a670:	10800058 	cmpnei	r2,r2,1
  11a674:	10006a1e 	bne	r2,zero,11a820 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  11a678:	d0a73d03 	ldbu	r2,-25356(gp)
  11a67c:	10803fcc 	andi	r2,r2,255
  11a680:	10c00060 	cmpeqi	r3,r2,1
  11a684:	1800061e 	bne	r3,zero,11a6a0 <OSTimeTick+0x8c>
  11a688:	10c000a0 	cmpeqi	r3,r2,2
  11a68c:	1800061e 	bne	r3,zero,11a6a8 <OSTimeTick+0x94>
  11a690:	10000a1e 	bne	r2,zero,11a6bc <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  11a694:	00800044 	movi	r2,1
  11a698:	e0bffa05 	stb	r2,-24(fp)
                 break;
  11a69c:	00000b06 	br	11a6cc <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  11a6a0:	e03ffa05 	stb	zero,-24(fp)
                 break;
  11a6a4:	00000906 	br	11a6cc <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  11a6a8:	00800044 	movi	r2,1
  11a6ac:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  11a6b0:	00800044 	movi	r2,1
  11a6b4:	d0a73d05 	stb	r2,-25356(gp)
                 break;
  11a6b8:	00000406 	br	11a6cc <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  11a6bc:	00800044 	movi	r2,1
  11a6c0:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  11a6c4:	d0273d05 	stb	zero,-25356(gp)
                 break;
  11a6c8:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  11a6cc:	e0bffa03 	ldbu	r2,-24(fp)
  11a6d0:	10005226 	beq	r2,zero,11a81c <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  11a6d4:	d0a73c17 	ldw	r2,-25360(gp)
  11a6d8:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  11a6dc:	00004906 	br	11a804 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11a6e0:	0005303a 	rdctl	r2,status
  11a6e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11a6e8:	e0fffc17 	ldw	r3,-16(fp)
  11a6ec:	00bfff84 	movi	r2,-2
  11a6f0:	1884703a 	and	r2,r3,r2
  11a6f4:	1001703a 	wrctl	status,r2
  
  return context;
  11a6f8:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
  11a6fc:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  11a700:	e0bff917 	ldw	r2,-28(fp)
  11a704:	10800b8b 	ldhu	r2,46(r2)
  11a708:	10bfffcc 	andi	r2,r2,65535
  11a70c:	10003626 	beq	r2,zero,11a7e8 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  11a710:	e0bff917 	ldw	r2,-28(fp)
  11a714:	10800b8b 	ldhu	r2,46(r2)
  11a718:	10bfffc4 	addi	r2,r2,-1
  11a71c:	1007883a 	mov	r3,r2
  11a720:	e0bff917 	ldw	r2,-28(fp)
  11a724:	10c00b8d 	sth	r3,46(r2)
  11a728:	e0bff917 	ldw	r2,-28(fp)
  11a72c:	10800b8b 	ldhu	r2,46(r2)
  11a730:	10bfffcc 	andi	r2,r2,65535
  11a734:	10002c1e 	bne	r2,zero,11a7e8 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  11a738:	e0bff917 	ldw	r2,-28(fp)
  11a73c:	10800c03 	ldbu	r2,48(r2)
  11a740:	10803fcc 	andi	r2,r2,255
  11a744:	10800dcc 	andi	r2,r2,55
  11a748:	10000b26 	beq	r2,zero,11a778 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  11a74c:	e0bff917 	ldw	r2,-28(fp)
  11a750:	10c00c03 	ldbu	r3,48(r2)
  11a754:	00bff204 	movi	r2,-56
  11a758:	1884703a 	and	r2,r3,r2
  11a75c:	1007883a 	mov	r3,r2
  11a760:	e0bff917 	ldw	r2,-28(fp)
  11a764:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  11a768:	e0bff917 	ldw	r2,-28(fp)
  11a76c:	00c00044 	movi	r3,1
  11a770:	10c00c45 	stb	r3,49(r2)
  11a774:	00000206 	br	11a780 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  11a778:	e0bff917 	ldw	r2,-28(fp)
  11a77c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  11a780:	e0bff917 	ldw	r2,-28(fp)
  11a784:	10800c03 	ldbu	r2,48(r2)
  11a788:	10803fcc 	andi	r2,r2,255
  11a78c:	1080020c 	andi	r2,r2,8
  11a790:	1000151e 	bne	r2,zero,11a7e8 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  11a794:	e0bff917 	ldw	r2,-28(fp)
  11a798:	10c00d83 	ldbu	r3,54(r2)
  11a79c:	d0a74503 	ldbu	r2,-25324(gp)
  11a7a0:	1884b03a 	or	r2,r3,r2
  11a7a4:	d0a74505 	stb	r2,-25324(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  11a7a8:	e0bff917 	ldw	r2,-28(fp)
  11a7ac:	10800d03 	ldbu	r2,52(r2)
  11a7b0:	10c03fcc 	andi	r3,r2,255
  11a7b4:	e0bff917 	ldw	r2,-28(fp)
  11a7b8:	10800d03 	ldbu	r2,52(r2)
  11a7bc:	11003fcc 	andi	r4,r2,255
  11a7c0:	d0a74544 	addi	r2,gp,-25323
  11a7c4:	2085883a 	add	r2,r4,r2
  11a7c8:	11000003 	ldbu	r4,0(r2)
  11a7cc:	e0bff917 	ldw	r2,-28(fp)
  11a7d0:	10800d43 	ldbu	r2,53(r2)
  11a7d4:	2084b03a 	or	r2,r4,r2
  11a7d8:	1009883a 	mov	r4,r2
  11a7dc:	d0a74544 	addi	r2,gp,-25323
  11a7e0:	1885883a 	add	r2,r3,r2
  11a7e4:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  11a7e8:	e0bff917 	ldw	r2,-28(fp)
  11a7ec:	10800517 	ldw	r2,20(r2)
  11a7f0:	e0bff915 	stw	r2,-28(fp)
  11a7f4:	e0bffb17 	ldw	r2,-20(fp)
  11a7f8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11a7fc:	e0bffe17 	ldw	r2,-8(fp)
  11a800:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  11a804:	e0bff917 	ldw	r2,-28(fp)
  11a808:	10800c83 	ldbu	r2,50(r2)
  11a80c:	10803fcc 	andi	r2,r2,255
  11a810:	10800518 	cmpnei	r2,r2,20
  11a814:	103fb21e 	bne	r2,zero,11a6e0 <__alt_data_end+0xfffda6e0>
  11a818:	00000106 	br	11a820 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
  11a81c:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  11a820:	e037883a 	mov	sp,fp
  11a824:	dfc00117 	ldw	ra,4(sp)
  11a828:	df000017 	ldw	fp,0(sp)
  11a82c:	dec00204 	addi	sp,sp,8
  11a830:	f800283a 	ret

0011a834 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  11a834:	deffff04 	addi	sp,sp,-4
  11a838:	df000015 	stw	fp,0(sp)
  11a83c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  11a840:	00804784 	movi	r2,286
}
  11a844:	e037883a 	mov	sp,fp
  11a848:	df000017 	ldw	fp,0(sp)
  11a84c:	dec00104 	addi	sp,sp,4
  11a850:	f800283a 	ret

0011a854 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  11a854:	deffff04 	addi	sp,sp,-4
  11a858:	df000015 	stw	fp,0(sp)
  11a85c:	d839883a 	mov	fp,sp
}
  11a860:	0001883a 	nop
  11a864:	e037883a 	mov	sp,fp
  11a868:	df000017 	ldw	fp,0(sp)
  11a86c:	dec00104 	addi	sp,sp,4
  11a870:	f800283a 	ret

0011a874 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  11a874:	defff804 	addi	sp,sp,-32
  11a878:	dfc00715 	stw	ra,28(sp)
  11a87c:	df000615 	stw	fp,24(sp)
  11a880:	df000604 	addi	fp,sp,24
  11a884:	e13ffc15 	stw	r4,-16(fp)
  11a888:	e17ffd15 	stw	r5,-12(fp)
  11a88c:	3007883a 	mov	r3,r6
  11a890:	3805883a 	mov	r2,r7
  11a894:	e0fffe05 	stb	r3,-8(fp)
  11a898:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  11a89c:	e0bffc17 	ldw	r2,-16(fp)
  11a8a0:	10800283 	ldbu	r2,10(r2)
  11a8a4:	10c03fcc 	andi	r3,r2,255
  11a8a8:	008004b4 	movhi	r2,18
  11a8ac:	10901704 	addi	r2,r2,16476
  11a8b0:	10c5883a 	add	r2,r2,r3
  11a8b4:	10800003 	ldbu	r2,0(r2)
  11a8b8:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  11a8bc:	e0bffa03 	ldbu	r2,-24(fp)
  11a8c0:	e0fffc17 	ldw	r3,-16(fp)
  11a8c4:	1885883a 	add	r2,r3,r2
  11a8c8:	108002c4 	addi	r2,r2,11
  11a8cc:	10800003 	ldbu	r2,0(r2)
  11a8d0:	10c03fcc 	andi	r3,r2,255
  11a8d4:	008004b4 	movhi	r2,18
  11a8d8:	10901704 	addi	r2,r2,16476
  11a8dc:	10c5883a 	add	r2,r2,r3
  11a8e0:	10800003 	ldbu	r2,0(r2)
  11a8e4:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  11a8e8:	e0bffa03 	ldbu	r2,-24(fp)
  11a8ec:	100490fa 	slli	r2,r2,3
  11a8f0:	1007883a 	mov	r3,r2
  11a8f4:	e0bffa43 	ldbu	r2,-23(fp)
  11a8f8:	1885883a 	add	r2,r3,r2
  11a8fc:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  11a900:	e0fffa83 	ldbu	r3,-22(fp)
  11a904:	008004f4 	movhi	r2,19
  11a908:	10bb0204 	addi	r2,r2,-5112
  11a90c:	18c7883a 	add	r3,r3,r3
  11a910:	18c7883a 	add	r3,r3,r3
  11a914:	10c5883a 	add	r2,r2,r3
  11a918:	10800017 	ldw	r2,0(r2)
  11a91c:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  11a920:	e0bffb17 	ldw	r2,-20(fp)
  11a924:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  11a928:	e0bffb17 	ldw	r2,-20(fp)
  11a92c:	e0fffd17 	ldw	r3,-12(fp)
  11a930:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  11a934:	e0bffb17 	ldw	r2,-20(fp)
  11a938:	10800c03 	ldbu	r2,48(r2)
  11a93c:	1007883a 	mov	r3,r2
  11a940:	e0bffe03 	ldbu	r2,-8(fp)
  11a944:	0084303a 	nor	r2,zero,r2
  11a948:	1884703a 	and	r2,r3,r2
  11a94c:	1007883a 	mov	r3,r2
  11a950:	e0bffb17 	ldw	r2,-20(fp)
  11a954:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  11a958:	e0bffb17 	ldw	r2,-20(fp)
  11a95c:	e0ffff03 	ldbu	r3,-4(fp)
  11a960:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  11a964:	e0bffb17 	ldw	r2,-20(fp)
  11a968:	10800c03 	ldbu	r2,48(r2)
  11a96c:	10803fcc 	andi	r2,r2,255
  11a970:	1080020c 	andi	r2,r2,8
  11a974:	1000111e 	bne	r2,zero,11a9bc <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  11a978:	e0bffb17 	ldw	r2,-20(fp)
  11a97c:	10c00d83 	ldbu	r3,54(r2)
  11a980:	d0a74503 	ldbu	r2,-25324(gp)
  11a984:	1884b03a 	or	r2,r3,r2
  11a988:	d0a74505 	stb	r2,-25324(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  11a98c:	e0fffa03 	ldbu	r3,-24(fp)
  11a990:	e13ffa03 	ldbu	r4,-24(fp)
  11a994:	d0a74544 	addi	r2,gp,-25323
  11a998:	2085883a 	add	r2,r4,r2
  11a99c:	11000003 	ldbu	r4,0(r2)
  11a9a0:	e0bffb17 	ldw	r2,-20(fp)
  11a9a4:	10800d43 	ldbu	r2,53(r2)
  11a9a8:	2084b03a 	or	r2,r4,r2
  11a9ac:	1009883a 	mov	r4,r2
  11a9b0:	d0a74544 	addi	r2,gp,-25323
  11a9b4:	1885883a 	add	r2,r3,r2
  11a9b8:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  11a9bc:	e17ffc17 	ldw	r5,-16(fp)
  11a9c0:	e13ffb17 	ldw	r4,-20(fp)
  11a9c4:	011ac6c0 	call	11ac6c <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  11a9c8:	e0bffb17 	ldw	r2,-20(fp)
  11a9cc:	10800817 	ldw	r2,32(r2)
  11a9d0:	10000826 	beq	r2,zero,11a9f4 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  11a9d4:	e0bffb17 	ldw	r2,-20(fp)
  11a9d8:	10800817 	ldw	r2,32(r2)
  11a9dc:	100b883a 	mov	r5,r2
  11a9e0:	e13ffb17 	ldw	r4,-20(fp)
  11a9e4:	011ad240 	call	11ad24 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  11a9e8:	e0bffb17 	ldw	r2,-20(fp)
  11a9ec:	e0fffc17 	ldw	r3,-16(fp)
  11a9f0:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
  11a9f4:	e0bffa83 	ldbu	r2,-22(fp)
}
  11a9f8:	e037883a 	mov	sp,fp
  11a9fc:	dfc00117 	ldw	ra,4(sp)
  11aa00:	df000017 	ldw	fp,0(sp)
  11aa04:	dec00204 	addi	sp,sp,8
  11aa08:	f800283a 	ret

0011aa0c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  11aa0c:	defffd04 	addi	sp,sp,-12
  11aa10:	df000215 	stw	fp,8(sp)
  11aa14:	df000204 	addi	fp,sp,8
  11aa18:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  11aa1c:	d0a74817 	ldw	r2,-25312(gp)
  11aa20:	e0ffff17 	ldw	r3,-4(fp)
  11aa24:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  11aa28:	d0a74817 	ldw	r2,-25312(gp)
  11aa2c:	10800d03 	ldbu	r2,52(r2)
  11aa30:	10803fcc 	andi	r2,r2,255
  11aa34:	d0e74817 	ldw	r3,-25312(gp)
  11aa38:	18c00d03 	ldbu	r3,52(r3)
  11aa3c:	18c03fcc 	andi	r3,r3,255
  11aa40:	e13fff17 	ldw	r4,-4(fp)
  11aa44:	20c7883a 	add	r3,r4,r3
  11aa48:	18c002c4 	addi	r3,r3,11
  11aa4c:	19000003 	ldbu	r4,0(r3)
  11aa50:	d0e74817 	ldw	r3,-25312(gp)
  11aa54:	18c00d43 	ldbu	r3,53(r3)
  11aa58:	20c6b03a 	or	r3,r4,r3
  11aa5c:	1809883a 	mov	r4,r3
  11aa60:	e0ffff17 	ldw	r3,-4(fp)
  11aa64:	1885883a 	add	r2,r3,r2
  11aa68:	108002c4 	addi	r2,r2,11
  11aa6c:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  11aa70:	e0bfff17 	ldw	r2,-4(fp)
  11aa74:	10c00283 	ldbu	r3,10(r2)
  11aa78:	d0a74817 	ldw	r2,-25312(gp)
  11aa7c:	10800d83 	ldbu	r2,54(r2)
  11aa80:	1884b03a 	or	r2,r3,r2
  11aa84:	1007883a 	mov	r3,r2
  11aa88:	e0bfff17 	ldw	r2,-4(fp)
  11aa8c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  11aa90:	d0a74817 	ldw	r2,-25312(gp)
  11aa94:	10800d03 	ldbu	r2,52(r2)
  11aa98:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  11aa9c:	e0fffe03 	ldbu	r3,-8(fp)
  11aaa0:	e13ffe03 	ldbu	r4,-8(fp)
  11aaa4:	d0a74544 	addi	r2,gp,-25323
  11aaa8:	2085883a 	add	r2,r4,r2
  11aaac:	10800003 	ldbu	r2,0(r2)
  11aab0:	1009883a 	mov	r4,r2
  11aab4:	d0a74817 	ldw	r2,-25312(gp)
  11aab8:	10800d43 	ldbu	r2,53(r2)
  11aabc:	0084303a 	nor	r2,zero,r2
  11aac0:	2084703a 	and	r2,r4,r2
  11aac4:	1009883a 	mov	r4,r2
  11aac8:	d0a74544 	addi	r2,gp,-25323
  11aacc:	1885883a 	add	r2,r3,r2
  11aad0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  11aad4:	e0fffe03 	ldbu	r3,-8(fp)
  11aad8:	d0a74544 	addi	r2,gp,-25323
  11aadc:	1885883a 	add	r2,r3,r2
  11aae0:	10800003 	ldbu	r2,0(r2)
  11aae4:	10803fcc 	andi	r2,r2,255
  11aae8:	1000071e 	bne	r2,zero,11ab08 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  11aaec:	d0a74817 	ldw	r2,-25312(gp)
  11aaf0:	10800d83 	ldbu	r2,54(r2)
  11aaf4:	0084303a 	nor	r2,zero,r2
  11aaf8:	1007883a 	mov	r3,r2
  11aafc:	d0a74503 	ldbu	r2,-25324(gp)
  11ab00:	1884703a 	and	r2,r3,r2
  11ab04:	d0a74505 	stb	r2,-25324(gp)
    }
}
  11ab08:	0001883a 	nop
  11ab0c:	e037883a 	mov	sp,fp
  11ab10:	df000017 	ldw	fp,0(sp)
  11ab14:	dec00104 	addi	sp,sp,4
  11ab18:	f800283a 	ret

0011ab1c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  11ab1c:	defffb04 	addi	sp,sp,-20
  11ab20:	df000415 	stw	fp,16(sp)
  11ab24:	df000404 	addi	fp,sp,16
  11ab28:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  11ab2c:	d0a74817 	ldw	r2,-25312(gp)
  11ab30:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  11ab34:	d0a74817 	ldw	r2,-25312(gp)
  11ab38:	e0ffff17 	ldw	r3,-4(fp)
  11ab3c:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
  11ab40:	e0bfff17 	ldw	r2,-4(fp)
  11ab44:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
  11ab48:	e0bffc17 	ldw	r2,-16(fp)
  11ab4c:	10800017 	ldw	r2,0(r2)
  11ab50:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  11ab54:	00002006 	br	11abd8 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  11ab58:	d0a74817 	ldw	r2,-25312(gp)
  11ab5c:	10800d03 	ldbu	r2,52(r2)
  11ab60:	10803fcc 	andi	r2,r2,255
  11ab64:	d0e74817 	ldw	r3,-25312(gp)
  11ab68:	18c00d03 	ldbu	r3,52(r3)
  11ab6c:	18c03fcc 	andi	r3,r3,255
  11ab70:	e13ffd17 	ldw	r4,-12(fp)
  11ab74:	20c7883a 	add	r3,r4,r3
  11ab78:	18c002c4 	addi	r3,r3,11
  11ab7c:	19000003 	ldbu	r4,0(r3)
  11ab80:	d0e74817 	ldw	r3,-25312(gp)
  11ab84:	18c00d43 	ldbu	r3,53(r3)
  11ab88:	20c6b03a 	or	r3,r4,r3
  11ab8c:	1809883a 	mov	r4,r3
  11ab90:	e0fffd17 	ldw	r3,-12(fp)
  11ab94:	1885883a 	add	r2,r3,r2
  11ab98:	108002c4 	addi	r2,r2,11
  11ab9c:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  11aba0:	e0bffd17 	ldw	r2,-12(fp)
  11aba4:	10c00283 	ldbu	r3,10(r2)
  11aba8:	d0a74817 	ldw	r2,-25312(gp)
  11abac:	10800d83 	ldbu	r2,54(r2)
  11abb0:	1884b03a 	or	r2,r3,r2
  11abb4:	1007883a 	mov	r3,r2
  11abb8:	e0bffd17 	ldw	r2,-12(fp)
  11abbc:	10c00285 	stb	r3,10(r2)
        pevents++;
  11abc0:	e0bffc17 	ldw	r2,-16(fp)
  11abc4:	10800104 	addi	r2,r2,4
  11abc8:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
  11abcc:	e0bffc17 	ldw	r2,-16(fp)
  11abd0:	10800017 	ldw	r2,0(r2)
  11abd4:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  11abd8:	e0bffd17 	ldw	r2,-12(fp)
  11abdc:	103fde1e 	bne	r2,zero,11ab58 <__alt_data_end+0xfffdab58>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  11abe0:	d0a74817 	ldw	r2,-25312(gp)
  11abe4:	10800d03 	ldbu	r2,52(r2)
  11abe8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  11abec:	e0fffe03 	ldbu	r3,-8(fp)
  11abf0:	e13ffe03 	ldbu	r4,-8(fp)
  11abf4:	d0a74544 	addi	r2,gp,-25323
  11abf8:	2085883a 	add	r2,r4,r2
  11abfc:	10800003 	ldbu	r2,0(r2)
  11ac00:	1009883a 	mov	r4,r2
  11ac04:	d0a74817 	ldw	r2,-25312(gp)
  11ac08:	10800d43 	ldbu	r2,53(r2)
  11ac0c:	0084303a 	nor	r2,zero,r2
  11ac10:	2084703a 	and	r2,r4,r2
  11ac14:	1009883a 	mov	r4,r2
  11ac18:	d0a74544 	addi	r2,gp,-25323
  11ac1c:	1885883a 	add	r2,r3,r2
  11ac20:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  11ac24:	e0fffe03 	ldbu	r3,-8(fp)
  11ac28:	d0a74544 	addi	r2,gp,-25323
  11ac2c:	1885883a 	add	r2,r3,r2
  11ac30:	10800003 	ldbu	r2,0(r2)
  11ac34:	10803fcc 	andi	r2,r2,255
  11ac38:	1000071e 	bne	r2,zero,11ac58 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  11ac3c:	d0a74817 	ldw	r2,-25312(gp)
  11ac40:	10800d83 	ldbu	r2,54(r2)
  11ac44:	0084303a 	nor	r2,zero,r2
  11ac48:	1007883a 	mov	r3,r2
  11ac4c:	d0a74503 	ldbu	r2,-25324(gp)
  11ac50:	1884703a 	and	r2,r3,r2
  11ac54:	d0a74505 	stb	r2,-25324(gp)
    }
}
  11ac58:	0001883a 	nop
  11ac5c:	e037883a 	mov	sp,fp
  11ac60:	df000017 	ldw	fp,0(sp)
  11ac64:	dec00104 	addi	sp,sp,4
  11ac68:	f800283a 	ret

0011ac6c <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  11ac6c:	defffc04 	addi	sp,sp,-16
  11ac70:	df000315 	stw	fp,12(sp)
  11ac74:	df000304 	addi	fp,sp,12
  11ac78:	e13ffe15 	stw	r4,-8(fp)
  11ac7c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  11ac80:	e0bffe17 	ldw	r2,-8(fp)
  11ac84:	10800d03 	ldbu	r2,52(r2)
  11ac88:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  11ac8c:	e0bffd03 	ldbu	r2,-12(fp)
  11ac90:	e0fffd03 	ldbu	r3,-12(fp)
  11ac94:	e13fff17 	ldw	r4,-4(fp)
  11ac98:	20c7883a 	add	r3,r4,r3
  11ac9c:	18c002c4 	addi	r3,r3,11
  11aca0:	18c00003 	ldbu	r3,0(r3)
  11aca4:	1809883a 	mov	r4,r3
  11aca8:	e0fffe17 	ldw	r3,-8(fp)
  11acac:	18c00d43 	ldbu	r3,53(r3)
  11acb0:	00c6303a 	nor	r3,zero,r3
  11acb4:	20c6703a 	and	r3,r4,r3
  11acb8:	1809883a 	mov	r4,r3
  11acbc:	e0ffff17 	ldw	r3,-4(fp)
  11acc0:	1885883a 	add	r2,r3,r2
  11acc4:	108002c4 	addi	r2,r2,11
  11acc8:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
  11accc:	e0bffd03 	ldbu	r2,-12(fp)
  11acd0:	e0ffff17 	ldw	r3,-4(fp)
  11acd4:	1885883a 	add	r2,r3,r2
  11acd8:	108002c4 	addi	r2,r2,11
  11acdc:	10800003 	ldbu	r2,0(r2)
  11ace0:	10803fcc 	andi	r2,r2,255
  11ace4:	10000a1e 	bne	r2,zero,11ad10 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  11ace8:	e0bfff17 	ldw	r2,-4(fp)
  11acec:	10800283 	ldbu	r2,10(r2)
  11acf0:	1007883a 	mov	r3,r2
  11acf4:	e0bffe17 	ldw	r2,-8(fp)
  11acf8:	10800d83 	ldbu	r2,54(r2)
  11acfc:	0084303a 	nor	r2,zero,r2
  11ad00:	1884703a 	and	r2,r3,r2
  11ad04:	1007883a 	mov	r3,r2
  11ad08:	e0bfff17 	ldw	r2,-4(fp)
  11ad0c:	10c00285 	stb	r3,10(r2)
    }
}
  11ad10:	0001883a 	nop
  11ad14:	e037883a 	mov	sp,fp
  11ad18:	df000017 	ldw	fp,0(sp)
  11ad1c:	dec00104 	addi	sp,sp,4
  11ad20:	f800283a 	ret

0011ad24 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  11ad24:	defffa04 	addi	sp,sp,-24
  11ad28:	df000515 	stw	fp,20(sp)
  11ad2c:	df000504 	addi	fp,sp,20
  11ad30:	e13ffe15 	stw	r4,-8(fp)
  11ad34:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  11ad38:	e0bffe17 	ldw	r2,-8(fp)
  11ad3c:	10800d03 	ldbu	r2,52(r2)
  11ad40:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
  11ad44:	e0bffe17 	ldw	r2,-8(fp)
  11ad48:	10800d83 	ldbu	r2,54(r2)
  11ad4c:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
  11ad50:	e0bffe17 	ldw	r2,-8(fp)
  11ad54:	10800d43 	ldbu	r2,53(r2)
  11ad58:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
  11ad5c:	e0bfff17 	ldw	r2,-4(fp)
  11ad60:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
  11ad64:	e0bffb17 	ldw	r2,-20(fp)
  11ad68:	10800017 	ldw	r2,0(r2)
  11ad6c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  11ad70:	00002506 	br	11ae08 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
  11ad74:	e0bffd03 	ldbu	r2,-12(fp)
  11ad78:	e0fffd03 	ldbu	r3,-12(fp)
  11ad7c:	e13ffc17 	ldw	r4,-16(fp)
  11ad80:	20c7883a 	add	r3,r4,r3
  11ad84:	18c002c4 	addi	r3,r3,11
  11ad88:	18c00003 	ldbu	r3,0(r3)
  11ad8c:	1809883a 	mov	r4,r3
  11ad90:	e0fffd83 	ldbu	r3,-10(fp)
  11ad94:	00c6303a 	nor	r3,zero,r3
  11ad98:	20c6703a 	and	r3,r4,r3
  11ad9c:	1809883a 	mov	r4,r3
  11ada0:	e0fffc17 	ldw	r3,-16(fp)
  11ada4:	1885883a 	add	r2,r3,r2
  11ada8:	108002c4 	addi	r2,r2,11
  11adac:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
  11adb0:	e0bffd03 	ldbu	r2,-12(fp)
  11adb4:	e0fffc17 	ldw	r3,-16(fp)
  11adb8:	1885883a 	add	r2,r3,r2
  11adbc:	108002c4 	addi	r2,r2,11
  11adc0:	10800003 	ldbu	r2,0(r2)
  11adc4:	10803fcc 	andi	r2,r2,255
  11adc8:	1000091e 	bne	r2,zero,11adf0 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
  11adcc:	e0bffc17 	ldw	r2,-16(fp)
  11add0:	10800283 	ldbu	r2,10(r2)
  11add4:	1007883a 	mov	r3,r2
  11add8:	e0bffd43 	ldbu	r2,-11(fp)
  11addc:	0084303a 	nor	r2,zero,r2
  11ade0:	1884703a 	and	r2,r3,r2
  11ade4:	1007883a 	mov	r3,r2
  11ade8:	e0bffc17 	ldw	r2,-16(fp)
  11adec:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  11adf0:	e0bffb17 	ldw	r2,-20(fp)
  11adf4:	10800104 	addi	r2,r2,4
  11adf8:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
  11adfc:	e0bffb17 	ldw	r2,-20(fp)
  11ae00:	10800017 	ldw	r2,0(r2)
  11ae04:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  11ae08:	e0bffc17 	ldw	r2,-16(fp)
  11ae0c:	103fd91e 	bne	r2,zero,11ad74 <__alt_data_end+0xfffdad74>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  11ae10:	0001883a 	nop
  11ae14:	e037883a 	mov	sp,fp
  11ae18:	df000017 	ldw	fp,0(sp)
  11ae1c:	dec00104 	addi	sp,sp,4
  11ae20:	f800283a 	ret

0011ae24 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  11ae24:	defffc04 	addi	sp,sp,-16
  11ae28:	df000315 	stw	fp,12(sp)
  11ae2c:	df000304 	addi	fp,sp,12
  11ae30:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  11ae34:	e0bfff17 	ldw	r2,-4(fp)
  11ae38:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  11ae3c:	e0bfff17 	ldw	r2,-4(fp)
  11ae40:	108002c4 	addi	r2,r2,11
  11ae44:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  11ae48:	e03ffe05 	stb	zero,-8(fp)
  11ae4c:	00000706 	br	11ae6c <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
  11ae50:	e0bffd17 	ldw	r2,-12(fp)
  11ae54:	10c00044 	addi	r3,r2,1
  11ae58:	e0fffd15 	stw	r3,-12(fp)
  11ae5c:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  11ae60:	e0bffe03 	ldbu	r2,-8(fp)
  11ae64:	10800044 	addi	r2,r2,1
  11ae68:	e0bffe05 	stb	r2,-8(fp)
  11ae6c:	e0bffe03 	ldbu	r2,-8(fp)
  11ae70:	108000f0 	cmpltui	r2,r2,3
  11ae74:	103ff61e 	bne	r2,zero,11ae50 <__alt_data_end+0xfffdae50>
        *ptbl++ = 0;
    }
}
  11ae78:	0001883a 	nop
  11ae7c:	e037883a 	mov	sp,fp
  11ae80:	df000017 	ldw	fp,0(sp)
  11ae84:	dec00104 	addi	sp,sp,4
  11ae88:	f800283a 	ret

0011ae8c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  11ae8c:	defffb04 	addi	sp,sp,-20
  11ae90:	dfc00415 	stw	ra,16(sp)
  11ae94:	df000315 	stw	fp,12(sp)
  11ae98:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  11ae9c:	0142d004 	movi	r5,2880
  11aea0:	010004f4 	movhi	r4,19
  11aea4:	2136ee04 	addi	r4,r4,-9288
  11aea8:	011b2040 	call	11b204 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  11aeac:	008004f4 	movhi	r2,19
  11aeb0:	10b6ee04 	addi	r2,r2,-9288
  11aeb4:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  11aeb8:	008004f4 	movhi	r2,19
  11aebc:	10b6fa04 	addi	r2,r2,-9240
  11aec0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  11aec4:	e03ffd0d 	sth	zero,-12(fp)
  11aec8:	00001306 	br	11af18 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  11aecc:	e0bffe17 	ldw	r2,-8(fp)
  11aed0:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  11aed4:	e0bffe17 	ldw	r2,-8(fp)
  11aed8:	e0ffff17 	ldw	r3,-4(fp)
  11aedc:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  11aee0:	e0bffe17 	ldw	r2,-8(fp)
  11aee4:	00c00fc4 	movi	r3,63
  11aee8:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  11aeec:	e0bffe17 	ldw	r2,-8(fp)
  11aef0:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  11aef4:	e0bffe17 	ldw	r2,-8(fp)
  11aef8:	10800c04 	addi	r2,r2,48
  11aefc:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  11af00:	e0bfff17 	ldw	r2,-4(fp)
  11af04:	10800c04 	addi	r2,r2,48
  11af08:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  11af0c:	e0bffd0b 	ldhu	r2,-12(fp)
  11af10:	10800044 	addi	r2,r2,1
  11af14:	e0bffd0d 	sth	r2,-12(fp)
  11af18:	e0bffd0b 	ldhu	r2,-12(fp)
  11af1c:	10800ef0 	cmpltui	r2,r2,59
  11af20:	103fea1e 	bne	r2,zero,11aecc <__alt_data_end+0xfffdaecc>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  11af24:	e0bffe17 	ldw	r2,-8(fp)
  11af28:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  11af2c:	e0bffe17 	ldw	r2,-8(fp)
  11af30:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  11af34:	e0bffe17 	ldw	r2,-8(fp)
  11af38:	00c00fc4 	movi	r3,63
  11af3c:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  11af40:	e0bffe17 	ldw	r2,-8(fp)
  11af44:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  11af48:	008004f4 	movhi	r2,19
  11af4c:	10b6ee04 	addi	r2,r2,-9288
  11af50:	d0a74615 	stw	r2,-25320(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  11af54:	0001883a 	nop
  11af58:	e037883a 	mov	sp,fp
  11af5c:	dfc00117 	ldw	ra,4(sp)
  11af60:	df000017 	ldw	fp,0(sp)
  11af64:	dec00204 	addi	sp,sp,8
  11af68:	f800283a 	ret

0011af6c <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  11af6c:	deffff04 	addi	sp,sp,-4
  11af70:	df000015 	stw	fp,0(sp)
  11af74:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  11af78:	d0274915 	stw	zero,-25308(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  11af7c:	d0274705 	stb	zero,-25316(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  11af80:	d0273905 	stb	zero,-25372(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  11af84:	d0274145 	stb	zero,-25339(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  11af88:	d0273945 	stb	zero,-25371(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  11af8c:	d0273e15 	stw	zero,-25352(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  11af90:	d0273a15 	stw	zero,-25368(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  11af94:	d0274c15 	stw	zero,-25296(gp)
    OSIdleCtrMax  = 0L;
  11af98:	d0273f15 	stw	zero,-25348(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  11af9c:	d0274b05 	stb	zero,-25300(gp)
#endif
}
  11afa0:	0001883a 	nop
  11afa4:	e037883a 	mov	sp,fp
  11afa8:	df000017 	ldw	fp,0(sp)
  11afac:	dec00104 	addi	sp,sp,4
  11afb0:	f800283a 	ret

0011afb4 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  11afb4:	defffd04 	addi	sp,sp,-12
  11afb8:	df000215 	stw	fp,8(sp)
  11afbc:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  11afc0:	d0274505 	stb	zero,-25324(gp)
    prdytbl       = &OSRdyTbl[0];
  11afc4:	d0a74544 	addi	r2,gp,-25323
  11afc8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  11afcc:	e03ffe05 	stb	zero,-8(fp)
  11afd0:	00000706 	br	11aff0 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
  11afd4:	e0bfff17 	ldw	r2,-4(fp)
  11afd8:	10c00044 	addi	r3,r2,1
  11afdc:	e0ffff15 	stw	r3,-4(fp)
  11afe0:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  11afe4:	e0bffe03 	ldbu	r2,-8(fp)
  11afe8:	10800044 	addi	r2,r2,1
  11afec:	e0bffe05 	stb	r2,-8(fp)
  11aff0:	e0bffe03 	ldbu	r2,-8(fp)
  11aff4:	108000f0 	cmpltui	r2,r2,3
  11aff8:	103ff61e 	bne	r2,zero,11afd4 <__alt_data_end+0xfffdafd4>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  11affc:	d0273b45 	stb	zero,-25363(gp)
    OSPrioHighRdy = 0;
  11b000:	d0273b05 	stb	zero,-25364(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  11b004:	d0274315 	stw	zero,-25332(gp)
    OSTCBCur      = (OS_TCB *)0;
  11b008:	d0274815 	stw	zero,-25312(gp)
}
  11b00c:	0001883a 	nop
  11b010:	e037883a 	mov	sp,fp
  11b014:	df000017 	ldw	fp,0(sp)
  11b018:	dec00104 	addi	sp,sp,4
  11b01c:	f800283a 	ret

0011b020 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  11b020:	defff804 	addi	sp,sp,-32
  11b024:	dfc00715 	stw	ra,28(sp)
  11b028:	df000615 	stw	fp,24(sp)
  11b02c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  11b030:	008000c4 	movi	r2,3
  11b034:	d8800415 	stw	r2,16(sp)
  11b038:	d8000315 	stw	zero,12(sp)
  11b03c:	00808004 	movi	r2,512
  11b040:	d8800215 	stw	r2,8(sp)
  11b044:	008004f4 	movhi	r2,19
  11b048:	10b4ee04 	addi	r2,r2,-11336
  11b04c:	d8800115 	stw	r2,4(sp)
  11b050:	00bfffd4 	movui	r2,65535
  11b054:	d8800015 	stw	r2,0(sp)
  11b058:	01c00504 	movi	r7,20
  11b05c:	018004f4 	movhi	r6,19
  11b060:	31b6ed04 	addi	r6,r6,-9292
  11b064:	000b883a 	mov	r5,zero
  11b068:	010004b4 	movhi	r4,18
  11b06c:	212d3304 	addi	r4,r4,-19252
  11b070:	011fb980 	call	11fb98 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  11b074:	e1bfff04 	addi	r6,fp,-4
  11b078:	014004b4 	movhi	r5,18
  11b07c:	29505704 	addi	r5,r5,16732
  11b080:	01000504 	movi	r4,20
  11b084:	01203a80 	call	1203a8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  11b088:	0001883a 	nop
  11b08c:	e037883a 	mov	sp,fp
  11b090:	dfc00117 	ldw	ra,4(sp)
  11b094:	df000017 	ldw	fp,0(sp)
  11b098:	dec00204 	addi	sp,sp,8
  11b09c:	f800283a 	ret

0011b0a0 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  11b0a0:	defff804 	addi	sp,sp,-32
  11b0a4:	dfc00715 	stw	ra,28(sp)
  11b0a8:	df000615 	stw	fp,24(sp)
  11b0ac:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  11b0b0:	008000c4 	movi	r2,3
  11b0b4:	d8800415 	stw	r2,16(sp)
  11b0b8:	d8000315 	stw	zero,12(sp)
  11b0bc:	00808004 	movi	r2,512
  11b0c0:	d8800215 	stw	r2,8(sp)
  11b0c4:	008004f4 	movhi	r2,19
  11b0c8:	10b27604 	addi	r2,r2,-13864
  11b0cc:	d8800115 	stw	r2,4(sp)
  11b0d0:	00bfff94 	movui	r2,65534
  11b0d4:	d8800015 	stw	r2,0(sp)
  11b0d8:	01c004c4 	movi	r7,19
  11b0dc:	018004f4 	movhi	r6,19
  11b0e0:	31b47504 	addi	r6,r6,-11820
  11b0e4:	000b883a 	mov	r5,zero
  11b0e8:	010004b4 	movhi	r4,18
  11b0ec:	212d4a04 	addi	r4,r4,-19160
  11b0f0:	011fb980 	call	11fb98 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  11b0f4:	e1bfff04 	addi	r6,fp,-4
  11b0f8:	014004b4 	movhi	r5,18
  11b0fc:	29505b04 	addi	r5,r5,16748
  11b100:	010004c4 	movi	r4,19
  11b104:	01203a80 	call	1203a8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  11b108:	0001883a 	nop
  11b10c:	e037883a 	mov	sp,fp
  11b110:	dfc00117 	ldw	ra,4(sp)
  11b114:	df000017 	ldw	fp,0(sp)
  11b118:	dec00204 	addi	sp,sp,8
  11b11c:	f800283a 	ret

0011b120 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  11b120:	defffb04 	addi	sp,sp,-20
  11b124:	dfc00415 	stw	ra,16(sp)
  11b128:	df000315 	stw	fp,12(sp)
  11b12c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  11b130:	01414404 	movi	r5,1296
  11b134:	010004f4 	movhi	r4,19
  11b138:	2139be04 	addi	r4,r4,-6408
  11b13c:	011b2040 	call	11b204 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  11b140:	01401504 	movi	r5,84
  11b144:	010004f4 	movhi	r4,19
  11b148:	213b0204 	addi	r4,r4,-5112
  11b14c:	011b2040 	call	11b204 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  11b150:	008004f4 	movhi	r2,19
  11b154:	10b9be04 	addi	r2,r2,-6408
  11b158:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  11b15c:	008004f4 	movhi	r2,19
  11b160:	10b9d904 	addi	r2,r2,-6300
  11b164:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  11b168:	e03ffd05 	stb	zero,-12(fp)
  11b16c:	00001106 	br	11b1b4 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  11b170:	e0bffe17 	ldw	r2,-8(fp)
  11b174:	e0ffff17 	ldw	r3,-4(fp)
  11b178:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  11b17c:	e0bffe17 	ldw	r2,-8(fp)
  11b180:	00c00fc4 	movi	r3,63
  11b184:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  11b188:	e0bffe17 	ldw	r2,-8(fp)
  11b18c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  11b190:	e0bffe17 	ldw	r2,-8(fp)
  11b194:	10801b04 	addi	r2,r2,108
  11b198:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  11b19c:	e0bfff17 	ldw	r2,-4(fp)
  11b1a0:	10801b04 	addi	r2,r2,108
  11b1a4:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  11b1a8:	e0bffd03 	ldbu	r2,-12(fp)
  11b1ac:	10800044 	addi	r2,r2,1
  11b1b0:	e0bffd05 	stb	r2,-12(fp)
  11b1b4:	e0bffd03 	ldbu	r2,-12(fp)
  11b1b8:	108002f0 	cmpltui	r2,r2,11
  11b1bc:	103fec1e 	bne	r2,zero,11b170 <__alt_data_end+0xfffdb170>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  11b1c0:	e0bffe17 	ldw	r2,-8(fp)
  11b1c4:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  11b1c8:	e0bffe17 	ldw	r2,-8(fp)
  11b1cc:	00c00fc4 	movi	r3,63
  11b1d0:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  11b1d4:	e0bffe17 	ldw	r2,-8(fp)
  11b1d8:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  11b1dc:	d0273c15 	stw	zero,-25360(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  11b1e0:	008004f4 	movhi	r2,19
  11b1e4:	10b9be04 	addi	r2,r2,-6408
  11b1e8:	d0a74015 	stw	r2,-25344(gp)
}
  11b1ec:	0001883a 	nop
  11b1f0:	e037883a 	mov	sp,fp
  11b1f4:	dfc00117 	ldw	ra,4(sp)
  11b1f8:	df000017 	ldw	fp,0(sp)
  11b1fc:	dec00204 	addi	sp,sp,8
  11b200:	f800283a 	ret

0011b204 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  11b204:	defffd04 	addi	sp,sp,-12
  11b208:	df000215 	stw	fp,8(sp)
  11b20c:	df000204 	addi	fp,sp,8
  11b210:	e13ffe15 	stw	r4,-8(fp)
  11b214:	2805883a 	mov	r2,r5
  11b218:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
  11b21c:	00000706 	br	11b23c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  11b220:	e0bffe17 	ldw	r2,-8(fp)
  11b224:	10c00044 	addi	r3,r2,1
  11b228:	e0fffe15 	stw	r3,-8(fp)
  11b22c:	10000005 	stb	zero,0(r2)
        size--;
  11b230:	e0bfff0b 	ldhu	r2,-4(fp)
  11b234:	10bfffc4 	addi	r2,r2,-1
  11b238:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  11b23c:	e0bfff0b 	ldhu	r2,-4(fp)
  11b240:	103ff71e 	bne	r2,zero,11b220 <__alt_data_end+0xfffdb220>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  11b244:	0001883a 	nop
  11b248:	e037883a 	mov	sp,fp
  11b24c:	df000017 	ldw	fp,0(sp)
  11b250:	dec00104 	addi	sp,sp,4
  11b254:	f800283a 	ret

0011b258 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  11b258:	defffc04 	addi	sp,sp,-16
  11b25c:	df000315 	stw	fp,12(sp)
  11b260:	df000304 	addi	fp,sp,12
  11b264:	e13ffd15 	stw	r4,-12(fp)
  11b268:	e17ffe15 	stw	r5,-8(fp)
  11b26c:	3005883a 	mov	r2,r6
  11b270:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
  11b274:	00000b06 	br	11b2a4 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
  11b278:	e0bffd17 	ldw	r2,-12(fp)
  11b27c:	10c00044 	addi	r3,r2,1
  11b280:	e0fffd15 	stw	r3,-12(fp)
  11b284:	e0fffe17 	ldw	r3,-8(fp)
  11b288:	19000044 	addi	r4,r3,1
  11b28c:	e13ffe15 	stw	r4,-8(fp)
  11b290:	18c00003 	ldbu	r3,0(r3)
  11b294:	10c00005 	stb	r3,0(r2)
        size--;
  11b298:	e0bfff0b 	ldhu	r2,-4(fp)
  11b29c:	10bfffc4 	addi	r2,r2,-1
  11b2a0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  11b2a4:	e0bfff0b 	ldhu	r2,-4(fp)
  11b2a8:	103ff31e 	bne	r2,zero,11b278 <__alt_data_end+0xfffdb278>
        *pdest++ = *psrc++;
        size--;
    }
}
  11b2ac:	0001883a 	nop
  11b2b0:	e037883a 	mov	sp,fp
  11b2b4:	df000017 	ldw	fp,0(sp)
  11b2b8:	dec00104 	addi	sp,sp,4
  11b2bc:	f800283a 	ret

0011b2c0 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  11b2c0:	defffb04 	addi	sp,sp,-20
  11b2c4:	dfc00415 	stw	ra,16(sp)
  11b2c8:	df000315 	stw	fp,12(sp)
  11b2cc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  11b2d0:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11b2d4:	0005303a 	rdctl	r2,status
  11b2d8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11b2dc:	e0ffff17 	ldw	r3,-4(fp)
  11b2e0:	00bfff84 	movi	r2,-2
  11b2e4:	1884703a 	and	r2,r3,r2
  11b2e8:	1001703a 	wrctl	status,r2
  
  return context;
  11b2ec:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
  11b2f0:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  11b2f4:	d0a74703 	ldbu	r2,-25316(gp)
  11b2f8:	10803fcc 	andi	r2,r2,255
  11b2fc:	10001a1e 	bne	r2,zero,11b368 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  11b300:	d0a73903 	ldbu	r2,-25372(gp)
  11b304:	10803fcc 	andi	r2,r2,255
  11b308:	1000171e 	bne	r2,zero,11b368 <OS_Sched+0xa8>
            OS_SchedNew();
  11b30c:	011b3900 	call	11b390 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  11b310:	d0e73b03 	ldbu	r3,-25364(gp)
  11b314:	d0a73b43 	ldbu	r2,-25363(gp)
  11b318:	18c03fcc 	andi	r3,r3,255
  11b31c:	10803fcc 	andi	r2,r2,255
  11b320:	18801126 	beq	r3,r2,11b368 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  11b324:	d0a73b03 	ldbu	r2,-25364(gp)
  11b328:	10c03fcc 	andi	r3,r2,255
  11b32c:	008004f4 	movhi	r2,19
  11b330:	10bb0204 	addi	r2,r2,-5112
  11b334:	18c7883a 	add	r3,r3,r3
  11b338:	18c7883a 	add	r3,r3,r3
  11b33c:	10c5883a 	add	r2,r2,r3
  11b340:	10800017 	ldw	r2,0(r2)
  11b344:	d0a74315 	stw	r2,-25332(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  11b348:	d0a74317 	ldw	r2,-25332(gp)
  11b34c:	10c00e17 	ldw	r3,56(r2)
  11b350:	18c00044 	addi	r3,r3,1
  11b354:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  11b358:	d0a73e17 	ldw	r2,-25352(gp)
  11b35c:	10800044 	addi	r2,r2,1
  11b360:	d0a73e15 	stw	r2,-25352(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  11b364:	0122bb80 	call	122bb8 <OSCtxSw>
  11b368:	e0bffd17 	ldw	r2,-12(fp)
  11b36c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11b370:	e0bffe17 	ldw	r2,-8(fp)
  11b374:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  11b378:	0001883a 	nop
  11b37c:	e037883a 	mov	sp,fp
  11b380:	dfc00117 	ldw	ra,4(sp)
  11b384:	df000017 	ldw	fp,0(sp)
  11b388:	dec00204 	addi	sp,sp,8
  11b38c:	f800283a 	ret

0011b390 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  11b390:	defffe04 	addi	sp,sp,-8
  11b394:	df000115 	stw	fp,4(sp)
  11b398:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  11b39c:	d0a74503 	ldbu	r2,-25324(gp)
  11b3a0:	10c03fcc 	andi	r3,r2,255
  11b3a4:	008004b4 	movhi	r2,18
  11b3a8:	10901704 	addi	r2,r2,16476
  11b3ac:	10c5883a 	add	r2,r2,r3
  11b3b0:	10800003 	ldbu	r2,0(r2)
  11b3b4:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  11b3b8:	e0bfff03 	ldbu	r2,-4(fp)
  11b3bc:	100490fa 	slli	r2,r2,3
  11b3c0:	1009883a 	mov	r4,r2
  11b3c4:	e0ffff03 	ldbu	r3,-4(fp)
  11b3c8:	d0a74544 	addi	r2,gp,-25323
  11b3cc:	1885883a 	add	r2,r3,r2
  11b3d0:	10800003 	ldbu	r2,0(r2)
  11b3d4:	10c03fcc 	andi	r3,r2,255
  11b3d8:	008004b4 	movhi	r2,18
  11b3dc:	10901704 	addi	r2,r2,16476
  11b3e0:	10c5883a 	add	r2,r2,r3
  11b3e4:	10800003 	ldbu	r2,0(r2)
  11b3e8:	2085883a 	add	r2,r4,r2
  11b3ec:	d0a73b05 	stb	r2,-25364(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  11b3f0:	0001883a 	nop
  11b3f4:	e037883a 	mov	sp,fp
  11b3f8:	df000017 	ldw	fp,0(sp)
  11b3fc:	dec00104 	addi	sp,sp,4
  11b400:	f800283a 	ret

0011b404 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  11b404:	defffc04 	addi	sp,sp,-16
  11b408:	df000315 	stw	fp,12(sp)
  11b40c:	df000304 	addi	fp,sp,12
  11b410:	e13ffe15 	stw	r4,-8(fp)
  11b414:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  11b418:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  11b41c:	00000b06 	br	11b44c <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
  11b420:	e0bffe17 	ldw	r2,-8(fp)
  11b424:	10c00044 	addi	r3,r2,1
  11b428:	e0fffe15 	stw	r3,-8(fp)
  11b42c:	e0ffff17 	ldw	r3,-4(fp)
  11b430:	19000044 	addi	r4,r3,1
  11b434:	e13fff15 	stw	r4,-4(fp)
  11b438:	18c00003 	ldbu	r3,0(r3)
  11b43c:	10c00005 	stb	r3,0(r2)
        len++;
  11b440:	e0bffd03 	ldbu	r2,-12(fp)
  11b444:	10800044 	addi	r2,r2,1
  11b448:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  11b44c:	e0bfff17 	ldw	r2,-4(fp)
  11b450:	10800003 	ldbu	r2,0(r2)
  11b454:	10803fcc 	andi	r2,r2,255
  11b458:	103ff11e 	bne	r2,zero,11b420 <__alt_data_end+0xfffdb420>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  11b45c:	e0bffe17 	ldw	r2,-8(fp)
  11b460:	10000005 	stb	zero,0(r2)
    return (len);
  11b464:	e0bffd03 	ldbu	r2,-12(fp)
}
  11b468:	e037883a 	mov	sp,fp
  11b46c:	df000017 	ldw	fp,0(sp)
  11b470:	dec00104 	addi	sp,sp,4
  11b474:	f800283a 	ret

0011b478 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  11b478:	defffd04 	addi	sp,sp,-12
  11b47c:	df000215 	stw	fp,8(sp)
  11b480:	df000204 	addi	fp,sp,8
  11b484:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  11b488:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  11b48c:	00000606 	br	11b4a8 <OS_StrLen+0x30>
        psrc++;
  11b490:	e0bfff17 	ldw	r2,-4(fp)
  11b494:	10800044 	addi	r2,r2,1
  11b498:	e0bfff15 	stw	r2,-4(fp)
        len++;
  11b49c:	e0bffe03 	ldbu	r2,-8(fp)
  11b4a0:	10800044 	addi	r2,r2,1
  11b4a4:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  11b4a8:	e0bfff17 	ldw	r2,-4(fp)
  11b4ac:	10800003 	ldbu	r2,0(r2)
  11b4b0:	10803fcc 	andi	r2,r2,255
  11b4b4:	103ff61e 	bne	r2,zero,11b490 <__alt_data_end+0xfffdb490>
        psrc++;
        len++;
    }
    return (len);
  11b4b8:	e0bffe03 	ldbu	r2,-8(fp)
}
  11b4bc:	e037883a 	mov	sp,fp
  11b4c0:	df000017 	ldw	fp,0(sp)
  11b4c4:	dec00104 	addi	sp,sp,4
  11b4c8:	f800283a 	ret

0011b4cc <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  11b4cc:	defffa04 	addi	sp,sp,-24
  11b4d0:	dfc00515 	stw	ra,20(sp)
  11b4d4:	df000415 	stw	fp,16(sp)
  11b4d8:	df000404 	addi	fp,sp,16
  11b4dc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  11b4e0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11b4e4:	0005303a 	rdctl	r2,status
  11b4e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11b4ec:	e0fffd17 	ldw	r3,-12(fp)
  11b4f0:	00bfff84 	movi	r2,-2
  11b4f4:	1884703a 	and	r2,r3,r2
  11b4f8:	1001703a 	wrctl	status,r2
  
  return context;
  11b4fc:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  11b500:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
  11b504:	d0a73a17 	ldw	r2,-25368(gp)
  11b508:	10800044 	addi	r2,r2,1
  11b50c:	d0a73a15 	stw	r2,-25368(gp)
  11b510:	e0bffc17 	ldw	r2,-16(fp)
  11b514:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11b518:	e0bffe17 	ldw	r2,-8(fp)
  11b51c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  11b520:	0122ecc0 	call	122ecc <OSTaskIdleHook>
    }
  11b524:	003fef06 	br	11b4e4 <__alt_data_end+0xfffdb4e4>

0011b528 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  11b528:	defffa04 	addi	sp,sp,-24
  11b52c:	dfc00515 	stw	ra,20(sp)
  11b530:	df000415 	stw	fp,16(sp)
  11b534:	df000404 	addi	fp,sp,16
  11b538:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  11b53c:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  11b540:	00000206 	br	11b54c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  11b544:	01003204 	movi	r4,200
  11b548:	0120c680 	call	120c68 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  11b54c:	d0a74b03 	ldbu	r2,-25300(gp)
  11b550:	10803fcc 	andi	r2,r2,255
  11b554:	103ffb26 	beq	r2,zero,11b544 <__alt_data_end+0xfffdb544>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  11b558:	d0a73f17 	ldw	r2,-25348(gp)
  11b55c:	01401904 	movi	r5,100
  11b560:	1009883a 	mov	r4,r2
  11b564:	0115fb80 	call	115fb8 <__udivsi3>
  11b568:	d0a73f15 	stw	r2,-25348(gp)
    if (OSIdleCtrMax == 0L) {
  11b56c:	d0a73f17 	ldw	r2,-25348(gp)
  11b570:	1000031e 	bne	r2,zero,11b580 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
  11b574:	d0274105 	stb	zero,-25340(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  11b578:	01003fc4 	movi	r4,255
  11b57c:	01208f00 	call	1208f0 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11b580:	0005303a 	rdctl	r2,status
  11b584:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11b588:	e0fffd17 	ldw	r3,-12(fp)
  11b58c:	00bfff84 	movi	r2,-2
  11b590:	1884703a 	and	r2,r3,r2
  11b594:	1001703a 	wrctl	status,r2
  
  return context;
  11b598:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  11b59c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  11b5a0:	d0a73a17 	ldw	r2,-25368(gp)
  11b5a4:	d0a74c15 	stw	r2,-25296(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  11b5a8:	d0273a15 	stw	zero,-25368(gp)
  11b5ac:	e0bffc17 	ldw	r2,-16(fp)
  11b5b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11b5b4:	e0bffe17 	ldw	r2,-8(fp)
  11b5b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  11b5bc:	d0a74c17 	ldw	r2,-25296(gp)
  11b5c0:	d0e73f17 	ldw	r3,-25348(gp)
  11b5c4:	180b883a 	mov	r5,r3
  11b5c8:	1009883a 	mov	r4,r2
  11b5cc:	0115fb80 	call	115fb8 <__udivsi3>
  11b5d0:	1007883a 	mov	r3,r2
  11b5d4:	00801904 	movi	r2,100
  11b5d8:	10c5c83a 	sub	r2,r2,r3
  11b5dc:	d0a74105 	stb	r2,-25340(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  11b5e0:	0122e4c0 	call	122e4c <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  11b5e4:	011b5f40 	call	11b5f4 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  11b5e8:	01001904 	movi	r4,100
  11b5ec:	0120c680 	call	120c68 <OSTimeDly>
    }
  11b5f0:	003fe306 	br	11b580 <__alt_data_end+0xfffdb580>

0011b5f4 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  11b5f4:	defffa04 	addi	sp,sp,-24
  11b5f8:	dfc00515 	stw	ra,20(sp)
  11b5fc:	df000415 	stw	fp,16(sp)
  11b600:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  11b604:	e03ffc05 	stb	zero,-16(fp)
  11b608:	00002406 	br	11b69c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  11b60c:	e0bffc03 	ldbu	r2,-16(fp)
  11b610:	e0fffe04 	addi	r3,fp,-8
  11b614:	180b883a 	mov	r5,r3
  11b618:	1009883a 	mov	r4,r2
  11b61c:	01207300 	call	120730 <OSTaskStkChk>
  11b620:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  11b624:	e0bffc43 	ldbu	r2,-15(fp)
  11b628:	1000191e 	bne	r2,zero,11b690 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  11b62c:	e0fffc03 	ldbu	r3,-16(fp)
  11b630:	008004f4 	movhi	r2,19
  11b634:	10bb0204 	addi	r2,r2,-5112
  11b638:	18c7883a 	add	r3,r3,r3
  11b63c:	18c7883a 	add	r3,r3,r3
  11b640:	10c5883a 	add	r2,r2,r3
  11b644:	10800017 	ldw	r2,0(r2)
  11b648:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  11b64c:	e0bffd17 	ldw	r2,-12(fp)
  11b650:	10000f26 	beq	r2,zero,11b690 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  11b654:	e0bffd17 	ldw	r2,-12(fp)
  11b658:	10800060 	cmpeqi	r2,r2,1
  11b65c:	10000c1e 	bne	r2,zero,11b690 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  11b660:	e0bffd17 	ldw	r2,-12(fp)
  11b664:	10c00217 	ldw	r3,8(r2)
  11b668:	e0bffd17 	ldw	r2,-12(fp)
  11b66c:	10800317 	ldw	r2,12(r2)
  11b670:	1085883a 	add	r2,r2,r2
  11b674:	1085883a 	add	r2,r2,r2
  11b678:	1887883a 	add	r3,r3,r2
  11b67c:	e0bffd17 	ldw	r2,-12(fp)
  11b680:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  11b684:	e0ffff17 	ldw	r3,-4(fp)
  11b688:	e0bffd17 	ldw	r2,-12(fp)
  11b68c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  11b690:	e0bffc03 	ldbu	r2,-16(fp)
  11b694:	10800044 	addi	r2,r2,1
  11b698:	e0bffc05 	stb	r2,-16(fp)
  11b69c:	e0bffc03 	ldbu	r2,-16(fp)
  11b6a0:	10800570 	cmpltui	r2,r2,21
  11b6a4:	103fd91e 	bne	r2,zero,11b60c <__alt_data_end+0xfffdb60c>
#endif
                }
            }
        }
    }
}
  11b6a8:	0001883a 	nop
  11b6ac:	e037883a 	mov	sp,fp
  11b6b0:	dfc00117 	ldw	ra,4(sp)
  11b6b4:	df000017 	ldw	fp,0(sp)
  11b6b8:	dec00204 	addi	sp,sp,8
  11b6bc:	f800283a 	ret

0011b6c0 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  11b6c0:	defff204 	addi	sp,sp,-56
  11b6c4:	dfc00d15 	stw	ra,52(sp)
  11b6c8:	df000c15 	stw	fp,48(sp)
  11b6cc:	df000c04 	addi	fp,sp,48
  11b6d0:	e17ffc15 	stw	r5,-16(fp)
  11b6d4:	e1bffd15 	stw	r6,-12(fp)
  11b6d8:	3807883a 	mov	r3,r7
  11b6dc:	e0800417 	ldw	r2,16(fp)
  11b6e0:	e13ffb05 	stb	r4,-20(fp)
  11b6e4:	e0fffe0d 	sth	r3,-8(fp)
  11b6e8:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  11b6ec:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11b6f0:	0005303a 	rdctl	r2,status
  11b6f4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11b6f8:	e0fffa17 	ldw	r3,-24(fp)
  11b6fc:	00bfff84 	movi	r2,-2
  11b700:	1884703a 	and	r2,r3,r2
  11b704:	1001703a 	wrctl	status,r2
  
  return context;
  11b708:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
  11b70c:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  11b710:	d0a74017 	ldw	r2,-25344(gp)
  11b714:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
  11b718:	e0bff617 	ldw	r2,-40(fp)
  11b71c:	10009326 	beq	r2,zero,11b96c <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  11b720:	e0bff617 	ldw	r2,-40(fp)
  11b724:	10800517 	ldw	r2,20(r2)
  11b728:	d0a74015 	stw	r2,-25344(gp)
  11b72c:	e0bff417 	ldw	r2,-48(fp)
  11b730:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11b734:	e0bff817 	ldw	r2,-32(fp)
  11b738:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  11b73c:	e0bff617 	ldw	r2,-40(fp)
  11b740:	e0fffc17 	ldw	r3,-16(fp)
  11b744:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  11b748:	e0bff617 	ldw	r2,-40(fp)
  11b74c:	e0fffb03 	ldbu	r3,-20(fp)
  11b750:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  11b754:	e0bff617 	ldw	r2,-40(fp)
  11b758:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  11b75c:	e0bff617 	ldw	r2,-40(fp)
  11b760:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  11b764:	e0bff617 	ldw	r2,-40(fp)
  11b768:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  11b76c:	e0bff617 	ldw	r2,-40(fp)
  11b770:	e0c00317 	ldw	r3,12(fp)
  11b774:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  11b778:	e0bff617 	ldw	r2,-40(fp)
  11b77c:	e0c00217 	ldw	r3,8(fp)
  11b780:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  11b784:	e0bff617 	ldw	r2,-40(fp)
  11b788:	e0fffd17 	ldw	r3,-12(fp)
  11b78c:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  11b790:	e0bff617 	ldw	r2,-40(fp)
  11b794:	e0ffff0b 	ldhu	r3,-4(fp)
  11b798:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  11b79c:	e0bff617 	ldw	r2,-40(fp)
  11b7a0:	e0fffe0b 	ldhu	r3,-8(fp)
  11b7a4:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  11b7a8:	e0bff617 	ldw	r2,-40(fp)
  11b7ac:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  11b7b0:	e0bffb03 	ldbu	r2,-20(fp)
  11b7b4:	1004d0fa 	srli	r2,r2,3
  11b7b8:	1007883a 	mov	r3,r2
  11b7bc:	e0bff617 	ldw	r2,-40(fp)
  11b7c0:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  11b7c4:	e0bffb03 	ldbu	r2,-20(fp)
  11b7c8:	108001cc 	andi	r2,r2,7
  11b7cc:	1007883a 	mov	r3,r2
  11b7d0:	e0bff617 	ldw	r2,-40(fp)
  11b7d4:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  11b7d8:	e0bff617 	ldw	r2,-40(fp)
  11b7dc:	10800d03 	ldbu	r2,52(r2)
  11b7e0:	10803fcc 	andi	r2,r2,255
  11b7e4:	00c00044 	movi	r3,1
  11b7e8:	1884983a 	sll	r2,r3,r2
  11b7ec:	1007883a 	mov	r3,r2
  11b7f0:	e0bff617 	ldw	r2,-40(fp)
  11b7f4:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  11b7f8:	e0bff617 	ldw	r2,-40(fp)
  11b7fc:	10800cc3 	ldbu	r2,51(r2)
  11b800:	10803fcc 	andi	r2,r2,255
  11b804:	00c00044 	movi	r3,1
  11b808:	1884983a 	sll	r2,r3,r2
  11b80c:	1007883a 	mov	r3,r2
  11b810:	e0bff617 	ldw	r2,-40(fp)
  11b814:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  11b818:	e0bff617 	ldw	r2,-40(fp)
  11b81c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  11b820:	e0bff617 	ldw	r2,-40(fp)
  11b824:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  11b828:	e0bff617 	ldw	r2,-40(fp)
  11b82c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  11b830:	e0bff617 	ldw	r2,-40(fp)
  11b834:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  11b838:	e0bff617 	ldw	r2,-40(fp)
  11b83c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  11b840:	e0bff617 	ldw	r2,-40(fp)
  11b844:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  11b848:	e0bff617 	ldw	r2,-40(fp)
  11b84c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  11b850:	e0bff617 	ldw	r2,-40(fp)
  11b854:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  11b858:	e0bff617 	ldw	r2,-40(fp)
  11b85c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  11b860:	e0bff617 	ldw	r2,-40(fp)
  11b864:	00c00fc4 	movi	r3,63
  11b868:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  11b86c:	e0bff617 	ldw	r2,-40(fp)
  11b870:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  11b874:	e13ff617 	ldw	r4,-40(fp)
  11b878:	0122eec0 	call	122eec <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  11b87c:	e13ff617 	ldw	r4,-40(fp)
  11b880:	0122de40 	call	122de4 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11b884:	0005303a 	rdctl	r2,status
  11b888:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11b88c:	e0fff517 	ldw	r3,-44(fp)
  11b890:	00bfff84 	movi	r2,-2
  11b894:	1884703a 	and	r2,r3,r2
  11b898:	1001703a 	wrctl	status,r2
  
  return context;
  11b89c:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  11b8a0:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
  11b8a4:	e0fffb03 	ldbu	r3,-20(fp)
  11b8a8:	008004f4 	movhi	r2,19
  11b8ac:	10bb0204 	addi	r2,r2,-5112
  11b8b0:	18c7883a 	add	r3,r3,r3
  11b8b4:	18c7883a 	add	r3,r3,r3
  11b8b8:	10c5883a 	add	r2,r2,r3
  11b8bc:	e0fff617 	ldw	r3,-40(fp)
  11b8c0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  11b8c4:	d0e73c17 	ldw	r3,-25360(gp)
  11b8c8:	e0bff617 	ldw	r2,-40(fp)
  11b8cc:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  11b8d0:	e0bff617 	ldw	r2,-40(fp)
  11b8d4:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  11b8d8:	d0a73c17 	ldw	r2,-25360(gp)
  11b8dc:	10000326 	beq	r2,zero,11b8ec <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
  11b8e0:	d0a73c17 	ldw	r2,-25360(gp)
  11b8e4:	e0fff617 	ldw	r3,-40(fp)
  11b8e8:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
  11b8ec:	e0bff617 	ldw	r2,-40(fp)
  11b8f0:	d0a73c15 	stw	r2,-25360(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  11b8f4:	e0bff617 	ldw	r2,-40(fp)
  11b8f8:	10c00d83 	ldbu	r3,54(r2)
  11b8fc:	d0a74503 	ldbu	r2,-25324(gp)
  11b900:	1884b03a 	or	r2,r3,r2
  11b904:	d0a74505 	stb	r2,-25324(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  11b908:	e0bff617 	ldw	r2,-40(fp)
  11b90c:	10800d03 	ldbu	r2,52(r2)
  11b910:	10c03fcc 	andi	r3,r2,255
  11b914:	e0bff617 	ldw	r2,-40(fp)
  11b918:	10800d03 	ldbu	r2,52(r2)
  11b91c:	11003fcc 	andi	r4,r2,255
  11b920:	d0a74544 	addi	r2,gp,-25323
  11b924:	2085883a 	add	r2,r4,r2
  11b928:	11000003 	ldbu	r4,0(r2)
  11b92c:	e0bff617 	ldw	r2,-40(fp)
  11b930:	10800d43 	ldbu	r2,53(r2)
  11b934:	2084b03a 	or	r2,r4,r2
  11b938:	1009883a 	mov	r4,r2
  11b93c:	d0a74544 	addi	r2,gp,-25323
  11b940:	1885883a 	add	r2,r3,r2
  11b944:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  11b948:	d0a74143 	ldbu	r2,-25339(gp)
  11b94c:	10800044 	addi	r2,r2,1
  11b950:	d0a74145 	stb	r2,-25339(gp)
  11b954:	e0bff417 	ldw	r2,-48(fp)
  11b958:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11b95c:	e0bff717 	ldw	r2,-36(fp)
  11b960:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  11b964:	0005883a 	mov	r2,zero
  11b968:	00000506 	br	11b980 <OS_TCBInit+0x2c0>
  11b96c:	e0bff417 	ldw	r2,-48(fp)
  11b970:	e0bff915 	stw	r2,-28(fp)
  11b974:	e0bff917 	ldw	r2,-28(fp)
  11b978:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  11b97c:	00801084 	movi	r2,66
}
  11b980:	e037883a 	mov	sp,fp
  11b984:	dfc00117 	ldw	ra,4(sp)
  11b988:	df000017 	ldw	fp,0(sp)
  11b98c:	dec00204 	addi	sp,sp,8
  11b990:	f800283a 	ret

0011b994 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  11b994:	defffe04 	addi	sp,sp,-8
  11b998:	df000115 	stw	fp,4(sp)
  11b99c:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  11b9a0:	d0a01104 	addi	r2,gp,-32700
  11b9a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  11b9a8:	d0a01204 	addi	r2,gp,-32696
  11b9ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  11b9b0:	d0a01384 	addi	r2,gp,-32690
  11b9b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  11b9b8:	d0a01404 	addi	r2,gp,-32688
  11b9bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  11b9c0:	d0a01304 	addi	r2,gp,-32692
  11b9c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  11b9c8:	d0a01484 	addi	r2,gp,-32686
  11b9cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  11b9d0:	d0a01504 	addi	r2,gp,-32684
  11b9d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  11b9d8:	d0a01584 	addi	r2,gp,-32682
  11b9dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  11b9e0:	d0a01604 	addi	r2,gp,-32680
  11b9e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  11b9e8:	d0a01684 	addi	r2,gp,-32678
  11b9ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  11b9f0:	d0a01704 	addi	r2,gp,-32676
  11b9f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  11b9f8:	d0a01784 	addi	r2,gp,-32674
  11b9fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  11ba00:	d0a01804 	addi	r2,gp,-32672
  11ba04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  11ba08:	d0a01884 	addi	r2,gp,-32670
  11ba0c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  11ba10:	d0a01904 	addi	r2,gp,-32668
  11ba14:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  11ba18:	d0a01984 	addi	r2,gp,-32666
  11ba1c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  11ba20:	d0a01a04 	addi	r2,gp,-32664
  11ba24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  11ba28:	d0a01a84 	addi	r2,gp,-32662
  11ba2c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  11ba30:	d0a01b04 	addi	r2,gp,-32660
  11ba34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  11ba38:	d0a01b84 	addi	r2,gp,-32658
  11ba3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  11ba40:	d0a01c04 	addi	r2,gp,-32656
  11ba44:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  11ba48:	d0a01c84 	addi	r2,gp,-32654
  11ba4c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  11ba50:	d0a01d04 	addi	r2,gp,-32652
  11ba54:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  11ba58:	d0a01d84 	addi	r2,gp,-32650
  11ba5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  11ba60:	d0a01e04 	addi	r2,gp,-32648
  11ba64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  11ba68:	d0a01e84 	addi	r2,gp,-32646
  11ba6c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  11ba70:	d0a01f04 	addi	r2,gp,-32644
  11ba74:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  11ba78:	d0a01f84 	addi	r2,gp,-32642
  11ba7c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  11ba80:	d0a02004 	addi	r2,gp,-32640
  11ba84:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  11ba88:	d0a02084 	addi	r2,gp,-32638
  11ba8c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  11ba90:	d0a02104 	addi	r2,gp,-32636
  11ba94:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  11ba98:	d0a02184 	addi	r2,gp,-32634
  11ba9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  11baa0:	d0a02204 	addi	r2,gp,-32632
  11baa4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  11baa8:	d0a02284 	addi	r2,gp,-32630
  11baac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  11bab0:	d0a02304 	addi	r2,gp,-32628
  11bab4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  11bab8:	d0a02384 	addi	r2,gp,-32626
  11babc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  11bac0:	d0a02404 	addi	r2,gp,-32624
  11bac4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  11bac8:	d0a02484 	addi	r2,gp,-32622
  11bacc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  11bad0:	d0a02504 	addi	r2,gp,-32620
  11bad4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  11bad8:	d0a02584 	addi	r2,gp,-32618
  11badc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  11bae0:	d0a02604 	addi	r2,gp,-32616
  11bae4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  11bae8:	d0a02684 	addi	r2,gp,-32614
  11baec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  11baf0:	d0a02704 	addi	r2,gp,-32612
  11baf4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  11baf8:	d0a02784 	addi	r2,gp,-32610
  11bafc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  11bb00:	d0a02804 	addi	r2,gp,-32608
  11bb04:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  11bb08:	d0a02d04 	addi	r2,gp,-32588
  11bb0c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  11bb10:	0001883a 	nop
  11bb14:	e037883a 	mov	sp,fp
  11bb18:	df000017 	ldw	fp,0(sp)
  11bb1c:	dec00104 	addi	sp,sp,4
  11bb20:	f800283a 	ret

0011bb24 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  11bb24:	defff204 	addi	sp,sp,-56
  11bb28:	df000d15 	stw	fp,52(sp)
  11bb2c:	df000d04 	addi	fp,sp,52
  11bb30:	e13ffc15 	stw	r4,-16(fp)
  11bb34:	2807883a 	mov	r3,r5
  11bb38:	3005883a 	mov	r2,r6
  11bb3c:	e1ffff15 	stw	r7,-4(fp)
  11bb40:	e0fffd0d 	sth	r3,-12(fp)
  11bb44:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  11bb48:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  11bb4c:	e0bfff17 	ldw	r2,-4(fp)
  11bb50:	1000021e 	bne	r2,zero,11bb5c <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
  11bb54:	0005883a 	mov	r2,zero
  11bb58:	0000b006 	br	11be1c <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  11bb5c:	e0bffc17 	ldw	r2,-16(fp)
  11bb60:	1000051e 	bne	r2,zero,11bb78 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  11bb64:	e0bfff17 	ldw	r2,-4(fp)
  11bb68:	00c01b84 	movi	r3,110
  11bb6c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  11bb70:	0005883a 	mov	r2,zero
  11bb74:	0000a906 	br	11be1c <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  11bb78:	e0bffc17 	ldw	r2,-16(fp)
  11bb7c:	10800003 	ldbu	r2,0(r2)
  11bb80:	10803fcc 	andi	r2,r2,255
  11bb84:	10800160 	cmpeqi	r2,r2,5
  11bb88:	1000051e 	bne	r2,zero,11bba0 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  11bb8c:	e0bfff17 	ldw	r2,-4(fp)
  11bb90:	00c00044 	movi	r3,1
  11bb94:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  11bb98:	0005883a 	mov	r2,zero
  11bb9c:	00009f06 	br	11be1c <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  11bba0:	e0fffe03 	ldbu	r3,-8(fp)
  11bba4:	00bfe004 	movi	r2,-128
  11bba8:	1884703a 	and	r2,r3,r2
  11bbac:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  11bbb0:	e0bff503 	ldbu	r2,-44(fp)
  11bbb4:	10000626 	beq	r2,zero,11bbd0 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
  11bbb8:	e0bffe03 	ldbu	r2,-8(fp)
  11bbbc:	10801fcc 	andi	r2,r2,127
  11bbc0:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
  11bbc4:	00800044 	movi	r2,1
  11bbc8:	e0bff385 	stb	r2,-50(fp)
  11bbcc:	00000106 	br	11bbd4 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
  11bbd0:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  11bbd4:	e0bfff17 	ldw	r2,-4(fp)
  11bbd8:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11bbdc:	0005303a 	rdctl	r2,status
  11bbe0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11bbe4:	e0fffb17 	ldw	r3,-20(fp)
  11bbe8:	00bfff84 	movi	r2,-2
  11bbec:	1884703a 	and	r2,r3,r2
  11bbf0:	1001703a 	wrctl	status,r2
  
  return context;
  11bbf4:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
  11bbf8:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
  11bbfc:	e0bffe03 	ldbu	r2,-8(fp)
  11bc00:	10c00060 	cmpeqi	r3,r2,1
  11bc04:	18005f1e 	bne	r3,zero,11bd84 <OSFlagAccept+0x260>
  11bc08:	10c00088 	cmpgei	r3,r2,2
  11bc0c:	1800021e 	bne	r3,zero,11bc18 <OSFlagAccept+0xf4>
  11bc10:	10003f26 	beq	r2,zero,11bd10 <OSFlagAccept+0x1ec>
  11bc14:	00007706 	br	11bdf4 <OSFlagAccept+0x2d0>
  11bc18:	10c000a0 	cmpeqi	r3,r2,2
  11bc1c:	1800031e 	bne	r3,zero,11bc2c <OSFlagAccept+0x108>
  11bc20:	108000e0 	cmpeqi	r2,r2,3
  11bc24:	10001e1e 	bne	r2,zero,11bca0 <OSFlagAccept+0x17c>
  11bc28:	00007206 	br	11bdf4 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  11bc2c:	e0bffc17 	ldw	r2,-16(fp)
  11bc30:	10c0020b 	ldhu	r3,8(r2)
  11bc34:	e0bffd0b 	ldhu	r2,-12(fp)
  11bc38:	1884703a 	and	r2,r3,r2
  11bc3c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  11bc40:	e0fff30b 	ldhu	r3,-52(fp)
  11bc44:	e0bffd0b 	ldhu	r2,-12(fp)
  11bc48:	18800d1e 	bne	r3,r2,11bc80 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  11bc4c:	e0bff383 	ldbu	r2,-50(fp)
  11bc50:	10800058 	cmpnei	r2,r2,1
  11bc54:	10000d1e 	bne	r2,zero,11bc8c <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  11bc58:	e0bffc17 	ldw	r2,-16(fp)
  11bc5c:	1080020b 	ldhu	r2,8(r2)
  11bc60:	1007883a 	mov	r3,r2
  11bc64:	e0bff30b 	ldhu	r2,-52(fp)
  11bc68:	0084303a 	nor	r2,zero,r2
  11bc6c:	1884703a 	and	r2,r3,r2
  11bc70:	1007883a 	mov	r3,r2
  11bc74:	e0bffc17 	ldw	r2,-16(fp)
  11bc78:	10c0020d 	sth	r3,8(r2)
  11bc7c:	00000306 	br	11bc8c <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  11bc80:	e0bfff17 	ldw	r2,-4(fp)
  11bc84:	00c01c04 	movi	r3,112
  11bc88:	10c00005 	stb	r3,0(r2)
  11bc8c:	e0bff417 	ldw	r2,-48(fp)
  11bc90:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11bc94:	e0bff617 	ldw	r2,-40(fp)
  11bc98:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  11bc9c:	00005e06 	br	11be18 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  11bca0:	e0bffc17 	ldw	r2,-16(fp)
  11bca4:	10c0020b 	ldhu	r3,8(r2)
  11bca8:	e0bffd0b 	ldhu	r2,-12(fp)
  11bcac:	1884703a 	and	r2,r3,r2
  11bcb0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  11bcb4:	e0bff30b 	ldhu	r2,-52(fp)
  11bcb8:	10000d26 	beq	r2,zero,11bcf0 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  11bcbc:	e0bff383 	ldbu	r2,-50(fp)
  11bcc0:	10800058 	cmpnei	r2,r2,1
  11bcc4:	10000d1e 	bne	r2,zero,11bcfc <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  11bcc8:	e0bffc17 	ldw	r2,-16(fp)
  11bccc:	1080020b 	ldhu	r2,8(r2)
  11bcd0:	1007883a 	mov	r3,r2
  11bcd4:	e0bff30b 	ldhu	r2,-52(fp)
  11bcd8:	0084303a 	nor	r2,zero,r2
  11bcdc:	1884703a 	and	r2,r3,r2
  11bce0:	1007883a 	mov	r3,r2
  11bce4:	e0bffc17 	ldw	r2,-16(fp)
  11bce8:	10c0020d 	sth	r3,8(r2)
  11bcec:	00000306 	br	11bcfc <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  11bcf0:	e0bfff17 	ldw	r2,-4(fp)
  11bcf4:	00c01c04 	movi	r3,112
  11bcf8:	10c00005 	stb	r3,0(r2)
  11bcfc:	e0bff417 	ldw	r2,-48(fp)
  11bd00:	e0bff715 	stw	r2,-36(fp)
  11bd04:	e0bff717 	ldw	r2,-36(fp)
  11bd08:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  11bd0c:	00004206 	br	11be18 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  11bd10:	e0bffc17 	ldw	r2,-16(fp)
  11bd14:	1080020b 	ldhu	r2,8(r2)
  11bd18:	0084303a 	nor	r2,zero,r2
  11bd1c:	1007883a 	mov	r3,r2
  11bd20:	e0bffd0b 	ldhu	r2,-12(fp)
  11bd24:	1884703a 	and	r2,r3,r2
  11bd28:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  11bd2c:	e0fff30b 	ldhu	r3,-52(fp)
  11bd30:	e0bffd0b 	ldhu	r2,-12(fp)
  11bd34:	18800b1e 	bne	r3,r2,11bd64 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  11bd38:	e0bff383 	ldbu	r2,-50(fp)
  11bd3c:	10800058 	cmpnei	r2,r2,1
  11bd40:	10000b1e 	bne	r2,zero,11bd70 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  11bd44:	e0bffc17 	ldw	r2,-16(fp)
  11bd48:	10c0020b 	ldhu	r3,8(r2)
  11bd4c:	e0bff30b 	ldhu	r2,-52(fp)
  11bd50:	1884b03a 	or	r2,r3,r2
  11bd54:	1007883a 	mov	r3,r2
  11bd58:	e0bffc17 	ldw	r2,-16(fp)
  11bd5c:	10c0020d 	sth	r3,8(r2)
  11bd60:	00000306 	br	11bd70 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  11bd64:	e0bfff17 	ldw	r2,-4(fp)
  11bd68:	00c01c04 	movi	r3,112
  11bd6c:	10c00005 	stb	r3,0(r2)
  11bd70:	e0bff417 	ldw	r2,-48(fp)
  11bd74:	e0bff815 	stw	r2,-32(fp)
  11bd78:	e0bff817 	ldw	r2,-32(fp)
  11bd7c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  11bd80:	00002506 	br	11be18 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  11bd84:	e0bffc17 	ldw	r2,-16(fp)
  11bd88:	1080020b 	ldhu	r2,8(r2)
  11bd8c:	0084303a 	nor	r2,zero,r2
  11bd90:	1007883a 	mov	r3,r2
  11bd94:	e0bffd0b 	ldhu	r2,-12(fp)
  11bd98:	1884703a 	and	r2,r3,r2
  11bd9c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  11bda0:	e0bff30b 	ldhu	r2,-52(fp)
  11bda4:	10000b26 	beq	r2,zero,11bdd4 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  11bda8:	e0bff383 	ldbu	r2,-50(fp)
  11bdac:	10800058 	cmpnei	r2,r2,1
  11bdb0:	10000b1e 	bne	r2,zero,11bde0 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  11bdb4:	e0bffc17 	ldw	r2,-16(fp)
  11bdb8:	10c0020b 	ldhu	r3,8(r2)
  11bdbc:	e0bff30b 	ldhu	r2,-52(fp)
  11bdc0:	1884b03a 	or	r2,r3,r2
  11bdc4:	1007883a 	mov	r3,r2
  11bdc8:	e0bffc17 	ldw	r2,-16(fp)
  11bdcc:	10c0020d 	sth	r3,8(r2)
  11bdd0:	00000306 	br	11bde0 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  11bdd4:	e0bfff17 	ldw	r2,-4(fp)
  11bdd8:	00c01c04 	movi	r3,112
  11bddc:	10c00005 	stb	r3,0(r2)
  11bde0:	e0bff417 	ldw	r2,-48(fp)
  11bde4:	e0bff915 	stw	r2,-28(fp)
  11bde8:	e0bff917 	ldw	r2,-28(fp)
  11bdec:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  11bdf0:	00000906 	br	11be18 <OSFlagAccept+0x2f4>
  11bdf4:	e0bff417 	ldw	r2,-48(fp)
  11bdf8:	e0bffa15 	stw	r2,-24(fp)
  11bdfc:	e0bffa17 	ldw	r2,-24(fp)
  11be00:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  11be04:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  11be08:	e0bfff17 	ldw	r2,-4(fp)
  11be0c:	00c01bc4 	movi	r3,111
  11be10:	10c00005 	stb	r3,0(r2)
             break;
  11be14:	0001883a 	nop
    }
    return (flags_rdy);
  11be18:	e0bff30b 	ldhu	r2,-52(fp)
}
  11be1c:	e037883a 	mov	sp,fp
  11be20:	df000017 	ldw	fp,0(sp)
  11be24:	dec00104 	addi	sp,sp,4
  11be28:	f800283a 	ret

0011be2c <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  11be2c:	defff804 	addi	sp,sp,-32
  11be30:	df000715 	stw	fp,28(sp)
  11be34:	df000704 	addi	fp,sp,28
  11be38:	2005883a 	mov	r2,r4
  11be3c:	e17fff15 	stw	r5,-4(fp)
  11be40:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  11be44:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  11be48:	e0bfff17 	ldw	r2,-4(fp)
  11be4c:	1000021e 	bne	r2,zero,11be58 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  11be50:	0005883a 	mov	r2,zero
  11be54:	00003306 	br	11bf24 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  11be58:	d0a74703 	ldbu	r2,-25316(gp)
  11be5c:	10803fcc 	andi	r2,r2,255
  11be60:	10000526 	beq	r2,zero,11be78 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  11be64:	e0bfff17 	ldw	r2,-4(fp)
  11be68:	00c00404 	movi	r3,16
  11be6c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
  11be70:	0005883a 	mov	r2,zero
  11be74:	00002b06 	br	11bf24 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11be78:	0005303a 	rdctl	r2,status
  11be7c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11be80:	e0fffd17 	ldw	r3,-12(fp)
  11be84:	00bfff84 	movi	r2,-2
  11be88:	1884703a 	and	r2,r3,r2
  11be8c:	1001703a 	wrctl	status,r2
  
  return context;
  11be90:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  11be94:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  11be98:	d0a74a17 	ldw	r2,-25304(gp)
  11be9c:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  11bea0:	e0bffb17 	ldw	r2,-20(fp)
  11bea4:	10001726 	beq	r2,zero,11bf04 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  11bea8:	d0a74a17 	ldw	r2,-25304(gp)
  11beac:	10800117 	ldw	r2,4(r2)
  11beb0:	d0a74a15 	stw	r2,-25304(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  11beb4:	e0bffb17 	ldw	r2,-20(fp)
  11beb8:	00c00144 	movi	r3,5
  11bebc:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  11bec0:	e0bffb17 	ldw	r2,-20(fp)
  11bec4:	e0fffe0b 	ldhu	r3,-8(fp)
  11bec8:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  11becc:	e0bffb17 	ldw	r2,-20(fp)
  11bed0:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  11bed4:	e0bffb17 	ldw	r2,-20(fp)
  11bed8:	00c00fc4 	movi	r3,63
  11bedc:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  11bee0:	e0bffb17 	ldw	r2,-20(fp)
  11bee4:	100002c5 	stb	zero,11(r2)
  11bee8:	e0bff917 	ldw	r2,-28(fp)
  11beec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11bef0:	e0bffa17 	ldw	r2,-24(fp)
  11bef4:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  11bef8:	e0bfff17 	ldw	r2,-4(fp)
  11befc:	10000005 	stb	zero,0(r2)
  11bf00:	00000706 	br	11bf20 <OSFlagCreate+0xf4>
  11bf04:	e0bff917 	ldw	r2,-28(fp)
  11bf08:	e0bffc15 	stw	r2,-16(fp)
  11bf0c:	e0bffc17 	ldw	r2,-16(fp)
  11bf10:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  11bf14:	e0bfff17 	ldw	r2,-4(fp)
  11bf18:	00c01c84 	movi	r3,114
  11bf1c:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  11bf20:	e0bffb17 	ldw	r2,-20(fp)
}
  11bf24:	e037883a 	mov	sp,fp
  11bf28:	df000017 	ldw	fp,0(sp)
  11bf2c:	dec00104 	addi	sp,sp,4
  11bf30:	f800283a 	ret

0011bf34 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  11bf34:	defff204 	addi	sp,sp,-56
  11bf38:	dfc00d15 	stw	ra,52(sp)
  11bf3c:	df000c15 	stw	fp,48(sp)
  11bf40:	df000c04 	addi	fp,sp,48
  11bf44:	e13ffd15 	stw	r4,-12(fp)
  11bf48:	2805883a 	mov	r2,r5
  11bf4c:	e1bfff15 	stw	r6,-4(fp)
  11bf50:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  11bf54:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  11bf58:	e0bfff17 	ldw	r2,-4(fp)
  11bf5c:	1000021e 	bne	r2,zero,11bf68 <OSFlagDel+0x34>
        return (pgrp);
  11bf60:	e0bffd17 	ldw	r2,-12(fp)
  11bf64:	00008006 	br	11c168 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  11bf68:	e0bffd17 	ldw	r2,-12(fp)
  11bf6c:	1000051e 	bne	r2,zero,11bf84 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  11bf70:	e0bfff17 	ldw	r2,-4(fp)
  11bf74:	00c01b84 	movi	r3,110
  11bf78:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  11bf7c:	e0bffd17 	ldw	r2,-12(fp)
  11bf80:	00007906 	br	11c168 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  11bf84:	d0a74703 	ldbu	r2,-25316(gp)
  11bf88:	10803fcc 	andi	r2,r2,255
  11bf8c:	10000526 	beq	r2,zero,11bfa4 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  11bf90:	e0bfff17 	ldw	r2,-4(fp)
  11bf94:	00c003c4 	movi	r3,15
  11bf98:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  11bf9c:	e0bffd17 	ldw	r2,-12(fp)
  11bfa0:	00007106 	br	11c168 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  11bfa4:	e0bffd17 	ldw	r2,-12(fp)
  11bfa8:	10800003 	ldbu	r2,0(r2)
  11bfac:	10803fcc 	andi	r2,r2,255
  11bfb0:	10800160 	cmpeqi	r2,r2,5
  11bfb4:	1000051e 	bne	r2,zero,11bfcc <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
  11bfb8:	e0bfff17 	ldw	r2,-4(fp)
  11bfbc:	00c00044 	movi	r3,1
  11bfc0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  11bfc4:	e0bffd17 	ldw	r2,-12(fp)
  11bfc8:	00006706 	br	11c168 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11bfcc:	0005303a 	rdctl	r2,status
  11bfd0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11bfd4:	e0fffc17 	ldw	r3,-16(fp)
  11bfd8:	00bfff84 	movi	r2,-2
  11bfdc:	1884703a 	and	r2,r3,r2
  11bfe0:	1001703a 	wrctl	status,r2
  
  return context;
  11bfe4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  11bfe8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  11bfec:	e0bffd17 	ldw	r2,-12(fp)
  11bff0:	10800117 	ldw	r2,4(r2)
  11bff4:	10000326 	beq	r2,zero,11c004 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  11bff8:	00800044 	movi	r2,1
  11bffc:	e0bff405 	stb	r2,-48(fp)
  11c000:	00000106 	br	11c008 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  11c004:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
  11c008:	e0bffe03 	ldbu	r2,-8(fp)
  11c00c:	10000326 	beq	r2,zero,11c01c <OSFlagDel+0xe8>
  11c010:	10800060 	cmpeqi	r2,r2,1
  11c014:	1000231e 	bne	r2,zero,11c0a4 <OSFlagDel+0x170>
  11c018:	00004806 	br	11c13c <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  11c01c:	e0bff403 	ldbu	r2,-48(fp)
  11c020:	1000161e 	bne	r2,zero,11c07c <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  11c024:	e0bffd17 	ldw	r2,-12(fp)
  11c028:	00c00fc4 	movi	r3,63
  11c02c:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  11c030:	e0bffd17 	ldw	r2,-12(fp)
  11c034:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  11c038:	e0bffd17 	ldw	r2,-12(fp)
  11c03c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  11c040:	d0e74a17 	ldw	r3,-25304(gp)
  11c044:	e0bffd17 	ldw	r2,-12(fp)
  11c048:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  11c04c:	e0bffd17 	ldw	r2,-12(fp)
  11c050:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  11c054:	e0bffd17 	ldw	r2,-12(fp)
  11c058:	d0a74a15 	stw	r2,-25304(gp)
  11c05c:	e0bff717 	ldw	r2,-36(fp)
  11c060:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11c064:	e0bff817 	ldw	r2,-32(fp)
  11c068:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  11c06c:	e0bfff17 	ldw	r2,-4(fp)
  11c070:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  11c074:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
  11c078:	00003a06 	br	11c164 <OSFlagDel+0x230>
  11c07c:	e0bff717 	ldw	r2,-36(fp)
  11c080:	e0bff915 	stw	r2,-28(fp)
  11c084:	e0bff917 	ldw	r2,-28(fp)
  11c088:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  11c08c:	e0bfff17 	ldw	r2,-4(fp)
  11c090:	00c01244 	movi	r3,73
  11c094:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
  11c098:	e0bffd17 	ldw	r2,-12(fp)
  11c09c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
  11c0a0:	00003006 	br	11c164 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  11c0a4:	e0bffd17 	ldw	r2,-12(fp)
  11c0a8:	10800117 	ldw	r2,4(r2)
  11c0ac:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  11c0b0:	00000606 	br	11c0cc <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  11c0b4:	000b883a 	mov	r5,zero
  11c0b8:	e13ff517 	ldw	r4,-44(fp)
  11c0bc:	011d0a00 	call	11d0a0 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  11c0c0:	e0bff517 	ldw	r2,-44(fp)
  11c0c4:	10800017 	ldw	r2,0(r2)
  11c0c8:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  11c0cc:	e0bff517 	ldw	r2,-44(fp)
  11c0d0:	103ff81e 	bne	r2,zero,11c0b4 <__alt_data_end+0xfffdc0b4>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  11c0d4:	e0bffd17 	ldw	r2,-12(fp)
  11c0d8:	00c00fc4 	movi	r3,63
  11c0dc:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  11c0e0:	e0bffd17 	ldw	r2,-12(fp)
  11c0e4:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  11c0e8:	e0bffd17 	ldw	r2,-12(fp)
  11c0ec:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  11c0f0:	d0e74a17 	ldw	r3,-25304(gp)
  11c0f4:	e0bffd17 	ldw	r2,-12(fp)
  11c0f8:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  11c0fc:	e0bffd17 	ldw	r2,-12(fp)
  11c100:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  11c104:	e0bffd17 	ldw	r2,-12(fp)
  11c108:	d0a74a15 	stw	r2,-25304(gp)
  11c10c:	e0bff717 	ldw	r2,-36(fp)
  11c110:	e0bffa15 	stw	r2,-24(fp)
  11c114:	e0bffa17 	ldw	r2,-24(fp)
  11c118:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  11c11c:	e0bff403 	ldbu	r2,-48(fp)
  11c120:	10800058 	cmpnei	r2,r2,1
  11c124:	1000011e 	bne	r2,zero,11c12c <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  11c128:	011b2c00 	call	11b2c0 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  11c12c:	e0bfff17 	ldw	r2,-4(fp)
  11c130:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  11c134:	e03ff615 	stw	zero,-40(fp)
             break;
  11c138:	00000a06 	br	11c164 <OSFlagDel+0x230>
  11c13c:	e0bff717 	ldw	r2,-36(fp)
  11c140:	e0bffb15 	stw	r2,-20(fp)
  11c144:	e0bffb17 	ldw	r2,-20(fp)
  11c148:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  11c14c:	e0bfff17 	ldw	r2,-4(fp)
  11c150:	00c001c4 	movi	r3,7
  11c154:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
  11c158:	e0bffd17 	ldw	r2,-12(fp)
  11c15c:	e0bff615 	stw	r2,-40(fp)
             break;
  11c160:	0001883a 	nop
    }
    return (pgrp_return);
  11c164:	e0bff617 	ldw	r2,-40(fp)
}
  11c168:	e037883a 	mov	sp,fp
  11c16c:	dfc00117 	ldw	ra,4(sp)
  11c170:	df000017 	ldw	fp,0(sp)
  11c174:	dec00204 	addi	sp,sp,8
  11c178:	f800283a 	ret

0011c17c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  11c17c:	defff604 	addi	sp,sp,-40
  11c180:	dfc00915 	stw	ra,36(sp)
  11c184:	df000815 	stw	fp,32(sp)
  11c188:	df000804 	addi	fp,sp,32
  11c18c:	e13ffd15 	stw	r4,-12(fp)
  11c190:	e17ffe15 	stw	r5,-8(fp)
  11c194:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  11c198:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  11c19c:	e0bfff17 	ldw	r2,-4(fp)
  11c1a0:	1000021e 	bne	r2,zero,11c1ac <OSFlagNameGet+0x30>
        return (0);
  11c1a4:	0005883a 	mov	r2,zero
  11c1a8:	00003906 	br	11c290 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  11c1ac:	e0bffd17 	ldw	r2,-12(fp)
  11c1b0:	1000051e 	bne	r2,zero,11c1c8 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  11c1b4:	e0bfff17 	ldw	r2,-4(fp)
  11c1b8:	00c01b84 	movi	r3,110
  11c1bc:	10c00005 	stb	r3,0(r2)
        return (0);
  11c1c0:	0005883a 	mov	r2,zero
  11c1c4:	00003206 	br	11c290 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  11c1c8:	e0bffe17 	ldw	r2,-8(fp)
  11c1cc:	1000051e 	bne	r2,zero,11c1e4 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  11c1d0:	e0bfff17 	ldw	r2,-4(fp)
  11c1d4:	00c00304 	movi	r3,12
  11c1d8:	10c00005 	stb	r3,0(r2)
        return (0);
  11c1dc:	0005883a 	mov	r2,zero
  11c1e0:	00002b06 	br	11c290 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  11c1e4:	d0a74703 	ldbu	r2,-25316(gp)
  11c1e8:	10803fcc 	andi	r2,r2,255
  11c1ec:	10000526 	beq	r2,zero,11c204 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
  11c1f0:	e0bfff17 	ldw	r2,-4(fp)
  11c1f4:	00c00444 	movi	r3,17
  11c1f8:	10c00005 	stb	r3,0(r2)
        return (0);
  11c1fc:	0005883a 	mov	r2,zero
  11c200:	00002306 	br	11c290 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11c204:	0005303a 	rdctl	r2,status
  11c208:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11c20c:	e0fffc17 	ldw	r3,-16(fp)
  11c210:	00bfff84 	movi	r2,-2
  11c214:	1884703a 	and	r2,r3,r2
  11c218:	1001703a 	wrctl	status,r2
  
  return context;
  11c21c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  11c220:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  11c224:	e0bffd17 	ldw	r2,-12(fp)
  11c228:	10800003 	ldbu	r2,0(r2)
  11c22c:	10803fcc 	andi	r2,r2,255
  11c230:	10800160 	cmpeqi	r2,r2,5
  11c234:	1000091e 	bne	r2,zero,11c25c <OSFlagNameGet+0xe0>
  11c238:	e0bff817 	ldw	r2,-32(fp)
  11c23c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11c240:	e0bff917 	ldw	r2,-28(fp)
  11c244:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  11c248:	e0bfff17 	ldw	r2,-4(fp)
  11c24c:	00c00044 	movi	r3,1
  11c250:	10c00005 	stb	r3,0(r2)
        return (0);
  11c254:	0005883a 	mov	r2,zero
  11c258:	00000d06 	br	11c290 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  11c25c:	e0bffd17 	ldw	r2,-12(fp)
  11c260:	10800284 	addi	r2,r2,10
  11c264:	100b883a 	mov	r5,r2
  11c268:	e13ffe17 	ldw	r4,-8(fp)
  11c26c:	011b4040 	call	11b404 <OS_StrCopy>
  11c270:	e0bffb05 	stb	r2,-20(fp)
  11c274:	e0bff817 	ldw	r2,-32(fp)
  11c278:	e0bffa15 	stw	r2,-24(fp)
  11c27c:	e0bffa17 	ldw	r2,-24(fp)
  11c280:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  11c284:	e0bfff17 	ldw	r2,-4(fp)
  11c288:	10000005 	stb	zero,0(r2)
    return (len);
  11c28c:	e0bffb03 	ldbu	r2,-20(fp)
}
  11c290:	e037883a 	mov	sp,fp
  11c294:	dfc00117 	ldw	ra,4(sp)
  11c298:	df000017 	ldw	fp,0(sp)
  11c29c:	dec00204 	addi	sp,sp,8
  11c2a0:	f800283a 	ret

0011c2a4 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  11c2a4:	defff504 	addi	sp,sp,-44
  11c2a8:	dfc00a15 	stw	ra,40(sp)
  11c2ac:	df000915 	stw	fp,36(sp)
  11c2b0:	df000904 	addi	fp,sp,36
  11c2b4:	e13ffd15 	stw	r4,-12(fp)
  11c2b8:	e17ffe15 	stw	r5,-8(fp)
  11c2bc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  11c2c0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  11c2c4:	e0bfff17 	ldw	r2,-4(fp)
  11c2c8:	10004326 	beq	r2,zero,11c3d8 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  11c2cc:	e0bffd17 	ldw	r2,-12(fp)
  11c2d0:	1000041e 	bne	r2,zero,11c2e4 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  11c2d4:	e0bfff17 	ldw	r2,-4(fp)
  11c2d8:	00c01b84 	movi	r3,110
  11c2dc:	10c00005 	stb	r3,0(r2)
        return;
  11c2e0:	00003e06 	br	11c3dc <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  11c2e4:	e0bffe17 	ldw	r2,-8(fp)
  11c2e8:	1000041e 	bne	r2,zero,11c2fc <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  11c2ec:	e0bfff17 	ldw	r2,-4(fp)
  11c2f0:	00c00304 	movi	r3,12
  11c2f4:	10c00005 	stb	r3,0(r2)
        return;
  11c2f8:	00003806 	br	11c3dc <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  11c2fc:	d0a74703 	ldbu	r2,-25316(gp)
  11c300:	10803fcc 	andi	r2,r2,255
  11c304:	10000426 	beq	r2,zero,11c318 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  11c308:	e0bfff17 	ldw	r2,-4(fp)
  11c30c:	00c00484 	movi	r3,18
  11c310:	10c00005 	stb	r3,0(r2)
        return;
  11c314:	00003106 	br	11c3dc <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11c318:	0005303a 	rdctl	r2,status
  11c31c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11c320:	e0fffc17 	ldw	r3,-16(fp)
  11c324:	00bfff84 	movi	r2,-2
  11c328:	1884703a 	and	r2,r3,r2
  11c32c:	1001703a 	wrctl	status,r2
  
  return context;
  11c330:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  11c334:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  11c338:	e0bffd17 	ldw	r2,-12(fp)
  11c33c:	10800003 	ldbu	r2,0(r2)
  11c340:	10803fcc 	andi	r2,r2,255
  11c344:	10800160 	cmpeqi	r2,r2,5
  11c348:	1000081e 	bne	r2,zero,11c36c <OSFlagNameSet+0xc8>
  11c34c:	e0bff717 	ldw	r2,-36(fp)
  11c350:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11c354:	e0bff817 	ldw	r2,-32(fp)
  11c358:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  11c35c:	e0bfff17 	ldw	r2,-4(fp)
  11c360:	00c00044 	movi	r3,1
  11c364:	10c00005 	stb	r3,0(r2)
        return;
  11c368:	00001c06 	br	11c3dc <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  11c36c:	e13ffe17 	ldw	r4,-8(fp)
  11c370:	011b4780 	call	11b478 <OS_StrLen>
  11c374:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  11c378:	e0bffa03 	ldbu	r2,-24(fp)
  11c37c:	10800830 	cmpltui	r2,r2,32
  11c380:	1000081e 	bne	r2,zero,11c3a4 <OSFlagNameSet+0x100>
  11c384:	e0bff717 	ldw	r2,-36(fp)
  11c388:	e0bff915 	stw	r2,-28(fp)
  11c38c:	e0bff917 	ldw	r2,-28(fp)
  11c390:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  11c394:	e0bfff17 	ldw	r2,-4(fp)
  11c398:	00c01cc4 	movi	r3,115
  11c39c:	10c00005 	stb	r3,0(r2)
        return;
  11c3a0:	00000e06 	br	11c3dc <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  11c3a4:	e0bffd17 	ldw	r2,-12(fp)
  11c3a8:	10800284 	addi	r2,r2,10
  11c3ac:	e17ffe17 	ldw	r5,-8(fp)
  11c3b0:	1009883a 	mov	r4,r2
  11c3b4:	011b4040 	call	11b404 <OS_StrCopy>
  11c3b8:	e0bff717 	ldw	r2,-36(fp)
  11c3bc:	e0bffb15 	stw	r2,-20(fp)
  11c3c0:	e0bffb17 	ldw	r2,-20(fp)
  11c3c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  11c3c8:	e0bfff17 	ldw	r2,-4(fp)
  11c3cc:	10000005 	stb	zero,0(r2)
    return;
  11c3d0:	0001883a 	nop
  11c3d4:	00000106 	br	11c3dc <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  11c3d8:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
  11c3dc:	e037883a 	mov	sp,fp
  11c3e0:	dfc00117 	ldw	ra,4(sp)
  11c3e4:	df000017 	ldw	fp,0(sp)
  11c3e8:	dec00204 	addi	sp,sp,8
  11c3ec:	f800283a 	ret

0011c3f0 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  11c3f0:	deffe104 	addi	sp,sp,-124
  11c3f4:	dfc01e15 	stw	ra,120(sp)
  11c3f8:	df001d15 	stw	fp,116(sp)
  11c3fc:	df001d04 	addi	fp,sp,116
  11c400:	e13ffc15 	stw	r4,-16(fp)
  11c404:	2809883a 	mov	r4,r5
  11c408:	3007883a 	mov	r3,r6
  11c40c:	3805883a 	mov	r2,r7
  11c410:	e13ffd0d 	sth	r4,-12(fp)
  11c414:	e0fffe05 	stb	r3,-8(fp)
  11c418:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  11c41c:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  11c420:	e0800217 	ldw	r2,8(fp)
  11c424:	1000021e 	bne	r2,zero,11c430 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
  11c428:	0005883a 	mov	r2,zero
  11c42c:	00015906 	br	11c994 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  11c430:	e0bffc17 	ldw	r2,-16(fp)
  11c434:	1000051e 	bne	r2,zero,11c44c <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  11c438:	e0800217 	ldw	r2,8(fp)
  11c43c:	00c01b84 	movi	r3,110
  11c440:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  11c444:	0005883a 	mov	r2,zero
  11c448:	00015206 	br	11c994 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  11c44c:	d0a74703 	ldbu	r2,-25316(gp)
  11c450:	10803fcc 	andi	r2,r2,255
  11c454:	10000526 	beq	r2,zero,11c46c <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  11c458:	e0800217 	ldw	r2,8(fp)
  11c45c:	00c00084 	movi	r3,2
  11c460:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  11c464:	0005883a 	mov	r2,zero
  11c468:	00014a06 	br	11c994 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  11c46c:	d0a73903 	ldbu	r2,-25372(gp)
  11c470:	10803fcc 	andi	r2,r2,255
  11c474:	10000526 	beq	r2,zero,11c48c <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  11c478:	e0800217 	ldw	r2,8(fp)
  11c47c:	00c00344 	movi	r3,13
  11c480:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  11c484:	0005883a 	mov	r2,zero
  11c488:	00014206 	br	11c994 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  11c48c:	e0bffc17 	ldw	r2,-16(fp)
  11c490:	10800003 	ldbu	r2,0(r2)
  11c494:	10803fcc 	andi	r2,r2,255
  11c498:	10800160 	cmpeqi	r2,r2,5
  11c49c:	1000051e 	bne	r2,zero,11c4b4 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
  11c4a0:	e0800217 	ldw	r2,8(fp)
  11c4a4:	00c00044 	movi	r3,1
  11c4a8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  11c4ac:	0005883a 	mov	r2,zero
  11c4b0:	00013806 	br	11c994 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  11c4b4:	e0fffe03 	ldbu	r3,-8(fp)
  11c4b8:	00bfe004 	movi	r2,-128
  11c4bc:	1884703a 	and	r2,r3,r2
  11c4c0:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  11c4c4:	e0bfe603 	ldbu	r2,-104(fp)
  11c4c8:	10000626 	beq	r2,zero,11c4e4 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  11c4cc:	e0bffe03 	ldbu	r2,-8(fp)
  11c4d0:	10801fcc 	andi	r2,r2,127
  11c4d4:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
  11c4d8:	00800044 	movi	r2,1
  11c4dc:	e0bfe405 	stb	r2,-112(fp)
  11c4e0:	00000106 	br	11c4e8 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
  11c4e4:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11c4e8:	0005303a 	rdctl	r2,status
  11c4ec:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11c4f0:	e0fff617 	ldw	r3,-40(fp)
  11c4f4:	00bfff84 	movi	r2,-2
  11c4f8:	1884703a 	and	r2,r3,r2
  11c4fc:	1001703a 	wrctl	status,r2
  
  return context;
  11c500:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  11c504:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
  11c508:	e0bffe03 	ldbu	r2,-8(fp)
  11c50c:	10c00060 	cmpeqi	r3,r2,1
  11c510:	1800921e 	bne	r3,zero,11c75c <OSFlagPend+0x36c>
  11c514:	10c00088 	cmpgei	r3,r2,2
  11c518:	1800021e 	bne	r3,zero,11c524 <OSFlagPend+0x134>
  11c51c:	10006126 	beq	r2,zero,11c6a4 <OSFlagPend+0x2b4>
  11c520:	0000bb06 	br	11c810 <OSFlagPend+0x420>
  11c524:	10c000a0 	cmpeqi	r3,r2,2
  11c528:	1800031e 	bne	r3,zero,11c538 <OSFlagPend+0x148>
  11c52c:	108000e0 	cmpeqi	r2,r2,3
  11c530:	10002f1e 	bne	r2,zero,11c5f0 <OSFlagPend+0x200>
  11c534:	0000b606 	br	11c810 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  11c538:	e0bffc17 	ldw	r2,-16(fp)
  11c53c:	10c0020b 	ldhu	r3,8(r2)
  11c540:	e0bffd0b 	ldhu	r2,-12(fp)
  11c544:	1884703a 	and	r2,r3,r2
  11c548:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  11c54c:	e0ffe80b 	ldhu	r3,-96(fp)
  11c550:	e0bffd0b 	ldhu	r2,-12(fp)
  11c554:	1880171e 	bne	r3,r2,11c5b4 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  11c558:	e0bfe403 	ldbu	r2,-112(fp)
  11c55c:	10800058 	cmpnei	r2,r2,1
  11c560:	1000091e 	bne	r2,zero,11c588 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  11c564:	e0bffc17 	ldw	r2,-16(fp)
  11c568:	1080020b 	ldhu	r2,8(r2)
  11c56c:	1007883a 	mov	r3,r2
  11c570:	e0bfe80b 	ldhu	r2,-96(fp)
  11c574:	0084303a 	nor	r2,zero,r2
  11c578:	1884703a 	and	r2,r3,r2
  11c57c:	1007883a 	mov	r3,r2
  11c580:	e0bffc17 	ldw	r2,-16(fp)
  11c584:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  11c588:	d0a74817 	ldw	r2,-25312(gp)
  11c58c:	e0ffe80b 	ldhu	r3,-96(fp)
  11c590:	10c00b0d 	sth	r3,44(r2)
  11c594:	e0bfe517 	ldw	r2,-108(fp)
  11c598:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11c59c:	e0bfe717 	ldw	r2,-100(fp)
  11c5a0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  11c5a4:	e0800217 	ldw	r2,8(fp)
  11c5a8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  11c5ac:	e0bfe80b 	ldhu	r2,-96(fp)
  11c5b0:	0000f806 	br	11c994 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  11c5b4:	e13ffd0b 	ldhu	r4,-12(fp)
  11c5b8:	e17ffe03 	ldbu	r5,-8(fp)
  11c5bc:	e0bfff0b 	ldhu	r2,-4(fp)
  11c5c0:	e0fff704 	addi	r3,fp,-36
  11c5c4:	d8800015 	stw	r2,0(sp)
  11c5c8:	280f883a 	mov	r7,r5
  11c5cc:	200d883a 	mov	r6,r4
  11c5d0:	180b883a 	mov	r5,r3
  11c5d4:	e13ffc17 	ldw	r4,-16(fp)
  11c5d8:	011ce600 	call	11ce60 <OS_FlagBlock>
  11c5dc:	e0bfe517 	ldw	r2,-108(fp)
  11c5e0:	e0bfe915 	stw	r2,-92(fp)
  11c5e4:	e0bfe917 	ldw	r2,-92(fp)
  11c5e8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  11c5ec:	00009206 	br	11c838 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  11c5f0:	e0bffc17 	ldw	r2,-16(fp)
  11c5f4:	10c0020b 	ldhu	r3,8(r2)
  11c5f8:	e0bffd0b 	ldhu	r2,-12(fp)
  11c5fc:	1884703a 	and	r2,r3,r2
  11c600:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  11c604:	e0bfe80b 	ldhu	r2,-96(fp)
  11c608:	10001726 	beq	r2,zero,11c668 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  11c60c:	e0bfe403 	ldbu	r2,-112(fp)
  11c610:	10800058 	cmpnei	r2,r2,1
  11c614:	1000091e 	bne	r2,zero,11c63c <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  11c618:	e0bffc17 	ldw	r2,-16(fp)
  11c61c:	1080020b 	ldhu	r2,8(r2)
  11c620:	1007883a 	mov	r3,r2
  11c624:	e0bfe80b 	ldhu	r2,-96(fp)
  11c628:	0084303a 	nor	r2,zero,r2
  11c62c:	1884703a 	and	r2,r3,r2
  11c630:	1007883a 	mov	r3,r2
  11c634:	e0bffc17 	ldw	r2,-16(fp)
  11c638:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  11c63c:	d0a74817 	ldw	r2,-25312(gp)
  11c640:	e0ffe80b 	ldhu	r3,-96(fp)
  11c644:	10c00b0d 	sth	r3,44(r2)
  11c648:	e0bfe517 	ldw	r2,-108(fp)
  11c64c:	e0bfea15 	stw	r2,-88(fp)
  11c650:	e0bfea17 	ldw	r2,-88(fp)
  11c654:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  11c658:	e0800217 	ldw	r2,8(fp)
  11c65c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  11c660:	e0bfe80b 	ldhu	r2,-96(fp)
  11c664:	0000cb06 	br	11c994 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  11c668:	e13ffd0b 	ldhu	r4,-12(fp)
  11c66c:	e17ffe03 	ldbu	r5,-8(fp)
  11c670:	e0bfff0b 	ldhu	r2,-4(fp)
  11c674:	e0fff704 	addi	r3,fp,-36
  11c678:	d8800015 	stw	r2,0(sp)
  11c67c:	280f883a 	mov	r7,r5
  11c680:	200d883a 	mov	r6,r4
  11c684:	180b883a 	mov	r5,r3
  11c688:	e13ffc17 	ldw	r4,-16(fp)
  11c68c:	011ce600 	call	11ce60 <OS_FlagBlock>
  11c690:	e0bfe517 	ldw	r2,-108(fp)
  11c694:	e0bfeb15 	stw	r2,-84(fp)
  11c698:	e0bfeb17 	ldw	r2,-84(fp)
  11c69c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  11c6a0:	00006506 	br	11c838 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  11c6a4:	e0bffc17 	ldw	r2,-16(fp)
  11c6a8:	1080020b 	ldhu	r2,8(r2)
  11c6ac:	0084303a 	nor	r2,zero,r2
  11c6b0:	1007883a 	mov	r3,r2
  11c6b4:	e0bffd0b 	ldhu	r2,-12(fp)
  11c6b8:	1884703a 	and	r2,r3,r2
  11c6bc:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  11c6c0:	e0ffe80b 	ldhu	r3,-96(fp)
  11c6c4:	e0bffd0b 	ldhu	r2,-12(fp)
  11c6c8:	1880151e 	bne	r3,r2,11c720 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  11c6cc:	e0bfe403 	ldbu	r2,-112(fp)
  11c6d0:	10800058 	cmpnei	r2,r2,1
  11c6d4:	1000071e 	bne	r2,zero,11c6f4 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  11c6d8:	e0bffc17 	ldw	r2,-16(fp)
  11c6dc:	10c0020b 	ldhu	r3,8(r2)
  11c6e0:	e0bfe80b 	ldhu	r2,-96(fp)
  11c6e4:	1884b03a 	or	r2,r3,r2
  11c6e8:	1007883a 	mov	r3,r2
  11c6ec:	e0bffc17 	ldw	r2,-16(fp)
  11c6f0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  11c6f4:	d0a74817 	ldw	r2,-25312(gp)
  11c6f8:	e0ffe80b 	ldhu	r3,-96(fp)
  11c6fc:	10c00b0d 	sth	r3,44(r2)
  11c700:	e0bfe517 	ldw	r2,-108(fp)
  11c704:	e0bfec15 	stw	r2,-80(fp)
  11c708:	e0bfec17 	ldw	r2,-80(fp)
  11c70c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  11c710:	e0800217 	ldw	r2,8(fp)
  11c714:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  11c718:	e0bfe80b 	ldhu	r2,-96(fp)
  11c71c:	00009d06 	br	11c994 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  11c720:	e13ffd0b 	ldhu	r4,-12(fp)
  11c724:	e17ffe03 	ldbu	r5,-8(fp)
  11c728:	e0bfff0b 	ldhu	r2,-4(fp)
  11c72c:	e0fff704 	addi	r3,fp,-36
  11c730:	d8800015 	stw	r2,0(sp)
  11c734:	280f883a 	mov	r7,r5
  11c738:	200d883a 	mov	r6,r4
  11c73c:	180b883a 	mov	r5,r3
  11c740:	e13ffc17 	ldw	r4,-16(fp)
  11c744:	011ce600 	call	11ce60 <OS_FlagBlock>
  11c748:	e0bfe517 	ldw	r2,-108(fp)
  11c74c:	e0bfed15 	stw	r2,-76(fp)
  11c750:	e0bfed17 	ldw	r2,-76(fp)
  11c754:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  11c758:	00003706 	br	11c838 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  11c75c:	e0bffc17 	ldw	r2,-16(fp)
  11c760:	1080020b 	ldhu	r2,8(r2)
  11c764:	0084303a 	nor	r2,zero,r2
  11c768:	1007883a 	mov	r3,r2
  11c76c:	e0bffd0b 	ldhu	r2,-12(fp)
  11c770:	1884703a 	and	r2,r3,r2
  11c774:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  11c778:	e0bfe80b 	ldhu	r2,-96(fp)
  11c77c:	10001526 	beq	r2,zero,11c7d4 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  11c780:	e0bfe403 	ldbu	r2,-112(fp)
  11c784:	10800058 	cmpnei	r2,r2,1
  11c788:	1000071e 	bne	r2,zero,11c7a8 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  11c78c:	e0bffc17 	ldw	r2,-16(fp)
  11c790:	10c0020b 	ldhu	r3,8(r2)
  11c794:	e0bfe80b 	ldhu	r2,-96(fp)
  11c798:	1884b03a 	or	r2,r3,r2
  11c79c:	1007883a 	mov	r3,r2
  11c7a0:	e0bffc17 	ldw	r2,-16(fp)
  11c7a4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  11c7a8:	d0a74817 	ldw	r2,-25312(gp)
  11c7ac:	e0ffe80b 	ldhu	r3,-96(fp)
  11c7b0:	10c00b0d 	sth	r3,44(r2)
  11c7b4:	e0bfe517 	ldw	r2,-108(fp)
  11c7b8:	e0bfee15 	stw	r2,-72(fp)
  11c7bc:	e0bfee17 	ldw	r2,-72(fp)
  11c7c0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  11c7c4:	e0800217 	ldw	r2,8(fp)
  11c7c8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  11c7cc:	e0bfe80b 	ldhu	r2,-96(fp)
  11c7d0:	00007006 	br	11c994 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  11c7d4:	e13ffd0b 	ldhu	r4,-12(fp)
  11c7d8:	e17ffe03 	ldbu	r5,-8(fp)
  11c7dc:	e0bfff0b 	ldhu	r2,-4(fp)
  11c7e0:	e0fff704 	addi	r3,fp,-36
  11c7e4:	d8800015 	stw	r2,0(sp)
  11c7e8:	280f883a 	mov	r7,r5
  11c7ec:	200d883a 	mov	r6,r4
  11c7f0:	180b883a 	mov	r5,r3
  11c7f4:	e13ffc17 	ldw	r4,-16(fp)
  11c7f8:	011ce600 	call	11ce60 <OS_FlagBlock>
  11c7fc:	e0bfe517 	ldw	r2,-108(fp)
  11c800:	e0bfef15 	stw	r2,-68(fp)
  11c804:	e0bfef17 	ldw	r2,-68(fp)
  11c808:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  11c80c:	00000a06 	br	11c838 <OSFlagPend+0x448>
  11c810:	e0bfe517 	ldw	r2,-108(fp)
  11c814:	e0bff015 	stw	r2,-64(fp)
  11c818:	e0bff017 	ldw	r2,-64(fp)
  11c81c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  11c820:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  11c824:	e0800217 	ldw	r2,8(fp)
  11c828:	00c01bc4 	movi	r3,111
  11c82c:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
  11c830:	e0bfe80b 	ldhu	r2,-96(fp)
  11c834:	00005706 	br	11c994 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  11c838:	011b2c00 	call	11b2c0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11c83c:	0005303a 	rdctl	r2,status
  11c840:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11c844:	e0fff117 	ldw	r3,-60(fp)
  11c848:	00bfff84 	movi	r2,-2
  11c84c:	1884703a 	and	r2,r3,r2
  11c850:	1001703a 	wrctl	status,r2
  
  return context;
  11c854:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
  11c858:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  11c85c:	d0a74817 	ldw	r2,-25312(gp)
  11c860:	10800c43 	ldbu	r2,49(r2)
  11c864:	10803fcc 	andi	r2,r2,255
  11c868:	10001c26 	beq	r2,zero,11c8dc <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  11c86c:	d0a74817 	ldw	r2,-25312(gp)
  11c870:	10800c43 	ldbu	r2,49(r2)
  11c874:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  11c878:	d0a74817 	ldw	r2,-25312(gp)
  11c87c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  11c880:	e0bff704 	addi	r2,fp,-36
  11c884:	1009883a 	mov	r4,r2
  11c888:	011d1940 	call	11d194 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  11c88c:	d0a74817 	ldw	r2,-25312(gp)
  11c890:	10000c05 	stb	zero,48(r2)
  11c894:	e0bfe517 	ldw	r2,-108(fp)
  11c898:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11c89c:	e0bff217 	ldw	r2,-56(fp)
  11c8a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  11c8a4:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
  11c8a8:	e0bff303 	ldbu	r2,-52(fp)
  11c8ac:	108000a0 	cmpeqi	r2,r2,2
  11c8b0:	10000426 	beq	r2,zero,11c8c4 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  11c8b4:	e0800217 	ldw	r2,8(fp)
  11c8b8:	00c00384 	movi	r3,14
  11c8bc:	10c00005 	stb	r3,0(r2)
                 break;
  11c8c0:	00000406 	br	11c8d4 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  11c8c4:	e0800217 	ldw	r2,8(fp)
  11c8c8:	00c00284 	movi	r3,10
  11c8cc:	10c00005 	stb	r3,0(r2)
                 break;
  11c8d0:	0001883a 	nop
        }
        return (flags_rdy);
  11c8d4:	e0bfe80b 	ldhu	r2,-96(fp)
  11c8d8:	00002e06 	br	11c994 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  11c8dc:	d0a74817 	ldw	r2,-25312(gp)
  11c8e0:	10800b0b 	ldhu	r2,44(r2)
  11c8e4:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  11c8e8:	e0bfe403 	ldbu	r2,-112(fp)
  11c8ec:	10800058 	cmpnei	r2,r2,1
  11c8f0:	1000211e 	bne	r2,zero,11c978 <OSFlagPend+0x588>
        switch (wait_type) {
  11c8f4:	e0bffe03 	ldbu	r2,-8(fp)
  11c8f8:	10001616 	blt	r2,zero,11c954 <OSFlagPend+0x564>
  11c8fc:	10c00090 	cmplti	r3,r2,2
  11c900:	18000c1e 	bne	r3,zero,11c934 <OSFlagPend+0x544>
  11c904:	10800108 	cmpgei	r2,r2,4
  11c908:	1000121e 	bne	r2,zero,11c954 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  11c90c:	e0bffc17 	ldw	r2,-16(fp)
  11c910:	1080020b 	ldhu	r2,8(r2)
  11c914:	1007883a 	mov	r3,r2
  11c918:	e0bfe80b 	ldhu	r2,-96(fp)
  11c91c:	0084303a 	nor	r2,zero,r2
  11c920:	1884703a 	and	r2,r3,r2
  11c924:	1007883a 	mov	r3,r2
  11c928:	e0bffc17 	ldw	r2,-16(fp)
  11c92c:	10c0020d 	sth	r3,8(r2)
                 break;
  11c930:	00001106 	br	11c978 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  11c934:	e0bffc17 	ldw	r2,-16(fp)
  11c938:	10c0020b 	ldhu	r3,8(r2)
  11c93c:	e0bfe80b 	ldhu	r2,-96(fp)
  11c940:	1884b03a 	or	r2,r3,r2
  11c944:	1007883a 	mov	r3,r2
  11c948:	e0bffc17 	ldw	r2,-16(fp)
  11c94c:	10c0020d 	sth	r3,8(r2)
                 break;
  11c950:	00000906 	br	11c978 <OSFlagPend+0x588>
  11c954:	e0bfe517 	ldw	r2,-108(fp)
  11c958:	e0bff415 	stw	r2,-48(fp)
  11c95c:	e0bff417 	ldw	r2,-48(fp)
  11c960:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  11c964:	e0800217 	ldw	r2,8(fp)
  11c968:	00c01bc4 	movi	r3,111
  11c96c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
  11c970:	0005883a 	mov	r2,zero
  11c974:	00000706 	br	11c994 <OSFlagPend+0x5a4>
  11c978:	e0bfe517 	ldw	r2,-108(fp)
  11c97c:	e0bff515 	stw	r2,-44(fp)
  11c980:	e0bff517 	ldw	r2,-44(fp)
  11c984:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  11c988:	e0800217 	ldw	r2,8(fp)
  11c98c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  11c990:	e0bfe80b 	ldhu	r2,-96(fp)
}
  11c994:	e037883a 	mov	sp,fp
  11c998:	dfc00117 	ldw	ra,4(sp)
  11c99c:	df000017 	ldw	fp,0(sp)
  11c9a0:	dec00204 	addi	sp,sp,8
  11c9a4:	f800283a 	ret

0011c9a8 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  11c9a8:	defffb04 	addi	sp,sp,-20
  11c9ac:	df000415 	stw	fp,16(sp)
  11c9b0:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  11c9b4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11c9b8:	0005303a 	rdctl	r2,status
  11c9bc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11c9c0:	e0fffe17 	ldw	r3,-8(fp)
  11c9c4:	00bfff84 	movi	r2,-2
  11c9c8:	1884703a 	and	r2,r3,r2
  11c9cc:	1001703a 	wrctl	status,r2
  
  return context;
  11c9d0:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  11c9d4:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  11c9d8:	d0a74817 	ldw	r2,-25312(gp)
  11c9dc:	10800b0b 	ldhu	r2,44(r2)
  11c9e0:	e0bffd0d 	sth	r2,-12(fp)
  11c9e4:	e0bffc17 	ldw	r2,-16(fp)
  11c9e8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11c9ec:	e0bfff17 	ldw	r2,-4(fp)
  11c9f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  11c9f4:	e0bffd0b 	ldhu	r2,-12(fp)
}
  11c9f8:	e037883a 	mov	sp,fp
  11c9fc:	df000017 	ldw	fp,0(sp)
  11ca00:	dec00104 	addi	sp,sp,4
  11ca04:	f800283a 	ret

0011ca08 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  11ca08:	deffef04 	addi	sp,sp,-68
  11ca0c:	dfc01015 	stw	ra,64(sp)
  11ca10:	df000f15 	stw	fp,60(sp)
  11ca14:	df000f04 	addi	fp,sp,60
  11ca18:	e13ffc15 	stw	r4,-16(fp)
  11ca1c:	2807883a 	mov	r3,r5
  11ca20:	3005883a 	mov	r2,r6
  11ca24:	e1ffff15 	stw	r7,-4(fp)
  11ca28:	e0fffd0d 	sth	r3,-12(fp)
  11ca2c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  11ca30:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  11ca34:	e0bfff17 	ldw	r2,-4(fp)
  11ca38:	1000021e 	bne	r2,zero,11ca44 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
  11ca3c:	0005883a 	mov	r2,zero
  11ca40:	0000d106 	br	11cd88 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  11ca44:	e0bffc17 	ldw	r2,-16(fp)
  11ca48:	1000051e 	bne	r2,zero,11ca60 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  11ca4c:	e0bfff17 	ldw	r2,-4(fp)
  11ca50:	00c01b84 	movi	r3,110
  11ca54:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  11ca58:	0005883a 	mov	r2,zero
  11ca5c:	0000ca06 	br	11cd88 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  11ca60:	e0bffc17 	ldw	r2,-16(fp)
  11ca64:	10800003 	ldbu	r2,0(r2)
  11ca68:	10803fcc 	andi	r2,r2,255
  11ca6c:	10800160 	cmpeqi	r2,r2,5
  11ca70:	1000051e 	bne	r2,zero,11ca88 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  11ca74:	e0bfff17 	ldw	r2,-4(fp)
  11ca78:	00c00044 	movi	r3,1
  11ca7c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  11ca80:	0005883a 	mov	r2,zero
  11ca84:	0000c006 	br	11cd88 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11ca88:	0005303a 	rdctl	r2,status
  11ca8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11ca90:	e0fffb17 	ldw	r3,-20(fp)
  11ca94:	00bfff84 	movi	r2,-2
  11ca98:	1884703a 	and	r2,r3,r2
  11ca9c:	1001703a 	wrctl	status,r2
  
  return context;
  11caa0:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  11caa4:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
  11caa8:	e0bffe03 	ldbu	r2,-8(fp)
  11caac:	10000326 	beq	r2,zero,11cabc <OSFlagPost+0xb4>
  11cab0:	10800060 	cmpeqi	r2,r2,1
  11cab4:	10000b1e 	bne	r2,zero,11cae4 <OSFlagPost+0xdc>
  11cab8:	00001206 	br	11cb04 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  11cabc:	e0bffc17 	ldw	r2,-16(fp)
  11cac0:	1080020b 	ldhu	r2,8(r2)
  11cac4:	1007883a 	mov	r3,r2
  11cac8:	e0bffd0b 	ldhu	r2,-12(fp)
  11cacc:	0084303a 	nor	r2,zero,r2
  11cad0:	1884703a 	and	r2,r3,r2
  11cad4:	1007883a 	mov	r3,r2
  11cad8:	e0bffc17 	ldw	r2,-16(fp)
  11cadc:	10c0020d 	sth	r3,8(r2)
             break;
  11cae0:	00001106 	br	11cb28 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  11cae4:	e0bffc17 	ldw	r2,-16(fp)
  11cae8:	10c0020b 	ldhu	r3,8(r2)
  11caec:	e0bffd0b 	ldhu	r2,-12(fp)
  11caf0:	1884b03a 	or	r2,r3,r2
  11caf4:	1007883a 	mov	r3,r2
  11caf8:	e0bffc17 	ldw	r2,-16(fp)
  11cafc:	10c0020d 	sth	r3,8(r2)
             break;
  11cb00:	00000906 	br	11cb28 <OSFlagPost+0x120>
  11cb04:	e0bff317 	ldw	r2,-52(fp)
  11cb08:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11cb0c:	e0bff417 	ldw	r2,-48(fp)
  11cb10:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  11cb14:	e0bfff17 	ldw	r2,-4(fp)
  11cb18:	00c01c44 	movi	r3,113
  11cb1c:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
  11cb20:	0005883a 	mov	r2,zero
  11cb24:	00009806 	br	11cd88 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  11cb28:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  11cb2c:	e0bffc17 	ldw	r2,-16(fp)
  11cb30:	10800117 	ldw	r2,4(r2)
  11cb34:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  11cb38:	00007706 	br	11cd18 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
  11cb3c:	e0bff117 	ldw	r2,-60(fp)
  11cb40:	10800483 	ldbu	r2,18(r2)
  11cb44:	10803fcc 	andi	r2,r2,255
  11cb48:	10c00060 	cmpeqi	r3,r2,1
  11cb4c:	18004a1e 	bne	r3,zero,11cc78 <OSFlagPost+0x270>
  11cb50:	10c00088 	cmpgei	r3,r2,2
  11cb54:	1800021e 	bne	r3,zero,11cb60 <OSFlagPost+0x158>
  11cb58:	10002f26 	beq	r2,zero,11cc18 <OSFlagPost+0x210>
  11cb5c:	00005b06 	br	11cccc <OSFlagPost+0x2c4>
  11cb60:	10c000a0 	cmpeqi	r3,r2,2
  11cb64:	1800031e 	bne	r3,zero,11cb74 <OSFlagPost+0x16c>
  11cb68:	108000e0 	cmpeqi	r2,r2,3
  11cb6c:	1000171e 	bne	r2,zero,11cbcc <OSFlagPost+0x1c4>
  11cb70:	00005606 	br	11cccc <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  11cb74:	e0bffc17 	ldw	r2,-16(fp)
  11cb78:	10c0020b 	ldhu	r3,8(r2)
  11cb7c:	e0bff117 	ldw	r2,-60(fp)
  11cb80:	1080040b 	ldhu	r2,16(r2)
  11cb84:	1884703a 	and	r2,r3,r2
  11cb88:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  11cb8c:	e0bff117 	ldw	r2,-60(fp)
  11cb90:	1080040b 	ldhu	r2,16(r2)
  11cb94:	10ffffcc 	andi	r3,r2,65535
  11cb98:	e0bff60b 	ldhu	r2,-40(fp)
  11cb9c:	1880541e 	bne	r3,r2,11ccf0 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  11cba0:	e0bff60b 	ldhu	r2,-40(fp)
  11cba4:	100b883a 	mov	r5,r2
  11cba8:	e13ff117 	ldw	r4,-60(fp)
  11cbac:	011d0a00 	call	11d0a0 <OS_FlagTaskRdy>
  11cbb0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  11cbb4:	e0bff683 	ldbu	r2,-38(fp)
  11cbb8:	10800058 	cmpnei	r2,r2,1
  11cbbc:	10004c1e 	bne	r2,zero,11ccf0 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  11cbc0:	00800044 	movi	r2,1
  11cbc4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  11cbc8:	00004906 	br	11ccf0 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  11cbcc:	e0bffc17 	ldw	r2,-16(fp)
  11cbd0:	10c0020b 	ldhu	r3,8(r2)
  11cbd4:	e0bff117 	ldw	r2,-60(fp)
  11cbd8:	1080040b 	ldhu	r2,16(r2)
  11cbdc:	1884703a 	and	r2,r3,r2
  11cbe0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  11cbe4:	e0bff60b 	ldhu	r2,-40(fp)
  11cbe8:	10004326 	beq	r2,zero,11ccf8 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  11cbec:	e0bff60b 	ldhu	r2,-40(fp)
  11cbf0:	100b883a 	mov	r5,r2
  11cbf4:	e13ff117 	ldw	r4,-60(fp)
  11cbf8:	011d0a00 	call	11d0a0 <OS_FlagTaskRdy>
  11cbfc:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  11cc00:	e0bff683 	ldbu	r2,-38(fp)
  11cc04:	10800058 	cmpnei	r2,r2,1
  11cc08:	10003b1e 	bne	r2,zero,11ccf8 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  11cc0c:	00800044 	movi	r2,1
  11cc10:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  11cc14:	00003806 	br	11ccf8 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  11cc18:	e0bffc17 	ldw	r2,-16(fp)
  11cc1c:	1080020b 	ldhu	r2,8(r2)
  11cc20:	0084303a 	nor	r2,zero,r2
  11cc24:	1007883a 	mov	r3,r2
  11cc28:	e0bff117 	ldw	r2,-60(fp)
  11cc2c:	1080040b 	ldhu	r2,16(r2)
  11cc30:	1884703a 	and	r2,r3,r2
  11cc34:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  11cc38:	e0bff117 	ldw	r2,-60(fp)
  11cc3c:	1080040b 	ldhu	r2,16(r2)
  11cc40:	10ffffcc 	andi	r3,r2,65535
  11cc44:	e0bff60b 	ldhu	r2,-40(fp)
  11cc48:	18802d1e 	bne	r3,r2,11cd00 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  11cc4c:	e0bff60b 	ldhu	r2,-40(fp)
  11cc50:	100b883a 	mov	r5,r2
  11cc54:	e13ff117 	ldw	r4,-60(fp)
  11cc58:	011d0a00 	call	11d0a0 <OS_FlagTaskRdy>
  11cc5c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  11cc60:	e0bff683 	ldbu	r2,-38(fp)
  11cc64:	10800058 	cmpnei	r2,r2,1
  11cc68:	1000251e 	bne	r2,zero,11cd00 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  11cc6c:	00800044 	movi	r2,1
  11cc70:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  11cc74:	00002206 	br	11cd00 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  11cc78:	e0bffc17 	ldw	r2,-16(fp)
  11cc7c:	1080020b 	ldhu	r2,8(r2)
  11cc80:	0084303a 	nor	r2,zero,r2
  11cc84:	1007883a 	mov	r3,r2
  11cc88:	e0bff117 	ldw	r2,-60(fp)
  11cc8c:	1080040b 	ldhu	r2,16(r2)
  11cc90:	1884703a 	and	r2,r3,r2
  11cc94:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  11cc98:	e0bff60b 	ldhu	r2,-40(fp)
  11cc9c:	10001a26 	beq	r2,zero,11cd08 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  11cca0:	e0bff60b 	ldhu	r2,-40(fp)
  11cca4:	100b883a 	mov	r5,r2
  11cca8:	e13ff117 	ldw	r4,-60(fp)
  11ccac:	011d0a00 	call	11d0a0 <OS_FlagTaskRdy>
  11ccb0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  11ccb4:	e0bff683 	ldbu	r2,-38(fp)
  11ccb8:	10800058 	cmpnei	r2,r2,1
  11ccbc:	1000121e 	bne	r2,zero,11cd08 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  11ccc0:	00800044 	movi	r2,1
  11ccc4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  11ccc8:	00000f06 	br	11cd08 <OSFlagPost+0x300>
  11cccc:	e0bff317 	ldw	r2,-52(fp)
  11ccd0:	e0bff515 	stw	r2,-44(fp)
  11ccd4:	e0bff517 	ldw	r2,-44(fp)
  11ccd8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  11ccdc:	e0bfff17 	ldw	r2,-4(fp)
  11cce0:	00c01bc4 	movi	r3,111
  11cce4:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
  11cce8:	0005883a 	mov	r2,zero
  11ccec:	00002606 	br	11cd88 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  11ccf0:	0001883a 	nop
  11ccf4:	00000506 	br	11cd0c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  11ccf8:	0001883a 	nop
  11ccfc:	00000306 	br	11cd0c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  11cd00:	0001883a 	nop
  11cd04:	00000106 	br	11cd0c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  11cd08:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  11cd0c:	e0bff117 	ldw	r2,-60(fp)
  11cd10:	10800017 	ldw	r2,0(r2)
  11cd14:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  11cd18:	e0bff117 	ldw	r2,-60(fp)
  11cd1c:	103f871e 	bne	r2,zero,11cb3c <__alt_data_end+0xfffdcb3c>
  11cd20:	e0bff317 	ldw	r2,-52(fp)
  11cd24:	e0bff715 	stw	r2,-36(fp)
  11cd28:	e0bff717 	ldw	r2,-36(fp)
  11cd2c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  11cd30:	e0bff203 	ldbu	r2,-56(fp)
  11cd34:	10800058 	cmpnei	r2,r2,1
  11cd38:	1000011e 	bne	r2,zero,11cd40 <OSFlagPost+0x338>
        OS_Sched();
  11cd3c:	011b2c00 	call	11b2c0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11cd40:	0005303a 	rdctl	r2,status
  11cd44:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11cd48:	e0fffa17 	ldw	r3,-24(fp)
  11cd4c:	00bfff84 	movi	r2,-2
  11cd50:	1884703a 	and	r2,r3,r2
  11cd54:	1001703a 	wrctl	status,r2
  
  return context;
  11cd58:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  11cd5c:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
  11cd60:	e0bffc17 	ldw	r2,-16(fp)
  11cd64:	1080020b 	ldhu	r2,8(r2)
  11cd68:	e0bff90d 	sth	r2,-28(fp)
  11cd6c:	e0bff317 	ldw	r2,-52(fp)
  11cd70:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11cd74:	e0bff817 	ldw	r2,-32(fp)
  11cd78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  11cd7c:	e0bfff17 	ldw	r2,-4(fp)
  11cd80:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  11cd84:	e0bff90b 	ldhu	r2,-28(fp)
}
  11cd88:	e037883a 	mov	sp,fp
  11cd8c:	dfc00117 	ldw	ra,4(sp)
  11cd90:	df000017 	ldw	fp,0(sp)
  11cd94:	dec00204 	addi	sp,sp,8
  11cd98:	f800283a 	ret

0011cd9c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  11cd9c:	defff904 	addi	sp,sp,-28
  11cda0:	df000615 	stw	fp,24(sp)
  11cda4:	df000604 	addi	fp,sp,24
  11cda8:	e13ffe15 	stw	r4,-8(fp)
  11cdac:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  11cdb0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  11cdb4:	e0bfff17 	ldw	r2,-4(fp)
  11cdb8:	1000021e 	bne	r2,zero,11cdc4 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
  11cdbc:	0005883a 	mov	r2,zero
  11cdc0:	00002306 	br	11ce50 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  11cdc4:	e0bffe17 	ldw	r2,-8(fp)
  11cdc8:	1000051e 	bne	r2,zero,11cde0 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  11cdcc:	e0bfff17 	ldw	r2,-4(fp)
  11cdd0:	00c01b84 	movi	r3,110
  11cdd4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  11cdd8:	0005883a 	mov	r2,zero
  11cddc:	00001c06 	br	11ce50 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  11cde0:	e0bffe17 	ldw	r2,-8(fp)
  11cde4:	10800003 	ldbu	r2,0(r2)
  11cde8:	10803fcc 	andi	r2,r2,255
  11cdec:	10800160 	cmpeqi	r2,r2,5
  11cdf0:	1000051e 	bne	r2,zero,11ce08 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  11cdf4:	e0bfff17 	ldw	r2,-4(fp)
  11cdf8:	00c00044 	movi	r3,1
  11cdfc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  11ce00:	0005883a 	mov	r2,zero
  11ce04:	00001206 	br	11ce50 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11ce08:	0005303a 	rdctl	r2,status
  11ce0c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11ce10:	e0fffc17 	ldw	r3,-16(fp)
  11ce14:	00bfff84 	movi	r2,-2
  11ce18:	1884703a 	and	r2,r3,r2
  11ce1c:	1001703a 	wrctl	status,r2
  
  return context;
  11ce20:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  11ce24:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
  11ce28:	e0bffe17 	ldw	r2,-8(fp)
  11ce2c:	1080020b 	ldhu	r2,8(r2)
  11ce30:	e0bffb0d 	sth	r2,-20(fp)
  11ce34:	e0bffa17 	ldw	r2,-24(fp)
  11ce38:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11ce3c:	e0bffd17 	ldw	r2,-12(fp)
  11ce40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  11ce44:	e0bfff17 	ldw	r2,-4(fp)
  11ce48:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  11ce4c:	e0bffb0b 	ldhu	r2,-20(fp)
}
  11ce50:	e037883a 	mov	sp,fp
  11ce54:	df000017 	ldw	fp,0(sp)
  11ce58:	dec00104 	addi	sp,sp,4
  11ce5c:	f800283a 	ret

0011ce60 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  11ce60:	defff804 	addi	sp,sp,-32
  11ce64:	df000715 	stw	fp,28(sp)
  11ce68:	df000704 	addi	fp,sp,28
  11ce6c:	e13ffb15 	stw	r4,-20(fp)
  11ce70:	e17ffc15 	stw	r5,-16(fp)
  11ce74:	3009883a 	mov	r4,r6
  11ce78:	3807883a 	mov	r3,r7
  11ce7c:	e0800117 	ldw	r2,4(fp)
  11ce80:	e13ffd0d 	sth	r4,-12(fp)
  11ce84:	e0fffe05 	stb	r3,-8(fp)
  11ce88:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  11ce8c:	d0a74817 	ldw	r2,-25312(gp)
  11ce90:	d0e74817 	ldw	r3,-25312(gp)
  11ce94:	18c00c03 	ldbu	r3,48(r3)
  11ce98:	18c00814 	ori	r3,r3,32
  11ce9c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  11cea0:	d0a74817 	ldw	r2,-25312(gp)
  11cea4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  11cea8:	d0a74817 	ldw	r2,-25312(gp)
  11ceac:	e0ffff0b 	ldhu	r3,-4(fp)
  11ceb0:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  11ceb4:	d0a74817 	ldw	r2,-25312(gp)
  11ceb8:	e0fffc17 	ldw	r3,-16(fp)
  11cebc:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  11cec0:	e0bffc17 	ldw	r2,-16(fp)
  11cec4:	e0fffd0b 	ldhu	r3,-12(fp)
  11cec8:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  11cecc:	e0bffc17 	ldw	r2,-16(fp)
  11ced0:	e0fffe03 	ldbu	r3,-8(fp)
  11ced4:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  11ced8:	d0e74817 	ldw	r3,-25312(gp)
  11cedc:	e0bffc17 	ldw	r2,-16(fp)
  11cee0:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  11cee4:	e0bffb17 	ldw	r2,-20(fp)
  11cee8:	10c00117 	ldw	r3,4(r2)
  11ceec:	e0bffc17 	ldw	r2,-16(fp)
  11cef0:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  11cef4:	e0bffc17 	ldw	r2,-16(fp)
  11cef8:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  11cefc:	e0bffc17 	ldw	r2,-16(fp)
  11cf00:	e0fffb17 	ldw	r3,-20(fp)
  11cf04:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  11cf08:	e0bffb17 	ldw	r2,-20(fp)
  11cf0c:	10800117 	ldw	r2,4(r2)
  11cf10:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  11cf14:	e0bff917 	ldw	r2,-28(fp)
  11cf18:	10000326 	beq	r2,zero,11cf28 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  11cf1c:	e0bff917 	ldw	r2,-28(fp)
  11cf20:	e0fffc17 	ldw	r3,-16(fp)
  11cf24:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  11cf28:	e0bffb17 	ldw	r2,-20(fp)
  11cf2c:	e0fffc17 	ldw	r3,-16(fp)
  11cf30:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  11cf34:	d0a74817 	ldw	r2,-25312(gp)
  11cf38:	10800d03 	ldbu	r2,52(r2)
  11cf3c:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  11cf40:	e0fffa03 	ldbu	r3,-24(fp)
  11cf44:	e13ffa03 	ldbu	r4,-24(fp)
  11cf48:	d0a74544 	addi	r2,gp,-25323
  11cf4c:	2085883a 	add	r2,r4,r2
  11cf50:	10800003 	ldbu	r2,0(r2)
  11cf54:	1009883a 	mov	r4,r2
  11cf58:	d0a74817 	ldw	r2,-25312(gp)
  11cf5c:	10800d43 	ldbu	r2,53(r2)
  11cf60:	0084303a 	nor	r2,zero,r2
  11cf64:	2084703a 	and	r2,r4,r2
  11cf68:	1009883a 	mov	r4,r2
  11cf6c:	d0a74544 	addi	r2,gp,-25323
  11cf70:	1885883a 	add	r2,r3,r2
  11cf74:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  11cf78:	e0fffa03 	ldbu	r3,-24(fp)
  11cf7c:	d0a74544 	addi	r2,gp,-25323
  11cf80:	1885883a 	add	r2,r3,r2
  11cf84:	10800003 	ldbu	r2,0(r2)
  11cf88:	10803fcc 	andi	r2,r2,255
  11cf8c:	1000071e 	bne	r2,zero,11cfac <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  11cf90:	d0a74817 	ldw	r2,-25312(gp)
  11cf94:	10800d83 	ldbu	r2,54(r2)
  11cf98:	0084303a 	nor	r2,zero,r2
  11cf9c:	1007883a 	mov	r3,r2
  11cfa0:	d0a74503 	ldbu	r2,-25324(gp)
  11cfa4:	1884703a 	and	r2,r3,r2
  11cfa8:	d0a74505 	stb	r2,-25324(gp)
    }
}
  11cfac:	0001883a 	nop
  11cfb0:	e037883a 	mov	sp,fp
  11cfb4:	df000017 	ldw	fp,0(sp)
  11cfb8:	dec00104 	addi	sp,sp,4
  11cfbc:	f800283a 	ret

0011cfc0 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  11cfc0:	defffb04 	addi	sp,sp,-20
  11cfc4:	dfc00415 	stw	ra,16(sp)
  11cfc8:	df000315 	stw	fp,12(sp)
  11cfcc:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  11cfd0:	0140dc04 	movi	r5,880
  11cfd4:	010004f4 	movhi	r4,19
  11cfd8:	212e8e04 	addi	r4,r4,-17864
  11cfdc:	011b2040 	call	11b204 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  11cfe0:	008004f4 	movhi	r2,19
  11cfe4:	10ae8e04 	addi	r2,r2,-17864
  11cfe8:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  11cfec:	008004f4 	movhi	r2,19
  11cff0:	10ae9904 	addi	r2,r2,-17820
  11cff4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  11cff8:	e03ffd0d 	sth	zero,-12(fp)
  11cffc:	00001306 	br	11d04c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  11d000:	e0bffe17 	ldw	r2,-8(fp)
  11d004:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  11d008:	e0bffe17 	ldw	r2,-8(fp)
  11d00c:	e0ffff17 	ldw	r3,-4(fp)
  11d010:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  11d014:	e0bffe17 	ldw	r2,-8(fp)
  11d018:	00c00fc4 	movi	r3,63
  11d01c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  11d020:	e0bffe17 	ldw	r2,-8(fp)
  11d024:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  11d028:	e0bffe17 	ldw	r2,-8(fp)
  11d02c:	10800b04 	addi	r2,r2,44
  11d030:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  11d034:	e0bfff17 	ldw	r2,-4(fp)
  11d038:	10800b04 	addi	r2,r2,44
  11d03c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  11d040:	e0bffd0b 	ldhu	r2,-12(fp)
  11d044:	10800044 	addi	r2,r2,1
  11d048:	e0bffd0d 	sth	r2,-12(fp)
  11d04c:	e0bffd0b 	ldhu	r2,-12(fp)
  11d050:	108004f0 	cmpltui	r2,r2,19
  11d054:	103fea1e 	bne	r2,zero,11d000 <__alt_data_end+0xfffdd000>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  11d058:	e0bffe17 	ldw	r2,-8(fp)
  11d05c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  11d060:	e0bffe17 	ldw	r2,-8(fp)
  11d064:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  11d068:	e0bffe17 	ldw	r2,-8(fp)
  11d06c:	00c00fc4 	movi	r3,63
  11d070:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  11d074:	e0bffe17 	ldw	r2,-8(fp)
  11d078:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  11d07c:	008004f4 	movhi	r2,19
  11d080:	10ae8e04 	addi	r2,r2,-17864
  11d084:	d0a74a15 	stw	r2,-25304(gp)
#endif
}
  11d088:	0001883a 	nop
  11d08c:	e037883a 	mov	sp,fp
  11d090:	dfc00117 	ldw	ra,4(sp)
  11d094:	df000017 	ldw	fp,0(sp)
  11d098:	dec00204 	addi	sp,sp,8
  11d09c:	f800283a 	ret

0011d0a0 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  11d0a0:	defffa04 	addi	sp,sp,-24
  11d0a4:	dfc00515 	stw	ra,20(sp)
  11d0a8:	df000415 	stw	fp,16(sp)
  11d0ac:	df000404 	addi	fp,sp,16
  11d0b0:	e13ffe15 	stw	r4,-8(fp)
  11d0b4:	2805883a 	mov	r2,r5
  11d0b8:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  11d0bc:	e0bffe17 	ldw	r2,-8(fp)
  11d0c0:	10800217 	ldw	r2,8(r2)
  11d0c4:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  11d0c8:	e0bffd17 	ldw	r2,-12(fp)
  11d0cc:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  11d0d0:	e0bffd17 	ldw	r2,-12(fp)
  11d0d4:	e0ffff0b 	ldhu	r3,-4(fp)
  11d0d8:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  11d0dc:	e0bffd17 	ldw	r2,-12(fp)
  11d0e0:	10c00c03 	ldbu	r3,48(r2)
  11d0e4:	00bff7c4 	movi	r2,-33
  11d0e8:	1884703a 	and	r2,r3,r2
  11d0ec:	1007883a 	mov	r3,r2
  11d0f0:	e0bffd17 	ldw	r2,-12(fp)
  11d0f4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  11d0f8:	e0bffd17 	ldw	r2,-12(fp)
  11d0fc:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  11d100:	e0bffd17 	ldw	r2,-12(fp)
  11d104:	10800c03 	ldbu	r2,48(r2)
  11d108:	10803fcc 	andi	r2,r2,255
  11d10c:	1000181e 	bne	r2,zero,11d170 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  11d110:	e0bffd17 	ldw	r2,-12(fp)
  11d114:	10c00d83 	ldbu	r3,54(r2)
  11d118:	d0a74503 	ldbu	r2,-25324(gp)
  11d11c:	1884b03a 	or	r2,r3,r2
  11d120:	d0a74505 	stb	r2,-25324(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  11d124:	e0bffd17 	ldw	r2,-12(fp)
  11d128:	10800d03 	ldbu	r2,52(r2)
  11d12c:	10c03fcc 	andi	r3,r2,255
  11d130:	e0bffd17 	ldw	r2,-12(fp)
  11d134:	10800d03 	ldbu	r2,52(r2)
  11d138:	11003fcc 	andi	r4,r2,255
  11d13c:	d0a74544 	addi	r2,gp,-25323
  11d140:	2085883a 	add	r2,r4,r2
  11d144:	11000003 	ldbu	r4,0(r2)
  11d148:	e0bffd17 	ldw	r2,-12(fp)
  11d14c:	10800d43 	ldbu	r2,53(r2)
  11d150:	2084b03a 	or	r2,r4,r2
  11d154:	1009883a 	mov	r4,r2
  11d158:	d0a74544 	addi	r2,gp,-25323
  11d15c:	1885883a 	add	r2,r3,r2
  11d160:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
  11d164:	00800044 	movi	r2,1
  11d168:	e0bffc05 	stb	r2,-16(fp)
  11d16c:	00000106 	br	11d174 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
  11d170:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  11d174:	e13ffe17 	ldw	r4,-8(fp)
  11d178:	011d1940 	call	11d194 <OS_FlagUnlink>
    return (sched);
  11d17c:	e0bffc03 	ldbu	r2,-16(fp)
}
  11d180:	e037883a 	mov	sp,fp
  11d184:	dfc00117 	ldw	ra,4(sp)
  11d188:	df000017 	ldw	fp,0(sp)
  11d18c:	dec00204 	addi	sp,sp,8
  11d190:	f800283a 	ret

0011d194 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  11d194:	defffa04 	addi	sp,sp,-24
  11d198:	df000515 	stw	fp,20(sp)
  11d19c:	df000504 	addi	fp,sp,20
  11d1a0:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  11d1a4:	e0bfff17 	ldw	r2,-4(fp)
  11d1a8:	10800117 	ldw	r2,4(r2)
  11d1ac:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  11d1b0:	e0bfff17 	ldw	r2,-4(fp)
  11d1b4:	10800017 	ldw	r2,0(r2)
  11d1b8:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  11d1bc:	e0bffb17 	ldw	r2,-20(fp)
  11d1c0:	10000b1e 	bne	r2,zero,11d1f0 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  11d1c4:	e0bfff17 	ldw	r2,-4(fp)
  11d1c8:	10800317 	ldw	r2,12(r2)
  11d1cc:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  11d1d0:	e0bffd17 	ldw	r2,-12(fp)
  11d1d4:	e0fffc17 	ldw	r3,-16(fp)
  11d1d8:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  11d1dc:	e0bffc17 	ldw	r2,-16(fp)
  11d1e0:	10000b26 	beq	r2,zero,11d210 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  11d1e4:	e0bffc17 	ldw	r2,-16(fp)
  11d1e8:	10000115 	stw	zero,4(r2)
  11d1ec:	00000806 	br	11d210 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  11d1f0:	e0bffb17 	ldw	r2,-20(fp)
  11d1f4:	e0fffc17 	ldw	r3,-16(fp)
  11d1f8:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  11d1fc:	e0bffc17 	ldw	r2,-16(fp)
  11d200:	10000326 	beq	r2,zero,11d210 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  11d204:	e0bffc17 	ldw	r2,-16(fp)
  11d208:	e0fffb17 	ldw	r3,-20(fp)
  11d20c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  11d210:	e0bfff17 	ldw	r2,-4(fp)
  11d214:	10800217 	ldw	r2,8(r2)
  11d218:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  11d21c:	e0bffe17 	ldw	r2,-8(fp)
  11d220:	10000a15 	stw	zero,40(r2)
#endif
}
  11d224:	0001883a 	nop
  11d228:	e037883a 	mov	sp,fp
  11d22c:	df000017 	ldw	fp,0(sp)
  11d230:	dec00104 	addi	sp,sp,4
  11d234:	f800283a 	ret

0011d238 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  11d238:	defff404 	addi	sp,sp,-48
  11d23c:	df000b15 	stw	fp,44(sp)
  11d240:	df000b04 	addi	fp,sp,44
  11d244:	e13ffc15 	stw	r4,-16(fp)
  11d248:	e17ffd15 	stw	r5,-12(fp)
  11d24c:	e1bffe15 	stw	r6,-8(fp)
  11d250:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  11d254:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  11d258:	e0bfff17 	ldw	r2,-4(fp)
  11d25c:	1000021e 	bne	r2,zero,11d268 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
  11d260:	0005883a 	mov	r2,zero
  11d264:	00006506 	br	11d3fc <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  11d268:	e0bffc17 	ldw	r2,-16(fp)
  11d26c:	1000051e 	bne	r2,zero,11d284 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  11d270:	e0bfff17 	ldw	r2,-4(fp)
  11d274:	00c01884 	movi	r3,98
  11d278:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  11d27c:	0005883a 	mov	r2,zero
  11d280:	00005e06 	br	11d3fc <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  11d284:	e0bffc17 	ldw	r2,-16(fp)
  11d288:	108000cc 	andi	r2,r2,3
  11d28c:	10000526 	beq	r2,zero,11d2a4 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  11d290:	e0bfff17 	ldw	r2,-4(fp)
  11d294:	00c01884 	movi	r3,98
  11d298:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  11d29c:	0005883a 	mov	r2,zero
  11d2a0:	00005606 	br	11d3fc <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  11d2a4:	e0bffd17 	ldw	r2,-12(fp)
  11d2a8:	108000a8 	cmpgeui	r2,r2,2
  11d2ac:	1000051e 	bne	r2,zero,11d2c4 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  11d2b0:	e0bfff17 	ldw	r2,-4(fp)
  11d2b4:	00c016c4 	movi	r3,91
  11d2b8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  11d2bc:	0005883a 	mov	r2,zero
  11d2c0:	00004e06 	br	11d3fc <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  11d2c4:	e0bffe17 	ldw	r2,-8(fp)
  11d2c8:	10800128 	cmpgeui	r2,r2,4
  11d2cc:	1000051e 	bne	r2,zero,11d2e4 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  11d2d0:	e0bfff17 	ldw	r2,-4(fp)
  11d2d4:	00c01704 	movi	r3,92
  11d2d8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  11d2dc:	0005883a 	mov	r2,zero
  11d2e0:	00004606 	br	11d3fc <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11d2e4:	0005303a 	rdctl	r2,status
  11d2e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11d2ec:	e0fffb17 	ldw	r3,-20(fp)
  11d2f0:	00bfff84 	movi	r2,-2
  11d2f4:	1884703a 	and	r2,r3,r2
  11d2f8:	1001703a 	wrctl	status,r2
  
  return context;
  11d2fc:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  11d300:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  11d304:	d0a74217 	ldw	r2,-25336(gp)
  11d308:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  11d30c:	d0a74217 	ldw	r2,-25336(gp)
  11d310:	10000326 	beq	r2,zero,11d320 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  11d314:	d0a74217 	ldw	r2,-25336(gp)
  11d318:	10800117 	ldw	r2,4(r2)
  11d31c:	d0a74215 	stw	r2,-25336(gp)
  11d320:	e0bff817 	ldw	r2,-32(fp)
  11d324:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11d328:	e0bff917 	ldw	r2,-28(fp)
  11d32c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  11d330:	e0bffa17 	ldw	r2,-24(fp)
  11d334:	1000051e 	bne	r2,zero,11d34c <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
  11d338:	e0bfff17 	ldw	r2,-4(fp)
  11d33c:	00c01684 	movi	r3,90
  11d340:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  11d344:	0005883a 	mov	r2,zero
  11d348:	00002c06 	br	11d3fc <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  11d34c:	e0bffc17 	ldw	r2,-16(fp)
  11d350:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  11d354:	e0fffc17 	ldw	r3,-16(fp)
  11d358:	e0bffe17 	ldw	r2,-8(fp)
  11d35c:	1885883a 	add	r2,r3,r2
  11d360:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
  11d364:	e03ff715 	stw	zero,-36(fp)
  11d368:	00000c06 	br	11d39c <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  11d36c:	e0bff617 	ldw	r2,-40(fp)
  11d370:	e0fff517 	ldw	r3,-44(fp)
  11d374:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  11d378:	e0bff517 	ldw	r2,-44(fp)
  11d37c:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  11d380:	e0fff517 	ldw	r3,-44(fp)
  11d384:	e0bffe17 	ldw	r2,-8(fp)
  11d388:	1885883a 	add	r2,r3,r2
  11d38c:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  11d390:	e0bff717 	ldw	r2,-36(fp)
  11d394:	10800044 	addi	r2,r2,1
  11d398:	e0bff715 	stw	r2,-36(fp)
  11d39c:	e0bffd17 	ldw	r2,-12(fp)
  11d3a0:	10bfffc4 	addi	r2,r2,-1
  11d3a4:	e0fff717 	ldw	r3,-36(fp)
  11d3a8:	18bff036 	bltu	r3,r2,11d36c <__alt_data_end+0xfffdd36c>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  11d3ac:	e0bff617 	ldw	r2,-40(fp)
  11d3b0:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  11d3b4:	e0bffa17 	ldw	r2,-24(fp)
  11d3b8:	e0fffc17 	ldw	r3,-16(fp)
  11d3bc:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  11d3c0:	e0bffa17 	ldw	r2,-24(fp)
  11d3c4:	e0fffc17 	ldw	r3,-16(fp)
  11d3c8:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  11d3cc:	e0bffa17 	ldw	r2,-24(fp)
  11d3d0:	e0fffd17 	ldw	r3,-12(fp)
  11d3d4:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
  11d3d8:	e0bffa17 	ldw	r2,-24(fp)
  11d3dc:	e0fffd17 	ldw	r3,-12(fp)
  11d3e0:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  11d3e4:	e0bffa17 	ldw	r2,-24(fp)
  11d3e8:	e0fffe17 	ldw	r3,-8(fp)
  11d3ec:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
  11d3f0:	e0bfff17 	ldw	r2,-4(fp)
  11d3f4:	10000005 	stb	zero,0(r2)
    return (pmem);
  11d3f8:	e0bffa17 	ldw	r2,-24(fp)
}
  11d3fc:	e037883a 	mov	sp,fp
  11d400:	df000017 	ldw	fp,0(sp)
  11d404:	dec00104 	addi	sp,sp,4
  11d408:	f800283a 	ret

0011d40c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  11d40c:	defff804 	addi	sp,sp,-32
  11d410:	df000715 	stw	fp,28(sp)
  11d414:	df000704 	addi	fp,sp,28
  11d418:	e13ffe15 	stw	r4,-8(fp)
  11d41c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  11d420:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  11d424:	e0bfff17 	ldw	r2,-4(fp)
  11d428:	1000021e 	bne	r2,zero,11d434 <OSMemGet+0x28>
        return ((void *)0);
  11d42c:	0005883a 	mov	r2,zero
  11d430:	00002e06 	br	11d4ec <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  11d434:	e0bffe17 	ldw	r2,-8(fp)
  11d438:	1000051e 	bne	r2,zero,11d450 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  11d43c:	e0bfff17 	ldw	r2,-4(fp)
  11d440:	00c01804 	movi	r3,96
  11d444:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  11d448:	0005883a 	mov	r2,zero
  11d44c:	00002706 	br	11d4ec <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11d450:	0005303a 	rdctl	r2,status
  11d454:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11d458:	e0fffd17 	ldw	r3,-12(fp)
  11d45c:	00bfff84 	movi	r2,-2
  11d460:	1884703a 	and	r2,r3,r2
  11d464:	1001703a 	wrctl	status,r2
  
  return context;
  11d468:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  11d46c:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  11d470:	e0bffe17 	ldw	r2,-8(fp)
  11d474:	10800417 	ldw	r2,16(r2)
  11d478:	10001426 	beq	r2,zero,11d4cc <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  11d47c:	e0bffe17 	ldw	r2,-8(fp)
  11d480:	10800117 	ldw	r2,4(r2)
  11d484:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  11d488:	e0bffb17 	ldw	r2,-20(fp)
  11d48c:	10c00017 	ldw	r3,0(r2)
  11d490:	e0bffe17 	ldw	r2,-8(fp)
  11d494:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  11d498:	e0bffe17 	ldw	r2,-8(fp)
  11d49c:	10800417 	ldw	r2,16(r2)
  11d4a0:	10ffffc4 	addi	r3,r2,-1
  11d4a4:	e0bffe17 	ldw	r2,-8(fp)
  11d4a8:	10c00415 	stw	r3,16(r2)
  11d4ac:	e0bff917 	ldw	r2,-28(fp)
  11d4b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11d4b4:	e0bffa17 	ldw	r2,-24(fp)
  11d4b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  11d4bc:	e0bfff17 	ldw	r2,-4(fp)
  11d4c0:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  11d4c4:	e0bffb17 	ldw	r2,-20(fp)
  11d4c8:	00000806 	br	11d4ec <OSMemGet+0xe0>
  11d4cc:	e0bff917 	ldw	r2,-28(fp)
  11d4d0:	e0bffc15 	stw	r2,-16(fp)
  11d4d4:	e0bffc17 	ldw	r2,-16(fp)
  11d4d8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  11d4dc:	e0bfff17 	ldw	r2,-4(fp)
  11d4e0:	00c01744 	movi	r3,93
  11d4e4:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  11d4e8:	0005883a 	mov	r2,zero
}
  11d4ec:	e037883a 	mov	sp,fp
  11d4f0:	df000017 	ldw	fp,0(sp)
  11d4f4:	dec00104 	addi	sp,sp,4
  11d4f8:	f800283a 	ret

0011d4fc <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  11d4fc:	defff704 	addi	sp,sp,-36
  11d500:	dfc00815 	stw	ra,32(sp)
  11d504:	df000715 	stw	fp,28(sp)
  11d508:	df000704 	addi	fp,sp,28
  11d50c:	e13ffd15 	stw	r4,-12(fp)
  11d510:	e17ffe15 	stw	r5,-8(fp)
  11d514:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  11d518:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  11d51c:	e0bfff17 	ldw	r2,-4(fp)
  11d520:	1000021e 	bne	r2,zero,11d52c <OSMemNameGet+0x30>
        return (0);
  11d524:	0005883a 	mov	r2,zero
  11d528:	00002b06 	br	11d5d8 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  11d52c:	e0bffd17 	ldw	r2,-12(fp)
  11d530:	1000051e 	bne	r2,zero,11d548 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  11d534:	e0bfff17 	ldw	r2,-4(fp)
  11d538:	00c01804 	movi	r3,96
  11d53c:	10c00005 	stb	r3,0(r2)
        return (0);
  11d540:	0005883a 	mov	r2,zero
  11d544:	00002406 	br	11d5d8 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  11d548:	e0bffe17 	ldw	r2,-8(fp)
  11d54c:	1000051e 	bne	r2,zero,11d564 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  11d550:	e0bfff17 	ldw	r2,-4(fp)
  11d554:	00c00304 	movi	r3,12
  11d558:	10c00005 	stb	r3,0(r2)
        return (0);
  11d55c:	0005883a 	mov	r2,zero
  11d560:	00001d06 	br	11d5d8 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  11d564:	d0a74703 	ldbu	r2,-25316(gp)
  11d568:	10803fcc 	andi	r2,r2,255
  11d56c:	10000526 	beq	r2,zero,11d584 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
  11d570:	e0bfff17 	ldw	r2,-4(fp)
  11d574:	00c00444 	movi	r3,17
  11d578:	10c00005 	stb	r3,0(r2)
        return (0);
  11d57c:	0005883a 	mov	r2,zero
  11d580:	00001506 	br	11d5d8 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11d584:	0005303a 	rdctl	r2,status
  11d588:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11d58c:	e0fffb17 	ldw	r3,-20(fp)
  11d590:	00bfff84 	movi	r2,-2
  11d594:	1884703a 	and	r2,r3,r2
  11d598:	1001703a 	wrctl	status,r2
  
  return context;
  11d59c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  11d5a0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  11d5a4:	e0bffd17 	ldw	r2,-12(fp)
  11d5a8:	10800504 	addi	r2,r2,20
  11d5ac:	100b883a 	mov	r5,r2
  11d5b0:	e13ffe17 	ldw	r4,-8(fp)
  11d5b4:	011b4040 	call	11b404 <OS_StrCopy>
  11d5b8:	e0bffa05 	stb	r2,-24(fp)
  11d5bc:	e0bff917 	ldw	r2,-28(fp)
  11d5c0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11d5c4:	e0bffc17 	ldw	r2,-16(fp)
  11d5c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  11d5cc:	e0bfff17 	ldw	r2,-4(fp)
  11d5d0:	10000005 	stb	zero,0(r2)
    return (len);
  11d5d4:	e0bffa03 	ldbu	r2,-24(fp)
}
  11d5d8:	e037883a 	mov	sp,fp
  11d5dc:	dfc00117 	ldw	ra,4(sp)
  11d5e0:	df000017 	ldw	fp,0(sp)
  11d5e4:	dec00204 	addi	sp,sp,8
  11d5e8:	f800283a 	ret

0011d5ec <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  11d5ec:	defff604 	addi	sp,sp,-40
  11d5f0:	dfc00915 	stw	ra,36(sp)
  11d5f4:	df000815 	stw	fp,32(sp)
  11d5f8:	df000804 	addi	fp,sp,32
  11d5fc:	e13ffd15 	stw	r4,-12(fp)
  11d600:	e17ffe15 	stw	r5,-8(fp)
  11d604:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  11d608:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  11d60c:	e0bfff17 	ldw	r2,-4(fp)
  11d610:	10003526 	beq	r2,zero,11d6e8 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  11d614:	e0bffd17 	ldw	r2,-12(fp)
  11d618:	1000041e 	bne	r2,zero,11d62c <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  11d61c:	e0bfff17 	ldw	r2,-4(fp)
  11d620:	00c01804 	movi	r3,96
  11d624:	10c00005 	stb	r3,0(r2)
        return;
  11d628:	00003006 	br	11d6ec <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  11d62c:	e0bffe17 	ldw	r2,-8(fp)
  11d630:	1000041e 	bne	r2,zero,11d644 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  11d634:	e0bfff17 	ldw	r2,-4(fp)
  11d638:	00c00304 	movi	r3,12
  11d63c:	10c00005 	stb	r3,0(r2)
        return;
  11d640:	00002a06 	br	11d6ec <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  11d644:	d0a74703 	ldbu	r2,-25316(gp)
  11d648:	10803fcc 	andi	r2,r2,255
  11d64c:	10000426 	beq	r2,zero,11d660 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  11d650:	e0bfff17 	ldw	r2,-4(fp)
  11d654:	00c00484 	movi	r3,18
  11d658:	10c00005 	stb	r3,0(r2)
        return;
  11d65c:	00002306 	br	11d6ec <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11d660:	0005303a 	rdctl	r2,status
  11d664:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11d668:	e0fffc17 	ldw	r3,-16(fp)
  11d66c:	00bfff84 	movi	r2,-2
  11d670:	1884703a 	and	r2,r3,r2
  11d674:	1001703a 	wrctl	status,r2
  
  return context;
  11d678:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  11d67c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  11d680:	e13ffe17 	ldw	r4,-8(fp)
  11d684:	011b4780 	call	11b478 <OS_StrLen>
  11d688:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  11d68c:	e0bffa03 	ldbu	r2,-24(fp)
  11d690:	10800830 	cmpltui	r2,r2,32
  11d694:	1000081e 	bne	r2,zero,11d6b8 <OSMemNameSet+0xcc>
  11d698:	e0bff817 	ldw	r2,-32(fp)
  11d69c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11d6a0:	e0bff917 	ldw	r2,-28(fp)
  11d6a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  11d6a8:	e0bfff17 	ldw	r2,-4(fp)
  11d6ac:	00c018c4 	movi	r3,99
  11d6b0:	10c00005 	stb	r3,0(r2)
        return;
  11d6b4:	00000d06 	br	11d6ec <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  11d6b8:	e0bffd17 	ldw	r2,-12(fp)
  11d6bc:	10800504 	addi	r2,r2,20
  11d6c0:	e17ffe17 	ldw	r5,-8(fp)
  11d6c4:	1009883a 	mov	r4,r2
  11d6c8:	011b4040 	call	11b404 <OS_StrCopy>
  11d6cc:	e0bff817 	ldw	r2,-32(fp)
  11d6d0:	e0bffb15 	stw	r2,-20(fp)
  11d6d4:	e0bffb17 	ldw	r2,-20(fp)
  11d6d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  11d6dc:	e0bfff17 	ldw	r2,-4(fp)
  11d6e0:	10000005 	stb	zero,0(r2)
  11d6e4:	00000106 	br	11d6ec <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  11d6e8:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  11d6ec:	e037883a 	mov	sp,fp
  11d6f0:	dfc00117 	ldw	ra,4(sp)
  11d6f4:	df000017 	ldw	fp,0(sp)
  11d6f8:	dec00204 	addi	sp,sp,8
  11d6fc:	f800283a 	ret

0011d700 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  11d700:	defff904 	addi	sp,sp,-28
  11d704:	df000615 	stw	fp,24(sp)
  11d708:	df000604 	addi	fp,sp,24
  11d70c:	e13ffe15 	stw	r4,-8(fp)
  11d710:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  11d714:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  11d718:	e0bffe17 	ldw	r2,-8(fp)
  11d71c:	1000021e 	bne	r2,zero,11d728 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
  11d720:	00801804 	movi	r2,96
  11d724:	00002806 	br	11d7c8 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  11d728:	e0bfff17 	ldw	r2,-4(fp)
  11d72c:	1000021e 	bne	r2,zero,11d738 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
  11d730:	008017c4 	movi	r2,95
  11d734:	00002406 	br	11d7c8 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11d738:	0005303a 	rdctl	r2,status
  11d73c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11d740:	e0fffd17 	ldw	r3,-12(fp)
  11d744:	00bfff84 	movi	r2,-2
  11d748:	1884703a 	and	r2,r3,r2
  11d74c:	1001703a 	wrctl	status,r2
  
  return context;
  11d750:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  11d754:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  11d758:	e0bffe17 	ldw	r2,-8(fp)
  11d75c:	10c00417 	ldw	r3,16(r2)
  11d760:	e0bffe17 	ldw	r2,-8(fp)
  11d764:	10800317 	ldw	r2,12(r2)
  11d768:	18800636 	bltu	r3,r2,11d784 <OSMemPut+0x84>
  11d76c:	e0bffa17 	ldw	r2,-24(fp)
  11d770:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11d774:	e0bffb17 	ldw	r2,-20(fp)
  11d778:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  11d77c:	00801784 	movi	r2,94
  11d780:	00001106 	br	11d7c8 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  11d784:	e0bffe17 	ldw	r2,-8(fp)
  11d788:	10c00117 	ldw	r3,4(r2)
  11d78c:	e0bfff17 	ldw	r2,-4(fp)
  11d790:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
  11d794:	e0bffe17 	ldw	r2,-8(fp)
  11d798:	e0ffff17 	ldw	r3,-4(fp)
  11d79c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  11d7a0:	e0bffe17 	ldw	r2,-8(fp)
  11d7a4:	10800417 	ldw	r2,16(r2)
  11d7a8:	10c00044 	addi	r3,r2,1
  11d7ac:	e0bffe17 	ldw	r2,-8(fp)
  11d7b0:	10c00415 	stw	r3,16(r2)
  11d7b4:	e0bffa17 	ldw	r2,-24(fp)
  11d7b8:	e0bffc15 	stw	r2,-16(fp)
  11d7bc:	e0bffc17 	ldw	r2,-16(fp)
  11d7c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  11d7c4:	0005883a 	mov	r2,zero
}
  11d7c8:	e037883a 	mov	sp,fp
  11d7cc:	df000017 	ldw	fp,0(sp)
  11d7d0:	dec00104 	addi	sp,sp,4
  11d7d4:	f800283a 	ret

0011d7d8 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  11d7d8:	defffa04 	addi	sp,sp,-24
  11d7dc:	df000515 	stw	fp,20(sp)
  11d7e0:	df000504 	addi	fp,sp,20
  11d7e4:	e13ffe15 	stw	r4,-8(fp)
  11d7e8:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  11d7ec:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  11d7f0:	e0bffe17 	ldw	r2,-8(fp)
  11d7f4:	1000021e 	bne	r2,zero,11d800 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
  11d7f8:	00801804 	movi	r2,96
  11d7fc:	00002c06 	br	11d8b0 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  11d800:	e0bfff17 	ldw	r2,-4(fp)
  11d804:	1000021e 	bne	r2,zero,11d810 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
  11d808:	00801844 	movi	r2,97
  11d80c:	00002806 	br	11d8b0 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11d810:	0005303a 	rdctl	r2,status
  11d814:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11d818:	e0fffc17 	ldw	r3,-16(fp)
  11d81c:	00bfff84 	movi	r2,-2
  11d820:	1884703a 	and	r2,r3,r2
  11d824:	1001703a 	wrctl	status,r2
  
  return context;
  11d828:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  11d82c:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  11d830:	e0bffe17 	ldw	r2,-8(fp)
  11d834:	10c00017 	ldw	r3,0(r2)
  11d838:	e0bfff17 	ldw	r2,-4(fp)
  11d83c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  11d840:	e0bffe17 	ldw	r2,-8(fp)
  11d844:	10c00117 	ldw	r3,4(r2)
  11d848:	e0bfff17 	ldw	r2,-4(fp)
  11d84c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  11d850:	e0bffe17 	ldw	r2,-8(fp)
  11d854:	10c00217 	ldw	r3,8(r2)
  11d858:	e0bfff17 	ldw	r2,-4(fp)
  11d85c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  11d860:	e0bffe17 	ldw	r2,-8(fp)
  11d864:	10c00317 	ldw	r3,12(r2)
  11d868:	e0bfff17 	ldw	r2,-4(fp)
  11d86c:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  11d870:	e0bffe17 	ldw	r2,-8(fp)
  11d874:	10c00417 	ldw	r3,16(r2)
  11d878:	e0bfff17 	ldw	r2,-4(fp)
  11d87c:	10c00415 	stw	r3,16(r2)
  11d880:	e0bffb17 	ldw	r2,-20(fp)
  11d884:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11d888:	e0bffd17 	ldw	r2,-12(fp)
  11d88c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  11d890:	e0bfff17 	ldw	r2,-4(fp)
  11d894:	10c00317 	ldw	r3,12(r2)
  11d898:	e0bfff17 	ldw	r2,-4(fp)
  11d89c:	10800417 	ldw	r2,16(r2)
  11d8a0:	1887c83a 	sub	r3,r3,r2
  11d8a4:	e0bfff17 	ldw	r2,-4(fp)
  11d8a8:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  11d8ac:	0005883a 	mov	r2,zero
}
  11d8b0:	e037883a 	mov	sp,fp
  11d8b4:	df000017 	ldw	fp,0(sp)
  11d8b8:	dec00104 	addi	sp,sp,4
  11d8bc:	f800283a 	ret

0011d8c0 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  11d8c0:	defffc04 	addi	sp,sp,-16
  11d8c4:	dfc00315 	stw	ra,12(sp)
  11d8c8:	df000215 	stw	fp,8(sp)
  11d8cc:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  11d8d0:	01430c04 	movi	r5,3120
  11d8d4:	010004f4 	movhi	r4,19
  11d8d8:	212f6a04 	addi	r4,r4,-16984
  11d8dc:	011b2040 	call	11b204 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  11d8e0:	008004f4 	movhi	r2,19
  11d8e4:	10af6a04 	addi	r2,r2,-16984
  11d8e8:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  11d8ec:	e03fff0d 	sth	zero,-4(fp)
  11d8f0:	00001606 	br	11d94c <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  11d8f4:	e0bfff0b 	ldhu	r2,-4(fp)
  11d8f8:	10800044 	addi	r2,r2,1
  11d8fc:	01400d04 	movi	r5,52
  11d900:	1009883a 	mov	r4,r2
  11d904:	01160740 	call	116074 <__mulsi3>
  11d908:	1007883a 	mov	r3,r2
  11d90c:	008004f4 	movhi	r2,19
  11d910:	10af6a04 	addi	r2,r2,-16984
  11d914:	1887883a 	add	r3,r3,r2
  11d918:	e0bffe17 	ldw	r2,-8(fp)
  11d91c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  11d920:	e0bffe17 	ldw	r2,-8(fp)
  11d924:	00c00fc4 	movi	r3,63
  11d928:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  11d92c:	e0bffe17 	ldw	r2,-8(fp)
  11d930:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  11d934:	e0bffe17 	ldw	r2,-8(fp)
  11d938:	10800d04 	addi	r2,r2,52
  11d93c:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  11d940:	e0bfff0b 	ldhu	r2,-4(fp)
  11d944:	10800044 	addi	r2,r2,1
  11d948:	e0bfff0d 	sth	r2,-4(fp)
  11d94c:	e0bfff0b 	ldhu	r2,-4(fp)
  11d950:	10800ef0 	cmpltui	r2,r2,59
  11d954:	103fe71e 	bne	r2,zero,11d8f4 <__alt_data_end+0xfffdd8f4>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  11d958:	e0bffe17 	ldw	r2,-8(fp)
  11d95c:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  11d960:	e0bffe17 	ldw	r2,-8(fp)
  11d964:	00c00fc4 	movi	r3,63
  11d968:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  11d96c:	e0bffe17 	ldw	r2,-8(fp)
  11d970:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  11d974:	008004f4 	movhi	r2,19
  11d978:	10af6a04 	addi	r2,r2,-16984
  11d97c:	d0a74215 	stw	r2,-25336(gp)
#endif
}
  11d980:	0001883a 	nop
  11d984:	e037883a 	mov	sp,fp
  11d988:	dfc00117 	ldw	ra,4(sp)
  11d98c:	df000017 	ldw	fp,0(sp)
  11d990:	dec00204 	addi	sp,sp,8
  11d994:	f800283a 	ret

0011d998 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  11d998:	defff804 	addi	sp,sp,-32
  11d99c:	df000715 	stw	fp,28(sp)
  11d9a0:	df000704 	addi	fp,sp,28
  11d9a4:	e13ffe15 	stw	r4,-8(fp)
  11d9a8:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  11d9ac:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  11d9b0:	e0bfff17 	ldw	r2,-4(fp)
  11d9b4:	1000021e 	bne	r2,zero,11d9c0 <OSQAccept+0x28>
        return ((void *)0);
  11d9b8:	0005883a 	mov	r2,zero
  11d9bc:	00004206 	br	11dac8 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  11d9c0:	e0bffe17 	ldw	r2,-8(fp)
  11d9c4:	1000051e 	bne	r2,zero,11d9dc <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  11d9c8:	e0bfff17 	ldw	r2,-4(fp)
  11d9cc:	00c00104 	movi	r3,4
  11d9d0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  11d9d4:	0005883a 	mov	r2,zero
  11d9d8:	00003b06 	br	11dac8 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  11d9dc:	e0bffe17 	ldw	r2,-8(fp)
  11d9e0:	10800003 	ldbu	r2,0(r2)
  11d9e4:	10803fcc 	andi	r2,r2,255
  11d9e8:	108000a0 	cmpeqi	r2,r2,2
  11d9ec:	1000051e 	bne	r2,zero,11da04 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  11d9f0:	e0bfff17 	ldw	r2,-4(fp)
  11d9f4:	00c00044 	movi	r3,1
  11d9f8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  11d9fc:	0005883a 	mov	r2,zero
  11da00:	00003106 	br	11dac8 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11da04:	0005303a 	rdctl	r2,status
  11da08:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11da0c:	e0fffd17 	ldw	r3,-12(fp)
  11da10:	00bfff84 	movi	r2,-2
  11da14:	1884703a 	and	r2,r3,r2
  11da18:	1001703a 	wrctl	status,r2
  
  return context;
  11da1c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  11da20:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  11da24:	e0bffe17 	ldw	r2,-8(fp)
  11da28:	10800117 	ldw	r2,4(r2)
  11da2c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  11da30:	e0bffc17 	ldw	r2,-16(fp)
  11da34:	1080058b 	ldhu	r2,22(r2)
  11da38:	10bfffcc 	andi	r2,r2,65535
  11da3c:	10001926 	beq	r2,zero,11daa4 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  11da40:	e0bffc17 	ldw	r2,-16(fp)
  11da44:	10800417 	ldw	r2,16(r2)
  11da48:	11000104 	addi	r4,r2,4
  11da4c:	e0fffc17 	ldw	r3,-16(fp)
  11da50:	19000415 	stw	r4,16(r3)
  11da54:	10800017 	ldw	r2,0(r2)
  11da58:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  11da5c:	e0bffc17 	ldw	r2,-16(fp)
  11da60:	1080058b 	ldhu	r2,22(r2)
  11da64:	10bfffc4 	addi	r2,r2,-1
  11da68:	1007883a 	mov	r3,r2
  11da6c:	e0bffc17 	ldw	r2,-16(fp)
  11da70:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  11da74:	e0bffc17 	ldw	r2,-16(fp)
  11da78:	10c00417 	ldw	r3,16(r2)
  11da7c:	e0bffc17 	ldw	r2,-16(fp)
  11da80:	10800217 	ldw	r2,8(r2)
  11da84:	1880041e 	bne	r3,r2,11da98 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
  11da88:	e0bffc17 	ldw	r2,-16(fp)
  11da8c:	10c00117 	ldw	r3,4(r2)
  11da90:	e0bffc17 	ldw	r2,-16(fp)
  11da94:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  11da98:	e0bfff17 	ldw	r2,-4(fp)
  11da9c:	10000005 	stb	zero,0(r2)
  11daa0:	00000406 	br	11dab4 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  11daa4:	e0bfff17 	ldw	r2,-4(fp)
  11daa8:	00c007c4 	movi	r3,31
  11daac:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  11dab0:	e03ff915 	stw	zero,-28(fp)
  11dab4:	e0bffa17 	ldw	r2,-24(fp)
  11dab8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11dabc:	e0bffb17 	ldw	r2,-20(fp)
  11dac0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  11dac4:	e0bff917 	ldw	r2,-28(fp)
}
  11dac8:	e037883a 	mov	sp,fp
  11dacc:	df000017 	ldw	fp,0(sp)
  11dad0:	dec00104 	addi	sp,sp,4
  11dad4:	f800283a 	ret

0011dad8 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  11dad8:	defff404 	addi	sp,sp,-48
  11dadc:	dfc00b15 	stw	ra,44(sp)
  11dae0:	df000a15 	stw	fp,40(sp)
  11dae4:	df000a04 	addi	fp,sp,40
  11dae8:	e13ffe15 	stw	r4,-8(fp)
  11daec:	2805883a 	mov	r2,r5
  11daf0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  11daf4:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  11daf8:	d0a74703 	ldbu	r2,-25316(gp)
  11dafc:	10803fcc 	andi	r2,r2,255
  11db00:	10000226 	beq	r2,zero,11db0c <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  11db04:	0005883a 	mov	r2,zero
  11db08:	00005906 	br	11dc70 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11db0c:	0005303a 	rdctl	r2,status
  11db10:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11db14:	e0fffd17 	ldw	r3,-12(fp)
  11db18:	00bfff84 	movi	r2,-2
  11db1c:	1884703a 	and	r2,r3,r2
  11db20:	1001703a 	wrctl	status,r2
  
  return context;
  11db24:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  11db28:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  11db2c:	d0a74617 	ldw	r2,-25320(gp)
  11db30:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  11db34:	d0a74617 	ldw	r2,-25320(gp)
  11db38:	10000326 	beq	r2,zero,11db48 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  11db3c:	d0a74617 	ldw	r2,-25320(gp)
  11db40:	10800117 	ldw	r2,4(r2)
  11db44:	d0a74615 	stw	r2,-25320(gp)
  11db48:	e0bff717 	ldw	r2,-36(fp)
  11db4c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11db50:	e0bff817 	ldw	r2,-32(fp)
  11db54:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  11db58:	e0bff617 	ldw	r2,-40(fp)
  11db5c:	10004326 	beq	r2,zero,11dc6c <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11db60:	0005303a 	rdctl	r2,status
  11db64:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11db68:	e0fff917 	ldw	r3,-28(fp)
  11db6c:	00bfff84 	movi	r2,-2
  11db70:	1884703a 	and	r2,r3,r2
  11db74:	1001703a 	wrctl	status,r2
  
  return context;
  11db78:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
  11db7c:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  11db80:	d0a74417 	ldw	r2,-25328(gp)
  11db84:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  11db88:	e0bffb17 	ldw	r2,-20(fp)
  11db8c:	10002d26 	beq	r2,zero,11dc44 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  11db90:	d0a74417 	ldw	r2,-25328(gp)
  11db94:	10800017 	ldw	r2,0(r2)
  11db98:	d0a74415 	stw	r2,-25328(gp)
  11db9c:	e0bff717 	ldw	r2,-36(fp)
  11dba0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11dba4:	e0bffa17 	ldw	r2,-24(fp)
  11dba8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  11dbac:	e0bffb17 	ldw	r2,-20(fp)
  11dbb0:	e0fffe17 	ldw	r3,-8(fp)
  11dbb4:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
  11dbb8:	e0bfff0b 	ldhu	r2,-4(fp)
  11dbbc:	1085883a 	add	r2,r2,r2
  11dbc0:	1085883a 	add	r2,r2,r2
  11dbc4:	1007883a 	mov	r3,r2
  11dbc8:	e0bffe17 	ldw	r2,-8(fp)
  11dbcc:	10c7883a 	add	r3,r2,r3
  11dbd0:	e0bffb17 	ldw	r2,-20(fp)
  11dbd4:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  11dbd8:	e0bffb17 	ldw	r2,-20(fp)
  11dbdc:	e0fffe17 	ldw	r3,-8(fp)
  11dbe0:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
  11dbe4:	e0bffb17 	ldw	r2,-20(fp)
  11dbe8:	e0fffe17 	ldw	r3,-8(fp)
  11dbec:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
  11dbf0:	e0bffb17 	ldw	r2,-20(fp)
  11dbf4:	e0ffff0b 	ldhu	r3,-4(fp)
  11dbf8:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
  11dbfc:	e0bffb17 	ldw	r2,-20(fp)
  11dc00:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  11dc04:	e0bff617 	ldw	r2,-40(fp)
  11dc08:	00c00084 	movi	r3,2
  11dc0c:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
  11dc10:	e0bff617 	ldw	r2,-40(fp)
  11dc14:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  11dc18:	e0bff617 	ldw	r2,-40(fp)
  11dc1c:	e0fffb17 	ldw	r3,-20(fp)
  11dc20:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  11dc24:	e0bff617 	ldw	r2,-40(fp)
  11dc28:	00c00fc4 	movi	r3,63
  11dc2c:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  11dc30:	e0bff617 	ldw	r2,-40(fp)
  11dc34:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  11dc38:	e13ff617 	ldw	r4,-40(fp)
  11dc3c:	011ae240 	call	11ae24 <OS_EventWaitListInit>
  11dc40:	00000a06 	br	11dc6c <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  11dc44:	d0e74617 	ldw	r3,-25320(gp)
  11dc48:	e0bff617 	ldw	r2,-40(fp)
  11dc4c:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  11dc50:	e0bff617 	ldw	r2,-40(fp)
  11dc54:	d0a74615 	stw	r2,-25320(gp)
  11dc58:	e0bff717 	ldw	r2,-36(fp)
  11dc5c:	e0bffc15 	stw	r2,-16(fp)
  11dc60:	e0bffc17 	ldw	r2,-16(fp)
  11dc64:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  11dc68:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
  11dc6c:	e0bff617 	ldw	r2,-40(fp)
}
  11dc70:	e037883a 	mov	sp,fp
  11dc74:	dfc00117 	ldw	ra,4(sp)
  11dc78:	df000017 	ldw	fp,0(sp)
  11dc7c:	dec00204 	addi	sp,sp,8
  11dc80:	f800283a 	ret

0011dc84 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  11dc84:	defff204 	addi	sp,sp,-56
  11dc88:	dfc00d15 	stw	ra,52(sp)
  11dc8c:	df000c15 	stw	fp,48(sp)
  11dc90:	df000c04 	addi	fp,sp,48
  11dc94:	e13ffd15 	stw	r4,-12(fp)
  11dc98:	2805883a 	mov	r2,r5
  11dc9c:	e1bfff15 	stw	r6,-4(fp)
  11dca0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  11dca4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  11dca8:	e0bfff17 	ldw	r2,-4(fp)
  11dcac:	1000021e 	bne	r2,zero,11dcb8 <OSQDel+0x34>
        return (pevent);
  11dcb0:	e0bffd17 	ldw	r2,-12(fp)
  11dcb4:	00008e06 	br	11def0 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  11dcb8:	e0bffd17 	ldw	r2,-12(fp)
  11dcbc:	1000051e 	bne	r2,zero,11dcd4 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  11dcc0:	e0bfff17 	ldw	r2,-4(fp)
  11dcc4:	00c00104 	movi	r3,4
  11dcc8:	10c00005 	stb	r3,0(r2)
        return (pevent);
  11dccc:	e0bffd17 	ldw	r2,-12(fp)
  11dcd0:	00008706 	br	11def0 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  11dcd4:	e0bffd17 	ldw	r2,-12(fp)
  11dcd8:	10800003 	ldbu	r2,0(r2)
  11dcdc:	10803fcc 	andi	r2,r2,255
  11dce0:	108000a0 	cmpeqi	r2,r2,2
  11dce4:	1000051e 	bne	r2,zero,11dcfc <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  11dce8:	e0bfff17 	ldw	r2,-4(fp)
  11dcec:	00c00044 	movi	r3,1
  11dcf0:	10c00005 	stb	r3,0(r2)
        return (pevent);
  11dcf4:	e0bffd17 	ldw	r2,-12(fp)
  11dcf8:	00007d06 	br	11def0 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  11dcfc:	d0a74703 	ldbu	r2,-25316(gp)
  11dd00:	10803fcc 	andi	r2,r2,255
  11dd04:	10000526 	beq	r2,zero,11dd1c <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  11dd08:	e0bfff17 	ldw	r2,-4(fp)
  11dd0c:	00c003c4 	movi	r3,15
  11dd10:	10c00005 	stb	r3,0(r2)
        return (pevent);
  11dd14:	e0bffd17 	ldw	r2,-12(fp)
  11dd18:	00007506 	br	11def0 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11dd1c:	0005303a 	rdctl	r2,status
  11dd20:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11dd24:	e0fffc17 	ldw	r3,-16(fp)
  11dd28:	00bfff84 	movi	r2,-2
  11dd2c:	1884703a 	and	r2,r3,r2
  11dd30:	1001703a 	wrctl	status,r2
  
  return context;
  11dd34:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  11dd38:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  11dd3c:	e0bffd17 	ldw	r2,-12(fp)
  11dd40:	10800283 	ldbu	r2,10(r2)
  11dd44:	10803fcc 	andi	r2,r2,255
  11dd48:	10000326 	beq	r2,zero,11dd58 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  11dd4c:	00800044 	movi	r2,1
  11dd50:	e0bff405 	stb	r2,-48(fp)
  11dd54:	00000106 	br	11dd5c <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  11dd58:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
  11dd5c:	e0bffe03 	ldbu	r2,-8(fp)
  11dd60:	10000326 	beq	r2,zero,11dd70 <OSQDel+0xec>
  11dd64:	10800060 	cmpeqi	r2,r2,1
  11dd68:	1000301e 	bne	r2,zero,11de2c <OSQDel+0x1a8>
  11dd6c:	00005506 	br	11dec4 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  11dd70:	e0bff403 	ldbu	r2,-48(fp)
  11dd74:	10001e1e 	bne	r2,zero,11ddf0 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  11dd78:	e0bffd17 	ldw	r2,-12(fp)
  11dd7c:	00c00fc4 	movi	r3,63
  11dd80:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  11dd84:	e0bffd17 	ldw	r2,-12(fp)
  11dd88:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  11dd8c:	e0bffd17 	ldw	r2,-12(fp)
  11dd90:	10800117 	ldw	r2,4(r2)
  11dd94:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  11dd98:	d0e74417 	ldw	r3,-25328(gp)
  11dd9c:	e0bff817 	ldw	r2,-32(fp)
  11dda0:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  11dda4:	e0bff817 	ldw	r2,-32(fp)
  11dda8:	d0a74415 	stw	r2,-25328(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  11ddac:	e0bffd17 	ldw	r2,-12(fp)
  11ddb0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  11ddb4:	d0e74617 	ldw	r3,-25320(gp)
  11ddb8:	e0bffd17 	ldw	r2,-12(fp)
  11ddbc:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  11ddc0:	e0bffd17 	ldw	r2,-12(fp)
  11ddc4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  11ddc8:	e0bffd17 	ldw	r2,-12(fp)
  11ddcc:	d0a74615 	stw	r2,-25320(gp)
  11ddd0:	e0bff617 	ldw	r2,-40(fp)
  11ddd4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11ddd8:	e0bff717 	ldw	r2,-36(fp)
  11dddc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  11dde0:	e0bfff17 	ldw	r2,-4(fp)
  11dde4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  11dde8:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
  11ddec:	00003f06 	br	11deec <OSQDel+0x268>
  11ddf0:	e0bff617 	ldw	r2,-40(fp)
  11ddf4:	e0bff915 	stw	r2,-28(fp)
  11ddf8:	e0bff917 	ldw	r2,-28(fp)
  11ddfc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  11de00:	e0bfff17 	ldw	r2,-4(fp)
  11de04:	00c01244 	movi	r3,73
  11de08:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
  11de0c:	e0bffd17 	ldw	r2,-12(fp)
  11de10:	e0bff515 	stw	r2,-44(fp)
             }
             break;
  11de14:	00003506 	br	11deec <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  11de18:	000f883a 	mov	r7,zero
  11de1c:	01800104 	movi	r6,4
  11de20:	000b883a 	mov	r5,zero
  11de24:	e13ffd17 	ldw	r4,-12(fp)
  11de28:	011a8740 	call	11a874 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  11de2c:	e0bffd17 	ldw	r2,-12(fp)
  11de30:	10800283 	ldbu	r2,10(r2)
  11de34:	10803fcc 	andi	r2,r2,255
  11de38:	103ff71e 	bne	r2,zero,11de18 <__alt_data_end+0xfffdde18>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  11de3c:	e0bffd17 	ldw	r2,-12(fp)
  11de40:	00c00fc4 	movi	r3,63
  11de44:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  11de48:	e0bffd17 	ldw	r2,-12(fp)
  11de4c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  11de50:	e0bffd17 	ldw	r2,-12(fp)
  11de54:	10800117 	ldw	r2,4(r2)
  11de58:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  11de5c:	d0e74417 	ldw	r3,-25328(gp)
  11de60:	e0bff817 	ldw	r2,-32(fp)
  11de64:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  11de68:	e0bff817 	ldw	r2,-32(fp)
  11de6c:	d0a74415 	stw	r2,-25328(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  11de70:	e0bffd17 	ldw	r2,-12(fp)
  11de74:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  11de78:	d0e74617 	ldw	r3,-25320(gp)
  11de7c:	e0bffd17 	ldw	r2,-12(fp)
  11de80:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  11de84:	e0bffd17 	ldw	r2,-12(fp)
  11de88:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  11de8c:	e0bffd17 	ldw	r2,-12(fp)
  11de90:	d0a74615 	stw	r2,-25320(gp)
  11de94:	e0bff617 	ldw	r2,-40(fp)
  11de98:	e0bffa15 	stw	r2,-24(fp)
  11de9c:	e0bffa17 	ldw	r2,-24(fp)
  11dea0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  11dea4:	e0bff403 	ldbu	r2,-48(fp)
  11dea8:	10800058 	cmpnei	r2,r2,1
  11deac:	1000011e 	bne	r2,zero,11deb4 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  11deb0:	011b2c00 	call	11b2c0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  11deb4:	e0bfff17 	ldw	r2,-4(fp)
  11deb8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  11debc:	e03ff515 	stw	zero,-44(fp)
             break;
  11dec0:	00000a06 	br	11deec <OSQDel+0x268>
  11dec4:	e0bff617 	ldw	r2,-40(fp)
  11dec8:	e0bffb15 	stw	r2,-20(fp)
  11decc:	e0bffb17 	ldw	r2,-20(fp)
  11ded0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  11ded4:	e0bfff17 	ldw	r2,-4(fp)
  11ded8:	00c001c4 	movi	r3,7
  11dedc:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
  11dee0:	e0bffd17 	ldw	r2,-12(fp)
  11dee4:	e0bff515 	stw	r2,-44(fp)
             break;
  11dee8:	0001883a 	nop
    }
    return (pevent_return);
  11deec:	e0bff517 	ldw	r2,-44(fp)
}
  11def0:	e037883a 	mov	sp,fp
  11def4:	dfc00117 	ldw	ra,4(sp)
  11def8:	df000017 	ldw	fp,0(sp)
  11defc:	dec00204 	addi	sp,sp,8
  11df00:	f800283a 	ret

0011df04 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  11df04:	defffa04 	addi	sp,sp,-24
  11df08:	df000515 	stw	fp,20(sp)
  11df0c:	df000504 	addi	fp,sp,20
  11df10:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  11df14:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  11df18:	e0bfff17 	ldw	r2,-4(fp)
  11df1c:	1000021e 	bne	r2,zero,11df28 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
  11df20:	00800104 	movi	r2,4
  11df24:	00002106 	br	11dfac <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  11df28:	e0bfff17 	ldw	r2,-4(fp)
  11df2c:	10800003 	ldbu	r2,0(r2)
  11df30:	10803fcc 	andi	r2,r2,255
  11df34:	108000a0 	cmpeqi	r2,r2,2
  11df38:	1000021e 	bne	r2,zero,11df44 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
  11df3c:	00800044 	movi	r2,1
  11df40:	00001a06 	br	11dfac <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11df44:	0005303a 	rdctl	r2,status
  11df48:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11df4c:	e0fffd17 	ldw	r3,-12(fp)
  11df50:	00bfff84 	movi	r2,-2
  11df54:	1884703a 	and	r2,r3,r2
  11df58:	1001703a 	wrctl	status,r2
  
  return context;
  11df5c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  11df60:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  11df64:	e0bfff17 	ldw	r2,-4(fp)
  11df68:	10800117 	ldw	r2,4(r2)
  11df6c:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
  11df70:	e0bffc17 	ldw	r2,-16(fp)
  11df74:	10c00117 	ldw	r3,4(r2)
  11df78:	e0bffc17 	ldw	r2,-16(fp)
  11df7c:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  11df80:	e0bffc17 	ldw	r2,-16(fp)
  11df84:	10c00117 	ldw	r3,4(r2)
  11df88:	e0bffc17 	ldw	r2,-16(fp)
  11df8c:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  11df90:	e0bffc17 	ldw	r2,-16(fp)
  11df94:	1000058d 	sth	zero,22(r2)
  11df98:	e0bffb17 	ldw	r2,-20(fp)
  11df9c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11dfa0:	e0bffe17 	ldw	r2,-8(fp)
  11dfa4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  11dfa8:	0005883a 	mov	r2,zero
}
  11dfac:	e037883a 	mov	sp,fp
  11dfb0:	df000017 	ldw	fp,0(sp)
  11dfb4:	dec00104 	addi	sp,sp,4
  11dfb8:	f800283a 	ret

0011dfbc <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  11dfbc:	defff304 	addi	sp,sp,-52
  11dfc0:	dfc00c15 	stw	ra,48(sp)
  11dfc4:	df000b15 	stw	fp,44(sp)
  11dfc8:	df000b04 	addi	fp,sp,44
  11dfcc:	e13ffd15 	stw	r4,-12(fp)
  11dfd0:	2805883a 	mov	r2,r5
  11dfd4:	e1bfff15 	stw	r6,-4(fp)
  11dfd8:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  11dfdc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  11dfe0:	e0bfff17 	ldw	r2,-4(fp)
  11dfe4:	1000021e 	bne	r2,zero,11dff0 <OSQPend+0x34>
        return ((void *)0);
  11dfe8:	0005883a 	mov	r2,zero
  11dfec:	00009106 	br	11e234 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  11dff0:	e0bffd17 	ldw	r2,-12(fp)
  11dff4:	1000051e 	bne	r2,zero,11e00c <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  11dff8:	e0bfff17 	ldw	r2,-4(fp)
  11dffc:	00c00104 	movi	r3,4
  11e000:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  11e004:	0005883a 	mov	r2,zero
  11e008:	00008a06 	br	11e234 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  11e00c:	e0bffd17 	ldw	r2,-12(fp)
  11e010:	10800003 	ldbu	r2,0(r2)
  11e014:	10803fcc 	andi	r2,r2,255
  11e018:	108000a0 	cmpeqi	r2,r2,2
  11e01c:	1000051e 	bne	r2,zero,11e034 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  11e020:	e0bfff17 	ldw	r2,-4(fp)
  11e024:	00c00044 	movi	r3,1
  11e028:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  11e02c:	0005883a 	mov	r2,zero
  11e030:	00008006 	br	11e234 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  11e034:	d0a74703 	ldbu	r2,-25316(gp)
  11e038:	10803fcc 	andi	r2,r2,255
  11e03c:	10000526 	beq	r2,zero,11e054 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  11e040:	e0bfff17 	ldw	r2,-4(fp)
  11e044:	00c00084 	movi	r3,2
  11e048:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  11e04c:	0005883a 	mov	r2,zero
  11e050:	00007806 	br	11e234 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  11e054:	d0a73903 	ldbu	r2,-25372(gp)
  11e058:	10803fcc 	andi	r2,r2,255
  11e05c:	10000526 	beq	r2,zero,11e074 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  11e060:	e0bfff17 	ldw	r2,-4(fp)
  11e064:	00c00344 	movi	r3,13
  11e068:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  11e06c:	0005883a 	mov	r2,zero
  11e070:	00007006 	br	11e234 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11e074:	0005303a 	rdctl	r2,status
  11e078:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11e07c:	e0fffc17 	ldw	r3,-16(fp)
  11e080:	00bfff84 	movi	r2,-2
  11e084:	1884703a 	and	r2,r3,r2
  11e088:	1001703a 	wrctl	status,r2
  
  return context;
  11e08c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  11e090:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  11e094:	e0bffd17 	ldw	r2,-12(fp)
  11e098:	10800117 	ldw	r2,4(r2)
  11e09c:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  11e0a0:	e0bff817 	ldw	r2,-32(fp)
  11e0a4:	1080058b 	ldhu	r2,22(r2)
  11e0a8:	10bfffcc 	andi	r2,r2,65535
  11e0ac:	10001e26 	beq	r2,zero,11e128 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  11e0b0:	e0bff817 	ldw	r2,-32(fp)
  11e0b4:	10800417 	ldw	r2,16(r2)
  11e0b8:	11000104 	addi	r4,r2,4
  11e0bc:	e0fff817 	ldw	r3,-32(fp)
  11e0c0:	19000415 	stw	r4,16(r3)
  11e0c4:	10800017 	ldw	r2,0(r2)
  11e0c8:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  11e0cc:	e0bff817 	ldw	r2,-32(fp)
  11e0d0:	1080058b 	ldhu	r2,22(r2)
  11e0d4:	10bfffc4 	addi	r2,r2,-1
  11e0d8:	1007883a 	mov	r3,r2
  11e0dc:	e0bff817 	ldw	r2,-32(fp)
  11e0e0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  11e0e4:	e0bff817 	ldw	r2,-32(fp)
  11e0e8:	10c00417 	ldw	r3,16(r2)
  11e0ec:	e0bff817 	ldw	r2,-32(fp)
  11e0f0:	10800217 	ldw	r2,8(r2)
  11e0f4:	1880041e 	bne	r3,r2,11e108 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
  11e0f8:	e0bff817 	ldw	r2,-32(fp)
  11e0fc:	10c00117 	ldw	r3,4(r2)
  11e100:	e0bff817 	ldw	r2,-32(fp)
  11e104:	10c00415 	stw	r3,16(r2)
  11e108:	e0bff617 	ldw	r2,-40(fp)
  11e10c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11e110:	e0bff717 	ldw	r2,-36(fp)
  11e114:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  11e118:	e0bfff17 	ldw	r2,-4(fp)
  11e11c:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  11e120:	e0bff517 	ldw	r2,-44(fp)
  11e124:	00004306 	br	11e234 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  11e128:	d0a74817 	ldw	r2,-25312(gp)
  11e12c:	d0e74817 	ldw	r3,-25312(gp)
  11e130:	18c00c03 	ldbu	r3,48(r3)
  11e134:	18c00114 	ori	r3,r3,4
  11e138:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  11e13c:	d0a74817 	ldw	r2,-25312(gp)
  11e140:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  11e144:	d0a74817 	ldw	r2,-25312(gp)
  11e148:	e0fffe0b 	ldhu	r3,-8(fp)
  11e14c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  11e150:	e13ffd17 	ldw	r4,-12(fp)
  11e154:	011aa0c0 	call	11aa0c <OS_EventTaskWait>
  11e158:	e0bff617 	ldw	r2,-40(fp)
  11e15c:	e0bffb15 	stw	r2,-20(fp)
  11e160:	e0bffb17 	ldw	r2,-20(fp)
  11e164:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  11e168:	011b2c00 	call	11b2c0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11e16c:	0005303a 	rdctl	r2,status
  11e170:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11e174:	e0fff917 	ldw	r3,-28(fp)
  11e178:	00bfff84 	movi	r2,-2
  11e17c:	1884703a 	and	r2,r3,r2
  11e180:	1001703a 	wrctl	status,r2
  
  return context;
  11e184:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
  11e188:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  11e18c:	d0a74817 	ldw	r2,-25312(gp)
  11e190:	10800c43 	ldbu	r2,49(r2)
  11e194:	10803fcc 	andi	r2,r2,255
  11e198:	10000326 	beq	r2,zero,11e1a8 <OSQPend+0x1ec>
  11e19c:	108000a0 	cmpeqi	r2,r2,2
  11e1a0:	1000071e 	bne	r2,zero,11e1c0 <OSQPend+0x204>
  11e1a4:	00000b06 	br	11e1d4 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  11e1a8:	d0a74817 	ldw	r2,-25312(gp)
  11e1ac:	10800917 	ldw	r2,36(r2)
  11e1b0:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
  11e1b4:	e0bfff17 	ldw	r2,-4(fp)
  11e1b8:	10000005 	stb	zero,0(r2)
             break;
  11e1bc:	00000e06 	br	11e1f8 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  11e1c0:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  11e1c4:	e0bfff17 	ldw	r2,-4(fp)
  11e1c8:	00c00384 	movi	r3,14
  11e1cc:	10c00005 	stb	r3,0(r2)
             break;
  11e1d0:	00000906 	br	11e1f8 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  11e1d4:	d0a74817 	ldw	r2,-25312(gp)
  11e1d8:	e17ffd17 	ldw	r5,-12(fp)
  11e1dc:	1009883a 	mov	r4,r2
  11e1e0:	011ac6c0 	call	11ac6c <OS_EventTaskRemove>
             pmsg = (void *)0;
  11e1e4:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  11e1e8:	e0bfff17 	ldw	r2,-4(fp)
  11e1ec:	00c00284 	movi	r3,10
  11e1f0:	10c00005 	stb	r3,0(r2)
             break;
  11e1f4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  11e1f8:	d0a74817 	ldw	r2,-25312(gp)
  11e1fc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  11e200:	d0a74817 	ldw	r2,-25312(gp)
  11e204:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  11e208:	d0a74817 	ldw	r2,-25312(gp)
  11e20c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  11e210:	d0a74817 	ldw	r2,-25312(gp)
  11e214:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  11e218:	d0a74817 	ldw	r2,-25312(gp)
  11e21c:	10000915 	stw	zero,36(r2)
  11e220:	e0bff617 	ldw	r2,-40(fp)
  11e224:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11e228:	e0bffa17 	ldw	r2,-24(fp)
  11e22c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  11e230:	e0bff517 	ldw	r2,-44(fp)
}
  11e234:	e037883a 	mov	sp,fp
  11e238:	dfc00117 	ldw	ra,4(sp)
  11e23c:	df000017 	ldw	fp,0(sp)
  11e240:	dec00204 	addi	sp,sp,8
  11e244:	f800283a 	ret

0011e248 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  11e248:	defff604 	addi	sp,sp,-40
  11e24c:	dfc00915 	stw	ra,36(sp)
  11e250:	df000815 	stw	fp,32(sp)
  11e254:	df000804 	addi	fp,sp,32
  11e258:	e13ffd15 	stw	r4,-12(fp)
  11e25c:	2805883a 	mov	r2,r5
  11e260:	e1bfff15 	stw	r6,-4(fp)
  11e264:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  11e268:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  11e26c:	e0bfff17 	ldw	r2,-4(fp)
  11e270:	1000021e 	bne	r2,zero,11e27c <OSQPendAbort+0x34>
        return (0);
  11e274:	0005883a 	mov	r2,zero
  11e278:	00004906 	br	11e3a0 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  11e27c:	e0bffd17 	ldw	r2,-12(fp)
  11e280:	1000051e 	bne	r2,zero,11e298 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  11e284:	e0bfff17 	ldw	r2,-4(fp)
  11e288:	00c00104 	movi	r3,4
  11e28c:	10c00005 	stb	r3,0(r2)
        return (0);
  11e290:	0005883a 	mov	r2,zero
  11e294:	00004206 	br	11e3a0 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  11e298:	e0bffd17 	ldw	r2,-12(fp)
  11e29c:	10800003 	ldbu	r2,0(r2)
  11e2a0:	10803fcc 	andi	r2,r2,255
  11e2a4:	108000a0 	cmpeqi	r2,r2,2
  11e2a8:	1000051e 	bne	r2,zero,11e2c0 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  11e2ac:	e0bfff17 	ldw	r2,-4(fp)
  11e2b0:	00c00044 	movi	r3,1
  11e2b4:	10c00005 	stb	r3,0(r2)
        return (0);
  11e2b8:	0005883a 	mov	r2,zero
  11e2bc:	00003806 	br	11e3a0 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11e2c0:	0005303a 	rdctl	r2,status
  11e2c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11e2c8:	e0fffc17 	ldw	r3,-16(fp)
  11e2cc:	00bfff84 	movi	r2,-2
  11e2d0:	1884703a 	and	r2,r3,r2
  11e2d4:	1001703a 	wrctl	status,r2
  
  return context;
  11e2d8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  11e2dc:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  11e2e0:	e0bffd17 	ldw	r2,-12(fp)
  11e2e4:	10800283 	ldbu	r2,10(r2)
  11e2e8:	10803fcc 	andi	r2,r2,255
  11e2ec:	10002526 	beq	r2,zero,11e384 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
  11e2f0:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
  11e2f4:	e0bffe03 	ldbu	r2,-8(fp)
  11e2f8:	10800060 	cmpeqi	r2,r2,1
  11e2fc:	10000e26 	beq	r2,zero,11e338 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  11e300:	00000806 	br	11e324 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  11e304:	01c00084 	movi	r7,2
  11e308:	01800104 	movi	r6,4
  11e30c:	000b883a 	mov	r5,zero
  11e310:	e13ffd17 	ldw	r4,-12(fp)
  11e314:	011a8740 	call	11a874 <OS_EventTaskRdy>
                     nbr_tasks++;
  11e318:	e0bff803 	ldbu	r2,-32(fp)
  11e31c:	10800044 	addi	r2,r2,1
  11e320:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  11e324:	e0bffd17 	ldw	r2,-12(fp)
  11e328:	10800283 	ldbu	r2,10(r2)
  11e32c:	10803fcc 	andi	r2,r2,255
  11e330:	103ff41e 	bne	r2,zero,11e304 <__alt_data_end+0xfffde304>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  11e334:	00000906 	br	11e35c <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  11e338:	01c00084 	movi	r7,2
  11e33c:	01800104 	movi	r6,4
  11e340:	000b883a 	mov	r5,zero
  11e344:	e13ffd17 	ldw	r4,-12(fp)
  11e348:	011a8740 	call	11a874 <OS_EventTaskRdy>
                 nbr_tasks++;
  11e34c:	e0bff803 	ldbu	r2,-32(fp)
  11e350:	10800044 	addi	r2,r2,1
  11e354:	e0bff805 	stb	r2,-32(fp)
                 break;
  11e358:	0001883a 	nop
  11e35c:	e0bff917 	ldw	r2,-28(fp)
  11e360:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11e364:	e0bffa17 	ldw	r2,-24(fp)
  11e368:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  11e36c:	011b2c00 	call	11b2c0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  11e370:	e0bfff17 	ldw	r2,-4(fp)
  11e374:	00c00384 	movi	r3,14
  11e378:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
  11e37c:	e0bff803 	ldbu	r2,-32(fp)
  11e380:	00000706 	br	11e3a0 <OSQPendAbort+0x158>
  11e384:	e0bff917 	ldw	r2,-28(fp)
  11e388:	e0bffb15 	stw	r2,-20(fp)
  11e38c:	e0bffb17 	ldw	r2,-20(fp)
  11e390:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  11e394:	e0bfff17 	ldw	r2,-4(fp)
  11e398:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  11e39c:	0005883a 	mov	r2,zero
}
  11e3a0:	e037883a 	mov	sp,fp
  11e3a4:	dfc00117 	ldw	ra,4(sp)
  11e3a8:	df000017 	ldw	fp,0(sp)
  11e3ac:	dec00204 	addi	sp,sp,8
  11e3b0:	f800283a 	ret

0011e3b4 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  11e3b4:	defff604 	addi	sp,sp,-40
  11e3b8:	dfc00915 	stw	ra,36(sp)
  11e3bc:	df000815 	stw	fp,32(sp)
  11e3c0:	df000804 	addi	fp,sp,32
  11e3c4:	e13ffe15 	stw	r4,-8(fp)
  11e3c8:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  11e3cc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  11e3d0:	e0bffe17 	ldw	r2,-8(fp)
  11e3d4:	1000021e 	bne	r2,zero,11e3e0 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
  11e3d8:	00800104 	movi	r2,4
  11e3dc:	00004a06 	br	11e508 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  11e3e0:	e0bffe17 	ldw	r2,-8(fp)
  11e3e4:	10800003 	ldbu	r2,0(r2)
  11e3e8:	10803fcc 	andi	r2,r2,255
  11e3ec:	108000a0 	cmpeqi	r2,r2,2
  11e3f0:	1000021e 	bne	r2,zero,11e3fc <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
  11e3f4:	00800044 	movi	r2,1
  11e3f8:	00004306 	br	11e508 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11e3fc:	0005303a 	rdctl	r2,status
  11e400:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11e404:	e0fffd17 	ldw	r3,-12(fp)
  11e408:	00bfff84 	movi	r2,-2
  11e40c:	1884703a 	and	r2,r3,r2
  11e410:	1001703a 	wrctl	status,r2
  
  return context;
  11e414:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  11e418:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  11e41c:	e0bffe17 	ldw	r2,-8(fp)
  11e420:	10800283 	ldbu	r2,10(r2)
  11e424:	10803fcc 	andi	r2,r2,255
  11e428:	10000c26 	beq	r2,zero,11e45c <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  11e42c:	000f883a 	mov	r7,zero
  11e430:	01800104 	movi	r6,4
  11e434:	e17fff17 	ldw	r5,-4(fp)
  11e438:	e13ffe17 	ldw	r4,-8(fp)
  11e43c:	011a8740 	call	11a874 <OS_EventTaskRdy>
  11e440:	e0bff817 	ldw	r2,-32(fp)
  11e444:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11e448:	e0bff917 	ldw	r2,-28(fp)
  11e44c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  11e450:	011b2c00 	call	11b2c0 <OS_Sched>
        return (OS_ERR_NONE);
  11e454:	0005883a 	mov	r2,zero
  11e458:	00002b06 	br	11e508 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  11e45c:	e0bffe17 	ldw	r2,-8(fp)
  11e460:	10800117 	ldw	r2,4(r2)
  11e464:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  11e468:	e0bffb17 	ldw	r2,-20(fp)
  11e46c:	10c0058b 	ldhu	r3,22(r2)
  11e470:	e0bffb17 	ldw	r2,-20(fp)
  11e474:	1080050b 	ldhu	r2,20(r2)
  11e478:	18ffffcc 	andi	r3,r3,65535
  11e47c:	10bfffcc 	andi	r2,r2,65535
  11e480:	18800636 	bltu	r3,r2,11e49c <OSQPost+0xe8>
  11e484:	e0bff817 	ldw	r2,-32(fp)
  11e488:	e0bffa15 	stw	r2,-24(fp)
  11e48c:	e0bffa17 	ldw	r2,-24(fp)
  11e490:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  11e494:	00800784 	movi	r2,30
  11e498:	00001b06 	br	11e508 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  11e49c:	e0bffb17 	ldw	r2,-20(fp)
  11e4a0:	10800317 	ldw	r2,12(r2)
  11e4a4:	11000104 	addi	r4,r2,4
  11e4a8:	e0fffb17 	ldw	r3,-20(fp)
  11e4ac:	19000315 	stw	r4,12(r3)
  11e4b0:	e0ffff17 	ldw	r3,-4(fp)
  11e4b4:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  11e4b8:	e0bffb17 	ldw	r2,-20(fp)
  11e4bc:	1080058b 	ldhu	r2,22(r2)
  11e4c0:	10800044 	addi	r2,r2,1
  11e4c4:	1007883a 	mov	r3,r2
  11e4c8:	e0bffb17 	ldw	r2,-20(fp)
  11e4cc:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  11e4d0:	e0bffb17 	ldw	r2,-20(fp)
  11e4d4:	10c00317 	ldw	r3,12(r2)
  11e4d8:	e0bffb17 	ldw	r2,-20(fp)
  11e4dc:	10800217 	ldw	r2,8(r2)
  11e4e0:	1880041e 	bne	r3,r2,11e4f4 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
  11e4e4:	e0bffb17 	ldw	r2,-20(fp)
  11e4e8:	10c00117 	ldw	r3,4(r2)
  11e4ec:	e0bffb17 	ldw	r2,-20(fp)
  11e4f0:	10c00315 	stw	r3,12(r2)
  11e4f4:	e0bff817 	ldw	r2,-32(fp)
  11e4f8:	e0bffc15 	stw	r2,-16(fp)
  11e4fc:	e0bffc17 	ldw	r2,-16(fp)
  11e500:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  11e504:	0005883a 	mov	r2,zero
}
  11e508:	e037883a 	mov	sp,fp
  11e50c:	dfc00117 	ldw	ra,4(sp)
  11e510:	df000017 	ldw	fp,0(sp)
  11e514:	dec00204 	addi	sp,sp,8
  11e518:	f800283a 	ret

0011e51c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  11e51c:	defff604 	addi	sp,sp,-40
  11e520:	dfc00915 	stw	ra,36(sp)
  11e524:	df000815 	stw	fp,32(sp)
  11e528:	df000804 	addi	fp,sp,32
  11e52c:	e13ffe15 	stw	r4,-8(fp)
  11e530:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  11e534:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  11e538:	e0bffe17 	ldw	r2,-8(fp)
  11e53c:	1000021e 	bne	r2,zero,11e548 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
  11e540:	00800104 	movi	r2,4
  11e544:	00004c06 	br	11e678 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  11e548:	e0bffe17 	ldw	r2,-8(fp)
  11e54c:	10800003 	ldbu	r2,0(r2)
  11e550:	10803fcc 	andi	r2,r2,255
  11e554:	108000a0 	cmpeqi	r2,r2,2
  11e558:	1000021e 	bne	r2,zero,11e564 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
  11e55c:	00800044 	movi	r2,1
  11e560:	00004506 	br	11e678 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11e564:	0005303a 	rdctl	r2,status
  11e568:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11e56c:	e0fffd17 	ldw	r3,-12(fp)
  11e570:	00bfff84 	movi	r2,-2
  11e574:	1884703a 	and	r2,r3,r2
  11e578:	1001703a 	wrctl	status,r2
  
  return context;
  11e57c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  11e580:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  11e584:	e0bffe17 	ldw	r2,-8(fp)
  11e588:	10800283 	ldbu	r2,10(r2)
  11e58c:	10803fcc 	andi	r2,r2,255
  11e590:	10000c26 	beq	r2,zero,11e5c4 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  11e594:	000f883a 	mov	r7,zero
  11e598:	01800104 	movi	r6,4
  11e59c:	e17fff17 	ldw	r5,-4(fp)
  11e5a0:	e13ffe17 	ldw	r4,-8(fp)
  11e5a4:	011a8740 	call	11a874 <OS_EventTaskRdy>
  11e5a8:	e0bff817 	ldw	r2,-32(fp)
  11e5ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11e5b0:	e0bff917 	ldw	r2,-28(fp)
  11e5b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  11e5b8:	011b2c00 	call	11b2c0 <OS_Sched>
        return (OS_ERR_NONE);
  11e5bc:	0005883a 	mov	r2,zero
  11e5c0:	00002d06 	br	11e678 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  11e5c4:	e0bffe17 	ldw	r2,-8(fp)
  11e5c8:	10800117 	ldw	r2,4(r2)
  11e5cc:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  11e5d0:	e0bffb17 	ldw	r2,-20(fp)
  11e5d4:	10c0058b 	ldhu	r3,22(r2)
  11e5d8:	e0bffb17 	ldw	r2,-20(fp)
  11e5dc:	1080050b 	ldhu	r2,20(r2)
  11e5e0:	18ffffcc 	andi	r3,r3,65535
  11e5e4:	10bfffcc 	andi	r2,r2,65535
  11e5e8:	18800636 	bltu	r3,r2,11e604 <OSQPostFront+0xe8>
  11e5ec:	e0bff817 	ldw	r2,-32(fp)
  11e5f0:	e0bffa15 	stw	r2,-24(fp)
  11e5f4:	e0bffa17 	ldw	r2,-24(fp)
  11e5f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  11e5fc:	00800784 	movi	r2,30
  11e600:	00001d06 	br	11e678 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  11e604:	e0bffb17 	ldw	r2,-20(fp)
  11e608:	10c00417 	ldw	r3,16(r2)
  11e60c:	e0bffb17 	ldw	r2,-20(fp)
  11e610:	10800117 	ldw	r2,4(r2)
  11e614:	1880041e 	bne	r3,r2,11e628 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
  11e618:	e0bffb17 	ldw	r2,-20(fp)
  11e61c:	10c00217 	ldw	r3,8(r2)
  11e620:	e0bffb17 	ldw	r2,-20(fp)
  11e624:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  11e628:	e0bffb17 	ldw	r2,-20(fp)
  11e62c:	10800417 	ldw	r2,16(r2)
  11e630:	10ffff04 	addi	r3,r2,-4
  11e634:	e0bffb17 	ldw	r2,-20(fp)
  11e638:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  11e63c:	e0bffb17 	ldw	r2,-20(fp)
  11e640:	10800417 	ldw	r2,16(r2)
  11e644:	e0ffff17 	ldw	r3,-4(fp)
  11e648:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  11e64c:	e0bffb17 	ldw	r2,-20(fp)
  11e650:	1080058b 	ldhu	r2,22(r2)
  11e654:	10800044 	addi	r2,r2,1
  11e658:	1007883a 	mov	r3,r2
  11e65c:	e0bffb17 	ldw	r2,-20(fp)
  11e660:	10c0058d 	sth	r3,22(r2)
  11e664:	e0bff817 	ldw	r2,-32(fp)
  11e668:	e0bffc15 	stw	r2,-16(fp)
  11e66c:	e0bffc17 	ldw	r2,-16(fp)
  11e670:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  11e674:	0005883a 	mov	r2,zero
}
  11e678:	e037883a 	mov	sp,fp
  11e67c:	dfc00117 	ldw	ra,4(sp)
  11e680:	df000017 	ldw	fp,0(sp)
  11e684:	dec00204 	addi	sp,sp,8
  11e688:	f800283a 	ret

0011e68c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  11e68c:	defff504 	addi	sp,sp,-44
  11e690:	dfc00a15 	stw	ra,40(sp)
  11e694:	df000915 	stw	fp,36(sp)
  11e698:	df000904 	addi	fp,sp,36
  11e69c:	e13ffd15 	stw	r4,-12(fp)
  11e6a0:	e17ffe15 	stw	r5,-8(fp)
  11e6a4:	3005883a 	mov	r2,r6
  11e6a8:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  11e6ac:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  11e6b0:	e0bffd17 	ldw	r2,-12(fp)
  11e6b4:	1000021e 	bne	r2,zero,11e6c0 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
  11e6b8:	00800104 	movi	r2,4
  11e6bc:	00007106 	br	11e884 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  11e6c0:	e0bffd17 	ldw	r2,-12(fp)
  11e6c4:	10800003 	ldbu	r2,0(r2)
  11e6c8:	10803fcc 	andi	r2,r2,255
  11e6cc:	108000a0 	cmpeqi	r2,r2,2
  11e6d0:	1000021e 	bne	r2,zero,11e6dc <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
  11e6d4:	00800044 	movi	r2,1
  11e6d8:	00006a06 	br	11e884 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11e6dc:	0005303a 	rdctl	r2,status
  11e6e0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11e6e4:	e0fffc17 	ldw	r3,-16(fp)
  11e6e8:	00bfff84 	movi	r2,-2
  11e6ec:	1884703a 	and	r2,r3,r2
  11e6f0:	1001703a 	wrctl	status,r2
  
  return context;
  11e6f4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  11e6f8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  11e6fc:	e0bffd17 	ldw	r2,-12(fp)
  11e700:	10800283 	ldbu	r2,10(r2)
  11e704:	10803fcc 	andi	r2,r2,255
  11e708:	10001d26 	beq	r2,zero,11e780 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  11e70c:	e0bfff03 	ldbu	r2,-4(fp)
  11e710:	1080004c 	andi	r2,r2,1
  11e714:	10000b26 	beq	r2,zero,11e744 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  11e718:	00000506 	br	11e730 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  11e71c:	000f883a 	mov	r7,zero
  11e720:	01800104 	movi	r6,4
  11e724:	e17ffe17 	ldw	r5,-8(fp)
  11e728:	e13ffd17 	ldw	r4,-12(fp)
  11e72c:	011a8740 	call	11a874 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  11e730:	e0bffd17 	ldw	r2,-12(fp)
  11e734:	10800283 	ldbu	r2,10(r2)
  11e738:	10803fcc 	andi	r2,r2,255
  11e73c:	103ff71e 	bne	r2,zero,11e71c <__alt_data_end+0xfffde71c>
  11e740:	00000506 	br	11e758 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  11e744:	000f883a 	mov	r7,zero
  11e748:	01800104 	movi	r6,4
  11e74c:	e17ffe17 	ldw	r5,-8(fp)
  11e750:	e13ffd17 	ldw	r4,-12(fp)
  11e754:	011a8740 	call	11a874 <OS_EventTaskRdy>
  11e758:	e0bff717 	ldw	r2,-36(fp)
  11e75c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11e760:	e0bff817 	ldw	r2,-32(fp)
  11e764:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  11e768:	e0bfff03 	ldbu	r2,-4(fp)
  11e76c:	1080010c 	andi	r2,r2,4
  11e770:	1000011e 	bne	r2,zero,11e778 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
  11e774:	011b2c00 	call	11b2c0 <OS_Sched>
        }
        return (OS_ERR_NONE);
  11e778:	0005883a 	mov	r2,zero
  11e77c:	00004106 	br	11e884 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  11e780:	e0bffd17 	ldw	r2,-12(fp)
  11e784:	10800117 	ldw	r2,4(r2)
  11e788:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  11e78c:	e0bffa17 	ldw	r2,-24(fp)
  11e790:	10c0058b 	ldhu	r3,22(r2)
  11e794:	e0bffa17 	ldw	r2,-24(fp)
  11e798:	1080050b 	ldhu	r2,20(r2)
  11e79c:	18ffffcc 	andi	r3,r3,65535
  11e7a0:	10bfffcc 	andi	r2,r2,65535
  11e7a4:	18800636 	bltu	r3,r2,11e7c0 <OSQPostOpt+0x134>
  11e7a8:	e0bff717 	ldw	r2,-36(fp)
  11e7ac:	e0bff915 	stw	r2,-28(fp)
  11e7b0:	e0bff917 	ldw	r2,-28(fp)
  11e7b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  11e7b8:	00800784 	movi	r2,30
  11e7bc:	00003106 	br	11e884 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  11e7c0:	e0bfff03 	ldbu	r2,-4(fp)
  11e7c4:	1080008c 	andi	r2,r2,2
  11e7c8:	10001326 	beq	r2,zero,11e818 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  11e7cc:	e0bffa17 	ldw	r2,-24(fp)
  11e7d0:	10c00417 	ldw	r3,16(r2)
  11e7d4:	e0bffa17 	ldw	r2,-24(fp)
  11e7d8:	10800117 	ldw	r2,4(r2)
  11e7dc:	1880041e 	bne	r3,r2,11e7f0 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  11e7e0:	e0bffa17 	ldw	r2,-24(fp)
  11e7e4:	10c00217 	ldw	r3,8(r2)
  11e7e8:	e0bffa17 	ldw	r2,-24(fp)
  11e7ec:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  11e7f0:	e0bffa17 	ldw	r2,-24(fp)
  11e7f4:	10800417 	ldw	r2,16(r2)
  11e7f8:	10ffff04 	addi	r3,r2,-4
  11e7fc:	e0bffa17 	ldw	r2,-24(fp)
  11e800:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  11e804:	e0bffa17 	ldw	r2,-24(fp)
  11e808:	10800417 	ldw	r2,16(r2)
  11e80c:	e0fffe17 	ldw	r3,-8(fp)
  11e810:	10c00015 	stw	r3,0(r2)
  11e814:	00001006 	br	11e858 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  11e818:	e0bffa17 	ldw	r2,-24(fp)
  11e81c:	10800317 	ldw	r2,12(r2)
  11e820:	11000104 	addi	r4,r2,4
  11e824:	e0fffa17 	ldw	r3,-24(fp)
  11e828:	19000315 	stw	r4,12(r3)
  11e82c:	e0fffe17 	ldw	r3,-8(fp)
  11e830:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  11e834:	e0bffa17 	ldw	r2,-24(fp)
  11e838:	10c00317 	ldw	r3,12(r2)
  11e83c:	e0bffa17 	ldw	r2,-24(fp)
  11e840:	10800217 	ldw	r2,8(r2)
  11e844:	1880041e 	bne	r3,r2,11e858 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
  11e848:	e0bffa17 	ldw	r2,-24(fp)
  11e84c:	10c00117 	ldw	r3,4(r2)
  11e850:	e0bffa17 	ldw	r2,-24(fp)
  11e854:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  11e858:	e0bffa17 	ldw	r2,-24(fp)
  11e85c:	1080058b 	ldhu	r2,22(r2)
  11e860:	10800044 	addi	r2,r2,1
  11e864:	1007883a 	mov	r3,r2
  11e868:	e0bffa17 	ldw	r2,-24(fp)
  11e86c:	10c0058d 	sth	r3,22(r2)
  11e870:	e0bff717 	ldw	r2,-36(fp)
  11e874:	e0bffb15 	stw	r2,-20(fp)
  11e878:	e0bffb17 	ldw	r2,-20(fp)
  11e87c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  11e880:	0005883a 	mov	r2,zero
}
  11e884:	e037883a 	mov	sp,fp
  11e888:	dfc00117 	ldw	ra,4(sp)
  11e88c:	df000017 	ldw	fp,0(sp)
  11e890:	dec00204 	addi	sp,sp,8
  11e894:	f800283a 	ret

0011e898 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  11e898:	defff604 	addi	sp,sp,-40
  11e89c:	df000915 	stw	fp,36(sp)
  11e8a0:	df000904 	addi	fp,sp,36
  11e8a4:	e13ffe15 	stw	r4,-8(fp)
  11e8a8:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  11e8ac:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  11e8b0:	e0bffe17 	ldw	r2,-8(fp)
  11e8b4:	1000021e 	bne	r2,zero,11e8c0 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
  11e8b8:	00800104 	movi	r2,4
  11e8bc:	00004906 	br	11e9e4 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  11e8c0:	e0bfff17 	ldw	r2,-4(fp)
  11e8c4:	1000021e 	bne	r2,zero,11e8d0 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
  11e8c8:	00800244 	movi	r2,9
  11e8cc:	00004506 	br	11e9e4 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  11e8d0:	e0bffe17 	ldw	r2,-8(fp)
  11e8d4:	10800003 	ldbu	r2,0(r2)
  11e8d8:	10803fcc 	andi	r2,r2,255
  11e8dc:	108000a0 	cmpeqi	r2,r2,2
  11e8e0:	1000021e 	bne	r2,zero,11e8ec <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
  11e8e4:	00800044 	movi	r2,1
  11e8e8:	00003e06 	br	11e9e4 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11e8ec:	0005303a 	rdctl	r2,status
  11e8f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11e8f4:	e0fffd17 	ldw	r3,-12(fp)
  11e8f8:	00bfff84 	movi	r2,-2
  11e8fc:	1884703a 	and	r2,r3,r2
  11e900:	1001703a 	wrctl	status,r2
  
  return context;
  11e904:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  11e908:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  11e90c:	e0bffe17 	ldw	r2,-8(fp)
  11e910:	10c00283 	ldbu	r3,10(r2)
  11e914:	e0bfff17 	ldw	r2,-4(fp)
  11e918:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  11e91c:	e0bffe17 	ldw	r2,-8(fp)
  11e920:	108002c4 	addi	r2,r2,11
  11e924:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  11e928:	e0bfff17 	ldw	r2,-4(fp)
  11e92c:	10800204 	addi	r2,r2,8
  11e930:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  11e934:	e03ff705 	stb	zero,-36(fp)
  11e938:	00000b06 	br	11e968 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
  11e93c:	e0bff917 	ldw	r2,-28(fp)
  11e940:	10c00044 	addi	r3,r2,1
  11e944:	e0fff915 	stw	r3,-28(fp)
  11e948:	e0fff817 	ldw	r3,-32(fp)
  11e94c:	19000044 	addi	r4,r3,1
  11e950:	e13ff815 	stw	r4,-32(fp)
  11e954:	18c00003 	ldbu	r3,0(r3)
  11e958:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  11e95c:	e0bff703 	ldbu	r2,-36(fp)
  11e960:	10800044 	addi	r2,r2,1
  11e964:	e0bff705 	stb	r2,-36(fp)
  11e968:	e0bff703 	ldbu	r2,-36(fp)
  11e96c:	108000f0 	cmpltui	r2,r2,3
  11e970:	103ff21e 	bne	r2,zero,11e93c <__alt_data_end+0xfffde93c>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  11e974:	e0bffe17 	ldw	r2,-8(fp)
  11e978:	10800117 	ldw	r2,4(r2)
  11e97c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  11e980:	e0bffc17 	ldw	r2,-16(fp)
  11e984:	1080058b 	ldhu	r2,22(r2)
  11e988:	10bfffcc 	andi	r2,r2,65535
  11e98c:	10000626 	beq	r2,zero,11e9a8 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  11e990:	e0bffc17 	ldw	r2,-16(fp)
  11e994:	10800417 	ldw	r2,16(r2)
  11e998:	10c00017 	ldw	r3,0(r2)
  11e99c:	e0bfff17 	ldw	r2,-4(fp)
  11e9a0:	10c00015 	stw	r3,0(r2)
  11e9a4:	00000206 	br	11e9b0 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
  11e9a8:	e0bfff17 	ldw	r2,-4(fp)
  11e9ac:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  11e9b0:	e0bffc17 	ldw	r2,-16(fp)
  11e9b4:	10c0058b 	ldhu	r3,22(r2)
  11e9b8:	e0bfff17 	ldw	r2,-4(fp)
  11e9bc:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  11e9c0:	e0bffc17 	ldw	r2,-16(fp)
  11e9c4:	10c0050b 	ldhu	r3,20(r2)
  11e9c8:	e0bfff17 	ldw	r2,-4(fp)
  11e9cc:	10c0018d 	sth	r3,6(r2)
  11e9d0:	e0bffa17 	ldw	r2,-24(fp)
  11e9d4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11e9d8:	e0bffb17 	ldw	r2,-20(fp)
  11e9dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  11e9e0:	0005883a 	mov	r2,zero
}
  11e9e4:	e037883a 	mov	sp,fp
  11e9e8:	df000017 	ldw	fp,0(sp)
  11e9ec:	dec00104 	addi	sp,sp,4
  11e9f0:	f800283a 	ret

0011e9f4 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  11e9f4:	defffb04 	addi	sp,sp,-20
  11e9f8:	dfc00415 	stw	ra,16(sp)
  11e9fc:	df000315 	stw	fp,12(sp)
  11ea00:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  11ea04:	01407804 	movi	r5,480
  11ea08:	010004f4 	movhi	r4,19
  11ea0c:	21347604 	addi	r4,r4,-11816
  11ea10:	011b2040 	call	11b204 <OS_MemClr>
    pq1 = &OSQTbl[0];
  11ea14:	008004f4 	movhi	r2,19
  11ea18:	10b47604 	addi	r2,r2,-11816
  11ea1c:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  11ea20:	008004f4 	movhi	r2,19
  11ea24:	10b47c04 	addi	r2,r2,-11792
  11ea28:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  11ea2c:	e03ffd0d 	sth	zero,-12(fp)
  11ea30:	00000c06 	br	11ea64 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  11ea34:	e0bffe17 	ldw	r2,-8(fp)
  11ea38:	e0ffff17 	ldw	r3,-4(fp)
  11ea3c:	10c00015 	stw	r3,0(r2)
        pq1++;
  11ea40:	e0bffe17 	ldw	r2,-8(fp)
  11ea44:	10800604 	addi	r2,r2,24
  11ea48:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  11ea4c:	e0bfff17 	ldw	r2,-4(fp)
  11ea50:	10800604 	addi	r2,r2,24
  11ea54:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  11ea58:	e0bffd0b 	ldhu	r2,-12(fp)
  11ea5c:	10800044 	addi	r2,r2,1
  11ea60:	e0bffd0d 	sth	r2,-12(fp)
  11ea64:	e0bffd0b 	ldhu	r2,-12(fp)
  11ea68:	108004f0 	cmpltui	r2,r2,19
  11ea6c:	103ff11e 	bne	r2,zero,11ea34 <__alt_data_end+0xfffdea34>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  11ea70:	e0bffe17 	ldw	r2,-8(fp)
  11ea74:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  11ea78:	008004f4 	movhi	r2,19
  11ea7c:	10b47604 	addi	r2,r2,-11816
  11ea80:	d0a74415 	stw	r2,-25328(gp)
#endif
}
  11ea84:	0001883a 	nop
  11ea88:	e037883a 	mov	sp,fp
  11ea8c:	dfc00117 	ldw	ra,4(sp)
  11ea90:	df000017 	ldw	fp,0(sp)
  11ea94:	dec00204 	addi	sp,sp,8
  11ea98:	f800283a 	ret

0011ea9c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  11ea9c:	defffa04 	addi	sp,sp,-24
  11eaa0:	df000515 	stw	fp,20(sp)
  11eaa4:	df000504 	addi	fp,sp,20
  11eaa8:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  11eaac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  11eab0:	e0bfff17 	ldw	r2,-4(fp)
  11eab4:	1000021e 	bne	r2,zero,11eac0 <OSSemAccept+0x24>
        return (0);
  11eab8:	0005883a 	mov	r2,zero
  11eabc:	00001f06 	br	11eb3c <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  11eac0:	e0bfff17 	ldw	r2,-4(fp)
  11eac4:	10800003 	ldbu	r2,0(r2)
  11eac8:	10803fcc 	andi	r2,r2,255
  11eacc:	108000e0 	cmpeqi	r2,r2,3
  11ead0:	1000021e 	bne	r2,zero,11eadc <OSSemAccept+0x40>
        return (0);
  11ead4:	0005883a 	mov	r2,zero
  11ead8:	00001806 	br	11eb3c <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11eadc:	0005303a 	rdctl	r2,status
  11eae0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11eae4:	e0fffe17 	ldw	r3,-8(fp)
  11eae8:	00bfff84 	movi	r2,-2
  11eaec:	1884703a 	and	r2,r3,r2
  11eaf0:	1001703a 	wrctl	status,r2
  
  return context;
  11eaf4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  11eaf8:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
  11eafc:	e0bfff17 	ldw	r2,-4(fp)
  11eb00:	1080020b 	ldhu	r2,8(r2)
  11eb04:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  11eb08:	e0bffd0b 	ldhu	r2,-12(fp)
  11eb0c:	10000626 	beq	r2,zero,11eb28 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  11eb10:	e0bfff17 	ldw	r2,-4(fp)
  11eb14:	1080020b 	ldhu	r2,8(r2)
  11eb18:	10bfffc4 	addi	r2,r2,-1
  11eb1c:	1007883a 	mov	r3,r2
  11eb20:	e0bfff17 	ldw	r2,-4(fp)
  11eb24:	10c0020d 	sth	r3,8(r2)
  11eb28:	e0bffb17 	ldw	r2,-20(fp)
  11eb2c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11eb30:	e0bffc17 	ldw	r2,-16(fp)
  11eb34:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  11eb38:	e0bffd0b 	ldhu	r2,-12(fp)
}
  11eb3c:	e037883a 	mov	sp,fp
  11eb40:	df000017 	ldw	fp,0(sp)
  11eb44:	dec00104 	addi	sp,sp,4
  11eb48:	f800283a 	ret

0011eb4c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  11eb4c:	defff904 	addi	sp,sp,-28
  11eb50:	dfc00615 	stw	ra,24(sp)
  11eb54:	df000515 	stw	fp,20(sp)
  11eb58:	df000504 	addi	fp,sp,20
  11eb5c:	2005883a 	mov	r2,r4
  11eb60:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  11eb64:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  11eb68:	d0a74703 	ldbu	r2,-25316(gp)
  11eb6c:	10803fcc 	andi	r2,r2,255
  11eb70:	10000226 	beq	r2,zero,11eb7c <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  11eb74:	0005883a 	mov	r2,zero
  11eb78:	00002506 	br	11ec10 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11eb7c:	0005303a 	rdctl	r2,status
  11eb80:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11eb84:	e0fffe17 	ldw	r3,-8(fp)
  11eb88:	00bfff84 	movi	r2,-2
  11eb8c:	1884703a 	and	r2,r3,r2
  11eb90:	1001703a 	wrctl	status,r2
  
  return context;
  11eb94:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  11eb98:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  11eb9c:	d0a74617 	ldw	r2,-25320(gp)
  11eba0:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  11eba4:	d0a74617 	ldw	r2,-25320(gp)
  11eba8:	10000326 	beq	r2,zero,11ebb8 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  11ebac:	d0a74617 	ldw	r2,-25320(gp)
  11ebb0:	10800117 	ldw	r2,4(r2)
  11ebb4:	d0a74615 	stw	r2,-25320(gp)
  11ebb8:	e0bffb17 	ldw	r2,-20(fp)
  11ebbc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11ebc0:	e0bffc17 	ldw	r2,-16(fp)
  11ebc4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  11ebc8:	e0bffd17 	ldw	r2,-12(fp)
  11ebcc:	10000f26 	beq	r2,zero,11ec0c <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  11ebd0:	e0bffd17 	ldw	r2,-12(fp)
  11ebd4:	00c000c4 	movi	r3,3
  11ebd8:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  11ebdc:	e0bffd17 	ldw	r2,-12(fp)
  11ebe0:	e0ffff0b 	ldhu	r3,-4(fp)
  11ebe4:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  11ebe8:	e0bffd17 	ldw	r2,-12(fp)
  11ebec:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  11ebf0:	e0bffd17 	ldw	r2,-12(fp)
  11ebf4:	00c00fc4 	movi	r3,63
  11ebf8:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  11ebfc:	e0bffd17 	ldw	r2,-12(fp)
  11ec00:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  11ec04:	e13ffd17 	ldw	r4,-12(fp)
  11ec08:	011ae240 	call	11ae24 <OS_EventWaitListInit>
    }
    return (pevent);
  11ec0c:	e0bffd17 	ldw	r2,-12(fp)
}
  11ec10:	e037883a 	mov	sp,fp
  11ec14:	dfc00117 	ldw	ra,4(sp)
  11ec18:	df000017 	ldw	fp,0(sp)
  11ec1c:	dec00204 	addi	sp,sp,8
  11ec20:	f800283a 	ret

0011ec24 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  11ec24:	defff304 	addi	sp,sp,-52
  11ec28:	dfc00c15 	stw	ra,48(sp)
  11ec2c:	df000b15 	stw	fp,44(sp)
  11ec30:	df000b04 	addi	fp,sp,44
  11ec34:	e13ffd15 	stw	r4,-12(fp)
  11ec38:	2805883a 	mov	r2,r5
  11ec3c:	e1bfff15 	stw	r6,-4(fp)
  11ec40:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  11ec44:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  11ec48:	e0bfff17 	ldw	r2,-4(fp)
  11ec4c:	1000021e 	bne	r2,zero,11ec58 <OSSemDel+0x34>
        return (pevent);
  11ec50:	e0bffd17 	ldw	r2,-12(fp)
  11ec54:	00007e06 	br	11ee50 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  11ec58:	e0bffd17 	ldw	r2,-12(fp)
  11ec5c:	1000051e 	bne	r2,zero,11ec74 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  11ec60:	e0bfff17 	ldw	r2,-4(fp)
  11ec64:	00c00104 	movi	r3,4
  11ec68:	10c00005 	stb	r3,0(r2)
        return (pevent);
  11ec6c:	e0bffd17 	ldw	r2,-12(fp)
  11ec70:	00007706 	br	11ee50 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  11ec74:	e0bffd17 	ldw	r2,-12(fp)
  11ec78:	10800003 	ldbu	r2,0(r2)
  11ec7c:	10803fcc 	andi	r2,r2,255
  11ec80:	108000e0 	cmpeqi	r2,r2,3
  11ec84:	1000051e 	bne	r2,zero,11ec9c <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  11ec88:	e0bfff17 	ldw	r2,-4(fp)
  11ec8c:	00c00044 	movi	r3,1
  11ec90:	10c00005 	stb	r3,0(r2)
        return (pevent);
  11ec94:	e0bffd17 	ldw	r2,-12(fp)
  11ec98:	00006d06 	br	11ee50 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  11ec9c:	d0a74703 	ldbu	r2,-25316(gp)
  11eca0:	10803fcc 	andi	r2,r2,255
  11eca4:	10000526 	beq	r2,zero,11ecbc <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  11eca8:	e0bfff17 	ldw	r2,-4(fp)
  11ecac:	00c003c4 	movi	r3,15
  11ecb0:	10c00005 	stb	r3,0(r2)
        return (pevent);
  11ecb4:	e0bffd17 	ldw	r2,-12(fp)
  11ecb8:	00006506 	br	11ee50 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11ecbc:	0005303a 	rdctl	r2,status
  11ecc0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11ecc4:	e0fffc17 	ldw	r3,-16(fp)
  11ecc8:	00bfff84 	movi	r2,-2
  11eccc:	1884703a 	and	r2,r3,r2
  11ecd0:	1001703a 	wrctl	status,r2
  
  return context;
  11ecd4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  11ecd8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  11ecdc:	e0bffd17 	ldw	r2,-12(fp)
  11ece0:	10800283 	ldbu	r2,10(r2)
  11ece4:	10803fcc 	andi	r2,r2,255
  11ece8:	10000326 	beq	r2,zero,11ecf8 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  11ecec:	00800044 	movi	r2,1
  11ecf0:	e0bff505 	stb	r2,-44(fp)
  11ecf4:	00000106 	br	11ecfc <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  11ecf8:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
  11ecfc:	e0bffe03 	ldbu	r2,-8(fp)
  11ed00:	10000326 	beq	r2,zero,11ed10 <OSSemDel+0xec>
  11ed04:	10800060 	cmpeqi	r2,r2,1
  11ed08:	1000281e 	bne	r2,zero,11edac <OSSemDel+0x188>
  11ed0c:	00004506 	br	11ee24 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  11ed10:	e0bff503 	ldbu	r2,-44(fp)
  11ed14:	1000161e 	bne	r2,zero,11ed70 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  11ed18:	e0bffd17 	ldw	r2,-12(fp)
  11ed1c:	00c00fc4 	movi	r3,63
  11ed20:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  11ed24:	e0bffd17 	ldw	r2,-12(fp)
  11ed28:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  11ed2c:	e0bffd17 	ldw	r2,-12(fp)
  11ed30:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  11ed34:	d0e74617 	ldw	r3,-25320(gp)
  11ed38:	e0bffd17 	ldw	r2,-12(fp)
  11ed3c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  11ed40:	e0bffd17 	ldw	r2,-12(fp)
  11ed44:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  11ed48:	e0bffd17 	ldw	r2,-12(fp)
  11ed4c:	d0a74615 	stw	r2,-25320(gp)
  11ed50:	e0bff717 	ldw	r2,-36(fp)
  11ed54:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11ed58:	e0bff817 	ldw	r2,-32(fp)
  11ed5c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  11ed60:	e0bfff17 	ldw	r2,-4(fp)
  11ed64:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  11ed68:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
  11ed6c:	00003706 	br	11ee4c <OSSemDel+0x228>
  11ed70:	e0bff717 	ldw	r2,-36(fp)
  11ed74:	e0bff915 	stw	r2,-28(fp)
  11ed78:	e0bff917 	ldw	r2,-28(fp)
  11ed7c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  11ed80:	e0bfff17 	ldw	r2,-4(fp)
  11ed84:	00c01244 	movi	r3,73
  11ed88:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
  11ed8c:	e0bffd17 	ldw	r2,-12(fp)
  11ed90:	e0bff615 	stw	r2,-40(fp)
             }
             break;
  11ed94:	00002d06 	br	11ee4c <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  11ed98:	000f883a 	mov	r7,zero
  11ed9c:	01800044 	movi	r6,1
  11eda0:	000b883a 	mov	r5,zero
  11eda4:	e13ffd17 	ldw	r4,-12(fp)
  11eda8:	011a8740 	call	11a874 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  11edac:	e0bffd17 	ldw	r2,-12(fp)
  11edb0:	10800283 	ldbu	r2,10(r2)
  11edb4:	10803fcc 	andi	r2,r2,255
  11edb8:	103ff71e 	bne	r2,zero,11ed98 <__alt_data_end+0xfffded98>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  11edbc:	e0bffd17 	ldw	r2,-12(fp)
  11edc0:	00c00fc4 	movi	r3,63
  11edc4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  11edc8:	e0bffd17 	ldw	r2,-12(fp)
  11edcc:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  11edd0:	e0bffd17 	ldw	r2,-12(fp)
  11edd4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  11edd8:	d0e74617 	ldw	r3,-25320(gp)
  11eddc:	e0bffd17 	ldw	r2,-12(fp)
  11ede0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  11ede4:	e0bffd17 	ldw	r2,-12(fp)
  11ede8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  11edec:	e0bffd17 	ldw	r2,-12(fp)
  11edf0:	d0a74615 	stw	r2,-25320(gp)
  11edf4:	e0bff717 	ldw	r2,-36(fp)
  11edf8:	e0bffa15 	stw	r2,-24(fp)
  11edfc:	e0bffa17 	ldw	r2,-24(fp)
  11ee00:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  11ee04:	e0bff503 	ldbu	r2,-44(fp)
  11ee08:	10800058 	cmpnei	r2,r2,1
  11ee0c:	1000011e 	bne	r2,zero,11ee14 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  11ee10:	011b2c00 	call	11b2c0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  11ee14:	e0bfff17 	ldw	r2,-4(fp)
  11ee18:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  11ee1c:	e03ff615 	stw	zero,-40(fp)
             break;
  11ee20:	00000a06 	br	11ee4c <OSSemDel+0x228>
  11ee24:	e0bff717 	ldw	r2,-36(fp)
  11ee28:	e0bffb15 	stw	r2,-20(fp)
  11ee2c:	e0bffb17 	ldw	r2,-20(fp)
  11ee30:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  11ee34:	e0bfff17 	ldw	r2,-4(fp)
  11ee38:	00c001c4 	movi	r3,7
  11ee3c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
  11ee40:	e0bffd17 	ldw	r2,-12(fp)
  11ee44:	e0bff615 	stw	r2,-40(fp)
             break;
  11ee48:	0001883a 	nop
    }
    return (pevent_return);
  11ee4c:	e0bff617 	ldw	r2,-40(fp)
}
  11ee50:	e037883a 	mov	sp,fp
  11ee54:	dfc00117 	ldw	ra,4(sp)
  11ee58:	df000017 	ldw	fp,0(sp)
  11ee5c:	dec00204 	addi	sp,sp,8
  11ee60:	f800283a 	ret

0011ee64 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  11ee64:	defff504 	addi	sp,sp,-44
  11ee68:	dfc00a15 	stw	ra,40(sp)
  11ee6c:	df000915 	stw	fp,36(sp)
  11ee70:	df000904 	addi	fp,sp,36
  11ee74:	e13ffd15 	stw	r4,-12(fp)
  11ee78:	2805883a 	mov	r2,r5
  11ee7c:	e1bfff15 	stw	r6,-4(fp)
  11ee80:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  11ee84:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  11ee88:	e0bfff17 	ldw	r2,-4(fp)
  11ee8c:	10007226 	beq	r2,zero,11f058 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  11ee90:	e0bffd17 	ldw	r2,-12(fp)
  11ee94:	1000041e 	bne	r2,zero,11eea8 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  11ee98:	e0bfff17 	ldw	r2,-4(fp)
  11ee9c:	00c00104 	movi	r3,4
  11eea0:	10c00005 	stb	r3,0(r2)
        return;
  11eea4:	00006d06 	br	11f05c <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  11eea8:	e0bffd17 	ldw	r2,-12(fp)
  11eeac:	10800003 	ldbu	r2,0(r2)
  11eeb0:	10803fcc 	andi	r2,r2,255
  11eeb4:	108000e0 	cmpeqi	r2,r2,3
  11eeb8:	1000041e 	bne	r2,zero,11eecc <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  11eebc:	e0bfff17 	ldw	r2,-4(fp)
  11eec0:	00c00044 	movi	r3,1
  11eec4:	10c00005 	stb	r3,0(r2)
        return;
  11eec8:	00006406 	br	11f05c <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  11eecc:	d0a74703 	ldbu	r2,-25316(gp)
  11eed0:	10803fcc 	andi	r2,r2,255
  11eed4:	10000426 	beq	r2,zero,11eee8 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  11eed8:	e0bfff17 	ldw	r2,-4(fp)
  11eedc:	00c00084 	movi	r3,2
  11eee0:	10c00005 	stb	r3,0(r2)
        return;
  11eee4:	00005d06 	br	11f05c <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  11eee8:	d0a73903 	ldbu	r2,-25372(gp)
  11eeec:	10803fcc 	andi	r2,r2,255
  11eef0:	10000426 	beq	r2,zero,11ef04 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  11eef4:	e0bfff17 	ldw	r2,-4(fp)
  11eef8:	00c00344 	movi	r3,13
  11eefc:	10c00005 	stb	r3,0(r2)
        return;
  11ef00:	00005606 	br	11f05c <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11ef04:	0005303a 	rdctl	r2,status
  11ef08:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11ef0c:	e0fffc17 	ldw	r3,-16(fp)
  11ef10:	00bfff84 	movi	r2,-2
  11ef14:	1884703a 	and	r2,r3,r2
  11ef18:	1001703a 	wrctl	status,r2
  
  return context;
  11ef1c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  11ef20:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  11ef24:	e0bffd17 	ldw	r2,-12(fp)
  11ef28:	1080020b 	ldhu	r2,8(r2)
  11ef2c:	10bfffcc 	andi	r2,r2,65535
  11ef30:	10000d26 	beq	r2,zero,11ef68 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  11ef34:	e0bffd17 	ldw	r2,-12(fp)
  11ef38:	1080020b 	ldhu	r2,8(r2)
  11ef3c:	10bfffc4 	addi	r2,r2,-1
  11ef40:	1007883a 	mov	r3,r2
  11ef44:	e0bffd17 	ldw	r2,-12(fp)
  11ef48:	10c0020d 	sth	r3,8(r2)
  11ef4c:	e0bff717 	ldw	r2,-36(fp)
  11ef50:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11ef54:	e0bff817 	ldw	r2,-32(fp)
  11ef58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  11ef5c:	e0bfff17 	ldw	r2,-4(fp)
  11ef60:	10000005 	stb	zero,0(r2)
        return;
  11ef64:	00003d06 	br	11f05c <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  11ef68:	d0a74817 	ldw	r2,-25312(gp)
  11ef6c:	d0e74817 	ldw	r3,-25312(gp)
  11ef70:	18c00c03 	ldbu	r3,48(r3)
  11ef74:	18c00054 	ori	r3,r3,1
  11ef78:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  11ef7c:	d0a74817 	ldw	r2,-25312(gp)
  11ef80:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  11ef84:	d0a74817 	ldw	r2,-25312(gp)
  11ef88:	e0fffe0b 	ldhu	r3,-8(fp)
  11ef8c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  11ef90:	e13ffd17 	ldw	r4,-12(fp)
  11ef94:	011aa0c0 	call	11aa0c <OS_EventTaskWait>
  11ef98:	e0bff717 	ldw	r2,-36(fp)
  11ef9c:	e0bffb15 	stw	r2,-20(fp)
  11efa0:	e0bffb17 	ldw	r2,-20(fp)
  11efa4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  11efa8:	011b2c00 	call	11b2c0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11efac:	0005303a 	rdctl	r2,status
  11efb0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11efb4:	e0fff917 	ldw	r3,-28(fp)
  11efb8:	00bfff84 	movi	r2,-2
  11efbc:	1884703a 	and	r2,r3,r2
  11efc0:	1001703a 	wrctl	status,r2
  
  return context;
  11efc4:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
  11efc8:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  11efcc:	d0a74817 	ldw	r2,-25312(gp)
  11efd0:	10800c43 	ldbu	r2,49(r2)
  11efd4:	10803fcc 	andi	r2,r2,255
  11efd8:	10000326 	beq	r2,zero,11efe8 <OSSemPend+0x184>
  11efdc:	108000a0 	cmpeqi	r2,r2,2
  11efe0:	1000041e 	bne	r2,zero,11eff4 <OSSemPend+0x190>
  11efe4:	00000706 	br	11f004 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  11efe8:	e0bfff17 	ldw	r2,-4(fp)
  11efec:	10000005 	stb	zero,0(r2)
             break;
  11eff0:	00000c06 	br	11f024 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  11eff4:	e0bfff17 	ldw	r2,-4(fp)
  11eff8:	00c00384 	movi	r3,14
  11effc:	10c00005 	stb	r3,0(r2)
             break;
  11f000:	00000806 	br	11f024 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  11f004:	d0a74817 	ldw	r2,-25312(gp)
  11f008:	e17ffd17 	ldw	r5,-12(fp)
  11f00c:	1009883a 	mov	r4,r2
  11f010:	011ac6c0 	call	11ac6c <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  11f014:	e0bfff17 	ldw	r2,-4(fp)
  11f018:	00c00284 	movi	r3,10
  11f01c:	10c00005 	stb	r3,0(r2)
             break;
  11f020:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  11f024:	d0a74817 	ldw	r2,-25312(gp)
  11f028:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  11f02c:	d0a74817 	ldw	r2,-25312(gp)
  11f030:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  11f034:	d0a74817 	ldw	r2,-25312(gp)
  11f038:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  11f03c:	d0a74817 	ldw	r2,-25312(gp)
  11f040:	10000815 	stw	zero,32(r2)
  11f044:	e0bff717 	ldw	r2,-36(fp)
  11f048:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11f04c:	e0bffa17 	ldw	r2,-24(fp)
  11f050:	1001703a 	wrctl	status,r2
  11f054:	00000106 	br	11f05c <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
  11f058:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
  11f05c:	e037883a 	mov	sp,fp
  11f060:	dfc00117 	ldw	ra,4(sp)
  11f064:	df000017 	ldw	fp,0(sp)
  11f068:	dec00204 	addi	sp,sp,8
  11f06c:	f800283a 	ret

0011f070 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  11f070:	defff604 	addi	sp,sp,-40
  11f074:	dfc00915 	stw	ra,36(sp)
  11f078:	df000815 	stw	fp,32(sp)
  11f07c:	df000804 	addi	fp,sp,32
  11f080:	e13ffd15 	stw	r4,-12(fp)
  11f084:	2805883a 	mov	r2,r5
  11f088:	e1bfff15 	stw	r6,-4(fp)
  11f08c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  11f090:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  11f094:	e0bfff17 	ldw	r2,-4(fp)
  11f098:	1000021e 	bne	r2,zero,11f0a4 <OSSemPendAbort+0x34>
        return (0);
  11f09c:	0005883a 	mov	r2,zero
  11f0a0:	00004906 	br	11f1c8 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  11f0a4:	e0bffd17 	ldw	r2,-12(fp)
  11f0a8:	1000051e 	bne	r2,zero,11f0c0 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  11f0ac:	e0bfff17 	ldw	r2,-4(fp)
  11f0b0:	00c00104 	movi	r3,4
  11f0b4:	10c00005 	stb	r3,0(r2)
        return (0);
  11f0b8:	0005883a 	mov	r2,zero
  11f0bc:	00004206 	br	11f1c8 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  11f0c0:	e0bffd17 	ldw	r2,-12(fp)
  11f0c4:	10800003 	ldbu	r2,0(r2)
  11f0c8:	10803fcc 	andi	r2,r2,255
  11f0cc:	108000e0 	cmpeqi	r2,r2,3
  11f0d0:	1000051e 	bne	r2,zero,11f0e8 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  11f0d4:	e0bfff17 	ldw	r2,-4(fp)
  11f0d8:	00c00044 	movi	r3,1
  11f0dc:	10c00005 	stb	r3,0(r2)
        return (0);
  11f0e0:	0005883a 	mov	r2,zero
  11f0e4:	00003806 	br	11f1c8 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11f0e8:	0005303a 	rdctl	r2,status
  11f0ec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11f0f0:	e0fffc17 	ldw	r3,-16(fp)
  11f0f4:	00bfff84 	movi	r2,-2
  11f0f8:	1884703a 	and	r2,r3,r2
  11f0fc:	1001703a 	wrctl	status,r2
  
  return context;
  11f100:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  11f104:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  11f108:	e0bffd17 	ldw	r2,-12(fp)
  11f10c:	10800283 	ldbu	r2,10(r2)
  11f110:	10803fcc 	andi	r2,r2,255
  11f114:	10002526 	beq	r2,zero,11f1ac <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
  11f118:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
  11f11c:	e0bffe03 	ldbu	r2,-8(fp)
  11f120:	10800060 	cmpeqi	r2,r2,1
  11f124:	10000e26 	beq	r2,zero,11f160 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  11f128:	00000806 	br	11f14c <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  11f12c:	01c00084 	movi	r7,2
  11f130:	01800044 	movi	r6,1
  11f134:	000b883a 	mov	r5,zero
  11f138:	e13ffd17 	ldw	r4,-12(fp)
  11f13c:	011a8740 	call	11a874 <OS_EventTaskRdy>
                     nbr_tasks++;
  11f140:	e0bff803 	ldbu	r2,-32(fp)
  11f144:	10800044 	addi	r2,r2,1
  11f148:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  11f14c:	e0bffd17 	ldw	r2,-12(fp)
  11f150:	10800283 	ldbu	r2,10(r2)
  11f154:	10803fcc 	andi	r2,r2,255
  11f158:	103ff41e 	bne	r2,zero,11f12c <__alt_data_end+0xfffdf12c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  11f15c:	00000906 	br	11f184 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  11f160:	01c00084 	movi	r7,2
  11f164:	01800044 	movi	r6,1
  11f168:	000b883a 	mov	r5,zero
  11f16c:	e13ffd17 	ldw	r4,-12(fp)
  11f170:	011a8740 	call	11a874 <OS_EventTaskRdy>
                 nbr_tasks++;
  11f174:	e0bff803 	ldbu	r2,-32(fp)
  11f178:	10800044 	addi	r2,r2,1
  11f17c:	e0bff805 	stb	r2,-32(fp)
                 break;
  11f180:	0001883a 	nop
  11f184:	e0bff917 	ldw	r2,-28(fp)
  11f188:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11f18c:	e0bffa17 	ldw	r2,-24(fp)
  11f190:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  11f194:	011b2c00 	call	11b2c0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  11f198:	e0bfff17 	ldw	r2,-4(fp)
  11f19c:	00c00384 	movi	r3,14
  11f1a0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
  11f1a4:	e0bff803 	ldbu	r2,-32(fp)
  11f1a8:	00000706 	br	11f1c8 <OSSemPendAbort+0x158>
  11f1ac:	e0bff917 	ldw	r2,-28(fp)
  11f1b0:	e0bffb15 	stw	r2,-20(fp)
  11f1b4:	e0bffb17 	ldw	r2,-20(fp)
  11f1b8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  11f1bc:	e0bfff17 	ldw	r2,-4(fp)
  11f1c0:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  11f1c4:	0005883a 	mov	r2,zero
}
  11f1c8:	e037883a 	mov	sp,fp
  11f1cc:	dfc00117 	ldw	ra,4(sp)
  11f1d0:	df000017 	ldw	fp,0(sp)
  11f1d4:	dec00204 	addi	sp,sp,8
  11f1d8:	f800283a 	ret

0011f1dc <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  11f1dc:	defff804 	addi	sp,sp,-32
  11f1e0:	dfc00715 	stw	ra,28(sp)
  11f1e4:	df000615 	stw	fp,24(sp)
  11f1e8:	df000604 	addi	fp,sp,24
  11f1ec:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  11f1f0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  11f1f4:	e0bfff17 	ldw	r2,-4(fp)
  11f1f8:	1000021e 	bne	r2,zero,11f204 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
  11f1fc:	00800104 	movi	r2,4
  11f200:	00003506 	br	11f2d8 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  11f204:	e0bfff17 	ldw	r2,-4(fp)
  11f208:	10800003 	ldbu	r2,0(r2)
  11f20c:	10803fcc 	andi	r2,r2,255
  11f210:	108000e0 	cmpeqi	r2,r2,3
  11f214:	1000021e 	bne	r2,zero,11f220 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
  11f218:	00800044 	movi	r2,1
  11f21c:	00002e06 	br	11f2d8 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11f220:	0005303a 	rdctl	r2,status
  11f224:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11f228:	e0fffe17 	ldw	r3,-8(fp)
  11f22c:	00bfff84 	movi	r2,-2
  11f230:	1884703a 	and	r2,r3,r2
  11f234:	1001703a 	wrctl	status,r2
  
  return context;
  11f238:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  11f23c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  11f240:	e0bfff17 	ldw	r2,-4(fp)
  11f244:	10800283 	ldbu	r2,10(r2)
  11f248:	10803fcc 	andi	r2,r2,255
  11f24c:	10000c26 	beq	r2,zero,11f280 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  11f250:	000f883a 	mov	r7,zero
  11f254:	01800044 	movi	r6,1
  11f258:	000b883a 	mov	r5,zero
  11f25c:	e13fff17 	ldw	r4,-4(fp)
  11f260:	011a8740 	call	11a874 <OS_EventTaskRdy>
  11f264:	e0bffa17 	ldw	r2,-24(fp)
  11f268:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11f26c:	e0bffb17 	ldw	r2,-20(fp)
  11f270:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  11f274:	011b2c00 	call	11b2c0 <OS_Sched>
        return (OS_ERR_NONE);
  11f278:	0005883a 	mov	r2,zero
  11f27c:	00001606 	br	11f2d8 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  11f280:	e0bfff17 	ldw	r2,-4(fp)
  11f284:	1080020b 	ldhu	r2,8(r2)
  11f288:	10ffffcc 	andi	r3,r2,65535
  11f28c:	00bfffd4 	movui	r2,65535
  11f290:	18800c26 	beq	r3,r2,11f2c4 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  11f294:	e0bfff17 	ldw	r2,-4(fp)
  11f298:	1080020b 	ldhu	r2,8(r2)
  11f29c:	10800044 	addi	r2,r2,1
  11f2a0:	1007883a 	mov	r3,r2
  11f2a4:	e0bfff17 	ldw	r2,-4(fp)
  11f2a8:	10c0020d 	sth	r3,8(r2)
  11f2ac:	e0bffa17 	ldw	r2,-24(fp)
  11f2b0:	e0bffc15 	stw	r2,-16(fp)
  11f2b4:	e0bffc17 	ldw	r2,-16(fp)
  11f2b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  11f2bc:	0005883a 	mov	r2,zero
  11f2c0:	00000506 	br	11f2d8 <OSSemPost+0xfc>
  11f2c4:	e0bffa17 	ldw	r2,-24(fp)
  11f2c8:	e0bffd15 	stw	r2,-12(fp)
  11f2cc:	e0bffd17 	ldw	r2,-12(fp)
  11f2d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  11f2d4:	00800c84 	movi	r2,50
}
  11f2d8:	e037883a 	mov	sp,fp
  11f2dc:	dfc00117 	ldw	ra,4(sp)
  11f2e0:	df000017 	ldw	fp,0(sp)
  11f2e4:	dec00204 	addi	sp,sp,8
  11f2e8:	f800283a 	ret

0011f2ec <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  11f2ec:	defff704 	addi	sp,sp,-36
  11f2f0:	df000815 	stw	fp,32(sp)
  11f2f4:	df000804 	addi	fp,sp,32
  11f2f8:	e13ffe15 	stw	r4,-8(fp)
  11f2fc:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  11f300:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  11f304:	e0bffe17 	ldw	r2,-8(fp)
  11f308:	1000021e 	bne	r2,zero,11f314 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
  11f30c:	00800104 	movi	r2,4
  11f310:	00003606 	br	11f3ec <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  11f314:	e0bfff17 	ldw	r2,-4(fp)
  11f318:	1000021e 	bne	r2,zero,11f324 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
  11f31c:	00800244 	movi	r2,9
  11f320:	00003206 	br	11f3ec <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  11f324:	e0bffe17 	ldw	r2,-8(fp)
  11f328:	10800003 	ldbu	r2,0(r2)
  11f32c:	10803fcc 	andi	r2,r2,255
  11f330:	108000e0 	cmpeqi	r2,r2,3
  11f334:	1000021e 	bne	r2,zero,11f340 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
  11f338:	00800044 	movi	r2,1
  11f33c:	00002b06 	br	11f3ec <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11f340:	0005303a 	rdctl	r2,status
  11f344:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11f348:	e0fffd17 	ldw	r3,-12(fp)
  11f34c:	00bfff84 	movi	r2,-2
  11f350:	1884703a 	and	r2,r3,r2
  11f354:	1001703a 	wrctl	status,r2
  
  return context;
  11f358:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  11f35c:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  11f360:	e0bffe17 	ldw	r2,-8(fp)
  11f364:	10c00283 	ldbu	r3,10(r2)
  11f368:	e0bfff17 	ldw	r2,-4(fp)
  11f36c:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  11f370:	e0bffe17 	ldw	r2,-8(fp)
  11f374:	108002c4 	addi	r2,r2,11
  11f378:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  11f37c:	e0bfff17 	ldw	r2,-4(fp)
  11f380:	10800084 	addi	r2,r2,2
  11f384:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  11f388:	e03ffa05 	stb	zero,-24(fp)
  11f38c:	00000b06 	br	11f3bc <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
  11f390:	e0bff917 	ldw	r2,-28(fp)
  11f394:	10c00044 	addi	r3,r2,1
  11f398:	e0fff915 	stw	r3,-28(fp)
  11f39c:	e0fff817 	ldw	r3,-32(fp)
  11f3a0:	19000044 	addi	r4,r3,1
  11f3a4:	e13ff815 	stw	r4,-32(fp)
  11f3a8:	18c00003 	ldbu	r3,0(r3)
  11f3ac:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  11f3b0:	e0bffa03 	ldbu	r2,-24(fp)
  11f3b4:	10800044 	addi	r2,r2,1
  11f3b8:	e0bffa05 	stb	r2,-24(fp)
  11f3bc:	e0bffa03 	ldbu	r2,-24(fp)
  11f3c0:	108000f0 	cmpltui	r2,r2,3
  11f3c4:	103ff21e 	bne	r2,zero,11f390 <__alt_data_end+0xfffdf390>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  11f3c8:	e0bffe17 	ldw	r2,-8(fp)
  11f3cc:	10c0020b 	ldhu	r3,8(r2)
  11f3d0:	e0bfff17 	ldw	r2,-4(fp)
  11f3d4:	10c0000d 	sth	r3,0(r2)
  11f3d8:	e0bffb17 	ldw	r2,-20(fp)
  11f3dc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11f3e0:	e0bffc17 	ldw	r2,-16(fp)
  11f3e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  11f3e8:	0005883a 	mov	r2,zero
}
  11f3ec:	e037883a 	mov	sp,fp
  11f3f0:	df000017 	ldw	fp,0(sp)
  11f3f4:	dec00104 	addi	sp,sp,4
  11f3f8:	f800283a 	ret

0011f3fc <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  11f3fc:	defff904 	addi	sp,sp,-28
  11f400:	df000615 	stw	fp,24(sp)
  11f404:	df000604 	addi	fp,sp,24
  11f408:	e13ffd15 	stw	r4,-12(fp)
  11f40c:	2805883a 	mov	r2,r5
  11f410:	e1bfff15 	stw	r6,-4(fp)
  11f414:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  11f418:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  11f41c:	e0bfff17 	ldw	r2,-4(fp)
  11f420:	10003126 	beq	r2,zero,11f4e8 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  11f424:	e0bffd17 	ldw	r2,-12(fp)
  11f428:	1000041e 	bne	r2,zero,11f43c <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
  11f42c:	e0bfff17 	ldw	r2,-4(fp)
  11f430:	00c00104 	movi	r3,4
  11f434:	10c00005 	stb	r3,0(r2)
        return;
  11f438:	00002c06 	br	11f4ec <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  11f43c:	e0bffd17 	ldw	r2,-12(fp)
  11f440:	10800003 	ldbu	r2,0(r2)
  11f444:	10803fcc 	andi	r2,r2,255
  11f448:	108000e0 	cmpeqi	r2,r2,3
  11f44c:	1000041e 	bne	r2,zero,11f460 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
  11f450:	e0bfff17 	ldw	r2,-4(fp)
  11f454:	00c00044 	movi	r3,1
  11f458:	10c00005 	stb	r3,0(r2)
        return;
  11f45c:	00002306 	br	11f4ec <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11f460:	0005303a 	rdctl	r2,status
  11f464:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11f468:	e0fffc17 	ldw	r3,-16(fp)
  11f46c:	00bfff84 	movi	r2,-2
  11f470:	1884703a 	and	r2,r3,r2
  11f474:	1001703a 	wrctl	status,r2
  
  return context;
  11f478:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  11f47c:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
  11f480:	e0bfff17 	ldw	r2,-4(fp)
  11f484:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  11f488:	e0bffd17 	ldw	r2,-12(fp)
  11f48c:	1080020b 	ldhu	r2,8(r2)
  11f490:	10bfffcc 	andi	r2,r2,65535
  11f494:	10000426 	beq	r2,zero,11f4a8 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  11f498:	e0bffd17 	ldw	r2,-12(fp)
  11f49c:	e0fffe0b 	ldhu	r3,-8(fp)
  11f4a0:	10c0020d 	sth	r3,8(r2)
  11f4a4:	00000b06 	br	11f4d4 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  11f4a8:	e0bffd17 	ldw	r2,-12(fp)
  11f4ac:	10800283 	ldbu	r2,10(r2)
  11f4b0:	10803fcc 	andi	r2,r2,255
  11f4b4:	1000041e 	bne	r2,zero,11f4c8 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  11f4b8:	e0bffd17 	ldw	r2,-12(fp)
  11f4bc:	e0fffe0b 	ldhu	r3,-8(fp)
  11f4c0:	10c0020d 	sth	r3,8(r2)
  11f4c4:	00000306 	br	11f4d4 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  11f4c8:	e0bfff17 	ldw	r2,-4(fp)
  11f4cc:	00c01244 	movi	r3,73
  11f4d0:	10c00005 	stb	r3,0(r2)
  11f4d4:	e0bffa17 	ldw	r2,-24(fp)
  11f4d8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11f4dc:	e0bffb17 	ldw	r2,-20(fp)
  11f4e0:	1001703a 	wrctl	status,r2
  11f4e4:	00000106 	br	11f4ec <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
  11f4e8:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
  11f4ec:	e037883a 	mov	sp,fp
  11f4f0:	df000017 	ldw	fp,0(sp)
  11f4f4:	dec00104 	addi	sp,sp,4
  11f4f8:	f800283a 	ret

0011f4fc <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  11f4fc:	defff104 	addi	sp,sp,-60
  11f500:	dfc00e15 	stw	ra,56(sp)
  11f504:	df000d15 	stw	fp,52(sp)
  11f508:	df000d04 	addi	fp,sp,52
  11f50c:	2007883a 	mov	r3,r4
  11f510:	2805883a 	mov	r2,r5
  11f514:	e0fffe05 	stb	r3,-8(fp)
  11f518:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  11f51c:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  11f520:	e0bffe03 	ldbu	r2,-8(fp)
  11f524:	10800530 	cmpltui	r2,r2,20
  11f528:	1000051e 	bne	r2,zero,11f540 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
  11f52c:	e0bffe03 	ldbu	r2,-8(fp)
  11f530:	10803fe0 	cmpeqi	r2,r2,255
  11f534:	1000021e 	bne	r2,zero,11f540 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
  11f538:	00800a84 	movi	r2,42
  11f53c:	00012606 	br	11f9d8 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  11f540:	e0bfff03 	ldbu	r2,-4(fp)
  11f544:	10800530 	cmpltui	r2,r2,20
  11f548:	1000021e 	bne	r2,zero,11f554 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  11f54c:	00800a84 	movi	r2,42
  11f550:	00012106 	br	11f9d8 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11f554:	0005303a 	rdctl	r2,status
  11f558:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11f55c:	e0fffd17 	ldw	r3,-12(fp)
  11f560:	00bfff84 	movi	r2,-2
  11f564:	1884703a 	and	r2,r3,r2
  11f568:	1001703a 	wrctl	status,r2
  
  return context;
  11f56c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  11f570:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  11f574:	e0ffff03 	ldbu	r3,-4(fp)
  11f578:	008004f4 	movhi	r2,19
  11f57c:	10bb0204 	addi	r2,r2,-5112
  11f580:	18c7883a 	add	r3,r3,r3
  11f584:	18c7883a 	add	r3,r3,r3
  11f588:	10c5883a 	add	r2,r2,r3
  11f58c:	10800017 	ldw	r2,0(r2)
  11f590:	10000626 	beq	r2,zero,11f5ac <OSTaskChangePrio+0xb0>
  11f594:	e0bff517 	ldw	r2,-44(fp)
  11f598:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11f59c:	e0bff617 	ldw	r2,-40(fp)
  11f5a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  11f5a4:	00800a04 	movi	r2,40
  11f5a8:	00010b06 	br	11f9d8 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  11f5ac:	e0bffe03 	ldbu	r2,-8(fp)
  11f5b0:	10803fd8 	cmpnei	r2,r2,255
  11f5b4:	1000031e 	bne	r2,zero,11f5c4 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  11f5b8:	d0a74817 	ldw	r2,-25312(gp)
  11f5bc:	10800c83 	ldbu	r2,50(r2)
  11f5c0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  11f5c4:	e0fffe03 	ldbu	r3,-8(fp)
  11f5c8:	008004f4 	movhi	r2,19
  11f5cc:	10bb0204 	addi	r2,r2,-5112
  11f5d0:	18c7883a 	add	r3,r3,r3
  11f5d4:	18c7883a 	add	r3,r3,r3
  11f5d8:	10c5883a 	add	r2,r2,r3
  11f5dc:	10800017 	ldw	r2,0(r2)
  11f5e0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  11f5e4:	e0bff817 	ldw	r2,-32(fp)
  11f5e8:	1000061e 	bne	r2,zero,11f604 <OSTaskChangePrio+0x108>
  11f5ec:	e0bff517 	ldw	r2,-44(fp)
  11f5f0:	e0bff715 	stw	r2,-36(fp)
  11f5f4:	e0bff717 	ldw	r2,-36(fp)
  11f5f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  11f5fc:	00800a44 	movi	r2,41
  11f600:	0000f506 	br	11f9d8 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  11f604:	e0bff817 	ldw	r2,-32(fp)
  11f608:	10800058 	cmpnei	r2,r2,1
  11f60c:	1000061e 	bne	r2,zero,11f628 <OSTaskChangePrio+0x12c>
  11f610:	e0bff517 	ldw	r2,-44(fp)
  11f614:	e0bff915 	stw	r2,-28(fp)
  11f618:	e0bff917 	ldw	r2,-28(fp)
  11f61c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  11f620:	008010c4 	movi	r2,67
  11f624:	0000ec06 	br	11f9d8 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  11f628:	e0bfff03 	ldbu	r2,-4(fp)
  11f62c:	1004d0fa 	srli	r2,r2,3
  11f630:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  11f634:	e0bfff03 	ldbu	r2,-4(fp)
  11f638:	108001cc 	andi	r2,r2,7
  11f63c:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
  11f640:	e0bffb03 	ldbu	r2,-20(fp)
  11f644:	00c00044 	movi	r3,1
  11f648:	1884983a 	sll	r2,r3,r2
  11f64c:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
  11f650:	e0bffb43 	ldbu	r2,-19(fp)
  11f654:	00c00044 	movi	r3,1
  11f658:	1884983a 	sll	r2,r3,r2
  11f65c:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  11f660:	e0fffe03 	ldbu	r3,-8(fp)
  11f664:	008004f4 	movhi	r2,19
  11f668:	10bb0204 	addi	r2,r2,-5112
  11f66c:	18c7883a 	add	r3,r3,r3
  11f670:	18c7883a 	add	r3,r3,r3
  11f674:	10c5883a 	add	r2,r2,r3
  11f678:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  11f67c:	e0ffff03 	ldbu	r3,-4(fp)
  11f680:	008004f4 	movhi	r2,19
  11f684:	10bb0204 	addi	r2,r2,-5112
  11f688:	18c7883a 	add	r3,r3,r3
  11f68c:	18c7883a 	add	r3,r3,r3
  11f690:	10c5883a 	add	r2,r2,r3
  11f694:	e0fff817 	ldw	r3,-32(fp)
  11f698:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
  11f69c:	e0bff817 	ldw	r2,-32(fp)
  11f6a0:	10800d03 	ldbu	r2,52(r2)
  11f6a4:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
  11f6a8:	e0bff817 	ldw	r2,-32(fp)
  11f6ac:	10800d83 	ldbu	r2,54(r2)
  11f6b0:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  11f6b4:	e0bff817 	ldw	r2,-32(fp)
  11f6b8:	10800d43 	ldbu	r2,53(r2)
  11f6bc:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  11f6c0:	e0fffc03 	ldbu	r3,-16(fp)
  11f6c4:	d0a74544 	addi	r2,gp,-25323
  11f6c8:	1885883a 	add	r2,r3,r2
  11f6cc:	10c00003 	ldbu	r3,0(r2)
  11f6d0:	e0bffc83 	ldbu	r2,-14(fp)
  11f6d4:	1884703a 	and	r2,r3,r2
  11f6d8:	10803fcc 	andi	r2,r2,255
  11f6dc:	10002826 	beq	r2,zero,11f780 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
  11f6e0:	e0fffc03 	ldbu	r3,-16(fp)
  11f6e4:	e13ffc03 	ldbu	r4,-16(fp)
  11f6e8:	d0a74544 	addi	r2,gp,-25323
  11f6ec:	2085883a 	add	r2,r4,r2
  11f6f0:	10800003 	ldbu	r2,0(r2)
  11f6f4:	1009883a 	mov	r4,r2
  11f6f8:	e0bffc83 	ldbu	r2,-14(fp)
  11f6fc:	0084303a 	nor	r2,zero,r2
  11f700:	2084703a 	and	r2,r4,r2
  11f704:	1009883a 	mov	r4,r2
  11f708:	d0a74544 	addi	r2,gp,-25323
  11f70c:	1885883a 	add	r2,r3,r2
  11f710:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  11f714:	e0fffc03 	ldbu	r3,-16(fp)
  11f718:	d0a74544 	addi	r2,gp,-25323
  11f71c:	1885883a 	add	r2,r3,r2
  11f720:	10800003 	ldbu	r2,0(r2)
  11f724:	10803fcc 	andi	r2,r2,255
  11f728:	1000061e 	bne	r2,zero,11f744 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
  11f72c:	e0bffc43 	ldbu	r2,-15(fp)
  11f730:	0084303a 	nor	r2,zero,r2
  11f734:	1007883a 	mov	r3,r2
  11f738:	d0a74503 	ldbu	r2,-25324(gp)
  11f73c:	1884703a 	and	r2,r3,r2
  11f740:	d0a74505 	stb	r2,-25324(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  11f744:	d0e74503 	ldbu	r3,-25324(gp)
  11f748:	e0bffb83 	ldbu	r2,-18(fp)
  11f74c:	1884b03a 	or	r2,r3,r2
  11f750:	d0a74505 	stb	r2,-25324(gp)
         OSRdyTbl[y_new] |= bitx_new;
  11f754:	e0fffb03 	ldbu	r3,-20(fp)
  11f758:	e13ffb03 	ldbu	r4,-20(fp)
  11f75c:	d0a74544 	addi	r2,gp,-25323
  11f760:	2085883a 	add	r2,r4,r2
  11f764:	11000003 	ldbu	r4,0(r2)
  11f768:	e0bffbc3 	ldbu	r2,-17(fp)
  11f76c:	2084b03a 	or	r2,r4,r2
  11f770:	1009883a 	mov	r4,r2
  11f774:	d0a74544 	addi	r2,gp,-25323
  11f778:	1885883a 	add	r2,r3,r2
  11f77c:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  11f780:	e0bff817 	ldw	r2,-32(fp)
  11f784:	10800717 	ldw	r2,28(r2)
  11f788:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
  11f78c:	e0bff317 	ldw	r2,-52(fp)
  11f790:	10003326 	beq	r2,zero,11f860 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  11f794:	e0bffc03 	ldbu	r2,-16(fp)
  11f798:	e0fffc03 	ldbu	r3,-16(fp)
  11f79c:	e13ff317 	ldw	r4,-52(fp)
  11f7a0:	20c7883a 	add	r3,r4,r3
  11f7a4:	18c002c4 	addi	r3,r3,11
  11f7a8:	18c00003 	ldbu	r3,0(r3)
  11f7ac:	1809883a 	mov	r4,r3
  11f7b0:	e0fffc83 	ldbu	r3,-14(fp)
  11f7b4:	00c6303a 	nor	r3,zero,r3
  11f7b8:	20c6703a 	and	r3,r4,r3
  11f7bc:	1809883a 	mov	r4,r3
  11f7c0:	e0fff317 	ldw	r3,-52(fp)
  11f7c4:	1885883a 	add	r2,r3,r2
  11f7c8:	108002c4 	addi	r2,r2,11
  11f7cc:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  11f7d0:	e0bffc03 	ldbu	r2,-16(fp)
  11f7d4:	e0fff317 	ldw	r3,-52(fp)
  11f7d8:	1885883a 	add	r2,r3,r2
  11f7dc:	108002c4 	addi	r2,r2,11
  11f7e0:	10800003 	ldbu	r2,0(r2)
  11f7e4:	10803fcc 	andi	r2,r2,255
  11f7e8:	1000091e 	bne	r2,zero,11f810 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
  11f7ec:	e0bff317 	ldw	r2,-52(fp)
  11f7f0:	10800283 	ldbu	r2,10(r2)
  11f7f4:	1007883a 	mov	r3,r2
  11f7f8:	e0bffc43 	ldbu	r2,-15(fp)
  11f7fc:	0084303a 	nor	r2,zero,r2
  11f800:	1884703a 	and	r2,r3,r2
  11f804:	1007883a 	mov	r3,r2
  11f808:	e0bff317 	ldw	r2,-52(fp)
  11f80c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  11f810:	e0bff317 	ldw	r2,-52(fp)
  11f814:	10c00283 	ldbu	r3,10(r2)
  11f818:	e0bffb83 	ldbu	r2,-18(fp)
  11f81c:	1884b03a 	or	r2,r3,r2
  11f820:	1007883a 	mov	r3,r2
  11f824:	e0bff317 	ldw	r2,-52(fp)
  11f828:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  11f82c:	e0bffb03 	ldbu	r2,-20(fp)
  11f830:	e0fffb03 	ldbu	r3,-20(fp)
  11f834:	e13ff317 	ldw	r4,-52(fp)
  11f838:	20c7883a 	add	r3,r4,r3
  11f83c:	18c002c4 	addi	r3,r3,11
  11f840:	19000003 	ldbu	r4,0(r3)
  11f844:	e0fffbc3 	ldbu	r3,-17(fp)
  11f848:	20c6b03a 	or	r3,r4,r3
  11f84c:	1809883a 	mov	r4,r3
  11f850:	e0fff317 	ldw	r3,-52(fp)
  11f854:	1885883a 	add	r2,r3,r2
  11f858:	108002c4 	addi	r2,r2,11
  11f85c:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  11f860:	e0bff817 	ldw	r2,-32(fp)
  11f864:	10800817 	ldw	r2,32(r2)
  11f868:	10004226 	beq	r2,zero,11f974 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
  11f86c:	e0bff817 	ldw	r2,-32(fp)
  11f870:	10800817 	ldw	r2,32(r2)
  11f874:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
  11f878:	e0bff417 	ldw	r2,-48(fp)
  11f87c:	10800017 	ldw	r2,0(r2)
  11f880:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
  11f884:	00003906 	br	11f96c <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  11f888:	e0bffc03 	ldbu	r2,-16(fp)
  11f88c:	e0fffc03 	ldbu	r3,-16(fp)
  11f890:	e13ff317 	ldw	r4,-52(fp)
  11f894:	20c7883a 	add	r3,r4,r3
  11f898:	18c002c4 	addi	r3,r3,11
  11f89c:	18c00003 	ldbu	r3,0(r3)
  11f8a0:	1809883a 	mov	r4,r3
  11f8a4:	e0fffc83 	ldbu	r3,-14(fp)
  11f8a8:	00c6303a 	nor	r3,zero,r3
  11f8ac:	20c6703a 	and	r3,r4,r3
  11f8b0:	1809883a 	mov	r4,r3
  11f8b4:	e0fff317 	ldw	r3,-52(fp)
  11f8b8:	1885883a 	add	r2,r3,r2
  11f8bc:	108002c4 	addi	r2,r2,11
  11f8c0:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  11f8c4:	e0bffc03 	ldbu	r2,-16(fp)
  11f8c8:	e0fff317 	ldw	r3,-52(fp)
  11f8cc:	1885883a 	add	r2,r3,r2
  11f8d0:	108002c4 	addi	r2,r2,11
  11f8d4:	10800003 	ldbu	r2,0(r2)
  11f8d8:	10803fcc 	andi	r2,r2,255
  11f8dc:	1000091e 	bne	r2,zero,11f904 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
  11f8e0:	e0bff317 	ldw	r2,-52(fp)
  11f8e4:	10800283 	ldbu	r2,10(r2)
  11f8e8:	1007883a 	mov	r3,r2
  11f8ec:	e0bffc43 	ldbu	r2,-15(fp)
  11f8f0:	0084303a 	nor	r2,zero,r2
  11f8f4:	1884703a 	and	r2,r3,r2
  11f8f8:	1007883a 	mov	r3,r2
  11f8fc:	e0bff317 	ldw	r2,-52(fp)
  11f900:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  11f904:	e0bff317 	ldw	r2,-52(fp)
  11f908:	10c00283 	ldbu	r3,10(r2)
  11f90c:	e0bffb83 	ldbu	r2,-18(fp)
  11f910:	1884b03a 	or	r2,r3,r2
  11f914:	1007883a 	mov	r3,r2
  11f918:	e0bff317 	ldw	r2,-52(fp)
  11f91c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  11f920:	e0bffb03 	ldbu	r2,-20(fp)
  11f924:	e0fffb03 	ldbu	r3,-20(fp)
  11f928:	e13ff317 	ldw	r4,-52(fp)
  11f92c:	20c7883a 	add	r3,r4,r3
  11f930:	18c002c4 	addi	r3,r3,11
  11f934:	19000003 	ldbu	r4,0(r3)
  11f938:	e0fffbc3 	ldbu	r3,-17(fp)
  11f93c:	20c6b03a 	or	r3,r4,r3
  11f940:	1809883a 	mov	r4,r3
  11f944:	e0fff317 	ldw	r3,-52(fp)
  11f948:	1885883a 	add	r2,r3,r2
  11f94c:	108002c4 	addi	r2,r2,11
  11f950:	11000005 	stb	r4,0(r2)
            pevents++;
  11f954:	e0bff417 	ldw	r2,-48(fp)
  11f958:	10800104 	addi	r2,r2,4
  11f95c:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
  11f960:	e0bff417 	ldw	r2,-48(fp)
  11f964:	10800017 	ldw	r2,0(r2)
  11f968:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  11f96c:	e0bff317 	ldw	r2,-52(fp)
  11f970:	103fc51e 	bne	r2,zero,11f888 <__alt_data_end+0xfffdf888>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  11f974:	e0bff817 	ldw	r2,-32(fp)
  11f978:	e0ffff03 	ldbu	r3,-4(fp)
  11f97c:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
  11f980:	e0bff817 	ldw	r2,-32(fp)
  11f984:	e0fffb03 	ldbu	r3,-20(fp)
  11f988:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
  11f98c:	e0bff817 	ldw	r2,-32(fp)
  11f990:	e0fffb43 	ldbu	r3,-19(fp)
  11f994:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
  11f998:	e0bff817 	ldw	r2,-32(fp)
  11f99c:	e0fffb83 	ldbu	r3,-18(fp)
  11f9a0:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
  11f9a4:	e0bff817 	ldw	r2,-32(fp)
  11f9a8:	e0fffbc3 	ldbu	r3,-17(fp)
  11f9ac:	10c00d45 	stb	r3,53(r2)
  11f9b0:	e0bff517 	ldw	r2,-44(fp)
  11f9b4:	e0bffa15 	stw	r2,-24(fp)
  11f9b8:	e0bffa17 	ldw	r2,-24(fp)
  11f9bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  11f9c0:	d0a73943 	ldbu	r2,-25371(gp)
  11f9c4:	10803fcc 	andi	r2,r2,255
  11f9c8:	10800058 	cmpnei	r2,r2,1
  11f9cc:	1000011e 	bne	r2,zero,11f9d4 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
  11f9d0:	011b2c00 	call	11b2c0 <OS_Sched>
    }
    return (OS_ERR_NONE);
  11f9d4:	0005883a 	mov	r2,zero
}
  11f9d8:	e037883a 	mov	sp,fp
  11f9dc:	dfc00117 	ldw	ra,4(sp)
  11f9e0:	df000017 	ldw	fp,0(sp)
  11f9e4:	dec00204 	addi	sp,sp,8
  11f9e8:	f800283a 	ret

0011f9ec <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  11f9ec:	deffee04 	addi	sp,sp,-72
  11f9f0:	dfc01115 	stw	ra,68(sp)
  11f9f4:	df001015 	stw	fp,64(sp)
  11f9f8:	df001004 	addi	fp,sp,64
  11f9fc:	e13ffc15 	stw	r4,-16(fp)
  11fa00:	e17ffd15 	stw	r5,-12(fp)
  11fa04:	e1bffe15 	stw	r6,-8(fp)
  11fa08:	3805883a 	mov	r2,r7
  11fa0c:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  11fa10:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  11fa14:	e0bfff03 	ldbu	r2,-4(fp)
  11fa18:	10800570 	cmpltui	r2,r2,21
  11fa1c:	1000021e 	bne	r2,zero,11fa28 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  11fa20:	00800a84 	movi	r2,42
  11fa24:	00005706 	br	11fb84 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11fa28:	0005303a 	rdctl	r2,status
  11fa2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11fa30:	e0fffb17 	ldw	r3,-20(fp)
  11fa34:	00bfff84 	movi	r2,-2
  11fa38:	1884703a 	and	r2,r3,r2
  11fa3c:	1001703a 	wrctl	status,r2
  
  return context;
  11fa40:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  11fa44:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  11fa48:	d0a74703 	ldbu	r2,-25316(gp)
  11fa4c:	10803fcc 	andi	r2,r2,255
  11fa50:	10000626 	beq	r2,zero,11fa6c <OSTaskCreate+0x80>
  11fa54:	e0bff317 	ldw	r2,-52(fp)
  11fa58:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11fa5c:	e0bff417 	ldw	r2,-48(fp)
  11fa60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  11fa64:	00800f04 	movi	r2,60
  11fa68:	00004606 	br	11fb84 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  11fa6c:	e0ffff03 	ldbu	r3,-4(fp)
  11fa70:	008004f4 	movhi	r2,19
  11fa74:	10bb0204 	addi	r2,r2,-5112
  11fa78:	18c7883a 	add	r3,r3,r3
  11fa7c:	18c7883a 	add	r3,r3,r3
  11fa80:	10c5883a 	add	r2,r2,r3
  11fa84:	10800017 	ldw	r2,0(r2)
  11fa88:	1000391e 	bne	r2,zero,11fb70 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  11fa8c:	e0ffff03 	ldbu	r3,-4(fp)
  11fa90:	008004f4 	movhi	r2,19
  11fa94:	10bb0204 	addi	r2,r2,-5112
  11fa98:	18c7883a 	add	r3,r3,r3
  11fa9c:	18c7883a 	add	r3,r3,r3
  11faa0:	10c5883a 	add	r2,r2,r3
  11faa4:	00c00044 	movi	r3,1
  11faa8:	10c00015 	stw	r3,0(r2)
  11faac:	e0bff317 	ldw	r2,-52(fp)
  11fab0:	e0bff515 	stw	r2,-44(fp)
  11fab4:	e0bff517 	ldw	r2,-44(fp)
  11fab8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  11fabc:	000f883a 	mov	r7,zero
  11fac0:	e1bffe17 	ldw	r6,-8(fp)
  11fac4:	e17ffd17 	ldw	r5,-12(fp)
  11fac8:	e13ffc17 	ldw	r4,-16(fp)
  11facc:	0122c880 	call	122c88 <OSTaskStkInit>
  11fad0:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  11fad4:	e0bfff03 	ldbu	r2,-4(fp)
  11fad8:	d8000215 	stw	zero,8(sp)
  11fadc:	d8000115 	stw	zero,4(sp)
  11fae0:	d8000015 	stw	zero,0(sp)
  11fae4:	000f883a 	mov	r7,zero
  11fae8:	000d883a 	mov	r6,zero
  11faec:	e17ff717 	ldw	r5,-36(fp)
  11faf0:	1009883a 	mov	r4,r2
  11faf4:	011b6c00 	call	11b6c0 <OS_TCBInit>
  11faf8:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
  11fafc:	e0bff803 	ldbu	r2,-32(fp)
  11fb00:	1000061e 	bne	r2,zero,11fb1c <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  11fb04:	d0a73943 	ldbu	r2,-25371(gp)
  11fb08:	10803fcc 	andi	r2,r2,255
  11fb0c:	10800058 	cmpnei	r2,r2,1
  11fb10:	1000151e 	bne	r2,zero,11fb68 <OSTaskCreate+0x17c>
                OS_Sched();
  11fb14:	011b2c00 	call	11b2c0 <OS_Sched>
  11fb18:	00001306 	br	11fb68 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11fb1c:	0005303a 	rdctl	r2,status
  11fb20:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11fb24:	e0fffa17 	ldw	r3,-24(fp)
  11fb28:	00bfff84 	movi	r2,-2
  11fb2c:	1884703a 	and	r2,r3,r2
  11fb30:	1001703a 	wrctl	status,r2
  
  return context;
  11fb34:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  11fb38:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  11fb3c:	e0ffff03 	ldbu	r3,-4(fp)
  11fb40:	008004f4 	movhi	r2,19
  11fb44:	10bb0204 	addi	r2,r2,-5112
  11fb48:	18c7883a 	add	r3,r3,r3
  11fb4c:	18c7883a 	add	r3,r3,r3
  11fb50:	10c5883a 	add	r2,r2,r3
  11fb54:	10000015 	stw	zero,0(r2)
  11fb58:	e0bff317 	ldw	r2,-52(fp)
  11fb5c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11fb60:	e0bff617 	ldw	r2,-40(fp)
  11fb64:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  11fb68:	e0bff803 	ldbu	r2,-32(fp)
  11fb6c:	00000506 	br	11fb84 <OSTaskCreate+0x198>
  11fb70:	e0bff317 	ldw	r2,-52(fp)
  11fb74:	e0bff915 	stw	r2,-28(fp)
  11fb78:	e0bff917 	ldw	r2,-28(fp)
  11fb7c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  11fb80:	00800a04 	movi	r2,40
}
  11fb84:	e037883a 	mov	sp,fp
  11fb88:	dfc00117 	ldw	ra,4(sp)
  11fb8c:	df000017 	ldw	fp,0(sp)
  11fb90:	dec00204 	addi	sp,sp,8
  11fb94:	f800283a 	ret

0011fb98 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  11fb98:	deffec04 	addi	sp,sp,-80
  11fb9c:	dfc01315 	stw	ra,76(sp)
  11fba0:	df001215 	stw	fp,72(sp)
  11fba4:	df001204 	addi	fp,sp,72
  11fba8:	e13ffa15 	stw	r4,-24(fp)
  11fbac:	e17ffb15 	stw	r5,-20(fp)
  11fbb0:	e1bffc15 	stw	r6,-16(fp)
  11fbb4:	3809883a 	mov	r4,r7
  11fbb8:	e0c00217 	ldw	r3,8(fp)
  11fbbc:	e0800617 	ldw	r2,24(fp)
  11fbc0:	e13ffd05 	stb	r4,-12(fp)
  11fbc4:	e0fffe0d 	sth	r3,-8(fp)
  11fbc8:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  11fbcc:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  11fbd0:	e0bffd03 	ldbu	r2,-12(fp)
  11fbd4:	10800570 	cmpltui	r2,r2,21
  11fbd8:	1000021e 	bne	r2,zero,11fbe4 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  11fbdc:	00800a84 	movi	r2,42
  11fbe0:	00006106 	br	11fd68 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11fbe4:	0005303a 	rdctl	r2,status
  11fbe8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11fbec:	e0fff917 	ldw	r3,-28(fp)
  11fbf0:	00bfff84 	movi	r2,-2
  11fbf4:	1884703a 	and	r2,r3,r2
  11fbf8:	1001703a 	wrctl	status,r2
  
  return context;
  11fbfc:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  11fc00:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  11fc04:	d0a74703 	ldbu	r2,-25316(gp)
  11fc08:	10803fcc 	andi	r2,r2,255
  11fc0c:	10000626 	beq	r2,zero,11fc28 <OSTaskCreateExt+0x90>
  11fc10:	e0bff117 	ldw	r2,-60(fp)
  11fc14:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11fc18:	e0bff217 	ldw	r2,-56(fp)
  11fc1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  11fc20:	00800f04 	movi	r2,60
  11fc24:	00005006 	br	11fd68 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  11fc28:	e0fffd03 	ldbu	r3,-12(fp)
  11fc2c:	008004f4 	movhi	r2,19
  11fc30:	10bb0204 	addi	r2,r2,-5112
  11fc34:	18c7883a 	add	r3,r3,r3
  11fc38:	18c7883a 	add	r3,r3,r3
  11fc3c:	10c5883a 	add	r2,r2,r3
  11fc40:	10800017 	ldw	r2,0(r2)
  11fc44:	1000431e 	bne	r2,zero,11fd54 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  11fc48:	e0fffd03 	ldbu	r3,-12(fp)
  11fc4c:	008004f4 	movhi	r2,19
  11fc50:	10bb0204 	addi	r2,r2,-5112
  11fc54:	18c7883a 	add	r3,r3,r3
  11fc58:	18c7883a 	add	r3,r3,r3
  11fc5c:	10c5883a 	add	r2,r2,r3
  11fc60:	00c00044 	movi	r3,1
  11fc64:	10c00015 	stw	r3,0(r2)
  11fc68:	e0bff117 	ldw	r2,-60(fp)
  11fc6c:	e0bff315 	stw	r2,-52(fp)
  11fc70:	e0bff317 	ldw	r2,-52(fp)
  11fc74:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  11fc78:	e0bfff0b 	ldhu	r2,-4(fp)
  11fc7c:	100d883a 	mov	r6,r2
  11fc80:	e1400417 	ldw	r5,16(fp)
  11fc84:	e1000317 	ldw	r4,12(fp)
  11fc88:	0120bf80 	call	120bf8 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  11fc8c:	e0bfff0b 	ldhu	r2,-4(fp)
  11fc90:	100f883a 	mov	r7,r2
  11fc94:	e1bffc17 	ldw	r6,-16(fp)
  11fc98:	e17ffb17 	ldw	r5,-20(fp)
  11fc9c:	e13ffa17 	ldw	r4,-24(fp)
  11fca0:	0122c880 	call	122c88 <OSTaskStkInit>
  11fca4:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  11fca8:	e0fffd03 	ldbu	r3,-12(fp)
  11fcac:	e13ffe0b 	ldhu	r4,-8(fp)
  11fcb0:	e0bfff0b 	ldhu	r2,-4(fp)
  11fcb4:	d8800215 	stw	r2,8(sp)
  11fcb8:	e0800517 	ldw	r2,20(fp)
  11fcbc:	d8800115 	stw	r2,4(sp)
  11fcc0:	e0800417 	ldw	r2,16(fp)
  11fcc4:	d8800015 	stw	r2,0(sp)
  11fcc8:	200f883a 	mov	r7,r4
  11fccc:	e1800317 	ldw	r6,12(fp)
  11fcd0:	e17ff517 	ldw	r5,-44(fp)
  11fcd4:	1809883a 	mov	r4,r3
  11fcd8:	011b6c00 	call	11b6c0 <OS_TCBInit>
  11fcdc:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
  11fce0:	e0bff603 	ldbu	r2,-40(fp)
  11fce4:	1000061e 	bne	r2,zero,11fd00 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  11fce8:	d0a73943 	ldbu	r2,-25371(gp)
  11fcec:	10803fcc 	andi	r2,r2,255
  11fcf0:	10800058 	cmpnei	r2,r2,1
  11fcf4:	1000151e 	bne	r2,zero,11fd4c <OSTaskCreateExt+0x1b4>
                OS_Sched();
  11fcf8:	011b2c00 	call	11b2c0 <OS_Sched>
  11fcfc:	00001306 	br	11fd4c <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11fd00:	0005303a 	rdctl	r2,status
  11fd04:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11fd08:	e0fff817 	ldw	r3,-32(fp)
  11fd0c:	00bfff84 	movi	r2,-2
  11fd10:	1884703a 	and	r2,r3,r2
  11fd14:	1001703a 	wrctl	status,r2
  
  return context;
  11fd18:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  11fd1c:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  11fd20:	e0fffd03 	ldbu	r3,-12(fp)
  11fd24:	008004f4 	movhi	r2,19
  11fd28:	10bb0204 	addi	r2,r2,-5112
  11fd2c:	18c7883a 	add	r3,r3,r3
  11fd30:	18c7883a 	add	r3,r3,r3
  11fd34:	10c5883a 	add	r2,r2,r3
  11fd38:	10000015 	stw	zero,0(r2)
  11fd3c:	e0bff117 	ldw	r2,-60(fp)
  11fd40:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11fd44:	e0bff417 	ldw	r2,-48(fp)
  11fd48:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  11fd4c:	e0bff603 	ldbu	r2,-40(fp)
  11fd50:	00000506 	br	11fd68 <OSTaskCreateExt+0x1d0>
  11fd54:	e0bff117 	ldw	r2,-60(fp)
  11fd58:	e0bff715 	stw	r2,-36(fp)
  11fd5c:	e0bff717 	ldw	r2,-36(fp)
  11fd60:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  11fd64:	00800a04 	movi	r2,40
}
  11fd68:	e037883a 	mov	sp,fp
  11fd6c:	dfc00117 	ldw	ra,4(sp)
  11fd70:	df000017 	ldw	fp,0(sp)
  11fd74:	dec00204 	addi	sp,sp,8
  11fd78:	f800283a 	ret

0011fd7c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  11fd7c:	defff404 	addi	sp,sp,-48
  11fd80:	dfc00b15 	stw	ra,44(sp)
  11fd84:	df000a15 	stw	fp,40(sp)
  11fd88:	df000a04 	addi	fp,sp,40
  11fd8c:	2005883a 	mov	r2,r4
  11fd90:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  11fd94:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  11fd98:	d0a74703 	ldbu	r2,-25316(gp)
  11fd9c:	10803fcc 	andi	r2,r2,255
  11fda0:	10000226 	beq	r2,zero,11fdac <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
  11fda4:	00801004 	movi	r2,64
  11fda8:	0000c006 	br	1200ac <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  11fdac:	e0bfff03 	ldbu	r2,-4(fp)
  11fdb0:	10800518 	cmpnei	r2,r2,20
  11fdb4:	1000021e 	bne	r2,zero,11fdc0 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
  11fdb8:	00800f84 	movi	r2,62
  11fdbc:	0000bb06 	br	1200ac <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  11fdc0:	e0bfff03 	ldbu	r2,-4(fp)
  11fdc4:	10800530 	cmpltui	r2,r2,20
  11fdc8:	1000051e 	bne	r2,zero,11fde0 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
  11fdcc:	e0bfff03 	ldbu	r2,-4(fp)
  11fdd0:	10803fe0 	cmpeqi	r2,r2,255
  11fdd4:	1000021e 	bne	r2,zero,11fde0 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
  11fdd8:	00800a84 	movi	r2,42
  11fddc:	0000b306 	br	1200ac <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11fde0:	0005303a 	rdctl	r2,status
  11fde4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11fde8:	e0fffe17 	ldw	r3,-8(fp)
  11fdec:	00bfff84 	movi	r2,-2
  11fdf0:	1884703a 	and	r2,r3,r2
  11fdf4:	1001703a 	wrctl	status,r2
  
  return context;
  11fdf8:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  11fdfc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  11fe00:	e0bfff03 	ldbu	r2,-4(fp)
  11fe04:	10803fd8 	cmpnei	r2,r2,255
  11fe08:	1000031e 	bne	r2,zero,11fe18 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  11fe0c:	d0a74817 	ldw	r2,-25312(gp)
  11fe10:	10800c83 	ldbu	r2,50(r2)
  11fe14:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  11fe18:	e0ffff03 	ldbu	r3,-4(fp)
  11fe1c:	008004f4 	movhi	r2,19
  11fe20:	10bb0204 	addi	r2,r2,-5112
  11fe24:	18c7883a 	add	r3,r3,r3
  11fe28:	18c7883a 	add	r3,r3,r3
  11fe2c:	10c5883a 	add	r2,r2,r3
  11fe30:	10800017 	ldw	r2,0(r2)
  11fe34:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  11fe38:	e0bff817 	ldw	r2,-32(fp)
  11fe3c:	1000061e 	bne	r2,zero,11fe58 <OSTaskDel+0xdc>
  11fe40:	e0bff617 	ldw	r2,-40(fp)
  11fe44:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11fe48:	e0bff717 	ldw	r2,-36(fp)
  11fe4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  11fe50:	008010c4 	movi	r2,67
  11fe54:	00009506 	br	1200ac <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  11fe58:	e0bff817 	ldw	r2,-32(fp)
  11fe5c:	10800058 	cmpnei	r2,r2,1
  11fe60:	1000061e 	bne	r2,zero,11fe7c <OSTaskDel+0x100>
  11fe64:	e0bff617 	ldw	r2,-40(fp)
  11fe68:	e0bff915 	stw	r2,-28(fp)
  11fe6c:	e0bff917 	ldw	r2,-28(fp)
  11fe70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  11fe74:	00800f44 	movi	r2,61
  11fe78:	00008c06 	br	1200ac <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  11fe7c:	e0bff817 	ldw	r2,-32(fp)
  11fe80:	10800d03 	ldbu	r2,52(r2)
  11fe84:	10c03fcc 	andi	r3,r2,255
  11fe88:	e0bff817 	ldw	r2,-32(fp)
  11fe8c:	10800d03 	ldbu	r2,52(r2)
  11fe90:	11003fcc 	andi	r4,r2,255
  11fe94:	d0a74544 	addi	r2,gp,-25323
  11fe98:	2085883a 	add	r2,r4,r2
  11fe9c:	10800003 	ldbu	r2,0(r2)
  11fea0:	1009883a 	mov	r4,r2
  11fea4:	e0bff817 	ldw	r2,-32(fp)
  11fea8:	10800d43 	ldbu	r2,53(r2)
  11feac:	0084303a 	nor	r2,zero,r2
  11feb0:	2084703a 	and	r2,r4,r2
  11feb4:	1009883a 	mov	r4,r2
  11feb8:	d0a74544 	addi	r2,gp,-25323
  11febc:	1885883a 	add	r2,r3,r2
  11fec0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  11fec4:	e0bff817 	ldw	r2,-32(fp)
  11fec8:	10800d03 	ldbu	r2,52(r2)
  11fecc:	10c03fcc 	andi	r3,r2,255
  11fed0:	d0a74544 	addi	r2,gp,-25323
  11fed4:	1885883a 	add	r2,r3,r2
  11fed8:	10800003 	ldbu	r2,0(r2)
  11fedc:	10803fcc 	andi	r2,r2,255
  11fee0:	1000071e 	bne	r2,zero,11ff00 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  11fee4:	e0bff817 	ldw	r2,-32(fp)
  11fee8:	10800d83 	ldbu	r2,54(r2)
  11feec:	0084303a 	nor	r2,zero,r2
  11fef0:	1007883a 	mov	r3,r2
  11fef4:	d0a74503 	ldbu	r2,-25324(gp)
  11fef8:	1884703a 	and	r2,r3,r2
  11fefc:	d0a74505 	stb	r2,-25324(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  11ff00:	e0bff817 	ldw	r2,-32(fp)
  11ff04:	10800717 	ldw	r2,28(r2)
  11ff08:	10000526 	beq	r2,zero,11ff20 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  11ff0c:	e0bff817 	ldw	r2,-32(fp)
  11ff10:	10800717 	ldw	r2,28(r2)
  11ff14:	100b883a 	mov	r5,r2
  11ff18:	e13ff817 	ldw	r4,-32(fp)
  11ff1c:	011ac6c0 	call	11ac6c <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  11ff20:	e0bff817 	ldw	r2,-32(fp)
  11ff24:	10800817 	ldw	r2,32(r2)
  11ff28:	10000526 	beq	r2,zero,11ff40 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  11ff2c:	e0bff817 	ldw	r2,-32(fp)
  11ff30:	10800817 	ldw	r2,32(r2)
  11ff34:	100b883a 	mov	r5,r2
  11ff38:	e13ff817 	ldw	r4,-32(fp)
  11ff3c:	011ad240 	call	11ad24 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  11ff40:	e0bff817 	ldw	r2,-32(fp)
  11ff44:	10800a17 	ldw	r2,40(r2)
  11ff48:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  11ff4c:	e0bffb17 	ldw	r2,-20(fp)
  11ff50:	10000226 	beq	r2,zero,11ff5c <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  11ff54:	e13ffb17 	ldw	r4,-20(fp)
  11ff58:	011d1940 	call	11d194 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  11ff5c:	e0bff817 	ldw	r2,-32(fp)
  11ff60:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  11ff64:	e0bff817 	ldw	r2,-32(fp)
  11ff68:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  11ff6c:	e0bff817 	ldw	r2,-32(fp)
  11ff70:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  11ff74:	d0a73903 	ldbu	r2,-25372(gp)
  11ff78:	10803fcc 	andi	r2,r2,255
  11ff7c:	10803fe0 	cmpeqi	r2,r2,255
  11ff80:	1000031e 	bne	r2,zero,11ff90 <OSTaskDel+0x214>
        OSLockNesting++;
  11ff84:	d0a73903 	ldbu	r2,-25372(gp)
  11ff88:	10800044 	addi	r2,r2,1
  11ff8c:	d0a73905 	stb	r2,-25372(gp)
  11ff90:	e0bff617 	ldw	r2,-40(fp)
  11ff94:	e0bffd15 	stw	r2,-12(fp)
  11ff98:	e0bffd17 	ldw	r2,-12(fp)
  11ff9c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  11ffa0:	011a8540 	call	11a854 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11ffa4:	0005303a 	rdctl	r2,status
  11ffa8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11ffac:	e0fffa17 	ldw	r3,-24(fp)
  11ffb0:	00bfff84 	movi	r2,-2
  11ffb4:	1884703a 	and	r2,r3,r2
  11ffb8:	1001703a 	wrctl	status,r2
  
  return context;
  11ffbc:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  11ffc0:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  11ffc4:	d0a73903 	ldbu	r2,-25372(gp)
  11ffc8:	10803fcc 	andi	r2,r2,255
  11ffcc:	10000326 	beq	r2,zero,11ffdc <OSTaskDel+0x260>
        OSLockNesting--;
  11ffd0:	d0a73903 	ldbu	r2,-25372(gp)
  11ffd4:	10bfffc4 	addi	r2,r2,-1
  11ffd8:	d0a73905 	stb	r2,-25372(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  11ffdc:	e13ff817 	ldw	r4,-32(fp)
  11ffe0:	0122e080 	call	122e08 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  11ffe4:	d0a74143 	ldbu	r2,-25339(gp)
  11ffe8:	10bfffc4 	addi	r2,r2,-1
  11ffec:	d0a74145 	stb	r2,-25339(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  11fff0:	e0ffff03 	ldbu	r3,-4(fp)
  11fff4:	008004f4 	movhi	r2,19
  11fff8:	10bb0204 	addi	r2,r2,-5112
  11fffc:	18c7883a 	add	r3,r3,r3
  120000:	18c7883a 	add	r3,r3,r3
  120004:	10c5883a 	add	r2,r2,r3
  120008:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  12000c:	e0bff817 	ldw	r2,-32(fp)
  120010:	10800617 	ldw	r2,24(r2)
  120014:	1000071e 	bne	r2,zero,120034 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  120018:	e0bff817 	ldw	r2,-32(fp)
  12001c:	10800517 	ldw	r2,20(r2)
  120020:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  120024:	e0bff817 	ldw	r2,-32(fp)
  120028:	10800517 	ldw	r2,20(r2)
  12002c:	d0a73c15 	stw	r2,-25360(gp)
  120030:	00000a06 	br	12005c <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  120034:	e0bff817 	ldw	r2,-32(fp)
  120038:	10800617 	ldw	r2,24(r2)
  12003c:	e0fff817 	ldw	r3,-32(fp)
  120040:	18c00517 	ldw	r3,20(r3)
  120044:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  120048:	e0bff817 	ldw	r2,-32(fp)
  12004c:	10800517 	ldw	r2,20(r2)
  120050:	e0fff817 	ldw	r3,-32(fp)
  120054:	18c00617 	ldw	r3,24(r3)
  120058:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  12005c:	d0e74017 	ldw	r3,-25344(gp)
  120060:	e0bff817 	ldw	r2,-32(fp)
  120064:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  120068:	e0bff817 	ldw	r2,-32(fp)
  12006c:	d0a74015 	stw	r2,-25344(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  120070:	e0bff817 	ldw	r2,-32(fp)
  120074:	00c00fc4 	movi	r3,63
  120078:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  12007c:	e0bff817 	ldw	r2,-32(fp)
  120080:	10001345 	stb	zero,77(r2)
  120084:	e0bff617 	ldw	r2,-40(fp)
  120088:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  12008c:	e0bffc17 	ldw	r2,-16(fp)
  120090:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  120094:	d0a73943 	ldbu	r2,-25371(gp)
  120098:	10803fcc 	andi	r2,r2,255
  12009c:	10800058 	cmpnei	r2,r2,1
  1200a0:	1000011e 	bne	r2,zero,1200a8 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
  1200a4:	011b2c00 	call	11b2c0 <OS_Sched>
    }
    return (OS_ERR_NONE);
  1200a8:	0005883a 	mov	r2,zero
}
  1200ac:	e037883a 	mov	sp,fp
  1200b0:	dfc00117 	ldw	ra,4(sp)
  1200b4:	df000017 	ldw	fp,0(sp)
  1200b8:	dec00204 	addi	sp,sp,8
  1200bc:	f800283a 	ret

001200c0 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  1200c0:	defff504 	addi	sp,sp,-44
  1200c4:	df000a15 	stw	fp,40(sp)
  1200c8:	df000a04 	addi	fp,sp,40
  1200cc:	2005883a 	mov	r2,r4
  1200d0:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  1200d4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  1200d8:	e0bfff03 	ldbu	r2,-4(fp)
  1200dc:	10800518 	cmpnei	r2,r2,20
  1200e0:	1000021e 	bne	r2,zero,1200ec <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  1200e4:	00800f84 	movi	r2,62
  1200e8:	00004506 	br	120200 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  1200ec:	e0bfff03 	ldbu	r2,-4(fp)
  1200f0:	10800530 	cmpltui	r2,r2,20
  1200f4:	1000051e 	bne	r2,zero,12010c <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
  1200f8:	e0bfff03 	ldbu	r2,-4(fp)
  1200fc:	10803fe0 	cmpeqi	r2,r2,255
  120100:	1000021e 	bne	r2,zero,12010c <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
  120104:	00800a84 	movi	r2,42
  120108:	00003d06 	br	120200 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  12010c:	e0bfff03 	ldbu	r2,-4(fp)
  120110:	10803fd8 	cmpnei	r2,r2,255
  120114:	1000111e 	bne	r2,zero,12015c <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  120118:	0005303a 	rdctl	r2,status
  12011c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  120120:	e0fff917 	ldw	r3,-28(fp)
  120124:	00bfff84 	movi	r2,-2
  120128:	1884703a 	and	r2,r3,r2
  12012c:	1001703a 	wrctl	status,r2
  
  return context;
  120130:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  120134:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  120138:	d0a74817 	ldw	r2,-25312(gp)
  12013c:	10800dc3 	ldbu	r2,55(r2)
  120140:	e0bff805 	stb	r2,-32(fp)
  120144:	e0bff617 	ldw	r2,-40(fp)
  120148:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  12014c:	e0bffe17 	ldw	r2,-8(fp)
  120150:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  120154:	e0bff803 	ldbu	r2,-32(fp)
  120158:	00002906 	br	120200 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  12015c:	0005303a 	rdctl	r2,status
  120160:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  120164:	e0fff717 	ldw	r3,-36(fp)
  120168:	00bfff84 	movi	r2,-2
  12016c:	1884703a 	and	r2,r3,r2
  120170:	1001703a 	wrctl	status,r2
  
  return context;
  120174:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  120178:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
  12017c:	e0ffff03 	ldbu	r3,-4(fp)
  120180:	008004f4 	movhi	r2,19
  120184:	10bb0204 	addi	r2,r2,-5112
  120188:	18c7883a 	add	r3,r3,r3
  12018c:	18c7883a 	add	r3,r3,r3
  120190:	10c5883a 	add	r2,r2,r3
  120194:	10800017 	ldw	r2,0(r2)
  120198:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  12019c:	e0bffb17 	ldw	r2,-20(fp)
  1201a0:	1000061e 	bne	r2,zero,1201bc <OSTaskDelReq+0xfc>
  1201a4:	e0bff617 	ldw	r2,-40(fp)
  1201a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1201ac:	e0bffa17 	ldw	r2,-24(fp)
  1201b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  1201b4:	008010c4 	movi	r2,67
  1201b8:	00001106 	br	120200 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  1201bc:	e0bffb17 	ldw	r2,-20(fp)
  1201c0:	10800058 	cmpnei	r2,r2,1
  1201c4:	1000061e 	bne	r2,zero,1201e0 <OSTaskDelReq+0x120>
  1201c8:	e0bff617 	ldw	r2,-40(fp)
  1201cc:	e0bffc15 	stw	r2,-16(fp)
  1201d0:	e0bffc17 	ldw	r2,-16(fp)
  1201d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  1201d8:	00800f44 	movi	r2,61
  1201dc:	00000806 	br	120200 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  1201e0:	e0bffb17 	ldw	r2,-20(fp)
  1201e4:	00c00fc4 	movi	r3,63
  1201e8:	10c00dc5 	stb	r3,55(r2)
  1201ec:	e0bff617 	ldw	r2,-40(fp)
  1201f0:	e0bffd15 	stw	r2,-12(fp)
  1201f4:	e0bffd17 	ldw	r2,-12(fp)
  1201f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  1201fc:	0005883a 	mov	r2,zero
}
  120200:	e037883a 	mov	sp,fp
  120204:	df000017 	ldw	fp,0(sp)
  120208:	dec00104 	addi	sp,sp,4
  12020c:	f800283a 	ret

00120210 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  120210:	defff404 	addi	sp,sp,-48
  120214:	dfc00b15 	stw	ra,44(sp)
  120218:	df000a15 	stw	fp,40(sp)
  12021c:	df000a04 	addi	fp,sp,40
  120220:	2005883a 	mov	r2,r4
  120224:	e17ffe15 	stw	r5,-8(fp)
  120228:	e1bfff15 	stw	r6,-4(fp)
  12022c:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  120230:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  120234:	e0bfff17 	ldw	r2,-4(fp)
  120238:	1000021e 	bne	r2,zero,120244 <OSTaskNameGet+0x34>
        return (0);
  12023c:	0005883a 	mov	r2,zero
  120240:	00005406 	br	120394 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  120244:	e0bffd03 	ldbu	r2,-12(fp)
  120248:	10800570 	cmpltui	r2,r2,21
  12024c:	1000081e 	bne	r2,zero,120270 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  120250:	e0bffd03 	ldbu	r2,-12(fp)
  120254:	10803fe0 	cmpeqi	r2,r2,255
  120258:	1000051e 	bne	r2,zero,120270 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  12025c:	e0bfff17 	ldw	r2,-4(fp)
  120260:	00c00a84 	movi	r3,42
  120264:	10c00005 	stb	r3,0(r2)
            return (0);
  120268:	0005883a 	mov	r2,zero
  12026c:	00004906 	br	120394 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  120270:	e0bffe17 	ldw	r2,-8(fp)
  120274:	1000051e 	bne	r2,zero,12028c <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  120278:	e0bfff17 	ldw	r2,-4(fp)
  12027c:	00c00304 	movi	r3,12
  120280:	10c00005 	stb	r3,0(r2)
        return (0);
  120284:	0005883a 	mov	r2,zero
  120288:	00004206 	br	120394 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  12028c:	d0a74703 	ldbu	r2,-25316(gp)
  120290:	10803fcc 	andi	r2,r2,255
  120294:	10000526 	beq	r2,zero,1202ac <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
  120298:	e0bfff17 	ldw	r2,-4(fp)
  12029c:	00c00444 	movi	r3,17
  1202a0:	10c00005 	stb	r3,0(r2)
        return (0);
  1202a4:	0005883a 	mov	r2,zero
  1202a8:	00003a06 	br	120394 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  1202ac:	0005303a 	rdctl	r2,status
  1202b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1202b4:	e0fffc17 	ldw	r3,-16(fp)
  1202b8:	00bfff84 	movi	r2,-2
  1202bc:	1884703a 	and	r2,r3,r2
  1202c0:	1001703a 	wrctl	status,r2
  
  return context;
  1202c4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  1202c8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  1202cc:	e0bffd03 	ldbu	r2,-12(fp)
  1202d0:	10803fd8 	cmpnei	r2,r2,255
  1202d4:	1000031e 	bne	r2,zero,1202e4 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
  1202d8:	d0a74817 	ldw	r2,-25312(gp)
  1202dc:	10800c83 	ldbu	r2,50(r2)
  1202e0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  1202e4:	e0fffd03 	ldbu	r3,-12(fp)
  1202e8:	008004f4 	movhi	r2,19
  1202ec:	10bb0204 	addi	r2,r2,-5112
  1202f0:	18c7883a 	add	r3,r3,r3
  1202f4:	18c7883a 	add	r3,r3,r3
  1202f8:	10c5883a 	add	r2,r2,r3
  1202fc:	10800017 	ldw	r2,0(r2)
  120300:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  120304:	e0bff817 	ldw	r2,-32(fp)
  120308:	1000091e 	bne	r2,zero,120330 <OSTaskNameGet+0x120>
  12030c:	e0bff617 	ldw	r2,-40(fp)
  120310:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  120314:	e0bff717 	ldw	r2,-36(fp)
  120318:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  12031c:	e0bfff17 	ldw	r2,-4(fp)
  120320:	00c010c4 	movi	r3,67
  120324:	10c00005 	stb	r3,0(r2)
        return (0);
  120328:	0005883a 	mov	r2,zero
  12032c:	00001906 	br	120394 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  120330:	e0bff817 	ldw	r2,-32(fp)
  120334:	10800058 	cmpnei	r2,r2,1
  120338:	1000091e 	bne	r2,zero,120360 <OSTaskNameGet+0x150>
  12033c:	e0bff617 	ldw	r2,-40(fp)
  120340:	e0bff915 	stw	r2,-28(fp)
  120344:	e0bff917 	ldw	r2,-28(fp)
  120348:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  12034c:	e0bfff17 	ldw	r2,-4(fp)
  120350:	00c010c4 	movi	r3,67
  120354:	10c00005 	stb	r3,0(r2)
        return (0);
  120358:	0005883a 	mov	r2,zero
  12035c:	00000d06 	br	120394 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  120360:	e0bff817 	ldw	r2,-32(fp)
  120364:	10801304 	addi	r2,r2,76
  120368:	100b883a 	mov	r5,r2
  12036c:	e13ffe17 	ldw	r4,-8(fp)
  120370:	011b4040 	call	11b404 <OS_StrCopy>
  120374:	e0bffb05 	stb	r2,-20(fp)
  120378:	e0bff617 	ldw	r2,-40(fp)
  12037c:	e0bffa15 	stw	r2,-24(fp)
  120380:	e0bffa17 	ldw	r2,-24(fp)
  120384:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  120388:	e0bfff17 	ldw	r2,-4(fp)
  12038c:	10000005 	stb	zero,0(r2)
    return (len);
  120390:	e0bffb03 	ldbu	r2,-20(fp)
}
  120394:	e037883a 	mov	sp,fp
  120398:	dfc00117 	ldw	ra,4(sp)
  12039c:	df000017 	ldw	fp,0(sp)
  1203a0:	dec00204 	addi	sp,sp,8
  1203a4:	f800283a 	ret

001203a8 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  1203a8:	defff304 	addi	sp,sp,-52
  1203ac:	dfc00c15 	stw	ra,48(sp)
  1203b0:	df000b15 	stw	fp,44(sp)
  1203b4:	df000b04 	addi	fp,sp,44
  1203b8:	2005883a 	mov	r2,r4
  1203bc:	e17ffe15 	stw	r5,-8(fp)
  1203c0:	e1bfff15 	stw	r6,-4(fp)
  1203c4:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  1203c8:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  1203cc:	e0bfff17 	ldw	r2,-4(fp)
  1203d0:	10005c26 	beq	r2,zero,120544 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  1203d4:	e0bffd03 	ldbu	r2,-12(fp)
  1203d8:	10800570 	cmpltui	r2,r2,21
  1203dc:	1000071e 	bne	r2,zero,1203fc <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  1203e0:	e0bffd03 	ldbu	r2,-12(fp)
  1203e4:	10803fe0 	cmpeqi	r2,r2,255
  1203e8:	1000041e 	bne	r2,zero,1203fc <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  1203ec:	e0bfff17 	ldw	r2,-4(fp)
  1203f0:	00c00a84 	movi	r3,42
  1203f4:	10c00005 	stb	r3,0(r2)
            return;
  1203f8:	00005306 	br	120548 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  1203fc:	e0bffe17 	ldw	r2,-8(fp)
  120400:	1000041e 	bne	r2,zero,120414 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  120404:	e0bfff17 	ldw	r2,-4(fp)
  120408:	00c00304 	movi	r3,12
  12040c:	10c00005 	stb	r3,0(r2)
        return;
  120410:	00004d06 	br	120548 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  120414:	d0a74703 	ldbu	r2,-25316(gp)
  120418:	10803fcc 	andi	r2,r2,255
  12041c:	10000426 	beq	r2,zero,120430 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
  120420:	e0bfff17 	ldw	r2,-4(fp)
  120424:	00c00484 	movi	r3,18
  120428:	10c00005 	stb	r3,0(r2)
        return;
  12042c:	00004606 	br	120548 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  120430:	0005303a 	rdctl	r2,status
  120434:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  120438:	e0fffc17 	ldw	r3,-16(fp)
  12043c:	00bfff84 	movi	r2,-2
  120440:	1884703a 	and	r2,r3,r2
  120444:	1001703a 	wrctl	status,r2
  
  return context;
  120448:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  12044c:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  120450:	e0bffd03 	ldbu	r2,-12(fp)
  120454:	10803fd8 	cmpnei	r2,r2,255
  120458:	1000031e 	bne	r2,zero,120468 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
  12045c:	d0a74817 	ldw	r2,-25312(gp)
  120460:	10800c83 	ldbu	r2,50(r2)
  120464:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  120468:	e0fffd03 	ldbu	r3,-12(fp)
  12046c:	008004f4 	movhi	r2,19
  120470:	10bb0204 	addi	r2,r2,-5112
  120474:	18c7883a 	add	r3,r3,r3
  120478:	18c7883a 	add	r3,r3,r3
  12047c:	10c5883a 	add	r2,r2,r3
  120480:	10800017 	ldw	r2,0(r2)
  120484:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  120488:	e0bff717 	ldw	r2,-36(fp)
  12048c:	1000081e 	bne	r2,zero,1204b0 <OSTaskNameSet+0x108>
  120490:	e0bff517 	ldw	r2,-44(fp)
  120494:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  120498:	e0bff617 	ldw	r2,-40(fp)
  12049c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  1204a0:	e0bfff17 	ldw	r2,-4(fp)
  1204a4:	00c010c4 	movi	r3,67
  1204a8:	10c00005 	stb	r3,0(r2)
        return;
  1204ac:	00002606 	br	120548 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  1204b0:	e0bff717 	ldw	r2,-36(fp)
  1204b4:	10800058 	cmpnei	r2,r2,1
  1204b8:	1000081e 	bne	r2,zero,1204dc <OSTaskNameSet+0x134>
  1204bc:	e0bff517 	ldw	r2,-44(fp)
  1204c0:	e0bff815 	stw	r2,-32(fp)
  1204c4:	e0bff817 	ldw	r2,-32(fp)
  1204c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  1204cc:	e0bfff17 	ldw	r2,-4(fp)
  1204d0:	00c010c4 	movi	r3,67
  1204d4:	10c00005 	stb	r3,0(r2)
        return;
  1204d8:	00001b06 	br	120548 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  1204dc:	e13ffe17 	ldw	r4,-8(fp)
  1204e0:	011b4780 	call	11b478 <OS_StrLen>
  1204e4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  1204e8:	e0bffa03 	ldbu	r2,-24(fp)
  1204ec:	10800830 	cmpltui	r2,r2,32
  1204f0:	1000081e 	bne	r2,zero,120514 <OSTaskNameSet+0x16c>
  1204f4:	e0bff517 	ldw	r2,-44(fp)
  1204f8:	e0bff915 	stw	r2,-28(fp)
  1204fc:	e0bff917 	ldw	r2,-28(fp)
  120500:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  120504:	e0bfff17 	ldw	r2,-4(fp)
  120508:	00c01044 	movi	r3,65
  12050c:	10c00005 	stb	r3,0(r2)
        return;
  120510:	00000d06 	br	120548 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  120514:	e0bff717 	ldw	r2,-36(fp)
  120518:	10801304 	addi	r2,r2,76
  12051c:	e17ffe17 	ldw	r5,-8(fp)
  120520:	1009883a 	mov	r4,r2
  120524:	011b4040 	call	11b404 <OS_StrCopy>
  120528:	e0bff517 	ldw	r2,-44(fp)
  12052c:	e0bffb15 	stw	r2,-20(fp)
  120530:	e0bffb17 	ldw	r2,-20(fp)
  120534:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  120538:	e0bfff17 	ldw	r2,-4(fp)
  12053c:	10000005 	stb	zero,0(r2)
  120540:	00000106 	br	120548 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
  120544:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  120548:	e037883a 	mov	sp,fp
  12054c:	dfc00117 	ldw	ra,4(sp)
  120550:	df000017 	ldw	fp,0(sp)
  120554:	dec00204 	addi	sp,sp,8
  120558:	f800283a 	ret

0012055c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  12055c:	defff404 	addi	sp,sp,-48
  120560:	dfc00b15 	stw	ra,44(sp)
  120564:	df000a15 	stw	fp,40(sp)
  120568:	df000a04 	addi	fp,sp,40
  12056c:	2005883a 	mov	r2,r4
  120570:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  120574:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  120578:	e0bfff03 	ldbu	r2,-4(fp)
  12057c:	10800530 	cmpltui	r2,r2,20
  120580:	1000021e 	bne	r2,zero,12058c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  120584:	00800a84 	movi	r2,42
  120588:	00006406 	br	12071c <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  12058c:	0005303a 	rdctl	r2,status
  120590:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  120594:	e0fffe17 	ldw	r3,-8(fp)
  120598:	00bfff84 	movi	r2,-2
  12059c:	1884703a 	and	r2,r3,r2
  1205a0:	1001703a 	wrctl	status,r2
  
  return context;
  1205a4:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  1205a8:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
  1205ac:	e0ffff03 	ldbu	r3,-4(fp)
  1205b0:	008004f4 	movhi	r2,19
  1205b4:	10bb0204 	addi	r2,r2,-5112
  1205b8:	18c7883a 	add	r3,r3,r3
  1205bc:	18c7883a 	add	r3,r3,r3
  1205c0:	10c5883a 	add	r2,r2,r3
  1205c4:	10800017 	ldw	r2,0(r2)
  1205c8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  1205cc:	e0bff817 	ldw	r2,-32(fp)
  1205d0:	1000061e 	bne	r2,zero,1205ec <OSTaskResume+0x90>
  1205d4:	e0bff617 	ldw	r2,-40(fp)
  1205d8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1205dc:	e0bff717 	ldw	r2,-36(fp)
  1205e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  1205e4:	00801184 	movi	r2,70
  1205e8:	00004c06 	br	12071c <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  1205ec:	e0bff817 	ldw	r2,-32(fp)
  1205f0:	10800058 	cmpnei	r2,r2,1
  1205f4:	1000061e 	bne	r2,zero,120610 <OSTaskResume+0xb4>
  1205f8:	e0bff617 	ldw	r2,-40(fp)
  1205fc:	e0bff915 	stw	r2,-28(fp)
  120600:	e0bff917 	ldw	r2,-28(fp)
  120604:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  120608:	008010c4 	movi	r2,67
  12060c:	00004306 	br	12071c <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  120610:	e0bff817 	ldw	r2,-32(fp)
  120614:	10800c03 	ldbu	r2,48(r2)
  120618:	10803fcc 	andi	r2,r2,255
  12061c:	1080020c 	andi	r2,r2,8
  120620:	10003926 	beq	r2,zero,120708 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  120624:	e0bff817 	ldw	r2,-32(fp)
  120628:	10c00c03 	ldbu	r3,48(r2)
  12062c:	00bffdc4 	movi	r2,-9
  120630:	1884703a 	and	r2,r3,r2
  120634:	1007883a 	mov	r3,r2
  120638:	e0bff817 	ldw	r2,-32(fp)
  12063c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  120640:	e0bff817 	ldw	r2,-32(fp)
  120644:	10800c03 	ldbu	r2,48(r2)
  120648:	10803fcc 	andi	r2,r2,255
  12064c:	1000281e 	bne	r2,zero,1206f0 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
  120650:	e0bff817 	ldw	r2,-32(fp)
  120654:	10800b8b 	ldhu	r2,46(r2)
  120658:	10bfffcc 	andi	r2,r2,65535
  12065c:	10001f1e 	bne	r2,zero,1206dc <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  120660:	e0bff817 	ldw	r2,-32(fp)
  120664:	10c00d83 	ldbu	r3,54(r2)
  120668:	d0a74503 	ldbu	r2,-25324(gp)
  12066c:	1884b03a 	or	r2,r3,r2
  120670:	d0a74505 	stb	r2,-25324(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  120674:	e0bff817 	ldw	r2,-32(fp)
  120678:	10800d03 	ldbu	r2,52(r2)
  12067c:	10c03fcc 	andi	r3,r2,255
  120680:	e0bff817 	ldw	r2,-32(fp)
  120684:	10800d03 	ldbu	r2,52(r2)
  120688:	11003fcc 	andi	r4,r2,255
  12068c:	d0a74544 	addi	r2,gp,-25323
  120690:	2085883a 	add	r2,r4,r2
  120694:	11000003 	ldbu	r4,0(r2)
  120698:	e0bff817 	ldw	r2,-32(fp)
  12069c:	10800d43 	ldbu	r2,53(r2)
  1206a0:	2084b03a 	or	r2,r4,r2
  1206a4:	1009883a 	mov	r4,r2
  1206a8:	d0a74544 	addi	r2,gp,-25323
  1206ac:	1885883a 	add	r2,r3,r2
  1206b0:	11000005 	stb	r4,0(r2)
  1206b4:	e0bff617 	ldw	r2,-40(fp)
  1206b8:	e0bffa15 	stw	r2,-24(fp)
  1206bc:	e0bffa17 	ldw	r2,-24(fp)
  1206c0:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  1206c4:	d0a73943 	ldbu	r2,-25371(gp)
  1206c8:	10803fcc 	andi	r2,r2,255
  1206cc:	10800058 	cmpnei	r2,r2,1
  1206d0:	10000b1e 	bne	r2,zero,120700 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
  1206d4:	011b2c00 	call	11b2c0 <OS_Sched>
  1206d8:	00000906 	br	120700 <OSTaskResume+0x1a4>
  1206dc:	e0bff617 	ldw	r2,-40(fp)
  1206e0:	e0bffb15 	stw	r2,-20(fp)
  1206e4:	e0bffb17 	ldw	r2,-20(fp)
  1206e8:	1001703a 	wrctl	status,r2
  1206ec:	00000406 	br	120700 <OSTaskResume+0x1a4>
  1206f0:	e0bff617 	ldw	r2,-40(fp)
  1206f4:	e0bffc15 	stw	r2,-16(fp)
  1206f8:	e0bffc17 	ldw	r2,-16(fp)
  1206fc:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  120700:	0005883a 	mov	r2,zero
  120704:	00000506 	br	12071c <OSTaskResume+0x1c0>
  120708:	e0bff617 	ldw	r2,-40(fp)
  12070c:	e0bffd15 	stw	r2,-12(fp)
  120710:	e0bffd17 	ldw	r2,-12(fp)
  120714:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  120718:	00801104 	movi	r2,68
}
  12071c:	e037883a 	mov	sp,fp
  120720:	dfc00117 	ldw	ra,4(sp)
  120724:	df000017 	ldw	fp,0(sp)
  120728:	dec00204 	addi	sp,sp,8
  12072c:	f800283a 	ret

00120730 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  120730:	defff304 	addi	sp,sp,-52
  120734:	df000c15 	stw	fp,48(sp)
  120738:	df000c04 	addi	fp,sp,48
  12073c:	2005883a 	mov	r2,r4
  120740:	e17fff15 	stw	r5,-4(fp)
  120744:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  120748:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  12074c:	e0bffe03 	ldbu	r2,-8(fp)
  120750:	10800570 	cmpltui	r2,r2,21
  120754:	1000051e 	bne	r2,zero,12076c <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  120758:	e0bffe03 	ldbu	r2,-8(fp)
  12075c:	10803fe0 	cmpeqi	r2,r2,255
  120760:	1000021e 	bne	r2,zero,12076c <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  120764:	00800a84 	movi	r2,42
  120768:	00005d06 	br	1208e0 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  12076c:	e0bfff17 	ldw	r2,-4(fp)
  120770:	1000021e 	bne	r2,zero,12077c <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
  120774:	00800244 	movi	r2,9
  120778:	00005906 	br	1208e0 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  12077c:	e0bfff17 	ldw	r2,-4(fp)
  120780:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  120784:	e0bfff17 	ldw	r2,-4(fp)
  120788:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  12078c:	0005303a 	rdctl	r2,status
  120790:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  120794:	e0fffd17 	ldw	r3,-12(fp)
  120798:	00bfff84 	movi	r2,-2
  12079c:	1884703a 	and	r2,r3,r2
  1207a0:	1001703a 	wrctl	status,r2
  
  return context;
  1207a4:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
  1207a8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  1207ac:	e0bffe03 	ldbu	r2,-8(fp)
  1207b0:	10803fd8 	cmpnei	r2,r2,255
  1207b4:	1000031e 	bne	r2,zero,1207c4 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
  1207b8:	d0a74817 	ldw	r2,-25312(gp)
  1207bc:	10800c83 	ldbu	r2,50(r2)
  1207c0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  1207c4:	e0fffe03 	ldbu	r3,-8(fp)
  1207c8:	008004f4 	movhi	r2,19
  1207cc:	10bb0204 	addi	r2,r2,-5112
  1207d0:	18c7883a 	add	r3,r3,r3
  1207d4:	18c7883a 	add	r3,r3,r3
  1207d8:	10c5883a 	add	r2,r2,r3
  1207dc:	10800017 	ldw	r2,0(r2)
  1207e0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  1207e4:	e0bff817 	ldw	r2,-32(fp)
  1207e8:	1000061e 	bne	r2,zero,120804 <OSTaskStkChk+0xd4>
  1207ec:	e0bff617 	ldw	r2,-40(fp)
  1207f0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1207f4:	e0bff717 	ldw	r2,-36(fp)
  1207f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  1207fc:	008010c4 	movi	r2,67
  120800:	00003706 	br	1208e0 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
  120804:	e0bff817 	ldw	r2,-32(fp)
  120808:	10800058 	cmpnei	r2,r2,1
  12080c:	1000061e 	bne	r2,zero,120828 <OSTaskStkChk+0xf8>
  120810:	e0bff617 	ldw	r2,-40(fp)
  120814:	e0bff915 	stw	r2,-28(fp)
  120818:	e0bff917 	ldw	r2,-28(fp)
  12081c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  120820:	008010c4 	movi	r2,67
  120824:	00002e06 	br	1208e0 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  120828:	e0bff817 	ldw	r2,-32(fp)
  12082c:	1080040b 	ldhu	r2,16(r2)
  120830:	10bfffcc 	andi	r2,r2,65535
  120834:	1080004c 	andi	r2,r2,1
  120838:	1000061e 	bne	r2,zero,120854 <OSTaskStkChk+0x124>
  12083c:	e0bff617 	ldw	r2,-40(fp)
  120840:	e0bffa15 	stw	r2,-24(fp)
  120844:	e0bffa17 	ldw	r2,-24(fp)
  120848:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  12084c:	00801144 	movi	r2,69
  120850:	00002306 	br	1208e0 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
  120854:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
  120858:	e0bff817 	ldw	r2,-32(fp)
  12085c:	10800317 	ldw	r2,12(r2)
  120860:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
  120864:	e0bff817 	ldw	r2,-32(fp)
  120868:	10800217 	ldw	r2,8(r2)
  12086c:	e0bff415 	stw	r2,-48(fp)
  120870:	e0bff617 	ldw	r2,-40(fp)
  120874:	e0bffb15 	stw	r2,-20(fp)
  120878:	e0bffb17 	ldw	r2,-20(fp)
  12087c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  120880:	00000306 	br	120890 <OSTaskStkChk+0x160>
        nfree++;
  120884:	e0bff517 	ldw	r2,-44(fp)
  120888:	10800044 	addi	r2,r2,1
  12088c:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  120890:	e0bff417 	ldw	r2,-48(fp)
  120894:	10c00104 	addi	r3,r2,4
  120898:	e0fff415 	stw	r3,-48(fp)
  12089c:	10800017 	ldw	r2,0(r2)
  1208a0:	103ff826 	beq	r2,zero,120884 <__alt_data_end+0xfffe0884>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  1208a4:	e0bff517 	ldw	r2,-44(fp)
  1208a8:	1085883a 	add	r2,r2,r2
  1208ac:	1085883a 	add	r2,r2,r2
  1208b0:	1007883a 	mov	r3,r2
  1208b4:	e0bfff17 	ldw	r2,-4(fp)
  1208b8:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  1208bc:	e0fffc17 	ldw	r3,-16(fp)
  1208c0:	e0bff517 	ldw	r2,-44(fp)
  1208c4:	1885c83a 	sub	r2,r3,r2
  1208c8:	1085883a 	add	r2,r2,r2
  1208cc:	1085883a 	add	r2,r2,r2
  1208d0:	1007883a 	mov	r3,r2
  1208d4:	e0bfff17 	ldw	r2,-4(fp)
  1208d8:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  1208dc:	0005883a 	mov	r2,zero
}
  1208e0:	e037883a 	mov	sp,fp
  1208e4:	df000017 	ldw	fp,0(sp)
  1208e8:	dec00104 	addi	sp,sp,4
  1208ec:	f800283a 	ret

001208f0 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  1208f0:	defff504 	addi	sp,sp,-44
  1208f4:	dfc00a15 	stw	ra,40(sp)
  1208f8:	df000915 	stw	fp,36(sp)
  1208fc:	df000904 	addi	fp,sp,36
  120900:	2005883a 	mov	r2,r4
  120904:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  120908:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  12090c:	e0bfff03 	ldbu	r2,-4(fp)
  120910:	10800518 	cmpnei	r2,r2,20
  120914:	1000021e 	bne	r2,zero,120920 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  120918:	008011c4 	movi	r2,71
  12091c:	00006806 	br	120ac0 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  120920:	e0bfff03 	ldbu	r2,-4(fp)
  120924:	10800530 	cmpltui	r2,r2,20
  120928:	1000051e 	bne	r2,zero,120940 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
  12092c:	e0bfff03 	ldbu	r2,-4(fp)
  120930:	10803fe0 	cmpeqi	r2,r2,255
  120934:	1000021e 	bne	r2,zero,120940 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
  120938:	00800a84 	movi	r2,42
  12093c:	00006006 	br	120ac0 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  120940:	0005303a 	rdctl	r2,status
  120944:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  120948:	e0fffe17 	ldw	r3,-8(fp)
  12094c:	00bfff84 	movi	r2,-2
  120950:	1884703a 	and	r2,r3,r2
  120954:	1001703a 	wrctl	status,r2
  
  return context;
  120958:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  12095c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  120960:	e0bfff03 	ldbu	r2,-4(fp)
  120964:	10803fd8 	cmpnei	r2,r2,255
  120968:	1000061e 	bne	r2,zero,120984 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
  12096c:	d0a74817 	ldw	r2,-25312(gp)
  120970:	10800c83 	ldbu	r2,50(r2)
  120974:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
  120978:	00800044 	movi	r2,1
  12097c:	e0bff705 	stb	r2,-36(fp)
  120980:	00000906 	br	1209a8 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  120984:	d0a74817 	ldw	r2,-25312(gp)
  120988:	10800c83 	ldbu	r2,50(r2)
  12098c:	10c03fcc 	andi	r3,r2,255
  120990:	e0bfff03 	ldbu	r2,-4(fp)
  120994:	1880031e 	bne	r3,r2,1209a4 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
  120998:	00800044 	movi	r2,1
  12099c:	e0bff705 	stb	r2,-36(fp)
  1209a0:	00000106 	br	1209a8 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  1209a4:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  1209a8:	e0ffff03 	ldbu	r3,-4(fp)
  1209ac:	008004f4 	movhi	r2,19
  1209b0:	10bb0204 	addi	r2,r2,-5112
  1209b4:	18c7883a 	add	r3,r3,r3
  1209b8:	18c7883a 	add	r3,r3,r3
  1209bc:	10c5883a 	add	r2,r2,r3
  1209c0:	10800017 	ldw	r2,0(r2)
  1209c4:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  1209c8:	e0bffa17 	ldw	r2,-24(fp)
  1209cc:	1000061e 	bne	r2,zero,1209e8 <OSTaskSuspend+0xf8>
  1209d0:	e0bff817 	ldw	r2,-32(fp)
  1209d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1209d8:	e0bff917 	ldw	r2,-28(fp)
  1209dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  1209e0:	00801204 	movi	r2,72
  1209e4:	00003606 	br	120ac0 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  1209e8:	e0bffa17 	ldw	r2,-24(fp)
  1209ec:	10800058 	cmpnei	r2,r2,1
  1209f0:	1000061e 	bne	r2,zero,120a0c <OSTaskSuspend+0x11c>
  1209f4:	e0bff817 	ldw	r2,-32(fp)
  1209f8:	e0bffb15 	stw	r2,-20(fp)
  1209fc:	e0bffb17 	ldw	r2,-20(fp)
  120a00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  120a04:	008010c4 	movi	r2,67
  120a08:	00002d06 	br	120ac0 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
  120a0c:	e0bffa17 	ldw	r2,-24(fp)
  120a10:	10800d03 	ldbu	r2,52(r2)
  120a14:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  120a18:	e0fffd03 	ldbu	r3,-12(fp)
  120a1c:	e13ffd03 	ldbu	r4,-12(fp)
  120a20:	d0a74544 	addi	r2,gp,-25323
  120a24:	2085883a 	add	r2,r4,r2
  120a28:	10800003 	ldbu	r2,0(r2)
  120a2c:	1009883a 	mov	r4,r2
  120a30:	e0bffa17 	ldw	r2,-24(fp)
  120a34:	10800d43 	ldbu	r2,53(r2)
  120a38:	0084303a 	nor	r2,zero,r2
  120a3c:	2084703a 	and	r2,r4,r2
  120a40:	1009883a 	mov	r4,r2
  120a44:	d0a74544 	addi	r2,gp,-25323
  120a48:	1885883a 	add	r2,r3,r2
  120a4c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  120a50:	e0fffd03 	ldbu	r3,-12(fp)
  120a54:	d0a74544 	addi	r2,gp,-25323
  120a58:	1885883a 	add	r2,r3,r2
  120a5c:	10800003 	ldbu	r2,0(r2)
  120a60:	10803fcc 	andi	r2,r2,255
  120a64:	1000071e 	bne	r2,zero,120a84 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  120a68:	e0bffa17 	ldw	r2,-24(fp)
  120a6c:	10800d83 	ldbu	r2,54(r2)
  120a70:	0084303a 	nor	r2,zero,r2
  120a74:	1007883a 	mov	r3,r2
  120a78:	d0a74503 	ldbu	r2,-25324(gp)
  120a7c:	1884703a 	and	r2,r3,r2
  120a80:	d0a74505 	stb	r2,-25324(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  120a84:	e0bffa17 	ldw	r2,-24(fp)
  120a88:	10800c03 	ldbu	r2,48(r2)
  120a8c:	10800214 	ori	r2,r2,8
  120a90:	1007883a 	mov	r3,r2
  120a94:	e0bffa17 	ldw	r2,-24(fp)
  120a98:	10c00c05 	stb	r3,48(r2)
  120a9c:	e0bff817 	ldw	r2,-32(fp)
  120aa0:	e0bffc15 	stw	r2,-16(fp)
  120aa4:	e0bffc17 	ldw	r2,-16(fp)
  120aa8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  120aac:	e0bff703 	ldbu	r2,-36(fp)
  120ab0:	10800058 	cmpnei	r2,r2,1
  120ab4:	1000011e 	bne	r2,zero,120abc <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
  120ab8:	011b2c00 	call	11b2c0 <OS_Sched>
    }
    return (OS_ERR_NONE);
  120abc:	0005883a 	mov	r2,zero
}
  120ac0:	e037883a 	mov	sp,fp
  120ac4:	dfc00117 	ldw	ra,4(sp)
  120ac8:	df000017 	ldw	fp,0(sp)
  120acc:	dec00204 	addi	sp,sp,8
  120ad0:	f800283a 	ret

00120ad4 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  120ad4:	defff604 	addi	sp,sp,-40
  120ad8:	dfc00915 	stw	ra,36(sp)
  120adc:	df000815 	stw	fp,32(sp)
  120ae0:	df000804 	addi	fp,sp,32
  120ae4:	2005883a 	mov	r2,r4
  120ae8:	e17fff15 	stw	r5,-4(fp)
  120aec:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  120af0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  120af4:	e0bffe03 	ldbu	r2,-8(fp)
  120af8:	10800570 	cmpltui	r2,r2,21
  120afc:	1000051e 	bne	r2,zero,120b14 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  120b00:	e0bffe03 	ldbu	r2,-8(fp)
  120b04:	10803fe0 	cmpeqi	r2,r2,255
  120b08:	1000021e 	bne	r2,zero,120b14 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  120b0c:	00800a84 	movi	r2,42
  120b10:	00003406 	br	120be4 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  120b14:	e0bfff17 	ldw	r2,-4(fp)
  120b18:	1000021e 	bne	r2,zero,120b24 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
  120b1c:	00800244 	movi	r2,9
  120b20:	00003006 	br	120be4 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  120b24:	0005303a 	rdctl	r2,status
  120b28:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  120b2c:	e0fffd17 	ldw	r3,-12(fp)
  120b30:	00bfff84 	movi	r2,-2
  120b34:	1884703a 	and	r2,r3,r2
  120b38:	1001703a 	wrctl	status,r2
  
  return context;
  120b3c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  120b40:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  120b44:	e0bffe03 	ldbu	r2,-8(fp)
  120b48:	10803fd8 	cmpnei	r2,r2,255
  120b4c:	1000031e 	bne	r2,zero,120b5c <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
  120b50:	d0a74817 	ldw	r2,-25312(gp)
  120b54:	10800c83 	ldbu	r2,50(r2)
  120b58:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  120b5c:	e0fffe03 	ldbu	r3,-8(fp)
  120b60:	008004f4 	movhi	r2,19
  120b64:	10bb0204 	addi	r2,r2,-5112
  120b68:	18c7883a 	add	r3,r3,r3
  120b6c:	18c7883a 	add	r3,r3,r3
  120b70:	10c5883a 	add	r2,r2,r3
  120b74:	10800017 	ldw	r2,0(r2)
  120b78:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  120b7c:	e0bffa17 	ldw	r2,-24(fp)
  120b80:	1000061e 	bne	r2,zero,120b9c <OSTaskQuery+0xc8>
  120b84:	e0bff817 	ldw	r2,-32(fp)
  120b88:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  120b8c:	e0bff917 	ldw	r2,-28(fp)
  120b90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  120b94:	00800a44 	movi	r2,41
  120b98:	00001206 	br	120be4 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  120b9c:	e0bffa17 	ldw	r2,-24(fp)
  120ba0:	10800058 	cmpnei	r2,r2,1
  120ba4:	1000061e 	bne	r2,zero,120bc0 <OSTaskQuery+0xec>
  120ba8:	e0bff817 	ldw	r2,-32(fp)
  120bac:	e0bffb15 	stw	r2,-20(fp)
  120bb0:	e0bffb17 	ldw	r2,-20(fp)
  120bb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  120bb8:	008010c4 	movi	r2,67
  120bbc:	00000906 	br	120be4 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  120bc0:	01801b04 	movi	r6,108
  120bc4:	e17ffa17 	ldw	r5,-24(fp)
  120bc8:	e13fff17 	ldw	r4,-4(fp)
  120bcc:	011b2580 	call	11b258 <OS_MemCopy>
  120bd0:	e0bff817 	ldw	r2,-32(fp)
  120bd4:	e0bffc15 	stw	r2,-16(fp)
  120bd8:	e0bffc17 	ldw	r2,-16(fp)
  120bdc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  120be0:	0005883a 	mov	r2,zero
}
  120be4:	e037883a 	mov	sp,fp
  120be8:	dfc00117 	ldw	ra,4(sp)
  120bec:	df000017 	ldw	fp,0(sp)
  120bf0:	dec00204 	addi	sp,sp,8
  120bf4:	f800283a 	ret

00120bf8 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  120bf8:	defffc04 	addi	sp,sp,-16
  120bfc:	df000315 	stw	fp,12(sp)
  120c00:	df000304 	addi	fp,sp,12
  120c04:	e13ffd15 	stw	r4,-12(fp)
  120c08:	e17ffe15 	stw	r5,-8(fp)
  120c0c:	3005883a 	mov	r2,r6
  120c10:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  120c14:	e0bfff0b 	ldhu	r2,-4(fp)
  120c18:	1080004c 	andi	r2,r2,1
  120c1c:	10000d26 	beq	r2,zero,120c54 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  120c20:	e0bfff0b 	ldhu	r2,-4(fp)
  120c24:	1080008c 	andi	r2,r2,2
  120c28:	10000a26 	beq	r2,zero,120c54 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  120c2c:	00000706 	br	120c4c <OS_TaskStkClr+0x54>
                size--;
  120c30:	e0bffe17 	ldw	r2,-8(fp)
  120c34:	10bfffc4 	addi	r2,r2,-1
  120c38:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  120c3c:	e0bffd17 	ldw	r2,-12(fp)
  120c40:	10c00104 	addi	r3,r2,4
  120c44:	e0fffd15 	stw	r3,-12(fp)
  120c48:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  120c4c:	e0bffe17 	ldw	r2,-8(fp)
  120c50:	103ff71e 	bne	r2,zero,120c30 <__alt_data_end+0xfffe0c30>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  120c54:	0001883a 	nop
  120c58:	e037883a 	mov	sp,fp
  120c5c:	df000017 	ldw	fp,0(sp)
  120c60:	dec00104 	addi	sp,sp,4
  120c64:	f800283a 	ret

00120c68 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  120c68:	defff904 	addi	sp,sp,-28
  120c6c:	dfc00615 	stw	ra,24(sp)
  120c70:	df000515 	stw	fp,20(sp)
  120c74:	df000504 	addi	fp,sp,20
  120c78:	2005883a 	mov	r2,r4
  120c7c:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  120c80:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  120c84:	d0a74703 	ldbu	r2,-25316(gp)
  120c88:	10803fcc 	andi	r2,r2,255
  120c8c:	1000311e 	bne	r2,zero,120d54 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  120c90:	e0bfff0b 	ldhu	r2,-4(fp)
  120c94:	10003026 	beq	r2,zero,120d58 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  120c98:	0005303a 	rdctl	r2,status
  120c9c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  120ca0:	e0fffe17 	ldw	r3,-8(fp)
  120ca4:	00bfff84 	movi	r2,-2
  120ca8:	1884703a 	and	r2,r3,r2
  120cac:	1001703a 	wrctl	status,r2
  
  return context;
  120cb0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  120cb4:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  120cb8:	d0a74817 	ldw	r2,-25312(gp)
  120cbc:	10800d03 	ldbu	r2,52(r2)
  120cc0:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  120cc4:	e0fffd03 	ldbu	r3,-12(fp)
  120cc8:	e13ffd03 	ldbu	r4,-12(fp)
  120ccc:	d0a74544 	addi	r2,gp,-25323
  120cd0:	2085883a 	add	r2,r4,r2
  120cd4:	10800003 	ldbu	r2,0(r2)
  120cd8:	1009883a 	mov	r4,r2
  120cdc:	d0a74817 	ldw	r2,-25312(gp)
  120ce0:	10800d43 	ldbu	r2,53(r2)
  120ce4:	0084303a 	nor	r2,zero,r2
  120ce8:	2084703a 	and	r2,r4,r2
  120cec:	1009883a 	mov	r4,r2
  120cf0:	d0a74544 	addi	r2,gp,-25323
  120cf4:	1885883a 	add	r2,r3,r2
  120cf8:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
  120cfc:	e0fffd03 	ldbu	r3,-12(fp)
  120d00:	d0a74544 	addi	r2,gp,-25323
  120d04:	1885883a 	add	r2,r3,r2
  120d08:	10800003 	ldbu	r2,0(r2)
  120d0c:	10803fcc 	andi	r2,r2,255
  120d10:	1000071e 	bne	r2,zero,120d30 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  120d14:	d0a74817 	ldw	r2,-25312(gp)
  120d18:	10800d83 	ldbu	r2,54(r2)
  120d1c:	0084303a 	nor	r2,zero,r2
  120d20:	1007883a 	mov	r3,r2
  120d24:	d0a74503 	ldbu	r2,-25324(gp)
  120d28:	1884703a 	and	r2,r3,r2
  120d2c:	d0a74505 	stb	r2,-25324(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  120d30:	d0a74817 	ldw	r2,-25312(gp)
  120d34:	e0ffff0b 	ldhu	r3,-4(fp)
  120d38:	10c00b8d 	sth	r3,46(r2)
  120d3c:	e0bffb17 	ldw	r2,-20(fp)
  120d40:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  120d44:	e0bffc17 	ldw	r2,-16(fp)
  120d48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  120d4c:	011b2c00 	call	11b2c0 <OS_Sched>
  120d50:	00000106 	br	120d58 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
  120d54:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
  120d58:	e037883a 	mov	sp,fp
  120d5c:	dfc00117 	ldw	ra,4(sp)
  120d60:	df000017 	ldw	fp,0(sp)
  120d64:	dec00204 	addi	sp,sp,8
  120d68:	f800283a 	ret

00120d6c <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  120d6c:	defff704 	addi	sp,sp,-36
  120d70:	dfc00815 	stw	ra,32(sp)
  120d74:	df000715 	stw	fp,28(sp)
  120d78:	dc000615 	stw	r16,24(sp)
  120d7c:	df000704 	addi	fp,sp,28
  120d80:	2011883a 	mov	r8,r4
  120d84:	2809883a 	mov	r4,r5
  120d88:	3007883a 	mov	r3,r6
  120d8c:	3805883a 	mov	r2,r7
  120d90:	e23ffb05 	stb	r8,-20(fp)
  120d94:	e13ffc05 	stb	r4,-16(fp)
  120d98:	e0fffd05 	stb	r3,-12(fp)
  120d9c:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  120da0:	d0a74703 	ldbu	r2,-25316(gp)
  120da4:	10803fcc 	andi	r2,r2,255
  120da8:	10000226 	beq	r2,zero,120db4 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  120dac:	00801544 	movi	r2,85
  120db0:	00004706 	br	120ed0 <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  120db4:	e0bffb03 	ldbu	r2,-20(fp)
  120db8:	1000081e 	bne	r2,zero,120ddc <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
  120dbc:	e0bffc03 	ldbu	r2,-16(fp)
  120dc0:	1000061e 	bne	r2,zero,120ddc <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
  120dc4:	e0bffd03 	ldbu	r2,-12(fp)
  120dc8:	1000041e 	bne	r2,zero,120ddc <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
  120dcc:	e0bffe0b 	ldhu	r2,-8(fp)
  120dd0:	1000021e 	bne	r2,zero,120ddc <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
  120dd4:	00801504 	movi	r2,84
  120dd8:	00003d06 	br	120ed0 <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
  120ddc:	e0bffc03 	ldbu	r2,-16(fp)
  120de0:	10800f30 	cmpltui	r2,r2,60
  120de4:	1000021e 	bne	r2,zero,120df0 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  120de8:	00801444 	movi	r2,81
  120dec:	00003806 	br	120ed0 <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
  120df0:	e0bffd03 	ldbu	r2,-12(fp)
  120df4:	10800f30 	cmpltui	r2,r2,60
  120df8:	1000021e 	bne	r2,zero,120e04 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
  120dfc:	00801484 	movi	r2,82
  120e00:	00003306 	br	120ed0 <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
  120e04:	e0bffe0b 	ldhu	r2,-8(fp)
  120e08:	1080fa30 	cmpltui	r2,r2,1000
  120e0c:	1000021e 	bne	r2,zero,120e18 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
  120e10:	008014c4 	movi	r2,83
  120e14:	00002e06 	br	120ed0 <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  120e18:	e0bffb03 	ldbu	r2,-20(fp)
  120e1c:	01438404 	movi	r5,3600
  120e20:	1009883a 	mov	r4,r2
  120e24:	01160740 	call	116074 <__mulsi3>
  120e28:	1021883a 	mov	r16,r2
  120e2c:	e0bffc03 	ldbu	r2,-16(fp)
  120e30:	01400f04 	movi	r5,60
  120e34:	1009883a 	mov	r4,r2
  120e38:	01160740 	call	116074 <__mulsi3>
  120e3c:	8087883a 	add	r3,r16,r2
  120e40:	e0bffd03 	ldbu	r2,-12(fp)
  120e44:	1885883a 	add	r2,r3,r2
  120e48:	0140fa04 	movi	r5,1000
  120e4c:	1009883a 	mov	r4,r2
  120e50:	01160740 	call	116074 <__mulsi3>
  120e54:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
  120e58:	e0bffe0b 	ldhu	r2,-8(fp)
  120e5c:	0140fa04 	movi	r5,1000
  120e60:	1009883a 	mov	r4,r2
  120e64:	01160740 	call	116074 <__mulsi3>
  120e68:	0140fa04 	movi	r5,1000
  120e6c:	1009883a 	mov	r4,r2
  120e70:	0115fb80 	call	115fb8 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  120e74:	8085883a 	add	r2,r16,r2
  120e78:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  120e7c:	e0bffa17 	ldw	r2,-24(fp)
  120e80:	1004d43a 	srli	r2,r2,16
  120e84:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  120e88:	e0bffa17 	ldw	r2,-24(fp)
  120e8c:	10bfffcc 	andi	r2,r2,65535
  120e90:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  120e94:	e0bffa17 	ldw	r2,-24(fp)
  120e98:	10bfffcc 	andi	r2,r2,65535
  120e9c:	1009883a 	mov	r4,r2
  120ea0:	0120c680 	call	120c68 <OSTimeDly>
    while (loops > 0) {
  120ea4:	00000706 	br	120ec4 <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
  120ea8:	01200014 	movui	r4,32768
  120eac:	0120c680 	call	120c68 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  120eb0:	01200014 	movui	r4,32768
  120eb4:	0120c680 	call	120c68 <OSTimeDly>
        loops--;
  120eb8:	e0bff90b 	ldhu	r2,-28(fp)
  120ebc:	10bfffc4 	addi	r2,r2,-1
  120ec0:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  120ec4:	e0bff90b 	ldhu	r2,-28(fp)
  120ec8:	103ff71e 	bne	r2,zero,120ea8 <__alt_data_end+0xfffe0ea8>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  120ecc:	0005883a 	mov	r2,zero
}
  120ed0:	e6ffff04 	addi	sp,fp,-4
  120ed4:	dfc00217 	ldw	ra,8(sp)
  120ed8:	df000117 	ldw	fp,4(sp)
  120edc:	dc000017 	ldw	r16,0(sp)
  120ee0:	dec00304 	addi	sp,sp,12
  120ee4:	f800283a 	ret

00120ee8 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  120ee8:	defff504 	addi	sp,sp,-44
  120eec:	dfc00a15 	stw	ra,40(sp)
  120ef0:	df000915 	stw	fp,36(sp)
  120ef4:	df000904 	addi	fp,sp,36
  120ef8:	2005883a 	mov	r2,r4
  120efc:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  120f00:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  120f04:	e0bfff03 	ldbu	r2,-4(fp)
  120f08:	10800530 	cmpltui	r2,r2,20
  120f0c:	1000021e 	bne	r2,zero,120f18 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  120f10:	00800a84 	movi	r2,42
  120f14:	00006406 	br	1210a8 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  120f18:	0005303a 	rdctl	r2,status
  120f1c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  120f20:	e0fffe17 	ldw	r3,-8(fp)
  120f24:	00bfff84 	movi	r2,-2
  120f28:	1884703a 	and	r2,r3,r2
  120f2c:	1001703a 	wrctl	status,r2
  
  return context;
  120f30:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  120f34:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  120f38:	e0ffff03 	ldbu	r3,-4(fp)
  120f3c:	008004f4 	movhi	r2,19
  120f40:	10bb0204 	addi	r2,r2,-5112
  120f44:	18c7883a 	add	r3,r3,r3
  120f48:	18c7883a 	add	r3,r3,r3
  120f4c:	10c5883a 	add	r2,r2,r3
  120f50:	10800017 	ldw	r2,0(r2)
  120f54:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
  120f58:	e0bff917 	ldw	r2,-28(fp)
  120f5c:	1000061e 	bne	r2,zero,120f78 <OSTimeDlyResume+0x90>
  120f60:	e0bff717 	ldw	r2,-36(fp)
  120f64:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  120f68:	e0bff817 	ldw	r2,-32(fp)
  120f6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  120f70:	008010c4 	movi	r2,67
  120f74:	00004c06 	br	1210a8 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
  120f78:	e0bff917 	ldw	r2,-28(fp)
  120f7c:	10800058 	cmpnei	r2,r2,1
  120f80:	1000061e 	bne	r2,zero,120f9c <OSTimeDlyResume+0xb4>
  120f84:	e0bff717 	ldw	r2,-36(fp)
  120f88:	e0bffa15 	stw	r2,-24(fp)
  120f8c:	e0bffa17 	ldw	r2,-24(fp)
  120f90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  120f94:	008010c4 	movi	r2,67
  120f98:	00004306 	br	1210a8 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  120f9c:	e0bff917 	ldw	r2,-28(fp)
  120fa0:	10800b8b 	ldhu	r2,46(r2)
  120fa4:	10bfffcc 	andi	r2,r2,65535
  120fa8:	1000061e 	bne	r2,zero,120fc4 <OSTimeDlyResume+0xdc>
  120fac:	e0bff717 	ldw	r2,-36(fp)
  120fb0:	e0bffb15 	stw	r2,-20(fp)
  120fb4:	e0bffb17 	ldw	r2,-20(fp)
  120fb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  120fbc:	00801404 	movi	r2,80
  120fc0:	00003906 	br	1210a8 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  120fc4:	e0bff917 	ldw	r2,-28(fp)
  120fc8:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  120fcc:	e0bff917 	ldw	r2,-28(fp)
  120fd0:	10800c03 	ldbu	r2,48(r2)
  120fd4:	10803fcc 	andi	r2,r2,255
  120fd8:	10800dcc 	andi	r2,r2,55
  120fdc:	10000b26 	beq	r2,zero,12100c <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  120fe0:	e0bff917 	ldw	r2,-28(fp)
  120fe4:	10c00c03 	ldbu	r3,48(r2)
  120fe8:	00bff204 	movi	r2,-56
  120fec:	1884703a 	and	r2,r3,r2
  120ff0:	1007883a 	mov	r3,r2
  120ff4:	e0bff917 	ldw	r2,-28(fp)
  120ff8:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  120ffc:	e0bff917 	ldw	r2,-28(fp)
  121000:	00c00044 	movi	r3,1
  121004:	10c00c45 	stb	r3,49(r2)
  121008:	00000206 	br	121014 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  12100c:	e0bff917 	ldw	r2,-28(fp)
  121010:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  121014:	e0bff917 	ldw	r2,-28(fp)
  121018:	10800c03 	ldbu	r2,48(r2)
  12101c:	10803fcc 	andi	r2,r2,255
  121020:	1080020c 	andi	r2,r2,8
  121024:	10001b1e 	bne	r2,zero,121094 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  121028:	e0bff917 	ldw	r2,-28(fp)
  12102c:	10c00d83 	ldbu	r3,54(r2)
  121030:	d0a74503 	ldbu	r2,-25324(gp)
  121034:	1884b03a 	or	r2,r3,r2
  121038:	d0a74505 	stb	r2,-25324(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  12103c:	e0bff917 	ldw	r2,-28(fp)
  121040:	10800d03 	ldbu	r2,52(r2)
  121044:	10c03fcc 	andi	r3,r2,255
  121048:	e0bff917 	ldw	r2,-28(fp)
  12104c:	10800d03 	ldbu	r2,52(r2)
  121050:	11003fcc 	andi	r4,r2,255
  121054:	d0a74544 	addi	r2,gp,-25323
  121058:	2085883a 	add	r2,r4,r2
  12105c:	11000003 	ldbu	r4,0(r2)
  121060:	e0bff917 	ldw	r2,-28(fp)
  121064:	10800d43 	ldbu	r2,53(r2)
  121068:	2084b03a 	or	r2,r4,r2
  12106c:	1009883a 	mov	r4,r2
  121070:	d0a74544 	addi	r2,gp,-25323
  121074:	1885883a 	add	r2,r3,r2
  121078:	11000005 	stb	r4,0(r2)
  12107c:	e0bff717 	ldw	r2,-36(fp)
  121080:	e0bffc15 	stw	r2,-16(fp)
  121084:	e0bffc17 	ldw	r2,-16(fp)
  121088:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  12108c:	011b2c00 	call	11b2c0 <OS_Sched>
  121090:	00000406 	br	1210a4 <OSTimeDlyResume+0x1bc>
  121094:	e0bff717 	ldw	r2,-36(fp)
  121098:	e0bffd15 	stw	r2,-12(fp)
  12109c:	e0bffd17 	ldw	r2,-12(fp)
  1210a0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  1210a4:	0005883a 	mov	r2,zero
}
  1210a8:	e037883a 	mov	sp,fp
  1210ac:	dfc00117 	ldw	ra,4(sp)
  1210b0:	df000017 	ldw	fp,0(sp)
  1210b4:	dec00204 	addi	sp,sp,8
  1210b8:	f800283a 	ret

001210bc <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  1210bc:	defffb04 	addi	sp,sp,-20
  1210c0:	df000415 	stw	fp,16(sp)
  1210c4:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  1210c8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  1210cc:	0005303a 	rdctl	r2,status
  1210d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1210d4:	e0fffe17 	ldw	r3,-8(fp)
  1210d8:	00bfff84 	movi	r2,-2
  1210dc:	1884703a 	and	r2,r3,r2
  1210e0:	1001703a 	wrctl	status,r2
  
  return context;
  1210e4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  1210e8:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
  1210ec:	d0a74917 	ldw	r2,-25308(gp)
  1210f0:	e0bffd15 	stw	r2,-12(fp)
  1210f4:	e0bffc17 	ldw	r2,-16(fp)
  1210f8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1210fc:	e0bfff17 	ldw	r2,-4(fp)
  121100:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  121104:	e0bffd17 	ldw	r2,-12(fp)
}
  121108:	e037883a 	mov	sp,fp
  12110c:	df000017 	ldw	fp,0(sp)
  121110:	dec00104 	addi	sp,sp,4
  121114:	f800283a 	ret

00121118 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  121118:	defffb04 	addi	sp,sp,-20
  12111c:	df000415 	stw	fp,16(sp)
  121120:	df000404 	addi	fp,sp,16
  121124:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  121128:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  12112c:	0005303a 	rdctl	r2,status
  121130:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  121134:	e0fffd17 	ldw	r3,-12(fp)
  121138:	00bfff84 	movi	r2,-2
  12113c:	1884703a 	and	r2,r3,r2
  121140:	1001703a 	wrctl	status,r2
  
  return context;
  121144:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  121148:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
  12114c:	e0bfff17 	ldw	r2,-4(fp)
  121150:	d0a74915 	stw	r2,-25308(gp)
  121154:	e0bffc17 	ldw	r2,-16(fp)
  121158:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  12115c:	e0bffe17 	ldw	r2,-8(fp)
  121160:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  121164:	0001883a 	nop
  121168:	e037883a 	mov	sp,fp
  12116c:	df000017 	ldw	fp,0(sp)
  121170:	dec00104 	addi	sp,sp,4
  121174:	f800283a 	ret

00121178 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  121178:	defffd04 	addi	sp,sp,-12
  12117c:	dfc00215 	stw	ra,8(sp)
  121180:	df000115 	stw	fp,4(sp)
  121184:	df000104 	addi	fp,sp,4
  121188:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  12118c:	d1600a04 	addi	r5,gp,-32728
  121190:	e13fff17 	ldw	r4,-4(fp)
  121194:	01221e80 	call	1221e8 <alt_dev_llist_insert>
}
  121198:	e037883a 	mov	sp,fp
  12119c:	dfc00117 	ldw	ra,4(sp)
  1211a0:	df000017 	ldw	fp,0(sp)
  1211a4:	dec00204 	addi	sp,sp,8
  1211a8:	f800283a 	ret

001211ac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  1211ac:	defffd04 	addi	sp,sp,-12
  1211b0:	dfc00215 	stw	ra,8(sp)
  1211b4:	df000115 	stw	fp,4(sp)
  1211b8:	df000104 	addi	fp,sp,4
  1211bc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  1211c0:	0122b940 	call	122b94 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  1211c4:	00800044 	movi	r2,1
  1211c8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  1211cc:	0001883a 	nop
  1211d0:	e037883a 	mov	sp,fp
  1211d4:	dfc00117 	ldw	ra,4(sp)
  1211d8:	df000017 	ldw	fp,0(sp)
  1211dc:	dec00204 	addi	sp,sp,8
  1211e0:	f800283a 	ret

001211e4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  1211e4:	defffe04 	addi	sp,sp,-8
  1211e8:	dfc00115 	stw	ra,4(sp)
  1211ec:	df000015 	stw	fp,0(sp)
  1211f0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  1211f4:	01c0fa04 	movi	r7,1000
  1211f8:	01800044 	movi	r6,1
  1211fc:	000b883a 	mov	r5,zero
  121200:	0009883a 	mov	r4,zero
  121204:	0121fe40 	call	121fe4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  121208:	000d883a 	mov	r6,zero
  12120c:	000b883a 	mov	r5,zero
  121210:	010004b4 	movhi	r4,18
  121214:	21131b04 	addi	r4,r4,19564
  121218:	01213a40 	call	1213a4 <altera_avalon_jtag_uart_init>
  12121c:	010004b4 	movhi	r4,18
  121220:	21131104 	addi	r4,r4,19524
  121224:	01211780 	call	121178 <alt_dev_reg>
}
  121228:	0001883a 	nop
  12122c:	e037883a 	mov	sp,fp
  121230:	dfc00117 	ldw	ra,4(sp)
  121234:	df000017 	ldw	fp,0(sp)
  121238:	dec00204 	addi	sp,sp,8
  12123c:	f800283a 	ret

00121240 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  121240:	defffa04 	addi	sp,sp,-24
  121244:	dfc00515 	stw	ra,20(sp)
  121248:	df000415 	stw	fp,16(sp)
  12124c:	df000404 	addi	fp,sp,16
  121250:	e13ffd15 	stw	r4,-12(fp)
  121254:	e17ffe15 	stw	r5,-8(fp)
  121258:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  12125c:	e0bffd17 	ldw	r2,-12(fp)
  121260:	10800017 	ldw	r2,0(r2)
  121264:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  121268:	e0bffc17 	ldw	r2,-16(fp)
  12126c:	10c00a04 	addi	r3,r2,40
  121270:	e0bffd17 	ldw	r2,-12(fp)
  121274:	10800217 	ldw	r2,8(r2)
  121278:	100f883a 	mov	r7,r2
  12127c:	e1bfff17 	ldw	r6,-4(fp)
  121280:	e17ffe17 	ldw	r5,-8(fp)
  121284:	1809883a 	mov	r4,r3
  121288:	01219ec0 	call	1219ec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  12128c:	e037883a 	mov	sp,fp
  121290:	dfc00117 	ldw	ra,4(sp)
  121294:	df000017 	ldw	fp,0(sp)
  121298:	dec00204 	addi	sp,sp,8
  12129c:	f800283a 	ret

001212a0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  1212a0:	defffa04 	addi	sp,sp,-24
  1212a4:	dfc00515 	stw	ra,20(sp)
  1212a8:	df000415 	stw	fp,16(sp)
  1212ac:	df000404 	addi	fp,sp,16
  1212b0:	e13ffd15 	stw	r4,-12(fp)
  1212b4:	e17ffe15 	stw	r5,-8(fp)
  1212b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  1212bc:	e0bffd17 	ldw	r2,-12(fp)
  1212c0:	10800017 	ldw	r2,0(r2)
  1212c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  1212c8:	e0bffc17 	ldw	r2,-16(fp)
  1212cc:	10c00a04 	addi	r3,r2,40
  1212d0:	e0bffd17 	ldw	r2,-12(fp)
  1212d4:	10800217 	ldw	r2,8(r2)
  1212d8:	100f883a 	mov	r7,r2
  1212dc:	e1bfff17 	ldw	r6,-4(fp)
  1212e0:	e17ffe17 	ldw	r5,-8(fp)
  1212e4:	1809883a 	mov	r4,r3
  1212e8:	0121ca80 	call	121ca8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  1212ec:	e037883a 	mov	sp,fp
  1212f0:	dfc00117 	ldw	ra,4(sp)
  1212f4:	df000017 	ldw	fp,0(sp)
  1212f8:	dec00204 	addi	sp,sp,8
  1212fc:	f800283a 	ret

00121300 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  121300:	defffc04 	addi	sp,sp,-16
  121304:	dfc00315 	stw	ra,12(sp)
  121308:	df000215 	stw	fp,8(sp)
  12130c:	df000204 	addi	fp,sp,8
  121310:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  121314:	e0bfff17 	ldw	r2,-4(fp)
  121318:	10800017 	ldw	r2,0(r2)
  12131c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  121320:	e0bffe17 	ldw	r2,-8(fp)
  121324:	10c00a04 	addi	r3,r2,40
  121328:	e0bfff17 	ldw	r2,-4(fp)
  12132c:	10800217 	ldw	r2,8(r2)
  121330:	100b883a 	mov	r5,r2
  121334:	1809883a 	mov	r4,r3
  121338:	01218940 	call	121894 <altera_avalon_jtag_uart_close>
}
  12133c:	e037883a 	mov	sp,fp
  121340:	dfc00117 	ldw	ra,4(sp)
  121344:	df000017 	ldw	fp,0(sp)
  121348:	dec00204 	addi	sp,sp,8
  12134c:	f800283a 	ret

00121350 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  121350:	defffa04 	addi	sp,sp,-24
  121354:	dfc00515 	stw	ra,20(sp)
  121358:	df000415 	stw	fp,16(sp)
  12135c:	df000404 	addi	fp,sp,16
  121360:	e13ffd15 	stw	r4,-12(fp)
  121364:	e17ffe15 	stw	r5,-8(fp)
  121368:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  12136c:	e0bffd17 	ldw	r2,-12(fp)
  121370:	10800017 	ldw	r2,0(r2)
  121374:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  121378:	e0bffc17 	ldw	r2,-16(fp)
  12137c:	10800a04 	addi	r2,r2,40
  121380:	e1bfff17 	ldw	r6,-4(fp)
  121384:	e17ffe17 	ldw	r5,-8(fp)
  121388:	1009883a 	mov	r4,r2
  12138c:	01218fc0 	call	1218fc <altera_avalon_jtag_uart_ioctl>
}
  121390:	e037883a 	mov	sp,fp
  121394:	dfc00117 	ldw	ra,4(sp)
  121398:	df000017 	ldw	fp,0(sp)
  12139c:	dec00204 	addi	sp,sp,8
  1213a0:	f800283a 	ret

001213a4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  1213a4:	defff104 	addi	sp,sp,-60
  1213a8:	dfc00e15 	stw	ra,56(sp)
  1213ac:	df000d15 	stw	fp,52(sp)
  1213b0:	df000d04 	addi	fp,sp,52
  1213b4:	e13ff915 	stw	r4,-28(fp)
  1213b8:	e17ffa15 	stw	r5,-24(fp)
  1213bc:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  1213c0:	e0bff917 	ldw	r2,-28(fp)
  1213c4:	10800c04 	addi	r2,r2,48
  1213c8:	e0bff415 	stw	r2,-48(fp)
  1213cc:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  1213d0:	e0bff80b 	ldhu	r2,-32(fp)
  1213d4:	e0fff884 	addi	r3,fp,-30
  1213d8:	180b883a 	mov	r5,r3
  1213dc:	1009883a 	mov	r4,r2
  1213e0:	011be2c0 	call	11be2c <OSFlagCreate>
  1213e4:	1007883a 	mov	r3,r2
  1213e8:	e0bff417 	ldw	r2,-48(fp)
  1213ec:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  1213f0:	e0bff917 	ldw	r2,-28(fp)
  1213f4:	10800a04 	addi	r2,r2,40
  1213f8:	e0bff515 	stw	r2,-44(fp)
  1213fc:	00800044 	movi	r2,1
  121400:	e0bff78d 	sth	r2,-34(fp)
  121404:	e0bff78b 	ldhu	r2,-34(fp)
  121408:	1009883a 	mov	r4,r2
  12140c:	011eb4c0 	call	11eb4c <OSSemCreate>
  121410:	1007883a 	mov	r3,r2
  121414:	e0bff517 	ldw	r2,-44(fp)
  121418:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  12141c:	e0bff917 	ldw	r2,-28(fp)
  121420:	10800b04 	addi	r2,r2,44
  121424:	e0bff615 	stw	r2,-40(fp)
  121428:	00800044 	movi	r2,1
  12142c:	e0bff70d 	sth	r2,-36(fp)
  121430:	e0bff70b 	ldhu	r2,-36(fp)
  121434:	1009883a 	mov	r4,r2
  121438:	011eb4c0 	call	11eb4c <OSSemCreate>
  12143c:	1007883a 	mov	r3,r2
  121440:	e0bff617 	ldw	r2,-40(fp)
  121444:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  121448:	e0bff917 	ldw	r2,-28(fp)
  12144c:	00c00044 	movi	r3,1
  121450:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  121454:	e0bff917 	ldw	r2,-28(fp)
  121458:	10800017 	ldw	r2,0(r2)
  12145c:	10800104 	addi	r2,r2,4
  121460:	1007883a 	mov	r3,r2
  121464:	e0bff917 	ldw	r2,-28(fp)
  121468:	10800817 	ldw	r2,32(r2)
  12146c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  121470:	e0bffa17 	ldw	r2,-24(fp)
  121474:	e0fffb17 	ldw	r3,-20(fp)
  121478:	d8000015 	stw	zero,0(sp)
  12147c:	e1fff917 	ldw	r7,-28(fp)
  121480:	018004b4 	movhi	r6,18
  121484:	31853b04 	addi	r6,r6,5356
  121488:	180b883a 	mov	r5,r3
  12148c:	1009883a 	mov	r4,r2
  121490:	012236c0 	call	12236c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  121494:	e0bff917 	ldw	r2,-28(fp)
  121498:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  12149c:	e0bff917 	ldw	r2,-28(fp)
  1214a0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  1214a4:	d0e74e17 	ldw	r3,-25288(gp)
  1214a8:	e1fff917 	ldw	r7,-28(fp)
  1214ac:	018004b4 	movhi	r6,18
  1214b0:	3185e404 	addi	r6,r6,6032
  1214b4:	180b883a 	mov	r5,r3
  1214b8:	1009883a 	mov	r4,r2
  1214bc:	01220600 	call	122060 <alt_alarm_start>
  1214c0:	1000040e 	bge	r2,zero,1214d4 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  1214c4:	e0fff917 	ldw	r3,-28(fp)
  1214c8:	00a00034 	movhi	r2,32768
  1214cc:	10bfffc4 	addi	r2,r2,-1
  1214d0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  1214d4:	0001883a 	nop
  1214d8:	e037883a 	mov	sp,fp
  1214dc:	dfc00117 	ldw	ra,4(sp)
  1214e0:	df000017 	ldw	fp,0(sp)
  1214e4:	dec00204 	addi	sp,sp,8
  1214e8:	f800283a 	ret

001214ec <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  1214ec:	defff204 	addi	sp,sp,-56
  1214f0:	dfc00d15 	stw	ra,52(sp)
  1214f4:	df000c15 	stw	fp,48(sp)
  1214f8:	df000c04 	addi	fp,sp,48
  1214fc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  121500:	e0bfff17 	ldw	r2,-4(fp)
  121504:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
  121508:	e0bff617 	ldw	r2,-40(fp)
  12150c:	10800017 	ldw	r2,0(r2)
  121510:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  121514:	e0bff717 	ldw	r2,-36(fp)
  121518:	10800104 	addi	r2,r2,4
  12151c:	10800037 	ldwio	r2,0(r2)
  121520:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  121524:	e0bff817 	ldw	r2,-32(fp)
  121528:	1080c00c 	andi	r2,r2,768
  12152c:	10009126 	beq	r2,zero,121774 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  121530:	e0bff817 	ldw	r2,-32(fp)
  121534:	1080400c 	andi	r2,r2,256
  121538:	10004726 	beq	r2,zero,121658 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  12153c:	00800074 	movhi	r2,1
  121540:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  121544:	e0bff617 	ldw	r2,-40(fp)
  121548:	10800d17 	ldw	r2,52(r2)
  12154c:	10800044 	addi	r2,r2,1
  121550:	1081ffcc 	andi	r2,r2,2047
  121554:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  121558:	e0bff617 	ldw	r2,-40(fp)
  12155c:	10c00e17 	ldw	r3,56(r2)
  121560:	e0bff917 	ldw	r2,-28(fp)
  121564:	18802726 	beq	r3,r2,121604 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  121568:	e0bff717 	ldw	r2,-36(fp)
  12156c:	10800037 	ldwio	r2,0(r2)
  121570:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  121574:	e0bff417 	ldw	r2,-48(fp)
  121578:	10a0000c 	andi	r2,r2,32768
  12157c:	10002326 	beq	r2,zero,12160c <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  121580:	e0bff617 	ldw	r2,-40(fp)
  121584:	10800d17 	ldw	r2,52(r2)
  121588:	e0fff417 	ldw	r3,-48(fp)
  12158c:	1809883a 	mov	r4,r3
  121590:	e0fff617 	ldw	r3,-40(fp)
  121594:	1885883a 	add	r2,r3,r2
  121598:	10801104 	addi	r2,r2,68
  12159c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  1215a0:	e0bff617 	ldw	r2,-40(fp)
  1215a4:	10800d17 	ldw	r2,52(r2)
  1215a8:	10800044 	addi	r2,r2,1
  1215ac:	10c1ffcc 	andi	r3,r2,2047
  1215b0:	e0bff617 	ldw	r2,-40(fp)
  1215b4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  1215b8:	e0bff617 	ldw	r2,-40(fp)
  1215bc:	10800c17 	ldw	r2,48(r2)
  1215c0:	e0bffb15 	stw	r2,-20(fp)
  1215c4:	00800044 	movi	r2,1
  1215c8:	e0bffc0d 	sth	r2,-16(fp)
  1215cc:	00800044 	movi	r2,1
  1215d0:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  1215d4:	d0a73943 	ldbu	r2,-25371(gp)
  1215d8:	10803fcc 	andi	r2,r2,255
  1215dc:	103fd926 	beq	r2,zero,121544 <__alt_data_end+0xfffe1544>
  {
    OSFlagPost (group, flags, opt, &err);
  1215e0:	e0bffc0b 	ldhu	r2,-16(fp)
  1215e4:	e0fffc83 	ldbu	r3,-14(fp)
  1215e8:	e13ffdc4 	addi	r4,fp,-9
  1215ec:	200f883a 	mov	r7,r4
  1215f0:	180d883a 	mov	r6,r3
  1215f4:	100b883a 	mov	r5,r2
  1215f8:	e13ffb17 	ldw	r4,-20(fp)
  1215fc:	011ca080 	call	11ca08 <OSFlagPost>
      }
  121600:	003fd006 	br	121544 <__alt_data_end+0xfffe1544>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  121604:	0001883a 	nop
  121608:	00000106 	br	121610 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  12160c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  121610:	e0bff417 	ldw	r2,-48(fp)
  121614:	10bfffec 	andhi	r2,r2,65535
  121618:	10000f26 	beq	r2,zero,121658 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  12161c:	e0bff617 	ldw	r2,-40(fp)
  121620:	10c00817 	ldw	r3,32(r2)
  121624:	00bfff84 	movi	r2,-2
  121628:	1886703a 	and	r3,r3,r2
  12162c:	e0bff617 	ldw	r2,-40(fp)
  121630:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  121634:	e0bff717 	ldw	r2,-36(fp)
  121638:	10800104 	addi	r2,r2,4
  12163c:	1007883a 	mov	r3,r2
  121640:	e0bff617 	ldw	r2,-40(fp)
  121644:	10800817 	ldw	r2,32(r2)
  121648:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  12164c:	e0bff717 	ldw	r2,-36(fp)
  121650:	10800104 	addi	r2,r2,4
  121654:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  121658:	e0bff817 	ldw	r2,-32(fp)
  12165c:	1080800c 	andi	r2,r2,512
  121660:	103fac26 	beq	r2,zero,121514 <__alt_data_end+0xfffe1514>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  121664:	e0bff817 	ldw	r2,-32(fp)
  121668:	1004d43a 	srli	r2,r2,16
  12166c:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  121670:	00002606 	br	12170c <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  121674:	e0bff717 	ldw	r2,-36(fp)
  121678:	e0fff617 	ldw	r3,-40(fp)
  12167c:	18c01017 	ldw	r3,64(r3)
  121680:	e13ff617 	ldw	r4,-40(fp)
  121684:	20c7883a 	add	r3,r4,r3
  121688:	18c21104 	addi	r3,r3,2116
  12168c:	18c00003 	ldbu	r3,0(r3)
  121690:	18c03fcc 	andi	r3,r3,255
  121694:	18c0201c 	xori	r3,r3,128
  121698:	18ffe004 	addi	r3,r3,-128
  12169c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  1216a0:	e0bff617 	ldw	r2,-40(fp)
  1216a4:	10801017 	ldw	r2,64(r2)
  1216a8:	10800044 	addi	r2,r2,1
  1216ac:	10c1ffcc 	andi	r3,r2,2047
  1216b0:	e0bff617 	ldw	r2,-40(fp)
  1216b4:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  1216b8:	e0bff617 	ldw	r2,-40(fp)
  1216bc:	10800c17 	ldw	r2,48(r2)
  1216c0:	e0bffa15 	stw	r2,-24(fp)
  1216c4:	00800084 	movi	r2,2
  1216c8:	e0bffd0d 	sth	r2,-12(fp)
  1216cc:	00800044 	movi	r2,1
  1216d0:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  1216d4:	d0a73943 	ldbu	r2,-25371(gp)
  1216d8:	10803fcc 	andi	r2,r2,255
  1216dc:	10000826 	beq	r2,zero,121700 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
  1216e0:	e0bffd0b 	ldhu	r2,-12(fp)
  1216e4:	e0fffd83 	ldbu	r3,-10(fp)
  1216e8:	e13ffe04 	addi	r4,fp,-8
  1216ec:	200f883a 	mov	r7,r4
  1216f0:	180d883a 	mov	r6,r3
  1216f4:	100b883a 	mov	r5,r2
  1216f8:	e13ffa17 	ldw	r4,-24(fp)
  1216fc:	011ca080 	call	11ca08 <OSFlagPost>

        space--;
  121700:	e0bff517 	ldw	r2,-44(fp)
  121704:	10bfffc4 	addi	r2,r2,-1
  121708:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  12170c:	e0bff517 	ldw	r2,-44(fp)
  121710:	10000526 	beq	r2,zero,121728 <altera_avalon_jtag_uart_irq+0x23c>
  121714:	e0bff617 	ldw	r2,-40(fp)
  121718:	10c01017 	ldw	r3,64(r2)
  12171c:	e0bff617 	ldw	r2,-40(fp)
  121720:	10800f17 	ldw	r2,60(r2)
  121724:	18bfd31e 	bne	r3,r2,121674 <__alt_data_end+0xfffe1674>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  121728:	e0bff517 	ldw	r2,-44(fp)
  12172c:	103f7926 	beq	r2,zero,121514 <__alt_data_end+0xfffe1514>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  121730:	e0bff617 	ldw	r2,-40(fp)
  121734:	10c00817 	ldw	r3,32(r2)
  121738:	00bfff44 	movi	r2,-3
  12173c:	1886703a 	and	r3,r3,r2
  121740:	e0bff617 	ldw	r2,-40(fp)
  121744:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  121748:	e0bff617 	ldw	r2,-40(fp)
  12174c:	10800017 	ldw	r2,0(r2)
  121750:	10800104 	addi	r2,r2,4
  121754:	1007883a 	mov	r3,r2
  121758:	e0bff617 	ldw	r2,-40(fp)
  12175c:	10800817 	ldw	r2,32(r2)
  121760:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  121764:	e0bff717 	ldw	r2,-36(fp)
  121768:	10800104 	addi	r2,r2,4
  12176c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  121770:	003f6806 	br	121514 <__alt_data_end+0xfffe1514>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  121774:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  121778:	0001883a 	nop
  12177c:	e037883a 	mov	sp,fp
  121780:	dfc00117 	ldw	ra,4(sp)
  121784:	df000017 	ldw	fp,0(sp)
  121788:	dec00204 	addi	sp,sp,8
  12178c:	f800283a 	ret

00121790 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  121790:	defff904 	addi	sp,sp,-28
  121794:	dfc00615 	stw	ra,24(sp)
  121798:	df000515 	stw	fp,20(sp)
  12179c:	df000504 	addi	fp,sp,20
  1217a0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  1217a4:	e0bfff17 	ldw	r2,-4(fp)
  1217a8:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  1217ac:	e0bffb17 	ldw	r2,-20(fp)
  1217b0:	10800017 	ldw	r2,0(r2)
  1217b4:	10800104 	addi	r2,r2,4
  1217b8:	10800037 	ldwio	r2,0(r2)
  1217bc:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  1217c0:	e0bffc17 	ldw	r2,-16(fp)
  1217c4:	1081000c 	andi	r2,r2,1024
  1217c8:	10000b26 	beq	r2,zero,1217f8 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  1217cc:	e0bffb17 	ldw	r2,-20(fp)
  1217d0:	10800017 	ldw	r2,0(r2)
  1217d4:	10800104 	addi	r2,r2,4
  1217d8:	1007883a 	mov	r3,r2
  1217dc:	e0bffb17 	ldw	r2,-20(fp)
  1217e0:	10800817 	ldw	r2,32(r2)
  1217e4:	10810014 	ori	r2,r2,1024
  1217e8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  1217ec:	e0bffb17 	ldw	r2,-20(fp)
  1217f0:	10000915 	stw	zero,36(r2)
  1217f4:	00002106 	br	12187c <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  1217f8:	e0bffb17 	ldw	r2,-20(fp)
  1217fc:	10c00917 	ldw	r3,36(r2)
  121800:	00a00034 	movhi	r2,32768
  121804:	10bfff04 	addi	r2,r2,-4
  121808:	10c01c36 	bltu	r2,r3,12187c <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
  12180c:	e0bffb17 	ldw	r2,-20(fp)
  121810:	10800917 	ldw	r2,36(r2)
  121814:	10c00044 	addi	r3,r2,1
  121818:	e0bffb17 	ldw	r2,-20(fp)
  12181c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  121820:	e0bffb17 	ldw	r2,-20(fp)
  121824:	10c00917 	ldw	r3,36(r2)
  121828:	e0bffb17 	ldw	r2,-20(fp)
  12182c:	10800117 	ldw	r2,4(r2)
  121830:	18801236 	bltu	r3,r2,12187c <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  121834:	e0bffb17 	ldw	r2,-20(fp)
  121838:	10800c17 	ldw	r2,48(r2)
  12183c:	e0bffd15 	stw	r2,-12(fp)
  121840:	00800104 	movi	r2,4
  121844:	e0bffe0d 	sth	r2,-8(fp)
  121848:	00800044 	movi	r2,1
  12184c:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  121850:	d0a73943 	ldbu	r2,-25371(gp)
  121854:	10803fcc 	andi	r2,r2,255
  121858:	10000826 	beq	r2,zero,12187c <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
  12185c:	e0bffe0b 	ldhu	r2,-8(fp)
  121860:	e0fffe83 	ldbu	r3,-6(fp)
  121864:	e13ffec4 	addi	r4,fp,-5
  121868:	200f883a 	mov	r7,r4
  12186c:	180d883a 	mov	r6,r3
  121870:	100b883a 	mov	r5,r2
  121874:	e13ffd17 	ldw	r4,-12(fp)
  121878:	011ca080 	call	11ca08 <OSFlagPost>
  12187c:	d0a74e17 	ldw	r2,-25288(gp)
    }
  }

  return alt_ticks_per_second();
}
  121880:	e037883a 	mov	sp,fp
  121884:	dfc00117 	ldw	ra,4(sp)
  121888:	df000017 	ldw	fp,0(sp)
  12188c:	dec00204 	addi	sp,sp,8
  121890:	f800283a 	ret

00121894 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  121894:	defffd04 	addi	sp,sp,-12
  121898:	df000215 	stw	fp,8(sp)
  12189c:	df000204 	addi	fp,sp,8
  1218a0:	e13ffe15 	stw	r4,-8(fp)
  1218a4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  1218a8:	00000506 	br	1218c0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  1218ac:	e0bfff17 	ldw	r2,-4(fp)
  1218b0:	1090000c 	andi	r2,r2,16384
  1218b4:	10000226 	beq	r2,zero,1218c0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  1218b8:	00bffd44 	movi	r2,-11
  1218bc:	00000b06 	br	1218ec <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  1218c0:	e0bffe17 	ldw	r2,-8(fp)
  1218c4:	10c01017 	ldw	r3,64(r2)
  1218c8:	e0bffe17 	ldw	r2,-8(fp)
  1218cc:	10800f17 	ldw	r2,60(r2)
  1218d0:	18800526 	beq	r3,r2,1218e8 <altera_avalon_jtag_uart_close+0x54>
  1218d4:	e0bffe17 	ldw	r2,-8(fp)
  1218d8:	10c00917 	ldw	r3,36(r2)
  1218dc:	e0bffe17 	ldw	r2,-8(fp)
  1218e0:	10800117 	ldw	r2,4(r2)
  1218e4:	18bff136 	bltu	r3,r2,1218ac <__alt_data_end+0xfffe18ac>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  1218e8:	0005883a 	mov	r2,zero
}
  1218ec:	e037883a 	mov	sp,fp
  1218f0:	df000017 	ldw	fp,0(sp)
  1218f4:	dec00104 	addi	sp,sp,4
  1218f8:	f800283a 	ret

001218fc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  1218fc:	defffa04 	addi	sp,sp,-24
  121900:	df000515 	stw	fp,20(sp)
  121904:	df000504 	addi	fp,sp,20
  121908:	e13ffd15 	stw	r4,-12(fp)
  12190c:	e17ffe15 	stw	r5,-8(fp)
  121910:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  121914:	00bff9c4 	movi	r2,-25
  121918:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  12191c:	e0bffe17 	ldw	r2,-8(fp)
  121920:	10da8060 	cmpeqi	r3,r2,27137
  121924:	1800031e 	bne	r3,zero,121934 <altera_avalon_jtag_uart_ioctl+0x38>
  121928:	109a80a0 	cmpeqi	r2,r2,27138
  12192c:	1000181e 	bne	r2,zero,121990 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  121930:	00002906 	br	1219d8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  121934:	e0bffd17 	ldw	r2,-12(fp)
  121938:	10c00117 	ldw	r3,4(r2)
  12193c:	00a00034 	movhi	r2,32768
  121940:	10bfffc4 	addi	r2,r2,-1
  121944:	18802126 	beq	r3,r2,1219cc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  121948:	e0bfff17 	ldw	r2,-4(fp)
  12194c:	10800017 	ldw	r2,0(r2)
  121950:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  121954:	e0bffc17 	ldw	r2,-16(fp)
  121958:	10800090 	cmplti	r2,r2,2
  12195c:	1000061e 	bne	r2,zero,121978 <altera_avalon_jtag_uart_ioctl+0x7c>
  121960:	e0fffc17 	ldw	r3,-16(fp)
  121964:	00a00034 	movhi	r2,32768
  121968:	10bfffc4 	addi	r2,r2,-1
  12196c:	18800226 	beq	r3,r2,121978 <altera_avalon_jtag_uart_ioctl+0x7c>
  121970:	e0bffc17 	ldw	r2,-16(fp)
  121974:	00000206 	br	121980 <altera_avalon_jtag_uart_ioctl+0x84>
  121978:	00a00034 	movhi	r2,32768
  12197c:	10bfff84 	addi	r2,r2,-2
  121980:	e0fffd17 	ldw	r3,-12(fp)
  121984:	18800115 	stw	r2,4(r3)
      rc = 0;
  121988:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  12198c:	00000f06 	br	1219cc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  121990:	e0bffd17 	ldw	r2,-12(fp)
  121994:	10c00117 	ldw	r3,4(r2)
  121998:	00a00034 	movhi	r2,32768
  12199c:	10bfffc4 	addi	r2,r2,-1
  1219a0:	18800c26 	beq	r3,r2,1219d4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  1219a4:	e0bffd17 	ldw	r2,-12(fp)
  1219a8:	10c00917 	ldw	r3,36(r2)
  1219ac:	e0bffd17 	ldw	r2,-12(fp)
  1219b0:	10800117 	ldw	r2,4(r2)
  1219b4:	1885803a 	cmpltu	r2,r3,r2
  1219b8:	10c03fcc 	andi	r3,r2,255
  1219bc:	e0bfff17 	ldw	r2,-4(fp)
  1219c0:	10c00015 	stw	r3,0(r2)
      rc = 0;
  1219c4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  1219c8:	00000206 	br	1219d4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  1219cc:	0001883a 	nop
  1219d0:	00000106 	br	1219d8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  1219d4:	0001883a 	nop

  default:
    break;
  }

  return rc;
  1219d8:	e0bffb17 	ldw	r2,-20(fp)
}
  1219dc:	e037883a 	mov	sp,fp
  1219e0:	df000017 	ldw	fp,0(sp)
  1219e4:	dec00104 	addi	sp,sp,4
  1219e8:	f800283a 	ret

001219ec <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  1219ec:	deffed04 	addi	sp,sp,-76
  1219f0:	dfc01215 	stw	ra,72(sp)
  1219f4:	df001115 	stw	fp,68(sp)
  1219f8:	df001104 	addi	fp,sp,68
  1219fc:	e13ffc15 	stw	r4,-16(fp)
  121a00:	e17ffd15 	stw	r5,-12(fp)
  121a04:	e1bffe15 	stw	r6,-8(fp)
  121a08:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  121a0c:	e0bffd17 	ldw	r2,-12(fp)
  121a10:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  121a14:	e0bffc17 	ldw	r2,-16(fp)
  121a18:	10800a17 	ldw	r2,40(r2)
  121a1c:	e0bff815 	stw	r2,-32(fp)
  121a20:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  121a24:	e0bff90b 	ldhu	r2,-28(fp)
  121a28:	e0fffb04 	addi	r3,fp,-20
  121a2c:	180d883a 	mov	r6,r3
  121a30:	100b883a 	mov	r5,r2
  121a34:	e13ff817 	ldw	r4,-32(fp)
  121a38:	011ee640 	call	11ee64 <OSSemPend>

  while (space > 0)
  121a3c:	00006106 	br	121bc4 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  121a40:	e0bffc17 	ldw	r2,-16(fp)
  121a44:	10800d17 	ldw	r2,52(r2)
  121a48:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
  121a4c:	e0bffc17 	ldw	r2,-16(fp)
  121a50:	10800e17 	ldw	r2,56(r2)
  121a54:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
  121a58:	e0fff317 	ldw	r3,-52(fp)
  121a5c:	e0bff417 	ldw	r2,-48(fp)
  121a60:	18800536 	bltu	r3,r2,121a78 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
  121a64:	e0fff317 	ldw	r3,-52(fp)
  121a68:	e0bff417 	ldw	r2,-48(fp)
  121a6c:	1885c83a 	sub	r2,r3,r2
  121a70:	e0bff115 	stw	r2,-60(fp)
  121a74:	00000406 	br	121a88 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  121a78:	00c20004 	movi	r3,2048
  121a7c:	e0bff417 	ldw	r2,-48(fp)
  121a80:	1885c83a 	sub	r2,r3,r2
  121a84:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
  121a88:	e0bff117 	ldw	r2,-60(fp)
  121a8c:	10001e26 	beq	r2,zero,121b08 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  121a90:	e0fffe17 	ldw	r3,-8(fp)
  121a94:	e0bff117 	ldw	r2,-60(fp)
  121a98:	1880022e 	bgeu	r3,r2,121aa4 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
  121a9c:	e0bffe17 	ldw	r2,-8(fp)
  121aa0:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  121aa4:	e0bffc17 	ldw	r2,-16(fp)
  121aa8:	10c01104 	addi	r3,r2,68
  121aac:	e0bff417 	ldw	r2,-48(fp)
  121ab0:	1885883a 	add	r2,r3,r2
  121ab4:	e1bff117 	ldw	r6,-60(fp)
  121ab8:	100b883a 	mov	r5,r2
  121abc:	e13ff017 	ldw	r4,-64(fp)
  121ac0:	01027180 	call	102718 <memcpy>
      ptr   += n;
  121ac4:	e0fff017 	ldw	r3,-64(fp)
  121ac8:	e0bff117 	ldw	r2,-60(fp)
  121acc:	1885883a 	add	r2,r3,r2
  121ad0:	e0bff015 	stw	r2,-64(fp)
      space -= n;
  121ad4:	e0fffe17 	ldw	r3,-8(fp)
  121ad8:	e0bff117 	ldw	r2,-60(fp)
  121adc:	1885c83a 	sub	r2,r3,r2
  121ae0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  121ae4:	e0fff417 	ldw	r3,-48(fp)
  121ae8:	e0bff117 	ldw	r2,-60(fp)
  121aec:	1885883a 	add	r2,r3,r2
  121af0:	10c1ffcc 	andi	r3,r2,2047
  121af4:	e0bffc17 	ldw	r2,-16(fp)
  121af8:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  121afc:	e0bffe17 	ldw	r2,-8(fp)
  121b00:	00bfcf16 	blt	zero,r2,121a40 <__alt_data_end+0xfffe1a40>
  121b04:	00000106 	br	121b0c <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  121b08:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  121b0c:	e0fff017 	ldw	r3,-64(fp)
  121b10:	e0bffd17 	ldw	r2,-12(fp)
  121b14:	18802e1e 	bne	r3,r2,121bd0 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  121b18:	e0bfff17 	ldw	r2,-4(fp)
  121b1c:	1090000c 	andi	r2,r2,16384
  121b20:	10002d1e 	bne	r2,zero,121bd8 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  121b24:	d0a73943 	ldbu	r2,-25371(gp)
  121b28:	10803fcc 	andi	r2,r2,255
  121b2c:	10800058 	cmpnei	r2,r2,1
  121b30:	1000161e 	bne	r2,zero,121b8c <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  121b34:	e0bffc17 	ldw	r2,-16(fp)
  121b38:	10800c17 	ldw	r2,48(r2)
  121b3c:	e0bff215 	stw	r2,-56(fp)
  121b40:	00800144 	movi	r2,5
  121b44:	e0bff98d 	sth	r2,-26(fp)
  121b48:	00bfe0c4 	movi	r2,-125
  121b4c:	e0bffa05 	stb	r2,-24(fp)
  121b50:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  121b54:	d0a73943 	ldbu	r2,-25371(gp)
  121b58:	10803fcc 	andi	r2,r2,255
  121b5c:	10001526 	beq	r2,zero,121bb4 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  121b60:	e0fff98b 	ldhu	r3,-26(fp)
  121b64:	e13ffa03 	ldbu	r4,-24(fp)
  121b68:	e17ffa8b 	ldhu	r5,-22(fp)
  121b6c:	e0bffb44 	addi	r2,fp,-19
  121b70:	d8800015 	stw	r2,0(sp)
  121b74:	280f883a 	mov	r7,r5
  121b78:	200d883a 	mov	r6,r4
  121b7c:	180b883a 	mov	r5,r3
  121b80:	e13ff217 	ldw	r4,-56(fp)
  121b84:	011c3f00 	call	11c3f0 <OSFlagPend>
  121b88:	00000a06 	br	121bb4 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  121b8c:	0001883a 	nop
  121b90:	e0bffc17 	ldw	r2,-16(fp)
  121b94:	10c00d17 	ldw	r3,52(r2)
  121b98:	e0bff317 	ldw	r2,-52(fp)
  121b9c:	1880051e 	bne	r3,r2,121bb4 <altera_avalon_jtag_uart_read+0x1c8>
  121ba0:	e0bffc17 	ldw	r2,-16(fp)
  121ba4:	10c00917 	ldw	r3,36(r2)
  121ba8:	e0bffc17 	ldw	r2,-16(fp)
  121bac:	10800117 	ldw	r2,4(r2)
  121bb0:	18bff736 	bltu	r3,r2,121b90 <__alt_data_end+0xfffe1b90>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  121bb4:	e0bffc17 	ldw	r2,-16(fp)
  121bb8:	10c00d17 	ldw	r3,52(r2)
  121bbc:	e0bff317 	ldw	r2,-52(fp)
  121bc0:	18800726 	beq	r3,r2,121be0 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  121bc4:	e0bffe17 	ldw	r2,-8(fp)
  121bc8:	00bf9d16 	blt	zero,r2,121a40 <__alt_data_end+0xfffe1a40>
  121bcc:	00000506 	br	121be4 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  121bd0:	0001883a 	nop
  121bd4:	00000306 	br	121be4 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  121bd8:	0001883a 	nop
  121bdc:	00000106 	br	121be4 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  121be0:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  121be4:	e0bffc17 	ldw	r2,-16(fp)
  121be8:	10800a17 	ldw	r2,40(r2)
  121bec:	1009883a 	mov	r4,r2
  121bf0:	011f1dc0 	call	11f1dc <OSSemPost>

  if (ptr != buffer)
  121bf4:	e0fff017 	ldw	r3,-64(fp)
  121bf8:	e0bffd17 	ldw	r2,-12(fp)
  121bfc:	18801826 	beq	r3,r2,121c60 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  121c00:	0005303a 	rdctl	r2,status
  121c04:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  121c08:	e0fff717 	ldw	r3,-36(fp)
  121c0c:	00bfff84 	movi	r2,-2
  121c10:	1884703a 	and	r2,r3,r2
  121c14:	1001703a 	wrctl	status,r2
  
  return context;
  121c18:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  121c1c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  121c20:	e0bffc17 	ldw	r2,-16(fp)
  121c24:	10800817 	ldw	r2,32(r2)
  121c28:	10c00054 	ori	r3,r2,1
  121c2c:	e0bffc17 	ldw	r2,-16(fp)
  121c30:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  121c34:	e0bffc17 	ldw	r2,-16(fp)
  121c38:	10800017 	ldw	r2,0(r2)
  121c3c:	10800104 	addi	r2,r2,4
  121c40:	1007883a 	mov	r3,r2
  121c44:	e0bffc17 	ldw	r2,-16(fp)
  121c48:	10800817 	ldw	r2,32(r2)
  121c4c:	18800035 	stwio	r2,0(r3)
  121c50:	e0bff617 	ldw	r2,-40(fp)
  121c54:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  121c58:	e0bff517 	ldw	r2,-44(fp)
  121c5c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  121c60:	e0fff017 	ldw	r3,-64(fp)
  121c64:	e0bffd17 	ldw	r2,-12(fp)
  121c68:	18800426 	beq	r3,r2,121c7c <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
  121c6c:	e0fff017 	ldw	r3,-64(fp)
  121c70:	e0bffd17 	ldw	r2,-12(fp)
  121c74:	1885c83a 	sub	r2,r3,r2
  121c78:	00000606 	br	121c94 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  121c7c:	e0bfff17 	ldw	r2,-4(fp)
  121c80:	1090000c 	andi	r2,r2,16384
  121c84:	10000226 	beq	r2,zero,121c90 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
  121c88:	00bffd44 	movi	r2,-11
  121c8c:	00000106 	br	121c94 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  121c90:	00bffec4 	movi	r2,-5
}
  121c94:	e037883a 	mov	sp,fp
  121c98:	dfc00117 	ldw	ra,4(sp)
  121c9c:	df000017 	ldw	fp,0(sp)
  121ca0:	dec00204 	addi	sp,sp,8
  121ca4:	f800283a 	ret

00121ca8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  121ca8:	deffed04 	addi	sp,sp,-76
  121cac:	dfc01215 	stw	ra,72(sp)
  121cb0:	df001115 	stw	fp,68(sp)
  121cb4:	df001104 	addi	fp,sp,68
  121cb8:	e13ffc15 	stw	r4,-16(fp)
  121cbc:	e17ffd15 	stw	r5,-12(fp)
  121cc0:	e1bffe15 	stw	r6,-8(fp)
  121cc4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  121cc8:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  121ccc:	e0bffd17 	ldw	r2,-12(fp)
  121cd0:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  121cd4:	e0bffc17 	ldw	r2,-16(fp)
  121cd8:	10800b17 	ldw	r2,44(r2)
  121cdc:	e0bff815 	stw	r2,-32(fp)
  121ce0:	e03ff90d 	sth	zero,-28(fp)
  121ce4:	e0bff90b 	ldhu	r2,-28(fp)
  121ce8:	e0fffb44 	addi	r3,fp,-19
  121cec:	180d883a 	mov	r6,r3
  121cf0:	100b883a 	mov	r5,r2
  121cf4:	e13ff817 	ldw	r4,-32(fp)
  121cf8:	011ee640 	call	11ee64 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  121cfc:	00003706 	br	121ddc <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  121d00:	e0bffc17 	ldw	r2,-16(fp)
  121d04:	10800f17 	ldw	r2,60(r2)
  121d08:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
  121d0c:	e0bffc17 	ldw	r2,-16(fp)
  121d10:	10801017 	ldw	r2,64(r2)
  121d14:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
  121d18:	e0fff417 	ldw	r3,-48(fp)
  121d1c:	e0bff017 	ldw	r2,-64(fp)
  121d20:	1880062e 	bgeu	r3,r2,121d3c <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
  121d24:	e0fff017 	ldw	r3,-64(fp)
  121d28:	e0bff417 	ldw	r2,-48(fp)
  121d2c:	1885c83a 	sub	r2,r3,r2
  121d30:	10bfffc4 	addi	r2,r2,-1
  121d34:	e0bff115 	stw	r2,-60(fp)
  121d38:	00000b06 	br	121d68 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
  121d3c:	e0bff017 	ldw	r2,-64(fp)
  121d40:	10000526 	beq	r2,zero,121d58 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  121d44:	00c20004 	movi	r3,2048
  121d48:	e0bff417 	ldw	r2,-48(fp)
  121d4c:	1885c83a 	sub	r2,r3,r2
  121d50:	e0bff115 	stw	r2,-60(fp)
  121d54:	00000406 	br	121d68 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  121d58:	00c1ffc4 	movi	r3,2047
  121d5c:	e0bff417 	ldw	r2,-48(fp)
  121d60:	1885c83a 	sub	r2,r3,r2
  121d64:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
  121d68:	e0bff117 	ldw	r2,-60(fp)
  121d6c:	10001e26 	beq	r2,zero,121de8 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
  121d70:	e0fffe17 	ldw	r3,-8(fp)
  121d74:	e0bff117 	ldw	r2,-60(fp)
  121d78:	1880022e 	bgeu	r3,r2,121d84 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  121d7c:	e0bffe17 	ldw	r2,-8(fp)
  121d80:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  121d84:	e0bffc17 	ldw	r2,-16(fp)
  121d88:	10c21104 	addi	r3,r2,2116
  121d8c:	e0bff417 	ldw	r2,-48(fp)
  121d90:	1885883a 	add	r2,r3,r2
  121d94:	e1bff117 	ldw	r6,-60(fp)
  121d98:	e17ffd17 	ldw	r5,-12(fp)
  121d9c:	1009883a 	mov	r4,r2
  121da0:	01027180 	call	102718 <memcpy>
      ptr   += n;
  121da4:	e0fffd17 	ldw	r3,-12(fp)
  121da8:	e0bff117 	ldw	r2,-60(fp)
  121dac:	1885883a 	add	r2,r3,r2
  121db0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  121db4:	e0fffe17 	ldw	r3,-8(fp)
  121db8:	e0bff117 	ldw	r2,-60(fp)
  121dbc:	1885c83a 	sub	r2,r3,r2
  121dc0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  121dc4:	e0fff417 	ldw	r3,-48(fp)
  121dc8:	e0bff117 	ldw	r2,-60(fp)
  121dcc:	1885883a 	add	r2,r3,r2
  121dd0:	10c1ffcc 	andi	r3,r2,2047
  121dd4:	e0bffc17 	ldw	r2,-16(fp)
  121dd8:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  121ddc:	e0bffe17 	ldw	r2,-8(fp)
  121de0:	00bfc716 	blt	zero,r2,121d00 <__alt_data_end+0xfffe1d00>
  121de4:	00000106 	br	121dec <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  121de8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  121dec:	0005303a 	rdctl	r2,status
  121df0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  121df4:	e0fff717 	ldw	r3,-36(fp)
  121df8:	00bfff84 	movi	r2,-2
  121dfc:	1884703a 	and	r2,r3,r2
  121e00:	1001703a 	wrctl	status,r2
  
  return context;
  121e04:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  121e08:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  121e0c:	e0bffc17 	ldw	r2,-16(fp)
  121e10:	10800817 	ldw	r2,32(r2)
  121e14:	10c00094 	ori	r3,r2,2
  121e18:	e0bffc17 	ldw	r2,-16(fp)
  121e1c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  121e20:	e0bffc17 	ldw	r2,-16(fp)
  121e24:	10800017 	ldw	r2,0(r2)
  121e28:	10800104 	addi	r2,r2,4
  121e2c:	1007883a 	mov	r3,r2
  121e30:	e0bffc17 	ldw	r2,-16(fp)
  121e34:	10800817 	ldw	r2,32(r2)
  121e38:	18800035 	stwio	r2,0(r3)
  121e3c:	e0bff617 	ldw	r2,-40(fp)
  121e40:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  121e44:	e0bff317 	ldw	r2,-52(fp)
  121e48:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  121e4c:	e0bffe17 	ldw	r2,-8(fp)
  121e50:	00802a0e 	bge	zero,r2,121efc <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
  121e54:	e0bfff17 	ldw	r2,-4(fp)
  121e58:	1090000c 	andi	r2,r2,16384
  121e5c:	10002a1e 	bne	r2,zero,121f08 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  121e60:	d0a73943 	ldbu	r2,-25371(gp)
  121e64:	10803fcc 	andi	r2,r2,255
  121e68:	10800058 	cmpnei	r2,r2,1
  121e6c:	1000161e 	bne	r2,zero,121ec8 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
  121e70:	e0bffc17 	ldw	r2,-16(fp)
  121e74:	10800c17 	ldw	r2,48(r2)
  121e78:	e0bff515 	stw	r2,-44(fp)
  121e7c:	00800184 	movi	r2,6
  121e80:	e0bff98d 	sth	r2,-26(fp)
  121e84:	00bfe0c4 	movi	r2,-125
  121e88:	e0bffa05 	stb	r2,-24(fp)
  121e8c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  121e90:	d0a73943 	ldbu	r2,-25371(gp)
  121e94:	10803fcc 	andi	r2,r2,255
  121e98:	10001526 	beq	r2,zero,121ef0 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  121e9c:	e0fff98b 	ldhu	r3,-26(fp)
  121ea0:	e13ffa03 	ldbu	r4,-24(fp)
  121ea4:	e17ffa8b 	ldhu	r5,-22(fp)
  121ea8:	e0bffb04 	addi	r2,fp,-20
  121eac:	d8800015 	stw	r2,0(sp)
  121eb0:	280f883a 	mov	r7,r5
  121eb4:	200d883a 	mov	r6,r4
  121eb8:	180b883a 	mov	r5,r3
  121ebc:	e13ff517 	ldw	r4,-44(fp)
  121ec0:	011c3f00 	call	11c3f0 <OSFlagPend>
  121ec4:	00000a06 	br	121ef0 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  121ec8:	0001883a 	nop
  121ecc:	e0bffc17 	ldw	r2,-16(fp)
  121ed0:	10c01017 	ldw	r3,64(r2)
  121ed4:	e0bff017 	ldw	r2,-64(fp)
  121ed8:	1880051e 	bne	r3,r2,121ef0 <altera_avalon_jtag_uart_write+0x248>
  121edc:	e0bffc17 	ldw	r2,-16(fp)
  121ee0:	10c00917 	ldw	r3,36(r2)
  121ee4:	e0bffc17 	ldw	r2,-16(fp)
  121ee8:	10800117 	ldw	r2,4(r2)
  121eec:	18bff736 	bltu	r3,r2,121ecc <__alt_data_end+0xfffe1ecc>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  121ef0:	e0bffc17 	ldw	r2,-16(fp)
  121ef4:	10800917 	ldw	r2,36(r2)
  121ef8:	1000051e 	bne	r2,zero,121f10 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
  121efc:	e0bffe17 	ldw	r2,-8(fp)
  121f00:	00bfb616 	blt	zero,r2,121ddc <__alt_data_end+0xfffe1ddc>
  121f04:	00000306 	br	121f14 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  121f08:	0001883a 	nop
  121f0c:	00000106 	br	121f14 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  121f10:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  121f14:	e0bffc17 	ldw	r2,-16(fp)
  121f18:	10800b17 	ldw	r2,44(r2)
  121f1c:	1009883a 	mov	r4,r2
  121f20:	011f1dc0 	call	11f1dc <OSSemPost>

  if (ptr != start)
  121f24:	e0fffd17 	ldw	r3,-12(fp)
  121f28:	e0bff217 	ldw	r2,-56(fp)
  121f2c:	18800426 	beq	r3,r2,121f40 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
  121f30:	e0fffd17 	ldw	r3,-12(fp)
  121f34:	e0bff217 	ldw	r2,-56(fp)
  121f38:	1885c83a 	sub	r2,r3,r2
  121f3c:	00000606 	br	121f58 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
  121f40:	e0bfff17 	ldw	r2,-4(fp)
  121f44:	1090000c 	andi	r2,r2,16384
  121f48:	10000226 	beq	r2,zero,121f54 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
  121f4c:	00bffd44 	movi	r2,-11
  121f50:	00000106 	br	121f58 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  121f54:	00bffec4 	movi	r2,-5
}
  121f58:	e037883a 	mov	sp,fp
  121f5c:	dfc00117 	ldw	ra,4(sp)
  121f60:	df000017 	ldw	fp,0(sp)
  121f64:	dec00204 	addi	sp,sp,8
  121f68:	f800283a 	ret

00121f6c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  121f6c:	defffa04 	addi	sp,sp,-24
  121f70:	dfc00515 	stw	ra,20(sp)
  121f74:	df000415 	stw	fp,16(sp)
  121f78:	df000404 	addi	fp,sp,16
  121f7c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  121f80:	0007883a 	mov	r3,zero
  121f84:	e0bfff17 	ldw	r2,-4(fp)
  121f88:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  121f8c:	e0bfff17 	ldw	r2,-4(fp)
  121f90:	10800104 	addi	r2,r2,4
  121f94:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  121f98:	0005303a 	rdctl	r2,status
  121f9c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  121fa0:	e0fffd17 	ldw	r3,-12(fp)
  121fa4:	00bfff84 	movi	r2,-2
  121fa8:	1884703a 	and	r2,r3,r2
  121fac:	1001703a 	wrctl	status,r2
  
  return context;
  121fb0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  121fb4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  121fb8:	0122a8c0 	call	122a8c <alt_tick>
  121fbc:	e0bffc17 	ldw	r2,-16(fp)
  121fc0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  121fc4:	e0bffe17 	ldw	r2,-8(fp)
  121fc8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  121fcc:	0001883a 	nop
  121fd0:	e037883a 	mov	sp,fp
  121fd4:	dfc00117 	ldw	ra,4(sp)
  121fd8:	df000017 	ldw	fp,0(sp)
  121fdc:	dec00204 	addi	sp,sp,8
  121fe0:	f800283a 	ret

00121fe4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  121fe4:	defff804 	addi	sp,sp,-32
  121fe8:	dfc00715 	stw	ra,28(sp)
  121fec:	df000615 	stw	fp,24(sp)
  121ff0:	df000604 	addi	fp,sp,24
  121ff4:	e13ffc15 	stw	r4,-16(fp)
  121ff8:	e17ffd15 	stw	r5,-12(fp)
  121ffc:	e1bffe15 	stw	r6,-8(fp)
  122000:	e1ffff15 	stw	r7,-4(fp)
  122004:	e0bfff17 	ldw	r2,-4(fp)
  122008:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  12200c:	d0a74e17 	ldw	r2,-25288(gp)
  122010:	1000021e 	bne	r2,zero,12201c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  122014:	e0bffb17 	ldw	r2,-20(fp)
  122018:	d0a74e15 	stw	r2,-25288(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  12201c:	e0bffc17 	ldw	r2,-16(fp)
  122020:	10800104 	addi	r2,r2,4
  122024:	00c001c4 	movi	r3,7
  122028:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  12202c:	d8000015 	stw	zero,0(sp)
  122030:	e1fffc17 	ldw	r7,-16(fp)
  122034:	018004b4 	movhi	r6,18
  122038:	3187db04 	addi	r6,r6,8044
  12203c:	e17ffe17 	ldw	r5,-8(fp)
  122040:	e13ffd17 	ldw	r4,-12(fp)
  122044:	012236c0 	call	12236c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  122048:	0001883a 	nop
  12204c:	e037883a 	mov	sp,fp
  122050:	dfc00117 	ldw	ra,4(sp)
  122054:	df000017 	ldw	fp,0(sp)
  122058:	dec00204 	addi	sp,sp,8
  12205c:	f800283a 	ret

00122060 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  122060:	defff504 	addi	sp,sp,-44
  122064:	df000a15 	stw	fp,40(sp)
  122068:	df000a04 	addi	fp,sp,40
  12206c:	e13ffc15 	stw	r4,-16(fp)
  122070:	e17ffd15 	stw	r5,-12(fp)
  122074:	e1bffe15 	stw	r6,-8(fp)
  122078:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  12207c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  122080:	d0a74e17 	ldw	r2,-25288(gp)
  
  if (alt_ticks_per_second ())
  122084:	10003c26 	beq	r2,zero,122178 <alt_alarm_start+0x118>
  {
    if (alarm)
  122088:	e0bffc17 	ldw	r2,-16(fp)
  12208c:	10003826 	beq	r2,zero,122170 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  122090:	e0bffc17 	ldw	r2,-16(fp)
  122094:	e0fffe17 	ldw	r3,-8(fp)
  122098:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  12209c:	e0bffc17 	ldw	r2,-16(fp)
  1220a0:	e0ffff17 	ldw	r3,-4(fp)
  1220a4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  1220a8:	0005303a 	rdctl	r2,status
  1220ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1220b0:	e0fff917 	ldw	r3,-28(fp)
  1220b4:	00bfff84 	movi	r2,-2
  1220b8:	1884703a 	and	r2,r3,r2
  1220bc:	1001703a 	wrctl	status,r2
  
  return context;
  1220c0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  1220c4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  1220c8:	d0a74f17 	ldw	r2,-25284(gp)
      
      current_nticks = alt_nticks();
  1220cc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  1220d0:	e0fffd17 	ldw	r3,-12(fp)
  1220d4:	e0bff617 	ldw	r2,-40(fp)
  1220d8:	1885883a 	add	r2,r3,r2
  1220dc:	10c00044 	addi	r3,r2,1
  1220e0:	e0bffc17 	ldw	r2,-16(fp)
  1220e4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  1220e8:	e0bffc17 	ldw	r2,-16(fp)
  1220ec:	10c00217 	ldw	r3,8(r2)
  1220f0:	e0bff617 	ldw	r2,-40(fp)
  1220f4:	1880042e 	bgeu	r3,r2,122108 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  1220f8:	e0bffc17 	ldw	r2,-16(fp)
  1220fc:	00c00044 	movi	r3,1
  122100:	10c00405 	stb	r3,16(r2)
  122104:	00000206 	br	122110 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  122108:	e0bffc17 	ldw	r2,-16(fp)
  12210c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  122110:	e0bffc17 	ldw	r2,-16(fp)
  122114:	d0e02f04 	addi	r3,gp,-32580
  122118:	e0fffa15 	stw	r3,-24(fp)
  12211c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  122120:	e0bffb17 	ldw	r2,-20(fp)
  122124:	e0fffa17 	ldw	r3,-24(fp)
  122128:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  12212c:	e0bffa17 	ldw	r2,-24(fp)
  122130:	10c00017 	ldw	r3,0(r2)
  122134:	e0bffb17 	ldw	r2,-20(fp)
  122138:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  12213c:	e0bffa17 	ldw	r2,-24(fp)
  122140:	10800017 	ldw	r2,0(r2)
  122144:	e0fffb17 	ldw	r3,-20(fp)
  122148:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  12214c:	e0bffa17 	ldw	r2,-24(fp)
  122150:	e0fffb17 	ldw	r3,-20(fp)
  122154:	10c00015 	stw	r3,0(r2)
  122158:	e0bff817 	ldw	r2,-32(fp)
  12215c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  122160:	e0bff717 	ldw	r2,-36(fp)
  122164:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  122168:	0005883a 	mov	r2,zero
  12216c:	00000306 	br	12217c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  122170:	00bffa84 	movi	r2,-22
  122174:	00000106 	br	12217c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  122178:	00bfde84 	movi	r2,-134
  }
}
  12217c:	e037883a 	mov	sp,fp
  122180:	df000017 	ldw	fp,0(sp)
  122184:	dec00104 	addi	sp,sp,4
  122188:	f800283a 	ret

0012218c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  12218c:	deffff04 	addi	sp,sp,-4
  122190:	df000015 	stw	fp,0(sp)
  122194:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  122198:	0001883a 	nop
  12219c:	e037883a 	mov	sp,fp
  1221a0:	df000017 	ldw	fp,0(sp)
  1221a4:	dec00104 	addi	sp,sp,4
  1221a8:	f800283a 	ret

001221ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  1221ac:	defffe04 	addi	sp,sp,-8
  1221b0:	dfc00115 	stw	ra,4(sp)
  1221b4:	df000015 	stw	fp,0(sp)
  1221b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  1221bc:	d0a00d17 	ldw	r2,-32716(gp)
  1221c0:	10000326 	beq	r2,zero,1221d0 <alt_get_errno+0x24>
  1221c4:	d0a00d17 	ldw	r2,-32716(gp)
  1221c8:	103ee83a 	callr	r2
  1221cc:	00000106 	br	1221d4 <alt_get_errno+0x28>
  1221d0:	d0a72d04 	addi	r2,gp,-25420
}
  1221d4:	e037883a 	mov	sp,fp
  1221d8:	dfc00117 	ldw	ra,4(sp)
  1221dc:	df000017 	ldw	fp,0(sp)
  1221e0:	dec00204 	addi	sp,sp,8
  1221e4:	f800283a 	ret

001221e8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  1221e8:	defffa04 	addi	sp,sp,-24
  1221ec:	dfc00515 	stw	ra,20(sp)
  1221f0:	df000415 	stw	fp,16(sp)
  1221f4:	df000404 	addi	fp,sp,16
  1221f8:	e13ffe15 	stw	r4,-8(fp)
  1221fc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  122200:	e0bffe17 	ldw	r2,-8(fp)
  122204:	10000326 	beq	r2,zero,122214 <alt_dev_llist_insert+0x2c>
  122208:	e0bffe17 	ldw	r2,-8(fp)
  12220c:	10800217 	ldw	r2,8(r2)
  122210:	1000061e 	bne	r2,zero,12222c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  122214:	01221ac0 	call	1221ac <alt_get_errno>
  122218:	1007883a 	mov	r3,r2
  12221c:	00800584 	movi	r2,22
  122220:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  122224:	00bffa84 	movi	r2,-22
  122228:	00001306 	br	122278 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  12222c:	e0bffe17 	ldw	r2,-8(fp)
  122230:	e0ffff17 	ldw	r3,-4(fp)
  122234:	e0fffc15 	stw	r3,-16(fp)
  122238:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  12223c:	e0bffd17 	ldw	r2,-12(fp)
  122240:	e0fffc17 	ldw	r3,-16(fp)
  122244:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  122248:	e0bffc17 	ldw	r2,-16(fp)
  12224c:	10c00017 	ldw	r3,0(r2)
  122250:	e0bffd17 	ldw	r2,-12(fp)
  122254:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  122258:	e0bffc17 	ldw	r2,-16(fp)
  12225c:	10800017 	ldw	r2,0(r2)
  122260:	e0fffd17 	ldw	r3,-12(fp)
  122264:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  122268:	e0bffc17 	ldw	r2,-16(fp)
  12226c:	e0fffd17 	ldw	r3,-12(fp)
  122270:	10c00015 	stw	r3,0(r2)

  return 0;  
  122274:	0005883a 	mov	r2,zero
}
  122278:	e037883a 	mov	sp,fp
  12227c:	dfc00117 	ldw	ra,4(sp)
  122280:	df000017 	ldw	fp,0(sp)
  122284:	dec00204 	addi	sp,sp,8
  122288:	f800283a 	ret

0012228c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  12228c:	defffd04 	addi	sp,sp,-12
  122290:	dfc00215 	stw	ra,8(sp)
  122294:	df000115 	stw	fp,4(sp)
  122298:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  12229c:	008004b4 	movhi	r2,18
  1222a0:	108d4b04 	addi	r2,r2,13612
  1222a4:	e0bfff15 	stw	r2,-4(fp)
  1222a8:	00000606 	br	1222c4 <_do_ctors+0x38>
        (*ctor) (); 
  1222ac:	e0bfff17 	ldw	r2,-4(fp)
  1222b0:	10800017 	ldw	r2,0(r2)
  1222b4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  1222b8:	e0bfff17 	ldw	r2,-4(fp)
  1222bc:	10bfff04 	addi	r2,r2,-4
  1222c0:	e0bfff15 	stw	r2,-4(fp)
  1222c4:	e0ffff17 	ldw	r3,-4(fp)
  1222c8:	008004b4 	movhi	r2,18
  1222cc:	108d4c04 	addi	r2,r2,13616
  1222d0:	18bff62e 	bgeu	r3,r2,1222ac <__alt_data_end+0xfffe22ac>
        (*ctor) (); 
}
  1222d4:	0001883a 	nop
  1222d8:	e037883a 	mov	sp,fp
  1222dc:	dfc00117 	ldw	ra,4(sp)
  1222e0:	df000017 	ldw	fp,0(sp)
  1222e4:	dec00204 	addi	sp,sp,8
  1222e8:	f800283a 	ret

001222ec <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  1222ec:	defffd04 	addi	sp,sp,-12
  1222f0:	dfc00215 	stw	ra,8(sp)
  1222f4:	df000115 	stw	fp,4(sp)
  1222f8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  1222fc:	008004b4 	movhi	r2,18
  122300:	108d4b04 	addi	r2,r2,13612
  122304:	e0bfff15 	stw	r2,-4(fp)
  122308:	00000606 	br	122324 <_do_dtors+0x38>
        (*dtor) (); 
  12230c:	e0bfff17 	ldw	r2,-4(fp)
  122310:	10800017 	ldw	r2,0(r2)
  122314:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  122318:	e0bfff17 	ldw	r2,-4(fp)
  12231c:	10bfff04 	addi	r2,r2,-4
  122320:	e0bfff15 	stw	r2,-4(fp)
  122324:	e0ffff17 	ldw	r3,-4(fp)
  122328:	008004b4 	movhi	r2,18
  12232c:	108d4c04 	addi	r2,r2,13616
  122330:	18bff62e 	bgeu	r3,r2,12230c <__alt_data_end+0xfffe230c>
        (*dtor) (); 
}
  122334:	0001883a 	nop
  122338:	e037883a 	mov	sp,fp
  12233c:	dfc00117 	ldw	ra,4(sp)
  122340:	df000017 	ldw	fp,0(sp)
  122344:	dec00204 	addi	sp,sp,8
  122348:	f800283a 	ret

0012234c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  12234c:	deffff04 	addi	sp,sp,-4
  122350:	df000015 	stw	fp,0(sp)
  122354:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  122358:	0001883a 	nop
  12235c:	e037883a 	mov	sp,fp
  122360:	df000017 	ldw	fp,0(sp)
  122364:	dec00104 	addi	sp,sp,4
  122368:	f800283a 	ret

0012236c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  12236c:	defff904 	addi	sp,sp,-28
  122370:	dfc00615 	stw	ra,24(sp)
  122374:	df000515 	stw	fp,20(sp)
  122378:	df000504 	addi	fp,sp,20
  12237c:	e13ffc15 	stw	r4,-16(fp)
  122380:	e17ffd15 	stw	r5,-12(fp)
  122384:	e1bffe15 	stw	r6,-8(fp)
  122388:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  12238c:	e0800217 	ldw	r2,8(fp)
  122390:	d8800015 	stw	r2,0(sp)
  122394:	e1ffff17 	ldw	r7,-4(fp)
  122398:	e1bffe17 	ldw	r6,-8(fp)
  12239c:	e17ffd17 	ldw	r5,-12(fp)
  1223a0:	e13ffc17 	ldw	r4,-16(fp)
  1223a4:	012251c0 	call	12251c <alt_iic_isr_register>
}  
  1223a8:	e037883a 	mov	sp,fp
  1223ac:	dfc00117 	ldw	ra,4(sp)
  1223b0:	df000017 	ldw	fp,0(sp)
  1223b4:	dec00204 	addi	sp,sp,8
  1223b8:	f800283a 	ret

001223bc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  1223bc:	defff904 	addi	sp,sp,-28
  1223c0:	df000615 	stw	fp,24(sp)
  1223c4:	df000604 	addi	fp,sp,24
  1223c8:	e13ffe15 	stw	r4,-8(fp)
  1223cc:	e17fff15 	stw	r5,-4(fp)
  1223d0:	e0bfff17 	ldw	r2,-4(fp)
  1223d4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  1223d8:	0005303a 	rdctl	r2,status
  1223dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1223e0:	e0fffb17 	ldw	r3,-20(fp)
  1223e4:	00bfff84 	movi	r2,-2
  1223e8:	1884703a 	and	r2,r3,r2
  1223ec:	1001703a 	wrctl	status,r2
  
  return context;
  1223f0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  1223f4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  1223f8:	00c00044 	movi	r3,1
  1223fc:	e0bffa17 	ldw	r2,-24(fp)
  122400:	1884983a 	sll	r2,r3,r2
  122404:	1007883a 	mov	r3,r2
  122408:	d0a74d17 	ldw	r2,-25292(gp)
  12240c:	1884b03a 	or	r2,r3,r2
  122410:	d0a74d15 	stw	r2,-25292(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  122414:	d0a74d17 	ldw	r2,-25292(gp)
  122418:	100170fa 	wrctl	ienable,r2
  12241c:	e0bffc17 	ldw	r2,-16(fp)
  122420:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  122424:	e0bffd17 	ldw	r2,-12(fp)
  122428:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  12242c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  122430:	0001883a 	nop
}
  122434:	e037883a 	mov	sp,fp
  122438:	df000017 	ldw	fp,0(sp)
  12243c:	dec00104 	addi	sp,sp,4
  122440:	f800283a 	ret

00122444 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  122444:	defff904 	addi	sp,sp,-28
  122448:	df000615 	stw	fp,24(sp)
  12244c:	df000604 	addi	fp,sp,24
  122450:	e13ffe15 	stw	r4,-8(fp)
  122454:	e17fff15 	stw	r5,-4(fp)
  122458:	e0bfff17 	ldw	r2,-4(fp)
  12245c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  122460:	0005303a 	rdctl	r2,status
  122464:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  122468:	e0fffb17 	ldw	r3,-20(fp)
  12246c:	00bfff84 	movi	r2,-2
  122470:	1884703a 	and	r2,r3,r2
  122474:	1001703a 	wrctl	status,r2
  
  return context;
  122478:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  12247c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  122480:	00c00044 	movi	r3,1
  122484:	e0bffa17 	ldw	r2,-24(fp)
  122488:	1884983a 	sll	r2,r3,r2
  12248c:	0084303a 	nor	r2,zero,r2
  122490:	1007883a 	mov	r3,r2
  122494:	d0a74d17 	ldw	r2,-25292(gp)
  122498:	1884703a 	and	r2,r3,r2
  12249c:	d0a74d15 	stw	r2,-25292(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  1224a0:	d0a74d17 	ldw	r2,-25292(gp)
  1224a4:	100170fa 	wrctl	ienable,r2
  1224a8:	e0bffc17 	ldw	r2,-16(fp)
  1224ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1224b0:	e0bffd17 	ldw	r2,-12(fp)
  1224b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  1224b8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  1224bc:	0001883a 	nop
}
  1224c0:	e037883a 	mov	sp,fp
  1224c4:	df000017 	ldw	fp,0(sp)
  1224c8:	dec00104 	addi	sp,sp,4
  1224cc:	f800283a 	ret

001224d0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  1224d0:	defffc04 	addi	sp,sp,-16
  1224d4:	df000315 	stw	fp,12(sp)
  1224d8:	df000304 	addi	fp,sp,12
  1224dc:	e13ffe15 	stw	r4,-8(fp)
  1224e0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  1224e4:	000530fa 	rdctl	r2,ienable
  1224e8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  1224ec:	00c00044 	movi	r3,1
  1224f0:	e0bfff17 	ldw	r2,-4(fp)
  1224f4:	1884983a 	sll	r2,r3,r2
  1224f8:	1007883a 	mov	r3,r2
  1224fc:	e0bffd17 	ldw	r2,-12(fp)
  122500:	1884703a 	and	r2,r3,r2
  122504:	1004c03a 	cmpne	r2,r2,zero
  122508:	10803fcc 	andi	r2,r2,255
}
  12250c:	e037883a 	mov	sp,fp
  122510:	df000017 	ldw	fp,0(sp)
  122514:	dec00104 	addi	sp,sp,4
  122518:	f800283a 	ret

0012251c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  12251c:	defff504 	addi	sp,sp,-44
  122520:	dfc00a15 	stw	ra,40(sp)
  122524:	df000915 	stw	fp,36(sp)
  122528:	df000904 	addi	fp,sp,36
  12252c:	e13ffc15 	stw	r4,-16(fp)
  122530:	e17ffd15 	stw	r5,-12(fp)
  122534:	e1bffe15 	stw	r6,-8(fp)
  122538:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  12253c:	00bffa84 	movi	r2,-22
  122540:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  122544:	e0bffd17 	ldw	r2,-12(fp)
  122548:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  12254c:	e0bff817 	ldw	r2,-32(fp)
  122550:	10800808 	cmpgei	r2,r2,32
  122554:	1000271e 	bne	r2,zero,1225f4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  122558:	0005303a 	rdctl	r2,status
  12255c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  122560:	e0fffb17 	ldw	r3,-20(fp)
  122564:	00bfff84 	movi	r2,-2
  122568:	1884703a 	and	r2,r3,r2
  12256c:	1001703a 	wrctl	status,r2
  
  return context;
  122570:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  122574:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  122578:	008004f4 	movhi	r2,19
  12257c:	10bb1704 	addi	r2,r2,-5028
  122580:	e0fff817 	ldw	r3,-32(fp)
  122584:	180690fa 	slli	r3,r3,3
  122588:	10c5883a 	add	r2,r2,r3
  12258c:	e0fffe17 	ldw	r3,-8(fp)
  122590:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  122594:	008004f4 	movhi	r2,19
  122598:	10bb1704 	addi	r2,r2,-5028
  12259c:	e0fff817 	ldw	r3,-32(fp)
  1225a0:	180690fa 	slli	r3,r3,3
  1225a4:	10c5883a 	add	r2,r2,r3
  1225a8:	10800104 	addi	r2,r2,4
  1225ac:	e0ffff17 	ldw	r3,-4(fp)
  1225b0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  1225b4:	e0bffe17 	ldw	r2,-8(fp)
  1225b8:	10000526 	beq	r2,zero,1225d0 <alt_iic_isr_register+0xb4>
  1225bc:	e0bff817 	ldw	r2,-32(fp)
  1225c0:	100b883a 	mov	r5,r2
  1225c4:	e13ffc17 	ldw	r4,-16(fp)
  1225c8:	01223bc0 	call	1223bc <alt_ic_irq_enable>
  1225cc:	00000406 	br	1225e0 <alt_iic_isr_register+0xc4>
  1225d0:	e0bff817 	ldw	r2,-32(fp)
  1225d4:	100b883a 	mov	r5,r2
  1225d8:	e13ffc17 	ldw	r4,-16(fp)
  1225dc:	01224440 	call	122444 <alt_ic_irq_disable>
  1225e0:	e0bff715 	stw	r2,-36(fp)
  1225e4:	e0bffa17 	ldw	r2,-24(fp)
  1225e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1225ec:	e0bff917 	ldw	r2,-28(fp)
  1225f0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  1225f4:	e0bff717 	ldw	r2,-36(fp)
}
  1225f8:	e037883a 	mov	sp,fp
  1225fc:	dfc00117 	ldw	ra,4(sp)
  122600:	df000017 	ldw	fp,0(sp)
  122604:	dec00204 	addi	sp,sp,8
  122608:	f800283a 	ret

0012260c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  12260c:	defff804 	addi	sp,sp,-32
  122610:	dfc00715 	stw	ra,28(sp)
  122614:	df000615 	stw	fp,24(sp)
  122618:	dc000515 	stw	r16,20(sp)
  12261c:	df000604 	addi	fp,sp,24
  122620:	e13ffb15 	stw	r4,-20(fp)
  122624:	e17ffc15 	stw	r5,-16(fp)
  122628:	e1bffd15 	stw	r6,-12(fp)
  12262c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
  122630:	e1bffe17 	ldw	r6,-8(fp)
  122634:	e17ffd17 	ldw	r5,-12(fp)
  122638:	e13ffc17 	ldw	r4,-16(fp)
  12263c:	01228940 	call	122894 <open>
  122640:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
  122644:	e0bffa17 	ldw	r2,-24(fp)
  122648:	10002216 	blt	r2,zero,1226d4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  12264c:	040004b4 	movhi	r16,18
  122650:	8412b104 	addi	r16,r16,19140
  122654:	e0bffa17 	ldw	r2,-24(fp)
  122658:	01400304 	movi	r5,12
  12265c:	1009883a 	mov	r4,r2
  122660:	01160740 	call	116074 <__mulsi3>
  122664:	8085883a 	add	r2,r16,r2
  122668:	10c00017 	ldw	r3,0(r2)
  12266c:	e0bffb17 	ldw	r2,-20(fp)
  122670:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  122674:	040004b4 	movhi	r16,18
  122678:	8412b104 	addi	r16,r16,19140
  12267c:	e0bffa17 	ldw	r2,-24(fp)
  122680:	01400304 	movi	r5,12
  122684:	1009883a 	mov	r4,r2
  122688:	01160740 	call	116074 <__mulsi3>
  12268c:	8085883a 	add	r2,r16,r2
  122690:	10800104 	addi	r2,r2,4
  122694:	10c00017 	ldw	r3,0(r2)
  122698:	e0bffb17 	ldw	r2,-20(fp)
  12269c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  1226a0:	040004b4 	movhi	r16,18
  1226a4:	8412b104 	addi	r16,r16,19140
  1226a8:	e0bffa17 	ldw	r2,-24(fp)
  1226ac:	01400304 	movi	r5,12
  1226b0:	1009883a 	mov	r4,r2
  1226b4:	01160740 	call	116074 <__mulsi3>
  1226b8:	8085883a 	add	r2,r16,r2
  1226bc:	10800204 	addi	r2,r2,8
  1226c0:	10c00017 	ldw	r3,0(r2)
  1226c4:	e0bffb17 	ldw	r2,-20(fp)
  1226c8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  1226cc:	e13ffa17 	ldw	r4,-24(fp)
  1226d0:	01194000 	call	119400 <alt_release_fd>
  }
} 
  1226d4:	0001883a 	nop
  1226d8:	e6ffff04 	addi	sp,fp,-4
  1226dc:	dfc00217 	ldw	ra,8(sp)
  1226e0:	df000117 	ldw	fp,4(sp)
  1226e4:	dc000017 	ldw	r16,0(sp)
  1226e8:	dec00304 	addi	sp,sp,12
  1226ec:	f800283a 	ret

001226f0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  1226f0:	defffb04 	addi	sp,sp,-20
  1226f4:	dfc00415 	stw	ra,16(sp)
  1226f8:	df000315 	stw	fp,12(sp)
  1226fc:	df000304 	addi	fp,sp,12
  122700:	e13ffd15 	stw	r4,-12(fp)
  122704:	e17ffe15 	stw	r5,-8(fp)
  122708:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  12270c:	01c07fc4 	movi	r7,511
  122710:	01800044 	movi	r6,1
  122714:	e17ffd17 	ldw	r5,-12(fp)
  122718:	010004b4 	movhi	r4,18
  12271c:	2112b404 	addi	r4,r4,19152
  122720:	012260c0 	call	12260c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  122724:	01c07fc4 	movi	r7,511
  122728:	000d883a 	mov	r6,zero
  12272c:	e17ffe17 	ldw	r5,-8(fp)
  122730:	010004b4 	movhi	r4,18
  122734:	2112b104 	addi	r4,r4,19140
  122738:	012260c0 	call	12260c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  12273c:	01c07fc4 	movi	r7,511
  122740:	01800044 	movi	r6,1
  122744:	e17fff17 	ldw	r5,-4(fp)
  122748:	010004b4 	movhi	r4,18
  12274c:	2112b704 	addi	r4,r4,19164
  122750:	012260c0 	call	12260c <alt_open_fd>
}  
  122754:	0001883a 	nop
  122758:	e037883a 	mov	sp,fp
  12275c:	dfc00117 	ldw	ra,4(sp)
  122760:	df000017 	ldw	fp,0(sp)
  122764:	dec00204 	addi	sp,sp,8
  122768:	f800283a 	ret

0012276c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  12276c:	defffe04 	addi	sp,sp,-8
  122770:	dfc00115 	stw	ra,4(sp)
  122774:	df000015 	stw	fp,0(sp)
  122778:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  12277c:	d0a00d17 	ldw	r2,-32716(gp)
  122780:	10000326 	beq	r2,zero,122790 <alt_get_errno+0x24>
  122784:	d0a00d17 	ldw	r2,-32716(gp)
  122788:	103ee83a 	callr	r2
  12278c:	00000106 	br	122794 <alt_get_errno+0x28>
  122790:	d0a72d04 	addi	r2,gp,-25420
}
  122794:	e037883a 	mov	sp,fp
  122798:	dfc00117 	ldw	ra,4(sp)
  12279c:	df000017 	ldw	fp,0(sp)
  1227a0:	dec00204 	addi	sp,sp,8
  1227a4:	f800283a 	ret

001227a8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  1227a8:	defffb04 	addi	sp,sp,-20
  1227ac:	dfc00415 	stw	ra,16(sp)
  1227b0:	df000315 	stw	fp,12(sp)
  1227b4:	dc000215 	stw	r16,8(sp)
  1227b8:	df000304 	addi	fp,sp,12
  1227bc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  1227c0:	e0bffe17 	ldw	r2,-8(fp)
  1227c4:	10800217 	ldw	r2,8(r2)
  1227c8:	10d00034 	orhi	r3,r2,16384
  1227cc:	e0bffe17 	ldw	r2,-8(fp)
  1227d0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  1227d4:	e03ffd15 	stw	zero,-12(fp)
  1227d8:	00002306 	br	122868 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  1227dc:	040004b4 	movhi	r16,18
  1227e0:	8412b104 	addi	r16,r16,19140
  1227e4:	e0bffd17 	ldw	r2,-12(fp)
  1227e8:	01400304 	movi	r5,12
  1227ec:	1009883a 	mov	r4,r2
  1227f0:	01160740 	call	116074 <__mulsi3>
  1227f4:	8085883a 	add	r2,r16,r2
  1227f8:	10c00017 	ldw	r3,0(r2)
  1227fc:	e0bffe17 	ldw	r2,-8(fp)
  122800:	10800017 	ldw	r2,0(r2)
  122804:	1880151e 	bne	r3,r2,12285c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  122808:	040004b4 	movhi	r16,18
  12280c:	8412b104 	addi	r16,r16,19140
  122810:	e0bffd17 	ldw	r2,-12(fp)
  122814:	01400304 	movi	r5,12
  122818:	1009883a 	mov	r4,r2
  12281c:	01160740 	call	116074 <__mulsi3>
  122820:	8085883a 	add	r2,r16,r2
  122824:	10800204 	addi	r2,r2,8
  122828:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  12282c:	10000b0e 	bge	r2,zero,12285c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  122830:	01400304 	movi	r5,12
  122834:	e13ffd17 	ldw	r4,-12(fp)
  122838:	01160740 	call	116074 <__mulsi3>
  12283c:	1007883a 	mov	r3,r2
  122840:	008004b4 	movhi	r2,18
  122844:	1092b104 	addi	r2,r2,19140
  122848:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  12284c:	e0bffe17 	ldw	r2,-8(fp)
  122850:	18800226 	beq	r3,r2,12285c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  122854:	00bffcc4 	movi	r2,-13
  122858:	00000806 	br	12287c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  12285c:	e0bffd17 	ldw	r2,-12(fp)
  122860:	10800044 	addi	r2,r2,1
  122864:	e0bffd15 	stw	r2,-12(fp)
  122868:	d0a00c17 	ldw	r2,-32720(gp)
  12286c:	1007883a 	mov	r3,r2
  122870:	e0bffd17 	ldw	r2,-12(fp)
  122874:	18bfd92e 	bgeu	r3,r2,1227dc <__alt_data_end+0xfffe27dc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  122878:	0005883a 	mov	r2,zero
}
  12287c:	e6ffff04 	addi	sp,fp,-4
  122880:	dfc00217 	ldw	ra,8(sp)
  122884:	df000117 	ldw	fp,4(sp)
  122888:	dc000017 	ldw	r16,0(sp)
  12288c:	dec00304 	addi	sp,sp,12
  122890:	f800283a 	ret

00122894 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  122894:	defff604 	addi	sp,sp,-40
  122898:	dfc00915 	stw	ra,36(sp)
  12289c:	df000815 	stw	fp,32(sp)
  1228a0:	df000804 	addi	fp,sp,32
  1228a4:	e13ffd15 	stw	r4,-12(fp)
  1228a8:	e17ffe15 	stw	r5,-8(fp)
  1228ac:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  1228b0:	00bfffc4 	movi	r2,-1
  1228b4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  1228b8:	00bffb44 	movi	r2,-19
  1228bc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  1228c0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  1228c4:	d1600a04 	addi	r5,gp,-32728
  1228c8:	e13ffd17 	ldw	r4,-12(fp)
  1228cc:	0122f100 	call	122f10 <alt_find_dev>
  1228d0:	e0bff815 	stw	r2,-32(fp)
  1228d4:	e0bff817 	ldw	r2,-32(fp)
  1228d8:	1000051e 	bne	r2,zero,1228f0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  1228dc:	e13ffd17 	ldw	r4,-12(fp)
  1228e0:	0122fa00 	call	122fa0 <alt_find_file>
  1228e4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  1228e8:	00800044 	movi	r2,1
  1228ec:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  1228f0:	e0bff817 	ldw	r2,-32(fp)
  1228f4:	10002b26 	beq	r2,zero,1229a4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
  1228f8:	e13ff817 	ldw	r4,-32(fp)
  1228fc:	01230a80 	call	1230a8 <alt_get_fd>
  122900:	e0bff915 	stw	r2,-28(fp)
  122904:	e0bff917 	ldw	r2,-28(fp)
  122908:	1000030e 	bge	r2,zero,122918 <open+0x84>
    {
      status = index;
  12290c:	e0bff917 	ldw	r2,-28(fp)
  122910:	e0bffa15 	stw	r2,-24(fp)
  122914:	00002506 	br	1229ac <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
  122918:	01400304 	movi	r5,12
  12291c:	e13ff917 	ldw	r4,-28(fp)
  122920:	01160740 	call	116074 <__mulsi3>
  122924:	1007883a 	mov	r3,r2
  122928:	008004b4 	movhi	r2,18
  12292c:	1092b104 	addi	r2,r2,19140
  122930:	1885883a 	add	r2,r3,r2
  122934:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  122938:	e0fffe17 	ldw	r3,-8(fp)
  12293c:	00900034 	movhi	r2,16384
  122940:	10bfffc4 	addi	r2,r2,-1
  122944:	1886703a 	and	r3,r3,r2
  122948:	e0bffc17 	ldw	r2,-16(fp)
  12294c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  122950:	e0bffb17 	ldw	r2,-20(fp)
  122954:	1000051e 	bne	r2,zero,12296c <open+0xd8>
  122958:	e13ffc17 	ldw	r4,-16(fp)
  12295c:	01227a80 	call	1227a8 <alt_file_locked>
  122960:	e0bffa15 	stw	r2,-24(fp)
  122964:	e0bffa17 	ldw	r2,-24(fp)
  122968:	10001016 	blt	r2,zero,1229ac <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  12296c:	e0bff817 	ldw	r2,-32(fp)
  122970:	10800317 	ldw	r2,12(r2)
  122974:	10000826 	beq	r2,zero,122998 <open+0x104>
  122978:	e0bff817 	ldw	r2,-32(fp)
  12297c:	10800317 	ldw	r2,12(r2)
  122980:	e1ffff17 	ldw	r7,-4(fp)
  122984:	e1bffe17 	ldw	r6,-8(fp)
  122988:	e17ffd17 	ldw	r5,-12(fp)
  12298c:	e13ffc17 	ldw	r4,-16(fp)
  122990:	103ee83a 	callr	r2
  122994:	00000106 	br	12299c <open+0x108>
  122998:	0005883a 	mov	r2,zero
  12299c:	e0bffa15 	stw	r2,-24(fp)
  1229a0:	00000206 	br	1229ac <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
  1229a4:	00bffb44 	movi	r2,-19
  1229a8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  1229ac:	e0bffa17 	ldw	r2,-24(fp)
  1229b0:	1000090e 	bge	r2,zero,1229d8 <open+0x144>
  {
    alt_release_fd (index);  
  1229b4:	e13ff917 	ldw	r4,-28(fp)
  1229b8:	01194000 	call	119400 <alt_release_fd>
    ALT_ERRNO = -status;
  1229bc:	012276c0 	call	12276c <alt_get_errno>
  1229c0:	1007883a 	mov	r3,r2
  1229c4:	e0bffa17 	ldw	r2,-24(fp)
  1229c8:	0085c83a 	sub	r2,zero,r2
  1229cc:	18800015 	stw	r2,0(r3)
    return -1;
  1229d0:	00bfffc4 	movi	r2,-1
  1229d4:	00000106 	br	1229dc <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
  1229d8:	e0bff917 	ldw	r2,-28(fp)
}
  1229dc:	e037883a 	mov	sp,fp
  1229e0:	dfc00117 	ldw	ra,4(sp)
  1229e4:	df000017 	ldw	fp,0(sp)
  1229e8:	dec00204 	addi	sp,sp,8
  1229ec:	f800283a 	ret

001229f0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  1229f0:	defffa04 	addi	sp,sp,-24
  1229f4:	df000515 	stw	fp,20(sp)
  1229f8:	df000504 	addi	fp,sp,20
  1229fc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  122a00:	0005303a 	rdctl	r2,status
  122a04:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  122a08:	e0fffc17 	ldw	r3,-16(fp)
  122a0c:	00bfff84 	movi	r2,-2
  122a10:	1884703a 	and	r2,r3,r2
  122a14:	1001703a 	wrctl	status,r2
  
  return context;
  122a18:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  122a1c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  122a20:	e0bfff17 	ldw	r2,-4(fp)
  122a24:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  122a28:	e0bffd17 	ldw	r2,-12(fp)
  122a2c:	10800017 	ldw	r2,0(r2)
  122a30:	e0fffd17 	ldw	r3,-12(fp)
  122a34:	18c00117 	ldw	r3,4(r3)
  122a38:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  122a3c:	e0bffd17 	ldw	r2,-12(fp)
  122a40:	10800117 	ldw	r2,4(r2)
  122a44:	e0fffd17 	ldw	r3,-12(fp)
  122a48:	18c00017 	ldw	r3,0(r3)
  122a4c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  122a50:	e0bffd17 	ldw	r2,-12(fp)
  122a54:	e0fffd17 	ldw	r3,-12(fp)
  122a58:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  122a5c:	e0bffd17 	ldw	r2,-12(fp)
  122a60:	e0fffd17 	ldw	r3,-12(fp)
  122a64:	10c00015 	stw	r3,0(r2)
  122a68:	e0bffb17 	ldw	r2,-20(fp)
  122a6c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  122a70:	e0bffe17 	ldw	r2,-8(fp)
  122a74:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  122a78:	0001883a 	nop
  122a7c:	e037883a 	mov	sp,fp
  122a80:	df000017 	ldw	fp,0(sp)
  122a84:	dec00104 	addi	sp,sp,4
  122a88:	f800283a 	ret

00122a8c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  122a8c:	defffb04 	addi	sp,sp,-20
  122a90:	dfc00415 	stw	ra,16(sp)
  122a94:	df000315 	stw	fp,12(sp)
  122a98:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  122a9c:	d0a02f17 	ldw	r2,-32580(gp)
  122aa0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  122aa4:	d0a74f17 	ldw	r2,-25284(gp)
  122aa8:	10800044 	addi	r2,r2,1
  122aac:	d0a74f15 	stw	r2,-25284(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  122ab0:	00002e06 	br	122b6c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  122ab4:	e0bffd17 	ldw	r2,-12(fp)
  122ab8:	10800017 	ldw	r2,0(r2)
  122abc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  122ac0:	e0bffd17 	ldw	r2,-12(fp)
  122ac4:	10800403 	ldbu	r2,16(r2)
  122ac8:	10803fcc 	andi	r2,r2,255
  122acc:	10000426 	beq	r2,zero,122ae0 <alt_tick+0x54>
  122ad0:	d0a74f17 	ldw	r2,-25284(gp)
  122ad4:	1000021e 	bne	r2,zero,122ae0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  122ad8:	e0bffd17 	ldw	r2,-12(fp)
  122adc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  122ae0:	e0bffd17 	ldw	r2,-12(fp)
  122ae4:	10800217 	ldw	r2,8(r2)
  122ae8:	d0e74f17 	ldw	r3,-25284(gp)
  122aec:	18801d36 	bltu	r3,r2,122b64 <alt_tick+0xd8>
  122af0:	e0bffd17 	ldw	r2,-12(fp)
  122af4:	10800403 	ldbu	r2,16(r2)
  122af8:	10803fcc 	andi	r2,r2,255
  122afc:	1000191e 	bne	r2,zero,122b64 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  122b00:	e0bffd17 	ldw	r2,-12(fp)
  122b04:	10800317 	ldw	r2,12(r2)
  122b08:	e0fffd17 	ldw	r3,-12(fp)
  122b0c:	18c00517 	ldw	r3,20(r3)
  122b10:	1809883a 	mov	r4,r3
  122b14:	103ee83a 	callr	r2
  122b18:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  122b1c:	e0bfff17 	ldw	r2,-4(fp)
  122b20:	1000031e 	bne	r2,zero,122b30 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  122b24:	e13ffd17 	ldw	r4,-12(fp)
  122b28:	01229f00 	call	1229f0 <alt_alarm_stop>
  122b2c:	00000d06 	br	122b64 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  122b30:	e0bffd17 	ldw	r2,-12(fp)
  122b34:	10c00217 	ldw	r3,8(r2)
  122b38:	e0bfff17 	ldw	r2,-4(fp)
  122b3c:	1887883a 	add	r3,r3,r2
  122b40:	e0bffd17 	ldw	r2,-12(fp)
  122b44:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  122b48:	e0bffd17 	ldw	r2,-12(fp)
  122b4c:	10c00217 	ldw	r3,8(r2)
  122b50:	d0a74f17 	ldw	r2,-25284(gp)
  122b54:	1880032e 	bgeu	r3,r2,122b64 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  122b58:	e0bffd17 	ldw	r2,-12(fp)
  122b5c:	00c00044 	movi	r3,1
  122b60:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  122b64:	e0bffe17 	ldw	r2,-8(fp)
  122b68:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  122b6c:	e0fffd17 	ldw	r3,-12(fp)
  122b70:	d0a02f04 	addi	r2,gp,-32580
  122b74:	18bfcf1e 	bne	r3,r2,122ab4 <__alt_data_end+0xfffe2ab4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  122b78:	011a6140 	call	11a614 <OSTimeTick>
}
  122b7c:	0001883a 	nop
  122b80:	e037883a 	mov	sp,fp
  122b84:	dfc00117 	ldw	ra,4(sp)
  122b88:	df000017 	ldw	fp,0(sp)
  122b8c:	dec00204 	addi	sp,sp,8
  122b90:	f800283a 	ret

00122b94 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  122b94:	deffff04 	addi	sp,sp,-4
  122b98:	df000015 	stw	fp,0(sp)
  122b9c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  122ba0:	000170fa 	wrctl	ienable,zero
}
  122ba4:	0001883a 	nop
  122ba8:	e037883a 	mov	sp,fp
  122bac:	df000017 	ldw	fp,0(sp)
  122bb0:	dec00104 	addi	sp,sp,4
  122bb4:	f800283a 	ret

00122bb8 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  122bb8:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  122bbc:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  122bc0:	d1274817 	ldw	r4,-25312(gp)

      stw ra,  0(sp)
  122bc4:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  122bc8:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  122bcc:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  122bd0:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  122bd4:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  122bd8:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  122bdc:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  122be0:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  122be4:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  122be8:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  122bec:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  122bf0:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  122bf4:	0122e2c0 	call	122e2c <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  122bf8:	d1274317 	ldw	r4,-25332(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  122bfc:	d1673b07 	ldb	r5,-25364(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  122c00:	d1274815 	stw	r4,-25312(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  122c04:	d1673b45 	stb	r5,-25363(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  122c08:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  122c0c:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  122c10:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  122c14:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  122c18:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  122c1c:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  122c20:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  122c24:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  122c28:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  122c2c:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  122c30:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  122c34:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  122c38:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  122c3c:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  122c40:	f800283a 	ret

00122c44 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  122c44:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  122c48:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  122c4c:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  122c50:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  122c54:	0122e2c0 	call	122e2c <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  122c58:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  122c5c:	d4a73945 	stb	r18,-25371(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  122c60:	003fe506 	br	122bf8 <__alt_data_end+0xfffe2bf8>

00122c64 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  122c64:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  122c68:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  122c6c:	10800054 	ori	r2,r2,1
      wrctl status, r2
  122c70:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  122c74:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  122c78:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  122c7c:	dec00204 	addi	sp,sp,8

      callr r2
  122c80:	103ee83a 	callr	r2

      nop
  122c84:	0001883a 	nop

00122c88 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  122c88:	defff704 	addi	sp,sp,-36
  122c8c:	dfc00815 	stw	ra,32(sp)
  122c90:	df000715 	stw	fp,28(sp)
  122c94:	df000704 	addi	fp,sp,28
  122c98:	e13ffc15 	stw	r4,-16(fp)
  122c9c:	e17ffd15 	stw	r5,-12(fp)
  122ca0:	e1bffe15 	stw	r6,-8(fp)
  122ca4:	3805883a 	mov	r2,r7
  122ca8:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  122cac:	e0fffe17 	ldw	r3,-8(fp)
  122cb0:	00bfff04 	movi	r2,-4
  122cb4:	1884703a 	and	r2,r3,r2
  122cb8:	10bef704 	addi	r2,r2,-1060
  122cbc:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  122cc0:	01810904 	movi	r6,1060
  122cc4:	000b883a 	mov	r5,zero
  122cc8:	e13ff917 	ldw	r4,-28(fp)
  122ccc:	01028600 	call	102860 <memset>
  122cd0:	e0bff917 	ldw	r2,-28(fp)
  122cd4:	10c0bb04 	addi	r3,r2,748
  122cd8:	e0bff917 	ldw	r2,-28(fp)
  122cdc:	10c00115 	stw	r3,4(r2)
  122ce0:	e0bff917 	ldw	r2,-28(fp)
  122ce4:	10c0d504 	addi	r3,r2,852
  122ce8:	e0bff917 	ldw	r2,-28(fp)
  122cec:	10c00215 	stw	r3,8(r2)
  122cf0:	e0bff917 	ldw	r2,-28(fp)
  122cf4:	10c0ef04 	addi	r3,r2,956
  122cf8:	e0bff917 	ldw	r2,-28(fp)
  122cfc:	10c00315 	stw	r3,12(r2)
  122d00:	e0fff917 	ldw	r3,-28(fp)
  122d04:	008004b4 	movhi	r2,18
  122d08:	10906404 	addi	r2,r2,16784
  122d0c:	18800d15 	stw	r2,52(r3)
  122d10:	e0bff917 	ldw	r2,-28(fp)
  122d14:	00c00044 	movi	r3,1
  122d18:	10c02915 	stw	r3,164(r2)
  122d1c:	10002a15 	stw	zero,168(r2)
  122d20:	e0bff917 	ldw	r2,-28(fp)
  122d24:	00ccc384 	movi	r3,13070
  122d28:	10c02b0d 	sth	r3,172(r2)
  122d2c:	e0bff917 	ldw	r2,-28(fp)
  122d30:	00eaf344 	movi	r3,-21555
  122d34:	10c02b8d 	sth	r3,174(r2)
  122d38:	e0bff917 	ldw	r2,-28(fp)
  122d3c:	00c48d04 	movi	r3,4660
  122d40:	10c02c0d 	sth	r3,176(r2)
  122d44:	e0bff917 	ldw	r2,-28(fp)
  122d48:	00f99b44 	movi	r3,-6547
  122d4c:	10c02c8d 	sth	r3,178(r2)
  122d50:	e0bff917 	ldw	r2,-28(fp)
  122d54:	00f7bb04 	movi	r3,-8468
  122d58:	10c02d0d 	sth	r3,180(r2)
  122d5c:	e0bff917 	ldw	r2,-28(fp)
  122d60:	00c00144 	movi	r3,5
  122d64:	10c02d8d 	sth	r3,182(r2)
  122d68:	e0bff917 	ldw	r2,-28(fp)
  122d6c:	00c002c4 	movi	r3,11
  122d70:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  122d74:	e0bff917 	ldw	r2,-28(fp)
  122d78:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  122d7c:	e0bffa17 	ldw	r2,-24(fp)
  122d80:	10bff304 	addi	r2,r2,-52
  122d84:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  122d88:	e0bffb17 	ldw	r2,-20(fp)
  122d8c:	10800c04 	addi	r2,r2,48
  122d90:	e0fffc17 	ldw	r3,-16(fp)
  122d94:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  122d98:	e0bffb17 	ldw	r2,-20(fp)
  122d9c:	10800b04 	addi	r2,r2,44
  122da0:	e0fffd17 	ldw	r3,-12(fp)
  122da4:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  122da8:	e0bffb17 	ldw	r2,-20(fp)
  122dac:	10800a04 	addi	r2,r2,40
  122db0:	e0fff917 	ldw	r3,-28(fp)
  122db4:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  122db8:	008004b4 	movhi	r2,18
  122dbc:	108b1904 	addi	r2,r2,11364
  122dc0:	10c00104 	addi	r3,r2,4
  122dc4:	e0bffb17 	ldw	r2,-20(fp)
  122dc8:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  122dcc:	e0bffb17 	ldw	r2,-20(fp)
}
  122dd0:	e037883a 	mov	sp,fp
  122dd4:	dfc00117 	ldw	ra,4(sp)
  122dd8:	df000017 	ldw	fp,0(sp)
  122ddc:	dec00204 	addi	sp,sp,8
  122de0:	f800283a 	ret

00122de4 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  122de4:	defffe04 	addi	sp,sp,-8
  122de8:	df000115 	stw	fp,4(sp)
  122dec:	df000104 	addi	fp,sp,4
  122df0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  122df4:	0001883a 	nop
  122df8:	e037883a 	mov	sp,fp
  122dfc:	df000017 	ldw	fp,0(sp)
  122e00:	dec00104 	addi	sp,sp,4
  122e04:	f800283a 	ret

00122e08 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  122e08:	defffe04 	addi	sp,sp,-8
  122e0c:	df000115 	stw	fp,4(sp)
  122e10:	df000104 	addi	fp,sp,4
  122e14:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  122e18:	0001883a 	nop
  122e1c:	e037883a 	mov	sp,fp
  122e20:	df000017 	ldw	fp,0(sp)
  122e24:	dec00104 	addi	sp,sp,4
  122e28:	f800283a 	ret

00122e2c <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  122e2c:	deffff04 	addi	sp,sp,-4
  122e30:	df000015 	stw	fp,0(sp)
  122e34:	d839883a 	mov	fp,sp
}
  122e38:	0001883a 	nop
  122e3c:	e037883a 	mov	sp,fp
  122e40:	df000017 	ldw	fp,0(sp)
  122e44:	dec00104 	addi	sp,sp,4
  122e48:	f800283a 	ret

00122e4c <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  122e4c:	deffff04 	addi	sp,sp,-4
  122e50:	df000015 	stw	fp,0(sp)
  122e54:	d839883a 	mov	fp,sp
}
  122e58:	0001883a 	nop
  122e5c:	e037883a 	mov	sp,fp
  122e60:	df000017 	ldw	fp,0(sp)
  122e64:	dec00104 	addi	sp,sp,4
  122e68:	f800283a 	ret

00122e6c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  122e6c:	deffff04 	addi	sp,sp,-4
  122e70:	df000015 	stw	fp,0(sp)
  122e74:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  122e78:	0001883a 	nop
  122e7c:	e037883a 	mov	sp,fp
  122e80:	df000017 	ldw	fp,0(sp)
  122e84:	dec00104 	addi	sp,sp,4
  122e88:	f800283a 	ret

00122e8c <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  122e8c:	deffff04 	addi	sp,sp,-4
  122e90:	df000015 	stw	fp,0(sp)
  122e94:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  122e98:	0001883a 	nop
  122e9c:	e037883a 	mov	sp,fp
  122ea0:	df000017 	ldw	fp,0(sp)
  122ea4:	dec00104 	addi	sp,sp,4
  122ea8:	f800283a 	ret

00122eac <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  122eac:	deffff04 	addi	sp,sp,-4
  122eb0:	df000015 	stw	fp,0(sp)
  122eb4:	d839883a 	mov	fp,sp
}
  122eb8:	0001883a 	nop
  122ebc:	e037883a 	mov	sp,fp
  122ec0:	df000017 	ldw	fp,0(sp)
  122ec4:	dec00104 	addi	sp,sp,4
  122ec8:	f800283a 	ret

00122ecc <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  122ecc:	deffff04 	addi	sp,sp,-4
  122ed0:	df000015 	stw	fp,0(sp)
  122ed4:	d839883a 	mov	fp,sp
}
  122ed8:	0001883a 	nop
  122edc:	e037883a 	mov	sp,fp
  122ee0:	df000017 	ldw	fp,0(sp)
  122ee4:	dec00104 	addi	sp,sp,4
  122ee8:	f800283a 	ret

00122eec <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  122eec:	defffe04 	addi	sp,sp,-8
  122ef0:	df000115 	stw	fp,4(sp)
  122ef4:	df000104 	addi	fp,sp,4
  122ef8:	e13fff15 	stw	r4,-4(fp)
}
  122efc:	0001883a 	nop
  122f00:	e037883a 	mov	sp,fp
  122f04:	df000017 	ldw	fp,0(sp)
  122f08:	dec00104 	addi	sp,sp,4
  122f0c:	f800283a 	ret

00122f10 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  122f10:	defffa04 	addi	sp,sp,-24
  122f14:	dfc00515 	stw	ra,20(sp)
  122f18:	df000415 	stw	fp,16(sp)
  122f1c:	df000404 	addi	fp,sp,16
  122f20:	e13ffe15 	stw	r4,-8(fp)
  122f24:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  122f28:	e0bfff17 	ldw	r2,-4(fp)
  122f2c:	10800017 	ldw	r2,0(r2)
  122f30:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  122f34:	e13ffe17 	ldw	r4,-8(fp)
  122f38:	01031f00 	call	1031f0 <strlen>
  122f3c:	10800044 	addi	r2,r2,1
  122f40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  122f44:	00000d06 	br	122f7c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  122f48:	e0bffc17 	ldw	r2,-16(fp)
  122f4c:	10800217 	ldw	r2,8(r2)
  122f50:	e0fffd17 	ldw	r3,-12(fp)
  122f54:	180d883a 	mov	r6,r3
  122f58:	e17ffe17 	ldw	r5,-8(fp)
  122f5c:	1009883a 	mov	r4,r2
  122f60:	01231e80 	call	1231e8 <memcmp>
  122f64:	1000021e 	bne	r2,zero,122f70 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  122f68:	e0bffc17 	ldw	r2,-16(fp)
  122f6c:	00000706 	br	122f8c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  122f70:	e0bffc17 	ldw	r2,-16(fp)
  122f74:	10800017 	ldw	r2,0(r2)
  122f78:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  122f7c:	e0fffc17 	ldw	r3,-16(fp)
  122f80:	e0bfff17 	ldw	r2,-4(fp)
  122f84:	18bff01e 	bne	r3,r2,122f48 <__alt_data_end+0xfffe2f48>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  122f88:	0005883a 	mov	r2,zero
}
  122f8c:	e037883a 	mov	sp,fp
  122f90:	dfc00117 	ldw	ra,4(sp)
  122f94:	df000017 	ldw	fp,0(sp)
  122f98:	dec00204 	addi	sp,sp,8
  122f9c:	f800283a 	ret

00122fa0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  122fa0:	defffb04 	addi	sp,sp,-20
  122fa4:	dfc00415 	stw	ra,16(sp)
  122fa8:	df000315 	stw	fp,12(sp)
  122fac:	df000304 	addi	fp,sp,12
  122fb0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  122fb4:	d0a00817 	ldw	r2,-32736(gp)
  122fb8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  122fbc:	00003106 	br	123084 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  122fc0:	e0bffd17 	ldw	r2,-12(fp)
  122fc4:	10800217 	ldw	r2,8(r2)
  122fc8:	1009883a 	mov	r4,r2
  122fcc:	01031f00 	call	1031f0 <strlen>
  122fd0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  122fd4:	e0bffd17 	ldw	r2,-12(fp)
  122fd8:	10c00217 	ldw	r3,8(r2)
  122fdc:	e0bffe17 	ldw	r2,-8(fp)
  122fe0:	10bfffc4 	addi	r2,r2,-1
  122fe4:	1885883a 	add	r2,r3,r2
  122fe8:	10800003 	ldbu	r2,0(r2)
  122fec:	10803fcc 	andi	r2,r2,255
  122ff0:	1080201c 	xori	r2,r2,128
  122ff4:	10bfe004 	addi	r2,r2,-128
  122ff8:	10800bd8 	cmpnei	r2,r2,47
  122ffc:	1000031e 	bne	r2,zero,12300c <alt_find_file+0x6c>
    {
      len -= 1;
  123000:	e0bffe17 	ldw	r2,-8(fp)
  123004:	10bfffc4 	addi	r2,r2,-1
  123008:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  12300c:	e0bffe17 	ldw	r2,-8(fp)
  123010:	e0ffff17 	ldw	r3,-4(fp)
  123014:	1885883a 	add	r2,r3,r2
  123018:	10800003 	ldbu	r2,0(r2)
  12301c:	10803fcc 	andi	r2,r2,255
  123020:	1080201c 	xori	r2,r2,128
  123024:	10bfe004 	addi	r2,r2,-128
  123028:	10800be0 	cmpeqi	r2,r2,47
  12302c:	1000081e 	bne	r2,zero,123050 <alt_find_file+0xb0>
  123030:	e0bffe17 	ldw	r2,-8(fp)
  123034:	e0ffff17 	ldw	r3,-4(fp)
  123038:	1885883a 	add	r2,r3,r2
  12303c:	10800003 	ldbu	r2,0(r2)
  123040:	10803fcc 	andi	r2,r2,255
  123044:	1080201c 	xori	r2,r2,128
  123048:	10bfe004 	addi	r2,r2,-128
  12304c:	10000a1e 	bne	r2,zero,123078 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  123050:	e0bffd17 	ldw	r2,-12(fp)
  123054:	10800217 	ldw	r2,8(r2)
  123058:	e0fffe17 	ldw	r3,-8(fp)
  12305c:	180d883a 	mov	r6,r3
  123060:	e17fff17 	ldw	r5,-4(fp)
  123064:	1009883a 	mov	r4,r2
  123068:	01231e80 	call	1231e8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  12306c:	1000021e 	bne	r2,zero,123078 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  123070:	e0bffd17 	ldw	r2,-12(fp)
  123074:	00000706 	br	123094 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  123078:	e0bffd17 	ldw	r2,-12(fp)
  12307c:	10800017 	ldw	r2,0(r2)
  123080:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  123084:	e0fffd17 	ldw	r3,-12(fp)
  123088:	d0a00804 	addi	r2,gp,-32736
  12308c:	18bfcc1e 	bne	r3,r2,122fc0 <__alt_data_end+0xfffe2fc0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  123090:	0005883a 	mov	r2,zero
}
  123094:	e037883a 	mov	sp,fp
  123098:	dfc00117 	ldw	ra,4(sp)
  12309c:	df000017 	ldw	fp,0(sp)
  1230a0:	dec00204 	addi	sp,sp,8
  1230a4:	f800283a 	ret

001230a8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  1230a8:	defff804 	addi	sp,sp,-32
  1230ac:	dfc00715 	stw	ra,28(sp)
  1230b0:	df000615 	stw	fp,24(sp)
  1230b4:	dc000515 	stw	r16,20(sp)
  1230b8:	df000604 	addi	fp,sp,24
  1230bc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
  1230c0:	00bffa04 	movi	r2,-24
  1230c4:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  1230c8:	d0a73117 	ldw	r2,-25404(gp)
  1230cc:	e0bffc15 	stw	r2,-16(fp)
  1230d0:	e03ffd0d 	sth	zero,-12(fp)
  1230d4:	e0bffd0b 	ldhu	r2,-12(fp)
  1230d8:	e0fffd84 	addi	r3,fp,-10
  1230dc:	180d883a 	mov	r6,r3
  1230e0:	100b883a 	mov	r5,r2
  1230e4:	e13ffc17 	ldw	r4,-16(fp)
  1230e8:	011ee640 	call	11ee64 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  1230ec:	e03ffa15 	stw	zero,-24(fp)
  1230f0:	00001d06 	br	123168 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
  1230f4:	040004b4 	movhi	r16,18
  1230f8:	8412b104 	addi	r16,r16,19140
  1230fc:	e0bffa17 	ldw	r2,-24(fp)
  123100:	01400304 	movi	r5,12
  123104:	1009883a 	mov	r4,r2
  123108:	01160740 	call	116074 <__mulsi3>
  12310c:	8085883a 	add	r2,r16,r2
  123110:	10800017 	ldw	r2,0(r2)
  123114:	1000111e 	bne	r2,zero,12315c <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
  123118:	040004b4 	movhi	r16,18
  12311c:	8412b104 	addi	r16,r16,19140
  123120:	e0bffa17 	ldw	r2,-24(fp)
  123124:	01400304 	movi	r5,12
  123128:	1009883a 	mov	r4,r2
  12312c:	01160740 	call	116074 <__mulsi3>
  123130:	8085883a 	add	r2,r16,r2
  123134:	e0fffe17 	ldw	r3,-8(fp)
  123138:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  12313c:	d0e00c17 	ldw	r3,-32720(gp)
  123140:	e0bffa17 	ldw	r2,-24(fp)
  123144:	1880020e 	bge	r3,r2,123150 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
  123148:	e0bffa17 	ldw	r2,-24(fp)
  12314c:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
  123150:	e0bffa17 	ldw	r2,-24(fp)
  123154:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
  123158:	00000606 	br	123174 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  12315c:	e0bffa17 	ldw	r2,-24(fp)
  123160:	10800044 	addi	r2,r2,1
  123164:	e0bffa15 	stw	r2,-24(fp)
  123168:	e0bffa17 	ldw	r2,-24(fp)
  12316c:	10800810 	cmplti	r2,r2,32
  123170:	103fe01e 	bne	r2,zero,1230f4 <__alt_data_end+0xfffe30f4>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  123174:	d0a73117 	ldw	r2,-25404(gp)
  123178:	1009883a 	mov	r4,r2
  12317c:	011f1dc0 	call	11f1dc <OSSemPost>

  return rc;
  123180:	e0bffb17 	ldw	r2,-20(fp)
}
  123184:	e6ffff04 	addi	sp,fp,-4
  123188:	dfc00217 	ldw	ra,8(sp)
  12318c:	df000117 	ldw	fp,4(sp)
  123190:	dc000017 	ldw	r16,0(sp)
  123194:	dec00304 	addi	sp,sp,12
  123198:	f800283a 	ret

0012319c <atexit>:
  12319c:	200b883a 	mov	r5,r4
  1231a0:	000f883a 	mov	r7,zero
  1231a4:	000d883a 	mov	r6,zero
  1231a8:	0009883a 	mov	r4,zero
  1231ac:	01232641 	jmpi	123264 <__register_exitproc>

001231b0 <exit>:
  1231b0:	defffe04 	addi	sp,sp,-8
  1231b4:	000b883a 	mov	r5,zero
  1231b8:	dc000015 	stw	r16,0(sp)
  1231bc:	dfc00115 	stw	ra,4(sp)
  1231c0:	2021883a 	mov	r16,r4
  1231c4:	012337c0 	call	12337c <__call_exitprocs>
  1231c8:	008004b4 	movhi	r2,18
  1231cc:	10972c04 	addi	r2,r2,23728
  1231d0:	11000017 	ldw	r4,0(r2)
  1231d4:	20800f17 	ldw	r2,60(r4)
  1231d8:	10000126 	beq	r2,zero,1231e0 <exit+0x30>
  1231dc:	103ee83a 	callr	r2
  1231e0:	8009883a 	mov	r4,r16
  1231e4:	01234fc0 	call	1234fc <_exit>

001231e8 <memcmp>:
  1231e8:	01c000c4 	movi	r7,3
  1231ec:	3980192e 	bgeu	r7,r6,123254 <memcmp+0x6c>
  1231f0:	2144b03a 	or	r2,r4,r5
  1231f4:	11c4703a 	and	r2,r2,r7
  1231f8:	10000f26 	beq	r2,zero,123238 <memcmp+0x50>
  1231fc:	20800003 	ldbu	r2,0(r4)
  123200:	28c00003 	ldbu	r3,0(r5)
  123204:	10c0151e 	bne	r2,r3,12325c <memcmp+0x74>
  123208:	31bfff84 	addi	r6,r6,-2
  12320c:	01ffffc4 	movi	r7,-1
  123210:	00000406 	br	123224 <memcmp+0x3c>
  123214:	20800003 	ldbu	r2,0(r4)
  123218:	28c00003 	ldbu	r3,0(r5)
  12321c:	31bfffc4 	addi	r6,r6,-1
  123220:	10c00e1e 	bne	r2,r3,12325c <memcmp+0x74>
  123224:	21000044 	addi	r4,r4,1
  123228:	29400044 	addi	r5,r5,1
  12322c:	31fff91e 	bne	r6,r7,123214 <__alt_data_end+0xfffe3214>
  123230:	0005883a 	mov	r2,zero
  123234:	f800283a 	ret
  123238:	20c00017 	ldw	r3,0(r4)
  12323c:	28800017 	ldw	r2,0(r5)
  123240:	18bfee1e 	bne	r3,r2,1231fc <__alt_data_end+0xfffe31fc>
  123244:	31bfff04 	addi	r6,r6,-4
  123248:	21000104 	addi	r4,r4,4
  12324c:	29400104 	addi	r5,r5,4
  123250:	39bff936 	bltu	r7,r6,123238 <__alt_data_end+0xfffe3238>
  123254:	303fe91e 	bne	r6,zero,1231fc <__alt_data_end+0xfffe31fc>
  123258:	003ff506 	br	123230 <__alt_data_end+0xfffe3230>
  12325c:	10c5c83a 	sub	r2,r2,r3
  123260:	f800283a 	ret

00123264 <__register_exitproc>:
  123264:	defffa04 	addi	sp,sp,-24
  123268:	dc000315 	stw	r16,12(sp)
  12326c:	040004b4 	movhi	r16,18
  123270:	84172c04 	addi	r16,r16,23728
  123274:	80c00017 	ldw	r3,0(r16)
  123278:	dc400415 	stw	r17,16(sp)
  12327c:	dfc00515 	stw	ra,20(sp)
  123280:	18805217 	ldw	r2,328(r3)
  123284:	2023883a 	mov	r17,r4
  123288:	10003726 	beq	r2,zero,123368 <__register_exitproc+0x104>
  12328c:	10c00117 	ldw	r3,4(r2)
  123290:	010007c4 	movi	r4,31
  123294:	20c00e16 	blt	r4,r3,1232d0 <__register_exitproc+0x6c>
  123298:	1a000044 	addi	r8,r3,1
  12329c:	8800221e 	bne	r17,zero,123328 <__register_exitproc+0xc4>
  1232a0:	18c00084 	addi	r3,r3,2
  1232a4:	18c7883a 	add	r3,r3,r3
  1232a8:	18c7883a 	add	r3,r3,r3
  1232ac:	12000115 	stw	r8,4(r2)
  1232b0:	10c7883a 	add	r3,r2,r3
  1232b4:	19400015 	stw	r5,0(r3)
  1232b8:	0005883a 	mov	r2,zero
  1232bc:	dfc00517 	ldw	ra,20(sp)
  1232c0:	dc400417 	ldw	r17,16(sp)
  1232c4:	dc000317 	ldw	r16,12(sp)
  1232c8:	dec00604 	addi	sp,sp,24
  1232cc:	f800283a 	ret
  1232d0:	00800034 	movhi	r2,0
  1232d4:	10800004 	addi	r2,r2,0
  1232d8:	10002626 	beq	r2,zero,123374 <__register_exitproc+0x110>
  1232dc:	01006404 	movi	r4,400
  1232e0:	d9400015 	stw	r5,0(sp)
  1232e4:	d9800115 	stw	r6,4(sp)
  1232e8:	d9c00215 	stw	r7,8(sp)
  1232ec:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  1232f0:	d9400017 	ldw	r5,0(sp)
  1232f4:	d9800117 	ldw	r6,4(sp)
  1232f8:	d9c00217 	ldw	r7,8(sp)
  1232fc:	10001d26 	beq	r2,zero,123374 <__register_exitproc+0x110>
  123300:	81000017 	ldw	r4,0(r16)
  123304:	10000115 	stw	zero,4(r2)
  123308:	02000044 	movi	r8,1
  12330c:	22405217 	ldw	r9,328(r4)
  123310:	0007883a 	mov	r3,zero
  123314:	12400015 	stw	r9,0(r2)
  123318:	20805215 	stw	r2,328(r4)
  12331c:	10006215 	stw	zero,392(r2)
  123320:	10006315 	stw	zero,396(r2)
  123324:	883fde26 	beq	r17,zero,1232a0 <__alt_data_end+0xfffe32a0>
  123328:	18c9883a 	add	r4,r3,r3
  12332c:	2109883a 	add	r4,r4,r4
  123330:	1109883a 	add	r4,r2,r4
  123334:	21802215 	stw	r6,136(r4)
  123338:	01800044 	movi	r6,1
  12333c:	12406217 	ldw	r9,392(r2)
  123340:	30cc983a 	sll	r6,r6,r3
  123344:	4992b03a 	or	r9,r9,r6
  123348:	12406215 	stw	r9,392(r2)
  12334c:	21c04215 	stw	r7,264(r4)
  123350:	01000084 	movi	r4,2
  123354:	893fd21e 	bne	r17,r4,1232a0 <__alt_data_end+0xfffe32a0>
  123358:	11006317 	ldw	r4,396(r2)
  12335c:	218cb03a 	or	r6,r4,r6
  123360:	11806315 	stw	r6,396(r2)
  123364:	003fce06 	br	1232a0 <__alt_data_end+0xfffe32a0>
  123368:	18805304 	addi	r2,r3,332
  12336c:	18805215 	stw	r2,328(r3)
  123370:	003fc606 	br	12328c <__alt_data_end+0xfffe328c>
  123374:	00bfffc4 	movi	r2,-1
  123378:	003fd006 	br	1232bc <__alt_data_end+0xfffe32bc>

0012337c <__call_exitprocs>:
  12337c:	defff504 	addi	sp,sp,-44
  123380:	df000915 	stw	fp,36(sp)
  123384:	dd400615 	stw	r21,24(sp)
  123388:	dc800315 	stw	r18,12(sp)
  12338c:	dfc00a15 	stw	ra,40(sp)
  123390:	ddc00815 	stw	r23,32(sp)
  123394:	dd800715 	stw	r22,28(sp)
  123398:	dd000515 	stw	r20,20(sp)
  12339c:	dcc00415 	stw	r19,16(sp)
  1233a0:	dc400215 	stw	r17,8(sp)
  1233a4:	dc000115 	stw	r16,4(sp)
  1233a8:	d9000015 	stw	r4,0(sp)
  1233ac:	2839883a 	mov	fp,r5
  1233b0:	04800044 	movi	r18,1
  1233b4:	057fffc4 	movi	r21,-1
  1233b8:	008004b4 	movhi	r2,18
  1233bc:	10972c04 	addi	r2,r2,23728
  1233c0:	12000017 	ldw	r8,0(r2)
  1233c4:	45005217 	ldw	r20,328(r8)
  1233c8:	44c05204 	addi	r19,r8,328
  1233cc:	a0001c26 	beq	r20,zero,123440 <__call_exitprocs+0xc4>
  1233d0:	a0800117 	ldw	r2,4(r20)
  1233d4:	15ffffc4 	addi	r23,r2,-1
  1233d8:	b8000d16 	blt	r23,zero,123410 <__call_exitprocs+0x94>
  1233dc:	14000044 	addi	r16,r2,1
  1233e0:	8421883a 	add	r16,r16,r16
  1233e4:	8421883a 	add	r16,r16,r16
  1233e8:	84402004 	addi	r17,r16,128
  1233ec:	a463883a 	add	r17,r20,r17
  1233f0:	a421883a 	add	r16,r20,r16
  1233f4:	e0001e26 	beq	fp,zero,123470 <__call_exitprocs+0xf4>
  1233f8:	80804017 	ldw	r2,256(r16)
  1233fc:	e0801c26 	beq	fp,r2,123470 <__call_exitprocs+0xf4>
  123400:	bdffffc4 	addi	r23,r23,-1
  123404:	843fff04 	addi	r16,r16,-4
  123408:	8c7fff04 	addi	r17,r17,-4
  12340c:	bd7ff91e 	bne	r23,r21,1233f4 <__alt_data_end+0xfffe33f4>
  123410:	00800034 	movhi	r2,0
  123414:	10800004 	addi	r2,r2,0
  123418:	10000926 	beq	r2,zero,123440 <__call_exitprocs+0xc4>
  12341c:	a0800117 	ldw	r2,4(r20)
  123420:	1000301e 	bne	r2,zero,1234e4 <__call_exitprocs+0x168>
  123424:	a0800017 	ldw	r2,0(r20)
  123428:	10003226 	beq	r2,zero,1234f4 <__call_exitprocs+0x178>
  12342c:	a009883a 	mov	r4,r20
  123430:	98800015 	stw	r2,0(r19)
  123434:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  123438:	9d000017 	ldw	r20,0(r19)
  12343c:	a03fe41e 	bne	r20,zero,1233d0 <__alt_data_end+0xfffe33d0>
  123440:	dfc00a17 	ldw	ra,40(sp)
  123444:	df000917 	ldw	fp,36(sp)
  123448:	ddc00817 	ldw	r23,32(sp)
  12344c:	dd800717 	ldw	r22,28(sp)
  123450:	dd400617 	ldw	r21,24(sp)
  123454:	dd000517 	ldw	r20,20(sp)
  123458:	dcc00417 	ldw	r19,16(sp)
  12345c:	dc800317 	ldw	r18,12(sp)
  123460:	dc400217 	ldw	r17,8(sp)
  123464:	dc000117 	ldw	r16,4(sp)
  123468:	dec00b04 	addi	sp,sp,44
  12346c:	f800283a 	ret
  123470:	a0800117 	ldw	r2,4(r20)
  123474:	80c00017 	ldw	r3,0(r16)
  123478:	10bfffc4 	addi	r2,r2,-1
  12347c:	15c01426 	beq	r2,r23,1234d0 <__call_exitprocs+0x154>
  123480:	80000015 	stw	zero,0(r16)
  123484:	183fde26 	beq	r3,zero,123400 <__alt_data_end+0xfffe3400>
  123488:	95c8983a 	sll	r4,r18,r23
  12348c:	a0806217 	ldw	r2,392(r20)
  123490:	a5800117 	ldw	r22,4(r20)
  123494:	2084703a 	and	r2,r4,r2
  123498:	10000b26 	beq	r2,zero,1234c8 <__call_exitprocs+0x14c>
  12349c:	a0806317 	ldw	r2,396(r20)
  1234a0:	2088703a 	and	r4,r4,r2
  1234a4:	20000c1e 	bne	r4,zero,1234d8 <__call_exitprocs+0x15c>
  1234a8:	89400017 	ldw	r5,0(r17)
  1234ac:	d9000017 	ldw	r4,0(sp)
  1234b0:	183ee83a 	callr	r3
  1234b4:	a0800117 	ldw	r2,4(r20)
  1234b8:	15bfbf1e 	bne	r2,r22,1233b8 <__alt_data_end+0xfffe33b8>
  1234bc:	98800017 	ldw	r2,0(r19)
  1234c0:	153fcf26 	beq	r2,r20,123400 <__alt_data_end+0xfffe3400>
  1234c4:	003fbc06 	br	1233b8 <__alt_data_end+0xfffe33b8>
  1234c8:	183ee83a 	callr	r3
  1234cc:	003ff906 	br	1234b4 <__alt_data_end+0xfffe34b4>
  1234d0:	a5c00115 	stw	r23,4(r20)
  1234d4:	003feb06 	br	123484 <__alt_data_end+0xfffe3484>
  1234d8:	89000017 	ldw	r4,0(r17)
  1234dc:	183ee83a 	callr	r3
  1234e0:	003ff406 	br	1234b4 <__alt_data_end+0xfffe34b4>
  1234e4:	a0800017 	ldw	r2,0(r20)
  1234e8:	a027883a 	mov	r19,r20
  1234ec:	1029883a 	mov	r20,r2
  1234f0:	003fb606 	br	1233cc <__alt_data_end+0xfffe33cc>
  1234f4:	0005883a 	mov	r2,zero
  1234f8:	003ffb06 	br	1234e8 <__alt_data_end+0xfffe34e8>

001234fc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  1234fc:	defffd04 	addi	sp,sp,-12
  123500:	df000215 	stw	fp,8(sp)
  123504:	df000204 	addi	fp,sp,8
  123508:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  12350c:	d0273945 	stb	zero,-25371(gp)
  123510:	e0bfff17 	ldw	r2,-4(fp)
  123514:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  123518:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  12351c:	10000226 	beq	r2,zero,123528 <_exit+0x2c>
    ALT_SIM_FAIL();
  123520:	002af070 	cmpltui	zero,zero,43969
  123524:	00000106 	br	12352c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  123528:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  12352c:	003fff06 	br	12352c <__alt_data_end+0xfffe352c>
