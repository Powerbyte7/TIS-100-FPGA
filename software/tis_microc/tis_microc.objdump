
tis_microc.elf:     file format elf32-littlenios2
tis_microc.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x001001c0

Program Header:
    LOAD off    0x00001000 vaddr 0x00100000 paddr 0x00100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00100020 paddr 0x00100020 align 2**12
         filesz 0x00023a8c memsz 0x00023a8c flags r-x
    LOAD off    0x00024aac vaddr 0x00123aac paddr 0x0012568c align 2**12
         filesz 0x00001be0 memsz 0x00001be0 flags rw-
    LOAD off    0x0002726c vaddr 0x0012726c paddr 0x0012726c align 2**12
         filesz 0x00000000 memsz 0x00007408 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00100000  00100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  00100020  00100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00022cf8  001001c0  001001c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000bf4  00122eb8  00122eb8  00023eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001be0  00123aac  0012568c  00024aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00007408  0012726c  0012726c  0002726c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0012e674  0012e674  0002668c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0002668c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001430  00000000  00000000  000266b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003ab8b  00000000  00000000  00027ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000dc62  00000000  00000000  0006266b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013080  00000000  00000000  000702cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003b0c  00000000  00000000  00083350  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000052a6  00000000  00000000  00086e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00025bee  00000000  00000000  0008c102  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000b1cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002180  00000000  00000000  000b1d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000b91c2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000b91c8  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000b91d4  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000b91d5  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000b91d6  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000b91e1  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000b91ec  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  000b91f7  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001c  00000000  00000000  000b9201  2**0
                  CONTENTS, READONLY
 26 .jdi          00004fc5  00000000  00000000  000b921d  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00045780  00000000  00000000  000be1e2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00100000 l    d  .entry	00000000 .entry
00100020 l    d  .exceptions	00000000 .exceptions
001001c0 l    d  .text	00000000 .text
00122eb8 l    d  .rodata	00000000 .rodata
00123aac l    d  .rwdata	00000000 .rwdata
0012726c l    d  .bss	00000000 .bss
0012e674 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../tis_microc_bsp//obj/HAL/src/crt0.o
001001f8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00100094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
0012726c l     O .bss	00000004 cnt.3214
00127308 l     O .bss	00000010 number.3213
00127318 l     O .bss	00000010 number.3219
00000000 l    df *ABS*	00000000 tis_asm.c
00123aac l     O .rwdata	00000020 regs
00123acc l     O .rwdata	00000034 opcodes_str
00123b00 l     O .rwdata	0000000d asm_operands
00122f78 l     O .rodata	0000001a asm_codes
00000000 l    df *ABS*	00000000 tis_node.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
0012325e l     O .rodata	00000010 zeroes.4389
0012326e l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfscanf.c
00123286 l     O .rodata	00000022 basefix.4340
00000000 l    df *ABS*	00000000 vfprintf.c
001232a8 l     O .rodata	00000010 zeroes.4404
00107d78 l     F .text	000000bc __sbprintf
001232b8 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
001233c9 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
0010803c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00109b94 l     F .text	00000008 __fp_unlock
00109ba8 l     F .text	0000019c __sinit.part.1
00109d44 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00123b10 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
00123f54 l     O .rwdata	00000020 lc_ctype_charset
00123f34 l     O .rwdata	00000020 lc_message_charset
00123f74 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0012356c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strtod.c
0010d17c l     F .text	00000064 sulp
001236a0 l     O .rodata	00000014 fpinan.2773
001236b4 l     O .rodata	00000014 fpi.2737
001236c8 l     O .rodata	00000028 tinytens
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
001236f0 l     O .rodata	00000010 zeroes.4333
00123700 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 vfscanf.c
00123710 l     O .rodata	00000022 basefix.3791
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
00111fbc l     F .text	000000fc __sprint_r.part.0
00123732 l     O .rodata	00000010 zeroes.4349
001135f8 l     F .text	000000bc __sbprintf
00123742 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
00113af8 l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0011866c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00118780 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
001187ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
001188a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00118988 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00118a74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00118c48 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00125600 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00118ebc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00125604 l     O .rwdata	00000004 lockid
0012729c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00125608 l     O .rwdata	00000004 lockid
001272a4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0011a8f4 l     F .text	00000048 OS_InitMisc
0011a93c l     F .text	0000006c OS_InitRdyList
0011aaa8 l     F .text	000000e4 OS_InitTCBList
0011a814 l     F .text	000000e0 OS_InitEventList
0011a9a8 l     F .text	00000080 OS_InitTaskIdle
0011aa28 l     F .text	00000080 OS_InitTaskStat
0011ad18 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0011ca28 l     F .text	000000f4 OS_FlagTaskRdy
0011c7e8 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00120b00 l     F .text	00000034 alt_dev_reg
0012455c l     O .rwdata	0000106c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00120e74 l     F .text	000002a4 altera_avalon_jtag_uart_irq
00121118 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
001218f4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00121b34 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00121f94 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
001220f4 l     F .text	0000003c alt_get_errno
00122130 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0010c8a0 g     F .text	00000074 _mprec_log10
00125656 g     O .rwdata	00000002 OSTaskNameSize
0010c98c g     F .text	0000008c __any_on
001146a4 g     F .text	00000054 _isatty_r
00123578 g     O .rodata	00000028 __mprec_tinytens
00118b8c g     F .text	000000bc alt_main
00101858 g     F .text	000000c0 _puts_r
0012e574 g     O .bss	00000100 alt_irq
0010aad4 g     F .text	00000060 _lseek_r
0011d248 g     F .text	000000d8 OS_MemInit
0012568c g       *ABS*	00000000 __flash_rwdata_start
00120aa0 g     F .text	00000060 OSTimeSet
00116e9c g     F .text	00000088 .hidden __eqdf2
001013a4 g     F .text	000000b4 configure_node
00119568 g     F .text	00000610 OSEventPendMulti
0012e674 g       *ABS*	00000000 __alt_heap_start
0012276c g     F .text	00000024 OSTaskCreateHook
00101e30 g     F .text	00000008 strtok_r
00127350 g     O .bss	00002000 task1_stk
0010181c g     F .text	0000003c printf
0012562e g     O .rwdata	00000002 OSMboxEn
00119bd0 g     F .text	0000004c OSIntEnter
00114920 g     F .text	0000009c _wcrtomb_r
00101bbc g     F .text	0000005c __sseek
00109ef4 g     F .text	00000010 __sinit
001147c8 g     F .text	00000140 __swbuf_r
0012563e g     O .rwdata	00000002 OSQEn
0010a9f8 g     F .text	0000007c _setlocale_r
00109d4c g     F .text	00000078 __sfmoreglue
00111fa4 g     F .text	00000018 ungetc
0011923c g     F .text	000000cc __malloc_unlock
001227d4 g     F .text	00000020 OSTaskStatHook
001272ac g     O .bss	00000001 OSLockNesting
0010d1e0 g     F .text	000015e4 _strtod_r
0012567c g     O .rwdata	00000002 OSDataSize
001272ad g     O .bss	00000001 OSRunning
00110af0 g     F .text	00000100 _sfread_r
0010b804 g     F .text	0000015c memmove
00122814 g     F .text	00000020 OSInitHookBegin
00125674 g     O .rwdata	00000002 OSTmrSize
00109edc g     F .text	00000018 _cleanup
0010b960 g     F .text	000000a8 _Balloc
00101d94 g     F .text	0000009c __strtok_r
001272b0 g     O .bss	00000004 OSIdleCtr
00116f24 g     F .text	000000dc .hidden __gtdf2
001225ec g       .text	00000000 OSStartTsk
0011b048 g     F .text	000002d4 OS_TCBInit
00101220 g     F .text	00000184 tis_assembler_test
00100000 g     F .entry	0000000c __reset
0012567a g     O .rwdata	00000002 OSTmrWheelTblSize
00100020 g       *ABS*	00000000 __flash_exceptions_start
0012561a g     O .rwdata	00000002 OSEventSize
001272b4 g     O .bss	00000001 OSPrioHighRdy
00113a9c g     F .text	0000005c _fstat_r
00122790 g     F .text	00000024 OSTaskDelHook
00127270 g     O .bss	00000004 errno
00101b38 g     F .text	00000008 __seofread
001225cc g       .text	00000000 OSStartHighRdy
0011f520 g     F .text	000001e4 OSTaskCreateExt
0010f5d8 g     F .text	000013a0 ___svfiprintf_internal_r
0011c330 g     F .text	00000060 OSFlagPendGetFlagsRdy
0012565a g     O .rwdata	00000002 OSTaskStatStkSize
0011b4ac g     F .text	00000308 OSFlagAccept
0011d88c g     F .text	000000b8 OSQFlush
0011d320 g     F .text	00000140 OSQAccept
00127294 g     O .bss	00000004 alt_argv
0012d5c8 g       *ABS*	00000000 _gp
0011f374 g     F .text	000001ac OSTaskCreate
0011ee84 g     F .text	000004f0 OSTaskChangePrio
001272a8 g     O .bss	00000004 alt_heapsem
0011b31c g     F .text	00000190 OSDebugInit
0011f704 g     F .text	00000344 OSTaskDel
00100268 g     F .text	0000006c output
001243dc g     O .rwdata	00000180 alt_fd_list
0012b350 g     O .bss	00000370 OSFlagTbl
0011a5f4 g     F .text	000000b8 OS_EventTaskRemove
00122898 g     F .text	00000090 alt_find_dev
0010157c g     F .text	00000148 memcpy
00114448 g     F .text	0000025c __hexnan
00125644 g     O .rwdata	00000002 OSRdyTblSize
00109b9c g     F .text	0000000c _cleanup_r
001182dc g     F .text	000000dc .hidden __floatsidf
00122078 g     F .text	0000007c alt_io_redirect
00117000 g     F .text	000000f4 .hidden __ltdf2
00122eb8 g       *ABS*	00000000 __DTOR_END__
00101918 g     F .text	00000014 puts
00119308 g     F .text	00000120 OSEventNameGet
00125628 g     O .rwdata	00000002 OSFlagMax
0010b5a8 g     F .text	000000d8 mbrtowc
0010cfdc g     F .text	00000074 __fpclassifyd
0010c7fc g     F .text	000000a4 __ratio
00119c1c g     F .text	000000f8 OSIntExit
001135dc g     F .text	0000001c __vfiprintf_internal
00125662 g     O .rwdata	00000002 OSTCBSize
001272b5 g     O .bss	00000001 OSPrioCur
00121374 g     F .text	000002bc altera_avalon_jtag_uart_read
001017ec g     F .text	00000030 _printf_r
00100000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00115940 g     F .text	00000064 .hidden __udivsi3
001188dc g     F .text	000000ac isatty
00125648 g     O .rwdata	00000002 OSStkWidth
0010a9c8 g     F .text	00000030 iswspace
001235c8 g     O .rodata	000000c8 __mprec_tens
0012563c g     O .rwdata	00000002 OSPtrSize
0010aa74 g     F .text	0000000c __locale_charset
00115b58 g     F .text	000000c8 .hidden __lesf2
0012561c g     O .rwdata	00000002 OSEventTblSize
00114c14 g     F .text	00000074 .hidden __fixunsdfsi
00122540 g       .text	00000000 OSCtxSw
00127288 g     O .bss	00000004 __malloc_top_pad
001001fc g     F .text	0000006c input
00110a80 g     F .text	00000070 __ssrefill_r
001272b8 g     O .bss	00000004 OSTCBList
0012728c g     O .bss	00000004 alt_fd_list_lock
0010f0cc g     F .text	0000001c strtoul
001255d4 g     O .rwdata	00000004 __mb_cur_max
0010aaa4 g     F .text	0000000c _localeconv_r
0010f0e8 g     F .text	00000320 _strtoull_r
0010bd94 g     F .text	0000003c __i2b
0010a378 g     F .text	000004c8 __sfvwrite_r
0012b6c0 g     O .bss	00000c30 OSMemTbl
001272bc g     O .bss	00000001 OSTickStepState
0010d050 g     F .text	00000054 _sbrk_r
00125640 g     O .rwdata	00000002 OSQMax
0012c2f0 g     O .bss	00000800 OSTaskStatStk
0011ce84 g     F .text	000000f0 OSMemNameGet
00125620 g     O .rwdata	00000002 OSFlagEn
0010ca18 g     F .text	00000060 _read_r
00125666 g     O .rwdata	00000002 OSTimeTickHookEn
0011dd3c g     F .text	00000168 OSQPost
0011cb1c g     F .text	000000a4 OS_FlagUnlink
001255f8 g     O .rwdata	00000004 alt_max_fd
0011abe0 g     F .text	00000068 OS_MemCopy
0011ac48 g     F .text	000000d0 OS_Sched
00113790 g     F .text	000000f0 _fclose_r
0011cd94 g     F .text	000000f0 OSMemGet
0011fd30 g     F .text	000001b4 OSTaskNameSet
00109b64 g     F .text	00000030 fflush
00127284 g     O .bss	00000004 __malloc_max_sbrked_mem
001272c0 g     O .bss	00000004 OSCtxSwCtr
001227f4 g     F .text	00000020 OSTimeTickHook
0012562a g     O .rwdata	00000002 OSFlagNameSize
001040f4 g     F .text	0000198c __ssvfscanf_r
0011a6ac g     F .text	00000100 OS_EventTaskRemoveMulti
00115c20 g     F .text	000008ac .hidden __adddf3
00115a24 g     F .text	00000078 .hidden __nesf2
0011a4a4 g     F .text	00000150 OS_EventTaskWaitMulti
0010c5a4 g     F .text	0000010c __b2d
00125642 g     O .rwdata	00000002 OSQSize
00115284 g     F .text	000005c4 .hidden __umoddi3
00118ab0 g     F .text	000000dc lseek
0011e7ec g     F .text	0000020c OSSemPend
001255cc g     O .rwdata	00000004 _global_impure_ptr
0010ca78 g     F .text	00000564 _realloc_r
0012562c g     O .rwdata	00000002 OSLowestPrio
0012e674 g       *ABS*	00000000 __bss_end
00121ea4 g     F .text	000000f0 alt_iic_isr_register
00122874 g     F .text	00000024 OSTCBInitHook
00125672 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00122414 g     F .text	00000108 alt_tick
00123752 g     O .rodata	00000100 __hexdig
00114c88 g     F .text	000005fc .hidden __udivdi3
001139f8 g     F .text	00000024 _fputwc_r
00125614 g     O .rwdata	00000002 OSEventEn
001235a0 g     O .rodata	00000028 __mprec_bigtens
0010bb78 g     F .text	00000104 __s2b
0012566e g     O .rwdata	00000002 OSTmrCfgNameSize
001183b8 g     F .text	000000a8 .hidden __floatunsidf
0010c2e4 g     F .text	00000060 __mcmp
00109f14 g     F .text	00000018 __fp_lock_all
00121e58 g     F .text	0000004c alt_ic_irq_enabled
0011c948 g     F .text	000000e0 OS_FlagInit
00122378 g     F .text	0000009c alt_alarm_stop
0010eb34 g     F .text	0000001c strtol
00125650 g     O .rwdata	00000002 OSTaskIdleStkSize
001272fc g     O .bss	00000004 alt_irq_active
0011e424 g     F .text	000000b0 OSSemAccept
0011d088 g     F .text	000000d8 OSMemPut
0011cbc0 g     F .text	000001d4 OSMemCreate
001272c4 g     O .bss	00000004 OSIdleCtrMax
001000ec g     F .exceptions	000000d4 alt_irq_handler
001243b4 g     O .rwdata	00000028 alt_dev_null
00125664 g     O .rwdata	00000002 OSTicksPerSec
00122540 g       .text	00000000 OSIntCtxSw
00121b14 g     F .text	00000020 alt_dcache_flush_all
0010bc7c g     F .text	00000068 __hi0bits
00101018 g     F .text	00000208 tis_disassembler_test
0011825c g     F .text	00000080 .hidden __fixdfsi
0010e7c4 g     F .text	00000018 strtod
001272c8 g     O .bss	00000004 OSTCBFreeList
0012568c g       *ABS*	00000000 __ram_rwdata_end
0011e9f8 g     F .text	0000016c OSSemPendAbort
001255f0 g     O .rwdata	00000008 alt_dev_list
00118ef8 g     F .text	00000100 write
00125668 g     O .rwdata	00000002 OSVersionNbr
00115a9c g     F .text	000000bc .hidden __gtsf2
00123aac g       *ABS*	00000000 __ram_rodata_end
001187e8 g     F .text	000000b8 fstat
00117000 g     F .text	000000f4 .hidden __ledf2
00125610 g     O .rwdata	00000004 OSEndiannessTest
0010c05c g     F .text	00000140 __pow5mult
001120d0 g     F .text	0000150c ___vfiprintf_internal_r
0012727c g     O .bss	00000004 __nlocale_changed
001159a4 g     F .text	00000058 .hidden __umodsi3
00125622 g     O .rwdata	00000002 OSFlagGrpSize
0012e674 g       *ABS*	00000000 end
00120d2c g     F .text	00000148 altera_avalon_jtag_uart_init
0011aeb0 g     F .text	000000cc OS_TaskStat
00122eb8 g       *ABS*	00000000 __CTOR_LIST__
00140000 g       *ABS*	00000000 __alt_stack_pointer
0012196c g     F .text	0000007c alt_avalon_timer_sc_init
00118608 g     F .text	00000064 .hidden __clzsi2
00121630 g     F .text	000002c4 altera_avalon_jtag_uart_write
00109f04 g     F .text	00000004 __sfp_lock_acquire
0010b720 g     F .text	000000e4 memchr
0011ab8c g     F .text	00000054 OS_MemClr
00105a80 g     F .text	000022dc ___vfprintf_internal_r
00122610 g     F .text	0000015c OSTaskStkInit
0010192c g     F .text	00000058 _sprintf_r
0010a068 g     F .text	00000310 _free_r
0010aa80 g     F .text	00000010 __locale_mb_cur_max
0011a1fc g     F .text	00000198 OS_EventTaskRdy
00122d04 g     F .text	00000180 __call_exitprocs
001272cc g     O .bss	00000001 OSCPUUsage
00110978 g     F .text	00000108 _sungetc_r
00127278 g     O .bss	00000004 __mlocale_changed
001255d8 g     O .rwdata	00000004 __malloc_sbrk_base
001001c0 g     F .text	0000003c _start
00127300 g     O .bss	00000004 _alt_tick_rate
0011d944 g     F .text	0000028c OSQPend
0010eb50 g     F .text	00000304 _strtoll_r
001205f0 g     F .text	00000104 OSTimeDly
0010c19c g     F .text	00000148 __lshift
00127304 g     O .bss	00000004 _alt_nticks
00118c84 g     F .text	00000104 read
00120b6c g     F .text	0000005c alt_sys_init
0010f408 g     F .text	000001d0 __ssprint_r
00122bec g     F .text	00000118 __register_exitproc
001272cd g     O .bss	00000001 OSTaskCtr
001146f8 g     F .text	000000d0 strncmp
001206f4 g     F .text	0000017c OSTimeDlyHMSM
0010bdd0 g     F .text	0000028c __multiply
0012121c g     F .text	00000068 altera_avalon_jtag_uart_close
001159fc g     F .text	00000028 .hidden __mulsi3
00123aac g       *ABS*	00000000 __ram_rwdata_start
00122eb8 g       *ABS*	00000000 __ram_rodata_start
00127328 g     O .bss	00000028 __malloc_current_mallinfo
00125616 g     O .rwdata	00000002 OSEventMax
00115a24 g     F .text	00000078 .hidden __eqsf2
0010c6b0 g     F .text	0000014c __d2b
0011eb64 g     F .text	00000110 OSSemPost
00119da0 g     F .text	000000dc OSSchedUnlock
00120bc8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0010ee54 g     F .text	00000278 _strtoul_r
00122a30 g     F .text	000000f4 alt_get_fd
001272d0 g     O .bss	00000004 OSMemFreeList
00119eec g     F .text	000000b0 OSStatInit
0011c724 g     F .text	000000c4 OSFlagQuery
0012564c g     O .rwdata	00000002 OSTaskCreateExtEn
00107fe8 g     F .text	00000054 _close_r
00122b70 g     F .text	0000007c memcmp
0011a1dc g     F .text	00000020 OS_Dummy
00120c88 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0012e674 g       *ABS*	00000000 __alt_stack_base
00120cd8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
001019f0 g     F .text	0000007c sscanf
00107e94 g     F .text	00000154 __swsetup_r
0012caf0 g     O .bss	000001e0 OSQTbl
001164cc g     F .text	000009d0 .hidden __divdf3
00109dc4 g     F .text	00000118 __sfp
0010c914 g     F .text	00000078 __copybits
00123fac g     O .rwdata	00000408 __malloc_av_
00109f10 g     F .text	00000004 __sinit_lock_release
001272d4 g     O .bss	00000004 OSTCBHighRdy
001170f4 g     F .text	0000086c .hidden __muldf3
00101ae4 g     F .text	00000054 __sread
001272d8 g     O .bss	00000004 OSQFreeList
00122928 g     F .text	00000108 alt_find_file
00121b70 g     F .text	000000a4 alt_dev_llist_insert
0011911c g     F .text	00000120 __malloc_lock
00118e0c g     F .text	000000b0 sbrk
00101e38 g     F .text	000022bc ___svfprintf_internal_r
00119428 g     F .text	00000140 OSEventNameSet
00109b08 g     F .text	0000005c _fflush_r
001136b4 g     F .text	000000dc _calloc_r
001272dc g     O .bss	00000001 OSRdyGrp
0012726c g       *ABS*	00000000 __bss_start
001016c4 g     F .text	00000128 memset
001002d4 g     F .text	000000dc main
00127298 g     O .bss	00000004 alt_envp
00127280 g     O .bss	00000004 __malloc_max_total_mem
00120c28 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
001007b0 g     F .text	00000080 tis_register_encode
00114908 g     F .text	00000018 __swbuf
00123974 g     O .rodata	00000100 OSUnMapTbl
00115b58 g     F .text	000000c8 .hidden __ltsf2
00125646 g     O .rwdata	00000002 OSSemEn
0011c390 g     F .text	00000394 OSFlagPost
00101c18 g     F .text	00000008 __sclose
00140000 g       *ABS*	00000000 __alt_heap_limit
00113880 g     F .text	00000014 fclose
0011a394 g     F .text	00000110 OS_EventTaskWait
00129350 g     O .bss	00002000 task2_stk
0010e8dc g     F .text	00000258 _strtol_r
00118460 g     F .text	000001a8 .hidden __truncdfsf2
0011af7c g     F .text	000000cc OS_TaskStatStkChk
0011fa48 g     F .text	00000150 OSTaskDelReq
00108264 g     F .text	00001688 _dtoa_r
0010acf0 g     F .text	0000080c _malloc_r
00114a7c g     F .text	00000030 __ascii_wctomb
001255fc g     O .rwdata	00000004 alt_errno
00119e7c g     F .text	00000070 OSStart
00111d3c g     F .text	000000d4 __submore
001190bc g     F .text	00000060 __env_unlock
0010a840 g     F .text	000000c4 _fwalk
0011fee4 g     F .text	000001d4 OSTaskResume
0011d160 g     F .text	000000e8 OSMemQuery
001008c8 g     F .text	00000064 tis_imm11_encode
00125658 g     O .rwdata	00000002 OSTaskStatEn
0010b6c4 g     F .text	0000005c _mbtowc_r
00125632 g     O .rwdata	00000002 OSMemMax
0011dea4 g     F .text	00000170 OSQPostFront
00115848 g     F .text	00000084 .hidden __divsi3
001272dd g     O .bss	00000003 OSRdyTbl
0012560c g     O .rwdata	00000002 OSDebugEn
00109f44 g     F .text	00000124 _malloc_trim_r
00122eb8 g       *ABS*	00000000 __CTOR_END__
00125624 g     O .rwdata	00000002 OSFlagNodeSize
0012566c g     O .rwdata	00000002 OSTmrCfgMax
00101c20 g     F .text	000000dc strcmp
0011d460 g     F .text	000001ac OSQCreate
0011fb98 g     F .text	00000198 OSTaskNameGet
00122eb8 g       *ABS*	00000000 __flash_rodata_start
0011e014 g     F .text	0000020c OSQPostOpt
00119f9c g     F .text	00000220 OSTimeTick
00125654 g     O .rwdata	00000002 OSTaskMax
00122eb8 g       *ABS*	00000000 __DTOR_LIST__
001003b0 g     F .text	00000400 tis_dissassemble
0011e4d4 g     F .text	000000d8 OSSemCreate
00125678 g     O .rwdata	00000002 OSTmrWheelSize
0010092c g     F .text	000006ec tis_assemble_program
00116e9c g     F .text	00000088 .hidden __nedf2
0012564e g     O .rwdata	00000002 OSTaskDelEn
0011ec74 g     F .text	00000110 OSSemQuery
0011d60c g     F .text	00000280 OSQDel
0011dbd0 g     F .text	0000016c OSQPendAbort
00120b34 g     F .text	00000038 alt_irq_init
00118d88 g     F .text	00000084 alt_release_fd
00101984 g     F .text	0000006c sprintf
00123852 g     O .rodata	00000100 .hidden __clz_tab
00127274 g     O .bss	00000004 _PathLocale
0010e7dc g     F .text	00000100 strtof
00122b24 g     F .text	00000014 atexit
00115a9c g     F .text	000000bc .hidden __gesf2
00107e34 g     F .text	00000060 _write_r
00119d14 g     F .text	0000008c OSSchedLock
0010aab0 g     F .text	00000018 setlocale
0011b7b4 g     F .text	00000108 OSFlagCreate
00100830 g     F .text	00000098 tis_opcode_encode
0010d174 g     F .text	00000008 nanf
001255d0 g     O .rwdata	00000004 _impure_ptr
00127290 g     O .bss	00000004 alt_argc
001098ec g     F .text	0000021c __sflush_r
0010b4fc g     F .text	000000ac _mbrtowc_r
00121c74 g     F .text	00000060 _do_dtors
0010aa9c g     F .text	00000008 __locale_cjk_lang
0012561e g     O .rwdata	00000002 OSEventMultiEn
0011b8bc g     F .text	00000248 OSFlagDel
001272e0 g     O .bss	00000004 OSEventFreeList
00100020 g       .exceptions	00000000 alt_irq_entry
0010b680 g     F .text	00000044 __ascii_mbtowc
0010c540 g     F .text	00000064 __ulp
0011bd78 g     F .text	000005b8 OSFlagPend
0012566a g     O .rwdata	00000002 OSTmrEn
00109f2c g     F .text	00000018 __fp_unlock_all
001255e8 g     O .rwdata	00000008 alt_fs_list
0011ad8c g     F .text	00000074 OS_StrCopy
00125634 g     O .rwdata	00000002 OSMemNameSize
00122834 g     F .text	00000020 OSInitHookEnd
00110bf0 g     F .text	0000114c __ssvfiscanf_r
00100020 g       *ABS*	00000000 __ram_exceptions_start
00125660 g     O .rwdata	00000002 OSTCBPrioTblMax
0010aac8 g     F .text	0000000c localeconv
0012565c g     O .rwdata	00000002 OSTaskStatStkChkEn
00121cf4 g     F .text	00000050 alt_ic_isr_register
00125630 g     O .rwdata	00000002 OSMemEn
00101a6c g     F .text	00000078 _sscanf_r
0012563a g     O .rwdata	00000002 OSMutexEn
0012568c g       *ABS*	00000000 _edata
0012e674 g       *ABS*	00000000 _end
001272e4 g     O .bss	00000001 OSIntNesting
00113894 g     F .text	00000164 __fputwc
001001c0 g       *ABS*	00000000 __ram_exceptions_end
00121284 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00120870 g     F .text	000001d4 OSTimeDlyResume
0011bc2c g     F .text	0000014c OSFlagNameSet
001200b8 g     F .text	000001c0 OSTaskStkChk
00121dcc g     F .text	0000008c alt_ic_irq_disable
00125636 g     O .rwdata	00000002 OSMemSize
00101b40 g     F .text	0000007c __swrite
001255dc g     O .rwdata	00000004 __malloc_trim_threshold
0012251c g     F .text	00000024 altera_nios2_qsys_irq_init
0010aa90 g     F .text	0000000c __locale_msgcharset
001272e8 g     O .bss	00000004 OSTCBCur
00122b38 g     F .text	00000038 exit
00125638 g     O .rwdata	00000002 OSMemTblSize
0010a904 g     F .text	000000c4 _fwalk_reent
0010c344 g     F .text	000001fc __mdiff
001158cc g     F .text	00000074 .hidden __modsi3
001255c8 g     O .rwdata	00000004 __ctype_ptr__
00140000 g       *ABS*	00000000 __alt_data_end
00100020 g     F .exceptions	00000000 alt_exception
00109f08 g     F .text	00000004 __sfp_lock_release
00119b78 g     F .text	00000058 OSInit
0012045c g     F .text	00000124 OSTaskQuery
0011e37c g     F .text	000000a8 OS_QInit
0010d0a4 g     F .text	000000d0 __sccl
0011ae00 g     F .text	00000054 OS_StrLen
0011cf74 g     F .text	00000114 OSMemNameSet
001232c8 g     O .rodata	00000101 _ctype_
00125652 g     O .rwdata	00000002 OSTaskProfileEn
001272ec g     O .bss	00000004 OSTime
001255e0 g     O .rwdata	00000004 __mbtowc
0012ccd0 g     O .bss	00000800 OSTaskIdleStk
00122e84 g     F .text	00000034 _exit
001219e8 g     F .text	0000012c alt_alarm_start
0011bb04 g     F .text	00000128 OSFlagNameGet
00120a44 g     F .text	0000005c OSTimeGet
00101458 g     F .text	00000124 node_info
00114b08 g     F .text	0000010c .hidden __muldi3
0010ab34 g     F .text	000001bc __smakebuf_r
00101cfc g     F .text	00000098 strlen
001227b4 g     F .text	00000020 OSTaskSwHook
0012221c g     F .text	0000015c open
0012d4d0 g     O .bss	00000b40 OSEventTbl
00116f24 g     F .text	000000dc .hidden __gedf2
0012e010 g     O .bss	00000510 OSTCBTbl
00113bf8 g     F .text	00000850 __gethex
0011ed84 g     F .text	00000100 OSSemSet
001255e4 g     O .rwdata	00000004 __wctomb
001120b8 g     F .text	00000018 __sprint_r
00121cd4 g     F .text	00000020 alt_icache_flush_all
00125680 g     O .rwdata	00000004 alt_priority_mask
0011e5ac g     F .text	00000240 OSSemDel
001272f0 g     O .bss	00000004 OSFlagFreeList
00121d44 g     F .text	00000088 alt_ic_irq_enable
00125618 g     O .rwdata	00000002 OSEventNameSize
00107d5c g     F .text	0000001c __vfprintf_internal
001272f4 g     O .bss	00000001 OSStatRdy
0012e520 g     O .bss	00000054 OSTCBPrioTbl
00114aac g     F .text	0000005c _wctomb_r
00118ff8 g     F .text	000000c4 __env_lock
0012565e g     O .rwdata	00000002 OSTaskSwHookEn
00117960 g     F .text	000008fc .hidden __subdf3
0010bce4 g     F .text	000000b0 __lo0bits
00125684 g     O .rwdata	00000008 alt_alarm_list
00111e10 g     F .text	00000194 _ungetc_r
00125626 g     O .rwdata	00000002 OSFlagWidth
00121c14 g     F .text	00000060 _do_ctors
001149bc g     F .text	000000c0 wcrtomb
001186a8 g     F .text	000000d8 close
001272a0 g     O .bss	00000004 alt_envsem
001272f8 g     O .bss	00000004 OSIdleCtrRun
0011a1bc g     F .text	00000020 OSVersion
00125670 g     O .rwdata	00000002 OSTmrCfgWheelSize
001189f0 g     F .text	00000084 alt_load
00120580 g     F .text	00000070 OS_TaskStkClr
0012564a g     O .rwdata	00000002 OSTaskCreateEn
0011a7ac g     F .text	00000068 OS_EventWaitListInit
00113a1c g     F .text	00000080 fputwc
00122854 g     F .text	00000020 OSTaskIdleHook
00109f0c g     F .text	00000004 __sinit_lock_acquire
0010ba30 g     F .text	00000148 __multadd
00120278 g     F .text	000001e4 OSTaskSuspend
0010ba08 g     F .text	00000028 _Bfree
0011ae54 g     F .text	0000005c OS_TaskIdle
00125676 g     O .rwdata	00000002 OSTmrTblSize
0011e220 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00100000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  100000:	00400434 	movhi	at,16
    ori r1, r1, %lo(_start)
  100004:	08407014 	ori	at,at,448
    jmp r1
  100008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  10002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  10003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  10004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  10005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  10006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  10007c:	10000326 	beq	r2,zero,10008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  100080:	20000226 	beq	r4,zero,10008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  100084:	01000ec0 	call	1000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  100088:	00000306 	br	100098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  10008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  100090:	e8bfff17 	ldw	r2,-4(ea)

00100094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  100094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  100098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  10009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  1000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  1000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  1000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  1000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  1000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  1000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  1000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  1000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  1000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  1000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  1000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  1000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  1000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  1000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  1000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  1000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  1000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  1000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  1000e8:	ef80083a 	eret

001000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  1000ec:	defff904 	addi	sp,sp,-28
  1000f0:	dfc00615 	stw	ra,24(sp)
  1000f4:	df000515 	stw	fp,20(sp)
  1000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  1000fc:	0119bd00 	call	119bd0 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  100100:	0005313a 	rdctl	r2,ipending
  100104:	e0bffe15 	stw	r2,-8(fp)

  return active;
  100108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  10010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  100110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  100114:	00800044 	movi	r2,1
  100118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  10011c:	e0fffb17 	ldw	r3,-20(fp)
  100120:	e0bffc17 	ldw	r2,-16(fp)
  100124:	1884703a 	and	r2,r3,r2
  100128:	10001426 	beq	r2,zero,10017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  10012c:	008004f4 	movhi	r2,19
  100130:	10b95d04 	addi	r2,r2,-6796
  100134:	e0fffd17 	ldw	r3,-12(fp)
  100138:	180690fa 	slli	r3,r3,3
  10013c:	10c5883a 	add	r2,r2,r3
  100140:	10c00017 	ldw	r3,0(r2)
  100144:	008004f4 	movhi	r2,19
  100148:	10b95d04 	addi	r2,r2,-6796
  10014c:	e13ffd17 	ldw	r4,-12(fp)
  100150:	200890fa 	slli	r4,r4,3
  100154:	1105883a 	add	r2,r2,r4
  100158:	10800104 	addi	r2,r2,4
  10015c:	10800017 	ldw	r2,0(r2)
  100160:	1009883a 	mov	r4,r2
  100164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  100168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  10016c:	0005313a 	rdctl	r2,ipending
  100170:	e0bfff15 	stw	r2,-4(fp)

  return active;
  100174:	e0bfff17 	ldw	r2,-4(fp)
  100178:	00000706 	br	100198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  10017c:	e0bffc17 	ldw	r2,-16(fp)
  100180:	1085883a 	add	r2,r2,r2
  100184:	e0bffc15 	stw	r2,-16(fp)
      i++;
  100188:	e0bffd17 	ldw	r2,-12(fp)
  10018c:	10800044 	addi	r2,r2,1
  100190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  100194:	003fe106 	br	10011c <__alt_data_end+0xfffc011c>

    active = alt_irq_pending ();
  100198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  10019c:	e0bffb17 	ldw	r2,-20(fp)
  1001a0:	103fdb1e 	bne	r2,zero,100110 <__alt_data_end+0xfffc0110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  1001a4:	0119c1c0 	call	119c1c <OSIntExit>
}
  1001a8:	0001883a 	nop
  1001ac:	e037883a 	mov	sp,fp
  1001b0:	dfc00117 	ldw	ra,4(sp)
  1001b4:	df000017 	ldw	fp,0(sp)
  1001b8:	dec00204 	addi	sp,sp,8
  1001bc:	f800283a 	ret

Disassembly of section .text:

001001c0 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  1001c0:	06c00534 	movhi	sp,20
    ori sp, sp, %lo(__alt_stack_pointer)
  1001c4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  1001c8:	068004b4 	movhi	gp,18
    ori gp, gp, %lo(_gp)
  1001cc:	d6b57214 	ori	gp,gp,54728
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  1001d0:	008004b4 	movhi	r2,18
    ori r2, r2, %lo(__bss_start)
  1001d4:	109c9b14 	ori	r2,r2,29292

    movhi r3, %hi(__bss_end)
  1001d8:	00c004b4 	movhi	r3,18
    ori r3, r3, %lo(__bss_end)
  1001dc:	18f99d14 	ori	r3,r3,58996

    beq r2, r3, 1f
  1001e0:	10c00326 	beq	r2,r3,1001f0 <_start+0x30>

0:
    stw zero, (r2)
  1001e4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  1001e8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  1001ec:	10fffd36 	bltu	r2,r3,1001e4 <__alt_data_end+0xfffc01e4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  1001f0:	01189f00 	call	1189f0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  1001f4:	0118b8c0 	call	118b8c <alt_main>

001001f8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  1001f8:	003fff06 	br	1001f8 <__alt_data_end+0xfffc01f8>

001001fc <input>:
#define TIS_INPUT ((volatile uint16_t*) (TIS_STACK_INPUT_BASE+0x2))
#define TIS_OUTPUT ((volatile uint16_t*) (TIS_STACK_OUTPUT_BASE+0x2))


void input(void* pdata)
{
  1001fc:	defffd04 	addi	sp,sp,-12
  100200:	dfc00215 	stw	ra,8(sp)
  100204:	df000115 	stw	fp,4(sp)
  100208:	df000104 	addi	fp,sp,4
  10020c:	e13fff15 	stw	r4,-4(fp)
  static char number[16] = "";
  static int cnt = 0;
  while (1)
  { 
	  sprintf(number, "> %d", cnt);
  100210:	d0a72917 	ldw	r2,-25436(gp)
  100214:	100d883a 	mov	r6,r2
  100218:	014004b4 	movhi	r5,18
  10021c:	294bae04 	addi	r5,r5,11960
  100220:	010004b4 	movhi	r4,18
  100224:	211cc204 	addi	r4,r4,29448
  100228:	01019840 	call	101984 <sprintf>
	  puts(number);
  10022c:	010004b4 	movhi	r4,18
  100230:	211cc204 	addi	r4,r4,29448
  100234:	01019180 	call	101918 <puts>
	  *TIS_INPUT = cnt;
  100238:	00801584 	movi	r2,86
  10023c:	d0e72917 	ldw	r3,-25436(gp)
  100240:	10c0000d 	sth	r3,0(r2)
	  cnt += 1;
  100244:	d0a72917 	ldw	r2,-25436(gp)
  100248:	10800044 	addi	r2,r2,1
  10024c:	d0a72915 	stw	r2,-25436(gp)
    OSTimeDlyHMSM(0, 0, 1, 0);
  100250:	000f883a 	mov	r7,zero
  100254:	01800044 	movi	r6,1
  100258:	000b883a 	mov	r5,zero
  10025c:	0009883a 	mov	r4,zero
  100260:	01206f40 	call	1206f4 <OSTimeDlyHMSM>
  }
  100264:	003fea06 	br	100210 <__alt_data_end+0xfffc0210>

00100268 <output>:
}

void output(void* pdata)
{
  100268:	defffc04 	addi	sp,sp,-16
  10026c:	dfc00315 	stw	ra,12(sp)
  100270:	df000215 	stw	fp,8(sp)
  100274:	df000204 	addi	fp,sp,8
  100278:	e13fff15 	stw	r4,-4(fp)
  static char number[16] = "";
  while (1)
  { 
    OSTimeDlyHMSM(0, 0, 0, 100);
  10027c:	01c01904 	movi	r7,100
  100280:	000d883a 	mov	r6,zero
  100284:	000b883a 	mov	r5,zero
  100288:	0009883a 	mov	r4,zero
  10028c:	01206f40 	call	1206f4 <OSTimeDlyHMSM>
    // Read stack
    int val = *TIS_OUTPUT;
  100290:	00801484 	movi	r2,82
  100294:	1080000b 	ldhu	r2,0(r2)
  100298:	10bfffcc 	andi	r2,r2,65535
  10029c:	e0bffe15 	stw	r2,-8(fp)

    if (val != 0xFFFF) {
  1002a0:	e0fffe17 	ldw	r3,-8(fp)
  1002a4:	00bfffd4 	movui	r2,65535
  1002a8:	18bff426 	beq	r3,r2,10027c <__alt_data_end+0xfffc027c>
    	sprintf(number, "< %d", val);
  1002ac:	e1bffe17 	ldw	r6,-8(fp)
  1002b0:	014004b4 	movhi	r5,18
  1002b4:	294bb004 	addi	r5,r5,11968
  1002b8:	010004b4 	movhi	r4,18
  1002bc:	211cc604 	addi	r4,r4,29464
  1002c0:	01019840 	call	101984 <sprintf>
    	puts(number);
  1002c4:	010004b4 	movhi	r4,18
  1002c8:	211cc604 	addi	r4,r4,29464
  1002cc:	01019180 	call	101918 <puts>
    }
  }
  1002d0:	003fea06 	br	10027c <__alt_data_end+0xfffc027c>

001002d4 <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
  1002d4:	defff904 	addi	sp,sp,-28
  1002d8:	dfc00615 	stw	ra,24(sp)
  1002dc:	df000515 	stw	fp,20(sp)
  1002e0:	df000504 	addi	fp,sp,20

//	*TIS_NODE_CONFIG = 0; // 1 Instruction
//	TIS_NODE_INSTR[0] = 0xD802; // MOV UP, DOWN

	*TIS_NODE_CONFIG = 2; // 3 Instructions
  1002e4:	00800804 	movi	r2,32
  1002e8:	00c00084 	movi	r3,2
  1002ec:	10c0000d 	sth	r3,0(r2)
	 TIS_NODE_INSTR[0] = 0xC802; // MOV UP, ACC
  1002f0:	00800884 	movi	r2,34
  1002f4:	00f20084 	movi	r3,-14334
  1002f8:	10c0000d 	sth	r3,0(r2)
	 TIS_NODE_INSTR[1] = 0x0801; // ADD ACC (Multiply each number by 2)
  1002fc:	00800904 	movi	r2,36
  100300:	00c20044 	movi	r3,2049
  100304:	10c0000d 	sth	r3,0(r2)
	 TIS_NODE_INSTR[2] = 0xD801; // MOV ACC, DOWN
  100308:	00800984 	movi	r2,38
  10030c:	00f60044 	movi	r3,-10239
  100310:	10c0000d 	sth	r3,0(r2)

  OSTaskCreateExt(input,
  100314:	d8000415 	stw	zero,16(sp)
  100318:	d8000315 	stw	zero,12(sp)
  10031c:	00820004 	movi	r2,2048
  100320:	d8800215 	stw	r2,8(sp)
  100324:	008004b4 	movhi	r2,18
  100328:	109cd404 	addi	r2,r2,29520
  10032c:	d8800115 	stw	r2,4(sp)
  100330:	00800044 	movi	r2,1
  100334:	d8800015 	stw	r2,0(sp)
  100338:	01c00044 	movi	r7,1
  10033c:	018004f4 	movhi	r6,19
  100340:	31a4d304 	addi	r6,r6,-27828
  100344:	000b883a 	mov	r5,zero
  100348:	01000434 	movhi	r4,16
  10034c:	21007f04 	addi	r4,r4,508
  100350:	011f5200 	call	11f520 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSTaskCreateExt(output,
  100354:	d8000415 	stw	zero,16(sp)
  100358:	d8000315 	stw	zero,12(sp)
  10035c:	00820004 	movi	r2,2048
  100360:	d8800215 	stw	r2,8(sp)
  100364:	008004f4 	movhi	r2,19
  100368:	10a4d404 	addi	r2,r2,-27824
  10036c:	d8800115 	stw	r2,4(sp)
  100370:	00800084 	movi	r2,2
  100374:	d8800015 	stw	r2,0(sp)
  100378:	01c00084 	movi	r7,2
  10037c:	018004f4 	movhi	r6,19
  100380:	31acd304 	addi	r6,r6,-19636
  100384:	000b883a 	mov	r5,zero
  100388:	01000434 	movhi	r4,16
  10038c:	21009a04 	addi	r4,r4,616
  100390:	011f5200 	call	11f520 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSStart();
  100394:	0119e7c0 	call	119e7c <OSStart>
  return 0;
  100398:	0005883a 	mov	r2,zero
}
  10039c:	e037883a 	mov	sp,fp
  1003a0:	dfc00117 	ldw	ra,4(sp)
  1003a4:	df000017 	ldw	fp,0(sp)
  1003a8:	dec00204 	addi	sp,sp,8
  1003ac:	f800283a 	ret

001003b0 <tis_dissassemble>:
    [NOP] = "NOP", [MOV] = "MOV", [ADD] = "ADD", [SUB] = "SUB", [SWP] = "SWP",
    [SAV] = "SAV", [NEG] = "NEG", [JMP] = "JMP", [JEZ] = "JEZ", [JNZ] = "JNZ",
    [JGZ] = "JGZ", [JLZ] = "JLZ", [JRO] = "JRO",
};

int tis_dissassemble(uint16_t instruction, char *buffer) {
  1003b0:	defff304 	addi	sp,sp,-52
  1003b4:	dfc00c15 	stw	ra,48(sp)
  1003b8:	df000b15 	stw	fp,44(sp)
  1003bc:	df000b04 	addi	fp,sp,44
  1003c0:	2005883a 	mov	r2,r4
  1003c4:	e17fff15 	stw	r5,-4(fp)
  1003c8:	e0bffe0d 	sth	r2,-8(fp)
    if (instruction == 0) {
  1003cc:	e0bffe0b 	ldhu	r2,-8(fp)
  1003d0:	10000a1e 	bne	r2,zero,1003fc <tis_dissassemble+0x4c>
        return sprintf(buffer, "NOP");
  1003d4:	e0bfff17 	ldw	r2,-4(fp)
  1003d8:	00c01384 	movi	r3,78
  1003dc:	10c00005 	stb	r3,0(r2)
  1003e0:	00c013c4 	movi	r3,79
  1003e4:	10c00045 	stb	r3,1(r2)
  1003e8:	00c01404 	movi	r3,80
  1003ec:	10c00085 	stb	r3,2(r2)
  1003f0:	100000c5 	stb	zero,3(r2)
  1003f4:	008000c4 	movi	r2,3
  1003f8:	0000e806 	br	10079c <tis_dissassemble+0x3ec>
    } 
    
    // MOV instructions
    if (instruction & 0x8000 && instruction & 0x4000) {
  1003fc:	e0bffe0b 	ldhu	r2,-8(fp)
  100400:	10bfffcc 	andi	r2,r2,65535
  100404:	10a0001c 	xori	r2,r2,32768
  100408:	10a00004 	addi	r2,r2,-32768
  10040c:	1000200e 	bge	r2,zero,100490 <tis_dissassemble+0xe0>
  100410:	e0bffe0b 	ldhu	r2,-8(fp)
  100414:	1090000c 	andi	r2,r2,16384
  100418:	10001d26 	beq	r2,zero,100490 <tis_dissassemble+0xe0>
        // MOV <SRC>, <DST>
        tis_reg_t src = instruction & register_mask;
  10041c:	e0bffe0b 	ldhu	r2,-8(fp)
  100420:	108001cc 	andi	r2,r2,7
  100424:	e0bff715 	stw	r2,-36(fp)
        tis_reg_t dst = (instruction >> 11) & register_mask;
  100428:	e0bffe0b 	ldhu	r2,-8(fp)
  10042c:	1004d2fa 	srli	r2,r2,11
  100430:	10bfffcc 	andi	r2,r2,65535
  100434:	108001cc 	andi	r2,r2,7
  100438:	e0bff815 	stw	r2,-32(fp)
        return sprintf(buffer, "MOV %s, %s", regs[src], regs[dst]);
  10043c:	008004b4 	movhi	r2,18
  100440:	108eab04 	addi	r2,r2,15020
  100444:	e0fff717 	ldw	r3,-36(fp)
  100448:	18c7883a 	add	r3,r3,r3
  10044c:	18c7883a 	add	r3,r3,r3
  100450:	10c5883a 	add	r2,r2,r3
  100454:	11000017 	ldw	r4,0(r2)
  100458:	008004b4 	movhi	r2,18
  10045c:	108eab04 	addi	r2,r2,15020
  100460:	e0fff817 	ldw	r3,-32(fp)
  100464:	18c7883a 	add	r3,r3,r3
  100468:	18c7883a 	add	r3,r3,r3
  10046c:	10c5883a 	add	r2,r2,r3
  100470:	10800017 	ldw	r2,0(r2)
  100474:	100f883a 	mov	r7,r2
  100478:	200d883a 	mov	r6,r4
  10047c:	014004b4 	movhi	r5,18
  100480:	294bcb04 	addi	r5,r5,12076
  100484:	e13fff17 	ldw	r4,-4(fp)
  100488:	01019840 	call	101984 <sprintf>
  10048c:	0000c306 	br	10079c <tis_dissassemble+0x3ec>
    } else if (instruction & 0x8000) {
  100490:	e0bffe0b 	ldhu	r2,-8(fp)
  100494:	10bfffcc 	andi	r2,r2,65535
  100498:	10a0001c 	xori	r2,r2,32768
  10049c:	10a00004 	addi	r2,r2,-32768
  1004a0:	1000150e 	bge	r2,zero,1004f8 <tis_dissassemble+0x148>
        // MOV #<imm11>, <DST>
        tis_reg_t dst = (instruction >> 11) & register_mask;
  1004a4:	e0bffe0b 	ldhu	r2,-8(fp)
  1004a8:	1004d2fa 	srli	r2,r2,11
  1004ac:	10bfffcc 	andi	r2,r2,65535
  1004b0:	108001cc 	andi	r2,r2,7
  1004b4:	e0bff915 	stw	r2,-28(fp)
        return sprintf(buffer, "MOV %d, %s", instruction & imm11_mask,
  1004b8:	e0bffe0b 	ldhu	r2,-8(fp)
  1004bc:	1101ffcc 	andi	r4,r2,2047
  1004c0:	008004b4 	movhi	r2,18
  1004c4:	108eab04 	addi	r2,r2,15020
  1004c8:	e0fff917 	ldw	r3,-28(fp)
  1004cc:	18c7883a 	add	r3,r3,r3
  1004d0:	18c7883a 	add	r3,r3,r3
  1004d4:	10c5883a 	add	r2,r2,r3
  1004d8:	10800017 	ldw	r2,0(r2)
  1004dc:	100f883a 	mov	r7,r2
  1004e0:	200d883a 	mov	r6,r4
  1004e4:	014004b4 	movhi	r5,18
  1004e8:	294bce04 	addi	r5,r5,12088
  1004ec:	e13fff17 	ldw	r4,-4(fp)
  1004f0:	01019840 	call	101984 <sprintf>
  1004f4:	0000a906 	br	10079c <tis_dissassemble+0x3ec>
                       regs[dst]);
    } 
    
    // Jump instructions
    if (instruction & 0x4000 && instruction & 0x2000) {
  1004f8:	e0bffe0b 	ldhu	r2,-8(fp)
  1004fc:	1090000c 	andi	r2,r2,16384
  100500:	10004826 	beq	r2,zero,100624 <tis_dissassemble+0x274>
  100504:	e0bffe0b 	ldhu	r2,-8(fp)
  100508:	1088000c 	andi	r2,r2,8192
  10050c:	10004526 	beq	r2,zero,100624 <tis_dissassemble+0x274>
        if (instruction & 0x1000) {
  100510:	e0bffe0b 	ldhu	r2,-8(fp)
  100514:	1084000c 	andi	r2,r2,4096
  100518:	10003226 	beq	r2,zero,1005e4 <tis_dissassemble+0x234>
            // JMP, JEZ, JNZ, JLZ, JGZ
            tis_opcode_t opcode;
            switch (instruction & (~imm6_mask)) {
  10051c:	e0fffe0b 	ldhu	r3,-8(fp)
  100520:	00bff004 	movi	r2,-64
  100524:	1884703a 	and	r2,r3,r2
  100528:	10dc2020 	cmpeqi	r3,r2,28800
  10052c:	1800181e 	bne	r3,zero,100590 <tis_dissassemble+0x1e0>
  100530:	10dc2048 	cmpgei	r3,r2,28801
  100534:	1800051e 	bne	r3,zero,10054c <tis_dissassemble+0x19c>
  100538:	10dc0020 	cmpeqi	r3,r2,28672
  10053c:	1800081e 	bne	r3,zero,100560 <tis_dissassemble+0x1b0>
  100540:	109c1020 	cmpeqi	r2,r2,28736
  100544:	1000091e 	bne	r2,zero,10056c <tis_dissassemble+0x1bc>
  100548:	00001406 	br	10059c <tis_dissassemble+0x1ec>
  10054c:	10dc4020 	cmpeqi	r3,r2,28928
  100550:	18000c1e 	bne	r3,zero,100584 <tis_dissassemble+0x1d4>
  100554:	109c4420 	cmpeqi	r2,r2,28944
  100558:	1000071e 	bne	r2,zero,100578 <tis_dissassemble+0x1c8>
  10055c:	00000f06 	br	10059c <tis_dissassemble+0x1ec>
                case 0x7000:
                    opcode = JMP;
  100560:	008001c4 	movi	r2,7
  100564:	e0bff515 	stw	r2,-44(fp)
                    break;
  100568:	00000e06 	br	1005a4 <tis_dissassemble+0x1f4>
                case 0x7040:
                    opcode = JEZ;
  10056c:	00800204 	movi	r2,8
  100570:	e0bff515 	stw	r2,-44(fp)
                    break;
  100574:	00000b06 	br	1005a4 <tis_dissassemble+0x1f4>
                case 0x7110:
                    opcode = JNZ;
  100578:	00800244 	movi	r2,9
  10057c:	e0bff515 	stw	r2,-44(fp)
                    break;
  100580:	00000806 	br	1005a4 <tis_dissassemble+0x1f4>
                case 0x7100:
                    opcode = JLZ;
  100584:	008002c4 	movi	r2,11
  100588:	e0bff515 	stw	r2,-44(fp)
                    break;
  10058c:	00000506 	br	1005a4 <tis_dissassemble+0x1f4>
                case 0x7080:
                    opcode = JLZ;
  100590:	008002c4 	movi	r2,11
  100594:	e0bff515 	stw	r2,-44(fp)
                    break;
  100598:	00000206 	br	1005a4 <tis_dissassemble+0x1f4>
                default:
                    return -1;
  10059c:	00bfffc4 	movi	r2,-1
  1005a0:	00007e06 	br	10079c <tis_dissassemble+0x3ec>
            }
            // Shows instruction address, not label
            return sprintf(buffer, "%s 0x%x", opcodes_str[opcode], instruction & imm6_mask);
  1005a4:	008004b4 	movhi	r2,18
  1005a8:	108eb304 	addi	r2,r2,15052
  1005ac:	e0fff517 	ldw	r3,-44(fp)
  1005b0:	18c7883a 	add	r3,r3,r3
  1005b4:	18c7883a 	add	r3,r3,r3
  1005b8:	10c5883a 	add	r2,r2,r3
  1005bc:	10c00017 	ldw	r3,0(r2)
  1005c0:	e0bffe0b 	ldhu	r2,-8(fp)
  1005c4:	10800fcc 	andi	r2,r2,63
  1005c8:	100f883a 	mov	r7,r2
  1005cc:	180d883a 	mov	r6,r3
  1005d0:	014004b4 	movhi	r5,18
  1005d4:	294bd104 	addi	r5,r5,12100
  1005d8:	e13fff17 	ldw	r4,-4(fp)
  1005dc:	01019840 	call	101984 <sprintf>
  1005e0:	00006e06 	br	10079c <tis_dissassemble+0x3ec>
        } else {
            // JRO
            tis_reg_t src = instruction & register_mask;
  1005e4:	e0bffe0b 	ldhu	r2,-8(fp)
  1005e8:	108001cc 	andi	r2,r2,7
  1005ec:	e0bffa15 	stw	r2,-24(fp)
            return sprintf(buffer, "JRO %s", regs[src]);
  1005f0:	008004b4 	movhi	r2,18
  1005f4:	108eab04 	addi	r2,r2,15020
  1005f8:	e0fffa17 	ldw	r3,-24(fp)
  1005fc:	18c7883a 	add	r3,r3,r3
  100600:	18c7883a 	add	r3,r3,r3
  100604:	10c5883a 	add	r2,r2,r3
  100608:	10800017 	ldw	r2,0(r2)
  10060c:	100d883a 	mov	r6,r2
  100610:	014004b4 	movhi	r5,18
  100614:	294bd304 	addi	r5,r5,12108
  100618:	e13fff17 	ldw	r4,-4(fp)
  10061c:	01019840 	call	101984 <sprintf>
  100620:	00005e06 	br	10079c <tis_dissassemble+0x3ec>
        }
    }

    // NEG, SWP, SAV
    if (instruction & 0x4000) {
  100624:	e0bffe0b 	ldhu	r2,-8(fp)
  100628:	1090000c 	andi	r2,r2,16384
  10062c:	10002026 	beq	r2,zero,1006b0 <tis_dissassemble+0x300>
        tis_opcode_t opcode;
        switch (instruction) {
  100630:	e0bffe0b 	ldhu	r2,-8(fp)
  100634:	10d20020 	cmpeqi	r3,r2,18432
  100638:	1800051e 	bne	r3,zero,100650 <tis_dissassemble+0x2a0>
  10063c:	10d40020 	cmpeqi	r3,r2,20480
  100640:	1800061e 	bne	r3,zero,10065c <tis_dissassemble+0x2ac>
  100644:	10900020 	cmpeqi	r2,r2,16384
  100648:	1000071e 	bne	r2,zero,100668 <tis_dissassemble+0x2b8>
  10064c:	00000906 	br	100674 <tis_dissassemble+0x2c4>
            case 0x4800:
                opcode = NEG;
  100650:	00800184 	movi	r2,6
  100654:	e0bff615 	stw	r2,-40(fp)
                break;
  100658:	00000806 	br	10067c <tis_dissassemble+0x2cc>
            case 0x5000:
                opcode = SWP;
  10065c:	00800104 	movi	r2,4
  100660:	e0bff615 	stw	r2,-40(fp)
                break;
  100664:	00000506 	br	10067c <tis_dissassemble+0x2cc>
            case 0x4000:
                opcode = SAV;
  100668:	00800144 	movi	r2,5
  10066c:	e0bff615 	stw	r2,-40(fp)
                break;
  100670:	00000206 	br	10067c <tis_dissassemble+0x2cc>
            default:
                return -1;
  100674:	00bfffc4 	movi	r2,-1
  100678:	00004806 	br	10079c <tis_dissassemble+0x3ec>
        }
        return sprintf(buffer, "%s", opcodes_str[opcode]);
  10067c:	008004b4 	movhi	r2,18
  100680:	108eb304 	addi	r2,r2,15052
  100684:	e0fff617 	ldw	r3,-40(fp)
  100688:	18c7883a 	add	r3,r3,r3
  10068c:	18c7883a 	add	r3,r3,r3
  100690:	10c5883a 	add	r2,r2,r3
  100694:	10800017 	ldw	r2,0(r2)
  100698:	100d883a 	mov	r6,r2
  10069c:	014004b4 	movhi	r5,18
  1006a0:	294bd504 	addi	r5,r5,12116
  1006a4:	e13fff17 	ldw	r4,-4(fp)
  1006a8:	01019840 	call	101984 <sprintf>
  1006ac:	00003b06 	br	10079c <tis_dissassemble+0x3ec>
    } 

    // ADD, SUB
    uint16_t negative = instruction & 0x400;
  1006b0:	e0bffe0b 	ldhu	r2,-8(fp)
  1006b4:	1081000c 	andi	r2,r2,1024
  1006b8:	e0bffb0d 	sth	r2,-20(fp)
    uint16_t use_register = instruction & 0x800;
  1006bc:	e0bffe0b 	ldhu	r2,-8(fp)
  1006c0:	1082000c 	andi	r2,r2,2048
  1006c4:	e0bffb8d 	sth	r2,-18(fp)
    if (negative) {
  1006c8:	e0bffb0b 	ldhu	r2,-20(fp)
  1006cc:	10001a26 	beq	r2,zero,100738 <tis_dissassemble+0x388>
        if (use_register) {
  1006d0:	e0bffb8b 	ldhu	r2,-18(fp)
  1006d4:	10001026 	beq	r2,zero,100718 <tis_dissassemble+0x368>
            // SUB <SRC>
            tis_reg_t src = instruction & register_mask;
  1006d8:	e0bffe0b 	ldhu	r2,-8(fp)
  1006dc:	108001cc 	andi	r2,r2,7
  1006e0:	e0bffc15 	stw	r2,-16(fp)
            return sprintf(buffer, "SUB %s", regs[src]);
  1006e4:	008004b4 	movhi	r2,18
  1006e8:	108eab04 	addi	r2,r2,15020
  1006ec:	e0fffc17 	ldw	r3,-16(fp)
  1006f0:	18c7883a 	add	r3,r3,r3
  1006f4:	18c7883a 	add	r3,r3,r3
  1006f8:	10c5883a 	add	r2,r2,r3
  1006fc:	10800017 	ldw	r2,0(r2)
  100700:	100d883a 	mov	r6,r2
  100704:	014004b4 	movhi	r5,18
  100708:	294bd604 	addi	r5,r5,12120
  10070c:	e13fff17 	ldw	r4,-4(fp)
  100710:	01019840 	call	101984 <sprintf>
  100714:	00002106 	br	10079c <tis_dissassemble+0x3ec>
        } else {
            // SUB #<imm10>
            return sprintf(buffer, "SUB %d", instruction & imm10_mask);
  100718:	e0bffe0b 	ldhu	r2,-8(fp)
  10071c:	1080ffcc 	andi	r2,r2,1023
  100720:	100d883a 	mov	r6,r2
  100724:	014004b4 	movhi	r5,18
  100728:	294bd804 	addi	r5,r5,12128
  10072c:	e13fff17 	ldw	r4,-4(fp)
  100730:	01019840 	call	101984 <sprintf>
  100734:	00001906 	br	10079c <tis_dissassemble+0x3ec>
        }
    } else {
        if (use_register) {
  100738:	e0bffb8b 	ldhu	r2,-18(fp)
  10073c:	10001026 	beq	r2,zero,100780 <tis_dissassemble+0x3d0>
            // SUB <SRC>
            tis_reg_t src = instruction & register_mask;
  100740:	e0bffe0b 	ldhu	r2,-8(fp)
  100744:	108001cc 	andi	r2,r2,7
  100748:	e0bffd15 	stw	r2,-12(fp)
            return sprintf(buffer, "ADD %s", regs[src]);
  10074c:	008004b4 	movhi	r2,18
  100750:	108eab04 	addi	r2,r2,15020
  100754:	e0fffd17 	ldw	r3,-12(fp)
  100758:	18c7883a 	add	r3,r3,r3
  10075c:	18c7883a 	add	r3,r3,r3
  100760:	10c5883a 	add	r2,r2,r3
  100764:	10800017 	ldw	r2,0(r2)
  100768:	100d883a 	mov	r6,r2
  10076c:	014004b4 	movhi	r5,18
  100770:	294bda04 	addi	r5,r5,12136
  100774:	e13fff17 	ldw	r4,-4(fp)
  100778:	01019840 	call	101984 <sprintf>
  10077c:	00000706 	br	10079c <tis_dissassemble+0x3ec>
        } else {
            // SUB #<imm10>
            return sprintf(buffer, "ADD %d", instruction & imm10_mask);
  100780:	e0bffe0b 	ldhu	r2,-8(fp)
  100784:	1080ffcc 	andi	r2,r2,1023
  100788:	100d883a 	mov	r6,r2
  10078c:	014004b4 	movhi	r5,18
  100790:	294bdc04 	addi	r5,r5,12144
  100794:	e13fff17 	ldw	r4,-4(fp)
  100798:	01019840 	call	101984 <sprintf>
        }
    }
    
}
  10079c:	e037883a 	mov	sp,fp
  1007a0:	dfc00117 	ldw	ra,4(sp)
  1007a4:	df000017 	ldw	fp,0(sp)
  1007a8:	dec00204 	addi	sp,sp,8
  1007ac:	f800283a 	ret

001007b0 <tis_register_encode>:

tis_reg_t tis_register_encode(const char *str) {
  1007b0:	defffc04 	addi	sp,sp,-16
  1007b4:	dfc00315 	stw	ra,12(sp)
  1007b8:	df000215 	stw	fp,8(sp)
  1007bc:	df000204 	addi	fp,sp,8
  1007c0:	e13fff15 	stw	r4,-4(fp)
    for (unsigned char i = 0; i < (sizeof(regs) / sizeof(regs[0])); i++) {
  1007c4:	e03ffe05 	stb	zero,-8(fp)
  1007c8:	00001006 	br	10080c <tis_register_encode+0x5c>
        if (strcmp(str, regs[i]) == 0) {
  1007cc:	e0fffe03 	ldbu	r3,-8(fp)
  1007d0:	008004b4 	movhi	r2,18
  1007d4:	108eab04 	addi	r2,r2,15020
  1007d8:	18c7883a 	add	r3,r3,r3
  1007dc:	18c7883a 	add	r3,r3,r3
  1007e0:	10c5883a 	add	r2,r2,r3
  1007e4:	10800017 	ldw	r2,0(r2)
  1007e8:	100b883a 	mov	r5,r2
  1007ec:	e13fff17 	ldw	r4,-4(fp)
  1007f0:	0101c200 	call	101c20 <strcmp>
  1007f4:	1000021e 	bne	r2,zero,100800 <tis_register_encode+0x50>
            return (tis_reg_t)i;
  1007f8:	e0bffe03 	ldbu	r2,-8(fp)
  1007fc:	00000706 	br	10081c <tis_register_encode+0x6c>
    }
    
}

tis_reg_t tis_register_encode(const char *str) {
    for (unsigned char i = 0; i < (sizeof(regs) / sizeof(regs[0])); i++) {
  100800:	e0bffe03 	ldbu	r2,-8(fp)
  100804:	10800044 	addi	r2,r2,1
  100808:	e0bffe05 	stb	r2,-8(fp)
  10080c:	e0bffe03 	ldbu	r2,-8(fp)
  100810:	10800230 	cmpltui	r2,r2,8
  100814:	103fed1e 	bne	r2,zero,1007cc <__alt_data_end+0xfffc07cc>
        if (strcmp(str, regs[i]) == 0) {
            return (tis_reg_t)i;
        }
    }
    return INVALID;
  100818:	00bfffc4 	movi	r2,-1
}
  10081c:	e037883a 	mov	sp,fp
  100820:	dfc00117 	ldw	ra,4(sp)
  100824:	df000017 	ldw	fp,0(sp)
  100828:	dec00204 	addi	sp,sp,8
  10082c:	f800283a 	ret

00100830 <tis_opcode_encode>:
    [JLZ] = 0x7080,
    [JRO] = 0x6000,
};

// Decode
tis_opcode_t tis_opcode_encode(const char *str) {
  100830:	defffc04 	addi	sp,sp,-16
  100834:	dfc00315 	stw	ra,12(sp)
  100838:	df000215 	stw	fp,8(sp)
  10083c:	df000204 	addi	fp,sp,8
  100840:	e13fff15 	stw	r4,-4(fp)
    // All opcodes are 3 characters
    if (strlen(str) != 3) {
  100844:	e13fff17 	ldw	r4,-4(fp)
  100848:	0101cfc0 	call	101cfc <strlen>
  10084c:	108000e0 	cmpeqi	r2,r2,3
  100850:	1000021e 	bne	r2,zero,10085c <tis_opcode_encode+0x2c>
        return INVALID;
  100854:	00bfffc4 	movi	r2,-1
  100858:	00001606 	br	1008b4 <tis_opcode_encode+0x84>
    }

    for (unsigned char i = 0; i < (sizeof(opcodes_str) / sizeof(opcodes_str[0])); i++) {
  10085c:	e03ffe05 	stb	zero,-8(fp)
  100860:	00001006 	br	1008a4 <tis_opcode_encode+0x74>
        if (strcmp(str, opcodes_str[i]) == 0) {
  100864:	e0fffe03 	ldbu	r3,-8(fp)
  100868:	008004b4 	movhi	r2,18
  10086c:	108eb304 	addi	r2,r2,15052
  100870:	18c7883a 	add	r3,r3,r3
  100874:	18c7883a 	add	r3,r3,r3
  100878:	10c5883a 	add	r2,r2,r3
  10087c:	10800017 	ldw	r2,0(r2)
  100880:	100b883a 	mov	r5,r2
  100884:	e13fff17 	ldw	r4,-4(fp)
  100888:	0101c200 	call	101c20 <strcmp>
  10088c:	1000021e 	bne	r2,zero,100898 <tis_opcode_encode+0x68>
            return i;
  100890:	e0bffe03 	ldbu	r2,-8(fp)
  100894:	00000706 	br	1008b4 <tis_opcode_encode+0x84>
    // All opcodes are 3 characters
    if (strlen(str) != 3) {
        return INVALID;
    }

    for (unsigned char i = 0; i < (sizeof(opcodes_str) / sizeof(opcodes_str[0])); i++) {
  100898:	e0bffe03 	ldbu	r2,-8(fp)
  10089c:	10800044 	addi	r2,r2,1
  1008a0:	e0bffe05 	stb	r2,-8(fp)
  1008a4:	e0bffe03 	ldbu	r2,-8(fp)
  1008a8:	10800370 	cmpltui	r2,r2,13
  1008ac:	103fed1e 	bne	r2,zero,100864 <__alt_data_end+0xfffc0864>
        if (strcmp(str, opcodes_str[i]) == 0) {
            return i;
        }
    }
    return INVALID;
  1008b0:	00bfffc4 	movi	r2,-1
}
  1008b4:	e037883a 	mov	sp,fp
  1008b8:	dfc00117 	ldw	ra,4(sp)
  1008bc:	df000017 	ldw	fp,0(sp)
  1008c0:	dec00204 	addi	sp,sp,8
  1008c4:	f800283a 	ret

001008c8 <tis_imm11_encode>:

// Encodes an imm11 operand from int
int tis_imm11_encode(int integer) {
  1008c8:	defffe04 	addi	sp,sp,-8
  1008cc:	df000115 	stw	fp,4(sp)
  1008d0:	df000104 	addi	fp,sp,4
  1008d4:	e13fff15 	stw	r4,-4(fp)
    if (integer < -999) {
  1008d8:	e0bfff17 	ldw	r2,-4(fp)
  1008dc:	10bf0648 	cmpgei	r2,r2,-999
  1008e0:	1000021e 	bne	r2,zero,1008ec <tis_imm11_encode+0x24>
        return 999 | imm11_sign_bit;
  1008e4:	0081f9c4 	movi	r2,2023
  1008e8:	00000c06 	br	10091c <tis_imm11_encode+0x54>
    } else if (integer < 0) {
  1008ec:	e0bfff17 	ldw	r2,-4(fp)
  1008f0:	1000040e 	bge	r2,zero,100904 <tis_imm11_encode+0x3c>
        return (integer*-1) | imm11_sign_bit;
  1008f4:	e0bfff17 	ldw	r2,-4(fp)
  1008f8:	0085c83a 	sub	r2,zero,r2
  1008fc:	10810014 	ori	r2,r2,1024
  100900:	00000606 	br	10091c <tis_imm11_encode+0x54>
    } else if (integer < 999) {
  100904:	e0bfff17 	ldw	r2,-4(fp)
  100908:	1080f9c8 	cmpgei	r2,r2,999
  10090c:	1000021e 	bne	r2,zero,100918 <tis_imm11_encode+0x50>
        return integer;
  100910:	e0bfff17 	ldw	r2,-4(fp)
  100914:	00000106 	br	10091c <tis_imm11_encode+0x54>
    }
    return 999;
  100918:	0080f9c4 	movi	r2,999
}
  10091c:	e037883a 	mov	sp,fp
  100920:	df000017 	ldw	fp,0(sp)
  100924:	dec00104 	addi	sp,sp,4
  100928:	f800283a 	ret

0010092c <tis_assemble_program>:

// Returns number of instructions written, or -1 on error
int tis_assemble_program(char *program, uint16_t *instructions) {
  10092c:	deffc904 	addi	sp,sp,-220
  100930:	dfc03615 	stw	ra,216(sp)
  100934:	df003515 	stw	fp,212(sp)
  100938:	df003504 	addi	fp,sp,212
  10093c:	e13ffe15 	stw	r4,-8(fp)
  100940:	e17fff15 	stw	r5,-4(fp)

    // Split on newlines
    const char token_delimiter[] = "\t ,";
  100944:	00800b34 	movhi	r2,44
  100948:	10880244 	addi	r2,r2,8201
  10094c:	e0bfd915 	stw	r2,-156(fp)

    // PC to increase after every parsed instruction
    int pc = 0;
  100950:	e03fcb15 	stw	zero,-212(fp)
    // Store label pointers for later linking
    char *labels_pos[16] = {0};
  100954:	e0bfda04 	addi	r2,fp,-152
  100958:	00c01004 	movi	r3,64
  10095c:	180d883a 	mov	r6,r3
  100960:	000b883a 	mov	r5,zero
  100964:	1009883a 	mov	r4,r2
  100968:	01016c40 	call	1016c4 <memset>
    char *labels_ref[16] = {0};
  10096c:	e0bfea04 	addi	r2,fp,-88
  100970:	00c01004 	movi	r3,64
  100974:	180d883a 	mov	r6,r3
  100978:	000b883a 	mov	r5,zero
  10097c:	1009883a 	mov	r4,r2
  100980:	01016c40 	call	1016c4 <memset>

    // Pointer to current line
    char *line;
    // strtok_r pointer
    char *nextline = program;
  100984:	e0bffe17 	ldw	r2,-8(fp)
  100988:	e0bffa15 	stw	r2,-24(fp)
    
    // Parse every line
    while ((line = strtok_r(nextline, "\n", &nextline)) != NULL) {
  10098c:	00014c06 	br	100ec0 <tis_assemble_program+0x594>

        // Check for maximum line length
        int line_len = strlen(line);
  100990:	e13fcf17 	ldw	r4,-196(fp)
  100994:	0101cfc0 	call	101cfc <strlen>
  100998:	e0bfd015 	stw	r2,-192(fp)
        if (line_len > 18) {
  10099c:	e0bfd017 	ldw	r2,-192(fp)
  1009a0:	108004d0 	cmplti	r2,r2,19
  1009a4:	1000071e 	bne	r2,zero,1009c4 <tis_assemble_program+0x98>
            puts("Line exceeded maximum length of 18 characters:");
  1009a8:	010004b4 	movhi	r4,18
  1009ac:	210be504 	addi	r4,r4,12180
  1009b0:	01019180 	call	101918 <puts>
            puts(line);
  1009b4:	e13fcf17 	ldw	r4,-196(fp)
  1009b8:	01019180 	call	101918 <puts>
            return -1; 
  1009bc:	00bfffc4 	movi	r2,-1
  1009c0:	00019006 	br	101004 <tis_assemble_program+0x6d8>
        }

        // Divide line in code and comment
        char* comment;
        strtok_r(line, "#", &comment);
  1009c4:	e0bffb04 	addi	r2,fp,-20
  1009c8:	100d883a 	mov	r6,r2
  1009cc:	014004b4 	movhi	r5,18
  1009d0:	294bf104 	addi	r5,r5,12228
  1009d4:	e13fcf17 	ldw	r4,-196(fp)
  1009d8:	0101e300 	call	101e30 <strtok_r>

        // First token is either label, opcode, or empty
        char *strtok_ptr = NULL;
  1009dc:	e03ffc15 	stw	zero,-16(fp)
        char *token = strtok_r(line, token_delimiter, &strtok_ptr);
  1009e0:	e0fffc04 	addi	r3,fp,-16
  1009e4:	e0bfd904 	addi	r2,fp,-156
  1009e8:	180d883a 	mov	r6,r3
  1009ec:	100b883a 	mov	r5,r2
  1009f0:	e13fcf17 	ldw	r4,-196(fp)
  1009f4:	0101e300 	call	101e30 <strtok_r>
  1009f8:	e0bfcc15 	stw	r2,-208(fp)

        // Check for empty line
        if (token == NULL) {
  1009fc:	e0bfcc17 	ldw	r2,-208(fp)
  100a00:	10012c26 	beq	r2,zero,100eb4 <tis_assemble_program+0x588>
            continue;
        }

        // Check for label which ends with ':'
        int token_len = strlen(token);
  100a04:	e13fcc17 	ldw	r4,-208(fp)
  100a08:	0101cfc0 	call	101cfc <strlen>
  100a0c:	e0bfd115 	stw	r2,-188(fp)
        if (token[token_len-1] == ':') {
  100a10:	e0bfd117 	ldw	r2,-188(fp)
  100a14:	10bfffc4 	addi	r2,r2,-1
  100a18:	e0ffcc17 	ldw	r3,-208(fp)
  100a1c:	1885883a 	add	r2,r3,r2
  100a20:	10800003 	ldbu	r2,0(r2)
  100a24:	10803fcc 	andi	r2,r2,255
  100a28:	1080201c 	xori	r2,r2,128
  100a2c:	10bfe004 	addi	r2,r2,-128
  100a30:	10800e98 	cmpnei	r2,r2,58
  100a34:	10002c1e 	bne	r2,zero,100ae8 <tis_assemble_program+0x1bc>
            // Avoid replacing existing label
            if (labels_pos[pc]) {
  100a38:	e0bfcb17 	ldw	r2,-212(fp)
  100a3c:	1085883a 	add	r2,r2,r2
  100a40:	1085883a 	add	r2,r2,r2
  100a44:	e0ffcb04 	addi	r3,fp,-212
  100a48:	1885883a 	add	r2,r3,r2
  100a4c:	10800f04 	addi	r2,r2,60
  100a50:	10800017 	ldw	r2,0(r2)
  100a54:	10000e26 	beq	r2,zero,100a90 <tis_assemble_program+0x164>
                printf("Multiple labels to instruction (%s, %s) \n", token, labels_pos[pc]);
  100a58:	e0bfcb17 	ldw	r2,-212(fp)
  100a5c:	1085883a 	add	r2,r2,r2
  100a60:	1085883a 	add	r2,r2,r2
  100a64:	e13fcb04 	addi	r4,fp,-212
  100a68:	2085883a 	add	r2,r4,r2
  100a6c:	10800f04 	addi	r2,r2,60
  100a70:	10800017 	ldw	r2,0(r2)
  100a74:	100d883a 	mov	r6,r2
  100a78:	e17fcc17 	ldw	r5,-208(fp)
  100a7c:	010004b4 	movhi	r4,18
  100a80:	210bf204 	addi	r4,r4,12232
  100a84:	010181c0 	call	10181c <printf>
                return -1;
  100a88:	00bfffc4 	movi	r2,-1
  100a8c:	00015d06 	br	101004 <tis_assemble_program+0x6d8>
            }

            // Save label without ':'
            token[token_len-1] = '\0';
  100a90:	e0bfd117 	ldw	r2,-188(fp)
  100a94:	10bfffc4 	addi	r2,r2,-1
  100a98:	e0ffcc17 	ldw	r3,-208(fp)
  100a9c:	1885883a 	add	r2,r3,r2
  100aa0:	10000005 	stb	zero,0(r2)
            labels_pos[pc] = token;
  100aa4:	e0bfcb17 	ldw	r2,-212(fp)
  100aa8:	1085883a 	add	r2,r2,r2
  100aac:	1085883a 	add	r2,r2,r2
  100ab0:	e0ffcb04 	addi	r3,fp,-212
  100ab4:	1885883a 	add	r2,r3,r2
  100ab8:	10800f04 	addi	r2,r2,60
  100abc:	e0ffcc17 	ldw	r3,-208(fp)
  100ac0:	10c00015 	stw	r3,0(r2)

            // Get next token
            token = strtok_r(NULL, token_delimiter, &strtok_ptr);
  100ac4:	e0fffc04 	addi	r3,fp,-16
  100ac8:	e0bfd904 	addi	r2,fp,-156
  100acc:	180d883a 	mov	r6,r3
  100ad0:	100b883a 	mov	r5,r2
  100ad4:	0009883a 	mov	r4,zero
  100ad8:	0101e300 	call	101e30 <strtok_r>
  100adc:	e0bfcc15 	stw	r2,-208(fp)
            if (token == NULL) {
  100ae0:	e0bfcc17 	ldw	r2,-208(fp)
  100ae4:	1000f526 	beq	r2,zero,100ebc <tis_assemble_program+0x590>
                continue;
            }
        }

        // Check for valid opcode
        tis_opcode_t opcode = tis_opcode_encode(token);
  100ae8:	e13fcc17 	ldw	r4,-208(fp)
  100aec:	01008300 	call	100830 <tis_opcode_encode>
  100af0:	e0bfd215 	stw	r2,-184(fp)
        if (opcode == -1) {
  100af4:	e0bfd217 	ldw	r2,-184(fp)
  100af8:	10bfffd8 	cmpnei	r2,r2,-1
  100afc:	1000061e 	bne	r2,zero,100b18 <tis_assemble_program+0x1ec>
            printf("Invalid opcode (%s) \n", token);
  100b00:	e17fcc17 	ldw	r5,-208(fp)
  100b04:	010004b4 	movhi	r4,18
  100b08:	210bfd04 	addi	r4,r4,12276
  100b0c:	010181c0 	call	10181c <printf>
            return -1;
  100b10:	00bfffc4 	movi	r2,-1
  100b14:	00013b06 	br	101004 <tis_assemble_program+0x6d8>
        }

        // Set instruction identifying bits
        instructions[pc] = asm_codes[opcode]; 
  100b18:	e0bfcb17 	ldw	r2,-212(fp)
  100b1c:	1085883a 	add	r2,r2,r2
  100b20:	1007883a 	mov	r3,r2
  100b24:	e0bfff17 	ldw	r2,-4(fp)
  100b28:	10c9883a 	add	r4,r2,r3
  100b2c:	008004b4 	movhi	r2,18
  100b30:	108bde04 	addi	r2,r2,12152
  100b34:	e0ffd217 	ldw	r3,-184(fp)
  100b38:	18c7883a 	add	r3,r3,r3
  100b3c:	10c5883a 	add	r2,r2,r3
  100b40:	1080000b 	ldhu	r2,0(r2)
  100b44:	2080000d 	sth	r2,0(r4)

        // End if no further operands
        int opcount = asm_operands[opcode];
  100b48:	008004b4 	movhi	r2,18
  100b4c:	108ec004 	addi	r2,r2,15104
  100b50:	e0ffd217 	ldw	r3,-184(fp)
  100b54:	10c5883a 	add	r2,r2,r3
  100b58:	10800003 	ldbu	r2,0(r2)
  100b5c:	10803fcc 	andi	r2,r2,255
  100b60:	1080201c 	xori	r2,r2,128
  100b64:	10bfe004 	addi	r2,r2,-128
  100b68:	e0bfd315 	stw	r2,-180(fp)
        if (opcount == 0) {
  100b6c:	e0bfd317 	ldw	r2,-180(fp)
  100b70:	1000041e 	bne	r2,zero,100b84 <tis_assemble_program+0x258>
            pc++;
  100b74:	e0bfcb17 	ldw	r2,-212(fp)
  100b78:	10800044 	addi	r2,r2,1
  100b7c:	e0bfcb15 	stw	r2,-212(fp)
            continue;
  100b80:	0000cf06 	br	100ec0 <tis_assemble_program+0x594>
        }

        // Get <SRC>
        char *src = strtok_r(NULL, token_delimiter, &strtok_ptr);
  100b84:	e0fffc04 	addi	r3,fp,-16
  100b88:	e0bfd904 	addi	r2,fp,-156
  100b8c:	180d883a 	mov	r6,r3
  100b90:	100b883a 	mov	r5,r2
  100b94:	0009883a 	mov	r4,zero
  100b98:	0101e300 	call	101e30 <strtok_r>
  100b9c:	e0bfd415 	stw	r2,-176(fp)
        if (src == NULL) {
  100ba0:	e0bfd417 	ldw	r2,-176(fp)
  100ba4:	1000051e 	bne	r2,zero,100bbc <tis_assemble_program+0x290>
            puts("Missing <SRC> operand");
  100ba8:	010004b4 	movhi	r4,18
  100bac:	210c0304 	addi	r4,r4,12300
  100bb0:	01019180 	call	101918 <puts>
            return -1;
  100bb4:	00bfffc4 	movi	r2,-1
  100bb8:	00011206 	br	101004 <tis_assemble_program+0x6d8>
        }

        // Check if <SRC> is register
        tis_reg_t src_reg = tis_register_encode(src);
  100bbc:	e13fd417 	ldw	r4,-176(fp)
  100bc0:	01007b00 	call	1007b0 <tis_register_encode>
  100bc4:	e0bfd515 	stw	r2,-172(fp)
        if (opcode == JMP || opcode == JEZ || opcode == JGZ || opcode == JLZ || opcode == JNZ) {
  100bc8:	e0bfd217 	ldw	r2,-184(fp)
  100bcc:	108001e0 	cmpeqi	r2,r2,7
  100bd0:	10000c1e 	bne	r2,zero,100c04 <tis_assemble_program+0x2d8>
  100bd4:	e0bfd217 	ldw	r2,-184(fp)
  100bd8:	10800220 	cmpeqi	r2,r2,8
  100bdc:	1000091e 	bne	r2,zero,100c04 <tis_assemble_program+0x2d8>
  100be0:	e0bfd217 	ldw	r2,-184(fp)
  100be4:	108002a0 	cmpeqi	r2,r2,10
  100be8:	1000061e 	bne	r2,zero,100c04 <tis_assemble_program+0x2d8>
  100bec:	e0bfd217 	ldw	r2,-184(fp)
  100bf0:	108002e0 	cmpeqi	r2,r2,11
  100bf4:	1000031e 	bne	r2,zero,100c04 <tis_assemble_program+0x2d8>
  100bf8:	e0bfd217 	ldw	r2,-184(fp)
  100bfc:	10800258 	cmpnei	r2,r2,9
  100c00:	1000091e 	bne	r2,zero,100c28 <tis_assemble_program+0x2fc>
            // Store label string for later linking
            labels_ref[pc] = src;
  100c04:	e0bfcb17 	ldw	r2,-212(fp)
  100c08:	1085883a 	add	r2,r2,r2
  100c0c:	1085883a 	add	r2,r2,r2
  100c10:	e13fcb04 	addi	r4,fp,-212
  100c14:	2085883a 	add	r2,r4,r2
  100c18:	10801f04 	addi	r2,r2,124
  100c1c:	e0ffd417 	ldw	r3,-176(fp)
  100c20:	10c00015 	stw	r3,0(r2)
  100c24:	00006006 	br	100da8 <tis_assemble_program+0x47c>
        } else if (src_reg != INVALID) {
  100c28:	e0bfd517 	ldw	r2,-172(fp)
  100c2c:	10bfffe0 	cmpeqi	r2,r2,-1
  100c30:	1000311e 	bne	r2,zero,100cf8 <tis_assemble_program+0x3cc>
            // Place <SRC> in first 3 bits
            instructions[pc] &= ~register_mask;
  100c34:	e0bfcb17 	ldw	r2,-212(fp)
  100c38:	1085883a 	add	r2,r2,r2
  100c3c:	1007883a 	mov	r3,r2
  100c40:	e0bfff17 	ldw	r2,-4(fp)
  100c44:	10c7883a 	add	r3,r2,r3
  100c48:	e0bfcb17 	ldw	r2,-212(fp)
  100c4c:	1085883a 	add	r2,r2,r2
  100c50:	1009883a 	mov	r4,r2
  100c54:	e0bfff17 	ldw	r2,-4(fp)
  100c58:	1105883a 	add	r2,r2,r4
  100c5c:	1100000b 	ldhu	r4,0(r2)
  100c60:	00bffe04 	movi	r2,-8
  100c64:	2084703a 	and	r2,r4,r2
  100c68:	1880000d 	sth	r2,0(r3)
            instructions[pc] |= src_reg; 
  100c6c:	e0bfcb17 	ldw	r2,-212(fp)
  100c70:	1085883a 	add	r2,r2,r2
  100c74:	1007883a 	mov	r3,r2
  100c78:	e0bfff17 	ldw	r2,-4(fp)
  100c7c:	10c7883a 	add	r3,r2,r3
  100c80:	e0bfcb17 	ldw	r2,-212(fp)
  100c84:	1085883a 	add	r2,r2,r2
  100c88:	1009883a 	mov	r4,r2
  100c8c:	e0bfff17 	ldw	r2,-4(fp)
  100c90:	1105883a 	add	r2,r2,r4
  100c94:	1080000b 	ldhu	r2,0(r2)
  100c98:	1009883a 	mov	r4,r2
  100c9c:	e0bfd517 	ldw	r2,-172(fp)
  100ca0:	2084b03a 	or	r2,r4,r2
  100ca4:	1880000d 	sth	r2,0(r3)

            if (opcode == SUB || opcode == ADD) {
  100ca8:	e0bfd217 	ldw	r2,-184(fp)
  100cac:	108000e0 	cmpeqi	r2,r2,3
  100cb0:	1000031e 	bne	r2,zero,100cc0 <tis_assemble_program+0x394>
  100cb4:	e0bfd217 	ldw	r2,-184(fp)
  100cb8:	10800098 	cmpnei	r2,r2,2
  100cbc:	10003a1e 	bne	r2,zero,100da8 <tis_assemble_program+0x47c>
                instructions[pc] |= 0x800;
  100cc0:	e0bfcb17 	ldw	r2,-212(fp)
  100cc4:	1085883a 	add	r2,r2,r2
  100cc8:	1007883a 	mov	r3,r2
  100ccc:	e0bfff17 	ldw	r2,-4(fp)
  100cd0:	10c7883a 	add	r3,r2,r3
  100cd4:	e0bfcb17 	ldw	r2,-212(fp)
  100cd8:	1085883a 	add	r2,r2,r2
  100cdc:	1009883a 	mov	r4,r2
  100ce0:	e0bfff17 	ldw	r2,-4(fp)
  100ce4:	1105883a 	add	r2,r2,r4
  100ce8:	1080000b 	ldhu	r2,0(r2)
  100cec:	10820014 	ori	r2,r2,2048
  100cf0:	1880000d 	sth	r2,0(r3)
  100cf4:	00002c06 	br	100da8 <tis_assemble_program+0x47c>
            }
        } else {
            // Check if <SRC> is integer
            int integer;
            int result = sscanf(src, "%d", &integer);
  100cf8:	e0bffd04 	addi	r2,fp,-12
  100cfc:	100d883a 	mov	r6,r2
  100d00:	014004b4 	movhi	r5,18
  100d04:	294c0904 	addi	r5,r5,12324
  100d08:	e13fd417 	ldw	r4,-176(fp)
  100d0c:	01019f00 	call	1019f0 <sscanf>
  100d10:	e0bfd615 	stw	r2,-168(fp)
            if (result != 1) {
  100d14:	e0bfd617 	ldw	r2,-168(fp)
  100d18:	10800060 	cmpeqi	r2,r2,1
  100d1c:	1000061e 	bne	r2,zero,100d38 <tis_assemble_program+0x40c>
                // Couldn't parse register nor number
                printf("Unable to parse <SRC> (%s)", src);
  100d20:	e17fd417 	ldw	r5,-176(fp)
  100d24:	010004b4 	movhi	r4,18
  100d28:	210c0a04 	addi	r4,r4,12328
  100d2c:	010181c0 	call	10181c <printf>
                return -1;
  100d30:	00bfffc4 	movi	r2,-1
        // Check for maximum line length
        int line_len = strlen(line);
        if (line_len > 18) {
            puts("Line exceeded maximum length of 18 characters:");
            puts(line);
            return -1; 
  100d34:	0000b306 	br	101004 <tis_assemble_program+0x6d8>
            if (result != 1) {
                // Couldn't parse register nor number
                printf("Unable to parse <SRC> (%s)", src);
                return -1;
            }
            if (opcode == MOV || opcode == SUB || opcode == ADD ) {
  100d38:	e0bfd217 	ldw	r2,-184(fp)
  100d3c:	10800060 	cmpeqi	r2,r2,1
  100d40:	1000061e 	bne	r2,zero,100d5c <tis_assemble_program+0x430>
  100d44:	e0bfd217 	ldw	r2,-184(fp)
  100d48:	108000e0 	cmpeqi	r2,r2,3
  100d4c:	1000031e 	bne	r2,zero,100d5c <tis_assemble_program+0x430>
  100d50:	e0bfd217 	ldw	r2,-184(fp)
  100d54:	10800098 	cmpnei	r2,r2,2
  100d58:	1000131e 	bne	r2,zero,100da8 <tis_assemble_program+0x47c>
                // Integer goes in first 11 bits.
                // Uses XOR to flip sign bit in case of SUB.
                instructions[pc] ^= tis_imm11_encode(integer);
  100d5c:	e0bffd17 	ldw	r2,-12(fp)
  100d60:	1009883a 	mov	r4,r2
  100d64:	01008c80 	call	1008c8 <tis_imm11_encode>
  100d68:	100b883a 	mov	r5,r2
  100d6c:	e0bfcb17 	ldw	r2,-212(fp)
  100d70:	1085883a 	add	r2,r2,r2
  100d74:	1007883a 	mov	r3,r2
  100d78:	e0bfff17 	ldw	r2,-4(fp)
  100d7c:	10c7883a 	add	r3,r2,r3
  100d80:	e0bfcb17 	ldw	r2,-212(fp)
  100d84:	1085883a 	add	r2,r2,r2
  100d88:	1009883a 	mov	r4,r2
  100d8c:	e0bfff17 	ldw	r2,-4(fp)
  100d90:	1105883a 	add	r2,r2,r4
  100d94:	1080000b 	ldhu	r2,0(r2)
  100d98:	1009883a 	mov	r4,r2
  100d9c:	2805883a 	mov	r2,r5
  100da0:	2084f03a 	xor	r2,r4,r2
  100da4:	1880000d 	sth	r2,0(r3)
            }
        }

        // End if no further operands
        if (opcount == 1) {
  100da8:	e0bfd317 	ldw	r2,-180(fp)
  100dac:	10800058 	cmpnei	r2,r2,1
  100db0:	1000041e 	bne	r2,zero,100dc4 <tis_assemble_program+0x498>
            pc++;
  100db4:	e0bfcb17 	ldw	r2,-212(fp)
  100db8:	10800044 	addi	r2,r2,1
  100dbc:	e0bfcb15 	stw	r2,-212(fp)
            continue;
  100dc0:	00003f06 	br	100ec0 <tis_assemble_program+0x594>
        }

        // Get <DST>
        char *dst = strtok_r(NULL, token_delimiter, &strtok_ptr);
  100dc4:	e0fffc04 	addi	r3,fp,-16
  100dc8:	e0bfd904 	addi	r2,fp,-156
  100dcc:	180d883a 	mov	r6,r3
  100dd0:	100b883a 	mov	r5,r2
  100dd4:	0009883a 	mov	r4,zero
  100dd8:	0101e300 	call	101e30 <strtok_r>
  100ddc:	e0bfd715 	stw	r2,-164(fp)
        if (dst == NULL) {
  100de0:	e0bfd717 	ldw	r2,-164(fp)
  100de4:	1000051e 	bne	r2,zero,100dfc <tis_assemble_program+0x4d0>
            puts("Missing <DST> operand");
  100de8:	010004b4 	movhi	r4,18
  100dec:	210c1104 	addi	r4,r4,12356
  100df0:	01019180 	call	101918 <puts>
            return -1;
  100df4:	00bfffc4 	movi	r2,-1
  100df8:	00008206 	br	101004 <tis_assemble_program+0x6d8>
        }

        // Check if <DST> is register
        tis_reg_t dst_reg = tis_register_encode(dst);
  100dfc:	e13fd717 	ldw	r4,-164(fp)
  100e00:	01007b00 	call	1007b0 <tis_register_encode>
  100e04:	e0bfd815 	stw	r2,-160(fp)
        if (dst_reg != INVALID) {
  100e08:	e0bfd817 	ldw	r2,-160(fp)
  100e0c:	10bfffe0 	cmpeqi	r2,r2,-1
  100e10:	1000221e 	bne	r2,zero,100e9c <tis_assemble_program+0x570>
            // Place <DST> in bytes 13-11 
            instructions[pc] &= ~(register_mask<<11);
  100e14:	e0bfcb17 	ldw	r2,-212(fp)
  100e18:	1085883a 	add	r2,r2,r2
  100e1c:	1007883a 	mov	r3,r2
  100e20:	e0bfff17 	ldw	r2,-4(fp)
  100e24:	10c7883a 	add	r3,r2,r3
  100e28:	e0bfcb17 	ldw	r2,-212(fp)
  100e2c:	1085883a 	add	r2,r2,r2
  100e30:	1009883a 	mov	r4,r2
  100e34:	e0bfff17 	ldw	r2,-4(fp)
  100e38:	1105883a 	add	r2,r2,r4
  100e3c:	1100000b 	ldhu	r4,0(r2)
  100e40:	00b1ffc4 	movi	r2,-14337
  100e44:	2084703a 	and	r2,r4,r2
  100e48:	1880000d 	sth	r2,0(r3)
            instructions[pc] |= dst_reg << 11; 
  100e4c:	e0bfcb17 	ldw	r2,-212(fp)
  100e50:	1085883a 	add	r2,r2,r2
  100e54:	1007883a 	mov	r3,r2
  100e58:	e0bfff17 	ldw	r2,-4(fp)
  100e5c:	10c7883a 	add	r3,r2,r3
  100e60:	e0bfcb17 	ldw	r2,-212(fp)
  100e64:	1085883a 	add	r2,r2,r2
  100e68:	1009883a 	mov	r4,r2
  100e6c:	e0bfff17 	ldw	r2,-4(fp)
  100e70:	1105883a 	add	r2,r2,r4
  100e74:	1080000b 	ldhu	r2,0(r2)
  100e78:	1009883a 	mov	r4,r2
  100e7c:	e0bfd817 	ldw	r2,-160(fp)
  100e80:	100492fa 	slli	r2,r2,11
  100e84:	2084b03a 	or	r2,r4,r2
  100e88:	1880000d 	sth	r2,0(r3)
            printf("Unable to parse <DST> (%s)", dst);
            return -1;
        }

        // Increase after every line
        pc++;
  100e8c:	e0bfcb17 	ldw	r2,-212(fp)
  100e90:	10800044 	addi	r2,r2,1
  100e94:	e0bfcb15 	stw	r2,-212(fp)
  100e98:	00000906 	br	100ec0 <tis_assemble_program+0x594>
        if (dst_reg != INVALID) {
            // Place <DST> in bytes 13-11 
            instructions[pc] &= ~(register_mask<<11);
            instructions[pc] |= dst_reg << 11; 
        } else {
            printf("Unable to parse <DST> (%s)", dst);
  100e9c:	e17fd717 	ldw	r5,-164(fp)
  100ea0:	010004b4 	movhi	r4,18
  100ea4:	210c1704 	addi	r4,r4,12380
  100ea8:	010181c0 	call	10181c <printf>
            return -1;
  100eac:	00bfffc4 	movi	r2,-1
  100eb0:	00005406 	br	101004 <tis_assemble_program+0x6d8>
        char *strtok_ptr = NULL;
        char *token = strtok_r(line, token_delimiter, &strtok_ptr);

        // Check for empty line
        if (token == NULL) {
            continue;
  100eb4:	0001883a 	nop
  100eb8:	00000106 	br	100ec0 <tis_assemble_program+0x594>
            labels_pos[pc] = token;

            // Get next token
            token = strtok_r(NULL, token_delimiter, &strtok_ptr);
            if (token == NULL) {
                continue;
  100ebc:	0001883a 	nop
    char *line;
    // strtok_r pointer
    char *nextline = program;
    
    // Parse every line
    while ((line = strtok_r(nextline, "\n", &nextline)) != NULL) {
  100ec0:	e0bffa17 	ldw	r2,-24(fp)
  100ec4:	e0fffa04 	addi	r3,fp,-24
  100ec8:	180d883a 	mov	r6,r3
  100ecc:	014004b4 	movhi	r5,18
  100ed0:	294c1e04 	addi	r5,r5,12408
  100ed4:	1009883a 	mov	r4,r2
  100ed8:	0101e300 	call	101e30 <strtok_r>
  100edc:	e0bfcf15 	stw	r2,-196(fp)
  100ee0:	e0bfcf17 	ldw	r2,-196(fp)
  100ee4:	103eaa1e 	bne	r2,zero,100990 <__alt_data_end+0xfffc0990>
        // Increase after every line
        pc++;
    }

    // Link jump labels
    for (int ref_pc = 0; ref_pc < (sizeof(labels_ref) / sizeof(labels_ref[0])); ref_pc++) {
  100ee8:	e03fcd15 	stw	zero,-204(fp)
  100eec:	00004106 	br	100ff4 <tis_assemble_program+0x6c8>
        // Skip empty
        if (labels_ref[ref_pc] == NULL) {
  100ef0:	e0bfcd17 	ldw	r2,-204(fp)
  100ef4:	1085883a 	add	r2,r2,r2
  100ef8:	1085883a 	add	r2,r2,r2
  100efc:	e0ffcb04 	addi	r3,fp,-212
  100f00:	1885883a 	add	r2,r3,r2
  100f04:	10801f04 	addi	r2,r2,124
  100f08:	10800017 	ldw	r2,0(r2)
  100f0c:	10003526 	beq	r2,zero,100fe4 <tis_assemble_program+0x6b8>
            continue;
        }

        for (int pos_pc = 0; pos_pc < (sizeof(labels_pos) / sizeof(labels_pos[0])); pos_pc++) {
  100f10:	e03fce15 	stw	zero,-200(fp)
  100f14:	00002f06 	br	100fd4 <tis_assemble_program+0x6a8>
            // Skip empty
            if (labels_pos[pos_pc] == NULL) {
  100f18:	e0bfce17 	ldw	r2,-200(fp)
  100f1c:	1085883a 	add	r2,r2,r2
  100f20:	1085883a 	add	r2,r2,r2
  100f24:	e13fcb04 	addi	r4,fp,-212
  100f28:	2085883a 	add	r2,r4,r2
  100f2c:	10800f04 	addi	r2,r2,60
  100f30:	10800017 	ldw	r2,0(r2)
  100f34:	10002326 	beq	r2,zero,100fc4 <tis_assemble_program+0x698>
                continue;
            }

            // Check if labels match
            if (strcmp(labels_pos[pos_pc], labels_ref[ref_pc]) == 0) {
  100f38:	e0bfce17 	ldw	r2,-200(fp)
  100f3c:	1085883a 	add	r2,r2,r2
  100f40:	1085883a 	add	r2,r2,r2
  100f44:	e0ffcb04 	addi	r3,fp,-212
  100f48:	1885883a 	add	r2,r3,r2
  100f4c:	10800f04 	addi	r2,r2,60
  100f50:	10c00017 	ldw	r3,0(r2)
  100f54:	e0bfcd17 	ldw	r2,-204(fp)
  100f58:	1085883a 	add	r2,r2,r2
  100f5c:	1085883a 	add	r2,r2,r2
  100f60:	e13fcb04 	addi	r4,fp,-212
  100f64:	2085883a 	add	r2,r4,r2
  100f68:	10801f04 	addi	r2,r2,124
  100f6c:	10800017 	ldw	r2,0(r2)
  100f70:	100b883a 	mov	r5,r2
  100f74:	1809883a 	mov	r4,r3
  100f78:	0101c200 	call	101c20 <strcmp>
  100f7c:	1000121e 	bne	r2,zero,100fc8 <tis_assemble_program+0x69c>
                // Edit instruction referencing label
                instructions[ref_pc] |= pos_pc & imm6_mask;
  100f80:	e0bfcd17 	ldw	r2,-204(fp)
  100f84:	1085883a 	add	r2,r2,r2
  100f88:	1007883a 	mov	r3,r2
  100f8c:	e0bfff17 	ldw	r2,-4(fp)
  100f90:	10c7883a 	add	r3,r2,r3
  100f94:	e0bfcd17 	ldw	r2,-204(fp)
  100f98:	1085883a 	add	r2,r2,r2
  100f9c:	1009883a 	mov	r4,r2
  100fa0:	e0bfff17 	ldw	r2,-4(fp)
  100fa4:	1105883a 	add	r2,r2,r4
  100fa8:	1080000b 	ldhu	r2,0(r2)
  100fac:	1009883a 	mov	r4,r2
  100fb0:	e0bfce17 	ldw	r2,-200(fp)
  100fb4:	10800fcc 	andi	r2,r2,63
  100fb8:	2084b03a 	or	r2,r4,r2
  100fbc:	1880000d 	sth	r2,0(r3)
  100fc0:	00000106 	br	100fc8 <tis_assemble_program+0x69c>
        }

        for (int pos_pc = 0; pos_pc < (sizeof(labels_pos) / sizeof(labels_pos[0])); pos_pc++) {
            // Skip empty
            if (labels_pos[pos_pc] == NULL) {
                continue;
  100fc4:	0001883a 	nop
        // Skip empty
        if (labels_ref[ref_pc] == NULL) {
            continue;
        }

        for (int pos_pc = 0; pos_pc < (sizeof(labels_pos) / sizeof(labels_pos[0])); pos_pc++) {
  100fc8:	e0bfce17 	ldw	r2,-200(fp)
  100fcc:	10800044 	addi	r2,r2,1
  100fd0:	e0bfce15 	stw	r2,-200(fp)
  100fd4:	e0bfce17 	ldw	r2,-200(fp)
  100fd8:	10800430 	cmpltui	r2,r2,16
  100fdc:	103fce1e 	bne	r2,zero,100f18 <__alt_data_end+0xfffc0f18>
  100fe0:	00000106 	br	100fe8 <tis_assemble_program+0x6bc>

    // Link jump labels
    for (int ref_pc = 0; ref_pc < (sizeof(labels_ref) / sizeof(labels_ref[0])); ref_pc++) {
        // Skip empty
        if (labels_ref[ref_pc] == NULL) {
            continue;
  100fe4:	0001883a 	nop
        // Increase after every line
        pc++;
    }

    // Link jump labels
    for (int ref_pc = 0; ref_pc < (sizeof(labels_ref) / sizeof(labels_ref[0])); ref_pc++) {
  100fe8:	e0bfcd17 	ldw	r2,-204(fp)
  100fec:	10800044 	addi	r2,r2,1
  100ff0:	e0bfcd15 	stw	r2,-204(fp)
  100ff4:	e0bfcd17 	ldw	r2,-204(fp)
  100ff8:	10800430 	cmpltui	r2,r2,16
  100ffc:	103fbc1e 	bne	r2,zero,100ef0 <__alt_data_end+0xfffc0ef0>
            } 
        }
    }
    
    // Number of instructions written
    return pc;
  101000:	e0bfcb17 	ldw	r2,-212(fp)
}
  101004:	e037883a 	mov	sp,fp
  101008:	dfc00117 	ldw	ra,4(sp)
  10100c:	df000017 	ldw	fp,0(sp)
  101010:	dec00204 	addi	sp,sp,8
  101014:	f800283a 	ret

00101018 <tis_disassembler_test>:

void tis_disassembler_test() {
  101018:	deffe004 	addi	sp,sp,-128
  10101c:	dfc01f15 	stw	ra,124(sp)
  101020:	df001e15 	stw	fp,120(sp)
  101024:	df001e04 	addi	fp,sp,120
    const uint16_t instructions_bin[] = {
  101028:	e03fe30d 	sth	zero,-116(fp)
  10102c:	00806944 	movi	r2,421
  101030:	e0bfe38d 	sth	r2,-114(fp)
  101034:	00816944 	movi	r2,1445
  101038:	e0bfe40d 	sth	r2,-112(fp)
  10103c:	00820184 	movi	r2,2054
  101040:	e0bfe48d 	sth	r2,-110(fp)
  101044:	00830004 	movi	r2,3072
  101048:	e0bfe50d 	sth	r2,-108(fp)
  10104c:	00a2ba04 	movi	r2,-29976
  101050:	e0bfe58d 	sth	r2,-106(fp)
  101054:	00a8d604 	movi	r2,-23720
  101058:	e0bfe60d 	sth	r2,-104(fp)
  10105c:	00ba0104 	movi	r2,-6140
  101060:	e0bfe68d 	sth	r2,-102(fp)
  101064:	00b60084 	movi	r2,-10238
  101068:	e0bfe70d 	sth	r2,-100(fp)
  10106c:	00920004 	movi	r2,18432
  101070:	e0bfe78d 	sth	r2,-98(fp)
  101074:	00940004 	movi	r2,20480
  101078:	e0bfe80d 	sth	r2,-96(fp)
  10107c:	00900004 	movi	r2,16384
  101080:	e0bfe88d 	sth	r2,-94(fp)
  101084:	00980044 	movi	r2,24577
  101088:	e0bfe90d 	sth	r2,-92(fp)
        0x0C00, 0x8AE8, 0xA358, 0xE804, 
        0xD802, 0x4800, 0x5000, 0x4000, 
        0x6001, 
    };

    const char *instructions_str[] = {
  10108c:	008004b4 	movhi	r2,18
  101090:	108bbe04 	addi	r2,r2,12024
  101094:	e0bfea15 	stw	r2,-88(fp)
  101098:	008004b4 	movhi	r2,18
  10109c:	108c1f04 	addi	r2,r2,12412
  1010a0:	e0bfeb15 	stw	r2,-84(fp)
  1010a4:	008004b4 	movhi	r2,18
  1010a8:	108c2104 	addi	r2,r2,12420
  1010ac:	e0bfec15 	stw	r2,-80(fp)
  1010b0:	008004b4 	movhi	r2,18
  1010b4:	108c2304 	addi	r2,r2,12428
  1010b8:	e0bfed15 	stw	r2,-76(fp)
  1010bc:	008004b4 	movhi	r2,18
  1010c0:	108c2504 	addi	r2,r2,12436
  1010c4:	e0bfee15 	stw	r2,-72(fp)
  1010c8:	008004b4 	movhi	r2,18
  1010cc:	108c2704 	addi	r2,r2,12444
  1010d0:	e0bfef15 	stw	r2,-68(fp)
  1010d4:	008004b4 	movhi	r2,18
  1010d8:	108c2b04 	addi	r2,r2,12460
  1010dc:	e0bff015 	stw	r2,-64(fp)
  1010e0:	008004b4 	movhi	r2,18
  1010e4:	108c2f04 	addi	r2,r2,12476
  1010e8:	e0bff115 	stw	r2,-60(fp)
  1010ec:	008004b4 	movhi	r2,18
  1010f0:	108c3304 	addi	r2,r2,12492
  1010f4:	e0bff215 	stw	r2,-56(fp)
  1010f8:	008004b4 	movhi	r2,18
  1010fc:	108bc404 	addi	r2,r2,12048
  101100:	e0bff315 	stw	r2,-52(fp)
  101104:	008004b4 	movhi	r2,18
  101108:	108bc204 	addi	r2,r2,12040
  10110c:	e0bff415 	stw	r2,-48(fp)
  101110:	008004b4 	movhi	r2,18
  101114:	108bc304 	addi	r2,r2,12044
  101118:	e0bff515 	stw	r2,-44(fp)
  10111c:	008004b4 	movhi	r2,18
  101120:	108c3704 	addi	r2,r2,12508
  101124:	e0bff615 	stw	r2,-40(fp)
  101128:	008004b4 	movhi	r2,18
  10112c:	108c3904 	addi	r2,r2,12516
  101130:	e0bff715 	stw	r2,-36(fp)
        "SUB NIL",      "MOV 744, ACC", "MOV 856, LEFT", "MOV LEFT, RIGHT",
        "MOV UP, DOWN", "NEG",          "SWP",           "SAV",
        "JRO ACC",      "JEZ 0x0"
    };

    for (int i = 0; i < (sizeof(instructions_bin) / sizeof(instructions_bin[0])); i++) {
  101134:	e03fe215 	stw	zero,-120(fp)
  101138:	00003006 	br	1011fc <tis_disassembler_test+0x1e4>
        char result[32] = {0};
  10113c:	e03ff815 	stw	zero,-32(fp)
  101140:	e03ff915 	stw	zero,-28(fp)
  101144:	e03ffa15 	stw	zero,-24(fp)
  101148:	e03ffb15 	stw	zero,-20(fp)
  10114c:	e03ffc15 	stw	zero,-16(fp)
  101150:	e03ffd15 	stw	zero,-12(fp)
  101154:	e03ffe15 	stw	zero,-8(fp)
  101158:	e03fff15 	stw	zero,-4(fp)
        tis_dissassemble(instructions_bin[i], result);
  10115c:	e0bfe217 	ldw	r2,-120(fp)
  101160:	1085883a 	add	r2,r2,r2
  101164:	e0ffe204 	addi	r3,fp,-120
  101168:	1885883a 	add	r2,r3,r2
  10116c:	10800104 	addi	r2,r2,4
  101170:	1080000b 	ldhu	r2,0(r2)
  101174:	10bfffcc 	andi	r2,r2,65535
  101178:	e0fff804 	addi	r3,fp,-32
  10117c:	180b883a 	mov	r5,r3
  101180:	1009883a 	mov	r4,r2
  101184:	01003b00 	call	1003b0 <tis_dissassemble>

        if (strcmp(result, instructions_str[i])) {
  101188:	e0bfe217 	ldw	r2,-120(fp)
  10118c:	1085883a 	add	r2,r2,r2
  101190:	1085883a 	add	r2,r2,r2
  101194:	e0ffe204 	addi	r3,fp,-120
  101198:	1885883a 	add	r2,r3,r2
  10119c:	10800804 	addi	r2,r2,32
  1011a0:	10c00017 	ldw	r3,0(r2)
  1011a4:	e0bff804 	addi	r2,fp,-32
  1011a8:	180b883a 	mov	r5,r3
  1011ac:	1009883a 	mov	r4,r2
  1011b0:	0101c200 	call	101c20 <strcmp>
  1011b4:	10000e26 	beq	r2,zero,1011f0 <tis_disassembler_test+0x1d8>
            printf("Failed at %d\nExpected: %s\nResult: %s\n", i, instructions_str[i], result);
  1011b8:	e0bfe217 	ldw	r2,-120(fp)
  1011bc:	1085883a 	add	r2,r2,r2
  1011c0:	1085883a 	add	r2,r2,r2
  1011c4:	e0ffe204 	addi	r3,fp,-120
  1011c8:	1885883a 	add	r2,r3,r2
  1011cc:	10800804 	addi	r2,r2,32
  1011d0:	10800017 	ldw	r2,0(r2)
  1011d4:	e0fff804 	addi	r3,fp,-32
  1011d8:	180f883a 	mov	r7,r3
  1011dc:	100d883a 	mov	r6,r2
  1011e0:	e17fe217 	ldw	r5,-120(fp)
  1011e4:	010004b4 	movhi	r4,18
  1011e8:	210c3b04 	addi	r4,r4,12524
  1011ec:	010181c0 	call	10181c <printf>
        "SUB NIL",      "MOV 744, ACC", "MOV 856, LEFT", "MOV LEFT, RIGHT",
        "MOV UP, DOWN", "NEG",          "SWP",           "SAV",
        "JRO ACC",      "JEZ 0x0"
    };

    for (int i = 0; i < (sizeof(instructions_bin) / sizeof(instructions_bin[0])); i++) {
  1011f0:	e0bfe217 	ldw	r2,-120(fp)
  1011f4:	10800044 	addi	r2,r2,1
  1011f8:	e0bfe215 	stw	r2,-120(fp)
  1011fc:	e0bfe217 	ldw	r2,-120(fp)
  101200:	10800370 	cmpltui	r2,r2,13
  101204:	103fcd1e 	bne	r2,zero,10113c <__alt_data_end+0xfffc113c>

        if (strcmp(result, instructions_str[i])) {
            printf("Failed at %d\nExpected: %s\nResult: %s\n", i, instructions_str[i], result);
        }
    }
}
  101208:	0001883a 	nop
  10120c:	e037883a 	mov	sp,fp
  101210:	dfc00117 	ldw	ra,4(sp)
  101214:	df000017 	ldw	fp,0(sp)
  101218:	dec00204 	addi	sp,sp,8
  10121c:	f800283a 	ret

00101220 <tis_assembler_test>:

void tis_assembler_test() {
  101220:	defff204 	addi	sp,sp,-56
  101224:	dfc00d15 	stw	ra,52(sp)
  101228:	df000c15 	stw	fp,48(sp)
  10122c:	df000c04 	addi	fp,sp,48
	puts("Starting assembler test");
  101230:	010004b4 	movhi	r4,18
  101234:	210c4504 	addi	r4,r4,12564
  101238:	01019180 	call	101918 <puts>

    char* assembly =
  10123c:	008004b4 	movhi	r2,18
  101240:	108c4b04 	addi	r2,r2,12588
  101244:	e0bff615 	stw	r2,-40(fp)
        "SUB NIL\n"
        "MOV 744, ACC\n"
        "JEZ TWO\n"
        "JRO ACC";

    uint16_t expected[] = {
  101248:	e03ff80d 	sth	zero,-32(fp)
  10124c:	00806944 	movi	r2,421
  101250:	e0bff88d 	sth	r2,-30(fp)
  101254:	00816944 	movi	r2,1445
  101258:	e0bff90d 	sth	r2,-28(fp)
  10125c:	00820184 	movi	r2,2054
  101260:	e0bff98d 	sth	r2,-26(fp)
  101264:	00830004 	movi	r2,3072
  101268:	e0bffa0d 	sth	r2,-24(fp)
  10126c:	00a2ba04 	movi	r2,-29976
  101270:	e0bffa8d 	sth	r2,-22(fp)
  101274:	009c1084 	movi	r2,28738
  101278:	e0bffb0d 	sth	r2,-20(fp)
  10127c:	00980044 	movi	r2,24577
  101280:	e0bffb8d 	sth	r2,-18(fp)
        0x0000, 0x01A5, 0x05A5, 0x0806, 0x0C00, 0x8AE8, 0x7042, 0x6001
    };

    uint16_t result[8];
    int count = tis_assemble_program(assembly, result);
  101284:	e0bffc04 	addi	r2,fp,-16
  101288:	100b883a 	mov	r5,r2
  10128c:	e13ff617 	ldw	r4,-40(fp)
  101290:	010092c0 	call	10092c <tis_assemble_program>
  101294:	e0bff715 	stw	r2,-36(fp)

    printf("Encoded %d instructions\n", count);
  101298:	e17ff717 	ldw	r5,-36(fp)
  10129c:	010004b4 	movhi	r4,18
  1012a0:	210c6004 	addi	r4,r4,12672
  1012a4:	010181c0 	call	10181c <printf>

    int failures = 0;
  1012a8:	e03ff415 	stw	zero,-48(fp)
    for (int i = 0; i < (sizeof(expected)/sizeof(expected[0])); i++) {
  1012ac:	e03ff515 	stw	zero,-44(fp)
  1012b0:	00002906 	br	101358 <tis_assembler_test+0x138>
        if (expected[i] != result[i]) {
  1012b4:	e0bff517 	ldw	r2,-44(fp)
  1012b8:	1085883a 	add	r2,r2,r2
  1012bc:	e0fff404 	addi	r3,fp,-48
  1012c0:	1885883a 	add	r2,r3,r2
  1012c4:	10800404 	addi	r2,r2,16
  1012c8:	10c0000b 	ldhu	r3,0(r2)
  1012cc:	e0bff517 	ldw	r2,-44(fp)
  1012d0:	1085883a 	add	r2,r2,r2
  1012d4:	e13ff404 	addi	r4,fp,-48
  1012d8:	2085883a 	add	r2,r4,r2
  1012dc:	10800804 	addi	r2,r2,32
  1012e0:	1080000b 	ldhu	r2,0(r2)
  1012e4:	18ffffcc 	andi	r3,r3,65535
  1012e8:	10bfffcc 	andi	r2,r2,65535
  1012ec:	18801726 	beq	r3,r2,10134c <tis_assembler_test+0x12c>
            printf("Failed at %d\nExpected: %X\nResult: %X\n", i, expected[i], result[i]);
  1012f0:	e0bff517 	ldw	r2,-44(fp)
  1012f4:	1085883a 	add	r2,r2,r2
  1012f8:	e0fff404 	addi	r3,fp,-48
  1012fc:	1885883a 	add	r2,r3,r2
  101300:	10800404 	addi	r2,r2,16
  101304:	1080000b 	ldhu	r2,0(r2)
  101308:	10ffffcc 	andi	r3,r2,65535
  10130c:	e0bff517 	ldw	r2,-44(fp)
  101310:	1085883a 	add	r2,r2,r2
  101314:	e13ff404 	addi	r4,fp,-48
  101318:	2085883a 	add	r2,r4,r2
  10131c:	10800804 	addi	r2,r2,32
  101320:	1080000b 	ldhu	r2,0(r2)
  101324:	10bfffcc 	andi	r2,r2,65535
  101328:	100f883a 	mov	r7,r2
  10132c:	180d883a 	mov	r6,r3
  101330:	e17ff517 	ldw	r5,-44(fp)
  101334:	010004b4 	movhi	r4,18
  101338:	210c6704 	addi	r4,r4,12700
  10133c:	010181c0 	call	10181c <printf>
            failures++;
  101340:	e0bff417 	ldw	r2,-48(fp)
  101344:	10800044 	addi	r2,r2,1
  101348:	e0bff415 	stw	r2,-48(fp)
    int count = tis_assemble_program(assembly, result);

    printf("Encoded %d instructions\n", count);

    int failures = 0;
    for (int i = 0; i < (sizeof(expected)/sizeof(expected[0])); i++) {
  10134c:	e0bff517 	ldw	r2,-44(fp)
  101350:	10800044 	addi	r2,r2,1
  101354:	e0bff515 	stw	r2,-44(fp)
  101358:	e0bff517 	ldw	r2,-44(fp)
  10135c:	10800230 	cmpltui	r2,r2,8
  101360:	103fd41e 	bne	r2,zero,1012b4 <__alt_data_end+0xfffc12b4>
        if (expected[i] != result[i]) {
            printf("Failed at %d\nExpected: %X\nResult: %X\n", i, expected[i], result[i]);
            failures++;
        }
    }
    if (failures) {
  101364:	e0bff417 	ldw	r2,-48(fp)
  101368:	10000526 	beq	r2,zero,101380 <tis_assembler_test+0x160>
        printf("Found %d failures", failures);
  10136c:	e17ff417 	ldw	r5,-48(fp)
  101370:	010004b4 	movhi	r4,18
  101374:	210c7104 	addi	r4,r4,12740
  101378:	010181c0 	call	10181c <printf>
    } else {
        puts("Assembler success! :)");
    }
}
  10137c:	00000306 	br	10138c <tis_assembler_test+0x16c>
        }
    }
    if (failures) {
        printf("Found %d failures", failures);
    } else {
        puts("Assembler success! :)");
  101380:	010004b4 	movhi	r4,18
  101384:	210c7604 	addi	r4,r4,12760
  101388:	01019180 	call	101918 <puts>
    }
}
  10138c:	0001883a 	nop
  101390:	e037883a 	mov	sp,fp
  101394:	dfc00117 	ldw	ra,4(sp)
  101398:	df000017 	ldw	fp,0(sp)
  10139c:	dec00204 	addi	sp,sp,8
  1013a0:	f800283a 	ret

001013a4 <configure_node>:
#include <stdio.h>

#include "tis_node.h"
#include "tis_asm.h"

struct tis_node* configure_node(void* base, const uint16_t instructions[], char instruction_count) {
  1013a4:	defffa04 	addi	sp,sp,-24
  1013a8:	df000515 	stw	fp,20(sp)
  1013ac:	df000504 	addi	fp,sp,20
  1013b0:	e13ffd15 	stw	r4,-12(fp)
  1013b4:	e17ffe15 	stw	r5,-8(fp)
  1013b8:	3005883a 	mov	r2,r6
  1013bc:	e0bfff05 	stb	r2,-4(fp)
    struct tis_node *node = (struct tis_node*) base;
  1013c0:	e0bffd17 	ldw	r2,-12(fp)
  1013c4:	e0bffc15 	stw	r2,-16(fp)

    node->config = instruction_count & 0xF;
  1013c8:	e0bfff03 	ldbu	r2,-4(fp)
  1013cc:	10803fcc 	andi	r2,r2,255
  1013d0:	108003cc 	andi	r2,r2,15
  1013d4:	1007883a 	mov	r3,r2
  1013d8:	e0bffc17 	ldw	r2,-16(fp)
  1013dc:	10c0000d 	sth	r3,0(r2)

    if (instruction_count > 15) {
  1013e0:	e0bfff07 	ldb	r2,-4(fp)
  1013e4:	10800410 	cmplti	r2,r2,16
  1013e8:	1000021e 	bne	r2,zero,1013f4 <configure_node+0x50>
        return (struct tis_node*)0;
  1013ec:	0005883a 	mov	r2,zero
  1013f0:	00001506 	br	101448 <configure_node+0xa4>
    }

    for (int i = 0; i < instruction_count; i++) {
  1013f4:	e03ffb15 	stw	zero,-20(fp)
  1013f8:	00000f06 	br	101438 <configure_node+0x94>
        node->instructions[i] = instructions[i];
  1013fc:	e0bffb17 	ldw	r2,-20(fp)
  101400:	1085883a 	add	r2,r2,r2
  101404:	1007883a 	mov	r3,r2
  101408:	e0bffe17 	ldw	r2,-8(fp)
  10140c:	10c5883a 	add	r2,r2,r3
  101410:	10c0000b 	ldhu	r3,0(r2)
  101414:	e13ffc17 	ldw	r4,-16(fp)
  101418:	e0bffb17 	ldw	r2,-20(fp)
  10141c:	1085883a 	add	r2,r2,r2
  101420:	2085883a 	add	r2,r4,r2
  101424:	10800084 	addi	r2,r2,2
  101428:	10c0000d 	sth	r3,0(r2)

    if (instruction_count > 15) {
        return (struct tis_node*)0;
    }

    for (int i = 0; i < instruction_count; i++) {
  10142c:	e0bffb17 	ldw	r2,-20(fp)
  101430:	10800044 	addi	r2,r2,1
  101434:	e0bffb15 	stw	r2,-20(fp)
  101438:	e0bfff07 	ldb	r2,-4(fp)
  10143c:	e0fffb17 	ldw	r3,-20(fp)
  101440:	18bfee16 	blt	r3,r2,1013fc <__alt_data_end+0xfffc13fc>
        node->instructions[i] = instructions[i];
    }

    return node;
  101444:	e0bffc17 	ldw	r2,-16(fp)
}
  101448:	e037883a 	mov	sp,fp
  10144c:	df000017 	ldw	fp,0(sp)
  101450:	dec00104 	addi	sp,sp,4
  101454:	f800283a 	ret

00101458 <node_info>:

int node_info(struct tis_node* node, char buffer[]) {
  101458:	defff904 	addi	sp,sp,-28
  10145c:	dfc00615 	stw	ra,24(sp)
  101460:	df000515 	stw	fp,20(sp)
  101464:	df000504 	addi	fp,sp,20
  101468:	e13ffe15 	stw	r4,-8(fp)
  10146c:	e17fff15 	stw	r5,-4(fp)
    char instruction_count = node->config & 0xF;
  101470:	e0bffe17 	ldw	r2,-8(fp)
  101474:	1080000b 	ldhu	r2,0(r2)
  101478:	108003cc 	andi	r2,r2,15
  10147c:	e0bffd05 	stb	r2,-12(fp)

    if (!instruction_count) {
  101480:	e0bffd07 	ldb	r2,-12(fp)
  101484:	10000b1e 	bne	r2,zero,1014b4 <node_info+0x5c>
        return sprintf(buffer, "Node unconfigured\n");
  101488:	e0ffff17 	ldw	r3,-4(fp)
  10148c:	008004b4 	movhi	r2,18
  101490:	108c7c04 	addi	r2,r2,12784
  101494:	1009883a 	mov	r4,r2
  101498:	008004c4 	movi	r2,19
  10149c:	100d883a 	mov	r6,r2
  1014a0:	200b883a 	mov	r5,r4
  1014a4:	1809883a 	mov	r4,r3
  1014a8:	010157c0 	call	10157c <memcpy>
  1014ac:	00800484 	movi	r2,18
  1014b0:	00002d06 	br	101568 <node_info+0x110>
    }

    int ptr_offset = 0;
  1014b4:	e03ffb15 	stw	zero,-20(fp)

    ptr_offset += sprintf(buffer, "%d instruction(s):\n", instruction_count);
  1014b8:	e0bffd07 	ldb	r2,-12(fp)
  1014bc:	100d883a 	mov	r6,r2
  1014c0:	014004b4 	movhi	r5,18
  1014c4:	294c8104 	addi	r5,r5,12804
  1014c8:	e13fff17 	ldw	r4,-4(fp)
  1014cc:	01019840 	call	101984 <sprintf>
  1014d0:	1007883a 	mov	r3,r2
  1014d4:	e0bffb17 	ldw	r2,-20(fp)
  1014d8:	10c5883a 	add	r2,r2,r3
  1014dc:	e0bffb15 	stw	r2,-20(fp)

    for (int i = 0; i < instruction_count; i++) {
  1014e0:	e03ffc15 	stw	zero,-16(fp)
  1014e4:	00001c06 	br	101558 <node_info+0x100>
        uint16_t instruction = node->instructions[i];
  1014e8:	e0fffe17 	ldw	r3,-8(fp)
  1014ec:	e0bffc17 	ldw	r2,-16(fp)
  1014f0:	1085883a 	add	r2,r2,r2
  1014f4:	1885883a 	add	r2,r3,r2
  1014f8:	10800084 	addi	r2,r2,2
  1014fc:	1080000b 	ldhu	r2,0(r2)
  101500:	e0bffd8d 	sth	r2,-10(fp)
        ptr_offset += tis_dissassemble(instruction, &buffer[ptr_offset]);
  101504:	e13ffd8b 	ldhu	r4,-10(fp)
  101508:	e0bffb17 	ldw	r2,-20(fp)
  10150c:	e0ffff17 	ldw	r3,-4(fp)
  101510:	1885883a 	add	r2,r3,r2
  101514:	100b883a 	mov	r5,r2
  101518:	01003b00 	call	1003b0 <tis_dissassemble>
  10151c:	1007883a 	mov	r3,r2
  101520:	e0bffb17 	ldw	r2,-20(fp)
  101524:	10c5883a 	add	r2,r2,r3
  101528:	e0bffb15 	stw	r2,-20(fp)
        buffer[ptr_offset] = '\n';
  10152c:	e0bffb17 	ldw	r2,-20(fp)
  101530:	e0ffff17 	ldw	r3,-4(fp)
  101534:	1885883a 	add	r2,r3,r2
  101538:	00c00284 	movi	r3,10
  10153c:	10c00005 	stb	r3,0(r2)
        ptr_offset += 1;
  101540:	e0bffb17 	ldw	r2,-20(fp)
  101544:	10800044 	addi	r2,r2,1
  101548:	e0bffb15 	stw	r2,-20(fp)

    int ptr_offset = 0;

    ptr_offset += sprintf(buffer, "%d instruction(s):\n", instruction_count);

    for (int i = 0; i < instruction_count; i++) {
  10154c:	e0bffc17 	ldw	r2,-16(fp)
  101550:	10800044 	addi	r2,r2,1
  101554:	e0bffc15 	stw	r2,-16(fp)
  101558:	e0bffd07 	ldb	r2,-12(fp)
  10155c:	e0fffc17 	ldw	r3,-16(fp)
  101560:	18bfe116 	blt	r3,r2,1014e8 <__alt_data_end+0xfffc14e8>
        uint16_t instruction = node->instructions[i];
        ptr_offset += tis_dissassemble(instruction, &buffer[ptr_offset]);
        buffer[ptr_offset] = '\n';
        ptr_offset += 1;
    }
    return ptr_offset;
  101564:	e0bffb17 	ldw	r2,-20(fp)
}
  101568:	e037883a 	mov	sp,fp
  10156c:	dfc00117 	ldw	ra,4(sp)
  101570:	df000017 	ldw	fp,0(sp)
  101574:	dec00204 	addi	sp,sp,8
  101578:	f800283a 	ret

0010157c <memcpy>:
  10157c:	defffd04 	addi	sp,sp,-12
  101580:	dfc00215 	stw	ra,8(sp)
  101584:	dc400115 	stw	r17,4(sp)
  101588:	dc000015 	stw	r16,0(sp)
  10158c:	00c003c4 	movi	r3,15
  101590:	2005883a 	mov	r2,r4
  101594:	1980452e 	bgeu	r3,r6,1016ac <memcpy+0x130>
  101598:	2906b03a 	or	r3,r5,r4
  10159c:	18c000cc 	andi	r3,r3,3
  1015a0:	1800441e 	bne	r3,zero,1016b4 <memcpy+0x138>
  1015a4:	347ffc04 	addi	r17,r6,-16
  1015a8:	8822d13a 	srli	r17,r17,4
  1015ac:	28c00104 	addi	r3,r5,4
  1015b0:	23400104 	addi	r13,r4,4
  1015b4:	8820913a 	slli	r16,r17,4
  1015b8:	2b000204 	addi	r12,r5,8
  1015bc:	22c00204 	addi	r11,r4,8
  1015c0:	84000504 	addi	r16,r16,20
  1015c4:	2a800304 	addi	r10,r5,12
  1015c8:	22400304 	addi	r9,r4,12
  1015cc:	2c21883a 	add	r16,r5,r16
  1015d0:	2811883a 	mov	r8,r5
  1015d4:	200f883a 	mov	r7,r4
  1015d8:	41000017 	ldw	r4,0(r8)
  1015dc:	1fc00017 	ldw	ra,0(r3)
  1015e0:	63c00017 	ldw	r15,0(r12)
  1015e4:	39000015 	stw	r4,0(r7)
  1015e8:	53800017 	ldw	r14,0(r10)
  1015ec:	6fc00015 	stw	ra,0(r13)
  1015f0:	5bc00015 	stw	r15,0(r11)
  1015f4:	4b800015 	stw	r14,0(r9)
  1015f8:	18c00404 	addi	r3,r3,16
  1015fc:	39c00404 	addi	r7,r7,16
  101600:	42000404 	addi	r8,r8,16
  101604:	6b400404 	addi	r13,r13,16
  101608:	63000404 	addi	r12,r12,16
  10160c:	5ac00404 	addi	r11,r11,16
  101610:	52800404 	addi	r10,r10,16
  101614:	4a400404 	addi	r9,r9,16
  101618:	1c3fef1e 	bne	r3,r16,1015d8 <__alt_data_end+0xfffc15d8>
  10161c:	89c00044 	addi	r7,r17,1
  101620:	380e913a 	slli	r7,r7,4
  101624:	310003cc 	andi	r4,r6,15
  101628:	02c000c4 	movi	r11,3
  10162c:	11c7883a 	add	r3,r2,r7
  101630:	29cb883a 	add	r5,r5,r7
  101634:	5900212e 	bgeu	r11,r4,1016bc <memcpy+0x140>
  101638:	1813883a 	mov	r9,r3
  10163c:	2811883a 	mov	r8,r5
  101640:	200f883a 	mov	r7,r4
  101644:	42800017 	ldw	r10,0(r8)
  101648:	4a400104 	addi	r9,r9,4
  10164c:	39ffff04 	addi	r7,r7,-4
  101650:	4abfff15 	stw	r10,-4(r9)
  101654:	42000104 	addi	r8,r8,4
  101658:	59fffa36 	bltu	r11,r7,101644 <__alt_data_end+0xfffc1644>
  10165c:	213fff04 	addi	r4,r4,-4
  101660:	2008d0ba 	srli	r4,r4,2
  101664:	318000cc 	andi	r6,r6,3
  101668:	21000044 	addi	r4,r4,1
  10166c:	2109883a 	add	r4,r4,r4
  101670:	2109883a 	add	r4,r4,r4
  101674:	1907883a 	add	r3,r3,r4
  101678:	290b883a 	add	r5,r5,r4
  10167c:	30000626 	beq	r6,zero,101698 <memcpy+0x11c>
  101680:	198d883a 	add	r6,r3,r6
  101684:	29c00003 	ldbu	r7,0(r5)
  101688:	18c00044 	addi	r3,r3,1
  10168c:	29400044 	addi	r5,r5,1
  101690:	19ffffc5 	stb	r7,-1(r3)
  101694:	19bffb1e 	bne	r3,r6,101684 <__alt_data_end+0xfffc1684>
  101698:	dfc00217 	ldw	ra,8(sp)
  10169c:	dc400117 	ldw	r17,4(sp)
  1016a0:	dc000017 	ldw	r16,0(sp)
  1016a4:	dec00304 	addi	sp,sp,12
  1016a8:	f800283a 	ret
  1016ac:	2007883a 	mov	r3,r4
  1016b0:	003ff206 	br	10167c <__alt_data_end+0xfffc167c>
  1016b4:	2007883a 	mov	r3,r4
  1016b8:	003ff106 	br	101680 <__alt_data_end+0xfffc1680>
  1016bc:	200d883a 	mov	r6,r4
  1016c0:	003fee06 	br	10167c <__alt_data_end+0xfffc167c>

001016c4 <memset>:
  1016c4:	20c000cc 	andi	r3,r4,3
  1016c8:	2005883a 	mov	r2,r4
  1016cc:	18004426 	beq	r3,zero,1017e0 <memset+0x11c>
  1016d0:	31ffffc4 	addi	r7,r6,-1
  1016d4:	30004026 	beq	r6,zero,1017d8 <memset+0x114>
  1016d8:	2813883a 	mov	r9,r5
  1016dc:	200d883a 	mov	r6,r4
  1016e0:	2007883a 	mov	r3,r4
  1016e4:	00000406 	br	1016f8 <memset+0x34>
  1016e8:	3a3fffc4 	addi	r8,r7,-1
  1016ec:	31800044 	addi	r6,r6,1
  1016f0:	38003926 	beq	r7,zero,1017d8 <memset+0x114>
  1016f4:	400f883a 	mov	r7,r8
  1016f8:	18c00044 	addi	r3,r3,1
  1016fc:	32400005 	stb	r9,0(r6)
  101700:	1a0000cc 	andi	r8,r3,3
  101704:	403ff81e 	bne	r8,zero,1016e8 <__alt_data_end+0xfffc16e8>
  101708:	010000c4 	movi	r4,3
  10170c:	21c02d2e 	bgeu	r4,r7,1017c4 <memset+0x100>
  101710:	29003fcc 	andi	r4,r5,255
  101714:	200c923a 	slli	r6,r4,8
  101718:	3108b03a 	or	r4,r6,r4
  10171c:	200c943a 	slli	r6,r4,16
  101720:	218cb03a 	or	r6,r4,r6
  101724:	010003c4 	movi	r4,15
  101728:	21c0182e 	bgeu	r4,r7,10178c <memset+0xc8>
  10172c:	3b3ffc04 	addi	r12,r7,-16
  101730:	6018d13a 	srli	r12,r12,4
  101734:	1a000104 	addi	r8,r3,4
  101738:	1ac00204 	addi	r11,r3,8
  10173c:	6008913a 	slli	r4,r12,4
  101740:	1a800304 	addi	r10,r3,12
  101744:	1813883a 	mov	r9,r3
  101748:	21000504 	addi	r4,r4,20
  10174c:	1909883a 	add	r4,r3,r4
  101750:	49800015 	stw	r6,0(r9)
  101754:	41800015 	stw	r6,0(r8)
  101758:	59800015 	stw	r6,0(r11)
  10175c:	51800015 	stw	r6,0(r10)
  101760:	42000404 	addi	r8,r8,16
  101764:	4a400404 	addi	r9,r9,16
  101768:	5ac00404 	addi	r11,r11,16
  10176c:	52800404 	addi	r10,r10,16
  101770:	413ff71e 	bne	r8,r4,101750 <__alt_data_end+0xfffc1750>
  101774:	63000044 	addi	r12,r12,1
  101778:	6018913a 	slli	r12,r12,4
  10177c:	39c003cc 	andi	r7,r7,15
  101780:	010000c4 	movi	r4,3
  101784:	1b07883a 	add	r3,r3,r12
  101788:	21c00e2e 	bgeu	r4,r7,1017c4 <memset+0x100>
  10178c:	1813883a 	mov	r9,r3
  101790:	3811883a 	mov	r8,r7
  101794:	010000c4 	movi	r4,3
  101798:	49800015 	stw	r6,0(r9)
  10179c:	423fff04 	addi	r8,r8,-4
  1017a0:	4a400104 	addi	r9,r9,4
  1017a4:	223ffc36 	bltu	r4,r8,101798 <__alt_data_end+0xfffc1798>
  1017a8:	393fff04 	addi	r4,r7,-4
  1017ac:	2008d0ba 	srli	r4,r4,2
  1017b0:	39c000cc 	andi	r7,r7,3
  1017b4:	21000044 	addi	r4,r4,1
  1017b8:	2109883a 	add	r4,r4,r4
  1017bc:	2109883a 	add	r4,r4,r4
  1017c0:	1907883a 	add	r3,r3,r4
  1017c4:	38000526 	beq	r7,zero,1017dc <memset+0x118>
  1017c8:	19cf883a 	add	r7,r3,r7
  1017cc:	19400005 	stb	r5,0(r3)
  1017d0:	18c00044 	addi	r3,r3,1
  1017d4:	38fffd1e 	bne	r7,r3,1017cc <__alt_data_end+0xfffc17cc>
  1017d8:	f800283a 	ret
  1017dc:	f800283a 	ret
  1017e0:	2007883a 	mov	r3,r4
  1017e4:	300f883a 	mov	r7,r6
  1017e8:	003fc706 	br	101708 <__alt_data_end+0xfffc1708>

001017ec <_printf_r>:
  1017ec:	defffd04 	addi	sp,sp,-12
  1017f0:	2805883a 	mov	r2,r5
  1017f4:	dfc00015 	stw	ra,0(sp)
  1017f8:	d9800115 	stw	r6,4(sp)
  1017fc:	d9c00215 	stw	r7,8(sp)
  101800:	21400217 	ldw	r5,8(r4)
  101804:	d9c00104 	addi	r7,sp,4
  101808:	100d883a 	mov	r6,r2
  10180c:	0105a800 	call	105a80 <___vfprintf_internal_r>
  101810:	dfc00017 	ldw	ra,0(sp)
  101814:	dec00304 	addi	sp,sp,12
  101818:	f800283a 	ret

0010181c <printf>:
  10181c:	defffc04 	addi	sp,sp,-16
  101820:	dfc00015 	stw	ra,0(sp)
  101824:	d9400115 	stw	r5,4(sp)
  101828:	d9800215 	stw	r6,8(sp)
  10182c:	d9c00315 	stw	r7,12(sp)
  101830:	008004b4 	movhi	r2,18
  101834:	10957404 	addi	r2,r2,21968
  101838:	10800017 	ldw	r2,0(r2)
  10183c:	200b883a 	mov	r5,r4
  101840:	d9800104 	addi	r6,sp,4
  101844:	11000217 	ldw	r4,8(r2)
  101848:	0107d5c0 	call	107d5c <__vfprintf_internal>
  10184c:	dfc00017 	ldw	ra,0(sp)
  101850:	dec00404 	addi	sp,sp,16
  101854:	f800283a 	ret

00101858 <_puts_r>:
  101858:	defff604 	addi	sp,sp,-40
  10185c:	dc000715 	stw	r16,28(sp)
  101860:	2021883a 	mov	r16,r4
  101864:	2809883a 	mov	r4,r5
  101868:	dc400815 	stw	r17,32(sp)
  10186c:	dfc00915 	stw	ra,36(sp)
  101870:	2823883a 	mov	r17,r5
  101874:	0101cfc0 	call	101cfc <strlen>
  101878:	10c00044 	addi	r3,r2,1
  10187c:	d8800115 	stw	r2,4(sp)
  101880:	008004b4 	movhi	r2,18
  101884:	108c8604 	addi	r2,r2,12824
  101888:	d8800215 	stw	r2,8(sp)
  10188c:	00800044 	movi	r2,1
  101890:	d8800315 	stw	r2,12(sp)
  101894:	00800084 	movi	r2,2
  101898:	dc400015 	stw	r17,0(sp)
  10189c:	d8c00615 	stw	r3,24(sp)
  1018a0:	dec00415 	stw	sp,16(sp)
  1018a4:	d8800515 	stw	r2,20(sp)
  1018a8:	80000226 	beq	r16,zero,1018b4 <_puts_r+0x5c>
  1018ac:	80800e17 	ldw	r2,56(r16)
  1018b0:	10001426 	beq	r2,zero,101904 <_puts_r+0xac>
  1018b4:	81400217 	ldw	r5,8(r16)
  1018b8:	2880030b 	ldhu	r2,12(r5)
  1018bc:	10c8000c 	andi	r3,r2,8192
  1018c0:	1800061e 	bne	r3,zero,1018dc <_puts_r+0x84>
  1018c4:	29001917 	ldw	r4,100(r5)
  1018c8:	00f7ffc4 	movi	r3,-8193
  1018cc:	10880014 	ori	r2,r2,8192
  1018d0:	20c6703a 	and	r3,r4,r3
  1018d4:	2880030d 	sth	r2,12(r5)
  1018d8:	28c01915 	stw	r3,100(r5)
  1018dc:	d9800404 	addi	r6,sp,16
  1018e0:	8009883a 	mov	r4,r16
  1018e4:	010a3780 	call	10a378 <__sfvwrite_r>
  1018e8:	1000091e 	bne	r2,zero,101910 <_puts_r+0xb8>
  1018ec:	00800284 	movi	r2,10
  1018f0:	dfc00917 	ldw	ra,36(sp)
  1018f4:	dc400817 	ldw	r17,32(sp)
  1018f8:	dc000717 	ldw	r16,28(sp)
  1018fc:	dec00a04 	addi	sp,sp,40
  101900:	f800283a 	ret
  101904:	8009883a 	mov	r4,r16
  101908:	0109ef40 	call	109ef4 <__sinit>
  10190c:	003fe906 	br	1018b4 <__alt_data_end+0xfffc18b4>
  101910:	00bfffc4 	movi	r2,-1
  101914:	003ff606 	br	1018f0 <__alt_data_end+0xfffc18f0>

00101918 <puts>:
  101918:	008004b4 	movhi	r2,18
  10191c:	10957404 	addi	r2,r2,21968
  101920:	200b883a 	mov	r5,r4
  101924:	11000017 	ldw	r4,0(r2)
  101928:	01018581 	jmpi	101858 <_puts_r>

0010192c <_sprintf_r>:
  10192c:	deffe404 	addi	sp,sp,-112
  101930:	2807883a 	mov	r3,r5
  101934:	dfc01a15 	stw	ra,104(sp)
  101938:	d9c01b15 	stw	r7,108(sp)
  10193c:	00a00034 	movhi	r2,32768
  101940:	10bfffc4 	addi	r2,r2,-1
  101944:	02008204 	movi	r8,520
  101948:	d8800215 	stw	r2,8(sp)
  10194c:	d8800515 	stw	r2,20(sp)
  101950:	d9c01b04 	addi	r7,sp,108
  101954:	d80b883a 	mov	r5,sp
  101958:	00bfffc4 	movi	r2,-1
  10195c:	d8c00015 	stw	r3,0(sp)
  101960:	d8c00415 	stw	r3,16(sp)
  101964:	da00030d 	sth	r8,12(sp)
  101968:	d880038d 	sth	r2,14(sp)
  10196c:	0101e380 	call	101e38 <___svfprintf_internal_r>
  101970:	d8c00017 	ldw	r3,0(sp)
  101974:	18000005 	stb	zero,0(r3)
  101978:	dfc01a17 	ldw	ra,104(sp)
  10197c:	dec01c04 	addi	sp,sp,112
  101980:	f800283a 	ret

00101984 <sprintf>:
  101984:	deffe304 	addi	sp,sp,-116
  101988:	2007883a 	mov	r3,r4
  10198c:	dfc01a15 	stw	ra,104(sp)
  101990:	d9801b15 	stw	r6,108(sp)
  101994:	d9c01c15 	stw	r7,112(sp)
  101998:	010004b4 	movhi	r4,18
  10199c:	21157404 	addi	r4,r4,21968
  1019a0:	21000017 	ldw	r4,0(r4)
  1019a4:	00a00034 	movhi	r2,32768
  1019a8:	10bfffc4 	addi	r2,r2,-1
  1019ac:	280d883a 	mov	r6,r5
  1019b0:	02008204 	movi	r8,520
  1019b4:	d8800215 	stw	r2,8(sp)
  1019b8:	d8800515 	stw	r2,20(sp)
  1019bc:	d9c01b04 	addi	r7,sp,108
  1019c0:	d80b883a 	mov	r5,sp
  1019c4:	00bfffc4 	movi	r2,-1
  1019c8:	d8c00015 	stw	r3,0(sp)
  1019cc:	d8c00415 	stw	r3,16(sp)
  1019d0:	da00030d 	sth	r8,12(sp)
  1019d4:	d880038d 	sth	r2,14(sp)
  1019d8:	0101e380 	call	101e38 <___svfprintf_internal_r>
  1019dc:	d8c00017 	ldw	r3,0(sp)
  1019e0:	18000005 	stb	zero,0(r3)
  1019e4:	dfc01a17 	ldw	ra,104(sp)
  1019e8:	dec01d04 	addi	sp,sp,116
  1019ec:	f800283a 	ret

001019f0 <sscanf>:
  1019f0:	deffe204 	addi	sp,sp,-120
  1019f4:	dc001a15 	stw	r16,104(sp)
  1019f8:	2821883a 	mov	r16,r5
  1019fc:	dfc01b15 	stw	ra,108(sp)
  101a00:	d9801c15 	stw	r6,112(sp)
  101a04:	d9c01d15 	stw	r7,116(sp)
  101a08:	00c08104 	movi	r3,516
  101a0c:	d8c0030d 	sth	r3,12(sp)
  101a10:	d9000015 	stw	r4,0(sp)
  101a14:	d9000415 	stw	r4,16(sp)
  101a18:	0101cfc0 	call	101cfc <strlen>
  101a1c:	00c004b4 	movhi	r3,18
  101a20:	18d57404 	addi	r3,r3,21968
  101a24:	d8800115 	stw	r2,4(sp)
  101a28:	d8800515 	stw	r2,20(sp)
  101a2c:	19000017 	ldw	r4,0(r3)
  101a30:	00800434 	movhi	r2,16
  101a34:	1086ce04 	addi	r2,r2,6968
  101a38:	d8800815 	stw	r2,32(sp)
  101a3c:	d9c01c04 	addi	r7,sp,112
  101a40:	800d883a 	mov	r6,r16
  101a44:	d80b883a 	mov	r5,sp
  101a48:	00bfffc4 	movi	r2,-1
  101a4c:	d8000c15 	stw	zero,48(sp)
  101a50:	d8001115 	stw	zero,68(sp)
  101a54:	d880038d 	sth	r2,14(sp)
  101a58:	01040f40 	call	1040f4 <__ssvfscanf_r>
  101a5c:	dfc01b17 	ldw	ra,108(sp)
  101a60:	dc001a17 	ldw	r16,104(sp)
  101a64:	dec01e04 	addi	sp,sp,120
  101a68:	f800283a 	ret

00101a6c <_sscanf_r>:
  101a6c:	deffe204 	addi	sp,sp,-120
  101a70:	dc001b15 	stw	r16,108(sp)
  101a74:	2021883a 	mov	r16,r4
  101a78:	dfc01c15 	stw	ra,112(sp)
  101a7c:	d9c01d15 	stw	r7,116(sp)
  101a80:	00808104 	movi	r2,516
  101a84:	2809883a 	mov	r4,r5
  101a88:	d9400015 	stw	r5,0(sp)
  101a8c:	d9400415 	stw	r5,16(sp)
  101a90:	d9801a15 	stw	r6,104(sp)
  101a94:	d880030d 	sth	r2,12(sp)
  101a98:	0101cfc0 	call	101cfc <strlen>
  101a9c:	d8800115 	stw	r2,4(sp)
  101aa0:	d8800515 	stw	r2,20(sp)
  101aa4:	d9801a17 	ldw	r6,104(sp)
  101aa8:	00800434 	movhi	r2,16
  101aac:	1086ce04 	addi	r2,r2,6968
  101ab0:	d8800815 	stw	r2,32(sp)
  101ab4:	d9c01d04 	addi	r7,sp,116
  101ab8:	d80b883a 	mov	r5,sp
  101abc:	8009883a 	mov	r4,r16
  101ac0:	00bfffc4 	movi	r2,-1
  101ac4:	d8000c15 	stw	zero,48(sp)
  101ac8:	d8001115 	stw	zero,68(sp)
  101acc:	d880038d 	sth	r2,14(sp)
  101ad0:	01040f40 	call	1040f4 <__ssvfscanf_r>
  101ad4:	dfc01c17 	ldw	ra,112(sp)
  101ad8:	dc001b17 	ldw	r16,108(sp)
  101adc:	dec01e04 	addi	sp,sp,120
  101ae0:	f800283a 	ret

00101ae4 <__sread>:
  101ae4:	defffe04 	addi	sp,sp,-8
  101ae8:	dc000015 	stw	r16,0(sp)
  101aec:	2821883a 	mov	r16,r5
  101af0:	2940038f 	ldh	r5,14(r5)
  101af4:	dfc00115 	stw	ra,4(sp)
  101af8:	010ca180 	call	10ca18 <_read_r>
  101afc:	10000716 	blt	r2,zero,101b1c <__sread+0x38>
  101b00:	80c01417 	ldw	r3,80(r16)
  101b04:	1887883a 	add	r3,r3,r2
  101b08:	80c01415 	stw	r3,80(r16)
  101b0c:	dfc00117 	ldw	ra,4(sp)
  101b10:	dc000017 	ldw	r16,0(sp)
  101b14:	dec00204 	addi	sp,sp,8
  101b18:	f800283a 	ret
  101b1c:	80c0030b 	ldhu	r3,12(r16)
  101b20:	18fbffcc 	andi	r3,r3,61439
  101b24:	80c0030d 	sth	r3,12(r16)
  101b28:	dfc00117 	ldw	ra,4(sp)
  101b2c:	dc000017 	ldw	r16,0(sp)
  101b30:	dec00204 	addi	sp,sp,8
  101b34:	f800283a 	ret

00101b38 <__seofread>:
  101b38:	0005883a 	mov	r2,zero
  101b3c:	f800283a 	ret

00101b40 <__swrite>:
  101b40:	2880030b 	ldhu	r2,12(r5)
  101b44:	defffb04 	addi	sp,sp,-20
  101b48:	dcc00315 	stw	r19,12(sp)
  101b4c:	dc800215 	stw	r18,8(sp)
  101b50:	dc400115 	stw	r17,4(sp)
  101b54:	dc000015 	stw	r16,0(sp)
  101b58:	dfc00415 	stw	ra,16(sp)
  101b5c:	10c0400c 	andi	r3,r2,256
  101b60:	2821883a 	mov	r16,r5
  101b64:	2023883a 	mov	r17,r4
  101b68:	3025883a 	mov	r18,r6
  101b6c:	3827883a 	mov	r19,r7
  101b70:	18000526 	beq	r3,zero,101b88 <__swrite+0x48>
  101b74:	2940038f 	ldh	r5,14(r5)
  101b78:	01c00084 	movi	r7,2
  101b7c:	000d883a 	mov	r6,zero
  101b80:	010aad40 	call	10aad4 <_lseek_r>
  101b84:	8080030b 	ldhu	r2,12(r16)
  101b88:	8140038f 	ldh	r5,14(r16)
  101b8c:	10bbffcc 	andi	r2,r2,61439
  101b90:	980f883a 	mov	r7,r19
  101b94:	900d883a 	mov	r6,r18
  101b98:	8809883a 	mov	r4,r17
  101b9c:	8080030d 	sth	r2,12(r16)
  101ba0:	dfc00417 	ldw	ra,16(sp)
  101ba4:	dcc00317 	ldw	r19,12(sp)
  101ba8:	dc800217 	ldw	r18,8(sp)
  101bac:	dc400117 	ldw	r17,4(sp)
  101bb0:	dc000017 	ldw	r16,0(sp)
  101bb4:	dec00504 	addi	sp,sp,20
  101bb8:	0107e341 	jmpi	107e34 <_write_r>

00101bbc <__sseek>:
  101bbc:	defffe04 	addi	sp,sp,-8
  101bc0:	dc000015 	stw	r16,0(sp)
  101bc4:	2821883a 	mov	r16,r5
  101bc8:	2940038f 	ldh	r5,14(r5)
  101bcc:	dfc00115 	stw	ra,4(sp)
  101bd0:	010aad40 	call	10aad4 <_lseek_r>
  101bd4:	00ffffc4 	movi	r3,-1
  101bd8:	10c00826 	beq	r2,r3,101bfc <__sseek+0x40>
  101bdc:	80c0030b 	ldhu	r3,12(r16)
  101be0:	80801415 	stw	r2,80(r16)
  101be4:	18c40014 	ori	r3,r3,4096
  101be8:	80c0030d 	sth	r3,12(r16)
  101bec:	dfc00117 	ldw	ra,4(sp)
  101bf0:	dc000017 	ldw	r16,0(sp)
  101bf4:	dec00204 	addi	sp,sp,8
  101bf8:	f800283a 	ret
  101bfc:	80c0030b 	ldhu	r3,12(r16)
  101c00:	18fbffcc 	andi	r3,r3,61439
  101c04:	80c0030d 	sth	r3,12(r16)
  101c08:	dfc00117 	ldw	ra,4(sp)
  101c0c:	dc000017 	ldw	r16,0(sp)
  101c10:	dec00204 	addi	sp,sp,8
  101c14:	f800283a 	ret

00101c18 <__sclose>:
  101c18:	2940038f 	ldh	r5,14(r5)
  101c1c:	0107fe81 	jmpi	107fe8 <_close_r>

00101c20 <strcmp>:
  101c20:	2144b03a 	or	r2,r4,r5
  101c24:	108000cc 	andi	r2,r2,3
  101c28:	1000171e 	bne	r2,zero,101c88 <strcmp+0x68>
  101c2c:	20800017 	ldw	r2,0(r4)
  101c30:	28c00017 	ldw	r3,0(r5)
  101c34:	10c0141e 	bne	r2,r3,101c88 <strcmp+0x68>
  101c38:	027fbff4 	movhi	r9,65279
  101c3c:	4a7fbfc4 	addi	r9,r9,-257
  101c40:	0086303a 	nor	r3,zero,r2
  101c44:	02202074 	movhi	r8,32897
  101c48:	1245883a 	add	r2,r2,r9
  101c4c:	42202004 	addi	r8,r8,-32640
  101c50:	10c4703a 	and	r2,r2,r3
  101c54:	1204703a 	and	r2,r2,r8
  101c58:	10000226 	beq	r2,zero,101c64 <strcmp+0x44>
  101c5c:	00002306 	br	101cec <strcmp+0xcc>
  101c60:	1000221e 	bne	r2,zero,101cec <strcmp+0xcc>
  101c64:	21000104 	addi	r4,r4,4
  101c68:	20c00017 	ldw	r3,0(r4)
  101c6c:	29400104 	addi	r5,r5,4
  101c70:	29800017 	ldw	r6,0(r5)
  101c74:	1a4f883a 	add	r7,r3,r9
  101c78:	00c4303a 	nor	r2,zero,r3
  101c7c:	3884703a 	and	r2,r7,r2
  101c80:	1204703a 	and	r2,r2,r8
  101c84:	19bff626 	beq	r3,r6,101c60 <__alt_data_end+0xfffc1c60>
  101c88:	20800003 	ldbu	r2,0(r4)
  101c8c:	10c03fcc 	andi	r3,r2,255
  101c90:	18c0201c 	xori	r3,r3,128
  101c94:	18ffe004 	addi	r3,r3,-128
  101c98:	18000c26 	beq	r3,zero,101ccc <strcmp+0xac>
  101c9c:	29800007 	ldb	r6,0(r5)
  101ca0:	19800326 	beq	r3,r6,101cb0 <strcmp+0x90>
  101ca4:	00001306 	br	101cf4 <strcmp+0xd4>
  101ca8:	29800007 	ldb	r6,0(r5)
  101cac:	11800b1e 	bne	r2,r6,101cdc <strcmp+0xbc>
  101cb0:	21000044 	addi	r4,r4,1
  101cb4:	20c00003 	ldbu	r3,0(r4)
  101cb8:	29400044 	addi	r5,r5,1
  101cbc:	18803fcc 	andi	r2,r3,255
  101cc0:	1080201c 	xori	r2,r2,128
  101cc4:	10bfe004 	addi	r2,r2,-128
  101cc8:	103ff71e 	bne	r2,zero,101ca8 <__alt_data_end+0xfffc1ca8>
  101ccc:	0007883a 	mov	r3,zero
  101cd0:	28800003 	ldbu	r2,0(r5)
  101cd4:	1885c83a 	sub	r2,r3,r2
  101cd8:	f800283a 	ret
  101cdc:	28800003 	ldbu	r2,0(r5)
  101ce0:	18c03fcc 	andi	r3,r3,255
  101ce4:	1885c83a 	sub	r2,r3,r2
  101ce8:	f800283a 	ret
  101cec:	0005883a 	mov	r2,zero
  101cf0:	f800283a 	ret
  101cf4:	10c03fcc 	andi	r3,r2,255
  101cf8:	003ff506 	br	101cd0 <__alt_data_end+0xfffc1cd0>

00101cfc <strlen>:
  101cfc:	208000cc 	andi	r2,r4,3
  101d00:	10002026 	beq	r2,zero,101d84 <strlen+0x88>
  101d04:	20800007 	ldb	r2,0(r4)
  101d08:	10002026 	beq	r2,zero,101d8c <strlen+0x90>
  101d0c:	2005883a 	mov	r2,r4
  101d10:	00000206 	br	101d1c <strlen+0x20>
  101d14:	10c00007 	ldb	r3,0(r2)
  101d18:	18001826 	beq	r3,zero,101d7c <strlen+0x80>
  101d1c:	10800044 	addi	r2,r2,1
  101d20:	10c000cc 	andi	r3,r2,3
  101d24:	183ffb1e 	bne	r3,zero,101d14 <__alt_data_end+0xfffc1d14>
  101d28:	10c00017 	ldw	r3,0(r2)
  101d2c:	01ffbff4 	movhi	r7,65279
  101d30:	39ffbfc4 	addi	r7,r7,-257
  101d34:	00ca303a 	nor	r5,zero,r3
  101d38:	01a02074 	movhi	r6,32897
  101d3c:	19c7883a 	add	r3,r3,r7
  101d40:	31a02004 	addi	r6,r6,-32640
  101d44:	1946703a 	and	r3,r3,r5
  101d48:	1986703a 	and	r3,r3,r6
  101d4c:	1800091e 	bne	r3,zero,101d74 <strlen+0x78>
  101d50:	10800104 	addi	r2,r2,4
  101d54:	10c00017 	ldw	r3,0(r2)
  101d58:	19cb883a 	add	r5,r3,r7
  101d5c:	00c6303a 	nor	r3,zero,r3
  101d60:	28c6703a 	and	r3,r5,r3
  101d64:	1986703a 	and	r3,r3,r6
  101d68:	183ff926 	beq	r3,zero,101d50 <__alt_data_end+0xfffc1d50>
  101d6c:	00000106 	br	101d74 <strlen+0x78>
  101d70:	10800044 	addi	r2,r2,1
  101d74:	10c00007 	ldb	r3,0(r2)
  101d78:	183ffd1e 	bne	r3,zero,101d70 <__alt_data_end+0xfffc1d70>
  101d7c:	1105c83a 	sub	r2,r2,r4
  101d80:	f800283a 	ret
  101d84:	2005883a 	mov	r2,r4
  101d88:	003fe706 	br	101d28 <__alt_data_end+0xfffc1d28>
  101d8c:	0005883a 	mov	r2,zero
  101d90:	f800283a 	ret

00101d94 <__strtok_r>:
  101d94:	20001f26 	beq	r4,zero,101e14 <__strtok_r+0x80>
  101d98:	2005883a 	mov	r2,r4
  101d9c:	22400007 	ldb	r9,0(r4)
  101da0:	2807883a 	mov	r3,r5
  101da4:	21000044 	addi	r4,r4,1
  101da8:	00000106 	br	101db0 <__strtok_r+0x1c>
  101dac:	4a001226 	beq	r9,r8,101df8 <__strtok_r+0x64>
  101db0:	1a000007 	ldb	r8,0(r3)
  101db4:	18c00044 	addi	r3,r3,1
  101db8:	403ffc1e 	bne	r8,zero,101dac <__alt_data_end+0xfffc1dac>
  101dbc:	48001926 	beq	r9,zero,101e24 <__strtok_r+0x90>
  101dc0:	22000007 	ldb	r8,0(r4)
  101dc4:	2013883a 	mov	r9,r4
  101dc8:	21000044 	addi	r4,r4,1
  101dcc:	2015883a 	mov	r10,r4
  101dd0:	2807883a 	mov	r3,r5
  101dd4:	00000106 	br	101ddc <__strtok_r+0x48>
  101dd8:	383ff926 	beq	r7,zero,101dc0 <__alt_data_end+0xfffc1dc0>
  101ddc:	19c00007 	ldb	r7,0(r3)
  101de0:	18c00044 	addi	r3,r3,1
  101de4:	41fffc1e 	bne	r8,r7,101dd8 <__alt_data_end+0xfffc1dd8>
  101de8:	40000726 	beq	r8,zero,101e08 <__strtok_r+0x74>
  101dec:	48000005 	stb	zero,0(r9)
  101df0:	32800015 	stw	r10,0(r6)
  101df4:	f800283a 	ret
  101df8:	383fe71e 	bne	r7,zero,101d98 <__alt_data_end+0xfffc1d98>
  101dfc:	31000015 	stw	r4,0(r6)
  101e00:	10000005 	stb	zero,0(r2)
  101e04:	f800283a 	ret
  101e08:	0015883a 	mov	r10,zero
  101e0c:	32800015 	stw	r10,0(r6)
  101e10:	f800283a 	ret
  101e14:	31000017 	ldw	r4,0(r6)
  101e18:	203fdf1e 	bne	r4,zero,101d98 <__alt_data_end+0xfffc1d98>
  101e1c:	0005883a 	mov	r2,zero
  101e20:	f800283a 	ret
  101e24:	30000015 	stw	zero,0(r6)
  101e28:	0005883a 	mov	r2,zero
  101e2c:	f800283a 	ret

00101e30 <strtok_r>:
  101e30:	01c00044 	movi	r7,1
  101e34:	0101d941 	jmpi	101d94 <__strtok_r>

00101e38 <___svfprintf_internal_r>:
  101e38:	deffb704 	addi	sp,sp,-292
  101e3c:	dfc04815 	stw	ra,288(sp)
  101e40:	ddc04615 	stw	r23,280(sp)
  101e44:	d9402d15 	stw	r5,180(sp)
  101e48:	d9003915 	stw	r4,228(sp)
  101e4c:	302f883a 	mov	r23,r6
  101e50:	d9c02e15 	stw	r7,184(sp)
  101e54:	df004715 	stw	fp,284(sp)
  101e58:	dd804515 	stw	r22,276(sp)
  101e5c:	dd404415 	stw	r21,272(sp)
  101e60:	dd004315 	stw	r20,268(sp)
  101e64:	dcc04215 	stw	r19,264(sp)
  101e68:	dc804115 	stw	r18,260(sp)
  101e6c:	dc404015 	stw	r17,256(sp)
  101e70:	dc003f15 	stw	r16,252(sp)
  101e74:	010aaa40 	call	10aaa4 <_localeconv_r>
  101e78:	10800017 	ldw	r2,0(r2)
  101e7c:	1009883a 	mov	r4,r2
  101e80:	d8803415 	stw	r2,208(sp)
  101e84:	0101cfc0 	call	101cfc <strlen>
  101e88:	d8c02d17 	ldw	r3,180(sp)
  101e8c:	d8803815 	stw	r2,224(sp)
  101e90:	1880030b 	ldhu	r2,12(r3)
  101e94:	1080200c 	andi	r2,r2,128
  101e98:	10000226 	beq	r2,zero,101ea4 <___svfprintf_internal_r+0x6c>
  101e9c:	18800417 	ldw	r2,16(r3)
  101ea0:	1006b126 	beq	r2,zero,103968 <___svfprintf_internal_r+0x1b30>
  101ea4:	dcc03917 	ldw	r19,228(sp)
  101ea8:	d8c00404 	addi	r3,sp,16
  101eac:	054004b4 	movhi	r21,18
  101eb0:	d9001e04 	addi	r4,sp,120
  101eb4:	ad4c9784 	addi	r21,r21,12894
  101eb8:	d8c01e15 	stw	r3,120(sp)
  101ebc:	d8002015 	stw	zero,128(sp)
  101ec0:	d8001f15 	stw	zero,124(sp)
  101ec4:	d8003315 	stw	zero,204(sp)
  101ec8:	d8003615 	stw	zero,216(sp)
  101ecc:	d8003715 	stw	zero,220(sp)
  101ed0:	1811883a 	mov	r8,r3
  101ed4:	d8003a15 	stw	zero,232(sp)
  101ed8:	d8003b15 	stw	zero,236(sp)
  101edc:	d8002f15 	stw	zero,188(sp)
  101ee0:	d9002815 	stw	r4,160(sp)
  101ee4:	b8800007 	ldb	r2,0(r23)
  101ee8:	10027726 	beq	r2,zero,1028c8 <___svfprintf_internal_r+0xa90>
  101eec:	00c00944 	movi	r3,37
  101ef0:	b823883a 	mov	r17,r23
  101ef4:	10c0021e 	bne	r2,r3,101f00 <___svfprintf_internal_r+0xc8>
  101ef8:	00001406 	br	101f4c <___svfprintf_internal_r+0x114>
  101efc:	10c00326 	beq	r2,r3,101f0c <___svfprintf_internal_r+0xd4>
  101f00:	8c400044 	addi	r17,r17,1
  101f04:	88800007 	ldb	r2,0(r17)
  101f08:	103ffc1e 	bne	r2,zero,101efc <__alt_data_end+0xfffc1efc>
  101f0c:	8de1c83a 	sub	r16,r17,r23
  101f10:	80000e26 	beq	r16,zero,101f4c <___svfprintf_internal_r+0x114>
  101f14:	d8c02017 	ldw	r3,128(sp)
  101f18:	d8801f17 	ldw	r2,124(sp)
  101f1c:	45c00015 	stw	r23,0(r8)
  101f20:	1c07883a 	add	r3,r3,r16
  101f24:	10800044 	addi	r2,r2,1
  101f28:	d8c02015 	stw	r3,128(sp)
  101f2c:	44000115 	stw	r16,4(r8)
  101f30:	d8801f15 	stw	r2,124(sp)
  101f34:	00c001c4 	movi	r3,7
  101f38:	18809916 	blt	r3,r2,1021a0 <___svfprintf_internal_r+0x368>
  101f3c:	42000204 	addi	r8,r8,8
  101f40:	d9402f17 	ldw	r5,188(sp)
  101f44:	2c0b883a 	add	r5,r5,r16
  101f48:	d9402f15 	stw	r5,188(sp)
  101f4c:	88800007 	ldb	r2,0(r17)
  101f50:	10009a26 	beq	r2,zero,1021bc <___svfprintf_internal_r+0x384>
  101f54:	8dc00044 	addi	r23,r17,1
  101f58:	8c400047 	ldb	r17,1(r17)
  101f5c:	0021883a 	mov	r16,zero
  101f60:	00bfffc4 	movi	r2,-1
  101f64:	0025883a 	mov	r18,zero
  101f68:	dc002905 	stb	r16,164(sp)
  101f6c:	d8002785 	stb	zero,158(sp)
  101f70:	d8002b05 	stb	zero,172(sp)
  101f74:	d8802a15 	stw	r2,168(sp)
  101f78:	d8003115 	stw	zero,196(sp)
  101f7c:	05001604 	movi	r20,88
  101f80:	05800244 	movi	r22,9
  101f84:	4039883a 	mov	fp,r8
  101f88:	9021883a 	mov	r16,r18
  101f8c:	bdc00044 	addi	r23,r23,1
  101f90:	88bff804 	addi	r2,r17,-32
  101f94:	a0831e36 	bltu	r20,r2,102c10 <___svfprintf_internal_r+0xdd8>
  101f98:	100490ba 	slli	r2,r2,2
  101f9c:	00c00434 	movhi	r3,16
  101fa0:	18c7ec04 	addi	r3,r3,8112
  101fa4:	10c5883a 	add	r2,r2,r3
  101fa8:	10800017 	ldw	r2,0(r2)
  101fac:	1000683a 	jmp	r2
  101fb0:	00102b58 	cmpnei	zero,zero,16557
  101fb4:	00102c10 	cmplti	zero,zero,16560
  101fb8:	00102c10 	cmplti	zero,zero,16560
  101fbc:	00102b4c 	andi	zero,zero,16557
  101fc0:	00102c10 	cmplti	zero,zero,16560
  101fc4:	00102c10 	cmplti	zero,zero,16560
  101fc8:	00102c10 	cmplti	zero,zero,16560
  101fcc:	00102c10 	cmplti	zero,zero,16560
  101fd0:	00102c10 	cmplti	zero,zero,16560
  101fd4:	00102c10 	cmplti	zero,zero,16560
  101fd8:	00102218 	cmpnei	zero,zero,16520
  101fdc:	00102a5c 	xori	zero,zero,16553
  101fe0:	00102c10 	cmplti	zero,zero,16560
  101fe4:	00102124 	muli	zero,zero,16516
  101fe8:	0010223c 	xorhi	zero,zero,16520
  101fec:	00102c10 	cmplti	zero,zero,16560
  101ff0:	001022c8 	cmpgei	zero,zero,16523
  101ff4:	0010228c 	andi	zero,zero,16522
  101ff8:	0010228c 	andi	zero,zero,16522
  101ffc:	0010228c 	andi	zero,zero,16522
  102000:	0010228c 	andi	zero,zero,16522
  102004:	0010228c 	andi	zero,zero,16522
  102008:	0010228c 	andi	zero,zero,16522
  10200c:	0010228c 	andi	zero,zero,16522
  102010:	0010228c 	andi	zero,zero,16522
  102014:	0010228c 	andi	zero,zero,16522
  102018:	00102c10 	cmplti	zero,zero,16560
  10201c:	00102c10 	cmplti	zero,zero,16560
  102020:	00102c10 	cmplti	zero,zero,16560
  102024:	00102c10 	cmplti	zero,zero,16560
  102028:	00102c10 	cmplti	zero,zero,16560
  10202c:	00102c10 	cmplti	zero,zero,16560
  102030:	00102c10 	cmplti	zero,zero,16560
  102034:	00102c10 	cmplti	zero,zero,16560
  102038:	00102c10 	cmplti	zero,zero,16560
  10203c:	00102c10 	cmplti	zero,zero,16560
  102040:	0010238c 	andi	zero,zero,16526
  102044:	001022d4 	movui	zero,16523
  102048:	00102c10 	cmplti	zero,zero,16560
  10204c:	001022d4 	movui	zero,16523
  102050:	00102c10 	cmplti	zero,zero,16560
  102054:	00102c10 	cmplti	zero,zero,16560
  102058:	00102c10 	cmplti	zero,zero,16560
  10205c:	00102c10 	cmplti	zero,zero,16560
  102060:	00102380 	call	10238 <OSCtxSw_SWITCH_PC+0x101f8>
  102064:	00102c10 	cmplti	zero,zero,16560
  102068:	00102c10 	cmplti	zero,zero,16560
  10206c:	00102454 	movui	zero,16529
  102070:	00102c10 	cmplti	zero,zero,16560
  102074:	00102c10 	cmplti	zero,zero,16560
  102078:	00102c10 	cmplti	zero,zero,16560
  10207c:	00102c10 	cmplti	zero,zero,16560
  102080:	00102c10 	cmplti	zero,zero,16560
  102084:	001028d0 	cmplti	zero,zero,16547
  102088:	00102c10 	cmplti	zero,zero,16560
  10208c:	00102c10 	cmplti	zero,zero,16560
  102090:	0010293c 	xorhi	zero,zero,16548
  102094:	00102c10 	cmplti	zero,zero,16560
  102098:	00102c10 	cmplti	zero,zero,16560
  10209c:	00102c10 	cmplti	zero,zero,16560
  1020a0:	00102c10 	cmplti	zero,zero,16560
  1020a4:	00102c10 	cmplti	zero,zero,16560
  1020a8:	00102c10 	cmplti	zero,zero,16560
  1020ac:	00102c10 	cmplti	zero,zero,16560
  1020b0:	00102c10 	cmplti	zero,zero,16560
  1020b4:	00102c10 	cmplti	zero,zero,16560
  1020b8:	00102c10 	cmplti	zero,zero,16560
  1020bc:	001029f8 	rdprs	zero,zero,16551
  1020c0:	00102b78 	rdprs	zero,zero,16557
  1020c4:	001022d4 	movui	zero,16523
  1020c8:	001022d4 	movui	zero,16523
  1020cc:	001022d4 	movui	zero,16523
  1020d0:	00102bec 	andhi	zero,zero,16559
  1020d4:	00102b78 	rdprs	zero,zero,16557
  1020d8:	00102c10 	cmplti	zero,zero,16560
  1020dc:	00102c10 	cmplti	zero,zero,16560
  1020e0:	00102b98 	cmpnei	zero,zero,16558
  1020e4:	00102c10 	cmplti	zero,zero,16560
  1020e8:	00102bac 	andhi	zero,zero,16558
  1020ec:	00102a3c 	xorhi	zero,zero,16552
  1020f0:	00102130 	cmpltui	zero,zero,16516
  1020f4:	00102a74 	movhi	zero,16553
  1020f8:	00102c10 	cmplti	zero,zero,16560
  1020fc:	00102a80 	call	102a8 <OSCtxSw_SWITCH_PC+0x10268>
  102100:	00102c10 	cmplti	zero,zero,16560
  102104:	00102ae4 	muli	zero,zero,16555
  102108:	00102c10 	cmplti	zero,zero,16560
  10210c:	00102c10 	cmplti	zero,zero,16560
  102110:	00102b04 	movi	zero,16556
  102114:	d8c03117 	ldw	r3,196(sp)
  102118:	d8802e15 	stw	r2,184(sp)
  10211c:	00c7c83a 	sub	r3,zero,r3
  102120:	d8c03115 	stw	r3,196(sp)
  102124:	84000114 	ori	r16,r16,4
  102128:	bc400007 	ldb	r17,0(r23)
  10212c:	003f9706 	br	101f8c <__alt_data_end+0xfffc1f8c>
  102130:	00800c04 	movi	r2,48
  102134:	d8802705 	stb	r2,156(sp)
  102138:	00801e04 	movi	r2,120
  10213c:	d8802745 	stb	r2,157(sp)
  102140:	d9002a17 	ldw	r4,168(sp)
  102144:	d8802e17 	ldw	r2,184(sp)
  102148:	d8002785 	stb	zero,158(sp)
  10214c:	e011883a 	mov	r8,fp
  102150:	10c00104 	addi	r3,r2,4
  102154:	15000017 	ldw	r20,0(r2)
  102158:	002d883a 	mov	r22,zero
  10215c:	80800094 	ori	r2,r16,2
  102160:	2002b616 	blt	r4,zero,102c3c <___svfprintf_internal_r+0xe04>
  102164:	00bfdfc4 	movi	r2,-129
  102168:	80a4703a 	and	r18,r16,r2
  10216c:	d8c02e15 	stw	r3,184(sp)
  102170:	94800094 	ori	r18,r18,2
  102174:	a002a01e 	bne	r20,zero,102bf8 <___svfprintf_internal_r+0xdc0>
  102178:	014004b4 	movhi	r5,18
  10217c:	294c9004 	addi	r5,r5,12864
  102180:	d9403a15 	stw	r5,232(sp)
  102184:	04401e04 	movi	r17,120
  102188:	d8c02a17 	ldw	r3,168(sp)
  10218c:	0039883a 	mov	fp,zero
  102190:	1801e626 	beq	r3,zero,10292c <___svfprintf_internal_r+0xaf4>
  102194:	0029883a 	mov	r20,zero
  102198:	002d883a 	mov	r22,zero
  10219c:	00020506 	br	1029b4 <___svfprintf_internal_r+0xb7c>
  1021a0:	d9402d17 	ldw	r5,180(sp)
  1021a4:	d9801e04 	addi	r6,sp,120
  1021a8:	9809883a 	mov	r4,r19
  1021ac:	010f4080 	call	10f408 <__ssprint_r>
  1021b0:	1000081e 	bne	r2,zero,1021d4 <___svfprintf_internal_r+0x39c>
  1021b4:	da000404 	addi	r8,sp,16
  1021b8:	003f6106 	br	101f40 <__alt_data_end+0xfffc1f40>
  1021bc:	d8802017 	ldw	r2,128(sp)
  1021c0:	10000426 	beq	r2,zero,1021d4 <___svfprintf_internal_r+0x39c>
  1021c4:	d9402d17 	ldw	r5,180(sp)
  1021c8:	d9003917 	ldw	r4,228(sp)
  1021cc:	d9801e04 	addi	r6,sp,120
  1021d0:	010f4080 	call	10f408 <__ssprint_r>
  1021d4:	d8802d17 	ldw	r2,180(sp)
  1021d8:	10c0030b 	ldhu	r3,12(r2)
  1021dc:	d8802f17 	ldw	r2,188(sp)
  1021e0:	18c0100c 	andi	r3,r3,64
  1021e4:	1806251e 	bne	r3,zero,103a7c <___svfprintf_internal_r+0x1c44>
  1021e8:	dfc04817 	ldw	ra,288(sp)
  1021ec:	df004717 	ldw	fp,284(sp)
  1021f0:	ddc04617 	ldw	r23,280(sp)
  1021f4:	dd804517 	ldw	r22,276(sp)
  1021f8:	dd404417 	ldw	r21,272(sp)
  1021fc:	dd004317 	ldw	r20,268(sp)
  102200:	dcc04217 	ldw	r19,264(sp)
  102204:	dc804117 	ldw	r18,260(sp)
  102208:	dc404017 	ldw	r17,256(sp)
  10220c:	dc003f17 	ldw	r16,252(sp)
  102210:	dec04904 	addi	sp,sp,292
  102214:	f800283a 	ret
  102218:	d9002e17 	ldw	r4,184(sp)
  10221c:	d9402e17 	ldw	r5,184(sp)
  102220:	21000017 	ldw	r4,0(r4)
  102224:	28800104 	addi	r2,r5,4
  102228:	d9003115 	stw	r4,196(sp)
  10222c:	203fb916 	blt	r4,zero,102114 <__alt_data_end+0xfffc2114>
  102230:	d8802e15 	stw	r2,184(sp)
  102234:	bc400007 	ldb	r17,0(r23)
  102238:	003f5406 	br	101f8c <__alt_data_end+0xfffc1f8c>
  10223c:	bc400007 	ldb	r17,0(r23)
  102240:	01000a84 	movi	r4,42
  102244:	b8c00044 	addi	r3,r23,1
  102248:	89076926 	beq	r17,r4,103ff0 <___svfprintf_internal_r+0x21b8>
  10224c:	8cbff404 	addi	r18,r17,-48
  102250:	b486b936 	bltu	r22,r18,103d38 <___svfprintf_internal_r+0x1f00>
  102254:	0009883a 	mov	r4,zero
  102258:	1823883a 	mov	r17,r3
  10225c:	01400284 	movi	r5,10
  102260:	01159fc0 	call	1159fc <__mulsi3>
  102264:	88c00007 	ldb	r3,0(r17)
  102268:	1489883a 	add	r4,r2,r18
  10226c:	8dc00044 	addi	r23,r17,1
  102270:	1cbff404 	addi	r18,r3,-48
  102274:	b823883a 	mov	r17,r23
  102278:	b4bff82e 	bgeu	r22,r18,10225c <__alt_data_end+0xfffc225c>
  10227c:	1823883a 	mov	r17,r3
  102280:	20060416 	blt	r4,zero,103a94 <___svfprintf_internal_r+0x1c5c>
  102284:	d9002a15 	stw	r4,168(sp)
  102288:	003f4106 	br	101f90 <__alt_data_end+0xfffc1f90>
  10228c:	8cbff404 	addi	r18,r17,-48
  102290:	d8003115 	stw	zero,196(sp)
  102294:	0009883a 	mov	r4,zero
  102298:	b823883a 	mov	r17,r23
  10229c:	01400284 	movi	r5,10
  1022a0:	01159fc0 	call	1159fc <__mulsi3>
  1022a4:	88c00007 	ldb	r3,0(r17)
  1022a8:	9089883a 	add	r4,r18,r2
  1022ac:	bdc00044 	addi	r23,r23,1
  1022b0:	1cbff404 	addi	r18,r3,-48
  1022b4:	b823883a 	mov	r17,r23
  1022b8:	b4bff82e 	bgeu	r22,r18,10229c <__alt_data_end+0xfffc229c>
  1022bc:	1823883a 	mov	r17,r3
  1022c0:	d9003115 	stw	r4,196(sp)
  1022c4:	003f3206 	br	101f90 <__alt_data_end+0xfffc1f90>
  1022c8:	84002014 	ori	r16,r16,128
  1022cc:	bc400007 	ldb	r17,0(r23)
  1022d0:	003f2e06 	br	101f8c <__alt_data_end+0xfffc1f8c>
  1022d4:	8025883a 	mov	r18,r16
  1022d8:	dc002903 	ldbu	r16,164(sp)
  1022dc:	e011883a 	mov	r8,fp
  1022e0:	84003fcc 	andi	r16,r16,255
  1022e4:	8007721e 	bne	r16,zero,1040b0 <___svfprintf_internal_r+0x2278>
  1022e8:	9080020c 	andi	r2,r18,8
  1022ec:	1004a526 	beq	r2,zero,103584 <___svfprintf_internal_r+0x174c>
  1022f0:	d9002e17 	ldw	r4,184(sp)
  1022f4:	d9402e17 	ldw	r5,184(sp)
  1022f8:	d8802e17 	ldw	r2,184(sp)
  1022fc:	21000017 	ldw	r4,0(r4)
  102300:	29400117 	ldw	r5,4(r5)
  102304:	10800204 	addi	r2,r2,8
  102308:	d9003615 	stw	r4,216(sp)
  10230c:	d9403715 	stw	r5,220(sp)
  102310:	d8802e15 	stw	r2,184(sp)
  102314:	d9003617 	ldw	r4,216(sp)
  102318:	d9403717 	ldw	r5,220(sp)
  10231c:	da003e15 	stw	r8,248(sp)
  102320:	04000044 	movi	r16,1
  102324:	010cfdc0 	call	10cfdc <__fpclassifyd>
  102328:	da003e17 	ldw	r8,248(sp)
  10232c:	1404731e 	bne	r2,r16,1034fc <___svfprintf_internal_r+0x16c4>
  102330:	d9003617 	ldw	r4,216(sp)
  102334:	d9403717 	ldw	r5,220(sp)
  102338:	000d883a 	mov	r6,zero
  10233c:	000f883a 	mov	r7,zero
  102340:	01170000 	call	117000 <__ledf2>
  102344:	da003e17 	ldw	r8,248(sp)
  102348:	10061b16 	blt	r2,zero,103bb8 <___svfprintf_internal_r+0x1d80>
  10234c:	df002783 	ldbu	fp,158(sp)
  102350:	008011c4 	movi	r2,71
  102354:	1445810e 	bge	r2,r17,10395c <___svfprintf_internal_r+0x1b24>
  102358:	040004b4 	movhi	r16,18
  10235c:	840c8804 	addi	r16,r16,12832
  102360:	00c000c4 	movi	r3,3
  102364:	00bfdfc4 	movi	r2,-129
  102368:	d8c02915 	stw	r3,164(sp)
  10236c:	90a4703a 	and	r18,r18,r2
  102370:	d8c02b15 	stw	r3,172(sp)
  102374:	d8002a15 	stw	zero,168(sp)
  102378:	d8003215 	stw	zero,200(sp)
  10237c:	00006c06 	br	102530 <___svfprintf_internal_r+0x6f8>
  102380:	84000214 	ori	r16,r16,8
  102384:	bc400007 	ldb	r17,0(r23)
  102388:	003f0006 	br	101f8c <__alt_data_end+0xfffc1f8c>
  10238c:	8025883a 	mov	r18,r16
  102390:	dc002903 	ldbu	r16,164(sp)
  102394:	e011883a 	mov	r8,fp
  102398:	84003fcc 	andi	r16,r16,255
  10239c:	80073f1e 	bne	r16,zero,10409c <___svfprintf_internal_r+0x2264>
  1023a0:	94800414 	ori	r18,r18,16
  1023a4:	9080080c 	andi	r2,r18,32
  1023a8:	1003bb26 	beq	r2,zero,103298 <___svfprintf_internal_r+0x1460>
  1023ac:	d9002e17 	ldw	r4,184(sp)
  1023b0:	20800117 	ldw	r2,4(r4)
  1023b4:	25000017 	ldw	r20,0(r4)
  1023b8:	21000204 	addi	r4,r4,8
  1023bc:	d9002e15 	stw	r4,184(sp)
  1023c0:	102d883a 	mov	r22,r2
  1023c4:	1003bd16 	blt	r2,zero,1032bc <___svfprintf_internal_r+0x1484>
  1023c8:	d9002a17 	ldw	r4,168(sp)
  1023cc:	df002783 	ldbu	fp,158(sp)
  1023d0:	2003d016 	blt	r4,zero,103314 <___svfprintf_internal_r+0x14dc>
  1023d4:	00ffdfc4 	movi	r3,-129
  1023d8:	a584b03a 	or	r2,r20,r22
  1023dc:	90e4703a 	and	r18,r18,r3
  1023e0:	10015026 	beq	r2,zero,102924 <___svfprintf_internal_r+0xaec>
  1023e4:	b0037026 	beq	r22,zero,1031a8 <___svfprintf_internal_r+0x1370>
  1023e8:	dc402915 	stw	r17,164(sp)
  1023ec:	dc001e04 	addi	r16,sp,120
  1023f0:	b023883a 	mov	r17,r22
  1023f4:	402d883a 	mov	r22,r8
  1023f8:	a009883a 	mov	r4,r20
  1023fc:	880b883a 	mov	r5,r17
  102400:	01800284 	movi	r6,10
  102404:	000f883a 	mov	r7,zero
  102408:	01152840 	call	115284 <__umoddi3>
  10240c:	10800c04 	addi	r2,r2,48
  102410:	843fffc4 	addi	r16,r16,-1
  102414:	a009883a 	mov	r4,r20
  102418:	880b883a 	mov	r5,r17
  10241c:	80800005 	stb	r2,0(r16)
  102420:	01800284 	movi	r6,10
  102424:	000f883a 	mov	r7,zero
  102428:	0114c880 	call	114c88 <__udivdi3>
  10242c:	1029883a 	mov	r20,r2
  102430:	10c4b03a 	or	r2,r2,r3
  102434:	1823883a 	mov	r17,r3
  102438:	103fef1e 	bne	r2,zero,1023f8 <__alt_data_end+0xfffc23f8>
  10243c:	d8c02817 	ldw	r3,160(sp)
  102440:	dc402917 	ldw	r17,164(sp)
  102444:	b011883a 	mov	r8,r22
  102448:	1c07c83a 	sub	r3,r3,r16
  10244c:	d8c02b15 	stw	r3,172(sp)
  102450:	00003106 	br	102518 <___svfprintf_internal_r+0x6e0>
  102454:	8025883a 	mov	r18,r16
  102458:	dc002903 	ldbu	r16,164(sp)
  10245c:	e011883a 	mov	r8,fp
  102460:	84003fcc 	andi	r16,r16,255
  102464:	80070a1e 	bne	r16,zero,104090 <___svfprintf_internal_r+0x2258>
  102468:	94800414 	ori	r18,r18,16
  10246c:	9080080c 	andi	r2,r18,32
  102470:	1002f626 	beq	r2,zero,10304c <___svfprintf_internal_r+0x1214>
  102474:	d9002e17 	ldw	r4,184(sp)
  102478:	d9402a17 	ldw	r5,168(sp)
  10247c:	d8002785 	stb	zero,158(sp)
  102480:	20800204 	addi	r2,r4,8
  102484:	25000017 	ldw	r20,0(r4)
  102488:	25800117 	ldw	r22,4(r4)
  10248c:	28043716 	blt	r5,zero,10356c <___svfprintf_internal_r+0x1734>
  102490:	013fdfc4 	movi	r4,-129
  102494:	a586b03a 	or	r3,r20,r22
  102498:	d8802e15 	stw	r2,184(sp)
  10249c:	9124703a 	and	r18,r18,r4
  1024a0:	1802f71e 	bne	r3,zero,103080 <___svfprintf_internal_r+0x1248>
  1024a4:	d9402a17 	ldw	r5,168(sp)
  1024a8:	0039883a 	mov	fp,zero
  1024ac:	2806df26 	beq	r5,zero,10402c <___svfprintf_internal_r+0x21f4>
  1024b0:	0029883a 	mov	r20,zero
  1024b4:	002d883a 	mov	r22,zero
  1024b8:	dc001e04 	addi	r16,sp,120
  1024bc:	a006d0fa 	srli	r3,r20,3
  1024c0:	b008977a 	slli	r4,r22,29
  1024c4:	b02cd0fa 	srli	r22,r22,3
  1024c8:	a50001cc 	andi	r20,r20,7
  1024cc:	a0800c04 	addi	r2,r20,48
  1024d0:	843fffc4 	addi	r16,r16,-1
  1024d4:	20e8b03a 	or	r20,r4,r3
  1024d8:	80800005 	stb	r2,0(r16)
  1024dc:	a586b03a 	or	r3,r20,r22
  1024e0:	183ff61e 	bne	r3,zero,1024bc <__alt_data_end+0xfffc24bc>
  1024e4:	90c0004c 	andi	r3,r18,1
  1024e8:	18013f26 	beq	r3,zero,1029e8 <___svfprintf_internal_r+0xbb0>
  1024ec:	10803fcc 	andi	r2,r2,255
  1024f0:	1080201c 	xori	r2,r2,128
  1024f4:	10bfe004 	addi	r2,r2,-128
  1024f8:	00c00c04 	movi	r3,48
  1024fc:	10c13a26 	beq	r2,r3,1029e8 <___svfprintf_internal_r+0xbb0>
  102500:	80ffffc5 	stb	r3,-1(r16)
  102504:	d8c02817 	ldw	r3,160(sp)
  102508:	80bfffc4 	addi	r2,r16,-1
  10250c:	1021883a 	mov	r16,r2
  102510:	1887c83a 	sub	r3,r3,r2
  102514:	d8c02b15 	stw	r3,172(sp)
  102518:	d8802b17 	ldw	r2,172(sp)
  10251c:	d9002a17 	ldw	r4,168(sp)
  102520:	1100010e 	bge	r2,r4,102528 <___svfprintf_internal_r+0x6f0>
  102524:	2005883a 	mov	r2,r4
  102528:	d8802915 	stw	r2,164(sp)
  10252c:	d8003215 	stw	zero,200(sp)
  102530:	e7003fcc 	andi	fp,fp,255
  102534:	e700201c 	xori	fp,fp,128
  102538:	e73fe004 	addi	fp,fp,-128
  10253c:	e0000326 	beq	fp,zero,10254c <___svfprintf_internal_r+0x714>
  102540:	d8c02917 	ldw	r3,164(sp)
  102544:	18c00044 	addi	r3,r3,1
  102548:	d8c02915 	stw	r3,164(sp)
  10254c:	90c0008c 	andi	r3,r18,2
  102550:	d8c02c15 	stw	r3,176(sp)
  102554:	18000326 	beq	r3,zero,102564 <___svfprintf_internal_r+0x72c>
  102558:	d8c02917 	ldw	r3,164(sp)
  10255c:	18c00084 	addi	r3,r3,2
  102560:	d8c02915 	stw	r3,164(sp)
  102564:	90c0210c 	andi	r3,r18,132
  102568:	d8c03015 	stw	r3,192(sp)
  10256c:	1801c31e 	bne	r3,zero,102c7c <___svfprintf_internal_r+0xe44>
  102570:	d9003117 	ldw	r4,196(sp)
  102574:	d8c02917 	ldw	r3,164(sp)
  102578:	20e9c83a 	sub	r20,r4,r3
  10257c:	0501bf0e 	bge	zero,r20,102c7c <___svfprintf_internal_r+0xe44>
  102580:	02400404 	movi	r9,16
  102584:	d8c02017 	ldw	r3,128(sp)
  102588:	d8801f17 	ldw	r2,124(sp)
  10258c:	4d053d0e 	bge	r9,r20,103a84 <___svfprintf_internal_r+0x1c4c>
  102590:	014004b4 	movhi	r5,18
  102594:	294c9b84 	addi	r5,r5,12910
  102598:	dc403c15 	stw	r17,240(sp)
  10259c:	d9403515 	stw	r5,212(sp)
  1025a0:	a023883a 	mov	r17,r20
  1025a4:	482d883a 	mov	r22,r9
  1025a8:	9029883a 	mov	r20,r18
  1025ac:	070001c4 	movi	fp,7
  1025b0:	8025883a 	mov	r18,r16
  1025b4:	dc002d17 	ldw	r16,180(sp)
  1025b8:	00000306 	br	1025c8 <___svfprintf_internal_r+0x790>
  1025bc:	8c7ffc04 	addi	r17,r17,-16
  1025c0:	42000204 	addi	r8,r8,8
  1025c4:	b440130e 	bge	r22,r17,102614 <___svfprintf_internal_r+0x7dc>
  1025c8:	010004b4 	movhi	r4,18
  1025cc:	18c00404 	addi	r3,r3,16
  1025d0:	10800044 	addi	r2,r2,1
  1025d4:	210c9b84 	addi	r4,r4,12910
  1025d8:	41000015 	stw	r4,0(r8)
  1025dc:	45800115 	stw	r22,4(r8)
  1025e0:	d8c02015 	stw	r3,128(sp)
  1025e4:	d8801f15 	stw	r2,124(sp)
  1025e8:	e0bff40e 	bge	fp,r2,1025bc <__alt_data_end+0xfffc25bc>
  1025ec:	d9801e04 	addi	r6,sp,120
  1025f0:	800b883a 	mov	r5,r16
  1025f4:	9809883a 	mov	r4,r19
  1025f8:	010f4080 	call	10f408 <__ssprint_r>
  1025fc:	103ef51e 	bne	r2,zero,1021d4 <__alt_data_end+0xfffc21d4>
  102600:	8c7ffc04 	addi	r17,r17,-16
  102604:	d8c02017 	ldw	r3,128(sp)
  102608:	d8801f17 	ldw	r2,124(sp)
  10260c:	da000404 	addi	r8,sp,16
  102610:	b47fed16 	blt	r22,r17,1025c8 <__alt_data_end+0xfffc25c8>
  102614:	9021883a 	mov	r16,r18
  102618:	a025883a 	mov	r18,r20
  10261c:	8829883a 	mov	r20,r17
  102620:	dc403c17 	ldw	r17,240(sp)
  102624:	d9403517 	ldw	r5,212(sp)
  102628:	a0c7883a 	add	r3,r20,r3
  10262c:	10800044 	addi	r2,r2,1
  102630:	41400015 	stw	r5,0(r8)
  102634:	45000115 	stw	r20,4(r8)
  102638:	d8c02015 	stw	r3,128(sp)
  10263c:	d8801f15 	stw	r2,124(sp)
  102640:	010001c4 	movi	r4,7
  102644:	2082c116 	blt	r4,r2,10314c <___svfprintf_internal_r+0x1314>
  102648:	df002787 	ldb	fp,158(sp)
  10264c:	42000204 	addi	r8,r8,8
  102650:	e0000c26 	beq	fp,zero,102684 <___svfprintf_internal_r+0x84c>
  102654:	d8801f17 	ldw	r2,124(sp)
  102658:	d9002784 	addi	r4,sp,158
  10265c:	18c00044 	addi	r3,r3,1
  102660:	10800044 	addi	r2,r2,1
  102664:	41000015 	stw	r4,0(r8)
  102668:	01000044 	movi	r4,1
  10266c:	41000115 	stw	r4,4(r8)
  102670:	d8c02015 	stw	r3,128(sp)
  102674:	d8801f15 	stw	r2,124(sp)
  102678:	010001c4 	movi	r4,7
  10267c:	20825a16 	blt	r4,r2,102fe8 <___svfprintf_internal_r+0x11b0>
  102680:	42000204 	addi	r8,r8,8
  102684:	d8802c17 	ldw	r2,176(sp)
  102688:	10000c26 	beq	r2,zero,1026bc <___svfprintf_internal_r+0x884>
  10268c:	d8801f17 	ldw	r2,124(sp)
  102690:	d9002704 	addi	r4,sp,156
  102694:	18c00084 	addi	r3,r3,2
  102698:	10800044 	addi	r2,r2,1
  10269c:	41000015 	stw	r4,0(r8)
  1026a0:	01000084 	movi	r4,2
  1026a4:	41000115 	stw	r4,4(r8)
  1026a8:	d8c02015 	stw	r3,128(sp)
  1026ac:	d8801f15 	stw	r2,124(sp)
  1026b0:	010001c4 	movi	r4,7
  1026b4:	20825416 	blt	r4,r2,103008 <___svfprintf_internal_r+0x11d0>
  1026b8:	42000204 	addi	r8,r8,8
  1026bc:	d9003017 	ldw	r4,192(sp)
  1026c0:	00802004 	movi	r2,128
  1026c4:	2081b926 	beq	r4,r2,102dac <___svfprintf_internal_r+0xf74>
  1026c8:	d9402a17 	ldw	r5,168(sp)
  1026cc:	d8802b17 	ldw	r2,172(sp)
  1026d0:	28adc83a 	sub	r22,r5,r2
  1026d4:	05802f0e 	bge	zero,r22,102794 <___svfprintf_internal_r+0x95c>
  1026d8:	07000404 	movi	fp,16
  1026dc:	d8801f17 	ldw	r2,124(sp)
  1026e0:	e583e20e 	bge	fp,r22,10366c <___svfprintf_internal_r+0x1834>
  1026e4:	014004b4 	movhi	r5,18
  1026e8:	294c9784 	addi	r5,r5,12894
  1026ec:	dc402a15 	stw	r17,168(sp)
  1026f0:	d9402c15 	stw	r5,176(sp)
  1026f4:	b023883a 	mov	r17,r22
  1026f8:	050001c4 	movi	r20,7
  1026fc:	902d883a 	mov	r22,r18
  102700:	8025883a 	mov	r18,r16
  102704:	dc002d17 	ldw	r16,180(sp)
  102708:	00000306 	br	102718 <___svfprintf_internal_r+0x8e0>
  10270c:	8c7ffc04 	addi	r17,r17,-16
  102710:	42000204 	addi	r8,r8,8
  102714:	e440110e 	bge	fp,r17,10275c <___svfprintf_internal_r+0x924>
  102718:	18c00404 	addi	r3,r3,16
  10271c:	10800044 	addi	r2,r2,1
  102720:	45400015 	stw	r21,0(r8)
  102724:	47000115 	stw	fp,4(r8)
  102728:	d8c02015 	stw	r3,128(sp)
  10272c:	d8801f15 	stw	r2,124(sp)
  102730:	a0bff60e 	bge	r20,r2,10270c <__alt_data_end+0xfffc270c>
  102734:	d9801e04 	addi	r6,sp,120
  102738:	800b883a 	mov	r5,r16
  10273c:	9809883a 	mov	r4,r19
  102740:	010f4080 	call	10f408 <__ssprint_r>
  102744:	103ea31e 	bne	r2,zero,1021d4 <__alt_data_end+0xfffc21d4>
  102748:	8c7ffc04 	addi	r17,r17,-16
  10274c:	d8c02017 	ldw	r3,128(sp)
  102750:	d8801f17 	ldw	r2,124(sp)
  102754:	da000404 	addi	r8,sp,16
  102758:	e47fef16 	blt	fp,r17,102718 <__alt_data_end+0xfffc2718>
  10275c:	9021883a 	mov	r16,r18
  102760:	b025883a 	mov	r18,r22
  102764:	882d883a 	mov	r22,r17
  102768:	dc402a17 	ldw	r17,168(sp)
  10276c:	d9002c17 	ldw	r4,176(sp)
  102770:	1d87883a 	add	r3,r3,r22
  102774:	10800044 	addi	r2,r2,1
  102778:	41000015 	stw	r4,0(r8)
  10277c:	45800115 	stw	r22,4(r8)
  102780:	d8c02015 	stw	r3,128(sp)
  102784:	d8801f15 	stw	r2,124(sp)
  102788:	010001c4 	movi	r4,7
  10278c:	20820e16 	blt	r4,r2,102fc8 <___svfprintf_internal_r+0x1190>
  102790:	42000204 	addi	r8,r8,8
  102794:	9080400c 	andi	r2,r18,256
  102798:	10013a1e 	bne	r2,zero,102c84 <___svfprintf_internal_r+0xe4c>
  10279c:	d9402b17 	ldw	r5,172(sp)
  1027a0:	d8801f17 	ldw	r2,124(sp)
  1027a4:	44000015 	stw	r16,0(r8)
  1027a8:	1947883a 	add	r3,r3,r5
  1027ac:	10800044 	addi	r2,r2,1
  1027b0:	41400115 	stw	r5,4(r8)
  1027b4:	d8c02015 	stw	r3,128(sp)
  1027b8:	d8801f15 	stw	r2,124(sp)
  1027bc:	010001c4 	movi	r4,7
  1027c0:	2081f316 	blt	r4,r2,102f90 <___svfprintf_internal_r+0x1158>
  1027c4:	42000204 	addi	r8,r8,8
  1027c8:	9480010c 	andi	r18,r18,4
  1027cc:	90003226 	beq	r18,zero,102898 <___svfprintf_internal_r+0xa60>
  1027d0:	d9403117 	ldw	r5,196(sp)
  1027d4:	d8802917 	ldw	r2,164(sp)
  1027d8:	28a1c83a 	sub	r16,r5,r2
  1027dc:	04002e0e 	bge	zero,r16,102898 <___svfprintf_internal_r+0xa60>
  1027e0:	04400404 	movi	r17,16
  1027e4:	d8801f17 	ldw	r2,124(sp)
  1027e8:	8c04db0e 	bge	r17,r16,103b58 <___svfprintf_internal_r+0x1d20>
  1027ec:	014004b4 	movhi	r5,18
  1027f0:	294c9b84 	addi	r5,r5,12910
  1027f4:	d9403515 	stw	r5,212(sp)
  1027f8:	048001c4 	movi	r18,7
  1027fc:	dd002d17 	ldw	r20,180(sp)
  102800:	00000306 	br	102810 <___svfprintf_internal_r+0x9d8>
  102804:	843ffc04 	addi	r16,r16,-16
  102808:	42000204 	addi	r8,r8,8
  10280c:	8c00130e 	bge	r17,r16,10285c <___svfprintf_internal_r+0xa24>
  102810:	010004b4 	movhi	r4,18
  102814:	18c00404 	addi	r3,r3,16
  102818:	10800044 	addi	r2,r2,1
  10281c:	210c9b84 	addi	r4,r4,12910
  102820:	41000015 	stw	r4,0(r8)
  102824:	44400115 	stw	r17,4(r8)
  102828:	d8c02015 	stw	r3,128(sp)
  10282c:	d8801f15 	stw	r2,124(sp)
  102830:	90bff40e 	bge	r18,r2,102804 <__alt_data_end+0xfffc2804>
  102834:	d9801e04 	addi	r6,sp,120
  102838:	a00b883a 	mov	r5,r20
  10283c:	9809883a 	mov	r4,r19
  102840:	010f4080 	call	10f408 <__ssprint_r>
  102844:	103e631e 	bne	r2,zero,1021d4 <__alt_data_end+0xfffc21d4>
  102848:	843ffc04 	addi	r16,r16,-16
  10284c:	d8c02017 	ldw	r3,128(sp)
  102850:	d8801f17 	ldw	r2,124(sp)
  102854:	da000404 	addi	r8,sp,16
  102858:	8c3fed16 	blt	r17,r16,102810 <__alt_data_end+0xfffc2810>
  10285c:	d9403517 	ldw	r5,212(sp)
  102860:	1c07883a 	add	r3,r3,r16
  102864:	10800044 	addi	r2,r2,1
  102868:	41400015 	stw	r5,0(r8)
  10286c:	44000115 	stw	r16,4(r8)
  102870:	d8c02015 	stw	r3,128(sp)
  102874:	d8801f15 	stw	r2,124(sp)
  102878:	010001c4 	movi	r4,7
  10287c:	2080060e 	bge	r4,r2,102898 <___svfprintf_internal_r+0xa60>
  102880:	d9402d17 	ldw	r5,180(sp)
  102884:	d9801e04 	addi	r6,sp,120
  102888:	9809883a 	mov	r4,r19
  10288c:	010f4080 	call	10f408 <__ssprint_r>
  102890:	103e501e 	bne	r2,zero,1021d4 <__alt_data_end+0xfffc21d4>
  102894:	d8c02017 	ldw	r3,128(sp)
  102898:	d8803117 	ldw	r2,196(sp)
  10289c:	d9002917 	ldw	r4,164(sp)
  1028a0:	1100010e 	bge	r2,r4,1028a8 <___svfprintf_internal_r+0xa70>
  1028a4:	2005883a 	mov	r2,r4
  1028a8:	d9402f17 	ldw	r5,188(sp)
  1028ac:	288b883a 	add	r5,r5,r2
  1028b0:	d9402f15 	stw	r5,188(sp)
  1028b4:	1801be1e 	bne	r3,zero,102fb0 <___svfprintf_internal_r+0x1178>
  1028b8:	b8800007 	ldb	r2,0(r23)
  1028bc:	d8001f15 	stw	zero,124(sp)
  1028c0:	da000404 	addi	r8,sp,16
  1028c4:	103d891e 	bne	r2,zero,101eec <__alt_data_end+0xfffc1eec>
  1028c8:	b823883a 	mov	r17,r23
  1028cc:	003d9f06 	br	101f4c <__alt_data_end+0xfffc1f4c>
  1028d0:	8025883a 	mov	r18,r16
  1028d4:	dc002903 	ldbu	r16,164(sp)
  1028d8:	e011883a 	mov	r8,fp
  1028dc:	84003fcc 	andi	r16,r16,255
  1028e0:	8005e61e 	bne	r16,zero,10407c <___svfprintf_internal_r+0x2244>
  1028e4:	94800414 	ori	r18,r18,16
  1028e8:	9080080c 	andi	r2,r18,32
  1028ec:	10022026 	beq	r2,zero,103170 <___svfprintf_internal_r+0x1338>
  1028f0:	d9002e17 	ldw	r4,184(sp)
  1028f4:	d9402a17 	ldw	r5,168(sp)
  1028f8:	d8002785 	stb	zero,158(sp)
  1028fc:	20c00204 	addi	r3,r4,8
  102900:	25000017 	ldw	r20,0(r4)
  102904:	25800117 	ldw	r22,4(r4)
  102908:	2803ad16 	blt	r5,zero,1037c0 <___svfprintf_internal_r+0x1988>
  10290c:	013fdfc4 	movi	r4,-129
  102910:	a584b03a 	or	r2,r20,r22
  102914:	d8c02e15 	stw	r3,184(sp)
  102918:	9124703a 	and	r18,r18,r4
  10291c:	0039883a 	mov	fp,zero
  102920:	103eb01e 	bne	r2,zero,1023e4 <__alt_data_end+0xfffc23e4>
  102924:	d8802a17 	ldw	r2,168(sp)
  102928:	1002e71e 	bne	r2,zero,1034c8 <___svfprintf_internal_r+0x1690>
  10292c:	d8002a15 	stw	zero,168(sp)
  102930:	d8002b15 	stw	zero,172(sp)
  102934:	dc001e04 	addi	r16,sp,120
  102938:	003ef706 	br	102518 <__alt_data_end+0xfffc2518>
  10293c:	8025883a 	mov	r18,r16
  102940:	dc002903 	ldbu	r16,164(sp)
  102944:	e011883a 	mov	r8,fp
  102948:	84003fcc 	andi	r16,r16,255
  10294c:	8005c81e 	bne	r16,zero,104070 <___svfprintf_internal_r+0x2238>
  102950:	010004b4 	movhi	r4,18
  102954:	210c8b04 	addi	r4,r4,12844
  102958:	d9003a15 	stw	r4,232(sp)
  10295c:	9080080c 	andi	r2,r18,32
  102960:	10007226 	beq	r2,zero,102b2c <___svfprintf_internal_r+0xcf4>
  102964:	d9402e17 	ldw	r5,184(sp)
  102968:	2d000017 	ldw	r20,0(r5)
  10296c:	2d800117 	ldw	r22,4(r5)
  102970:	29400204 	addi	r5,r5,8
  102974:	d9402e15 	stw	r5,184(sp)
  102978:	9080004c 	andi	r2,r18,1
  10297c:	1001aa26 	beq	r2,zero,103028 <___svfprintf_internal_r+0x11f0>
  102980:	a584b03a 	or	r2,r20,r22
  102984:	10032526 	beq	r2,zero,10361c <___svfprintf_internal_r+0x17e4>
  102988:	d8c02a17 	ldw	r3,168(sp)
  10298c:	00800c04 	movi	r2,48
  102990:	d8802705 	stb	r2,156(sp)
  102994:	dc402745 	stb	r17,157(sp)
  102998:	d8002785 	stb	zero,158(sp)
  10299c:	90800094 	ori	r2,r18,2
  1029a0:	1804a316 	blt	r3,zero,103c30 <___svfprintf_internal_r+0x1df8>
  1029a4:	00bfdfc4 	movi	r2,-129
  1029a8:	90a4703a 	and	r18,r18,r2
  1029ac:	94800094 	ori	r18,r18,2
  1029b0:	0039883a 	mov	fp,zero
  1029b4:	d9003a17 	ldw	r4,232(sp)
  1029b8:	dc001e04 	addi	r16,sp,120
  1029bc:	a08003cc 	andi	r2,r20,15
  1029c0:	b006973a 	slli	r3,r22,28
  1029c4:	2085883a 	add	r2,r4,r2
  1029c8:	a028d13a 	srli	r20,r20,4
  1029cc:	10800003 	ldbu	r2,0(r2)
  1029d0:	b02cd13a 	srli	r22,r22,4
  1029d4:	843fffc4 	addi	r16,r16,-1
  1029d8:	1d28b03a 	or	r20,r3,r20
  1029dc:	80800005 	stb	r2,0(r16)
  1029e0:	a584b03a 	or	r2,r20,r22
  1029e4:	103ff51e 	bne	r2,zero,1029bc <__alt_data_end+0xfffc29bc>
  1029e8:	d8c02817 	ldw	r3,160(sp)
  1029ec:	1c07c83a 	sub	r3,r3,r16
  1029f0:	d8c02b15 	stw	r3,172(sp)
  1029f4:	003ec806 	br	102518 <__alt_data_end+0xfffc2518>
  1029f8:	d8c02e17 	ldw	r3,184(sp)
  1029fc:	d9002e17 	ldw	r4,184(sp)
  102a00:	8025883a 	mov	r18,r16
  102a04:	18800017 	ldw	r2,0(r3)
  102a08:	21000104 	addi	r4,r4,4
  102a0c:	00c00044 	movi	r3,1
  102a10:	e011883a 	mov	r8,fp
  102a14:	d8c02915 	stw	r3,164(sp)
  102a18:	d8002785 	stb	zero,158(sp)
  102a1c:	d8801405 	stb	r2,80(sp)
  102a20:	d9002e15 	stw	r4,184(sp)
  102a24:	d8c02b15 	stw	r3,172(sp)
  102a28:	d8002a15 	stw	zero,168(sp)
  102a2c:	d8003215 	stw	zero,200(sp)
  102a30:	dc001404 	addi	r16,sp,80
  102a34:	0039883a 	mov	fp,zero
  102a38:	003ec406 	br	10254c <__alt_data_end+0xfffc254c>
  102a3c:	8025883a 	mov	r18,r16
  102a40:	dc002903 	ldbu	r16,164(sp)
  102a44:	e011883a 	mov	r8,fp
  102a48:	84003fcc 	andi	r16,r16,255
  102a4c:	803e8726 	beq	r16,zero,10246c <__alt_data_end+0xfffc246c>
  102a50:	d8c02b03 	ldbu	r3,172(sp)
  102a54:	d8c02785 	stb	r3,158(sp)
  102a58:	003e8406 	br	10246c <__alt_data_end+0xfffc246c>
  102a5c:	00c00044 	movi	r3,1
  102a60:	d8c02905 	stb	r3,164(sp)
  102a64:	00c00ac4 	movi	r3,43
  102a68:	d8c02b05 	stb	r3,172(sp)
  102a6c:	bc400007 	ldb	r17,0(r23)
  102a70:	003d4606 	br	101f8c <__alt_data_end+0xfffc1f8c>
  102a74:	84000814 	ori	r16,r16,32
  102a78:	bc400007 	ldb	r17,0(r23)
  102a7c:	003d4306 	br	101f8c <__alt_data_end+0xfffc1f8c>
  102a80:	d8802e17 	ldw	r2,184(sp)
  102a84:	8025883a 	mov	r18,r16
  102a88:	d8002785 	stb	zero,158(sp)
  102a8c:	14000017 	ldw	r16,0(r2)
  102a90:	e011883a 	mov	r8,fp
  102a94:	15000104 	addi	r20,r2,4
  102a98:	80042126 	beq	r16,zero,103b20 <___svfprintf_internal_r+0x1ce8>
  102a9c:	d8c02a17 	ldw	r3,168(sp)
  102aa0:	1803ee16 	blt	r3,zero,103a5c <___svfprintf_internal_r+0x1c24>
  102aa4:	180d883a 	mov	r6,r3
  102aa8:	000b883a 	mov	r5,zero
  102aac:	8009883a 	mov	r4,r16
  102ab0:	df003e15 	stw	fp,248(sp)
  102ab4:	010b7200 	call	10b720 <memchr>
  102ab8:	da003e17 	ldw	r8,248(sp)
  102abc:	10046a26 	beq	r2,zero,103c68 <___svfprintf_internal_r+0x1e30>
  102ac0:	1405c83a 	sub	r2,r2,r16
  102ac4:	d8802b15 	stw	r2,172(sp)
  102ac8:	1003ea16 	blt	r2,zero,103a74 <___svfprintf_internal_r+0x1c3c>
  102acc:	df002783 	ldbu	fp,158(sp)
  102ad0:	d8802915 	stw	r2,164(sp)
  102ad4:	dd002e15 	stw	r20,184(sp)
  102ad8:	d8002a15 	stw	zero,168(sp)
  102adc:	d8003215 	stw	zero,200(sp)
  102ae0:	003e9306 	br	102530 <__alt_data_end+0xfffc2530>
  102ae4:	8025883a 	mov	r18,r16
  102ae8:	dc002903 	ldbu	r16,164(sp)
  102aec:	e011883a 	mov	r8,fp
  102af0:	84003fcc 	andi	r16,r16,255
  102af4:	803f7c26 	beq	r16,zero,1028e8 <__alt_data_end+0xfffc28e8>
  102af8:	d8c02b03 	ldbu	r3,172(sp)
  102afc:	d8c02785 	stb	r3,158(sp)
  102b00:	003f7906 	br	1028e8 <__alt_data_end+0xfffc28e8>
  102b04:	8025883a 	mov	r18,r16
  102b08:	dc002903 	ldbu	r16,164(sp)
  102b0c:	e011883a 	mov	r8,fp
  102b10:	84003fcc 	andi	r16,r16,255
  102b14:	8005741e 	bne	r16,zero,1040e8 <___svfprintf_internal_r+0x22b0>
  102b18:	010004b4 	movhi	r4,18
  102b1c:	210c9004 	addi	r4,r4,12864
  102b20:	d9003a15 	stw	r4,232(sp)
  102b24:	9080080c 	andi	r2,r18,32
  102b28:	103f8e1e 	bne	r2,zero,102964 <__alt_data_end+0xfffc2964>
  102b2c:	9080040c 	andi	r2,r18,16
  102b30:	1002a726 	beq	r2,zero,1035d0 <___svfprintf_internal_r+0x1798>
  102b34:	d8802e17 	ldw	r2,184(sp)
  102b38:	002d883a 	mov	r22,zero
  102b3c:	15000017 	ldw	r20,0(r2)
  102b40:	10800104 	addi	r2,r2,4
  102b44:	d8802e15 	stw	r2,184(sp)
  102b48:	003f8b06 	br	102978 <__alt_data_end+0xfffc2978>
  102b4c:	84000054 	ori	r16,r16,1
  102b50:	bc400007 	ldb	r17,0(r23)
  102b54:	003d0d06 	br	101f8c <__alt_data_end+0xfffc1f8c>
  102b58:	d8802b07 	ldb	r2,172(sp)
  102b5c:	1002a41e 	bne	r2,zero,1035f0 <___svfprintf_internal_r+0x17b8>
  102b60:	00c00044 	movi	r3,1
  102b64:	d8c02905 	stb	r3,164(sp)
  102b68:	00c00804 	movi	r3,32
  102b6c:	d8c02b05 	stb	r3,172(sp)
  102b70:	bc400007 	ldb	r17,0(r23)
  102b74:	003d0506 	br	101f8c <__alt_data_end+0xfffc1f8c>
  102b78:	8025883a 	mov	r18,r16
  102b7c:	dc002903 	ldbu	r16,164(sp)
  102b80:	e011883a 	mov	r8,fp
  102b84:	84003fcc 	andi	r16,r16,255
  102b88:	803e0626 	beq	r16,zero,1023a4 <__alt_data_end+0xfffc23a4>
  102b8c:	d8c02b03 	ldbu	r3,172(sp)
  102b90:	d8c02785 	stb	r3,158(sp)
  102b94:	003e0306 	br	1023a4 <__alt_data_end+0xfffc23a4>
  102b98:	bc400007 	ldb	r17,0(r23)
  102b9c:	00801b04 	movi	r2,108
  102ba0:	88830a26 	beq	r17,r2,1037cc <___svfprintf_internal_r+0x1994>
  102ba4:	84000414 	ori	r16,r16,16
  102ba8:	003cf806 	br	101f8c <__alt_data_end+0xfffc1f8c>
  102bac:	8025883a 	mov	r18,r16
  102bb0:	dc002903 	ldbu	r16,164(sp)
  102bb4:	e011883a 	mov	r8,fp
  102bb8:	84003fcc 	andi	r16,r16,255
  102bbc:	8005471e 	bne	r16,zero,1040dc <___svfprintf_internal_r+0x22a4>
  102bc0:	9080080c 	andi	r2,r18,32
  102bc4:	10028c26 	beq	r2,zero,1035f8 <___svfprintf_internal_r+0x17c0>
  102bc8:	d9002e17 	ldw	r4,184(sp)
  102bcc:	d9402f17 	ldw	r5,188(sp)
  102bd0:	20800017 	ldw	r2,0(r4)
  102bd4:	2807d7fa 	srai	r3,r5,31
  102bd8:	21000104 	addi	r4,r4,4
  102bdc:	d9002e15 	stw	r4,184(sp)
  102be0:	11400015 	stw	r5,0(r2)
  102be4:	10c00115 	stw	r3,4(r2)
  102be8:	003cbe06 	br	101ee4 <__alt_data_end+0xfffc1ee4>
  102bec:	84001014 	ori	r16,r16,64
  102bf0:	bc400007 	ldb	r17,0(r23)
  102bf4:	003ce506 	br	101f8c <__alt_data_end+0xfffc1f8c>
  102bf8:	010004b4 	movhi	r4,18
  102bfc:	210c9004 	addi	r4,r4,12864
  102c00:	0039883a 	mov	fp,zero
  102c04:	d9003a15 	stw	r4,232(sp)
  102c08:	04401e04 	movi	r17,120
  102c0c:	003f6906 	br	1029b4 <__alt_data_end+0xfffc29b4>
  102c10:	8025883a 	mov	r18,r16
  102c14:	dc002903 	ldbu	r16,164(sp)
  102c18:	e011883a 	mov	r8,fp
  102c1c:	84003fcc 	andi	r16,r16,255
  102c20:	8005261e 	bne	r16,zero,1040bc <___svfprintf_internal_r+0x2284>
  102c24:	883d6526 	beq	r17,zero,1021bc <__alt_data_end+0xfffc21bc>
  102c28:	00c00044 	movi	r3,1
  102c2c:	d8c02915 	stw	r3,164(sp)
  102c30:	dc401405 	stb	r17,80(sp)
  102c34:	d8002785 	stb	zero,158(sp)
  102c38:	003f7a06 	br	102a24 <__alt_data_end+0xfffc2a24>
  102c3c:	010004b4 	movhi	r4,18
  102c40:	210c9004 	addi	r4,r4,12864
  102c44:	d9003a15 	stw	r4,232(sp)
  102c48:	d8c02e15 	stw	r3,184(sp)
  102c4c:	1025883a 	mov	r18,r2
  102c50:	04401e04 	movi	r17,120
  102c54:	a584b03a 	or	r2,r20,r22
  102c58:	1000fa1e 	bne	r2,zero,103044 <___svfprintf_internal_r+0x120c>
  102c5c:	0039883a 	mov	fp,zero
  102c60:	00800084 	movi	r2,2
  102c64:	10803fcc 	andi	r2,r2,255
  102c68:	00c00044 	movi	r3,1
  102c6c:	10c21626 	beq	r2,r3,1034c8 <___svfprintf_internal_r+0x1690>
  102c70:	00c00084 	movi	r3,2
  102c74:	10fe0e1e 	bne	r2,r3,1024b0 <__alt_data_end+0xfffc24b0>
  102c78:	003d4606 	br	102194 <__alt_data_end+0xfffc2194>
  102c7c:	d8c02017 	ldw	r3,128(sp)
  102c80:	003e7306 	br	102650 <__alt_data_end+0xfffc2650>
  102c84:	00801944 	movi	r2,101
  102c88:	14407c0e 	bge	r2,r17,102e7c <___svfprintf_internal_r+0x1044>
  102c8c:	d9003617 	ldw	r4,216(sp)
  102c90:	d9403717 	ldw	r5,220(sp)
  102c94:	000d883a 	mov	r6,zero
  102c98:	000f883a 	mov	r7,zero
  102c9c:	d8c03d15 	stw	r3,244(sp)
  102ca0:	da003e15 	stw	r8,248(sp)
  102ca4:	0116e9c0 	call	116e9c <__eqdf2>
  102ca8:	d8c03d17 	ldw	r3,244(sp)
  102cac:	da003e17 	ldw	r8,248(sp)
  102cb0:	1000f51e 	bne	r2,zero,103088 <___svfprintf_internal_r+0x1250>
  102cb4:	d8801f17 	ldw	r2,124(sp)
  102cb8:	010004b4 	movhi	r4,18
  102cbc:	210c9704 	addi	r4,r4,12892
  102cc0:	18c00044 	addi	r3,r3,1
  102cc4:	10800044 	addi	r2,r2,1
  102cc8:	41000015 	stw	r4,0(r8)
  102ccc:	01000044 	movi	r4,1
  102cd0:	41000115 	stw	r4,4(r8)
  102cd4:	d8c02015 	stw	r3,128(sp)
  102cd8:	d8801f15 	stw	r2,124(sp)
  102cdc:	010001c4 	movi	r4,7
  102ce0:	20826616 	blt	r4,r2,10367c <___svfprintf_internal_r+0x1844>
  102ce4:	42000204 	addi	r8,r8,8
  102ce8:	d8802617 	ldw	r2,152(sp)
  102cec:	d9403317 	ldw	r5,204(sp)
  102cf0:	11400216 	blt	r2,r5,102cfc <___svfprintf_internal_r+0xec4>
  102cf4:	9080004c 	andi	r2,r18,1
  102cf8:	103eb326 	beq	r2,zero,1027c8 <__alt_data_end+0xfffc27c8>
  102cfc:	d8803817 	ldw	r2,224(sp)
  102d00:	d9003417 	ldw	r4,208(sp)
  102d04:	d9403817 	ldw	r5,224(sp)
  102d08:	1887883a 	add	r3,r3,r2
  102d0c:	d8801f17 	ldw	r2,124(sp)
  102d10:	41000015 	stw	r4,0(r8)
  102d14:	41400115 	stw	r5,4(r8)
  102d18:	10800044 	addi	r2,r2,1
  102d1c:	d8c02015 	stw	r3,128(sp)
  102d20:	d8801f15 	stw	r2,124(sp)
  102d24:	010001c4 	movi	r4,7
  102d28:	2082af16 	blt	r4,r2,1037e8 <___svfprintf_internal_r+0x19b0>
  102d2c:	42000204 	addi	r8,r8,8
  102d30:	d8803317 	ldw	r2,204(sp)
  102d34:	143fffc4 	addi	r16,r2,-1
  102d38:	043ea30e 	bge	zero,r16,1027c8 <__alt_data_end+0xfffc27c8>
  102d3c:	04400404 	movi	r17,16
  102d40:	d8801f17 	ldw	r2,124(sp)
  102d44:	8c00860e 	bge	r17,r16,102f60 <___svfprintf_internal_r+0x1128>
  102d48:	014004b4 	movhi	r5,18
  102d4c:	294c9784 	addi	r5,r5,12894
  102d50:	d9402c15 	stw	r5,176(sp)
  102d54:	058001c4 	movi	r22,7
  102d58:	dd002d17 	ldw	r20,180(sp)
  102d5c:	00000306 	br	102d6c <___svfprintf_internal_r+0xf34>
  102d60:	42000204 	addi	r8,r8,8
  102d64:	843ffc04 	addi	r16,r16,-16
  102d68:	8c00800e 	bge	r17,r16,102f6c <___svfprintf_internal_r+0x1134>
  102d6c:	18c00404 	addi	r3,r3,16
  102d70:	10800044 	addi	r2,r2,1
  102d74:	45400015 	stw	r21,0(r8)
  102d78:	44400115 	stw	r17,4(r8)
  102d7c:	d8c02015 	stw	r3,128(sp)
  102d80:	d8801f15 	stw	r2,124(sp)
  102d84:	b0bff60e 	bge	r22,r2,102d60 <__alt_data_end+0xfffc2d60>
  102d88:	d9801e04 	addi	r6,sp,120
  102d8c:	a00b883a 	mov	r5,r20
  102d90:	9809883a 	mov	r4,r19
  102d94:	010f4080 	call	10f408 <__ssprint_r>
  102d98:	103d0e1e 	bne	r2,zero,1021d4 <__alt_data_end+0xfffc21d4>
  102d9c:	d8c02017 	ldw	r3,128(sp)
  102da0:	d8801f17 	ldw	r2,124(sp)
  102da4:	da000404 	addi	r8,sp,16
  102da8:	003fee06 	br	102d64 <__alt_data_end+0xfffc2d64>
  102dac:	d9403117 	ldw	r5,196(sp)
  102db0:	d8802917 	ldw	r2,164(sp)
  102db4:	28adc83a 	sub	r22,r5,r2
  102db8:	05be430e 	bge	zero,r22,1026c8 <__alt_data_end+0xfffc26c8>
  102dbc:	07000404 	movi	fp,16
  102dc0:	d8801f17 	ldw	r2,124(sp)
  102dc4:	e583a20e 	bge	fp,r22,103c50 <___svfprintf_internal_r+0x1e18>
  102dc8:	014004b4 	movhi	r5,18
  102dcc:	294c9784 	addi	r5,r5,12894
  102dd0:	dc403015 	stw	r17,192(sp)
  102dd4:	d9402c15 	stw	r5,176(sp)
  102dd8:	b023883a 	mov	r17,r22
  102ddc:	050001c4 	movi	r20,7
  102de0:	902d883a 	mov	r22,r18
  102de4:	8025883a 	mov	r18,r16
  102de8:	dc002d17 	ldw	r16,180(sp)
  102dec:	00000306 	br	102dfc <___svfprintf_internal_r+0xfc4>
  102df0:	8c7ffc04 	addi	r17,r17,-16
  102df4:	42000204 	addi	r8,r8,8
  102df8:	e440110e 	bge	fp,r17,102e40 <___svfprintf_internal_r+0x1008>
  102dfc:	18c00404 	addi	r3,r3,16
  102e00:	10800044 	addi	r2,r2,1
  102e04:	45400015 	stw	r21,0(r8)
  102e08:	47000115 	stw	fp,4(r8)
  102e0c:	d8c02015 	stw	r3,128(sp)
  102e10:	d8801f15 	stw	r2,124(sp)
  102e14:	a0bff60e 	bge	r20,r2,102df0 <__alt_data_end+0xfffc2df0>
  102e18:	d9801e04 	addi	r6,sp,120
  102e1c:	800b883a 	mov	r5,r16
  102e20:	9809883a 	mov	r4,r19
  102e24:	010f4080 	call	10f408 <__ssprint_r>
  102e28:	103cea1e 	bne	r2,zero,1021d4 <__alt_data_end+0xfffc21d4>
  102e2c:	8c7ffc04 	addi	r17,r17,-16
  102e30:	d8c02017 	ldw	r3,128(sp)
  102e34:	d8801f17 	ldw	r2,124(sp)
  102e38:	da000404 	addi	r8,sp,16
  102e3c:	e47fef16 	blt	fp,r17,102dfc <__alt_data_end+0xfffc2dfc>
  102e40:	9021883a 	mov	r16,r18
  102e44:	b025883a 	mov	r18,r22
  102e48:	882d883a 	mov	r22,r17
  102e4c:	dc403017 	ldw	r17,192(sp)
  102e50:	d9002c17 	ldw	r4,176(sp)
  102e54:	1d87883a 	add	r3,r3,r22
  102e58:	10800044 	addi	r2,r2,1
  102e5c:	41000015 	stw	r4,0(r8)
  102e60:	45800115 	stw	r22,4(r8)
  102e64:	d8c02015 	stw	r3,128(sp)
  102e68:	d8801f15 	stw	r2,124(sp)
  102e6c:	010001c4 	movi	r4,7
  102e70:	20819a16 	blt	r4,r2,1034dc <___svfprintf_internal_r+0x16a4>
  102e74:	42000204 	addi	r8,r8,8
  102e78:	003e1306 	br	1026c8 <__alt_data_end+0xfffc26c8>
  102e7c:	d9403317 	ldw	r5,204(sp)
  102e80:	00800044 	movi	r2,1
  102e84:	18c00044 	addi	r3,r3,1
  102e88:	1141710e 	bge	r2,r5,103450 <___svfprintf_internal_r+0x1618>
  102e8c:	dc401f17 	ldw	r17,124(sp)
  102e90:	00800044 	movi	r2,1
  102e94:	40800115 	stw	r2,4(r8)
  102e98:	8c400044 	addi	r17,r17,1
  102e9c:	44000015 	stw	r16,0(r8)
  102ea0:	d8c02015 	stw	r3,128(sp)
  102ea4:	dc401f15 	stw	r17,124(sp)
  102ea8:	008001c4 	movi	r2,7
  102eac:	14417416 	blt	r2,r17,103480 <___svfprintf_internal_r+0x1648>
  102eb0:	42000204 	addi	r8,r8,8
  102eb4:	d8803817 	ldw	r2,224(sp)
  102eb8:	d9003417 	ldw	r4,208(sp)
  102ebc:	8c400044 	addi	r17,r17,1
  102ec0:	10c7883a 	add	r3,r2,r3
  102ec4:	40800115 	stw	r2,4(r8)
  102ec8:	41000015 	stw	r4,0(r8)
  102ecc:	d8c02015 	stw	r3,128(sp)
  102ed0:	dc401f15 	stw	r17,124(sp)
  102ed4:	008001c4 	movi	r2,7
  102ed8:	14417216 	blt	r2,r17,1034a4 <___svfprintf_internal_r+0x166c>
  102edc:	45800204 	addi	r22,r8,8
  102ee0:	d9003617 	ldw	r4,216(sp)
  102ee4:	d9403717 	ldw	r5,220(sp)
  102ee8:	000d883a 	mov	r6,zero
  102eec:	000f883a 	mov	r7,zero
  102ef0:	d8c03d15 	stw	r3,244(sp)
  102ef4:	0116e9c0 	call	116e9c <__eqdf2>
  102ef8:	d8c03d17 	ldw	r3,244(sp)
  102efc:	1000b326 	beq	r2,zero,1031cc <___svfprintf_internal_r+0x1394>
  102f00:	d9403317 	ldw	r5,204(sp)
  102f04:	84000044 	addi	r16,r16,1
  102f08:	8c400044 	addi	r17,r17,1
  102f0c:	28bfffc4 	addi	r2,r5,-1
  102f10:	1887883a 	add	r3,r3,r2
  102f14:	b0800115 	stw	r2,4(r22)
  102f18:	b4000015 	stw	r16,0(r22)
  102f1c:	d8c02015 	stw	r3,128(sp)
  102f20:	dc401f15 	stw	r17,124(sp)
  102f24:	008001c4 	movi	r2,7
  102f28:	1440d216 	blt	r2,r17,103274 <___svfprintf_internal_r+0x143c>
  102f2c:	b5800204 	addi	r22,r22,8
  102f30:	d9003b17 	ldw	r4,236(sp)
  102f34:	df0022c4 	addi	fp,sp,139
  102f38:	8c400044 	addi	r17,r17,1
  102f3c:	20c7883a 	add	r3,r4,r3
  102f40:	b7000015 	stw	fp,0(r22)
  102f44:	b1000115 	stw	r4,4(r22)
  102f48:	d8c02015 	stw	r3,128(sp)
  102f4c:	dc401f15 	stw	r17,124(sp)
  102f50:	008001c4 	movi	r2,7
  102f54:	14400e16 	blt	r2,r17,102f90 <___svfprintf_internal_r+0x1158>
  102f58:	b2000204 	addi	r8,r22,8
  102f5c:	003e1a06 	br	1027c8 <__alt_data_end+0xfffc27c8>
  102f60:	010004b4 	movhi	r4,18
  102f64:	210c9784 	addi	r4,r4,12894
  102f68:	d9002c15 	stw	r4,176(sp)
  102f6c:	d9002c17 	ldw	r4,176(sp)
  102f70:	1c07883a 	add	r3,r3,r16
  102f74:	44000115 	stw	r16,4(r8)
  102f78:	41000015 	stw	r4,0(r8)
  102f7c:	10800044 	addi	r2,r2,1
  102f80:	d8c02015 	stw	r3,128(sp)
  102f84:	d8801f15 	stw	r2,124(sp)
  102f88:	010001c4 	movi	r4,7
  102f8c:	20be0d0e 	bge	r4,r2,1027c4 <__alt_data_end+0xfffc27c4>
  102f90:	d9402d17 	ldw	r5,180(sp)
  102f94:	d9801e04 	addi	r6,sp,120
  102f98:	9809883a 	mov	r4,r19
  102f9c:	010f4080 	call	10f408 <__ssprint_r>
  102fa0:	103c8c1e 	bne	r2,zero,1021d4 <__alt_data_end+0xfffc21d4>
  102fa4:	d8c02017 	ldw	r3,128(sp)
  102fa8:	da000404 	addi	r8,sp,16
  102fac:	003e0606 	br	1027c8 <__alt_data_end+0xfffc27c8>
  102fb0:	d9402d17 	ldw	r5,180(sp)
  102fb4:	d9801e04 	addi	r6,sp,120
  102fb8:	9809883a 	mov	r4,r19
  102fbc:	010f4080 	call	10f408 <__ssprint_r>
  102fc0:	103e3d26 	beq	r2,zero,1028b8 <__alt_data_end+0xfffc28b8>
  102fc4:	003c8306 	br	1021d4 <__alt_data_end+0xfffc21d4>
  102fc8:	d9402d17 	ldw	r5,180(sp)
  102fcc:	d9801e04 	addi	r6,sp,120
  102fd0:	9809883a 	mov	r4,r19
  102fd4:	010f4080 	call	10f408 <__ssprint_r>
  102fd8:	103c7e1e 	bne	r2,zero,1021d4 <__alt_data_end+0xfffc21d4>
  102fdc:	d8c02017 	ldw	r3,128(sp)
  102fe0:	da000404 	addi	r8,sp,16
  102fe4:	003deb06 	br	102794 <__alt_data_end+0xfffc2794>
  102fe8:	d9402d17 	ldw	r5,180(sp)
  102fec:	d9801e04 	addi	r6,sp,120
  102ff0:	9809883a 	mov	r4,r19
  102ff4:	010f4080 	call	10f408 <__ssprint_r>
  102ff8:	103c761e 	bne	r2,zero,1021d4 <__alt_data_end+0xfffc21d4>
  102ffc:	d8c02017 	ldw	r3,128(sp)
  103000:	da000404 	addi	r8,sp,16
  103004:	003d9f06 	br	102684 <__alt_data_end+0xfffc2684>
  103008:	d9402d17 	ldw	r5,180(sp)
  10300c:	d9801e04 	addi	r6,sp,120
  103010:	9809883a 	mov	r4,r19
  103014:	010f4080 	call	10f408 <__ssprint_r>
  103018:	103c6e1e 	bne	r2,zero,1021d4 <__alt_data_end+0xfffc21d4>
  10301c:	d8c02017 	ldw	r3,128(sp)
  103020:	da000404 	addi	r8,sp,16
  103024:	003da506 	br	1026bc <__alt_data_end+0xfffc26bc>
  103028:	d9402a17 	ldw	r5,168(sp)
  10302c:	d8002785 	stb	zero,158(sp)
  103030:	283f0816 	blt	r5,zero,102c54 <__alt_data_end+0xfffc2c54>
  103034:	00ffdfc4 	movi	r3,-129
  103038:	a584b03a 	or	r2,r20,r22
  10303c:	90e4703a 	and	r18,r18,r3
  103040:	103c5126 	beq	r2,zero,102188 <__alt_data_end+0xfffc2188>
  103044:	0039883a 	mov	fp,zero
  103048:	003e5a06 	br	1029b4 <__alt_data_end+0xfffc29b4>
  10304c:	9080040c 	andi	r2,r18,16
  103050:	10013d26 	beq	r2,zero,103548 <___svfprintf_internal_r+0x1710>
  103054:	d8c02e17 	ldw	r3,184(sp)
  103058:	d9002a17 	ldw	r4,168(sp)
  10305c:	d8002785 	stb	zero,158(sp)
  103060:	18800104 	addi	r2,r3,4
  103064:	1d000017 	ldw	r20,0(r3)
  103068:	002d883a 	mov	r22,zero
  10306c:	20013f16 	blt	r4,zero,10356c <___svfprintf_internal_r+0x1734>
  103070:	00ffdfc4 	movi	r3,-129
  103074:	d8802e15 	stw	r2,184(sp)
  103078:	90e4703a 	and	r18,r18,r3
  10307c:	a03d0926 	beq	r20,zero,1024a4 <__alt_data_end+0xfffc24a4>
  103080:	0039883a 	mov	fp,zero
  103084:	003d0c06 	br	1024b8 <__alt_data_end+0xfffc24b8>
  103088:	dc402617 	ldw	r17,152(sp)
  10308c:	0441830e 	bge	zero,r17,10369c <___svfprintf_internal_r+0x1864>
  103090:	dc403217 	ldw	r17,200(sp)
  103094:	d8803317 	ldw	r2,204(sp)
  103098:	1440010e 	bge	r2,r17,1030a0 <___svfprintf_internal_r+0x1268>
  10309c:	1023883a 	mov	r17,r2
  1030a0:	04400a0e 	bge	zero,r17,1030cc <___svfprintf_internal_r+0x1294>
  1030a4:	d8801f17 	ldw	r2,124(sp)
  1030a8:	1c47883a 	add	r3,r3,r17
  1030ac:	44000015 	stw	r16,0(r8)
  1030b0:	10800044 	addi	r2,r2,1
  1030b4:	44400115 	stw	r17,4(r8)
  1030b8:	d8c02015 	stw	r3,128(sp)
  1030bc:	d8801f15 	stw	r2,124(sp)
  1030c0:	010001c4 	movi	r4,7
  1030c4:	20827516 	blt	r4,r2,103a9c <___svfprintf_internal_r+0x1c64>
  1030c8:	42000204 	addi	r8,r8,8
  1030cc:	88027b16 	blt	r17,zero,103abc <___svfprintf_internal_r+0x1c84>
  1030d0:	d9003217 	ldw	r4,200(sp)
  1030d4:	2463c83a 	sub	r17,r4,r17
  1030d8:	0440990e 	bge	zero,r17,103340 <___svfprintf_internal_r+0x1508>
  1030dc:	05800404 	movi	r22,16
  1030e0:	d8801f17 	ldw	r2,124(sp)
  1030e4:	b441530e 	bge	r22,r17,103634 <___svfprintf_internal_r+0x17fc>
  1030e8:	010004b4 	movhi	r4,18
  1030ec:	210c9784 	addi	r4,r4,12894
  1030f0:	d9002c15 	stw	r4,176(sp)
  1030f4:	070001c4 	movi	fp,7
  1030f8:	dd002d17 	ldw	r20,180(sp)
  1030fc:	00000306 	br	10310c <___svfprintf_internal_r+0x12d4>
  103100:	42000204 	addi	r8,r8,8
  103104:	8c7ffc04 	addi	r17,r17,-16
  103108:	b4414d0e 	bge	r22,r17,103640 <___svfprintf_internal_r+0x1808>
  10310c:	18c00404 	addi	r3,r3,16
  103110:	10800044 	addi	r2,r2,1
  103114:	45400015 	stw	r21,0(r8)
  103118:	45800115 	stw	r22,4(r8)
  10311c:	d8c02015 	stw	r3,128(sp)
  103120:	d8801f15 	stw	r2,124(sp)
  103124:	e0bff60e 	bge	fp,r2,103100 <__alt_data_end+0xfffc3100>
  103128:	d9801e04 	addi	r6,sp,120
  10312c:	a00b883a 	mov	r5,r20
  103130:	9809883a 	mov	r4,r19
  103134:	010f4080 	call	10f408 <__ssprint_r>
  103138:	103c261e 	bne	r2,zero,1021d4 <__alt_data_end+0xfffc21d4>
  10313c:	d8c02017 	ldw	r3,128(sp)
  103140:	d8801f17 	ldw	r2,124(sp)
  103144:	da000404 	addi	r8,sp,16
  103148:	003fee06 	br	103104 <__alt_data_end+0xfffc3104>
  10314c:	d9402d17 	ldw	r5,180(sp)
  103150:	d9801e04 	addi	r6,sp,120
  103154:	9809883a 	mov	r4,r19
  103158:	010f4080 	call	10f408 <__ssprint_r>
  10315c:	103c1d1e 	bne	r2,zero,1021d4 <__alt_data_end+0xfffc21d4>
  103160:	d8c02017 	ldw	r3,128(sp)
  103164:	df002787 	ldb	fp,158(sp)
  103168:	da000404 	addi	r8,sp,16
  10316c:	003d3806 	br	102650 <__alt_data_end+0xfffc2650>
  103170:	9080040c 	andi	r2,r18,16
  103174:	10005c26 	beq	r2,zero,1032e8 <___svfprintf_internal_r+0x14b0>
  103178:	d8c02e17 	ldw	r3,184(sp)
  10317c:	d9002a17 	ldw	r4,168(sp)
  103180:	d8002785 	stb	zero,158(sp)
  103184:	18800104 	addi	r2,r3,4
  103188:	1d000017 	ldw	r20,0(r3)
  10318c:	002d883a 	mov	r22,zero
  103190:	20005e16 	blt	r4,zero,10330c <___svfprintf_internal_r+0x14d4>
  103194:	00ffdfc4 	movi	r3,-129
  103198:	d8802e15 	stw	r2,184(sp)
  10319c:	90e4703a 	and	r18,r18,r3
  1031a0:	0039883a 	mov	fp,zero
  1031a4:	a03ddf26 	beq	r20,zero,102924 <__alt_data_end+0xfffc2924>
  1031a8:	00800244 	movi	r2,9
  1031ac:	153c8e36 	bltu	r2,r20,1023e8 <__alt_data_end+0xfffc23e8>
  1031b0:	a5000c04 	addi	r20,r20,48
  1031b4:	dc001dc4 	addi	r16,sp,119
  1031b8:	dd001dc5 	stb	r20,119(sp)
  1031bc:	d8c02817 	ldw	r3,160(sp)
  1031c0:	1c07c83a 	sub	r3,r3,r16
  1031c4:	d8c02b15 	stw	r3,172(sp)
  1031c8:	003cd306 	br	102518 <__alt_data_end+0xfffc2518>
  1031cc:	d8803317 	ldw	r2,204(sp)
  1031d0:	143fffc4 	addi	r16,r2,-1
  1031d4:	043f560e 	bge	zero,r16,102f30 <__alt_data_end+0xfffc2f30>
  1031d8:	07000404 	movi	fp,16
  1031dc:	e403530e 	bge	fp,r16,103f2c <___svfprintf_internal_r+0x20f4>
  1031e0:	014004b4 	movhi	r5,18
  1031e4:	294c9784 	addi	r5,r5,12894
  1031e8:	d9402c15 	stw	r5,176(sp)
  1031ec:	01c001c4 	movi	r7,7
  1031f0:	dd002d17 	ldw	r20,180(sp)
  1031f4:	00000306 	br	103204 <___svfprintf_internal_r+0x13cc>
  1031f8:	843ffc04 	addi	r16,r16,-16
  1031fc:	b5800204 	addi	r22,r22,8
  103200:	e400130e 	bge	fp,r16,103250 <___svfprintf_internal_r+0x1418>
  103204:	18c00404 	addi	r3,r3,16
  103208:	8c400044 	addi	r17,r17,1
  10320c:	b5400015 	stw	r21,0(r22)
  103210:	b7000115 	stw	fp,4(r22)
  103214:	d8c02015 	stw	r3,128(sp)
  103218:	dc401f15 	stw	r17,124(sp)
  10321c:	3c7ff60e 	bge	r7,r17,1031f8 <__alt_data_end+0xfffc31f8>
  103220:	d9801e04 	addi	r6,sp,120
  103224:	a00b883a 	mov	r5,r20
  103228:	9809883a 	mov	r4,r19
  10322c:	d9c03d15 	stw	r7,244(sp)
  103230:	010f4080 	call	10f408 <__ssprint_r>
  103234:	d9c03d17 	ldw	r7,244(sp)
  103238:	103be61e 	bne	r2,zero,1021d4 <__alt_data_end+0xfffc21d4>
  10323c:	843ffc04 	addi	r16,r16,-16
  103240:	d8c02017 	ldw	r3,128(sp)
  103244:	dc401f17 	ldw	r17,124(sp)
  103248:	dd800404 	addi	r22,sp,16
  10324c:	e43fed16 	blt	fp,r16,103204 <__alt_data_end+0xfffc3204>
  103250:	d8802c17 	ldw	r2,176(sp)
  103254:	1c07883a 	add	r3,r3,r16
  103258:	8c400044 	addi	r17,r17,1
  10325c:	b0800015 	stw	r2,0(r22)
  103260:	b4000115 	stw	r16,4(r22)
  103264:	d8c02015 	stw	r3,128(sp)
  103268:	dc401f15 	stw	r17,124(sp)
  10326c:	008001c4 	movi	r2,7
  103270:	147f2e0e 	bge	r2,r17,102f2c <__alt_data_end+0xfffc2f2c>
  103274:	d9402d17 	ldw	r5,180(sp)
  103278:	d9801e04 	addi	r6,sp,120
  10327c:	9809883a 	mov	r4,r19
  103280:	010f4080 	call	10f408 <__ssprint_r>
  103284:	103bd31e 	bne	r2,zero,1021d4 <__alt_data_end+0xfffc21d4>
  103288:	d8c02017 	ldw	r3,128(sp)
  10328c:	dc401f17 	ldw	r17,124(sp)
  103290:	dd800404 	addi	r22,sp,16
  103294:	003f2606 	br	102f30 <__alt_data_end+0xfffc2f30>
  103298:	9080040c 	andi	r2,r18,16
  10329c:	1000c326 	beq	r2,zero,1035ac <___svfprintf_internal_r+0x1774>
  1032a0:	d9402e17 	ldw	r5,184(sp)
  1032a4:	2d000017 	ldw	r20,0(r5)
  1032a8:	29400104 	addi	r5,r5,4
  1032ac:	d9402e15 	stw	r5,184(sp)
  1032b0:	a02dd7fa 	srai	r22,r20,31
  1032b4:	b005883a 	mov	r2,r22
  1032b8:	103c430e 	bge	r2,zero,1023c8 <__alt_data_end+0xfffc23c8>
  1032bc:	d9402a17 	ldw	r5,168(sp)
  1032c0:	0529c83a 	sub	r20,zero,r20
  1032c4:	07000b44 	movi	fp,45
  1032c8:	a004c03a 	cmpne	r2,r20,zero
  1032cc:	05adc83a 	sub	r22,zero,r22
  1032d0:	df002785 	stb	fp,158(sp)
  1032d4:	b0adc83a 	sub	r22,r22,r2
  1032d8:	28022e16 	blt	r5,zero,103b94 <___svfprintf_internal_r+0x1d5c>
  1032dc:	00bfdfc4 	movi	r2,-129
  1032e0:	90a4703a 	and	r18,r18,r2
  1032e4:	003c3f06 	br	1023e4 <__alt_data_end+0xfffc23e4>
  1032e8:	9080100c 	andi	r2,r18,64
  1032ec:	d8002785 	stb	zero,158(sp)
  1032f0:	10012526 	beq	r2,zero,103788 <___svfprintf_internal_r+0x1950>
  1032f4:	d9402e17 	ldw	r5,184(sp)
  1032f8:	d8c02a17 	ldw	r3,168(sp)
  1032fc:	002d883a 	mov	r22,zero
  103300:	28800104 	addi	r2,r5,4
  103304:	2d00000b 	ldhu	r20,0(r5)
  103308:	183fa20e 	bge	r3,zero,103194 <__alt_data_end+0xfffc3194>
  10330c:	d8802e15 	stw	r2,184(sp)
  103310:	0039883a 	mov	fp,zero
  103314:	a584b03a 	or	r2,r20,r22
  103318:	103c321e 	bne	r2,zero,1023e4 <__alt_data_end+0xfffc23e4>
  10331c:	00800044 	movi	r2,1
  103320:	003e5006 	br	102c64 <__alt_data_end+0xfffc2c64>
  103324:	d9402d17 	ldw	r5,180(sp)
  103328:	d9801e04 	addi	r6,sp,120
  10332c:	9809883a 	mov	r4,r19
  103330:	010f4080 	call	10f408 <__ssprint_r>
  103334:	103ba71e 	bne	r2,zero,1021d4 <__alt_data_end+0xfffc21d4>
  103338:	d8c02017 	ldw	r3,128(sp)
  10333c:	da000404 	addi	r8,sp,16
  103340:	d9003217 	ldw	r4,200(sp)
  103344:	d8802617 	ldw	r2,152(sp)
  103348:	d9403317 	ldw	r5,204(sp)
  10334c:	8123883a 	add	r17,r16,r4
  103350:	11400216 	blt	r2,r5,10335c <___svfprintf_internal_r+0x1524>
  103354:	9100004c 	andi	r4,r18,1
  103358:	20000d26 	beq	r4,zero,103390 <___svfprintf_internal_r+0x1558>
  10335c:	d9003817 	ldw	r4,224(sp)
  103360:	d9403417 	ldw	r5,208(sp)
  103364:	1907883a 	add	r3,r3,r4
  103368:	d9001f17 	ldw	r4,124(sp)
  10336c:	41400015 	stw	r5,0(r8)
  103370:	d9403817 	ldw	r5,224(sp)
  103374:	21000044 	addi	r4,r4,1
  103378:	d8c02015 	stw	r3,128(sp)
  10337c:	41400115 	stw	r5,4(r8)
  103380:	d9001f15 	stw	r4,124(sp)
  103384:	014001c4 	movi	r5,7
  103388:	2901dc16 	blt	r5,r4,103afc <___svfprintf_internal_r+0x1cc4>
  10338c:	42000204 	addi	r8,r8,8
  103390:	d9003317 	ldw	r4,204(sp)
  103394:	8121883a 	add	r16,r16,r4
  103398:	2085c83a 	sub	r2,r4,r2
  10339c:	8461c83a 	sub	r16,r16,r17
  1033a0:	1400010e 	bge	r2,r16,1033a8 <___svfprintf_internal_r+0x1570>
  1033a4:	1021883a 	mov	r16,r2
  1033a8:	04000a0e 	bge	zero,r16,1033d4 <___svfprintf_internal_r+0x159c>
  1033ac:	d9001f17 	ldw	r4,124(sp)
  1033b0:	1c07883a 	add	r3,r3,r16
  1033b4:	44400015 	stw	r17,0(r8)
  1033b8:	21000044 	addi	r4,r4,1
  1033bc:	44000115 	stw	r16,4(r8)
  1033c0:	d8c02015 	stw	r3,128(sp)
  1033c4:	d9001f15 	stw	r4,124(sp)
  1033c8:	014001c4 	movi	r5,7
  1033cc:	2901e616 	blt	r5,r4,103b68 <___svfprintf_internal_r+0x1d30>
  1033d0:	42000204 	addi	r8,r8,8
  1033d4:	8001f616 	blt	r16,zero,103bb0 <___svfprintf_internal_r+0x1d78>
  1033d8:	1421c83a 	sub	r16,r2,r16
  1033dc:	043cfa0e 	bge	zero,r16,1027c8 <__alt_data_end+0xfffc27c8>
  1033e0:	04400404 	movi	r17,16
  1033e4:	d8801f17 	ldw	r2,124(sp)
  1033e8:	8c3edd0e 	bge	r17,r16,102f60 <__alt_data_end+0xfffc2f60>
  1033ec:	014004b4 	movhi	r5,18
  1033f0:	294c9784 	addi	r5,r5,12894
  1033f4:	d9402c15 	stw	r5,176(sp)
  1033f8:	058001c4 	movi	r22,7
  1033fc:	dd002d17 	ldw	r20,180(sp)
  103400:	00000306 	br	103410 <___svfprintf_internal_r+0x15d8>
  103404:	42000204 	addi	r8,r8,8
  103408:	843ffc04 	addi	r16,r16,-16
  10340c:	8c3ed70e 	bge	r17,r16,102f6c <__alt_data_end+0xfffc2f6c>
  103410:	18c00404 	addi	r3,r3,16
  103414:	10800044 	addi	r2,r2,1
  103418:	45400015 	stw	r21,0(r8)
  10341c:	44400115 	stw	r17,4(r8)
  103420:	d8c02015 	stw	r3,128(sp)
  103424:	d8801f15 	stw	r2,124(sp)
  103428:	b0bff60e 	bge	r22,r2,103404 <__alt_data_end+0xfffc3404>
  10342c:	d9801e04 	addi	r6,sp,120
  103430:	a00b883a 	mov	r5,r20
  103434:	9809883a 	mov	r4,r19
  103438:	010f4080 	call	10f408 <__ssprint_r>
  10343c:	103b651e 	bne	r2,zero,1021d4 <__alt_data_end+0xfffc21d4>
  103440:	d8c02017 	ldw	r3,128(sp)
  103444:	d8801f17 	ldw	r2,124(sp)
  103448:	da000404 	addi	r8,sp,16
  10344c:	003fee06 	br	103408 <__alt_data_end+0xfffc3408>
  103450:	9088703a 	and	r4,r18,r2
  103454:	203e8d1e 	bne	r4,zero,102e8c <__alt_data_end+0xfffc2e8c>
  103458:	dc401f17 	ldw	r17,124(sp)
  10345c:	40800115 	stw	r2,4(r8)
  103460:	44000015 	stw	r16,0(r8)
  103464:	8c400044 	addi	r17,r17,1
  103468:	d8c02015 	stw	r3,128(sp)
  10346c:	dc401f15 	stw	r17,124(sp)
  103470:	008001c4 	movi	r2,7
  103474:	147f7f16 	blt	r2,r17,103274 <__alt_data_end+0xfffc3274>
  103478:	45800204 	addi	r22,r8,8
  10347c:	003eac06 	br	102f30 <__alt_data_end+0xfffc2f30>
  103480:	d9402d17 	ldw	r5,180(sp)
  103484:	d9801e04 	addi	r6,sp,120
  103488:	9809883a 	mov	r4,r19
  10348c:	010f4080 	call	10f408 <__ssprint_r>
  103490:	103b501e 	bne	r2,zero,1021d4 <__alt_data_end+0xfffc21d4>
  103494:	d8c02017 	ldw	r3,128(sp)
  103498:	dc401f17 	ldw	r17,124(sp)
  10349c:	da000404 	addi	r8,sp,16
  1034a0:	003e8406 	br	102eb4 <__alt_data_end+0xfffc2eb4>
  1034a4:	d9402d17 	ldw	r5,180(sp)
  1034a8:	d9801e04 	addi	r6,sp,120
  1034ac:	9809883a 	mov	r4,r19
  1034b0:	010f4080 	call	10f408 <__ssprint_r>
  1034b4:	103b471e 	bne	r2,zero,1021d4 <__alt_data_end+0xfffc21d4>
  1034b8:	d8c02017 	ldw	r3,128(sp)
  1034bc:	dc401f17 	ldw	r17,124(sp)
  1034c0:	dd800404 	addi	r22,sp,16
  1034c4:	003e8606 	br	102ee0 <__alt_data_end+0xfffc2ee0>
  1034c8:	0029883a 	mov	r20,zero
  1034cc:	a5000c04 	addi	r20,r20,48
  1034d0:	dc001dc4 	addi	r16,sp,119
  1034d4:	dd001dc5 	stb	r20,119(sp)
  1034d8:	003f3806 	br	1031bc <__alt_data_end+0xfffc31bc>
  1034dc:	d9402d17 	ldw	r5,180(sp)
  1034e0:	d9801e04 	addi	r6,sp,120
  1034e4:	9809883a 	mov	r4,r19
  1034e8:	010f4080 	call	10f408 <__ssprint_r>
  1034ec:	103b391e 	bne	r2,zero,1021d4 <__alt_data_end+0xfffc21d4>
  1034f0:	d8c02017 	ldw	r3,128(sp)
  1034f4:	da000404 	addi	r8,sp,16
  1034f8:	003c7306 	br	1026c8 <__alt_data_end+0xfffc26c8>
  1034fc:	d9003617 	ldw	r4,216(sp)
  103500:	d9403717 	ldw	r5,220(sp)
  103504:	da003e15 	stw	r8,248(sp)
  103508:	010cfdc0 	call	10cfdc <__fpclassifyd>
  10350c:	da003e17 	ldw	r8,248(sp)
  103510:	1000bd1e 	bne	r2,zero,103808 <___svfprintf_internal_r+0x19d0>
  103514:	008011c4 	movi	r2,71
  103518:	14411e0e 	bge	r2,r17,103994 <___svfprintf_internal_r+0x1b5c>
  10351c:	040004b4 	movhi	r16,18
  103520:	840c8a04 	addi	r16,r16,12840
  103524:	00c000c4 	movi	r3,3
  103528:	00bfdfc4 	movi	r2,-129
  10352c:	d8c02915 	stw	r3,164(sp)
  103530:	90a4703a 	and	r18,r18,r2
  103534:	df002783 	ldbu	fp,158(sp)
  103538:	d8c02b15 	stw	r3,172(sp)
  10353c:	d8002a15 	stw	zero,168(sp)
  103540:	d8003215 	stw	zero,200(sp)
  103544:	003bfa06 	br	102530 <__alt_data_end+0xfffc2530>
  103548:	9080100c 	andi	r2,r18,64
  10354c:	d8002785 	stb	zero,158(sp)
  103550:	10009426 	beq	r2,zero,1037a4 <___svfprintf_internal_r+0x196c>
  103554:	d9402e17 	ldw	r5,184(sp)
  103558:	d8c02a17 	ldw	r3,168(sp)
  10355c:	002d883a 	mov	r22,zero
  103560:	28800104 	addi	r2,r5,4
  103564:	2d00000b 	ldhu	r20,0(r5)
  103568:	183ec10e 	bge	r3,zero,103070 <__alt_data_end+0xfffc3070>
  10356c:	a586b03a 	or	r3,r20,r22
  103570:	d8802e15 	stw	r2,184(sp)
  103574:	183ec21e 	bne	r3,zero,103080 <__alt_data_end+0xfffc3080>
  103578:	0039883a 	mov	fp,zero
  10357c:	0005883a 	mov	r2,zero
  103580:	003db806 	br	102c64 <__alt_data_end+0xfffc2c64>
  103584:	d8c02e17 	ldw	r3,184(sp)
  103588:	d9002e17 	ldw	r4,184(sp)
  10358c:	d9402e17 	ldw	r5,184(sp)
  103590:	18c00017 	ldw	r3,0(r3)
  103594:	21000117 	ldw	r4,4(r4)
  103598:	29400204 	addi	r5,r5,8
  10359c:	d8c03615 	stw	r3,216(sp)
  1035a0:	d9003715 	stw	r4,220(sp)
  1035a4:	d9402e15 	stw	r5,184(sp)
  1035a8:	003b5a06 	br	102314 <__alt_data_end+0xfffc2314>
  1035ac:	9080100c 	andi	r2,r18,64
  1035b0:	10010726 	beq	r2,zero,1039d0 <___svfprintf_internal_r+0x1b98>
  1035b4:	d8802e17 	ldw	r2,184(sp)
  1035b8:	1500000f 	ldh	r20,0(r2)
  1035bc:	10800104 	addi	r2,r2,4
  1035c0:	d8802e15 	stw	r2,184(sp)
  1035c4:	a02dd7fa 	srai	r22,r20,31
  1035c8:	b005883a 	mov	r2,r22
  1035cc:	003b7d06 	br	1023c4 <__alt_data_end+0xfffc23c4>
  1035d0:	9080100c 	andi	r2,r18,64
  1035d4:	10010526 	beq	r2,zero,1039ec <___svfprintf_internal_r+0x1bb4>
  1035d8:	d8c02e17 	ldw	r3,184(sp)
  1035dc:	002d883a 	mov	r22,zero
  1035e0:	1d00000b 	ldhu	r20,0(r3)
  1035e4:	18c00104 	addi	r3,r3,4
  1035e8:	d8c02e15 	stw	r3,184(sp)
  1035ec:	003ce206 	br	102978 <__alt_data_end+0xfffc2978>
  1035f0:	bc400007 	ldb	r17,0(r23)
  1035f4:	003a6506 	br	101f8c <__alt_data_end+0xfffc1f8c>
  1035f8:	9080040c 	andi	r2,r18,16
  1035fc:	10010126 	beq	r2,zero,103a04 <___svfprintf_internal_r+0x1bcc>
  103600:	d8c02e17 	ldw	r3,184(sp)
  103604:	d9002f17 	ldw	r4,188(sp)
  103608:	18800017 	ldw	r2,0(r3)
  10360c:	18c00104 	addi	r3,r3,4
  103610:	d8c02e15 	stw	r3,184(sp)
  103614:	11000015 	stw	r4,0(r2)
  103618:	003a3206 	br	101ee4 <__alt_data_end+0xfffc1ee4>
  10361c:	d9002a17 	ldw	r4,168(sp)
  103620:	d8002785 	stb	zero,158(sp)
  103624:	203d8d16 	blt	r4,zero,102c5c <__alt_data_end+0xfffc2c5c>
  103628:	00bfdfc4 	movi	r2,-129
  10362c:	90a4703a 	and	r18,r18,r2
  103630:	003ad506 	br	102188 <__alt_data_end+0xfffc2188>
  103634:	014004b4 	movhi	r5,18
  103638:	294c9784 	addi	r5,r5,12894
  10363c:	d9402c15 	stw	r5,176(sp)
  103640:	d9402c17 	ldw	r5,176(sp)
  103644:	1c47883a 	add	r3,r3,r17
  103648:	10800044 	addi	r2,r2,1
  10364c:	41400015 	stw	r5,0(r8)
  103650:	44400115 	stw	r17,4(r8)
  103654:	d8c02015 	stw	r3,128(sp)
  103658:	d8801f15 	stw	r2,124(sp)
  10365c:	010001c4 	movi	r4,7
  103660:	20bf3016 	blt	r4,r2,103324 <__alt_data_end+0xfffc3324>
  103664:	42000204 	addi	r8,r8,8
  103668:	003f3506 	br	103340 <__alt_data_end+0xfffc3340>
  10366c:	010004b4 	movhi	r4,18
  103670:	210c9784 	addi	r4,r4,12894
  103674:	d9002c15 	stw	r4,176(sp)
  103678:	003c3c06 	br	10276c <__alt_data_end+0xfffc276c>
  10367c:	d9402d17 	ldw	r5,180(sp)
  103680:	d9801e04 	addi	r6,sp,120
  103684:	9809883a 	mov	r4,r19
  103688:	010f4080 	call	10f408 <__ssprint_r>
  10368c:	103ad11e 	bne	r2,zero,1021d4 <__alt_data_end+0xfffc21d4>
  103690:	d8c02017 	ldw	r3,128(sp)
  103694:	da000404 	addi	r8,sp,16
  103698:	003d9306 	br	102ce8 <__alt_data_end+0xfffc2ce8>
  10369c:	d8801f17 	ldw	r2,124(sp)
  1036a0:	014004b4 	movhi	r5,18
  1036a4:	01000044 	movi	r4,1
  1036a8:	18c00044 	addi	r3,r3,1
  1036ac:	10800044 	addi	r2,r2,1
  1036b0:	294c9704 	addi	r5,r5,12892
  1036b4:	41000115 	stw	r4,4(r8)
  1036b8:	41400015 	stw	r5,0(r8)
  1036bc:	d8c02015 	stw	r3,128(sp)
  1036c0:	d8801f15 	stw	r2,124(sp)
  1036c4:	010001c4 	movi	r4,7
  1036c8:	2080b516 	blt	r4,r2,1039a0 <___svfprintf_internal_r+0x1b68>
  1036cc:	42000204 	addi	r8,r8,8
  1036d0:	8800041e 	bne	r17,zero,1036e4 <___svfprintf_internal_r+0x18ac>
  1036d4:	d8803317 	ldw	r2,204(sp)
  1036d8:	1000021e 	bne	r2,zero,1036e4 <___svfprintf_internal_r+0x18ac>
  1036dc:	9080004c 	andi	r2,r18,1
  1036e0:	103c3926 	beq	r2,zero,1027c8 <__alt_data_end+0xfffc27c8>
  1036e4:	d9003817 	ldw	r4,224(sp)
  1036e8:	d8801f17 	ldw	r2,124(sp)
  1036ec:	d9403417 	ldw	r5,208(sp)
  1036f0:	20c7883a 	add	r3,r4,r3
  1036f4:	10800044 	addi	r2,r2,1
  1036f8:	41000115 	stw	r4,4(r8)
  1036fc:	41400015 	stw	r5,0(r8)
  103700:	d8c02015 	stw	r3,128(sp)
  103704:	d8801f15 	stw	r2,124(sp)
  103708:	010001c4 	movi	r4,7
  10370c:	20818016 	blt	r4,r2,103d10 <___svfprintf_internal_r+0x1ed8>
  103710:	42000204 	addi	r8,r8,8
  103714:	0463c83a 	sub	r17,zero,r17
  103718:	0440cb0e 	bge	zero,r17,103a48 <___svfprintf_internal_r+0x1c10>
  10371c:	05800404 	movi	r22,16
  103720:	b440e80e 	bge	r22,r17,103ac4 <___svfprintf_internal_r+0x1c8c>
  103724:	014004b4 	movhi	r5,18
  103728:	294c9784 	addi	r5,r5,12894
  10372c:	d9402c15 	stw	r5,176(sp)
  103730:	070001c4 	movi	fp,7
  103734:	dd002d17 	ldw	r20,180(sp)
  103738:	00000306 	br	103748 <___svfprintf_internal_r+0x1910>
  10373c:	42000204 	addi	r8,r8,8
  103740:	8c7ffc04 	addi	r17,r17,-16
  103744:	b440e20e 	bge	r22,r17,103ad0 <___svfprintf_internal_r+0x1c98>
  103748:	18c00404 	addi	r3,r3,16
  10374c:	10800044 	addi	r2,r2,1
  103750:	45400015 	stw	r21,0(r8)
  103754:	45800115 	stw	r22,4(r8)
  103758:	d8c02015 	stw	r3,128(sp)
  10375c:	d8801f15 	stw	r2,124(sp)
  103760:	e0bff60e 	bge	fp,r2,10373c <__alt_data_end+0xfffc373c>
  103764:	d9801e04 	addi	r6,sp,120
  103768:	a00b883a 	mov	r5,r20
  10376c:	9809883a 	mov	r4,r19
  103770:	010f4080 	call	10f408 <__ssprint_r>
  103774:	103a971e 	bne	r2,zero,1021d4 <__alt_data_end+0xfffc21d4>
  103778:	d8c02017 	ldw	r3,128(sp)
  10377c:	d8801f17 	ldw	r2,124(sp)
  103780:	da000404 	addi	r8,sp,16
  103784:	003fee06 	br	103740 <__alt_data_end+0xfffc3740>
  103788:	d9002e17 	ldw	r4,184(sp)
  10378c:	d9402a17 	ldw	r5,168(sp)
  103790:	002d883a 	mov	r22,zero
  103794:	20800104 	addi	r2,r4,4
  103798:	25000017 	ldw	r20,0(r4)
  10379c:	283e7d0e 	bge	r5,zero,103194 <__alt_data_end+0xfffc3194>
  1037a0:	003eda06 	br	10330c <__alt_data_end+0xfffc330c>
  1037a4:	d9002e17 	ldw	r4,184(sp)
  1037a8:	d9402a17 	ldw	r5,168(sp)
  1037ac:	002d883a 	mov	r22,zero
  1037b0:	20800104 	addi	r2,r4,4
  1037b4:	25000017 	ldw	r20,0(r4)
  1037b8:	283e2d0e 	bge	r5,zero,103070 <__alt_data_end+0xfffc3070>
  1037bc:	003f6b06 	br	10356c <__alt_data_end+0xfffc356c>
  1037c0:	d8c02e15 	stw	r3,184(sp)
  1037c4:	0039883a 	mov	fp,zero
  1037c8:	003ed206 	br	103314 <__alt_data_end+0xfffc3314>
  1037cc:	bc400043 	ldbu	r17,1(r23)
  1037d0:	84000814 	ori	r16,r16,32
  1037d4:	bdc00044 	addi	r23,r23,1
  1037d8:	8c403fcc 	andi	r17,r17,255
  1037dc:	8c40201c 	xori	r17,r17,128
  1037e0:	8c7fe004 	addi	r17,r17,-128
  1037e4:	0039e906 	br	101f8c <__alt_data_end+0xfffc1f8c>
  1037e8:	d9402d17 	ldw	r5,180(sp)
  1037ec:	d9801e04 	addi	r6,sp,120
  1037f0:	9809883a 	mov	r4,r19
  1037f4:	010f4080 	call	10f408 <__ssprint_r>
  1037f8:	103a761e 	bne	r2,zero,1021d4 <__alt_data_end+0xfffc21d4>
  1037fc:	d8c02017 	ldw	r3,128(sp)
  103800:	da000404 	addi	r8,sp,16
  103804:	003d4a06 	br	102d30 <__alt_data_end+0xfffc2d30>
  103808:	d9002a17 	ldw	r4,168(sp)
  10380c:	05bff7c4 	movi	r22,-33
  103810:	00bfffc4 	movi	r2,-1
  103814:	8dac703a 	and	r22,r17,r22
  103818:	20806a26 	beq	r4,r2,1039c4 <___svfprintf_internal_r+0x1b8c>
  10381c:	008011c4 	movi	r2,71
  103820:	b0813726 	beq	r22,r2,103d00 <___svfprintf_internal_r+0x1ec8>
  103824:	d9003717 	ldw	r4,220(sp)
  103828:	90c04014 	ori	r3,r18,256
  10382c:	d8c02c15 	stw	r3,176(sp)
  103830:	20015d16 	blt	r4,zero,103da8 <___svfprintf_internal_r+0x1f70>
  103834:	dd003717 	ldw	r20,220(sp)
  103838:	d8002905 	stb	zero,164(sp)
  10383c:	00801984 	movi	r2,102
  103840:	88814026 	beq	r17,r2,103d44 <___svfprintf_internal_r+0x1f0c>
  103844:	00801184 	movi	r2,70
  103848:	88817126 	beq	r17,r2,103e10 <___svfprintf_internal_r+0x1fd8>
  10384c:	00801144 	movi	r2,69
  103850:	b0816226 	beq	r22,r2,103ddc <___svfprintf_internal_r+0x1fa4>
  103854:	d8c02a17 	ldw	r3,168(sp)
  103858:	d8802104 	addi	r2,sp,132
  10385c:	d8800315 	stw	r2,12(sp)
  103860:	d9403617 	ldw	r5,216(sp)
  103864:	d8802504 	addi	r2,sp,148
  103868:	d8800215 	stw	r2,8(sp)
  10386c:	d8802604 	addi	r2,sp,152
  103870:	d8c00015 	stw	r3,0(sp)
  103874:	d8800115 	stw	r2,4(sp)
  103878:	01c00084 	movi	r7,2
  10387c:	a00d883a 	mov	r6,r20
  103880:	9809883a 	mov	r4,r19
  103884:	d8c03d15 	stw	r3,244(sp)
  103888:	da003e15 	stw	r8,248(sp)
  10388c:	01082640 	call	108264 <_dtoa_r>
  103890:	1021883a 	mov	r16,r2
  103894:	008019c4 	movi	r2,103
  103898:	d8c03d17 	ldw	r3,244(sp)
  10389c:	da003e17 	ldw	r8,248(sp)
  1038a0:	8880e726 	beq	r17,r2,103c40 <___svfprintf_internal_r+0x1e08>
  1038a4:	008011c4 	movi	r2,71
  1038a8:	8880d426 	beq	r17,r2,103bfc <___svfprintf_internal_r+0x1dc4>
  1038ac:	80f9883a 	add	fp,r16,r3
  1038b0:	d9003617 	ldw	r4,216(sp)
  1038b4:	000d883a 	mov	r6,zero
  1038b8:	000f883a 	mov	r7,zero
  1038bc:	a00b883a 	mov	r5,r20
  1038c0:	da003e15 	stw	r8,248(sp)
  1038c4:	0116e9c0 	call	116e9c <__eqdf2>
  1038c8:	da003e17 	ldw	r8,248(sp)
  1038cc:	1000e426 	beq	r2,zero,103c60 <___svfprintf_internal_r+0x1e28>
  1038d0:	d8802117 	ldw	r2,132(sp)
  1038d4:	1700062e 	bgeu	r2,fp,1038f0 <___svfprintf_internal_r+0x1ab8>
  1038d8:	01000c04 	movi	r4,48
  1038dc:	10c00044 	addi	r3,r2,1
  1038e0:	d8c02115 	stw	r3,132(sp)
  1038e4:	11000005 	stb	r4,0(r2)
  1038e8:	d8802117 	ldw	r2,132(sp)
  1038ec:	173ffb36 	bltu	r2,fp,1038dc <__alt_data_end+0xfffc38dc>
  1038f0:	1405c83a 	sub	r2,r2,r16
  1038f4:	d8803315 	stw	r2,204(sp)
  1038f8:	008011c4 	movi	r2,71
  1038fc:	b080c526 	beq	r22,r2,103c14 <___svfprintf_internal_r+0x1ddc>
  103900:	00801944 	movi	r2,101
  103904:	1441d80e 	bge	r2,r17,104068 <___svfprintf_internal_r+0x2230>
  103908:	d8c02617 	ldw	r3,152(sp)
  10390c:	00801984 	movi	r2,102
  103910:	d8c03215 	stw	r3,200(sp)
  103914:	88813426 	beq	r17,r2,103de8 <___svfprintf_internal_r+0x1fb0>
  103918:	d8c03217 	ldw	r3,200(sp)
  10391c:	d9003317 	ldw	r4,204(sp)
  103920:	19012516 	blt	r3,r4,103db8 <___svfprintf_internal_r+0x1f80>
  103924:	9480004c 	andi	r18,r18,1
  103928:	9001841e 	bne	r18,zero,103f3c <___svfprintf_internal_r+0x2104>
  10392c:	1805883a 	mov	r2,r3
  103930:	1801cb16 	blt	r3,zero,104060 <___svfprintf_internal_r+0x2228>
  103934:	d8c03217 	ldw	r3,200(sp)
  103938:	044019c4 	movi	r17,103
  10393c:	d8c02b15 	stw	r3,172(sp)
  103940:	df002907 	ldb	fp,164(sp)
  103944:	e000a61e 	bne	fp,zero,103be0 <___svfprintf_internal_r+0x1da8>
  103948:	df002783 	ldbu	fp,158(sp)
  10394c:	d8802915 	stw	r2,164(sp)
  103950:	dc802c17 	ldw	r18,176(sp)
  103954:	d8002a15 	stw	zero,168(sp)
  103958:	003af506 	br	102530 <__alt_data_end+0xfffc2530>
  10395c:	040004b4 	movhi	r16,18
  103960:	840c8704 	addi	r16,r16,12828
  103964:	003a7e06 	br	102360 <__alt_data_end+0xfffc2360>
  103968:	d9003917 	ldw	r4,228(sp)
  10396c:	04001004 	movi	r16,64
  103970:	800b883a 	mov	r5,r16
  103974:	010acf00 	call	10acf0 <_malloc_r>
  103978:	d9002d17 	ldw	r4,180(sp)
  10397c:	20800015 	stw	r2,0(r4)
  103980:	20800415 	stw	r2,16(r4)
  103984:	1001d026 	beq	r2,zero,1040c8 <___svfprintf_internal_r+0x2290>
  103988:	d8802d17 	ldw	r2,180(sp)
  10398c:	14000515 	stw	r16,20(r2)
  103990:	00394406 	br	101ea4 <__alt_data_end+0xfffc1ea4>
  103994:	040004b4 	movhi	r16,18
  103998:	840c8904 	addi	r16,r16,12836
  10399c:	003ee106 	br	103524 <__alt_data_end+0xfffc3524>
  1039a0:	d9402d17 	ldw	r5,180(sp)
  1039a4:	d9801e04 	addi	r6,sp,120
  1039a8:	9809883a 	mov	r4,r19
  1039ac:	010f4080 	call	10f408 <__ssprint_r>
  1039b0:	103a081e 	bne	r2,zero,1021d4 <__alt_data_end+0xfffc21d4>
  1039b4:	dc402617 	ldw	r17,152(sp)
  1039b8:	d8c02017 	ldw	r3,128(sp)
  1039bc:	da000404 	addi	r8,sp,16
  1039c0:	003f4306 	br	1036d0 <__alt_data_end+0xfffc36d0>
  1039c4:	01400184 	movi	r5,6
  1039c8:	d9402a15 	stw	r5,168(sp)
  1039cc:	003f9506 	br	103824 <__alt_data_end+0xfffc3824>
  1039d0:	d8c02e17 	ldw	r3,184(sp)
  1039d4:	1d000017 	ldw	r20,0(r3)
  1039d8:	18c00104 	addi	r3,r3,4
  1039dc:	d8c02e15 	stw	r3,184(sp)
  1039e0:	a02dd7fa 	srai	r22,r20,31
  1039e4:	b005883a 	mov	r2,r22
  1039e8:	003a7606 	br	1023c4 <__alt_data_end+0xfffc23c4>
  1039ec:	d9002e17 	ldw	r4,184(sp)
  1039f0:	002d883a 	mov	r22,zero
  1039f4:	25000017 	ldw	r20,0(r4)
  1039f8:	21000104 	addi	r4,r4,4
  1039fc:	d9002e15 	stw	r4,184(sp)
  103a00:	003bdd06 	br	102978 <__alt_data_end+0xfffc2978>
  103a04:	9480100c 	andi	r18,r18,64
  103a08:	90006e26 	beq	r18,zero,103bc4 <___svfprintf_internal_r+0x1d8c>
  103a0c:	d9402e17 	ldw	r5,184(sp)
  103a10:	d8c02f17 	ldw	r3,188(sp)
  103a14:	28800017 	ldw	r2,0(r5)
  103a18:	29400104 	addi	r5,r5,4
  103a1c:	d9402e15 	stw	r5,184(sp)
  103a20:	10c0000d 	sth	r3,0(r2)
  103a24:	00392f06 	br	101ee4 <__alt_data_end+0xfffc1ee4>
  103a28:	d9402d17 	ldw	r5,180(sp)
  103a2c:	d9801e04 	addi	r6,sp,120
  103a30:	9809883a 	mov	r4,r19
  103a34:	010f4080 	call	10f408 <__ssprint_r>
  103a38:	1039e61e 	bne	r2,zero,1021d4 <__alt_data_end+0xfffc21d4>
  103a3c:	d8c02017 	ldw	r3,128(sp)
  103a40:	d8801f17 	ldw	r2,124(sp)
  103a44:	da000404 	addi	r8,sp,16
  103a48:	d9403317 	ldw	r5,204(sp)
  103a4c:	10800044 	addi	r2,r2,1
  103a50:	44000015 	stw	r16,0(r8)
  103a54:	28c7883a 	add	r3,r5,r3
  103a58:	003b5506 	br	1027b0 <__alt_data_end+0xfffc27b0>
  103a5c:	8009883a 	mov	r4,r16
  103a60:	df003e15 	stw	fp,248(sp)
  103a64:	0101cfc0 	call	101cfc <strlen>
  103a68:	d8802b15 	stw	r2,172(sp)
  103a6c:	da003e17 	ldw	r8,248(sp)
  103a70:	103c160e 	bge	r2,zero,102acc <__alt_data_end+0xfffc2acc>
  103a74:	0005883a 	mov	r2,zero
  103a78:	003c1406 	br	102acc <__alt_data_end+0xfffc2acc>
  103a7c:	00bfffc4 	movi	r2,-1
  103a80:	0039d906 	br	1021e8 <__alt_data_end+0xfffc21e8>
  103a84:	010004b4 	movhi	r4,18
  103a88:	210c9b84 	addi	r4,r4,12910
  103a8c:	d9003515 	stw	r4,212(sp)
  103a90:	003ae406 	br	102624 <__alt_data_end+0xfffc2624>
  103a94:	013fffc4 	movi	r4,-1
  103a98:	0039fa06 	br	102284 <__alt_data_end+0xfffc2284>
  103a9c:	d9402d17 	ldw	r5,180(sp)
  103aa0:	d9801e04 	addi	r6,sp,120
  103aa4:	9809883a 	mov	r4,r19
  103aa8:	010f4080 	call	10f408 <__ssprint_r>
  103aac:	1039c91e 	bne	r2,zero,1021d4 <__alt_data_end+0xfffc21d4>
  103ab0:	d8c02017 	ldw	r3,128(sp)
  103ab4:	da000404 	addi	r8,sp,16
  103ab8:	003d8406 	br	1030cc <__alt_data_end+0xfffc30cc>
  103abc:	0023883a 	mov	r17,zero
  103ac0:	003d8306 	br	1030d0 <__alt_data_end+0xfffc30d0>
  103ac4:	010004b4 	movhi	r4,18
  103ac8:	210c9784 	addi	r4,r4,12894
  103acc:	d9002c15 	stw	r4,176(sp)
  103ad0:	d9002c17 	ldw	r4,176(sp)
  103ad4:	1c47883a 	add	r3,r3,r17
  103ad8:	10800044 	addi	r2,r2,1
  103adc:	41000015 	stw	r4,0(r8)
  103ae0:	44400115 	stw	r17,4(r8)
  103ae4:	d8c02015 	stw	r3,128(sp)
  103ae8:	d8801f15 	stw	r2,124(sp)
  103aec:	010001c4 	movi	r4,7
  103af0:	20bfcd16 	blt	r4,r2,103a28 <__alt_data_end+0xfffc3a28>
  103af4:	42000204 	addi	r8,r8,8
  103af8:	003fd306 	br	103a48 <__alt_data_end+0xfffc3a48>
  103afc:	d9402d17 	ldw	r5,180(sp)
  103b00:	d9801e04 	addi	r6,sp,120
  103b04:	9809883a 	mov	r4,r19
  103b08:	010f4080 	call	10f408 <__ssprint_r>
  103b0c:	1039b11e 	bne	r2,zero,1021d4 <__alt_data_end+0xfffc21d4>
  103b10:	d8802617 	ldw	r2,152(sp)
  103b14:	d8c02017 	ldw	r3,128(sp)
  103b18:	da000404 	addi	r8,sp,16
  103b1c:	003e1c06 	br	103390 <__alt_data_end+0xfffc3390>
  103b20:	d8802a17 	ldw	r2,168(sp)
  103b24:	00c00184 	movi	r3,6
  103b28:	1880012e 	bgeu	r3,r2,103b30 <___svfprintf_internal_r+0x1cf8>
  103b2c:	1805883a 	mov	r2,r3
  103b30:	d8802b15 	stw	r2,172(sp)
  103b34:	1000f316 	blt	r2,zero,103f04 <___svfprintf_internal_r+0x20cc>
  103b38:	040004b4 	movhi	r16,18
  103b3c:	d8802915 	stw	r2,164(sp)
  103b40:	dd002e15 	stw	r20,184(sp)
  103b44:	d8002a15 	stw	zero,168(sp)
  103b48:	d8003215 	stw	zero,200(sp)
  103b4c:	840c9504 	addi	r16,r16,12884
  103b50:	0039883a 	mov	fp,zero
  103b54:	003a7d06 	br	10254c <__alt_data_end+0xfffc254c>
  103b58:	010004b4 	movhi	r4,18
  103b5c:	210c9b84 	addi	r4,r4,12910
  103b60:	d9003515 	stw	r4,212(sp)
  103b64:	003b3d06 	br	10285c <__alt_data_end+0xfffc285c>
  103b68:	d9402d17 	ldw	r5,180(sp)
  103b6c:	d9801e04 	addi	r6,sp,120
  103b70:	9809883a 	mov	r4,r19
  103b74:	010f4080 	call	10f408 <__ssprint_r>
  103b78:	1039961e 	bne	r2,zero,1021d4 <__alt_data_end+0xfffc21d4>
  103b7c:	d8802617 	ldw	r2,152(sp)
  103b80:	d9403317 	ldw	r5,204(sp)
  103b84:	d8c02017 	ldw	r3,128(sp)
  103b88:	da000404 	addi	r8,sp,16
  103b8c:	2885c83a 	sub	r2,r5,r2
  103b90:	003e1006 	br	1033d4 <__alt_data_end+0xfffc33d4>
  103b94:	00800044 	movi	r2,1
  103b98:	10803fcc 	andi	r2,r2,255
  103b9c:	00c00044 	movi	r3,1
  103ba0:	10fa1026 	beq	r2,r3,1023e4 <__alt_data_end+0xfffc23e4>
  103ba4:	00c00084 	movi	r3,2
  103ba8:	10fb8226 	beq	r2,r3,1029b4 <__alt_data_end+0xfffc29b4>
  103bac:	003a4206 	br	1024b8 <__alt_data_end+0xfffc24b8>
  103bb0:	0021883a 	mov	r16,zero
  103bb4:	003e0806 	br	1033d8 <__alt_data_end+0xfffc33d8>
  103bb8:	07000b44 	movi	fp,45
  103bbc:	df002785 	stb	fp,158(sp)
  103bc0:	0039e306 	br	102350 <__alt_data_end+0xfffc2350>
  103bc4:	d9002e17 	ldw	r4,184(sp)
  103bc8:	d9402f17 	ldw	r5,188(sp)
  103bcc:	20800017 	ldw	r2,0(r4)
  103bd0:	21000104 	addi	r4,r4,4
  103bd4:	d9002e15 	stw	r4,184(sp)
  103bd8:	11400015 	stw	r5,0(r2)
  103bdc:	0038c106 	br	101ee4 <__alt_data_end+0xfffc1ee4>
  103be0:	00c00b44 	movi	r3,45
  103be4:	d8c02785 	stb	r3,158(sp)
  103be8:	d8802915 	stw	r2,164(sp)
  103bec:	dc802c17 	ldw	r18,176(sp)
  103bf0:	d8002a15 	stw	zero,168(sp)
  103bf4:	07000b44 	movi	fp,45
  103bf8:	003a5106 	br	102540 <__alt_data_end+0xfffc2540>
  103bfc:	9080004c 	andi	r2,r18,1
  103c00:	1000941e 	bne	r2,zero,103e54 <___svfprintf_internal_r+0x201c>
  103c04:	d8802117 	ldw	r2,132(sp)
  103c08:	1405c83a 	sub	r2,r2,r16
  103c0c:	d8803315 	stw	r2,204(sp)
  103c10:	b441151e 	bne	r22,r17,104068 <___svfprintf_internal_r+0x2230>
  103c14:	dd802617 	ldw	r22,152(sp)
  103c18:	00bfff44 	movi	r2,-3
  103c1c:	b0801a16 	blt	r22,r2,103c88 <___svfprintf_internal_r+0x1e50>
  103c20:	d9402a17 	ldw	r5,168(sp)
  103c24:	2d801816 	blt	r5,r22,103c88 <___svfprintf_internal_r+0x1e50>
  103c28:	dd803215 	stw	r22,200(sp)
  103c2c:	003f3a06 	br	103918 <__alt_data_end+0xfffc3918>
  103c30:	1025883a 	mov	r18,r2
  103c34:	0039883a 	mov	fp,zero
  103c38:	00800084 	movi	r2,2
  103c3c:	003fd606 	br	103b98 <__alt_data_end+0xfffc3b98>
  103c40:	9080004c 	andi	r2,r18,1
  103c44:	103f191e 	bne	r2,zero,1038ac <__alt_data_end+0xfffc38ac>
  103c48:	d8802117 	ldw	r2,132(sp)
  103c4c:	003f2806 	br	1038f0 <__alt_data_end+0xfffc38f0>
  103c50:	010004b4 	movhi	r4,18
  103c54:	210c9784 	addi	r4,r4,12894
  103c58:	d9002c15 	stw	r4,176(sp)
  103c5c:	003c7c06 	br	102e50 <__alt_data_end+0xfffc2e50>
  103c60:	e005883a 	mov	r2,fp
  103c64:	003f2206 	br	1038f0 <__alt_data_end+0xfffc38f0>
  103c68:	d9002a17 	ldw	r4,168(sp)
  103c6c:	df002783 	ldbu	fp,158(sp)
  103c70:	dd002e15 	stw	r20,184(sp)
  103c74:	d9002915 	stw	r4,164(sp)
  103c78:	d9002b15 	stw	r4,172(sp)
  103c7c:	d8002a15 	stw	zero,168(sp)
  103c80:	d8003215 	stw	zero,200(sp)
  103c84:	003a2a06 	br	102530 <__alt_data_end+0xfffc2530>
  103c88:	8c7fff84 	addi	r17,r17,-2
  103c8c:	b5bfffc4 	addi	r22,r22,-1
  103c90:	dd802615 	stw	r22,152(sp)
  103c94:	dc4022c5 	stb	r17,139(sp)
  103c98:	b000c316 	blt	r22,zero,103fa8 <___svfprintf_internal_r+0x2170>
  103c9c:	00800ac4 	movi	r2,43
  103ca0:	d8802305 	stb	r2,140(sp)
  103ca4:	00800244 	movi	r2,9
  103ca8:	15806e16 	blt	r2,r22,103e64 <___svfprintf_internal_r+0x202c>
  103cac:	00800c04 	movi	r2,48
  103cb0:	b5800c04 	addi	r22,r22,48
  103cb4:	d8802345 	stb	r2,141(sp)
  103cb8:	dd802385 	stb	r22,142(sp)
  103cbc:	d88023c4 	addi	r2,sp,143
  103cc0:	df0022c4 	addi	fp,sp,139
  103cc4:	d8c03317 	ldw	r3,204(sp)
  103cc8:	1739c83a 	sub	fp,r2,fp
  103ccc:	d9003317 	ldw	r4,204(sp)
  103cd0:	e0c7883a 	add	r3,fp,r3
  103cd4:	df003b15 	stw	fp,236(sp)
  103cd8:	d8c02b15 	stw	r3,172(sp)
  103cdc:	00800044 	movi	r2,1
  103ce0:	1100b70e 	bge	r2,r4,103fc0 <___svfprintf_internal_r+0x2188>
  103ce4:	d8c02b17 	ldw	r3,172(sp)
  103ce8:	18c00044 	addi	r3,r3,1
  103cec:	d8c02b15 	stw	r3,172(sp)
  103cf0:	1805883a 	mov	r2,r3
  103cf4:	1800b016 	blt	r3,zero,103fb8 <___svfprintf_internal_r+0x2180>
  103cf8:	d8003215 	stw	zero,200(sp)
  103cfc:	003f1006 	br	103940 <__alt_data_end+0xfffc3940>
  103d00:	d8802a17 	ldw	r2,168(sp)
  103d04:	103ec71e 	bne	r2,zero,103824 <__alt_data_end+0xfffc3824>
  103d08:	dc002a15 	stw	r16,168(sp)
  103d0c:	003ec506 	br	103824 <__alt_data_end+0xfffc3824>
  103d10:	d9402d17 	ldw	r5,180(sp)
  103d14:	d9801e04 	addi	r6,sp,120
  103d18:	9809883a 	mov	r4,r19
  103d1c:	010f4080 	call	10f408 <__ssprint_r>
  103d20:	10392c1e 	bne	r2,zero,1021d4 <__alt_data_end+0xfffc21d4>
  103d24:	dc402617 	ldw	r17,152(sp)
  103d28:	d8c02017 	ldw	r3,128(sp)
  103d2c:	d8801f17 	ldw	r2,124(sp)
  103d30:	da000404 	addi	r8,sp,16
  103d34:	003e7706 	br	103714 <__alt_data_end+0xfffc3714>
  103d38:	182f883a 	mov	r23,r3
  103d3c:	d8002a15 	stw	zero,168(sp)
  103d40:	00389306 	br	101f90 <__alt_data_end+0xfffc1f90>
  103d44:	d8c02a17 	ldw	r3,168(sp)
  103d48:	d8802104 	addi	r2,sp,132
  103d4c:	d8800315 	stw	r2,12(sp)
  103d50:	d9403617 	ldw	r5,216(sp)
  103d54:	d8802504 	addi	r2,sp,148
  103d58:	d8800215 	stw	r2,8(sp)
  103d5c:	d8802604 	addi	r2,sp,152
  103d60:	d8c00015 	stw	r3,0(sp)
  103d64:	9809883a 	mov	r4,r19
  103d68:	d8800115 	stw	r2,4(sp)
  103d6c:	01c000c4 	movi	r7,3
  103d70:	a00d883a 	mov	r6,r20
  103d74:	da003e15 	stw	r8,248(sp)
  103d78:	01082640 	call	108264 <_dtoa_r>
  103d7c:	d9002a17 	ldw	r4,168(sp)
  103d80:	da003e17 	ldw	r8,248(sp)
  103d84:	1021883a 	mov	r16,r2
  103d88:	1139883a 	add	fp,r2,r4
  103d8c:	2007883a 	mov	r3,r4
  103d90:	81000007 	ldb	r4,0(r16)
  103d94:	00800c04 	movi	r2,48
  103d98:	20806f26 	beq	r4,r2,103f58 <___svfprintf_internal_r+0x2120>
  103d9c:	d8c02617 	ldw	r3,152(sp)
  103da0:	e0f9883a 	add	fp,fp,r3
  103da4:	003ec206 	br	1038b0 <__alt_data_end+0xfffc38b0>
  103da8:	00c00b44 	movi	r3,45
  103dac:	2520003c 	xorhi	r20,r4,32768
  103db0:	d8c02905 	stb	r3,164(sp)
  103db4:	003ea106 	br	10383c <__alt_data_end+0xfffc383c>
  103db8:	d8c03217 	ldw	r3,200(sp)
  103dbc:	00c0890e 	bge	zero,r3,103fe4 <___svfprintf_internal_r+0x21ac>
  103dc0:	00800044 	movi	r2,1
  103dc4:	d9003317 	ldw	r4,204(sp)
  103dc8:	1105883a 	add	r2,r2,r4
  103dcc:	d8802b15 	stw	r2,172(sp)
  103dd0:	10005f16 	blt	r2,zero,103f50 <___svfprintf_internal_r+0x2118>
  103dd4:	044019c4 	movi	r17,103
  103dd8:	003ed906 	br	103940 <__alt_data_end+0xfffc3940>
  103ddc:	d9002a17 	ldw	r4,168(sp)
  103de0:	20c00044 	addi	r3,r4,1
  103de4:	003e9c06 	br	103858 <__alt_data_end+0xfffc3858>
  103de8:	d9002a17 	ldw	r4,168(sp)
  103dec:	00c0680e 	bge	zero,r3,103f90 <___svfprintf_internal_r+0x2158>
  103df0:	2000461e 	bne	r4,zero,103f0c <___svfprintf_internal_r+0x20d4>
  103df4:	9480004c 	andi	r18,r18,1
  103df8:	9000441e 	bne	r18,zero,103f0c <___svfprintf_internal_r+0x20d4>
  103dfc:	1805883a 	mov	r2,r3
  103e00:	1800a116 	blt	r3,zero,104088 <___svfprintf_internal_r+0x2250>
  103e04:	d8c03217 	ldw	r3,200(sp)
  103e08:	d8c02b15 	stw	r3,172(sp)
  103e0c:	003ecc06 	br	103940 <__alt_data_end+0xfffc3940>
  103e10:	d9402a17 	ldw	r5,168(sp)
  103e14:	d8802104 	addi	r2,sp,132
  103e18:	d8800315 	stw	r2,12(sp)
  103e1c:	d9400015 	stw	r5,0(sp)
  103e20:	d8802504 	addi	r2,sp,148
  103e24:	d9403617 	ldw	r5,216(sp)
  103e28:	d8800215 	stw	r2,8(sp)
  103e2c:	d8802604 	addi	r2,sp,152
  103e30:	d8800115 	stw	r2,4(sp)
  103e34:	01c000c4 	movi	r7,3
  103e38:	a00d883a 	mov	r6,r20
  103e3c:	9809883a 	mov	r4,r19
  103e40:	da003e15 	stw	r8,248(sp)
  103e44:	01082640 	call	108264 <_dtoa_r>
  103e48:	d8c02a17 	ldw	r3,168(sp)
  103e4c:	da003e17 	ldw	r8,248(sp)
  103e50:	1021883a 	mov	r16,r2
  103e54:	00801184 	movi	r2,70
  103e58:	80f9883a 	add	fp,r16,r3
  103e5c:	88bfcc26 	beq	r17,r2,103d90 <__alt_data_end+0xfffc3d90>
  103e60:	003e9306 	br	1038b0 <__alt_data_end+0xfffc38b0>
  103e64:	df0022c4 	addi	fp,sp,139
  103e68:	dc002a15 	stw	r16,168(sp)
  103e6c:	9829883a 	mov	r20,r19
  103e70:	e021883a 	mov	r16,fp
  103e74:	4027883a 	mov	r19,r8
  103e78:	b009883a 	mov	r4,r22
  103e7c:	01400284 	movi	r5,10
  103e80:	01158cc0 	call	1158cc <__modsi3>
  103e84:	10800c04 	addi	r2,r2,48
  103e88:	843fffc4 	addi	r16,r16,-1
  103e8c:	b009883a 	mov	r4,r22
  103e90:	01400284 	movi	r5,10
  103e94:	80800005 	stb	r2,0(r16)
  103e98:	01158480 	call	115848 <__divsi3>
  103e9c:	102d883a 	mov	r22,r2
  103ea0:	00800244 	movi	r2,9
  103ea4:	15bff416 	blt	r2,r22,103e78 <__alt_data_end+0xfffc3e78>
  103ea8:	9811883a 	mov	r8,r19
  103eac:	b0800c04 	addi	r2,r22,48
  103eb0:	a027883a 	mov	r19,r20
  103eb4:	8029883a 	mov	r20,r16
  103eb8:	a17fffc4 	addi	r5,r20,-1
  103ebc:	a0bfffc5 	stb	r2,-1(r20)
  103ec0:	dc002a17 	ldw	r16,168(sp)
  103ec4:	2f00782e 	bgeu	r5,fp,1040a8 <___svfprintf_internal_r+0x2270>
  103ec8:	d9c02384 	addi	r7,sp,142
  103ecc:	3d0fc83a 	sub	r7,r7,r20
  103ed0:	d9002344 	addi	r4,sp,141
  103ed4:	e1cf883a 	add	r7,fp,r7
  103ed8:	00000106 	br	103ee0 <___svfprintf_internal_r+0x20a8>
  103edc:	28800003 	ldbu	r2,0(r5)
  103ee0:	20800005 	stb	r2,0(r4)
  103ee4:	21000044 	addi	r4,r4,1
  103ee8:	29400044 	addi	r5,r5,1
  103eec:	21fffb1e 	bne	r4,r7,103edc <__alt_data_end+0xfffc3edc>
  103ef0:	d8802304 	addi	r2,sp,140
  103ef4:	1505c83a 	sub	r2,r2,r20
  103ef8:	d8c02344 	addi	r3,sp,141
  103efc:	1885883a 	add	r2,r3,r2
  103f00:	003f7006 	br	103cc4 <__alt_data_end+0xfffc3cc4>
  103f04:	0005883a 	mov	r2,zero
  103f08:	003f0b06 	br	103b38 <__alt_data_end+0xfffc3b38>
  103f0c:	d9002a17 	ldw	r4,168(sp)
  103f10:	d8c03217 	ldw	r3,200(sp)
  103f14:	20800044 	addi	r2,r4,1
  103f18:	1885883a 	add	r2,r3,r2
  103f1c:	d8802b15 	stw	r2,172(sp)
  103f20:	103e870e 	bge	r2,zero,103940 <__alt_data_end+0xfffc3940>
  103f24:	0005883a 	mov	r2,zero
  103f28:	003e8506 	br	103940 <__alt_data_end+0xfffc3940>
  103f2c:	010004b4 	movhi	r4,18
  103f30:	210c9784 	addi	r4,r4,12894
  103f34:	d9002c15 	stw	r4,176(sp)
  103f38:	003cc506 	br	103250 <__alt_data_end+0xfffc3250>
  103f3c:	d8c03217 	ldw	r3,200(sp)
  103f40:	18c00044 	addi	r3,r3,1
  103f44:	d8c02b15 	stw	r3,172(sp)
  103f48:	1805883a 	mov	r2,r3
  103f4c:	183fa10e 	bge	r3,zero,103dd4 <__alt_data_end+0xfffc3dd4>
  103f50:	0005883a 	mov	r2,zero
  103f54:	003f9f06 	br	103dd4 <__alt_data_end+0xfffc3dd4>
  103f58:	d9003617 	ldw	r4,216(sp)
  103f5c:	000d883a 	mov	r6,zero
  103f60:	000f883a 	mov	r7,zero
  103f64:	a00b883a 	mov	r5,r20
  103f68:	d8c03d15 	stw	r3,244(sp)
  103f6c:	da003e15 	stw	r8,248(sp)
  103f70:	0116e9c0 	call	116e9c <__eqdf2>
  103f74:	d8c03d17 	ldw	r3,244(sp)
  103f78:	da003e17 	ldw	r8,248(sp)
  103f7c:	103f8726 	beq	r2,zero,103d9c <__alt_data_end+0xfffc3d9c>
  103f80:	00800044 	movi	r2,1
  103f84:	10c7c83a 	sub	r3,r2,r3
  103f88:	d8c02615 	stw	r3,152(sp)
  103f8c:	003f8406 	br	103da0 <__alt_data_end+0xfffc3da0>
  103f90:	20000e1e 	bne	r4,zero,103fcc <___svfprintf_internal_r+0x2194>
  103f94:	9480004c 	andi	r18,r18,1
  103f98:	90000c1e 	bne	r18,zero,103fcc <___svfprintf_internal_r+0x2194>
  103f9c:	00800044 	movi	r2,1
  103fa0:	d8802b15 	stw	r2,172(sp)
  103fa4:	003e6606 	br	103940 <__alt_data_end+0xfffc3940>
  103fa8:	00800b44 	movi	r2,45
  103fac:	05adc83a 	sub	r22,zero,r22
  103fb0:	d8802305 	stb	r2,140(sp)
  103fb4:	003f3b06 	br	103ca4 <__alt_data_end+0xfffc3ca4>
  103fb8:	0005883a 	mov	r2,zero
  103fbc:	003f4e06 	br	103cf8 <__alt_data_end+0xfffc3cf8>
  103fc0:	90a4703a 	and	r18,r18,r2
  103fc4:	903f4a26 	beq	r18,zero,103cf0 <__alt_data_end+0xfffc3cf0>
  103fc8:	003f4606 	br	103ce4 <__alt_data_end+0xfffc3ce4>
  103fcc:	d8c02a17 	ldw	r3,168(sp)
  103fd0:	18c00084 	addi	r3,r3,2
  103fd4:	d8c02b15 	stw	r3,172(sp)
  103fd8:	1805883a 	mov	r2,r3
  103fdc:	183e580e 	bge	r3,zero,103940 <__alt_data_end+0xfffc3940>
  103fe0:	003fd006 	br	103f24 <__alt_data_end+0xfffc3f24>
  103fe4:	00800084 	movi	r2,2
  103fe8:	10c5c83a 	sub	r2,r2,r3
  103fec:	003f7506 	br	103dc4 <__alt_data_end+0xfffc3dc4>
  103ff0:	d9402e17 	ldw	r5,184(sp)
  103ff4:	d9002e17 	ldw	r4,184(sp)
  103ff8:	bc400043 	ldbu	r17,1(r23)
  103ffc:	29400017 	ldw	r5,0(r5)
  104000:	20800104 	addi	r2,r4,4
  104004:	d8802e15 	stw	r2,184(sp)
  104008:	d9402a15 	stw	r5,168(sp)
  10400c:	182f883a 	mov	r23,r3
  104010:	283df10e 	bge	r5,zero,1037d8 <__alt_data_end+0xfffc37d8>
  104014:	8c403fcc 	andi	r17,r17,255
  104018:	017fffc4 	movi	r5,-1
  10401c:	8c40201c 	xori	r17,r17,128
  104020:	d9402a15 	stw	r5,168(sp)
  104024:	8c7fe004 	addi	r17,r17,-128
  104028:	0037d806 	br	101f8c <__alt_data_end+0xfffc1f8c>
  10402c:	9080004c 	andi	r2,r18,1
  104030:	0039883a 	mov	fp,zero
  104034:	10000726 	beq	r2,zero,104054 <___svfprintf_internal_r+0x221c>
  104038:	d8c02817 	ldw	r3,160(sp)
  10403c:	dc001dc4 	addi	r16,sp,119
  104040:	00800c04 	movi	r2,48
  104044:	1c07c83a 	sub	r3,r3,r16
  104048:	d8801dc5 	stb	r2,119(sp)
  10404c:	d8c02b15 	stw	r3,172(sp)
  104050:	00393106 	br	102518 <__alt_data_end+0xfffc2518>
  104054:	d8002b15 	stw	zero,172(sp)
  104058:	dc001e04 	addi	r16,sp,120
  10405c:	00392e06 	br	102518 <__alt_data_end+0xfffc2518>
  104060:	0005883a 	mov	r2,zero
  104064:	003e3306 	br	103934 <__alt_data_end+0xfffc3934>
  104068:	dd802617 	ldw	r22,152(sp)
  10406c:	003f0706 	br	103c8c <__alt_data_end+0xfffc3c8c>
  104070:	d8c02b03 	ldbu	r3,172(sp)
  104074:	d8c02785 	stb	r3,158(sp)
  104078:	003a3506 	br	102950 <__alt_data_end+0xfffc2950>
  10407c:	d8c02b03 	ldbu	r3,172(sp)
  104080:	d8c02785 	stb	r3,158(sp)
  104084:	003a1706 	br	1028e4 <__alt_data_end+0xfffc28e4>
  104088:	0005883a 	mov	r2,zero
  10408c:	003f5d06 	br	103e04 <__alt_data_end+0xfffc3e04>
  104090:	d8c02b03 	ldbu	r3,172(sp)
  104094:	d8c02785 	stb	r3,158(sp)
  104098:	0038f306 	br	102468 <__alt_data_end+0xfffc2468>
  10409c:	d8c02b03 	ldbu	r3,172(sp)
  1040a0:	d8c02785 	stb	r3,158(sp)
  1040a4:	0038be06 	br	1023a0 <__alt_data_end+0xfffc23a0>
  1040a8:	d8802344 	addi	r2,sp,141
  1040ac:	003f0506 	br	103cc4 <__alt_data_end+0xfffc3cc4>
  1040b0:	d8c02b03 	ldbu	r3,172(sp)
  1040b4:	d8c02785 	stb	r3,158(sp)
  1040b8:	00388b06 	br	1022e8 <__alt_data_end+0xfffc22e8>
  1040bc:	d8c02b03 	ldbu	r3,172(sp)
  1040c0:	d8c02785 	stb	r3,158(sp)
  1040c4:	003ad706 	br	102c24 <__alt_data_end+0xfffc2c24>
  1040c8:	d9403917 	ldw	r5,228(sp)
  1040cc:	00800304 	movi	r2,12
  1040d0:	28800015 	stw	r2,0(r5)
  1040d4:	00bfffc4 	movi	r2,-1
  1040d8:	00384306 	br	1021e8 <__alt_data_end+0xfffc21e8>
  1040dc:	d8c02b03 	ldbu	r3,172(sp)
  1040e0:	d8c02785 	stb	r3,158(sp)
  1040e4:	003ab606 	br	102bc0 <__alt_data_end+0xfffc2bc0>
  1040e8:	d8c02b03 	ldbu	r3,172(sp)
  1040ec:	d8c02785 	stb	r3,158(sp)
  1040f0:	003a8906 	br	102b18 <__alt_data_end+0xfffc2b18>

001040f4 <__ssvfscanf_r>:
  1040f4:	2880030b 	ldhu	r2,12(r5)
  1040f8:	deff4b04 	addi	sp,sp,-724
  1040fc:	df00b315 	stw	fp,716(sp)
  104100:	ddc0b215 	stw	r23,712(sp)
  104104:	dfc0b415 	stw	ra,720(sp)
  104108:	dd80b115 	stw	r22,708(sp)
  10410c:	dd40b015 	stw	r21,704(sp)
  104110:	dd00af15 	stw	r20,700(sp)
  104114:	dcc0ae15 	stw	r19,696(sp)
  104118:	dc80ad15 	stw	r18,692(sp)
  10411c:	dc40ac15 	stw	r17,688(sp)
  104120:	dc00ab15 	stw	r16,684(sp)
  104124:	10c8000c 	andi	r3,r2,8192
  104128:	d9c09c15 	stw	r7,624(sp)
  10412c:	2839883a 	mov	fp,r5
  104130:	202f883a 	mov	r23,r4
  104134:	1800061e 	bne	r3,zero,104150 <__ssvfscanf_r+0x5c>
  104138:	29001917 	ldw	r4,100(r5)
  10413c:	00f7ffc4 	movi	r3,-8193
  104140:	10880014 	ori	r2,r2,8192
  104144:	20c6703a 	and	r3,r4,r3
  104148:	2880030d 	sth	r2,12(r5)
  10414c:	28c01915 	stw	r3,100(r5)
  104150:	30800003 	ldbu	r2,0(r6)
  104154:	0021883a 	mov	r16,zero
  104158:	058004b4 	movhi	r22,18
  10415c:	d800a115 	stw	zero,644(sp)
  104160:	d8009e15 	stw	zero,632(sp)
  104164:	d800a015 	stw	zero,640(sp)
  104168:	d8809b15 	stw	r2,620(sp)
  10416c:	b5957204 	addi	r22,r22,21960
  104170:	8025883a 	mov	r18,r16
  104174:	e027883a 	mov	r19,fp
  104178:	35000044 	addi	r20,r6,1
  10417c:	10001e26 	beq	r2,zero,1041f8 <__ssvfscanf_r+0x104>
  104180:	b4000017 	ldw	r16,0(r22)
  104184:	8087883a 	add	r3,r16,r2
  104188:	18c00043 	ldbu	r3,1(r3)
  10418c:	18c0020c 	andi	r3,r3,8
  104190:	18001b26 	beq	r3,zero,104200 <__ssvfscanf_r+0x10c>
  104194:	98800117 	ldw	r2,4(r19)
  104198:	00800e0e 	bge	zero,r2,1041d4 <__ssvfscanf_r+0xe0>
  10419c:	98c00017 	ldw	r3,0(r19)
  1041a0:	b1000017 	ldw	r4,0(r22)
  1041a4:	18800003 	ldbu	r2,0(r3)
  1041a8:	2085883a 	add	r2,r4,r2
  1041ac:	10800043 	ldbu	r2,1(r2)
  1041b0:	1080020c 	andi	r2,r2,8
  1041b4:	10000b26 	beq	r2,zero,1041e4 <__ssvfscanf_r+0xf0>
  1041b8:	98800117 	ldw	r2,4(r19)
  1041bc:	18c00044 	addi	r3,r3,1
  1041c0:	98c00015 	stw	r3,0(r19)
  1041c4:	10bfffc4 	addi	r2,r2,-1
  1041c8:	98800115 	stw	r2,4(r19)
  1041cc:	94800044 	addi	r18,r18,1
  1041d0:	00bff216 	blt	zero,r2,10419c <__alt_data_end+0xfffc419c>
  1041d4:	980b883a 	mov	r5,r19
  1041d8:	b809883a 	mov	r4,r23
  1041dc:	0110a800 	call	110a80 <__ssrefill_r>
  1041e0:	103fee26 	beq	r2,zero,10419c <__alt_data_end+0xfffc419c>
  1041e4:	a00d883a 	mov	r6,r20
  1041e8:	30800003 	ldbu	r2,0(r6)
  1041ec:	35000044 	addi	r20,r6,1
  1041f0:	d8809b15 	stw	r2,620(sp)
  1041f4:	103fe21e 	bne	r2,zero,104180 <__alt_data_end+0xfffc4180>
  1041f8:	d880a017 	ldw	r2,640(sp)
  1041fc:	00009a06 	br	104468 <__ssvfscanf_r+0x374>
  104200:	00c00944 	movi	r3,37
  104204:	10c0891e 	bne	r2,r3,10442c <__ssvfscanf_r+0x338>
  104208:	0039883a 	mov	fp,zero
  10420c:	35400043 	ldbu	r21,1(r6)
  104210:	0023883a 	mov	r17,zero
  104214:	01801e04 	movi	r6,120
  104218:	00c01b04 	movi	r3,108
  10421c:	e009883a 	mov	r4,fp
  104220:	a1c00044 	addi	r7,r20,1
  104224:	3540a236 	bltu	r6,r21,1044b0 <__ssvfscanf_r+0x3bc>
  104228:	a80490ba 	slli	r2,r21,2
  10422c:	01400434 	movhi	r5,16
  104230:	29509004 	addi	r5,r5,16960
  104234:	1145883a 	add	r2,r2,r5
  104238:	10800017 	ldw	r2,0(r2)
  10423c:	1000683a 	jmp	r2
  104240:	00104464 	muli	zero,zero,16657
  104244:	001044b0 	cmpltui	zero,zero,16658
  104248:	001044b0 	cmpltui	zero,zero,16658
  10424c:	001044b0 	cmpltui	zero,zero,16658
  104250:	001044b0 	cmpltui	zero,zero,16658
  104254:	001044b0 	cmpltui	zero,zero,16658
  104258:	001044b0 	cmpltui	zero,zero,16658
  10425c:	001044b0 	cmpltui	zero,zero,16658
  104260:	001044b0 	cmpltui	zero,zero,16658
  104264:	001044b0 	cmpltui	zero,zero,16658
  104268:	001044b0 	cmpltui	zero,zero,16658
  10426c:	001044b0 	cmpltui	zero,zero,16658
  104270:	001044b0 	cmpltui	zero,zero,16658
  104274:	001044b0 	cmpltui	zero,zero,16658
  104278:	001044b0 	cmpltui	zero,zero,16658
  10427c:	001044b0 	cmpltui	zero,zero,16658
  104280:	001044b0 	cmpltui	zero,zero,16658
  104284:	001044b0 	cmpltui	zero,zero,16658
  104288:	001044b0 	cmpltui	zero,zero,16658
  10428c:	001044b0 	cmpltui	zero,zero,16658
  104290:	001044b0 	cmpltui	zero,zero,16658
  104294:	001044b0 	cmpltui	zero,zero,16658
  104298:	001044b0 	cmpltui	zero,zero,16658
  10429c:	001044b0 	cmpltui	zero,zero,16658
  1042a0:	001044b0 	cmpltui	zero,zero,16658
  1042a4:	001044b0 	cmpltui	zero,zero,16658
  1042a8:	001044b0 	cmpltui	zero,zero,16658
  1042ac:	001044b0 	cmpltui	zero,zero,16658
  1042b0:	001044b0 	cmpltui	zero,zero,16658
  1042b4:	001044b0 	cmpltui	zero,zero,16658
  1042b8:	001044b0 	cmpltui	zero,zero,16658
  1042bc:	001044b0 	cmpltui	zero,zero,16658
  1042c0:	001044b0 	cmpltui	zero,zero,16658
  1042c4:	001044b0 	cmpltui	zero,zero,16658
  1042c8:	001044b0 	cmpltui	zero,zero,16658
  1042cc:	001044b0 	cmpltui	zero,zero,16658
  1042d0:	001044b0 	cmpltui	zero,zero,16658
  1042d4:	00104424 	muli	zero,zero,16656
  1042d8:	001044b0 	cmpltui	zero,zero,16658
  1042dc:	001044b0 	cmpltui	zero,zero,16658
  1042e0:	001044b0 	cmpltui	zero,zero,16658
  1042e4:	001044b0 	cmpltui	zero,zero,16658
  1042e8:	00104498 	cmpnei	zero,zero,16658
  1042ec:	001044b0 	cmpltui	zero,zero,16658
  1042f0:	001044b0 	cmpltui	zero,zero,16658
  1042f4:	001044b0 	cmpltui	zero,zero,16658
  1042f8:	001044b0 	cmpltui	zero,zero,16658
  1042fc:	001044b0 	cmpltui	zero,zero,16658
  104300:	001045f8 	rdprs	zero,zero,16663
  104304:	001045f8 	rdprs	zero,zero,16663
  104308:	001045f8 	rdprs	zero,zero,16663
  10430c:	001045f8 	rdprs	zero,zero,16663
  104310:	001045f8 	rdprs	zero,zero,16663
  104314:	001045f8 	rdprs	zero,zero,16663
  104318:	001045f8 	rdprs	zero,zero,16663
  10431c:	001045f8 	rdprs	zero,zero,16663
  104320:	001045f8 	rdprs	zero,zero,16663
  104324:	001045f8 	rdprs	zero,zero,16663
  104328:	001044b0 	cmpltui	zero,zero,16658
  10432c:	001044b0 	cmpltui	zero,zero,16658
  104330:	001044b0 	cmpltui	zero,zero,16658
  104334:	001044b0 	cmpltui	zero,zero,16658
  104338:	001044b0 	cmpltui	zero,zero,16658
  10433c:	001044b0 	cmpltui	zero,zero,16658
  104340:	001044b0 	cmpltui	zero,zero,16658
  104344:	001044b0 	cmpltui	zero,zero,16658
  104348:	001044b0 	cmpltui	zero,zero,16658
  10434c:	001044b0 	cmpltui	zero,zero,16658
  104350:	001045c8 	cmpgei	zero,zero,16663
  104354:	001046a4 	muli	zero,zero,16666
  104358:	001044b0 	cmpltui	zero,zero,16658
  10435c:	001046a4 	muli	zero,zero,16666
  104360:	001044b0 	cmpltui	zero,zero,16658
  104364:	001044b0 	cmpltui	zero,zero,16658
  104368:	001044b0 	cmpltui	zero,zero,16658
  10436c:	001044b0 	cmpltui	zero,zero,16658
  104370:	00104690 	cmplti	zero,zero,16666
  104374:	001044b0 	cmpltui	zero,zero,16658
  104378:	001044b0 	cmpltui	zero,zero,16658
  10437c:	00104660 	cmpeqi	zero,zero,16665
  104380:	001044b0 	cmpltui	zero,zero,16658
  104384:	001044b0 	cmpltui	zero,zero,16658
  104388:	001044b0 	cmpltui	zero,zero,16658
  10438c:	001044b0 	cmpltui	zero,zero,16658
  104390:	001044b0 	cmpltui	zero,zero,16658
  104394:	001044b0 	cmpltui	zero,zero,16658
  104398:	001044b0 	cmpltui	zero,zero,16658
  10439c:	001044b0 	cmpltui	zero,zero,16658
  1043a0:	00104630 	cmpltui	zero,zero,16664
  1043a4:	001044b0 	cmpltui	zero,zero,16658
  1043a8:	001044b0 	cmpltui	zero,zero,16658
  1043ac:	001047ec 	andhi	zero,zero,16671
  1043b0:	001044b0 	cmpltui	zero,zero,16658
  1043b4:	001044b0 	cmpltui	zero,zero,16658
  1043b8:	001044b0 	cmpltui	zero,zero,16658
  1043bc:	001044b0 	cmpltui	zero,zero,16658
  1043c0:	001044b0 	cmpltui	zero,zero,16658
  1043c4:	001044b0 	cmpltui	zero,zero,16658
  1043c8:	001044b0 	cmpltui	zero,zero,16658
  1043cc:	0010476c 	andhi	zero,zero,16669
  1043d0:	00104740 	call	10474 <OSCtxSw_SWITCH_PC+0x10434>
  1043d4:	001046a4 	muli	zero,zero,16666
  1043d8:	001046a4 	muli	zero,zero,16666
  1043dc:	001046a4 	muli	zero,zero,16666
  1043e0:	0010472c 	andhi	zero,zero,16668
  1043e4:	0010487c 	xorhi	zero,zero,16673
  1043e8:	001044b0 	cmpltui	zero,zero,16658
  1043ec:	001044b0 	cmpltui	zero,zero,16658
  1043f0:	00104718 	cmpnei	zero,zero,16668
  1043f4:	001044b0 	cmpltui	zero,zero,16658
  1043f8:	001046e8 	cmpgeui	zero,zero,16667
  1043fc:	001046bc 	xorhi	zero,zero,16666
  104400:	00104598 	cmpnei	zero,zero,16662
  104404:	001044b0 	cmpltui	zero,zero,16658
  104408:	001044b0 	cmpltui	zero,zero,16658
  10440c:	00104580 	call	10458 <OSCtxSw_SWITCH_PC+0x10418>
  104410:	001044b0 	cmpltui	zero,zero,16658
  104414:	00104504 	movi	zero,16660
  104418:	001044b0 	cmpltui	zero,zero,16658
  10441c:	001044b0 	cmpltui	zero,zero,16658
  104420:	00104630 	cmpltui	zero,zero,16664
  104424:	d9c09d15 	stw	r7,628(sp)
  104428:	3829883a 	mov	r20,r7
  10442c:	98800117 	ldw	r2,4(r19)
  104430:	0081c60e 	bge	zero,r2,104b4c <__ssvfscanf_r+0xa58>
  104434:	98800017 	ldw	r2,0(r19)
  104438:	a0ffffc3 	ldbu	r3,-1(r20)
  10443c:	11000003 	ldbu	r4,0(r2)
  104440:	20ff6d1e 	bne	r4,r3,1041f8 <__alt_data_end+0xfffc41f8>
  104444:	98c00117 	ldw	r3,4(r19)
  104448:	10800044 	addi	r2,r2,1
  10444c:	98800015 	stw	r2,0(r19)
  104450:	18bfffc4 	addi	r2,r3,-1
  104454:	98800115 	stw	r2,4(r19)
  104458:	94800044 	addi	r18,r18,1
  10445c:	a00d883a 	mov	r6,r20
  104460:	003f6106 	br	1041e8 <__alt_data_end+0xfffc41e8>
  104464:	00bfffc4 	movi	r2,-1
  104468:	dfc0b417 	ldw	ra,720(sp)
  10446c:	df00b317 	ldw	fp,716(sp)
  104470:	ddc0b217 	ldw	r23,712(sp)
  104474:	dd80b117 	ldw	r22,708(sp)
  104478:	dd40b017 	ldw	r21,704(sp)
  10447c:	dd00af17 	ldw	r20,700(sp)
  104480:	dcc0ae17 	ldw	r19,696(sp)
  104484:	dc80ad17 	ldw	r18,692(sp)
  104488:	dc40ac17 	ldw	r17,688(sp)
  10448c:	dc00ab17 	ldw	r16,684(sp)
  104490:	dec0b504 	addi	sp,sp,724
  104494:	f800283a 	ret
  104498:	a1400043 	ldbu	r5,1(r20)
  10449c:	3829883a 	mov	r20,r7
  1044a0:	8c400414 	ori	r17,r17,16
  1044a4:	2d403fcc 	andi	r21,r5,255
  1044a8:	a1c00044 	addi	r7,r20,1
  1044ac:	357f5e2e 	bgeu	r6,r21,104228 <__alt_data_end+0xfffc4228>
  1044b0:	856b883a 	add	r21,r16,r21
  1044b4:	a8800043 	ldbu	r2,1(r21)
  1044b8:	d9c09d15 	stw	r7,628(sp)
  1044bc:	00c00044 	movi	r3,1
  1044c0:	108000cc 	andi	r2,r2,3
  1044c4:	2039883a 	mov	fp,r4
  1044c8:	10c1a526 	beq	r2,r3,104b60 <__ssvfscanf_r+0xa6c>
  1044cc:	98800117 	ldw	r2,4(r19)
  1044d0:	00804216 	blt	zero,r2,1045dc <__ssvfscanf_r+0x4e8>
  1044d4:	980b883a 	mov	r5,r19
  1044d8:	b809883a 	mov	r4,r23
  1044dc:	0110a800 	call	110a80 <__ssrefill_r>
  1044e0:	10015e1e 	bne	r2,zero,104a5c <__ssvfscanf_r+0x968>
  1044e4:	01000474 	movhi	r4,17
  1044e8:	213a3704 	addi	r4,r4,-5924
  1044ec:	01400284 	movi	r5,10
  1044f0:	b4000017 	ldw	r16,0(r22)
  1044f4:	d900a115 	stw	r4,644(sp)
  1044f8:	d9409e15 	stw	r5,632(sp)
  1044fc:	050000c4 	movi	r20,3
  104500:	00000a06 	br	10452c <__ssvfscanf_r+0x438>
  104504:	98800117 	ldw	r2,4(r19)
  104508:	d9c09d15 	stw	r7,628(sp)
  10450c:	2039883a 	mov	fp,r4
  104510:	0081e20e 	bge	zero,r2,104c9c <__ssvfscanf_r+0xba8>
  104514:	00c00474 	movhi	r3,17
  104518:	18fb9504 	addi	r3,r3,-4524
  10451c:	01000284 	movi	r4,10
  104520:	d8c0a115 	stw	r3,644(sp)
  104524:	d9009e15 	stw	r4,632(sp)
  104528:	050000c4 	movi	r20,3
  10452c:	98c00017 	ldw	r3,0(r19)
  104530:	00000206 	br	10453c <__ssvfscanf_r+0x448>
  104534:	18c00044 	addi	r3,r3,1
  104538:	98c00015 	stw	r3,0(r19)
  10453c:	19000003 	ldbu	r4,0(r3)
  104540:	20803fcc 	andi	r2,r4,255
  104544:	8085883a 	add	r2,r16,r2
  104548:	10800043 	ldbu	r2,1(r2)
  10454c:	1140020c 	andi	r5,r2,8
  104550:	28020126 	beq	r5,zero,104d58 <__ssvfscanf_r+0xc64>
  104554:	98800117 	ldw	r2,4(r19)
  104558:	94800044 	addi	r18,r18,1
  10455c:	10bfffc4 	addi	r2,r2,-1
  104560:	98800115 	stw	r2,4(r19)
  104564:	00bff316 	blt	zero,r2,104534 <__alt_data_end+0xfffc4534>
  104568:	980b883a 	mov	r5,r19
  10456c:	b809883a 	mov	r4,r23
  104570:	0110a800 	call	110a80 <__ssrefill_r>
  104574:	1001391e 	bne	r2,zero,104a5c <__ssvfscanf_r+0x968>
  104578:	b4000017 	ldw	r16,0(r22)
  10457c:	003feb06 	br	10452c <__alt_data_end+0xfffc452c>
  104580:	98800117 	ldw	r2,4(r19)
  104584:	d9c09d15 	stw	r7,628(sp)
  104588:	2039883a 	mov	fp,r4
  10458c:	0081aa0e 	bge	zero,r2,104c38 <__ssvfscanf_r+0xb44>
  104590:	05000084 	movi	r20,2
  104594:	003fe506 	br	10452c <__alt_data_end+0xfffc452c>
  104598:	98800117 	ldw	r2,4(r19)
  10459c:	d9c09d15 	stw	r7,628(sp)
  1045a0:	2039883a 	mov	fp,r4
  1045a4:	8c408814 	ori	r17,r17,544
  1045a8:	0081df0e 	bge	zero,r2,104d28 <__ssvfscanf_r+0xc34>
  1045ac:	00c00474 	movhi	r3,17
  1045b0:	18fb9504 	addi	r3,r3,-4524
  1045b4:	01000404 	movi	r4,16
  1045b8:	d8c0a115 	stw	r3,644(sp)
  1045bc:	d9009e15 	stw	r4,632(sp)
  1045c0:	050000c4 	movi	r20,3
  1045c4:	003fd906 	br	10452c <__alt_data_end+0xfffc452c>
  1045c8:	98800117 	ldw	r2,4(r19)
  1045cc:	d9c09d15 	stw	r7,628(sp)
  1045d0:	2039883a 	mov	fp,r4
  1045d4:	8c400054 	ori	r17,r17,1
  1045d8:	0081850e 	bge	zero,r2,104bf0 <__ssvfscanf_r+0xafc>
  1045dc:	00c00474 	movhi	r3,17
  1045e0:	18fa3704 	addi	r3,r3,-5924
  1045e4:	01000284 	movi	r4,10
  1045e8:	d8c0a115 	stw	r3,644(sp)
  1045ec:	d9009e15 	stw	r4,632(sp)
  1045f0:	050000c4 	movi	r20,3
  1045f4:	003fcd06 	br	10452c <__alt_data_end+0xfffc452c>
  1045f8:	01400284 	movi	r5,10
  1045fc:	d8c0a615 	stw	r3,664(sp)
  104600:	d980a915 	stw	r6,676(sp)
  104604:	d9c0aa15 	stw	r7,680(sp)
  104608:	01159fc0 	call	1159fc <__mulsi3>
  10460c:	a1400043 	ldbu	r5,1(r20)
  104610:	d9c0aa17 	ldw	r7,680(sp)
  104614:	1545883a 	add	r2,r2,r21
  104618:	113ff404 	addi	r4,r2,-48
  10461c:	3829883a 	mov	r20,r7
  104620:	2d403fcc 	andi	r21,r5,255
  104624:	d8c0a617 	ldw	r3,664(sp)
  104628:	d980a917 	ldw	r6,676(sp)
  10462c:	003efc06 	br	104220 <__alt_data_end+0xfffc4220>
  104630:	98800117 	ldw	r2,4(r19)
  104634:	d9c09d15 	stw	r7,628(sp)
  104638:	2039883a 	mov	fp,r4
  10463c:	8c408014 	ori	r17,r17,512
  104640:	0081710e 	bge	zero,r2,104c08 <__ssvfscanf_r+0xb14>
  104644:	01400474 	movhi	r5,17
  104648:	297b9504 	addi	r5,r5,-4524
  10464c:	00800404 	movi	r2,16
  104650:	d940a115 	stw	r5,644(sp)
  104654:	d8809e15 	stw	r2,632(sp)
  104658:	050000c4 	movi	r20,3
  10465c:	003fb306 	br	10452c <__alt_data_end+0xfffc452c>
  104660:	98800117 	ldw	r2,4(r19)
  104664:	d9c09d15 	stw	r7,628(sp)
  104668:	2039883a 	mov	fp,r4
  10466c:	8c400054 	ori	r17,r17,1
  104670:	0081840e 	bge	zero,r2,104c84 <__ssvfscanf_r+0xb90>
  104674:	01400474 	movhi	r5,17
  104678:	297b9504 	addi	r5,r5,-4524
  10467c:	00800204 	movi	r2,8
  104680:	d940a115 	stw	r5,644(sp)
  104684:	d8809e15 	stw	r2,632(sp)
  104688:	050000c4 	movi	r20,3
  10468c:	003fa706 	br	10452c <__alt_data_end+0xfffc452c>
  104690:	a1400043 	ldbu	r5,1(r20)
  104694:	8c400094 	ori	r17,r17,2
  104698:	3829883a 	mov	r20,r7
  10469c:	2d403fcc 	andi	r21,r5,255
  1046a0:	003edf06 	br	104220 <__alt_data_end+0xfffc4220>
  1046a4:	98800117 	ldw	r2,4(r19)
  1046a8:	d9c09d15 	stw	r7,628(sp)
  1046ac:	2039883a 	mov	fp,r4
  1046b0:	00816d0e 	bge	zero,r2,104c68 <__ssvfscanf_r+0xb74>
  1046b4:	05000104 	movi	r20,4
  1046b8:	003f9c06 	br	10452c <__alt_data_end+0xfffc452c>
  1046bc:	98800117 	ldw	r2,4(r19)
  1046c0:	d9c09d15 	stw	r7,628(sp)
  1046c4:	2039883a 	mov	fp,r4
  1046c8:	0081800e 	bge	zero,r2,104ccc <__ssvfscanf_r+0xbd8>
  1046cc:	01000474 	movhi	r4,17
  1046d0:	213b9504 	addi	r4,r4,-4524
  1046d4:	01400204 	movi	r5,8
  1046d8:	d900a115 	stw	r4,644(sp)
  1046dc:	d9409e15 	stw	r5,632(sp)
  1046e0:	050000c4 	movi	r20,3
  1046e4:	003f9106 	br	10452c <__alt_data_end+0xfffc452c>
  1046e8:	d9c09d15 	stw	r7,628(sp)
  1046ec:	8880040c 	andi	r2,r17,16
  1046f0:	1000a01e 	bne	r2,zero,104974 <__ssvfscanf_r+0x880>
  1046f4:	8880010c 	andi	r2,r17,4
  1046f8:	10012826 	beq	r2,zero,104b9c <__ssvfscanf_r+0xaa8>
  1046fc:	d9009c17 	ldw	r4,624(sp)
  104700:	3829883a 	mov	r20,r7
  104704:	20800017 	ldw	r2,0(r4)
  104708:	21000104 	addi	r4,r4,4
  10470c:	d9009c15 	stw	r4,624(sp)
  104710:	1480000d 	sth	r18,0(r2)
  104714:	003eb306 	br	1041e4 <__alt_data_end+0xfffc41e4>
  104718:	a5400043 	ldbu	r21,1(r20)
  10471c:	a8c11a26 	beq	r21,r3,104b88 <__ssvfscanf_r+0xa94>
  104720:	8c400054 	ori	r17,r17,1
  104724:	3829883a 	mov	r20,r7
  104728:	003ebd06 	br	104220 <__alt_data_end+0xfffc4220>
  10472c:	a1400043 	ldbu	r5,1(r20)
  104730:	8c400114 	ori	r17,r17,4
  104734:	3829883a 	mov	r20,r7
  104738:	2d403fcc 	andi	r21,r5,255
  10473c:	003eb806 	br	104220 <__alt_data_end+0xfffc4220>
  104740:	98800117 	ldw	r2,4(r19)
  104744:	d9c09d15 	stw	r7,628(sp)
  104748:	2039883a 	mov	fp,r4
  10474c:	00bf610e 	bge	zero,r2,1044d4 <__alt_data_end+0xfffc44d4>
  104750:	00800474 	movhi	r2,17
  104754:	10ba3704 	addi	r2,r2,-5924
  104758:	00c00284 	movi	r3,10
  10475c:	d880a115 	stw	r2,644(sp)
  104760:	d8c09e15 	stw	r3,632(sp)
  104764:	050000c4 	movi	r20,3
  104768:	003f7006 	br	10452c <__alt_data_end+0xfffc452c>
  10476c:	98800117 	ldw	r2,4(r19)
  104770:	d9c09d15 	stw	r7,628(sp)
  104774:	2039883a 	mov	fp,r4
  104778:	0080c60e 	bge	zero,r2,104a94 <__ssvfscanf_r+0x9a0>
  10477c:	e000011e 	bne	fp,zero,104784 <__ssvfscanf_r+0x690>
  104780:	07000044 	movi	fp,1
  104784:	8880004c 	andi	r2,r17,1
  104788:	1000461e 	bne	r2,zero,1048a4 <__ssvfscanf_r+0x7b0>
  10478c:	8c40040c 	andi	r17,r17,16
  104790:	8800dc26 	beq	r17,zero,104b04 <__ssvfscanf_r+0xa10>
  104794:	0021883a 	mov	r16,zero
  104798:	00000806 	br	1047bc <__ssvfscanf_r+0x6c8>
  10479c:	1887883a 	add	r3,r3,r2
  1047a0:	980b883a 	mov	r5,r19
  1047a4:	b809883a 	mov	r4,r23
  1047a8:	98c00015 	stw	r3,0(r19)
  1047ac:	80a1883a 	add	r16,r16,r2
  1047b0:	e0b9c83a 	sub	fp,fp,r2
  1047b4:	0110a800 	call	110a80 <__ssrefill_r>
  1047b8:	1000cc1e 	bne	r2,zero,104aec <__ssvfscanf_r+0x9f8>
  1047bc:	98800117 	ldw	r2,4(r19)
  1047c0:	98c00017 	ldw	r3,0(r19)
  1047c4:	173ff516 	blt	r2,fp,10479c <__alt_data_end+0xfffc479c>
  1047c8:	1705c83a 	sub	r2,r2,fp
  1047cc:	1f15883a 	add	r10,r3,fp
  1047d0:	8721883a 	add	r16,r16,fp
  1047d4:	98800115 	stw	r2,4(r19)
  1047d8:	9a800015 	stw	r10,0(r19)
  1047dc:	dd009d17 	ldw	r20,628(sp)
  1047e0:	9425883a 	add	r18,r18,r16
  1047e4:	a00d883a 	mov	r6,r20
  1047e8:	003e7f06 	br	1041e8 <__alt_data_end+0xfffc41e8>
  1047ec:	2039883a 	mov	fp,r4
  1047f0:	380b883a 	mov	r5,r7
  1047f4:	d9005884 	addi	r4,sp,354
  1047f8:	d9c09d15 	stw	r7,628(sp)
  1047fc:	010d0a40 	call	10d0a4 <__sccl>
  104800:	1029883a 	mov	r20,r2
  104804:	98800117 	ldw	r2,4(r19)
  104808:	0081120e 	bge	zero,r2,104c54 <__ssvfscanf_r+0xb60>
  10480c:	99000017 	ldw	r4,0(r19)
  104810:	20800003 	ldbu	r2,0(r4)
  104814:	e0005a26 	beq	fp,zero,104980 <__ssvfscanf_r+0x88c>
  104818:	8c40040c 	andi	r17,r17,16
  10481c:	88005b26 	beq	r17,zero,10498c <__ssvfscanf_r+0x898>
  104820:	e023883a 	mov	r17,fp
  104824:	0021883a 	mov	r16,zero
  104828:	00000106 	br	104830 <__ssvfscanf_r+0x73c>
  10482c:	20800003 	ldbu	r2,0(r4)
  104830:	10803fcc 	andi	r2,r2,255
  104834:	d8c05884 	addi	r3,sp,354
  104838:	1885883a 	add	r2,r3,r2
  10483c:	10800007 	ldb	r2,0(r2)
  104840:	1000ae26 	beq	r2,zero,104afc <__ssvfscanf_r+0xa08>
  104844:	98800117 	ldw	r2,4(r19)
  104848:	21000044 	addi	r4,r4,1
  10484c:	84000044 	addi	r16,r16,1
  104850:	10bfffc4 	addi	r2,r2,-1
  104854:	98800115 	stw	r2,4(r19)
  104858:	99000015 	stw	r4,0(r19)
  10485c:	8700a126 	beq	r16,fp,104ae4 <__ssvfscanf_r+0x9f0>
  104860:	00bff216 	blt	zero,r2,10482c <__alt_data_end+0xfffc482c>
  104864:	980b883a 	mov	r5,r19
  104868:	b809883a 	mov	r4,r23
  10486c:	0110a800 	call	110a80 <__ssrefill_r>
  104870:	10009b1e 	bne	r2,zero,104ae0 <__ssvfscanf_r+0x9ec>
  104874:	99000017 	ldw	r4,0(r19)
  104878:	003fec06 	br	10482c <__alt_data_end+0xfffc482c>
  10487c:	98800117 	ldw	r2,4(r19)
  104880:	d9c09d15 	stw	r7,628(sp)
  104884:	2039883a 	mov	fp,r4
  104888:	00811c0e 	bge	zero,r2,104cfc <__ssvfscanf_r+0xc08>
  10488c:	01400474 	movhi	r5,17
  104890:	297a3704 	addi	r5,r5,-5924
  104894:	d940a115 	stw	r5,644(sp)
  104898:	d8009e15 	stw	zero,632(sp)
  10489c:	050000c4 	movi	r20,3
  1048a0:	003f2206 	br	10452c <__alt_data_end+0xfffc452c>
  1048a4:	dd409904 	addi	r21,sp,612
  1048a8:	8c40040c 	andi	r17,r17,16
  1048ac:	01800204 	movi	r6,8
  1048b0:	000b883a 	mov	r5,zero
  1048b4:	a809883a 	mov	r4,r21
  1048b8:	dc409f15 	stw	r17,636(sp)
  1048bc:	01016c40 	call	1016c4 <memset>
  1048c0:	dc409f17 	ldw	r17,636(sp)
  1048c4:	88006e26 	beq	r17,zero,104a80 <__ssvfscanf_r+0x98c>
  1048c8:	0029883a 	mov	r20,zero
  1048cc:	0023883a 	mov	r17,zero
  1048d0:	010aa800 	call	10aa80 <__locale_mb_cur_max>
  1048d4:	14406126 	beq	r2,r17,104a5c <__ssvfscanf_r+0x968>
  1048d8:	98800017 	ldw	r2,0(r19)
  1048dc:	98c00117 	ldw	r3,4(r19)
  1048e0:	d9000104 	addi	r4,sp,4
  1048e4:	12000003 	ldbu	r8,0(r2)
  1048e8:	18ffffc4 	addi	r3,r3,-1
  1048ec:	10800044 	addi	r2,r2,1
  1048f0:	98c00115 	stw	r3,4(r19)
  1048f4:	98800015 	stw	r2,0(r19)
  1048f8:	8c000044 	addi	r16,r17,1
  1048fc:	dd400015 	stw	r21,0(sp)
  104900:	2463883a 	add	r17,r4,r17
  104904:	200d883a 	mov	r6,r4
  104908:	a00b883a 	mov	r5,r20
  10490c:	800f883a 	mov	r7,r16
  104910:	b809883a 	mov	r4,r23
  104914:	8a000005 	stb	r8,0(r17)
  104918:	010b4fc0 	call	10b4fc <_mbrtowc_r>
  10491c:	017fffc4 	movi	r5,-1
  104920:	11404e26 	beq	r2,r5,104a5c <__ssvfscanf_r+0x968>
  104924:	1000601e 	bne	r2,zero,104aa8 <__ssvfscanf_r+0x9b4>
  104928:	d8c09f17 	ldw	r3,636(sp)
  10492c:	1800641e 	bne	r3,zero,104ac0 <__ssvfscanf_r+0x9cc>
  104930:	a0000015 	stw	zero,0(r20)
  104934:	9425883a 	add	r18,r18,r16
  104938:	e179883a 	add	fp,fp,r5
  10493c:	a5000104 	addi	r20,r20,4
  104940:	98800117 	ldw	r2,4(r19)
  104944:	0023883a 	mov	r17,zero
  104948:	00804b16 	blt	zero,r2,104a78 <__ssvfscanf_r+0x984>
  10494c:	980b883a 	mov	r5,r19
  104950:	b809883a 	mov	r4,r23
  104954:	0110a800 	call	110a80 <__ssrefill_r>
  104958:	10004726 	beq	r2,zero,104a78 <__ssvfscanf_r+0x984>
  10495c:	88003f1e 	bne	r17,zero,104a5c <__ssvfscanf_r+0x968>
  104960:	d8c09f17 	ldw	r3,636(sp)
  104964:	1800031e 	bne	r3,zero,104974 <__ssvfscanf_r+0x880>
  104968:	d900a017 	ldw	r4,640(sp)
  10496c:	21000044 	addi	r4,r4,1
  104970:	d900a015 	stw	r4,640(sp)
  104974:	dd009d17 	ldw	r20,628(sp)
  104978:	a00d883a 	mov	r6,r20
  10497c:	003e1a06 	br	1041e8 <__alt_data_end+0xfffc41e8>
  104980:	8c40040c 	andi	r17,r17,16
  104984:	073fffc4 	movi	fp,-1
  104988:	883fa51e 	bne	r17,zero,104820 <__alt_data_end+0xfffc4820>
  10498c:	d9409c17 	ldw	r5,624(sp)
  104990:	e2bfffc4 	addi	r10,fp,-1
  104994:	2c000017 	ldw	r16,0(r5)
  104998:	2c400104 	addi	r17,r5,4
  10499c:	8007883a 	mov	r3,r16
  1049a0:	82ab883a 	add	r21,r16,r10
  1049a4:	00000306 	br	1049b4 <__ssvfscanf_r+0x8c0>
  1049a8:	99000017 	ldw	r4,0(r19)
  1049ac:	e007883a 	mov	r3,fp
  1049b0:	20800003 	ldbu	r2,0(r4)
  1049b4:	10803fcc 	andi	r2,r2,255
  1049b8:	d9405884 	addi	r5,sp,354
  1049bc:	2885883a 	add	r2,r5,r2
  1049c0:	10800007 	ldb	r2,0(r2)
  1049c4:	10004b26 	beq	r2,zero,104af4 <__ssvfscanf_r+0xa00>
  1049c8:	98800117 	ldw	r2,4(r19)
  1049cc:	21400044 	addi	r5,r4,1
  1049d0:	99400015 	stw	r5,0(r19)
  1049d4:	10bfffc4 	addi	r2,r2,-1
  1049d8:	98800115 	stw	r2,4(r19)
  1049dc:	20800003 	ldbu	r2,0(r4)
  1049e0:	1f000044 	addi	fp,r3,1
  1049e4:	18800005 	stb	r2,0(r3)
  1049e8:	1d400726 	beq	r3,r21,104a08 <__ssvfscanf_r+0x914>
  1049ec:	98800117 	ldw	r2,4(r19)
  1049f0:	00bfed16 	blt	zero,r2,1049a8 <__alt_data_end+0xfffc49a8>
  1049f4:	980b883a 	mov	r5,r19
  1049f8:	b809883a 	mov	r4,r23
  1049fc:	0110a800 	call	110a80 <__ssrefill_r>
  104a00:	103fe926 	beq	r2,zero,1049a8 <__alt_data_end+0xfffc49a8>
  104a04:	87001526 	beq	r16,fp,104a5c <__ssvfscanf_r+0x968>
  104a08:	e421c83a 	sub	r16,fp,r16
  104a0c:	803dfa26 	beq	r16,zero,1041f8 <__alt_data_end+0xfffc41f8>
  104a10:	d880a017 	ldw	r2,640(sp)
  104a14:	e0000005 	stb	zero,0(fp)
  104a18:	dc409c15 	stw	r17,624(sp)
  104a1c:	10800044 	addi	r2,r2,1
  104a20:	d880a015 	stw	r2,640(sp)
  104a24:	9425883a 	add	r18,r18,r16
  104a28:	a00d883a 	mov	r6,r20
  104a2c:	003dee06 	br	1041e8 <__alt_data_end+0xfffc41e8>
  104a30:	013fff84 	movi	r4,-2
  104a34:	1103ed1e 	bne	r2,r4,1059ec <__ssvfscanf_r+0x18f8>
  104a38:	8821883a 	mov	r16,r17
  104a3c:	98800117 	ldw	r2,4(r19)
  104a40:	00834116 	blt	zero,r2,105748 <__ssvfscanf_r+0x1654>
  104a44:	980b883a 	mov	r5,r19
  104a48:	b809883a 	mov	r4,r23
  104a4c:	0110a800 	call	110a80 <__ssrefill_r>
  104a50:	10033d26 	beq	r2,zero,105748 <__ssvfscanf_r+0x1654>
  104a54:	dc409f17 	ldw	r17,636(sp)
  104a58:	80034426 	beq	r16,zero,10576c <__ssvfscanf_r+0x1678>
  104a5c:	d900a017 	ldw	r4,640(sp)
  104a60:	203e8026 	beq	r4,zero,104464 <__alt_data_end+0xfffc4464>
  104a64:	9880030b 	ldhu	r2,12(r19)
  104a68:	1080100c 	andi	r2,r2,64
  104a6c:	103e7d1e 	bne	r2,zero,104464 <__alt_data_end+0xfffc4464>
  104a70:	2005883a 	mov	r2,r4
  104a74:	003e7c06 	br	104468 <__alt_data_end+0xfffc4468>
  104a78:	e03f951e 	bne	fp,zero,1048d0 <__alt_data_end+0xfffc48d0>
  104a7c:	003fb806 	br	104960 <__alt_data_end+0xfffc4960>
  104a80:	d8809c17 	ldw	r2,624(sp)
  104a84:	15000017 	ldw	r20,0(r2)
  104a88:	10800104 	addi	r2,r2,4
  104a8c:	d8809c15 	stw	r2,624(sp)
  104a90:	003f8e06 	br	1048cc <__alt_data_end+0xfffc48cc>
  104a94:	980b883a 	mov	r5,r19
  104a98:	b809883a 	mov	r4,r23
  104a9c:	0110a800 	call	110a80 <__ssrefill_r>
  104aa0:	103f3626 	beq	r2,zero,10477c <__alt_data_end+0xfffc477c>
  104aa4:	003fed06 	br	104a5c <__alt_data_end+0xfffc4a5c>
  104aa8:	013fff84 	movi	r4,-2
  104aac:	1100071e 	bne	r2,r4,104acc <__ssvfscanf_r+0x9d8>
  104ab0:	98800117 	ldw	r2,4(r19)
  104ab4:	8023883a 	mov	r17,r16
  104ab8:	00bf8516 	blt	zero,r2,1048d0 <__alt_data_end+0xfffc48d0>
  104abc:	003fa306 	br	10494c <__alt_data_end+0xfffc494c>
  104ac0:	9425883a 	add	r18,r18,r16
  104ac4:	e73fffc4 	addi	fp,fp,-1
  104ac8:	003f9d06 	br	104940 <__alt_data_end+0xfffc4940>
  104acc:	d8c09f17 	ldw	r3,636(sp)
  104ad0:	9425883a 	add	r18,r18,r16
  104ad4:	e73fffc4 	addi	fp,fp,-1
  104ad8:	183f9826 	beq	r3,zero,10493c <__alt_data_end+0xfffc493c>
  104adc:	003f9806 	br	104940 <__alt_data_end+0xfffc4940>
  104ae0:	8023883a 	mov	r17,r16
  104ae4:	8821883a 	mov	r16,r17
  104ae8:	003fce06 	br	104a24 <__alt_data_end+0xfffc4a24>
  104aec:	803f3b1e 	bne	r16,zero,1047dc <__alt_data_end+0xfffc47dc>
  104af0:	003fda06 	br	104a5c <__alt_data_end+0xfffc4a5c>
  104af4:	1839883a 	mov	fp,r3
  104af8:	003fc306 	br	104a08 <__alt_data_end+0xfffc4a08>
  104afc:	803fc91e 	bne	r16,zero,104a24 <__alt_data_end+0xfffc4a24>
  104b00:	003dbd06 	br	1041f8 <__alt_data_end+0xfffc41f8>
  104b04:	d8809c17 	ldw	r2,624(sp)
  104b08:	dcc00015 	stw	r19,0(sp)
  104b0c:	b809883a 	mov	r4,r23
  104b10:	11400017 	ldw	r5,0(r2)
  104b14:	e00f883a 	mov	r7,fp
  104b18:	01800044 	movi	r6,1
  104b1c:	0110af00 	call	110af0 <_sfread_r>
  104b20:	d9009c17 	ldw	r4,624(sp)
  104b24:	20c00104 	addi	r3,r4,4
  104b28:	103fcc26 	beq	r2,zero,104a5c <__alt_data_end+0xfffc4a5c>
  104b2c:	d940a017 	ldw	r5,640(sp)
  104b30:	dd009d17 	ldw	r20,628(sp)
  104b34:	90a5883a 	add	r18,r18,r2
  104b38:	29400044 	addi	r5,r5,1
  104b3c:	d940a015 	stw	r5,640(sp)
  104b40:	d8c09c15 	stw	r3,624(sp)
  104b44:	a00d883a 	mov	r6,r20
  104b48:	003da706 	br	1041e8 <__alt_data_end+0xfffc41e8>
  104b4c:	980b883a 	mov	r5,r19
  104b50:	b809883a 	mov	r4,r23
  104b54:	0110a800 	call	110a80 <__ssrefill_r>
  104b58:	103e3626 	beq	r2,zero,104434 <__alt_data_end+0xfffc4434>
  104b5c:	003fbf06 	br	104a5c <__alt_data_end+0xfffc4a5c>
  104b60:	98800117 	ldw	r2,4(r19)
  104b64:	88e2b03a 	or	r17,r17,r3
  104b68:	0080210e 	bge	zero,r2,104bf0 <__ssvfscanf_r+0xafc>
  104b6c:	01400474 	movhi	r5,17
  104b70:	297a3704 	addi	r5,r5,-5924
  104b74:	00800284 	movi	r2,10
  104b78:	d940a115 	stw	r5,644(sp)
  104b7c:	d8809e15 	stw	r2,632(sp)
  104b80:	050000c4 	movi	r20,3
  104b84:	003e6906 	br	10452c <__alt_data_end+0xfffc452c>
  104b88:	a1400083 	ldbu	r5,2(r20)
  104b8c:	8c400094 	ori	r17,r17,2
  104b90:	a5000084 	addi	r20,r20,2
  104b94:	2d403fcc 	andi	r21,r5,255
  104b98:	003da106 	br	104220 <__alt_data_end+0xfffc4220>
  104b9c:	8880004c 	andi	r2,r17,1
  104ba0:	10000c1e 	bne	r2,zero,104bd4 <__ssvfscanf_r+0xae0>
  104ba4:	8c40008c 	andi	r17,r17,2
  104ba8:	88000a26 	beq	r17,zero,104bd4 <__ssvfscanf_r+0xae0>
  104bac:	d8c09c17 	ldw	r3,624(sp)
  104bb0:	d9009c17 	ldw	r4,624(sp)
  104bb4:	dd009d17 	ldw	r20,628(sp)
  104bb8:	18800017 	ldw	r2,0(r3)
  104bbc:	9007d7fa 	srai	r3,r18,31
  104bc0:	21000104 	addi	r4,r4,4
  104bc4:	14800015 	stw	r18,0(r2)
  104bc8:	10c00115 	stw	r3,4(r2)
  104bcc:	d9009c15 	stw	r4,624(sp)
  104bd0:	003d8406 	br	1041e4 <__alt_data_end+0xfffc41e4>
  104bd4:	d9409c17 	ldw	r5,624(sp)
  104bd8:	dd009d17 	ldw	r20,628(sp)
  104bdc:	28800017 	ldw	r2,0(r5)
  104be0:	29400104 	addi	r5,r5,4
  104be4:	d9409c15 	stw	r5,624(sp)
  104be8:	14800015 	stw	r18,0(r2)
  104bec:	003d7d06 	br	1041e4 <__alt_data_end+0xfffc41e4>
  104bf0:	980b883a 	mov	r5,r19
  104bf4:	b809883a 	mov	r4,r23
  104bf8:	0110a800 	call	110a80 <__ssrefill_r>
  104bfc:	103f971e 	bne	r2,zero,104a5c <__alt_data_end+0xfffc4a5c>
  104c00:	b4000017 	ldw	r16,0(r22)
  104c04:	003ed206 	br	104750 <__alt_data_end+0xfffc4750>
  104c08:	980b883a 	mov	r5,r19
  104c0c:	b809883a 	mov	r4,r23
  104c10:	0110a800 	call	110a80 <__ssrefill_r>
  104c14:	103f911e 	bne	r2,zero,104a5c <__alt_data_end+0xfffc4a5c>
  104c18:	01000474 	movhi	r4,17
  104c1c:	213b9504 	addi	r4,r4,-4524
  104c20:	01400404 	movi	r5,16
  104c24:	b4000017 	ldw	r16,0(r22)
  104c28:	d900a115 	stw	r4,644(sp)
  104c2c:	d9409e15 	stw	r5,632(sp)
  104c30:	050000c4 	movi	r20,3
  104c34:	003e3d06 	br	10452c <__alt_data_end+0xfffc452c>
  104c38:	980b883a 	mov	r5,r19
  104c3c:	b809883a 	mov	r4,r23
  104c40:	0110a800 	call	110a80 <__ssrefill_r>
  104c44:	103f851e 	bne	r2,zero,104a5c <__alt_data_end+0xfffc4a5c>
  104c48:	b4000017 	ldw	r16,0(r22)
  104c4c:	05000084 	movi	r20,2
  104c50:	003e3606 	br	10452c <__alt_data_end+0xfffc452c>
  104c54:	980b883a 	mov	r5,r19
  104c58:	b809883a 	mov	r4,r23
  104c5c:	0110a800 	call	110a80 <__ssrefill_r>
  104c60:	103eea26 	beq	r2,zero,10480c <__alt_data_end+0xfffc480c>
  104c64:	003f7d06 	br	104a5c <__alt_data_end+0xfffc4a5c>
  104c68:	980b883a 	mov	r5,r19
  104c6c:	b809883a 	mov	r4,r23
  104c70:	0110a800 	call	110a80 <__ssrefill_r>
  104c74:	103f791e 	bne	r2,zero,104a5c <__alt_data_end+0xfffc4a5c>
  104c78:	b4000017 	ldw	r16,0(r22)
  104c7c:	05000104 	movi	r20,4
  104c80:	003e2a06 	br	10452c <__alt_data_end+0xfffc452c>
  104c84:	980b883a 	mov	r5,r19
  104c88:	b809883a 	mov	r4,r23
  104c8c:	0110a800 	call	110a80 <__ssrefill_r>
  104c90:	103f721e 	bne	r2,zero,104a5c <__alt_data_end+0xfffc4a5c>
  104c94:	b4000017 	ldw	r16,0(r22)
  104c98:	003e8c06 	br	1046cc <__alt_data_end+0xfffc46cc>
  104c9c:	980b883a 	mov	r5,r19
  104ca0:	b809883a 	mov	r4,r23
  104ca4:	0110a800 	call	110a80 <__ssrefill_r>
  104ca8:	103f6c1e 	bne	r2,zero,104a5c <__alt_data_end+0xfffc4a5c>
  104cac:	00800474 	movhi	r2,17
  104cb0:	10bb9504 	addi	r2,r2,-4524
  104cb4:	00c00284 	movi	r3,10
  104cb8:	b4000017 	ldw	r16,0(r22)
  104cbc:	d880a115 	stw	r2,644(sp)
  104cc0:	d8c09e15 	stw	r3,632(sp)
  104cc4:	050000c4 	movi	r20,3
  104cc8:	003e1806 	br	10452c <__alt_data_end+0xfffc452c>
  104ccc:	980b883a 	mov	r5,r19
  104cd0:	b809883a 	mov	r4,r23
  104cd4:	0110a800 	call	110a80 <__ssrefill_r>
  104cd8:	103f601e 	bne	r2,zero,104a5c <__alt_data_end+0xfffc4a5c>
  104cdc:	00800474 	movhi	r2,17
  104ce0:	10bb9504 	addi	r2,r2,-4524
  104ce4:	00c00204 	movi	r3,8
  104ce8:	b4000017 	ldw	r16,0(r22)
  104cec:	d880a115 	stw	r2,644(sp)
  104cf0:	d8c09e15 	stw	r3,632(sp)
  104cf4:	050000c4 	movi	r20,3
  104cf8:	003e0c06 	br	10452c <__alt_data_end+0xfffc452c>
  104cfc:	980b883a 	mov	r5,r19
  104d00:	b809883a 	mov	r4,r23
  104d04:	0110a800 	call	110a80 <__ssrefill_r>
  104d08:	103f541e 	bne	r2,zero,104a5c <__alt_data_end+0xfffc4a5c>
  104d0c:	00800474 	movhi	r2,17
  104d10:	10ba3704 	addi	r2,r2,-5924
  104d14:	b4000017 	ldw	r16,0(r22)
  104d18:	d880a115 	stw	r2,644(sp)
  104d1c:	d8009e15 	stw	zero,632(sp)
  104d20:	050000c4 	movi	r20,3
  104d24:	003e0106 	br	10452c <__alt_data_end+0xfffc452c>
  104d28:	980b883a 	mov	r5,r19
  104d2c:	b809883a 	mov	r4,r23
  104d30:	0110a800 	call	110a80 <__ssrefill_r>
  104d34:	103f491e 	bne	r2,zero,104a5c <__alt_data_end+0xfffc4a5c>
  104d38:	00800474 	movhi	r2,17
  104d3c:	10bb9504 	addi	r2,r2,-4524
  104d40:	00c00404 	movi	r3,16
  104d44:	b4000017 	ldw	r16,0(r22)
  104d48:	d880a115 	stw	r2,644(sp)
  104d4c:	d8c09e15 	stw	r3,632(sp)
  104d50:	050000c4 	movi	r20,3
  104d54:	003df506 	br	10452c <__alt_data_end+0xfffc452c>
  104d58:	014000c4 	movi	r5,3
  104d5c:	a1416726 	beq	r20,r5,1052fc <__ssvfscanf_r+0x1208>
  104d60:	01000104 	movi	r4,4
  104d64:	a101491e 	bne	r20,r4,10528c <__ssvfscanf_r+0x1198>
  104d68:	b809883a 	mov	r4,r23
  104d6c:	010aaa40 	call	10aaa4 <_localeconv_r>
  104d70:	10800017 	ldw	r2,0(r2)
  104d74:	e0ffffc4 	addi	r3,fp,-1
  104d78:	d880a315 	stw	r2,652(sp)
  104d7c:	00805704 	movi	r2,348
  104d80:	10c21e2e 	bgeu	r2,r3,1055fc <__ssvfscanf_r+0x1508>
  104d84:	e73fa8c4 	addi	fp,fp,-349
  104d88:	df00a215 	stw	fp,648(sp)
  104d8c:	07005744 	movi	fp,349
  104d90:	8d01e014 	ori	r20,r17,1920
  104d94:	0023883a 	mov	r17,zero
  104d98:	dc000104 	addi	r16,sp,4
  104d9c:	002b883a 	mov	r21,zero
  104da0:	8805883a 	mov	r2,r17
  104da4:	0007883a 	mov	r3,zero
  104da8:	8023883a 	mov	r17,r16
  104dac:	b80d883a 	mov	r6,r23
  104db0:	e021883a 	mov	r16,fp
  104db4:	a82f883a 	mov	r23,r21
  104db8:	d800a515 	stw	zero,660(sp)
  104dbc:	d800a415 	stw	zero,656(sp)
  104dc0:	d8009f15 	stw	zero,636(sp)
  104dc4:	01c01384 	movi	r7,78
  104dc8:	182b883a 	mov	r21,r3
  104dcc:	1039883a 	mov	fp,r2
  104dd0:	99000017 	ldw	r4,0(r19)
  104dd4:	21400003 	ldbu	r5,0(r4)
  104dd8:	28bff544 	addi	r2,r5,-43
  104ddc:	10803fcc 	andi	r2,r2,255
  104de0:	38810e36 	bltu	r7,r2,10521c <__ssvfscanf_r+0x1128>
  104de4:	100490ba 	slli	r2,r2,2
  104de8:	00c00434 	movhi	r3,16
  104dec:	18d37f04 	addi	r3,r3,19964
  104df0:	10c5883a 	add	r2,r2,r3
  104df4:	10800017 	ldw	r2,0(r2)
  104df8:	1000683a 	jmp	r2
  104dfc:	001050f0 	cmpltui	zero,zero,16707
  104e00:	0010521c 	xori	zero,zero,16712
  104e04:	001050f0 	cmpltui	zero,zero,16707
  104e08:	0010521c 	xori	zero,zero,16712
  104e0c:	0010521c 	xori	zero,zero,16712
  104e10:	001050c4 	movi	zero,16707
  104e14:	00104f38 	rdprs	zero,zero,16700
  104e18:	00104f38 	rdprs	zero,zero,16700
  104e1c:	00104f38 	rdprs	zero,zero,16700
  104e20:	00104f38 	rdprs	zero,zero,16700
  104e24:	00104f38 	rdprs	zero,zero,16700
  104e28:	00104f38 	rdprs	zero,zero,16700
  104e2c:	00104f38 	rdprs	zero,zero,16700
  104e30:	00104f38 	rdprs	zero,zero,16700
  104e34:	00104f38 	rdprs	zero,zero,16700
  104e38:	0010521c 	xori	zero,zero,16712
  104e3c:	0010521c 	xori	zero,zero,16712
  104e40:	0010521c 	xori	zero,zero,16712
  104e44:	0010521c 	xori	zero,zero,16712
  104e48:	0010521c 	xori	zero,zero,16712
  104e4c:	0010521c 	xori	zero,zero,16712
  104e50:	0010521c 	xori	zero,zero,16712
  104e54:	0010520c 	andi	zero,zero,16712
  104e58:	0010521c 	xori	zero,zero,16712
  104e5c:	0010521c 	xori	zero,zero,16712
  104e60:	0010521c 	xori	zero,zero,16712
  104e64:	001051c8 	cmpgei	zero,zero,16711
  104e68:	001051ac 	andhi	zero,zero,16710
  104e6c:	0010521c 	xori	zero,zero,16712
  104e70:	0010521c 	xori	zero,zero,16712
  104e74:	00105174 	movhi	zero,16709
  104e78:	0010521c 	xori	zero,zero,16712
  104e7c:	0010521c 	xori	zero,zero,16712
  104e80:	0010521c 	xori	zero,zero,16712
  104e84:	0010521c 	xori	zero,zero,16712
  104e88:	0010513c 	xorhi	zero,zero,16708
  104e8c:	0010521c 	xori	zero,zero,16712
  104e90:	0010521c 	xori	zero,zero,16712
  104e94:	0010521c 	xori	zero,zero,16712
  104e98:	0010521c 	xori	zero,zero,16712
  104e9c:	0010521c 	xori	zero,zero,16712
  104ea0:	00105120 	cmpeqi	zero,zero,16708
  104ea4:	0010521c 	xori	zero,zero,16712
  104ea8:	0010521c 	xori	zero,zero,16712
  104eac:	0010521c 	xori	zero,zero,16712
  104eb0:	0010521c 	xori	zero,zero,16712
  104eb4:	00105104 	movi	zero,16708
  104eb8:	0010521c 	xori	zero,zero,16712
  104ebc:	0010521c 	xori	zero,zero,16712
  104ec0:	0010521c 	xori	zero,zero,16712
  104ec4:	0010521c 	xori	zero,zero,16712
  104ec8:	0010521c 	xori	zero,zero,16712
  104ecc:	0010521c 	xori	zero,zero,16712
  104ed0:	0010521c 	xori	zero,zero,16712
  104ed4:	0010520c 	andi	zero,zero,16712
  104ed8:	0010521c 	xori	zero,zero,16712
  104edc:	0010521c 	xori	zero,zero,16712
  104ee0:	0010521c 	xori	zero,zero,16712
  104ee4:	001051c8 	cmpgei	zero,zero,16711
  104ee8:	001051ac 	andhi	zero,zero,16710
  104eec:	0010521c 	xori	zero,zero,16712
  104ef0:	0010521c 	xori	zero,zero,16712
  104ef4:	00105174 	movhi	zero,16709
  104ef8:	0010521c 	xori	zero,zero,16712
  104efc:	0010521c 	xori	zero,zero,16712
  104f00:	0010521c 	xori	zero,zero,16712
  104f04:	0010521c 	xori	zero,zero,16712
  104f08:	0010513c 	xorhi	zero,zero,16708
  104f0c:	0010521c 	xori	zero,zero,16712
  104f10:	0010521c 	xori	zero,zero,16712
  104f14:	0010521c 	xori	zero,zero,16712
  104f18:	0010521c 	xori	zero,zero,16712
  104f1c:	0010521c 	xori	zero,zero,16712
  104f20:	00105120 	cmpeqi	zero,zero,16708
  104f24:	0010521c 	xori	zero,zero,16712
  104f28:	0010521c 	xori	zero,zero,16712
  104f2c:	0010521c 	xori	zero,zero,16712
  104f30:	0010521c 	xori	zero,zero,16712
  104f34:	00105104 	movi	zero,16708
  104f38:	a8803fcc 	andi	r2,r21,255
  104f3c:	1080201c 	xori	r2,r2,128
  104f40:	10bfe004 	addi	r2,r2,-128
  104f44:	b885883a 	add	r2,r23,r2
  104f48:	10000d1e 	bne	r2,zero,104f80 <__ssvfscanf_r+0xe8c>
  104f4c:	00bf9fc4 	movi	r2,-385
  104f50:	a0a8703a 	and	r20,r20,r2
  104f54:	89400005 	stb	r5,0(r17)
  104f58:	8c400044 	addi	r17,r17,1
  104f5c:	98800117 	ldw	r2,4(r19)
  104f60:	843fffc4 	addi	r16,r16,-1
  104f64:	94800044 	addi	r18,r18,1
  104f68:	10bfffc4 	addi	r2,r2,-1
  104f6c:	98800115 	stw	r2,4(r19)
  104f70:	0080b40e 	bge	zero,r2,105244 <__ssvfscanf_r+0x1150>
  104f74:	21000044 	addi	r4,r4,1
  104f78:	99000015 	stw	r4,0(r19)
  104f7c:	803f941e 	bne	r16,zero,104dd0 <__alt_data_end+0xfffc4dd0>
  104f80:	8821883a 	mov	r16,r17
  104f84:	a807883a 	mov	r3,r21
  104f88:	e023883a 	mov	r17,fp
  104f8c:	b82b883a 	mov	r21,r23
  104f90:	302f883a 	mov	r23,r6
  104f94:	e001961e 	bne	fp,zero,1055f0 <__ssvfscanf_r+0x14fc>
  104f98:	ab3fffc4 	addi	r12,r21,-1
  104f9c:	00800044 	movi	r2,1
  104fa0:	1302a22e 	bgeu	r2,r12,105a2c <__ssvfscanf_r+0x1938>
  104fa4:	18803fcc 	andi	r2,r3,255
  104fa8:	1080201c 	xori	r2,r2,128
  104fac:	10bfe004 	addi	r2,r2,-128
  104fb0:	113fffc4 	addi	r4,r2,-1
  104fb4:	01400184 	movi	r5,6
  104fb8:	29001136 	bltu	r5,r4,105000 <__ssvfscanf_r+0xf0c>
  104fbc:	01000084 	movi	r4,2
  104fc0:	2082770e 	bge	r4,r2,1059a0 <__ssvfscanf_r+0x18ac>
  104fc4:	054000c4 	movi	r21,3
  104fc8:	1839883a 	mov	fp,r3
  104fcc:	15400c26 	beq	r2,r21,105000 <__ssvfscanf_r+0xf0c>
  104fd0:	9425c83a 	sub	r18,r18,r16
  104fd4:	843fffc4 	addi	r16,r16,-1
  104fd8:	81400007 	ldb	r5,0(r16)
  104fdc:	980d883a 	mov	r6,r19
  104fe0:	b809883a 	mov	r4,r23
  104fe4:	01109780 	call	110978 <_sungetc_r>
  104fe8:	e0bfffc4 	addi	r2,fp,-1
  104fec:	10c03fcc 	andi	r3,r2,255
  104ff0:	8493883a 	add	r9,r16,r18
  104ff4:	1039883a 	mov	fp,r2
  104ff8:	a8fff636 	bltu	r21,r3,104fd4 <__alt_data_end+0xfffc4fd4>
  104ffc:	4825883a 	mov	r18,r9
  105000:	a080400c 	andi	r2,r20,256
  105004:	10001426 	beq	r2,zero,105058 <__ssvfscanf_r+0xf64>
  105008:	a081000c 	andi	r2,r20,1024
  10500c:	10027b1e 	bne	r2,zero,1059fc <__ssvfscanf_r+0x1908>
  105010:	817fffc7 	ldb	r5,-1(r16)
  105014:	00801944 	movi	r2,101
  105018:	873fffc4 	addi	fp,r16,-1
  10501c:	957fffc4 	addi	r21,r18,-1
  105020:	28800826 	beq	r5,r2,105044 <__ssvfscanf_r+0xf50>
  105024:	00801144 	movi	r2,69
  105028:	28800626 	beq	r5,r2,105044 <__ssvfscanf_r+0xf50>
  10502c:	980d883a 	mov	r6,r19
  105030:	b809883a 	mov	r4,r23
  105034:	01109780 	call	110978 <_sungetc_r>
  105038:	817fff87 	ldb	r5,-2(r16)
  10503c:	873fff84 	addi	fp,r16,-2
  105040:	957fff84 	addi	r21,r18,-2
  105044:	980d883a 	mov	r6,r19
  105048:	b809883a 	mov	r4,r23
  10504c:	01109780 	call	110978 <_sungetc_r>
  105050:	a825883a 	mov	r18,r21
  105054:	e021883a 	mov	r16,fp
  105058:	a080040c 	andi	r2,r20,16
  10505c:	103e451e 	bne	r2,zero,104974 <__alt_data_end+0xfffc4974>
  105060:	80000005 	stb	zero,0(r16)
  105064:	a081800c 	andi	r2,r20,1536
  105068:	01010004 	movi	r4,1024
  10506c:	1101ea26 	beq	r2,r4,105818 <__ssvfscanf_r+0x1724>
  105070:	d8c0a417 	ldw	r3,656(sp)
  105074:	1801f41e 	bne	r3,zero,105848 <__ssvfscanf_r+0x1754>
  105078:	000d883a 	mov	r6,zero
  10507c:	d9400104 	addi	r5,sp,4
  105080:	b809883a 	mov	r4,r23
  105084:	010d1e00 	call	10d1e0 <_strtod_r>
  105088:	1021883a 	mov	r16,r2
  10508c:	a080004c 	andi	r2,r20,1
  105090:	1001b926 	beq	r2,zero,105778 <__ssvfscanf_r+0x1684>
  105094:	d9009c17 	ldw	r4,624(sp)
  105098:	20800017 	ldw	r2,0(r4)
  10509c:	21000104 	addi	r4,r4,4
  1050a0:	d9009c15 	stw	r4,624(sp)
  1050a4:	14000015 	stw	r16,0(r2)
  1050a8:	10c00115 	stw	r3,4(r2)
  1050ac:	d8c0a017 	ldw	r3,640(sp)
  1050b0:	dd009d17 	ldw	r20,628(sp)
  1050b4:	18c00044 	addi	r3,r3,1
  1050b8:	d8c0a015 	stw	r3,640(sp)
  1050bc:	a00d883a 	mov	r6,r20
  1050c0:	003c4906 	br	1041e8 <__alt_data_end+0xfffc41e8>
  1050c4:	a080400c 	andi	r2,r20,256
  1050c8:	103f9b26 	beq	r2,zero,104f38 <__alt_data_end+0xfffc4f38>
  1050cc:	d8c0a217 	ldw	r3,648(sp)
  1050d0:	00bfdfc4 	movi	r2,-129
  1050d4:	a0a8703a 	and	r20,r20,r2
  1050d8:	e7000044 	addi	fp,fp,1
  1050dc:	183f9f26 	beq	r3,zero,104f5c <__alt_data_end+0xfffc4f5c>
  1050e0:	18ffffc4 	addi	r3,r3,-1
  1050e4:	d8c0a215 	stw	r3,648(sp)
  1050e8:	84000044 	addi	r16,r16,1
  1050ec:	003f9b06 	br	104f5c <__alt_data_end+0xfffc4f5c>
  1050f0:	a080200c 	andi	r2,r20,128
  1050f4:	103fa226 	beq	r2,zero,104f80 <__alt_data_end+0xfffc4f80>
  1050f8:	00bfdfc4 	movi	r2,-129
  1050fc:	a0a8703a 	and	r20,r20,r2
  105100:	003f9406 	br	104f54 <__alt_data_end+0xfffc4f54>
  105104:	a8803fcc 	andi	r2,r21,255
  105108:	1080201c 	xori	r2,r2,128
  10510c:	10bfe004 	addi	r2,r2,-128
  105110:	00c001c4 	movi	r3,7
  105114:	10ff9a1e 	bne	r2,r3,104f80 <__alt_data_end+0xfffc4f80>
  105118:	05400204 	movi	r21,8
  10511c:	003f8d06 	br	104f54 <__alt_data_end+0xfffc4f54>
  105120:	a8803fcc 	andi	r2,r21,255
  105124:	1080201c 	xori	r2,r2,128
  105128:	10bfe004 	addi	r2,r2,-128
  10512c:	02000184 	movi	r8,6
  105130:	123f931e 	bne	r2,r8,104f80 <__alt_data_end+0xfffc4f80>
  105134:	054001c4 	movi	r21,7
  105138:	003f8606 	br	104f54 <__alt_data_end+0xfffc4f54>
  10513c:	b8004f1e 	bne	r23,zero,10527c <__ssvfscanf_r+0x1188>
  105140:	e000031e 	bne	fp,zero,105150 <__ssvfscanf_r+0x105c>
  105144:	a081c00c 	andi	r2,r20,1792
  105148:	0201c004 	movi	r8,1792
  10514c:	1201a226 	beq	r2,r8,1057d8 <__ssvfscanf_r+0x16e4>
  105150:	a8803fcc 	andi	r2,r21,255
  105154:	1080201c 	xori	r2,r2,128
  105158:	10bfe004 	addi	r2,r2,-128
  10515c:	02000044 	movi	r8,1
  105160:	12000226 	beq	r2,r8,10516c <__ssvfscanf_r+0x1078>
  105164:	02000104 	movi	r8,4
  105168:	123f851e 	bne	r2,r8,104f80 <__alt_data_end+0xfffc4f80>
  10516c:	ad400044 	addi	r21,r21,1
  105170:	003f7806 	br	104f54 <__alt_data_end+0xfffc4f54>
  105174:	a8803fcc 	andi	r2,r21,255
  105178:	1080201c 	xori	r2,r2,128
  10517c:	10bfe004 	addi	r2,r2,-128
  105180:	1000391e 	bne	r2,zero,105268 <__ssvfscanf_r+0x1174>
  105184:	e001151e 	bne	fp,zero,1055dc <__ssvfscanf_r+0x14e8>
  105188:	a081c00c 	andi	r2,r20,1792
  10518c:	0201c004 	movi	r8,1792
  105190:	12019b26 	beq	r2,r8,105800 <__ssvfscanf_r+0x170c>
  105194:	8821883a 	mov	r16,r17
  105198:	a807883a 	mov	r3,r21
  10519c:	e023883a 	mov	r17,fp
  1051a0:	b82b883a 	mov	r21,r23
  1051a4:	302f883a 	mov	r23,r6
  1051a8:	003f7b06 	br	104f98 <__alt_data_end+0xfffc4f98>
  1051ac:	a8803fcc 	andi	r2,r21,255
  1051b0:	1080201c 	xori	r2,r2,128
  1051b4:	10bfe004 	addi	r2,r2,-128
  1051b8:	02000084 	movi	r8,2
  1051bc:	123f701e 	bne	r2,r8,104f80 <__alt_data_end+0xfffc4f80>
  1051c0:	054000c4 	movi	r21,3
  1051c4:	003f6306 	br	104f54 <__alt_data_end+0xfffc4f54>
  1051c8:	a081400c 	andi	r2,r20,1280
  1051cc:	00c10004 	movi	r3,1024
  1051d0:	10c00326 	beq	r2,r3,1051e0 <__ssvfscanf_r+0x10ec>
  1051d4:	a0c4703a 	and	r2,r20,r3
  1051d8:	103f6926 	beq	r2,zero,104f80 <__alt_data_end+0xfffc4f80>
  1051dc:	e03fed26 	beq	fp,zero,105194 <__alt_data_end+0xfffc5194>
  1051e0:	a080800c 	andi	r2,r20,512
  1051e4:	1000041e 	bne	r2,zero,1051f8 <__ssvfscanf_r+0x1104>
  1051e8:	d8c09f17 	ldw	r3,636(sp)
  1051ec:	dc40a515 	stw	r17,660(sp)
  1051f0:	e0f9c83a 	sub	fp,fp,r3
  1051f4:	df00a415 	stw	fp,656(sp)
  1051f8:	00be1fc4 	movi	r2,-1921
  1051fc:	a0a8703a 	and	r20,r20,r2
  105200:	a5006014 	ori	r20,r20,384
  105204:	0039883a 	mov	fp,zero
  105208:	003f5206 	br	104f54 <__alt_data_end+0xfffc4f54>
  10520c:	00800044 	movi	r2,1
  105210:	b8bf5b1e 	bne	r23,r2,104f80 <__alt_data_end+0xfffc4f80>
  105214:	05c00084 	movi	r23,2
  105218:	003f4e06 	br	104f54 <__alt_data_end+0xfffc4f54>
  10521c:	d8c0a317 	ldw	r3,652(sp)
  105220:	2a003fcc 	andi	r8,r5,255
  105224:	18800003 	ldbu	r2,0(r3)
  105228:	40bf551e 	bne	r8,r2,104f80 <__alt_data_end+0xfffc4f80>
  10522c:	a080800c 	andi	r2,r20,512
  105230:	103f5326 	beq	r2,zero,104f80 <__alt_data_end+0xfffc4f80>
  105234:	00bf5fc4 	movi	r2,-641
  105238:	a0a8703a 	and	r20,r20,r2
  10523c:	df009f15 	stw	fp,636(sp)
  105240:	003f4406 	br	104f54 <__alt_data_end+0xfffc4f54>
  105244:	3009883a 	mov	r4,r6
  105248:	980b883a 	mov	r5,r19
  10524c:	d980a915 	stw	r6,676(sp)
  105250:	d9c0aa15 	stw	r7,680(sp)
  105254:	0110a800 	call	110a80 <__ssrefill_r>
  105258:	d980a917 	ldw	r6,676(sp)
  10525c:	d9c0aa17 	ldw	r7,680(sp)
  105260:	103f4626 	beq	r2,zero,104f7c <__alt_data_end+0xfffc4f7c>
  105264:	003f4606 	br	104f80 <__alt_data_end+0xfffc4f80>
  105268:	020000c4 	movi	r8,3
  10526c:	123fbf26 	beq	r2,r8,10516c <__alt_data_end+0xfffc516c>
  105270:	02000144 	movi	r8,5
  105274:	123fbd26 	beq	r2,r8,10516c <__alt_data_end+0xfffc516c>
  105278:	003f4106 	br	104f80 <__alt_data_end+0xfffc4f80>
  10527c:	00800084 	movi	r2,2
  105280:	b8bfb31e 	bne	r23,r2,105150 <__alt_data_end+0xfffc5150>
  105284:	05c000c4 	movi	r23,3
  105288:	003f3206 	br	104f54 <__alt_data_end+0xfffc4f54>
  10528c:	e000011e 	bne	fp,zero,105294 <__ssvfscanf_r+0x11a0>
  105290:	073fffc4 	movi	fp,-1
  105294:	8900004c 	andi	r4,r17,1
  105298:	20011d1e 	bne	r4,zero,105710 <__ssvfscanf_r+0x161c>
  10529c:	8c40040c 	andi	r17,r17,16
  1052a0:	8800da26 	beq	r17,zero,10560c <__ssvfscanf_r+0x1518>
  1052a4:	0023883a 	mov	r17,zero
  1052a8:	00000306 	br	1052b8 <__ssvfscanf_r+0x11c4>
  1052ac:	18800003 	ldbu	r2,0(r3)
  1052b0:	8085883a 	add	r2,r16,r2
  1052b4:	10800043 	ldbu	r2,1(r2)
  1052b8:	1080020c 	andi	r2,r2,8
  1052bc:	1000fc1e 	bne	r2,zero,1056b0 <__ssvfscanf_r+0x15bc>
  1052c0:	98800117 	ldw	r2,4(r19)
  1052c4:	18c00044 	addi	r3,r3,1
  1052c8:	8c400044 	addi	r17,r17,1
  1052cc:	10bfffc4 	addi	r2,r2,-1
  1052d0:	98800115 	stw	r2,4(r19)
  1052d4:	98c00015 	stw	r3,0(r19)
  1052d8:	8f00f526 	beq	r17,fp,1056b0 <__ssvfscanf_r+0x15bc>
  1052dc:	00bff316 	blt	zero,r2,1052ac <__alt_data_end+0xfffc52ac>
  1052e0:	980b883a 	mov	r5,r19
  1052e4:	b809883a 	mov	r4,r23
  1052e8:	0110a800 	call	110a80 <__ssrefill_r>
  1052ec:	1000f01e 	bne	r2,zero,1056b0 <__ssvfscanf_r+0x15bc>
  1052f0:	b4000017 	ldw	r16,0(r22)
  1052f4:	98c00017 	ldw	r3,0(r19)
  1052f8:	003fec06 	br	1052ac <__alt_data_end+0xfffc52ac>
  1052fc:	e0bfffc4 	addi	r2,fp,-1
  105300:	01405704 	movi	r5,348
  105304:	2880bf2e 	bgeu	r5,r2,105604 <__ssvfscanf_r+0x1510>
  105308:	e1ffa8c4 	addi	r7,fp,-349
  10530c:	07005744 	movi	fp,349
  105310:	8c436014 	ori	r17,r17,3456
  105314:	9013883a 	mov	r9,r18
  105318:	8825883a 	mov	r18,r17
  10531c:	dc409e17 	ldw	r17,632(sp)
  105320:	0029883a 	mov	r20,zero
  105324:	dc000104 	addi	r16,sp,4
  105328:	05401344 	movi	r21,77
  10532c:	02c08004 	movi	r11,512
  105330:	01bf7fc4 	movi	r6,-513
  105334:	023fdfc4 	movi	r8,-129
  105338:	20bff544 	addi	r2,r4,-43
  10533c:	10803fcc 	andi	r2,r2,255
  105340:	a8807236 	bltu	r21,r2,10550c <__ssvfscanf_r+0x1418>
  105344:	100490ba 	slli	r2,r2,2
  105348:	01400434 	movhi	r5,16
  10534c:	2954d704 	addi	r5,r5,21340
  105350:	1145883a 	add	r2,r2,r5
  105354:	10800017 	ldw	r2,0(r2)
  105358:	1000683a 	jmp	r2
  10535c:	00105590 	cmplti	zero,zero,16726
  105360:	0010550c 	andi	zero,zero,16724
  105364:	00105590 	cmplti	zero,zero,16726
  105368:	0010550c 	andi	zero,zero,16724
  10536c:	0010550c 	andi	zero,zero,16724
  105370:	00105568 	cmpgeui	zero,zero,16725
  105374:	00105548 	cmpgei	zero,zero,16725
  105378:	00105548 	cmpgei	zero,zero,16725
  10537c:	00105548 	cmpgei	zero,zero,16725
  105380:	00105548 	cmpgei	zero,zero,16725
  105384:	00105548 	cmpgei	zero,zero,16725
  105388:	00105548 	cmpgei	zero,zero,16725
  10538c:	00105548 	cmpgei	zero,zero,16725
  105390:	001054f0 	cmpltui	zero,zero,16723
  105394:	001054f0 	cmpltui	zero,zero,16723
  105398:	0010550c 	andi	zero,zero,16724
  10539c:	0010550c 	andi	zero,zero,16724
  1053a0:	0010550c 	andi	zero,zero,16724
  1053a4:	0010550c 	andi	zero,zero,16724
  1053a8:	0010550c 	andi	zero,zero,16724
  1053ac:	0010550c 	andi	zero,zero,16724
  1053b0:	0010550c 	andi	zero,zero,16724
  1053b4:	001054dc 	xori	zero,zero,16723
  1053b8:	001054dc 	xori	zero,zero,16723
  1053bc:	001054dc 	xori	zero,zero,16723
  1053c0:	001054dc 	xori	zero,zero,16723
  1053c4:	001054dc 	xori	zero,zero,16723
  1053c8:	001054dc 	xori	zero,zero,16723
  1053cc:	0010550c 	andi	zero,zero,16724
  1053d0:	0010550c 	andi	zero,zero,16724
  1053d4:	0010550c 	andi	zero,zero,16724
  1053d8:	0010550c 	andi	zero,zero,16724
  1053dc:	0010550c 	andi	zero,zero,16724
  1053e0:	0010550c 	andi	zero,zero,16724
  1053e4:	0010550c 	andi	zero,zero,16724
  1053e8:	0010550c 	andi	zero,zero,16724
  1053ec:	0010550c 	andi	zero,zero,16724
  1053f0:	0010550c 	andi	zero,zero,16724
  1053f4:	0010550c 	andi	zero,zero,16724
  1053f8:	0010550c 	andi	zero,zero,16724
  1053fc:	0010550c 	andi	zero,zero,16724
  105400:	0010550c 	andi	zero,zero,16724
  105404:	0010550c 	andi	zero,zero,16724
  105408:	0010550c 	andi	zero,zero,16724
  10540c:	0010550c 	andi	zero,zero,16724
  105410:	00105494 	movui	zero,16722
  105414:	0010550c 	andi	zero,zero,16724
  105418:	0010550c 	andi	zero,zero,16724
  10541c:	0010550c 	andi	zero,zero,16724
  105420:	0010550c 	andi	zero,zero,16724
  105424:	0010550c 	andi	zero,zero,16724
  105428:	0010550c 	andi	zero,zero,16724
  10542c:	0010550c 	andi	zero,zero,16724
  105430:	0010550c 	andi	zero,zero,16724
  105434:	001054dc 	xori	zero,zero,16723
  105438:	001054dc 	xori	zero,zero,16723
  10543c:	001054dc 	xori	zero,zero,16723
  105440:	001054dc 	xori	zero,zero,16723
  105444:	001054dc 	xori	zero,zero,16723
  105448:	001054dc 	xori	zero,zero,16723
  10544c:	0010550c 	andi	zero,zero,16724
  105450:	0010550c 	andi	zero,zero,16724
  105454:	0010550c 	andi	zero,zero,16724
  105458:	0010550c 	andi	zero,zero,16724
  10545c:	0010550c 	andi	zero,zero,16724
  105460:	0010550c 	andi	zero,zero,16724
  105464:	0010550c 	andi	zero,zero,16724
  105468:	0010550c 	andi	zero,zero,16724
  10546c:	0010550c 	andi	zero,zero,16724
  105470:	0010550c 	andi	zero,zero,16724
  105474:	0010550c 	andi	zero,zero,16724
  105478:	0010550c 	andi	zero,zero,16724
  10547c:	0010550c 	andi	zero,zero,16724
  105480:	0010550c 	andi	zero,zero,16724
  105484:	0010550c 	andi	zero,zero,16724
  105488:	0010550c 	andi	zero,zero,16724
  10548c:	0010550c 	andi	zero,zero,16724
  105490:	00105494 	movui	zero,16722
  105494:	9081800c 	andi	r2,r18,1536
  105498:	12c01c1e 	bne	r2,r11,10550c <__ssvfscanf_r+0x1418>
  10549c:	91a4703a 	and	r18,r18,r6
  1054a0:	94814014 	ori	r18,r18,1280
  1054a4:	04400404 	movi	r17,16
  1054a8:	81000005 	stb	r4,0(r16)
  1054ac:	84000044 	addi	r16,r16,1
  1054b0:	98800117 	ldw	r2,4(r19)
  1054b4:	10bfffc4 	addi	r2,r2,-1
  1054b8:	98800115 	stw	r2,4(r19)
  1054bc:	0080380e 	bge	zero,r2,1055a0 <__ssvfscanf_r+0x14ac>
  1054c0:	18c00044 	addi	r3,r3,1
  1054c4:	98c00015 	stw	r3,0(r19)
  1054c8:	e73fffc4 	addi	fp,fp,-1
  1054cc:	e0000f26 	beq	fp,zero,10550c <__ssvfscanf_r+0x1418>
  1054d0:	98c00017 	ldw	r3,0(r19)
  1054d4:	19000003 	ldbu	r4,0(r3)
  1054d8:	003f9706 	br	105338 <__alt_data_end+0xfffc5338>
  1054dc:	00800284 	movi	r2,10
  1054e0:	14400a0e 	bge	r2,r17,10550c <__ssvfscanf_r+0x1418>
  1054e4:	00bd1fc4 	movi	r2,-2945
  1054e8:	90a4703a 	and	r18,r18,r2
  1054ec:	003fee06 	br	1054a8 <__alt_data_end+0xfffc54a8>
  1054f0:	014004b4 	movhi	r5,18
  1054f4:	8c63883a 	add	r17,r17,r17
  1054f8:	294ca184 	addi	r5,r5,12934
  1054fc:	2c45883a 	add	r2,r5,r17
  105500:	1440000f 	ldh	r17,0(r2)
  105504:	00800204 	movi	r2,8
  105508:	147ff616 	blt	r2,r17,1054e4 <__alt_data_end+0xfffc54e4>
  10550c:	dc409e15 	stw	r17,632(sp)
  105510:	9023883a 	mov	r17,r18
  105514:	8880400c 	andi	r2,r17,256
  105518:	4825883a 	mov	r18,r9
  10551c:	10000426 	beq	r2,zero,105530 <__ssvfscanf_r+0x143c>
  105520:	d8800104 	addi	r2,sp,4
  105524:	1400b036 	bltu	r2,r16,1057e8 <__ssvfscanf_r+0x16f4>
  105528:	d8c00104 	addi	r3,sp,4
  10552c:	1c3b3226 	beq	r3,r16,1041f8 <__alt_data_end+0xfffc41f8>
  105530:	8880040c 	andi	r2,r17,16
  105534:	10006226 	beq	r2,zero,1056c0 <__ssvfscanf_r+0x15cc>
  105538:	d8800104 	addi	r2,sp,4
  10553c:	80a1c83a 	sub	r16,r16,r2
  105540:	8521883a 	add	r16,r16,r20
  105544:	003ca506 	br	1047dc <__alt_data_end+0xfffc47dc>
  105548:	014004b4 	movhi	r5,18
  10554c:	8c63883a 	add	r17,r17,r17
  105550:	294ca184 	addi	r5,r5,12934
  105554:	2c45883a 	add	r2,r5,r17
  105558:	1440000f 	ldh	r17,0(r2)
  10555c:	00bd1fc4 	movi	r2,-2945
  105560:	90a4703a 	and	r18,r18,r2
  105564:	003fd006 	br	1054a8 <__alt_data_end+0xfffc54a8>
  105568:	9082000c 	andi	r2,r18,2048
  10556c:	103fce26 	beq	r2,zero,1054a8 <__alt_data_end+0xfffc54a8>
  105570:	8800021e 	bne	r17,zero,10557c <__ssvfscanf_r+0x1488>
  105574:	94808014 	ori	r18,r18,512
  105578:	04400204 	movi	r17,8
  10557c:	9081000c 	andi	r2,r18,1024
  105580:	10008626 	beq	r2,zero,10579c <__ssvfscanf_r+0x16a8>
  105584:	00be9fc4 	movi	r2,-1409
  105588:	90a4703a 	and	r18,r18,r2
  10558c:	003fc606 	br	1054a8 <__alt_data_end+0xfffc54a8>
  105590:	9080200c 	andi	r2,r18,128
  105594:	103fdd26 	beq	r2,zero,10550c <__alt_data_end+0xfffc550c>
  105598:	9224703a 	and	r18,r18,r8
  10559c:	003fc206 	br	1054a8 <__alt_data_end+0xfffc54a8>
  1055a0:	980b883a 	mov	r5,r19
  1055a4:	b809883a 	mov	r4,r23
  1055a8:	d980a915 	stw	r6,676(sp)
  1055ac:	d9c0aa15 	stw	r7,680(sp)
  1055b0:	da00a715 	stw	r8,668(sp)
  1055b4:	da40a815 	stw	r9,672(sp)
  1055b8:	dac0a615 	stw	r11,664(sp)
  1055bc:	0110a800 	call	110a80 <__ssrefill_r>
  1055c0:	d980a917 	ldw	r6,676(sp)
  1055c4:	d9c0aa17 	ldw	r7,680(sp)
  1055c8:	da00a717 	ldw	r8,668(sp)
  1055cc:	da40a817 	ldw	r9,672(sp)
  1055d0:	dac0a617 	ldw	r11,664(sp)
  1055d4:	103fbc26 	beq	r2,zero,1054c8 <__alt_data_end+0xfffc54c8>
  1055d8:	003fcc06 	br	10550c <__alt_data_end+0xfffc550c>
  1055dc:	8821883a 	mov	r16,r17
  1055e0:	a807883a 	mov	r3,r21
  1055e4:	e023883a 	mov	r17,fp
  1055e8:	b82b883a 	mov	r21,r23
  1055ec:	302f883a 	mov	r23,r6
  1055f0:	00bfbfc4 	movi	r2,-257
  1055f4:	a0a8703a 	and	r20,r20,r2
  1055f8:	003e6706 	br	104f98 <__alt_data_end+0xfffc4f98>
  1055fc:	d800a215 	stw	zero,648(sp)
  105600:	003de306 	br	104d90 <__alt_data_end+0xfffc4d90>
  105604:	000f883a 	mov	r7,zero
  105608:	003f4106 	br	105310 <__alt_data_end+0xfffc5310>
  10560c:	d9409c17 	ldw	r5,624(sp)
  105610:	e2bfffc4 	addi	r10,fp,-1
  105614:	2c400017 	ldw	r17,0(r5)
  105618:	2c000104 	addi	r16,r5,4
  10561c:	8aa9883a 	add	r20,r17,r10
  105620:	880b883a 	mov	r5,r17
  105624:	00000606 	br	105640 <__ssvfscanf_r+0x154c>
  105628:	98c00017 	ldw	r3,0(r19)
  10562c:	b1000017 	ldw	r4,0(r22)
  105630:	a80b883a 	mov	r5,r21
  105634:	18800003 	ldbu	r2,0(r3)
  105638:	2085883a 	add	r2,r4,r2
  10563c:	10800043 	ldbu	r2,1(r2)
  105640:	1080020c 	andi	r2,r2,8
  105644:	1000621e 	bne	r2,zero,1057d0 <__ssvfscanf_r+0x16dc>
  105648:	98800117 	ldw	r2,4(r19)
  10564c:	19000044 	addi	r4,r3,1
  105650:	99000015 	stw	r4,0(r19)
  105654:	10bfffc4 	addi	r2,r2,-1
  105658:	98800115 	stw	r2,4(r19)
  10565c:	18800003 	ldbu	r2,0(r3)
  105660:	2d400044 	addi	r21,r5,1
  105664:	a839883a 	mov	fp,r21
  105668:	28800005 	stb	r2,0(r5)
  10566c:	2d000626 	beq	r5,r20,105688 <__ssvfscanf_r+0x1594>
  105670:	98800117 	ldw	r2,4(r19)
  105674:	00bfec16 	blt	zero,r2,105628 <__alt_data_end+0xfffc5628>
  105678:	980b883a 	mov	r5,r19
  10567c:	b809883a 	mov	r4,r23
  105680:	0110a800 	call	110a80 <__ssrefill_r>
  105684:	103fe826 	beq	r2,zero,105628 <__alt_data_end+0xfffc5628>
  105688:	d880a017 	ldw	r2,640(sp)
  10568c:	dd009d17 	ldw	r20,628(sp)
  105690:	e463c83a 	sub	r17,fp,r17
  105694:	10800044 	addi	r2,r2,1
  105698:	e0000005 	stb	zero,0(fp)
  10569c:	9465883a 	add	r18,r18,r17
  1056a0:	d880a015 	stw	r2,640(sp)
  1056a4:	dc009c15 	stw	r16,624(sp)
  1056a8:	a00d883a 	mov	r6,r20
  1056ac:	003ace06 	br	1041e8 <__alt_data_end+0xfffc41e8>
  1056b0:	dd009d17 	ldw	r20,628(sp)
  1056b4:	9465883a 	add	r18,r18,r17
  1056b8:	a00d883a 	mov	r6,r20
  1056bc:	003aca06 	br	1041e8 <__alt_data_end+0xfffc41e8>
  1056c0:	d8c0a117 	ldw	r3,644(sp)
  1056c4:	d9c09e17 	ldw	r7,632(sp)
  1056c8:	000d883a 	mov	r6,zero
  1056cc:	d9400104 	addi	r5,sp,4
  1056d0:	b809883a 	mov	r4,r23
  1056d4:	80000005 	stb	zero,0(r16)
  1056d8:	183ee83a 	callr	r3
  1056dc:	88c0080c 	andi	r3,r17,32
  1056e0:	1800351e 	bne	r3,zero,1057b8 <__ssvfscanf_r+0x16c4>
  1056e4:	88c0010c 	andi	r3,r17,4
  1056e8:	18007026 	beq	r3,zero,1058ac <__ssvfscanf_r+0x17b8>
  1056ec:	d9409c17 	ldw	r5,624(sp)
  1056f0:	28c00017 	ldw	r3,0(r5)
  1056f4:	29400104 	addi	r5,r5,4
  1056f8:	d9409c15 	stw	r5,624(sp)
  1056fc:	1880000d 	sth	r2,0(r3)
  105700:	d940a017 	ldw	r5,640(sp)
  105704:	29400044 	addi	r5,r5,1
  105708:	d940a015 	stw	r5,640(sp)
  10570c:	003f8a06 	br	105538 <__alt_data_end+0xfffc5538>
  105710:	dd409904 	addi	r21,sp,612
  105714:	8c40040c 	andi	r17,r17,16
  105718:	01800204 	movi	r6,8
  10571c:	000b883a 	mov	r5,zero
  105720:	a809883a 	mov	r4,r21
  105724:	01016c40 	call	1016c4 <memset>
  105728:	8800391e 	bne	r17,zero,105810 <__ssvfscanf_r+0x171c>
  10572c:	d8c09c17 	ldw	r3,624(sp)
  105730:	1d000017 	ldw	r20,0(r3)
  105734:	18c00104 	addi	r3,r3,4
  105738:	d8c09c15 	stw	r3,624(sp)
  10573c:	000d883a 	mov	r6,zero
  105740:	3021883a 	mov	r16,r6
  105744:	dc409f15 	stw	r17,636(sp)
  105748:	98800017 	ldw	r2,0(r19)
  10574c:	b0c00017 	ldw	r3,0(r22)
  105750:	10800003 	ldbu	r2,0(r2)
  105754:	1885883a 	add	r2,r3,r2
  105758:	10800043 	ldbu	r2,1(r2)
  10575c:	1080020c 	andi	r2,r2,8
  105760:	1000011e 	bne	r2,zero,105768 <__ssvfscanf_r+0x1674>
  105764:	e000651e 	bne	fp,zero,1058fc <__ssvfscanf_r+0x1808>
  105768:	dc409f17 	ldw	r17,636(sp)
  10576c:	883c811e 	bne	r17,zero,104974 <__alt_data_end+0xfffc4974>
  105770:	a0000015 	stw	zero,0(r20)
  105774:	003c7c06 	br	104968 <__alt_data_end+0xfffc4968>
  105778:	a2c0008c 	andi	r11,r20,2
  10577c:	58003c26 	beq	r11,zero,105870 <__ssvfscanf_r+0x177c>
  105780:	d9409c17 	ldw	r5,624(sp)
  105784:	28800017 	ldw	r2,0(r5)
  105788:	29400104 	addi	r5,r5,4
  10578c:	d9409c15 	stw	r5,624(sp)
  105790:	14000015 	stw	r16,0(r2)
  105794:	10c00115 	stw	r3,4(r2)
  105798:	003e4406 	br	1050ac <__alt_data_end+0xfffc50ac>
  10579c:	00bf1fc4 	movi	r2,-897
  1057a0:	90a4703a 	and	r18,r18,r2
  1057a4:	38000226 	beq	r7,zero,1057b0 <__ssvfscanf_r+0x16bc>
  1057a8:	39ffffc4 	addi	r7,r7,-1
  1057ac:	e7000044 	addi	fp,fp,1
  1057b0:	a5000044 	addi	r20,r20,1
  1057b4:	003f3e06 	br	1054b0 <__alt_data_end+0xfffc54b0>
  1057b8:	d9009c17 	ldw	r4,624(sp)
  1057bc:	20c00017 	ldw	r3,0(r4)
  1057c0:	21000104 	addi	r4,r4,4
  1057c4:	d9009c15 	stw	r4,624(sp)
  1057c8:	18800015 	stw	r2,0(r3)
  1057cc:	003fcc06 	br	105700 <__alt_data_end+0xfffc5700>
  1057d0:	2839883a 	mov	fp,r5
  1057d4:	003fac06 	br	105688 <__alt_data_end+0xfffc5688>
  1057d8:	00be1fc4 	movi	r2,-1921
  1057dc:	a0a8703a 	and	r20,r20,r2
  1057e0:	05c00044 	movi	r23,1
  1057e4:	003ddb06 	br	104f54 <__alt_data_end+0xfffc4f54>
  1057e8:	817fffc7 	ldb	r5,-1(r16)
  1057ec:	980d883a 	mov	r6,r19
  1057f0:	b809883a 	mov	r4,r23
  1057f4:	843fffc4 	addi	r16,r16,-1
  1057f8:	01109780 	call	110978 <_sungetc_r>
  1057fc:	003f4a06 	br	105528 <__alt_data_end+0xfffc5528>
  105800:	00fe1fc4 	movi	r3,-1921
  105804:	a0e8703a 	and	r20,r20,r3
  105808:	05400044 	movi	r21,1
  10580c:	003dd106 	br	104f54 <__alt_data_end+0xfffc4f54>
  105810:	dd009b04 	addi	r20,sp,620
  105814:	003fc906 	br	10573c <__alt_data_end+0xfffc573c>
  105818:	d8c09f17 	ldw	r3,636(sp)
  10581c:	88e3c83a 	sub	r17,r17,r3
  105820:	044dc83a 	sub	r6,zero,r17
  105824:	883e1426 	beq	r17,zero,105078 <__alt_data_end+0xfffc5078>
  105828:	d88055c4 	addi	r2,sp,343
  10582c:	80800136 	bltu	r16,r2,105834 <__ssvfscanf_r+0x1740>
  105830:	dc005584 	addi	r16,sp,342
  105834:	014004b4 	movhi	r5,18
  105838:	294ca004 	addi	r5,r5,12928
  10583c:	8009883a 	mov	r4,r16
  105840:	01019840 	call	101984 <sprintf>
  105844:	003e0c06 	br	105078 <__alt_data_end+0xfffc5078>
  105848:	d8c0a517 	ldw	r3,660(sp)
  10584c:	000d883a 	mov	r6,zero
  105850:	01c00284 	movi	r7,10
  105854:	19400044 	addi	r5,r3,1
  105858:	b809883a 	mov	r4,r23
  10585c:	010e8dc0 	call	10e8dc <_strtol_r>
  105860:	d8c0a417 	ldw	r3,656(sp)
  105864:	dc00a517 	ldw	r16,660(sp)
  105868:	10cdc83a 	sub	r6,r2,r3
  10586c:	003fee06 	br	105828 <__alt_data_end+0xfffc5828>
  105870:	d8809c17 	ldw	r2,624(sp)
  105874:	180b883a 	mov	r5,r3
  105878:	8009883a 	mov	r4,r16
  10587c:	15000017 	ldw	r20,0(r2)
  105880:	14400104 	addi	r17,r2,4
  105884:	d8c0a615 	stw	r3,664(sp)
  105888:	010cfdc0 	call	10cfdc <__fpclassifyd>
  10588c:	d8c0a617 	ldw	r3,664(sp)
  105890:	10007226 	beq	r2,zero,105a5c <__ssvfscanf_r+0x1968>
  105894:	8009883a 	mov	r4,r16
  105898:	180b883a 	mov	r5,r3
  10589c:	01184600 	call	118460 <__truncdfsf2>
  1058a0:	a0800015 	stw	r2,0(r20)
  1058a4:	dc409c15 	stw	r17,624(sp)
  1058a8:	003e0006 	br	1050ac <__alt_data_end+0xfffc50ac>
  1058ac:	88c0004c 	andi	r3,r17,1
  1058b0:	183fc11e 	bne	r3,zero,1057b8 <__alt_data_end+0xfffc57b8>
  1058b4:	8c40008c 	andi	r17,r17,2
  1058b8:	883fbf26 	beq	r17,zero,1057b8 <__alt_data_end+0xfffc57b8>
  1058bc:	d940a117 	ldw	r5,644(sp)
  1058c0:	00800474 	movhi	r2,17
  1058c4:	10bb9504 	addi	r2,r2,-4524
  1058c8:	d9c09e17 	ldw	r7,632(sp)
  1058cc:	000d883a 	mov	r6,zero
  1058d0:	28806726 	beq	r5,r2,105a70 <__ssvfscanf_r+0x197c>
  1058d4:	d9400104 	addi	r5,sp,4
  1058d8:	b809883a 	mov	r4,r23
  1058dc:	010eb500 	call	10eb50 <_strtoll_r>
  1058e0:	d9409c17 	ldw	r5,624(sp)
  1058e4:	29000017 	ldw	r4,0(r5)
  1058e8:	29400104 	addi	r5,r5,4
  1058ec:	d9409c15 	stw	r5,624(sp)
  1058f0:	20800015 	stw	r2,0(r4)
  1058f4:	20c00115 	stw	r3,4(r4)
  1058f8:	003f8106 	br	105700 <__alt_data_end+0xfffc5700>
  1058fc:	010aa800 	call	10aa80 <__locale_mb_cur_max>
  105900:	80bc5626 	beq	r16,r2,104a5c <__alt_data_end+0xfffc4a5c>
  105904:	98800017 	ldw	r2,0(r19)
  105908:	99000117 	ldw	r4,4(r19)
  10590c:	d9400104 	addi	r5,sp,4
  105910:	12000003 	ldbu	r8,0(r2)
  105914:	213fffc4 	addi	r4,r4,-1
  105918:	10800044 	addi	r2,r2,1
  10591c:	99000115 	stw	r4,4(r19)
  105920:	98800015 	stw	r2,0(r19)
  105924:	84400044 	addi	r17,r16,1
  105928:	dd400015 	stw	r21,0(sp)
  10592c:	2c21883a 	add	r16,r5,r16
  105930:	280d883a 	mov	r6,r5
  105934:	880f883a 	mov	r7,r17
  105938:	a00b883a 	mov	r5,r20
  10593c:	b809883a 	mov	r4,r23
  105940:	82000005 	stb	r8,0(r16)
  105944:	010b4fc0 	call	10b4fc <_mbrtowc_r>
  105948:	00ffffc4 	movi	r3,-1
  10594c:	10fc4326 	beq	r2,r3,104a5c <__alt_data_end+0xfffc4a5c>
  105950:	103c371e 	bne	r2,zero,104a30 <__alt_data_end+0xfffc4a30>
  105954:	a0000015 	stw	zero,0(r20)
  105958:	0009883a 	mov	r4,zero
  10595c:	010a9c80 	call	10a9c8 <iswspace>
  105960:	10001b26 	beq	r2,zero,1059d0 <__ssvfscanf_r+0x18dc>
  105964:	8821883a 	mov	r16,r17
  105968:	dc409f17 	ldw	r17,636(sp)
  10596c:	803f7f26 	beq	r16,zero,10576c <__alt_data_end+0xfffc576c>
  105970:	843fffc4 	addi	r16,r16,-1
  105974:	d9400104 	addi	r5,sp,4
  105978:	2c2b883a 	add	r21,r5,r16
  10597c:	00000106 	br	105984 <__ssvfscanf_r+0x1890>
  105980:	843fffc4 	addi	r16,r16,-1
  105984:	a9400003 	ldbu	r5,0(r21)
  105988:	980d883a 	mov	r6,r19
  10598c:	b809883a 	mov	r4,r23
  105990:	01109780 	call	110978 <_sungetc_r>
  105994:	ad7fffc4 	addi	r21,r21,-1
  105998:	803ff91e 	bne	r16,zero,105980 <__alt_data_end+0xfffc5980>
  10599c:	003f7306 	br	10576c <__alt_data_end+0xfffc576c>
  1059a0:	d9400104 	addi	r5,sp,4
  1059a4:	802b883a 	mov	r21,r16
  1059a8:	9839883a 	mov	fp,r19
  1059ac:	2c3a122e 	bgeu	r5,r16,1041f8 <__alt_data_end+0xfffc41f8>
  1059b0:	ad7fffc4 	addi	r21,r21,-1
  1059b4:	a9400007 	ldb	r5,0(r21)
  1059b8:	e00d883a 	mov	r6,fp
  1059bc:	b809883a 	mov	r4,r23
  1059c0:	01109780 	call	110978 <_sungetc_r>
  1059c4:	d8800104 	addi	r2,sp,4
  1059c8:	157ff91e 	bne	r2,r21,1059b0 <__alt_data_end+0xfffc59b0>
  1059cc:	003a0a06 	br	1041f8 <__alt_data_end+0xfffc41f8>
  1059d0:	d8c09f17 	ldw	r3,636(sp)
  1059d4:	9465883a 	add	r18,r18,r17
  1059d8:	e73fffc4 	addi	fp,fp,-1
  1059dc:	1800051e 	bne	r3,zero,1059f4 <__ssvfscanf_r+0x1900>
  1059e0:	a5000104 	addi	r20,r20,4
  1059e4:	0021883a 	mov	r16,zero
  1059e8:	003c1406 	br	104a3c <__alt_data_end+0xfffc4a3c>
  1059ec:	a1000017 	ldw	r4,0(r20)
  1059f0:	003fda06 	br	10595c <__alt_data_end+0xfffc595c>
  1059f4:	0021883a 	mov	r16,zero
  1059f8:	003c1006 	br	104a3c <__alt_data_end+0xfffc4a3c>
  1059fc:	d8c00104 	addi	r3,sp,4
  105a00:	802b883a 	mov	r21,r16
  105a04:	9839883a 	mov	fp,r19
  105a08:	1c39fb2e 	bgeu	r3,r16,1041f8 <__alt_data_end+0xfffc41f8>
  105a0c:	ad7fffc4 	addi	r21,r21,-1
  105a10:	a9400007 	ldb	r5,0(r21)
  105a14:	b809883a 	mov	r4,r23
  105a18:	e00d883a 	mov	r6,fp
  105a1c:	01109780 	call	110978 <_sungetc_r>
  105a20:	d9000104 	addi	r4,sp,4
  105a24:	257ff91e 	bne	r4,r21,105a0c <__alt_data_end+0xfffc5a0c>
  105a28:	0039f306 	br	1041f8 <__alt_data_end+0xfffc41f8>
  105a2c:	d8c00104 	addi	r3,sp,4
  105a30:	802b883a 	mov	r21,r16
  105a34:	9839883a 	mov	fp,r19
  105a38:	1c39ef2e 	bgeu	r3,r16,1041f8 <__alt_data_end+0xfffc41f8>
  105a3c:	ad7fffc4 	addi	r21,r21,-1
  105a40:	a9400007 	ldb	r5,0(r21)
  105a44:	b809883a 	mov	r4,r23
  105a48:	e00d883a 	mov	r6,fp
  105a4c:	01109780 	call	110978 <_sungetc_r>
  105a50:	d9000104 	addi	r4,sp,4
  105a54:	257ff91e 	bne	r4,r21,105a3c <__alt_data_end+0xfffc5a3c>
  105a58:	0039e706 	br	1041f8 <__alt_data_end+0xfffc41f8>
  105a5c:	0009883a 	mov	r4,zero
  105a60:	010d1740 	call	10d174 <nanf>
  105a64:	a0800015 	stw	r2,0(r20)
  105a68:	dc409c15 	stw	r17,624(sp)
  105a6c:	003d8f06 	br	1050ac <__alt_data_end+0xfffc50ac>
  105a70:	d9400104 	addi	r5,sp,4
  105a74:	b809883a 	mov	r4,r23
  105a78:	010f0e80 	call	10f0e8 <_strtoull_r>
  105a7c:	003f9806 	br	1058e0 <__alt_data_end+0xfffc58e0>

00105a80 <___vfprintf_internal_r>:
  105a80:	deffb804 	addi	sp,sp,-288
  105a84:	dfc04715 	stw	ra,284(sp)
  105a88:	ddc04515 	stw	r23,276(sp)
  105a8c:	dd404315 	stw	r21,268(sp)
  105a90:	d9002d15 	stw	r4,180(sp)
  105a94:	282f883a 	mov	r23,r5
  105a98:	302b883a 	mov	r21,r6
  105a9c:	d9c02e15 	stw	r7,184(sp)
  105aa0:	df004615 	stw	fp,280(sp)
  105aa4:	dd804415 	stw	r22,272(sp)
  105aa8:	dd004215 	stw	r20,264(sp)
  105aac:	dcc04115 	stw	r19,260(sp)
  105ab0:	dc804015 	stw	r18,256(sp)
  105ab4:	dc403f15 	stw	r17,252(sp)
  105ab8:	dc003e15 	stw	r16,248(sp)
  105abc:	010aaa40 	call	10aaa4 <_localeconv_r>
  105ac0:	10800017 	ldw	r2,0(r2)
  105ac4:	1009883a 	mov	r4,r2
  105ac8:	d8803415 	stw	r2,208(sp)
  105acc:	0101cfc0 	call	101cfc <strlen>
  105ad0:	d8803715 	stw	r2,220(sp)
  105ad4:	d8802d17 	ldw	r2,180(sp)
  105ad8:	10000226 	beq	r2,zero,105ae4 <___vfprintf_internal_r+0x64>
  105adc:	10800e17 	ldw	r2,56(r2)
  105ae0:	1000fb26 	beq	r2,zero,105ed0 <___vfprintf_internal_r+0x450>
  105ae4:	b880030b 	ldhu	r2,12(r23)
  105ae8:	10c8000c 	andi	r3,r2,8192
  105aec:	1800061e 	bne	r3,zero,105b08 <___vfprintf_internal_r+0x88>
  105af0:	b9001917 	ldw	r4,100(r23)
  105af4:	00f7ffc4 	movi	r3,-8193
  105af8:	10880014 	ori	r2,r2,8192
  105afc:	20c6703a 	and	r3,r4,r3
  105b00:	b880030d 	sth	r2,12(r23)
  105b04:	b8c01915 	stw	r3,100(r23)
  105b08:	10c0020c 	andi	r3,r2,8
  105b0c:	1800c326 	beq	r3,zero,105e1c <___vfprintf_internal_r+0x39c>
  105b10:	b8c00417 	ldw	r3,16(r23)
  105b14:	1800c126 	beq	r3,zero,105e1c <___vfprintf_internal_r+0x39c>
  105b18:	1080068c 	andi	r2,r2,26
  105b1c:	00c00284 	movi	r3,10
  105b20:	10c0c626 	beq	r2,r3,105e3c <___vfprintf_internal_r+0x3bc>
  105b24:	d8c00404 	addi	r3,sp,16
  105b28:	050004b4 	movhi	r20,18
  105b2c:	d9001e04 	addi	r4,sp,120
  105b30:	a50caa04 	addi	r20,r20,12968
  105b34:	d8c01e15 	stw	r3,120(sp)
  105b38:	d8002015 	stw	zero,128(sp)
  105b3c:	d8001f15 	stw	zero,124(sp)
  105b40:	d8003315 	stw	zero,204(sp)
  105b44:	d8003615 	stw	zero,216(sp)
  105b48:	d8003815 	stw	zero,224(sp)
  105b4c:	1811883a 	mov	r8,r3
  105b50:	d8003915 	stw	zero,228(sp)
  105b54:	d8003a15 	stw	zero,232(sp)
  105b58:	d8002f15 	stw	zero,188(sp)
  105b5c:	d9002815 	stw	r4,160(sp)
  105b60:	a8800007 	ldb	r2,0(r21)
  105b64:	10028b26 	beq	r2,zero,106594 <___vfprintf_internal_r+0xb14>
  105b68:	00c00944 	movi	r3,37
  105b6c:	a823883a 	mov	r17,r21
  105b70:	10c0021e 	bne	r2,r3,105b7c <___vfprintf_internal_r+0xfc>
  105b74:	00001406 	br	105bc8 <___vfprintf_internal_r+0x148>
  105b78:	10c00326 	beq	r2,r3,105b88 <___vfprintf_internal_r+0x108>
  105b7c:	8c400044 	addi	r17,r17,1
  105b80:	88800007 	ldb	r2,0(r17)
  105b84:	103ffc1e 	bne	r2,zero,105b78 <__alt_data_end+0xfffc5b78>
  105b88:	8d61c83a 	sub	r16,r17,r21
  105b8c:	80000e26 	beq	r16,zero,105bc8 <___vfprintf_internal_r+0x148>
  105b90:	d8c02017 	ldw	r3,128(sp)
  105b94:	d8801f17 	ldw	r2,124(sp)
  105b98:	45400015 	stw	r21,0(r8)
  105b9c:	1c07883a 	add	r3,r3,r16
  105ba0:	10800044 	addi	r2,r2,1
  105ba4:	d8c02015 	stw	r3,128(sp)
  105ba8:	44000115 	stw	r16,4(r8)
  105bac:	d8801f15 	stw	r2,124(sp)
  105bb0:	00c001c4 	movi	r3,7
  105bb4:	1880a916 	blt	r3,r2,105e5c <___vfprintf_internal_r+0x3dc>
  105bb8:	42000204 	addi	r8,r8,8
  105bbc:	d9402f17 	ldw	r5,188(sp)
  105bc0:	2c0b883a 	add	r5,r5,r16
  105bc4:	d9402f15 	stw	r5,188(sp)
  105bc8:	88800007 	ldb	r2,0(r17)
  105bcc:	1000aa26 	beq	r2,zero,105e78 <___vfprintf_internal_r+0x3f8>
  105bd0:	8d400044 	addi	r21,r17,1
  105bd4:	8c400047 	ldb	r17,1(r17)
  105bd8:	0021883a 	mov	r16,zero
  105bdc:	00bfffc4 	movi	r2,-1
  105be0:	0025883a 	mov	r18,zero
  105be4:	dc002905 	stb	r16,164(sp)
  105be8:	d8002785 	stb	zero,158(sp)
  105bec:	d8002b05 	stb	zero,172(sp)
  105bf0:	d8802a15 	stw	r2,168(sp)
  105bf4:	d8003115 	stw	zero,196(sp)
  105bf8:	04c01604 	movi	r19,88
  105bfc:	05800244 	movi	r22,9
  105c00:	9021883a 	mov	r16,r18
  105c04:	4039883a 	mov	fp,r8
  105c08:	ad400044 	addi	r21,r21,1
  105c0c:	88bff804 	addi	r2,r17,-32
  105c10:	98833236 	bltu	r19,r2,1068dc <___vfprintf_internal_r+0xe5c>
  105c14:	100490ba 	slli	r2,r2,2
  105c18:	00c00434 	movhi	r3,16
  105c1c:	18d70b04 	addi	r3,r3,23596
  105c20:	10c5883a 	add	r2,r2,r3
  105c24:	10800017 	ldw	r2,0(r2)
  105c28:	1000683a 	jmp	r2
  105c2c:	001067d4 	movui	zero,16799
  105c30:	001068dc 	xori	zero,zero,16803
  105c34:	001068dc 	xori	zero,zero,16803
  105c38:	001067f4 	movhi	zero,16799
  105c3c:	001068dc 	xori	zero,zero,16803
  105c40:	001068dc 	xori	zero,zero,16803
  105c44:	001068dc 	xori	zero,zero,16803
  105c48:	001068dc 	xori	zero,zero,16803
  105c4c:	001068dc 	xori	zero,zero,16803
  105c50:	001068dc 	xori	zero,zero,16803
  105c54:	00105edc 	xori	zero,zero,16763
  105c58:	001066e4 	muli	zero,zero,16795
  105c5c:	001068dc 	xori	zero,zero,16803
  105c60:	00105da0 	cmpeqi	zero,zero,16758
  105c64:	00105f00 	call	105f0 <OSCtxSw_SWITCH_PC+0x105b0>
  105c68:	001068dc 	xori	zero,zero,16803
  105c6c:	00105f50 	cmplti	zero,zero,16765
  105c70:	00105f5c 	xori	zero,zero,16765
  105c74:	00105f5c 	xori	zero,zero,16765
  105c78:	00105f5c 	xori	zero,zero,16765
  105c7c:	00105f5c 	xori	zero,zero,16765
  105c80:	00105f5c 	xori	zero,zero,16765
  105c84:	00105f5c 	xori	zero,zero,16765
  105c88:	00105f5c 	xori	zero,zero,16765
  105c8c:	00105f5c 	xori	zero,zero,16765
  105c90:	00105f5c 	xori	zero,zero,16765
  105c94:	001068dc 	xori	zero,zero,16803
  105c98:	001068dc 	xori	zero,zero,16803
  105c9c:	001068dc 	xori	zero,zero,16803
  105ca0:	001068dc 	xori	zero,zero,16803
  105ca4:	001068dc 	xori	zero,zero,16803
  105ca8:	001068dc 	xori	zero,zero,16803
  105cac:	001068dc 	xori	zero,zero,16803
  105cb0:	001068dc 	xori	zero,zero,16803
  105cb4:	001068dc 	xori	zero,zero,16803
  105cb8:	001068dc 	xori	zero,zero,16803
  105cbc:	00105f98 	cmpnei	zero,zero,16766
  105cc0:	00106060 	cmpeqi	zero,zero,16769
  105cc4:	001068dc 	xori	zero,zero,16803
  105cc8:	00106060 	cmpeqi	zero,zero,16769
  105ccc:	001068dc 	xori	zero,zero,16803
  105cd0:	001068dc 	xori	zero,zero,16803
  105cd4:	001068dc 	xori	zero,zero,16803
  105cd8:	001068dc 	xori	zero,zero,16803
  105cdc:	0010610c 	andi	zero,zero,16772
  105ce0:	001068dc 	xori	zero,zero,16803
  105ce4:	001068dc 	xori	zero,zero,16803
  105ce8:	00106118 	cmpnei	zero,zero,16772
  105cec:	001068dc 	xori	zero,zero,16803
  105cf0:	001068dc 	xori	zero,zero,16803
  105cf4:	001068dc 	xori	zero,zero,16803
  105cf8:	001068dc 	xori	zero,zero,16803
  105cfc:	001068dc 	xori	zero,zero,16803
  105d00:	0010659c 	xori	zero,zero,16790
  105d04:	001068dc 	xori	zero,zero,16803
  105d08:	001068dc 	xori	zero,zero,16803
  105d0c:	00106608 	cmpgei	zero,zero,16792
  105d10:	001068dc 	xori	zero,zero,16803
  105d14:	001068dc 	xori	zero,zero,16803
  105d18:	001068dc 	xori	zero,zero,16803
  105d1c:	001068dc 	xori	zero,zero,16803
  105d20:	001068dc 	xori	zero,zero,16803
  105d24:	001068dc 	xori	zero,zero,16803
  105d28:	001068dc 	xori	zero,zero,16803
  105d2c:	001068dc 	xori	zero,zero,16803
  105d30:	001068dc 	xori	zero,zero,16803
  105d34:	001068dc 	xori	zero,zero,16803
  105d38:	00106880 	call	10688 <OSCtxSw_SWITCH_PC+0x10648>
  105d3c:	00106800 	call	10680 <OSCtxSw_SWITCH_PC+0x10640>
  105d40:	00106060 	cmpeqi	zero,zero,16769
  105d44:	00106060 	cmpeqi	zero,zero,16769
  105d48:	00106060 	cmpeqi	zero,zero,16769
  105d4c:	00106820 	cmpeqi	zero,zero,16800
  105d50:	00106800 	call	10680 <OSCtxSw_SWITCH_PC+0x10640>
  105d54:	001068dc 	xori	zero,zero,16803
  105d58:	001068dc 	xori	zero,zero,16803
  105d5c:	0010682c 	andhi	zero,zero,16800
  105d60:	001068dc 	xori	zero,zero,16803
  105d64:	00106840 	call	10684 <OSCtxSw_SWITCH_PC+0x10644>
  105d68:	001066c4 	movi	zero,16795
  105d6c:	00105dac 	andhi	zero,zero,16758
  105d70:	001066fc 	xorhi	zero,zero,16795
  105d74:	001068dc 	xori	zero,zero,16803
  105d78:	00106708 	cmpgei	zero,zero,16796
  105d7c:	001068dc 	xori	zero,zero,16803
  105d80:	0010676c 	andhi	zero,zero,16797
  105d84:	001068dc 	xori	zero,zero,16803
  105d88:	001068dc 	xori	zero,zero,16803
  105d8c:	0010678c 	andi	zero,zero,16798
  105d90:	d8c03117 	ldw	r3,196(sp)
  105d94:	d8802e15 	stw	r2,184(sp)
  105d98:	00c7c83a 	sub	r3,zero,r3
  105d9c:	d8c03115 	stw	r3,196(sp)
  105da0:	84000114 	ori	r16,r16,4
  105da4:	ac400007 	ldb	r17,0(r21)
  105da8:	003f9706 	br	105c08 <__alt_data_end+0xfffc5c08>
  105dac:	00800c04 	movi	r2,48
  105db0:	d8802705 	stb	r2,156(sp)
  105db4:	00801e04 	movi	r2,120
  105db8:	d8802745 	stb	r2,157(sp)
  105dbc:	d9002a17 	ldw	r4,168(sp)
  105dc0:	d8802e17 	ldw	r2,184(sp)
  105dc4:	d8002785 	stb	zero,158(sp)
  105dc8:	e011883a 	mov	r8,fp
  105dcc:	10c00104 	addi	r3,r2,4
  105dd0:	14c00017 	ldw	r19,0(r2)
  105dd4:	002d883a 	mov	r22,zero
  105dd8:	80800094 	ori	r2,r16,2
  105ddc:	2002ca16 	blt	r4,zero,106908 <___vfprintf_internal_r+0xe88>
  105de0:	00bfdfc4 	movi	r2,-129
  105de4:	80a4703a 	and	r18,r16,r2
  105de8:	d8c02e15 	stw	r3,184(sp)
  105dec:	94800094 	ori	r18,r18,2
  105df0:	9802b41e 	bne	r19,zero,1068c4 <___vfprintf_internal_r+0xe44>
  105df4:	014004b4 	movhi	r5,18
  105df8:	294c9004 	addi	r5,r5,12864
  105dfc:	d9403915 	stw	r5,228(sp)
  105e00:	04401e04 	movi	r17,120
  105e04:	d8802a17 	ldw	r2,168(sp)
  105e08:	0039883a 	mov	fp,zero
  105e0c:	1001fa26 	beq	r2,zero,1065f8 <___vfprintf_internal_r+0xb78>
  105e10:	0027883a 	mov	r19,zero
  105e14:	002d883a 	mov	r22,zero
  105e18:	00021906 	br	106680 <___vfprintf_internal_r+0xc00>
  105e1c:	d9002d17 	ldw	r4,180(sp)
  105e20:	b80b883a 	mov	r5,r23
  105e24:	0107e940 	call	107e94 <__swsetup_r>
  105e28:	1005dc1e 	bne	r2,zero,10759c <___vfprintf_internal_r+0x1b1c>
  105e2c:	b880030b 	ldhu	r2,12(r23)
  105e30:	00c00284 	movi	r3,10
  105e34:	1080068c 	andi	r2,r2,26
  105e38:	10ff3a1e 	bne	r2,r3,105b24 <__alt_data_end+0xfffc5b24>
  105e3c:	b880038f 	ldh	r2,14(r23)
  105e40:	103f3816 	blt	r2,zero,105b24 <__alt_data_end+0xfffc5b24>
  105e44:	d9c02e17 	ldw	r7,184(sp)
  105e48:	d9002d17 	ldw	r4,180(sp)
  105e4c:	a80d883a 	mov	r6,r21
  105e50:	b80b883a 	mov	r5,r23
  105e54:	0107d780 	call	107d78 <__sbprintf>
  105e58:	00001106 	br	105ea0 <___vfprintf_internal_r+0x420>
  105e5c:	d9002d17 	ldw	r4,180(sp)
  105e60:	d9801e04 	addi	r6,sp,120
  105e64:	b80b883a 	mov	r5,r23
  105e68:	01120b80 	call	1120b8 <__sprint_r>
  105e6c:	1000081e 	bne	r2,zero,105e90 <___vfprintf_internal_r+0x410>
  105e70:	da000404 	addi	r8,sp,16
  105e74:	003f5106 	br	105bbc <__alt_data_end+0xfffc5bbc>
  105e78:	d8802017 	ldw	r2,128(sp)
  105e7c:	10000426 	beq	r2,zero,105e90 <___vfprintf_internal_r+0x410>
  105e80:	d9002d17 	ldw	r4,180(sp)
  105e84:	d9801e04 	addi	r6,sp,120
  105e88:	b80b883a 	mov	r5,r23
  105e8c:	01120b80 	call	1120b8 <__sprint_r>
  105e90:	b880030b 	ldhu	r2,12(r23)
  105e94:	1080100c 	andi	r2,r2,64
  105e98:	1005c01e 	bne	r2,zero,10759c <___vfprintf_internal_r+0x1b1c>
  105e9c:	d8802f17 	ldw	r2,188(sp)
  105ea0:	dfc04717 	ldw	ra,284(sp)
  105ea4:	df004617 	ldw	fp,280(sp)
  105ea8:	ddc04517 	ldw	r23,276(sp)
  105eac:	dd804417 	ldw	r22,272(sp)
  105eb0:	dd404317 	ldw	r21,268(sp)
  105eb4:	dd004217 	ldw	r20,264(sp)
  105eb8:	dcc04117 	ldw	r19,260(sp)
  105ebc:	dc804017 	ldw	r18,256(sp)
  105ec0:	dc403f17 	ldw	r17,252(sp)
  105ec4:	dc003e17 	ldw	r16,248(sp)
  105ec8:	dec04804 	addi	sp,sp,288
  105ecc:	f800283a 	ret
  105ed0:	d9002d17 	ldw	r4,180(sp)
  105ed4:	0109ef40 	call	109ef4 <__sinit>
  105ed8:	003f0206 	br	105ae4 <__alt_data_end+0xfffc5ae4>
  105edc:	d9002e17 	ldw	r4,184(sp)
  105ee0:	d9402e17 	ldw	r5,184(sp)
  105ee4:	21000017 	ldw	r4,0(r4)
  105ee8:	28800104 	addi	r2,r5,4
  105eec:	d9003115 	stw	r4,196(sp)
  105ef0:	203fa716 	blt	r4,zero,105d90 <__alt_data_end+0xfffc5d90>
  105ef4:	d8802e15 	stw	r2,184(sp)
  105ef8:	ac400007 	ldb	r17,0(r21)
  105efc:	003f4206 	br	105c08 <__alt_data_end+0xfffc5c08>
  105f00:	ac400007 	ldb	r17,0(r21)
  105f04:	01000a84 	movi	r4,42
  105f08:	a8c00044 	addi	r3,r21,1
  105f0c:	89075826 	beq	r17,r4,107c70 <___vfprintf_internal_r+0x21f0>
  105f10:	8cbff404 	addi	r18,r17,-48
  105f14:	b486ae36 	bltu	r22,r18,1079d0 <___vfprintf_internal_r+0x1f50>
  105f18:	0009883a 	mov	r4,zero
  105f1c:	1823883a 	mov	r17,r3
  105f20:	01400284 	movi	r5,10
  105f24:	01159fc0 	call	1159fc <__mulsi3>
  105f28:	88c00007 	ldb	r3,0(r17)
  105f2c:	1489883a 	add	r4,r2,r18
  105f30:	8d400044 	addi	r21,r17,1
  105f34:	1cbff404 	addi	r18,r3,-48
  105f38:	a823883a 	mov	r17,r21
  105f3c:	b4bff82e 	bgeu	r22,r18,105f20 <__alt_data_end+0xfffc5f20>
  105f40:	1823883a 	mov	r17,r3
  105f44:	2005f616 	blt	r4,zero,107720 <___vfprintf_internal_r+0x1ca0>
  105f48:	d9002a15 	stw	r4,168(sp)
  105f4c:	003f2f06 	br	105c0c <__alt_data_end+0xfffc5c0c>
  105f50:	84002014 	ori	r16,r16,128
  105f54:	ac400007 	ldb	r17,0(r21)
  105f58:	003f2b06 	br	105c08 <__alt_data_end+0xfffc5c08>
  105f5c:	8cbff404 	addi	r18,r17,-48
  105f60:	d8003115 	stw	zero,196(sp)
  105f64:	0009883a 	mov	r4,zero
  105f68:	a823883a 	mov	r17,r21
  105f6c:	01400284 	movi	r5,10
  105f70:	01159fc0 	call	1159fc <__mulsi3>
  105f74:	88c00007 	ldb	r3,0(r17)
  105f78:	9089883a 	add	r4,r18,r2
  105f7c:	ad400044 	addi	r21,r21,1
  105f80:	1cbff404 	addi	r18,r3,-48
  105f84:	a823883a 	mov	r17,r21
  105f88:	b4bff82e 	bgeu	r22,r18,105f6c <__alt_data_end+0xfffc5f6c>
  105f8c:	1823883a 	mov	r17,r3
  105f90:	d9003115 	stw	r4,196(sp)
  105f94:	003f1d06 	br	105c0c <__alt_data_end+0xfffc5c0c>
  105f98:	8025883a 	mov	r18,r16
  105f9c:	dc002903 	ldbu	r16,164(sp)
  105fa0:	e011883a 	mov	r8,fp
  105fa4:	84003fcc 	andi	r16,r16,255
  105fa8:	8007531e 	bne	r16,zero,107cf8 <___vfprintf_internal_r+0x2278>
  105fac:	94800414 	ori	r18,r18,16
  105fb0:	9080080c 	andi	r2,r18,32
  105fb4:	1003a326 	beq	r2,zero,106e44 <___vfprintf_internal_r+0x13c4>
  105fb8:	d9002e17 	ldw	r4,184(sp)
  105fbc:	20800117 	ldw	r2,4(r4)
  105fc0:	24c00017 	ldw	r19,0(r4)
  105fc4:	21000204 	addi	r4,r4,8
  105fc8:	d9002e15 	stw	r4,184(sp)
  105fcc:	102d883a 	mov	r22,r2
  105fd0:	10047316 	blt	r2,zero,1071a0 <___vfprintf_internal_r+0x1720>
  105fd4:	d9002a17 	ldw	r4,168(sp)
  105fd8:	df002783 	ldbu	fp,158(sp)
  105fdc:	2003e416 	blt	r4,zero,106f70 <___vfprintf_internal_r+0x14f0>
  105fe0:	00ffdfc4 	movi	r3,-129
  105fe4:	9d84b03a 	or	r2,r19,r22
  105fe8:	90e4703a 	and	r18,r18,r3
  105fec:	10018026 	beq	r2,zero,1065f0 <___vfprintf_internal_r+0xb70>
  105ff0:	b003ab26 	beq	r22,zero,106ea0 <___vfprintf_internal_r+0x1420>
  105ff4:	dc402915 	stw	r17,164(sp)
  105ff8:	dc001e04 	addi	r16,sp,120
  105ffc:	b023883a 	mov	r17,r22
  106000:	402d883a 	mov	r22,r8
  106004:	9809883a 	mov	r4,r19
  106008:	880b883a 	mov	r5,r17
  10600c:	01800284 	movi	r6,10
  106010:	000f883a 	mov	r7,zero
  106014:	01152840 	call	115284 <__umoddi3>
  106018:	10800c04 	addi	r2,r2,48
  10601c:	843fffc4 	addi	r16,r16,-1
  106020:	9809883a 	mov	r4,r19
  106024:	880b883a 	mov	r5,r17
  106028:	80800005 	stb	r2,0(r16)
  10602c:	01800284 	movi	r6,10
  106030:	000f883a 	mov	r7,zero
  106034:	0114c880 	call	114c88 <__udivdi3>
  106038:	1027883a 	mov	r19,r2
  10603c:	10c4b03a 	or	r2,r2,r3
  106040:	1823883a 	mov	r17,r3
  106044:	103fef1e 	bne	r2,zero,106004 <__alt_data_end+0xfffc6004>
  106048:	d8c02817 	ldw	r3,160(sp)
  10604c:	dc402917 	ldw	r17,164(sp)
  106050:	b011883a 	mov	r8,r22
  106054:	1c07c83a 	sub	r3,r3,r16
  106058:	d8c02b15 	stw	r3,172(sp)
  10605c:	00005f06 	br	1061dc <___vfprintf_internal_r+0x75c>
  106060:	8025883a 	mov	r18,r16
  106064:	dc002903 	ldbu	r16,164(sp)
  106068:	e011883a 	mov	r8,fp
  10606c:	84003fcc 	andi	r16,r16,255
  106070:	80071e1e 	bne	r16,zero,107cec <___vfprintf_internal_r+0x226c>
  106074:	9080020c 	andi	r2,r18,8
  106078:	1004af26 	beq	r2,zero,107338 <___vfprintf_internal_r+0x18b8>
  10607c:	d9002e17 	ldw	r4,184(sp)
  106080:	d9402e17 	ldw	r5,184(sp)
  106084:	d8802e17 	ldw	r2,184(sp)
  106088:	21000017 	ldw	r4,0(r4)
  10608c:	29400117 	ldw	r5,4(r5)
  106090:	10800204 	addi	r2,r2,8
  106094:	d9003615 	stw	r4,216(sp)
  106098:	d9403815 	stw	r5,224(sp)
  10609c:	d8802e15 	stw	r2,184(sp)
  1060a0:	d9003617 	ldw	r4,216(sp)
  1060a4:	d9403817 	ldw	r5,224(sp)
  1060a8:	da003d15 	stw	r8,244(sp)
  1060ac:	04000044 	movi	r16,1
  1060b0:	010cfdc0 	call	10cfdc <__fpclassifyd>
  1060b4:	da003d17 	ldw	r8,244(sp)
  1060b8:	1404441e 	bne	r2,r16,1071cc <___vfprintf_internal_r+0x174c>
  1060bc:	d9003617 	ldw	r4,216(sp)
  1060c0:	d9403817 	ldw	r5,224(sp)
  1060c4:	000d883a 	mov	r6,zero
  1060c8:	000f883a 	mov	r7,zero
  1060cc:	01170000 	call	117000 <__ledf2>
  1060d0:	da003d17 	ldw	r8,244(sp)
  1060d4:	1005e316 	blt	r2,zero,107864 <___vfprintf_internal_r+0x1de4>
  1060d8:	df002783 	ldbu	fp,158(sp)
  1060dc:	008011c4 	movi	r2,71
  1060e0:	1445580e 	bge	r2,r17,107644 <___vfprintf_internal_r+0x1bc4>
  1060e4:	040004b4 	movhi	r16,18
  1060e8:	840c8804 	addi	r16,r16,12832
  1060ec:	00c000c4 	movi	r3,3
  1060f0:	00bfdfc4 	movi	r2,-129
  1060f4:	d8c02915 	stw	r3,164(sp)
  1060f8:	90a4703a 	and	r18,r18,r2
  1060fc:	d8c02b15 	stw	r3,172(sp)
  106100:	d8002a15 	stw	zero,168(sp)
  106104:	d8003215 	stw	zero,200(sp)
  106108:	00003a06 	br	1061f4 <___vfprintf_internal_r+0x774>
  10610c:	84000214 	ori	r16,r16,8
  106110:	ac400007 	ldb	r17,0(r21)
  106114:	003ebc06 	br	105c08 <__alt_data_end+0xfffc5c08>
  106118:	8025883a 	mov	r18,r16
  10611c:	dc002903 	ldbu	r16,164(sp)
  106120:	e011883a 	mov	r8,fp
  106124:	84003fcc 	andi	r16,r16,255
  106128:	8007001e 	bne	r16,zero,107d2c <___vfprintf_internal_r+0x22ac>
  10612c:	94800414 	ori	r18,r18,16
  106130:	9080080c 	andi	r2,r18,32
  106134:	1002fa26 	beq	r2,zero,106d20 <___vfprintf_internal_r+0x12a0>
  106138:	d9002e17 	ldw	r4,184(sp)
  10613c:	d9402a17 	ldw	r5,168(sp)
  106140:	d8002785 	stb	zero,158(sp)
  106144:	20800204 	addi	r2,r4,8
  106148:	24c00017 	ldw	r19,0(r4)
  10614c:	25800117 	ldw	r22,4(r4)
  106150:	2804b116 	blt	r5,zero,107418 <___vfprintf_internal_r+0x1998>
  106154:	013fdfc4 	movi	r4,-129
  106158:	9d86b03a 	or	r3,r19,r22
  10615c:	d8802e15 	stw	r2,184(sp)
  106160:	9124703a 	and	r18,r18,r4
  106164:	1802fb1e 	bne	r3,zero,106d54 <___vfprintf_internal_r+0x12d4>
  106168:	d8c02a17 	ldw	r3,168(sp)
  10616c:	0039883a 	mov	fp,zero
  106170:	1805e526 	beq	r3,zero,107908 <___vfprintf_internal_r+0x1e88>
  106174:	0027883a 	mov	r19,zero
  106178:	002d883a 	mov	r22,zero
  10617c:	dc001e04 	addi	r16,sp,120
  106180:	9806d0fa 	srli	r3,r19,3
  106184:	b008977a 	slli	r4,r22,29
  106188:	b02cd0fa 	srli	r22,r22,3
  10618c:	9cc001cc 	andi	r19,r19,7
  106190:	98800c04 	addi	r2,r19,48
  106194:	843fffc4 	addi	r16,r16,-1
  106198:	20e6b03a 	or	r19,r4,r3
  10619c:	80800005 	stb	r2,0(r16)
  1061a0:	9d86b03a 	or	r3,r19,r22
  1061a4:	183ff61e 	bne	r3,zero,106180 <__alt_data_end+0xfffc6180>
  1061a8:	90c0004c 	andi	r3,r18,1
  1061ac:	18014126 	beq	r3,zero,1066b4 <___vfprintf_internal_r+0xc34>
  1061b0:	10803fcc 	andi	r2,r2,255
  1061b4:	1080201c 	xori	r2,r2,128
  1061b8:	10bfe004 	addi	r2,r2,-128
  1061bc:	00c00c04 	movi	r3,48
  1061c0:	10c13c26 	beq	r2,r3,1066b4 <___vfprintf_internal_r+0xc34>
  1061c4:	80ffffc5 	stb	r3,-1(r16)
  1061c8:	d8c02817 	ldw	r3,160(sp)
  1061cc:	80bfffc4 	addi	r2,r16,-1
  1061d0:	1021883a 	mov	r16,r2
  1061d4:	1887c83a 	sub	r3,r3,r2
  1061d8:	d8c02b15 	stw	r3,172(sp)
  1061dc:	d8802b17 	ldw	r2,172(sp)
  1061e0:	d9002a17 	ldw	r4,168(sp)
  1061e4:	1100010e 	bge	r2,r4,1061ec <___vfprintf_internal_r+0x76c>
  1061e8:	2005883a 	mov	r2,r4
  1061ec:	d8802915 	stw	r2,164(sp)
  1061f0:	d8003215 	stw	zero,200(sp)
  1061f4:	e7003fcc 	andi	fp,fp,255
  1061f8:	e700201c 	xori	fp,fp,128
  1061fc:	e73fe004 	addi	fp,fp,-128
  106200:	e0000326 	beq	fp,zero,106210 <___vfprintf_internal_r+0x790>
  106204:	d8c02917 	ldw	r3,164(sp)
  106208:	18c00044 	addi	r3,r3,1
  10620c:	d8c02915 	stw	r3,164(sp)
  106210:	90c0008c 	andi	r3,r18,2
  106214:	d8c02c15 	stw	r3,176(sp)
  106218:	18000326 	beq	r3,zero,106228 <___vfprintf_internal_r+0x7a8>
  10621c:	d8c02917 	ldw	r3,164(sp)
  106220:	18c00084 	addi	r3,r3,2
  106224:	d8c02915 	stw	r3,164(sp)
  106228:	90c0210c 	andi	r3,r18,132
  10622c:	d8c03015 	stw	r3,192(sp)
  106230:	1801c51e 	bne	r3,zero,106948 <___vfprintf_internal_r+0xec8>
  106234:	d9003117 	ldw	r4,196(sp)
  106238:	d8c02917 	ldw	r3,164(sp)
  10623c:	20e7c83a 	sub	r19,r4,r3
  106240:	04c1c10e 	bge	zero,r19,106948 <___vfprintf_internal_r+0xec8>
  106244:	02400404 	movi	r9,16
  106248:	d8c02017 	ldw	r3,128(sp)
  10624c:	d8801f17 	ldw	r2,124(sp)
  106250:	4cc52f0e 	bge	r9,r19,107710 <___vfprintf_internal_r+0x1c90>
  106254:	014004b4 	movhi	r5,18
  106258:	294cae04 	addi	r5,r5,12984
  10625c:	dc403b15 	stw	r17,236(sp)
  106260:	d9403515 	stw	r5,212(sp)
  106264:	9823883a 	mov	r17,r19
  106268:	482d883a 	mov	r22,r9
  10626c:	9027883a 	mov	r19,r18
  106270:	070001c4 	movi	fp,7
  106274:	8025883a 	mov	r18,r16
  106278:	dc002d17 	ldw	r16,180(sp)
  10627c:	00000306 	br	10628c <___vfprintf_internal_r+0x80c>
  106280:	8c7ffc04 	addi	r17,r17,-16
  106284:	42000204 	addi	r8,r8,8
  106288:	b440130e 	bge	r22,r17,1062d8 <___vfprintf_internal_r+0x858>
  10628c:	010004b4 	movhi	r4,18
  106290:	18c00404 	addi	r3,r3,16
  106294:	10800044 	addi	r2,r2,1
  106298:	210cae04 	addi	r4,r4,12984
  10629c:	41000015 	stw	r4,0(r8)
  1062a0:	45800115 	stw	r22,4(r8)
  1062a4:	d8c02015 	stw	r3,128(sp)
  1062a8:	d8801f15 	stw	r2,124(sp)
  1062ac:	e0bff40e 	bge	fp,r2,106280 <__alt_data_end+0xfffc6280>
  1062b0:	d9801e04 	addi	r6,sp,120
  1062b4:	b80b883a 	mov	r5,r23
  1062b8:	8009883a 	mov	r4,r16
  1062bc:	01120b80 	call	1120b8 <__sprint_r>
  1062c0:	103ef31e 	bne	r2,zero,105e90 <__alt_data_end+0xfffc5e90>
  1062c4:	8c7ffc04 	addi	r17,r17,-16
  1062c8:	d8c02017 	ldw	r3,128(sp)
  1062cc:	d8801f17 	ldw	r2,124(sp)
  1062d0:	da000404 	addi	r8,sp,16
  1062d4:	b47fed16 	blt	r22,r17,10628c <__alt_data_end+0xfffc628c>
  1062d8:	9021883a 	mov	r16,r18
  1062dc:	9825883a 	mov	r18,r19
  1062e0:	8827883a 	mov	r19,r17
  1062e4:	dc403b17 	ldw	r17,236(sp)
  1062e8:	d9403517 	ldw	r5,212(sp)
  1062ec:	98c7883a 	add	r3,r19,r3
  1062f0:	10800044 	addi	r2,r2,1
  1062f4:	41400015 	stw	r5,0(r8)
  1062f8:	44c00115 	stw	r19,4(r8)
  1062fc:	d8c02015 	stw	r3,128(sp)
  106300:	d8801f15 	stw	r2,124(sp)
  106304:	010001c4 	movi	r4,7
  106308:	2082c516 	blt	r4,r2,106e20 <___vfprintf_internal_r+0x13a0>
  10630c:	df002787 	ldb	fp,158(sp)
  106310:	42000204 	addi	r8,r8,8
  106314:	e0000c26 	beq	fp,zero,106348 <___vfprintf_internal_r+0x8c8>
  106318:	d8801f17 	ldw	r2,124(sp)
  10631c:	d9002784 	addi	r4,sp,158
  106320:	18c00044 	addi	r3,r3,1
  106324:	10800044 	addi	r2,r2,1
  106328:	41000015 	stw	r4,0(r8)
  10632c:	01000044 	movi	r4,1
  106330:	41000115 	stw	r4,4(r8)
  106334:	d8c02015 	stw	r3,128(sp)
  106338:	d8801f15 	stw	r2,124(sp)
  10633c:	010001c4 	movi	r4,7
  106340:	20825e16 	blt	r4,r2,106cbc <___vfprintf_internal_r+0x123c>
  106344:	42000204 	addi	r8,r8,8
  106348:	d8802c17 	ldw	r2,176(sp)
  10634c:	10000c26 	beq	r2,zero,106380 <___vfprintf_internal_r+0x900>
  106350:	d8801f17 	ldw	r2,124(sp)
  106354:	d9002704 	addi	r4,sp,156
  106358:	18c00084 	addi	r3,r3,2
  10635c:	10800044 	addi	r2,r2,1
  106360:	41000015 	stw	r4,0(r8)
  106364:	01000084 	movi	r4,2
  106368:	41000115 	stw	r4,4(r8)
  10636c:	d8c02015 	stw	r3,128(sp)
  106370:	d8801f15 	stw	r2,124(sp)
  106374:	010001c4 	movi	r4,7
  106378:	20825816 	blt	r4,r2,106cdc <___vfprintf_internal_r+0x125c>
  10637c:	42000204 	addi	r8,r8,8
  106380:	d9003017 	ldw	r4,192(sp)
  106384:	00802004 	movi	r2,128
  106388:	2081bb26 	beq	r4,r2,106a78 <___vfprintf_internal_r+0xff8>
  10638c:	d9402a17 	ldw	r5,168(sp)
  106390:	d8802b17 	ldw	r2,172(sp)
  106394:	28adc83a 	sub	r22,r5,r2
  106398:	0580310e 	bge	zero,r22,106460 <___vfprintf_internal_r+0x9e0>
  10639c:	07000404 	movi	fp,16
  1063a0:	d8801f17 	ldw	r2,124(sp)
  1063a4:	e584360e 	bge	fp,r22,107480 <___vfprintf_internal_r+0x1a00>
  1063a8:	014004b4 	movhi	r5,18
  1063ac:	294caa04 	addi	r5,r5,12968
  1063b0:	dc402a15 	stw	r17,168(sp)
  1063b4:	d9402c15 	stw	r5,176(sp)
  1063b8:	b023883a 	mov	r17,r22
  1063bc:	04c001c4 	movi	r19,7
  1063c0:	a82d883a 	mov	r22,r21
  1063c4:	902b883a 	mov	r21,r18
  1063c8:	8025883a 	mov	r18,r16
  1063cc:	dc002d17 	ldw	r16,180(sp)
  1063d0:	00000306 	br	1063e0 <___vfprintf_internal_r+0x960>
  1063d4:	8c7ffc04 	addi	r17,r17,-16
  1063d8:	42000204 	addi	r8,r8,8
  1063dc:	e440110e 	bge	fp,r17,106424 <___vfprintf_internal_r+0x9a4>
  1063e0:	18c00404 	addi	r3,r3,16
  1063e4:	10800044 	addi	r2,r2,1
  1063e8:	45000015 	stw	r20,0(r8)
  1063ec:	47000115 	stw	fp,4(r8)
  1063f0:	d8c02015 	stw	r3,128(sp)
  1063f4:	d8801f15 	stw	r2,124(sp)
  1063f8:	98bff60e 	bge	r19,r2,1063d4 <__alt_data_end+0xfffc63d4>
  1063fc:	d9801e04 	addi	r6,sp,120
  106400:	b80b883a 	mov	r5,r23
  106404:	8009883a 	mov	r4,r16
  106408:	01120b80 	call	1120b8 <__sprint_r>
  10640c:	103ea01e 	bne	r2,zero,105e90 <__alt_data_end+0xfffc5e90>
  106410:	8c7ffc04 	addi	r17,r17,-16
  106414:	d8c02017 	ldw	r3,128(sp)
  106418:	d8801f17 	ldw	r2,124(sp)
  10641c:	da000404 	addi	r8,sp,16
  106420:	e47fef16 	blt	fp,r17,1063e0 <__alt_data_end+0xfffc63e0>
  106424:	9021883a 	mov	r16,r18
  106428:	a825883a 	mov	r18,r21
  10642c:	b02b883a 	mov	r21,r22
  106430:	882d883a 	mov	r22,r17
  106434:	dc402a17 	ldw	r17,168(sp)
  106438:	d9002c17 	ldw	r4,176(sp)
  10643c:	1d87883a 	add	r3,r3,r22
  106440:	10800044 	addi	r2,r2,1
  106444:	41000015 	stw	r4,0(r8)
  106448:	45800115 	stw	r22,4(r8)
  10644c:	d8c02015 	stw	r3,128(sp)
  106450:	d8801f15 	stw	r2,124(sp)
  106454:	010001c4 	movi	r4,7
  106458:	20821016 	blt	r4,r2,106c9c <___vfprintf_internal_r+0x121c>
  10645c:	42000204 	addi	r8,r8,8
  106460:	9080400c 	andi	r2,r18,256
  106464:	10013a1e 	bne	r2,zero,106950 <___vfprintf_internal_r+0xed0>
  106468:	d9402b17 	ldw	r5,172(sp)
  10646c:	d8801f17 	ldw	r2,124(sp)
  106470:	44000015 	stw	r16,0(r8)
  106474:	1947883a 	add	r3,r3,r5
  106478:	10800044 	addi	r2,r2,1
  10647c:	41400115 	stw	r5,4(r8)
  106480:	d8c02015 	stw	r3,128(sp)
  106484:	d8801f15 	stw	r2,124(sp)
  106488:	010001c4 	movi	r4,7
  10648c:	2081f516 	blt	r4,r2,106c64 <___vfprintf_internal_r+0x11e4>
  106490:	42000204 	addi	r8,r8,8
  106494:	9480010c 	andi	r18,r18,4
  106498:	90003226 	beq	r18,zero,106564 <___vfprintf_internal_r+0xae4>
  10649c:	d9403117 	ldw	r5,196(sp)
  1064a0:	d8802917 	ldw	r2,164(sp)
  1064a4:	28a1c83a 	sub	r16,r5,r2
  1064a8:	04002e0e 	bge	zero,r16,106564 <___vfprintf_internal_r+0xae4>
  1064ac:	04400404 	movi	r17,16
  1064b0:	d8801f17 	ldw	r2,124(sp)
  1064b4:	8c04c40e 	bge	r17,r16,1077c8 <___vfprintf_internal_r+0x1d48>
  1064b8:	014004b4 	movhi	r5,18
  1064bc:	294cae04 	addi	r5,r5,12984
  1064c0:	d9403515 	stw	r5,212(sp)
  1064c4:	048001c4 	movi	r18,7
  1064c8:	dcc02d17 	ldw	r19,180(sp)
  1064cc:	00000306 	br	1064dc <___vfprintf_internal_r+0xa5c>
  1064d0:	843ffc04 	addi	r16,r16,-16
  1064d4:	42000204 	addi	r8,r8,8
  1064d8:	8c00130e 	bge	r17,r16,106528 <___vfprintf_internal_r+0xaa8>
  1064dc:	010004b4 	movhi	r4,18
  1064e0:	18c00404 	addi	r3,r3,16
  1064e4:	10800044 	addi	r2,r2,1
  1064e8:	210cae04 	addi	r4,r4,12984
  1064ec:	41000015 	stw	r4,0(r8)
  1064f0:	44400115 	stw	r17,4(r8)
  1064f4:	d8c02015 	stw	r3,128(sp)
  1064f8:	d8801f15 	stw	r2,124(sp)
  1064fc:	90bff40e 	bge	r18,r2,1064d0 <__alt_data_end+0xfffc64d0>
  106500:	d9801e04 	addi	r6,sp,120
  106504:	b80b883a 	mov	r5,r23
  106508:	9809883a 	mov	r4,r19
  10650c:	01120b80 	call	1120b8 <__sprint_r>
  106510:	103e5f1e 	bne	r2,zero,105e90 <__alt_data_end+0xfffc5e90>
  106514:	843ffc04 	addi	r16,r16,-16
  106518:	d8c02017 	ldw	r3,128(sp)
  10651c:	d8801f17 	ldw	r2,124(sp)
  106520:	da000404 	addi	r8,sp,16
  106524:	8c3fed16 	blt	r17,r16,1064dc <__alt_data_end+0xfffc64dc>
  106528:	d9403517 	ldw	r5,212(sp)
  10652c:	1c07883a 	add	r3,r3,r16
  106530:	10800044 	addi	r2,r2,1
  106534:	41400015 	stw	r5,0(r8)
  106538:	44000115 	stw	r16,4(r8)
  10653c:	d8c02015 	stw	r3,128(sp)
  106540:	d8801f15 	stw	r2,124(sp)
  106544:	010001c4 	movi	r4,7
  106548:	2080060e 	bge	r4,r2,106564 <___vfprintf_internal_r+0xae4>
  10654c:	d9002d17 	ldw	r4,180(sp)
  106550:	d9801e04 	addi	r6,sp,120
  106554:	b80b883a 	mov	r5,r23
  106558:	01120b80 	call	1120b8 <__sprint_r>
  10655c:	103e4c1e 	bne	r2,zero,105e90 <__alt_data_end+0xfffc5e90>
  106560:	d8c02017 	ldw	r3,128(sp)
  106564:	d8803117 	ldw	r2,196(sp)
  106568:	d9002917 	ldw	r4,164(sp)
  10656c:	1100010e 	bge	r2,r4,106574 <___vfprintf_internal_r+0xaf4>
  106570:	2005883a 	mov	r2,r4
  106574:	d9402f17 	ldw	r5,188(sp)
  106578:	288b883a 	add	r5,r5,r2
  10657c:	d9402f15 	stw	r5,188(sp)
  106580:	1801c01e 	bne	r3,zero,106c84 <___vfprintf_internal_r+0x1204>
  106584:	a8800007 	ldb	r2,0(r21)
  106588:	d8001f15 	stw	zero,124(sp)
  10658c:	da000404 	addi	r8,sp,16
  106590:	103d751e 	bne	r2,zero,105b68 <__alt_data_end+0xfffc5b68>
  106594:	a823883a 	mov	r17,r21
  106598:	003d8b06 	br	105bc8 <__alt_data_end+0xfffc5bc8>
  10659c:	8025883a 	mov	r18,r16
  1065a0:	dc002903 	ldbu	r16,164(sp)
  1065a4:	e011883a 	mov	r8,fp
  1065a8:	84003fcc 	andi	r16,r16,255
  1065ac:	8005e51e 	bne	r16,zero,107d44 <___vfprintf_internal_r+0x22c4>
  1065b0:	94800414 	ori	r18,r18,16
  1065b4:	9080080c 	andi	r2,r18,32
  1065b8:	10022b26 	beq	r2,zero,106e68 <___vfprintf_internal_r+0x13e8>
  1065bc:	d9002e17 	ldw	r4,184(sp)
  1065c0:	d9402a17 	ldw	r5,168(sp)
  1065c4:	d8002785 	stb	zero,158(sp)
  1065c8:	20c00204 	addi	r3,r4,8
  1065cc:	24c00017 	ldw	r19,0(r4)
  1065d0:	25800117 	ldw	r22,4(r4)
  1065d4:	28042e16 	blt	r5,zero,107690 <___vfprintf_internal_r+0x1c10>
  1065d8:	013fdfc4 	movi	r4,-129
  1065dc:	9d84b03a 	or	r2,r19,r22
  1065e0:	d8c02e15 	stw	r3,184(sp)
  1065e4:	9124703a 	and	r18,r18,r4
  1065e8:	0039883a 	mov	fp,zero
  1065ec:	103e801e 	bne	r2,zero,105ff0 <__alt_data_end+0xfffc5ff0>
  1065f0:	d9002a17 	ldw	r4,168(sp)
  1065f4:	2002e01e 	bne	r4,zero,107178 <___vfprintf_internal_r+0x16f8>
  1065f8:	d8002a15 	stw	zero,168(sp)
  1065fc:	d8002b15 	stw	zero,172(sp)
  106600:	dc001e04 	addi	r16,sp,120
  106604:	003ef506 	br	1061dc <__alt_data_end+0xfffc61dc>
  106608:	8025883a 	mov	r18,r16
  10660c:	dc002903 	ldbu	r16,164(sp)
  106610:	e011883a 	mov	r8,fp
  106614:	84003fcc 	andi	r16,r16,255
  106618:	8005ba1e 	bne	r16,zero,107d04 <___vfprintf_internal_r+0x2284>
  10661c:	010004b4 	movhi	r4,18
  106620:	210c8b04 	addi	r4,r4,12844
  106624:	d9003915 	stw	r4,228(sp)
  106628:	9080080c 	andi	r2,r18,32
  10662c:	10006126 	beq	r2,zero,1067b4 <___vfprintf_internal_r+0xd34>
  106630:	d9402e17 	ldw	r5,184(sp)
  106634:	2cc00017 	ldw	r19,0(r5)
  106638:	2d800117 	ldw	r22,4(r5)
  10663c:	29400204 	addi	r5,r5,8
  106640:	d9402e15 	stw	r5,184(sp)
  106644:	9080004c 	andi	r2,r18,1
  106648:	1001ac26 	beq	r2,zero,106cfc <___vfprintf_internal_r+0x127c>
  10664c:	9d84b03a 	or	r2,r19,r22
  106650:	10038526 	beq	r2,zero,107468 <___vfprintf_internal_r+0x19e8>
  106654:	d8c02a17 	ldw	r3,168(sp)
  106658:	00800c04 	movi	r2,48
  10665c:	d8802705 	stb	r2,156(sp)
  106660:	dc402745 	stb	r17,157(sp)
  106664:	d8002785 	stb	zero,158(sp)
  106668:	90800094 	ori	r2,r18,2
  10666c:	18047916 	blt	r3,zero,107854 <___vfprintf_internal_r+0x1dd4>
  106670:	00bfdfc4 	movi	r2,-129
  106674:	90a4703a 	and	r18,r18,r2
  106678:	94800094 	ori	r18,r18,2
  10667c:	0039883a 	mov	fp,zero
  106680:	d9003917 	ldw	r4,228(sp)
  106684:	dc001e04 	addi	r16,sp,120
  106688:	988003cc 	andi	r2,r19,15
  10668c:	b006973a 	slli	r3,r22,28
  106690:	2085883a 	add	r2,r4,r2
  106694:	9826d13a 	srli	r19,r19,4
  106698:	10800003 	ldbu	r2,0(r2)
  10669c:	b02cd13a 	srli	r22,r22,4
  1066a0:	843fffc4 	addi	r16,r16,-1
  1066a4:	1ce6b03a 	or	r19,r3,r19
  1066a8:	80800005 	stb	r2,0(r16)
  1066ac:	9d84b03a 	or	r2,r19,r22
  1066b0:	103ff51e 	bne	r2,zero,106688 <__alt_data_end+0xfffc6688>
  1066b4:	d8c02817 	ldw	r3,160(sp)
  1066b8:	1c07c83a 	sub	r3,r3,r16
  1066bc:	d8c02b15 	stw	r3,172(sp)
  1066c0:	003ec606 	br	1061dc <__alt_data_end+0xfffc61dc>
  1066c4:	8025883a 	mov	r18,r16
  1066c8:	dc002903 	ldbu	r16,164(sp)
  1066cc:	e011883a 	mov	r8,fp
  1066d0:	84003fcc 	andi	r16,r16,255
  1066d4:	803e9626 	beq	r16,zero,106130 <__alt_data_end+0xfffc6130>
  1066d8:	d8c02b03 	ldbu	r3,172(sp)
  1066dc:	d8c02785 	stb	r3,158(sp)
  1066e0:	003e9306 	br	106130 <__alt_data_end+0xfffc6130>
  1066e4:	00c00044 	movi	r3,1
  1066e8:	d8c02905 	stb	r3,164(sp)
  1066ec:	00c00ac4 	movi	r3,43
  1066f0:	d8c02b05 	stb	r3,172(sp)
  1066f4:	ac400007 	ldb	r17,0(r21)
  1066f8:	003d4306 	br	105c08 <__alt_data_end+0xfffc5c08>
  1066fc:	84000814 	ori	r16,r16,32
  106700:	ac400007 	ldb	r17,0(r21)
  106704:	003d4006 	br	105c08 <__alt_data_end+0xfffc5c08>
  106708:	d8802e17 	ldw	r2,184(sp)
  10670c:	8025883a 	mov	r18,r16
  106710:	d8002785 	stb	zero,158(sp)
  106714:	14000017 	ldw	r16,0(r2)
  106718:	e011883a 	mov	r8,fp
  10671c:	14c00104 	addi	r19,r2,4
  106720:	80042d26 	beq	r16,zero,1077d8 <___vfprintf_internal_r+0x1d58>
  106724:	d8c02a17 	ldw	r3,168(sp)
  106728:	1803e416 	blt	r3,zero,1076bc <___vfprintf_internal_r+0x1c3c>
  10672c:	180d883a 	mov	r6,r3
  106730:	000b883a 	mov	r5,zero
  106734:	8009883a 	mov	r4,r16
  106738:	df003d15 	stw	fp,244(sp)
  10673c:	010b7200 	call	10b720 <memchr>
  106740:	da003d17 	ldw	r8,244(sp)
  106744:	10046826 	beq	r2,zero,1078e8 <___vfprintf_internal_r+0x1e68>
  106748:	1405c83a 	sub	r2,r2,r16
  10674c:	d8802b15 	stw	r2,172(sp)
  106750:	1003e016 	blt	r2,zero,1076d4 <___vfprintf_internal_r+0x1c54>
  106754:	df002783 	ldbu	fp,158(sp)
  106758:	d8802915 	stw	r2,164(sp)
  10675c:	dcc02e15 	stw	r19,184(sp)
  106760:	d8002a15 	stw	zero,168(sp)
  106764:	d8003215 	stw	zero,200(sp)
  106768:	003ea206 	br	1061f4 <__alt_data_end+0xfffc61f4>
  10676c:	8025883a 	mov	r18,r16
  106770:	dc002903 	ldbu	r16,164(sp)
  106774:	e011883a 	mov	r8,fp
  106778:	84003fcc 	andi	r16,r16,255
  10677c:	803f8d26 	beq	r16,zero,1065b4 <__alt_data_end+0xfffc65b4>
  106780:	d8c02b03 	ldbu	r3,172(sp)
  106784:	d8c02785 	stb	r3,158(sp)
  106788:	003f8a06 	br	1065b4 <__alt_data_end+0xfffc65b4>
  10678c:	8025883a 	mov	r18,r16
  106790:	dc002903 	ldbu	r16,164(sp)
  106794:	e011883a 	mov	r8,fp
  106798:	84003fcc 	andi	r16,r16,255
  10679c:	8005661e 	bne	r16,zero,107d38 <___vfprintf_internal_r+0x22b8>
  1067a0:	010004b4 	movhi	r4,18
  1067a4:	210c9004 	addi	r4,r4,12864
  1067a8:	d9003915 	stw	r4,228(sp)
  1067ac:	9080080c 	andi	r2,r18,32
  1067b0:	103f9f1e 	bne	r2,zero,106630 <__alt_data_end+0xfffc6630>
  1067b4:	9080040c 	andi	r2,r18,16
  1067b8:	1002eb26 	beq	r2,zero,107368 <___vfprintf_internal_r+0x18e8>
  1067bc:	d8802e17 	ldw	r2,184(sp)
  1067c0:	002d883a 	mov	r22,zero
  1067c4:	14c00017 	ldw	r19,0(r2)
  1067c8:	10800104 	addi	r2,r2,4
  1067cc:	d8802e15 	stw	r2,184(sp)
  1067d0:	003f9c06 	br	106644 <__alt_data_end+0xfffc6644>
  1067d4:	d8802b07 	ldb	r2,172(sp)
  1067d8:	1002e11e 	bne	r2,zero,107360 <___vfprintf_internal_r+0x18e0>
  1067dc:	00c00044 	movi	r3,1
  1067e0:	d8c02905 	stb	r3,164(sp)
  1067e4:	00c00804 	movi	r3,32
  1067e8:	d8c02b05 	stb	r3,172(sp)
  1067ec:	ac400007 	ldb	r17,0(r21)
  1067f0:	003d0506 	br	105c08 <__alt_data_end+0xfffc5c08>
  1067f4:	84000054 	ori	r16,r16,1
  1067f8:	ac400007 	ldb	r17,0(r21)
  1067fc:	003d0206 	br	105c08 <__alt_data_end+0xfffc5c08>
  106800:	8025883a 	mov	r18,r16
  106804:	dc002903 	ldbu	r16,164(sp)
  106808:	e011883a 	mov	r8,fp
  10680c:	84003fcc 	andi	r16,r16,255
  106810:	803de726 	beq	r16,zero,105fb0 <__alt_data_end+0xfffc5fb0>
  106814:	d8c02b03 	ldbu	r3,172(sp)
  106818:	d8c02785 	stb	r3,158(sp)
  10681c:	003de406 	br	105fb0 <__alt_data_end+0xfffc5fb0>
  106820:	84001014 	ori	r16,r16,64
  106824:	ac400007 	ldb	r17,0(r21)
  106828:	003cf706 	br	105c08 <__alt_data_end+0xfffc5c08>
  10682c:	ac400007 	ldb	r17,0(r21)
  106830:	00801b04 	movi	r2,108
  106834:	88838f26 	beq	r17,r2,107674 <___vfprintf_internal_r+0x1bf4>
  106838:	84000414 	ori	r16,r16,16
  10683c:	003cf206 	br	105c08 <__alt_data_end+0xfffc5c08>
  106840:	8025883a 	mov	r18,r16
  106844:	dc002903 	ldbu	r16,164(sp)
  106848:	e011883a 	mov	r8,fp
  10684c:	84003fcc 	andi	r16,r16,255
  106850:	80053f1e 	bne	r16,zero,107d50 <___vfprintf_internal_r+0x22d0>
  106854:	9080080c 	andi	r2,r18,32
  106858:	1002d226 	beq	r2,zero,1073a4 <___vfprintf_internal_r+0x1924>
  10685c:	d9002e17 	ldw	r4,184(sp)
  106860:	d9402f17 	ldw	r5,188(sp)
  106864:	20800017 	ldw	r2,0(r4)
  106868:	2807d7fa 	srai	r3,r5,31
  10686c:	21000104 	addi	r4,r4,4
  106870:	d9002e15 	stw	r4,184(sp)
  106874:	11400015 	stw	r5,0(r2)
  106878:	10c00115 	stw	r3,4(r2)
  10687c:	003cb806 	br	105b60 <__alt_data_end+0xfffc5b60>
  106880:	d8c02e17 	ldw	r3,184(sp)
  106884:	d9002e17 	ldw	r4,184(sp)
  106888:	8025883a 	mov	r18,r16
  10688c:	18800017 	ldw	r2,0(r3)
  106890:	21000104 	addi	r4,r4,4
  106894:	00c00044 	movi	r3,1
  106898:	e011883a 	mov	r8,fp
  10689c:	d8c02915 	stw	r3,164(sp)
  1068a0:	d8002785 	stb	zero,158(sp)
  1068a4:	d8801405 	stb	r2,80(sp)
  1068a8:	d9002e15 	stw	r4,184(sp)
  1068ac:	d8c02b15 	stw	r3,172(sp)
  1068b0:	d8002a15 	stw	zero,168(sp)
  1068b4:	d8003215 	stw	zero,200(sp)
  1068b8:	dc001404 	addi	r16,sp,80
  1068bc:	0039883a 	mov	fp,zero
  1068c0:	003e5306 	br	106210 <__alt_data_end+0xfffc6210>
  1068c4:	010004b4 	movhi	r4,18
  1068c8:	210c9004 	addi	r4,r4,12864
  1068cc:	0039883a 	mov	fp,zero
  1068d0:	d9003915 	stw	r4,228(sp)
  1068d4:	04401e04 	movi	r17,120
  1068d8:	003f6906 	br	106680 <__alt_data_end+0xfffc6680>
  1068dc:	8025883a 	mov	r18,r16
  1068e0:	dc002903 	ldbu	r16,164(sp)
  1068e4:	e011883a 	mov	r8,fp
  1068e8:	84003fcc 	andi	r16,r16,255
  1068ec:	8005081e 	bne	r16,zero,107d10 <___vfprintf_internal_r+0x2290>
  1068f0:	883d6126 	beq	r17,zero,105e78 <__alt_data_end+0xfffc5e78>
  1068f4:	00c00044 	movi	r3,1
  1068f8:	d8c02915 	stw	r3,164(sp)
  1068fc:	dc401405 	stb	r17,80(sp)
  106900:	d8002785 	stb	zero,158(sp)
  106904:	003fe906 	br	1068ac <__alt_data_end+0xfffc68ac>
  106908:	014004b4 	movhi	r5,18
  10690c:	294c9004 	addi	r5,r5,12864
  106910:	d9403915 	stw	r5,228(sp)
  106914:	d8c02e15 	stw	r3,184(sp)
  106918:	1025883a 	mov	r18,r2
  10691c:	04401e04 	movi	r17,120
  106920:	9d84b03a 	or	r2,r19,r22
  106924:	1000fc1e 	bne	r2,zero,106d18 <___vfprintf_internal_r+0x1298>
  106928:	0039883a 	mov	fp,zero
  10692c:	00800084 	movi	r2,2
  106930:	10803fcc 	andi	r2,r2,255
  106934:	00c00044 	movi	r3,1
  106938:	10c20f26 	beq	r2,r3,107178 <___vfprintf_internal_r+0x16f8>
  10693c:	00c00084 	movi	r3,2
  106940:	10fd3326 	beq	r2,r3,105e10 <__alt_data_end+0xfffc5e10>
  106944:	003e0b06 	br	106174 <__alt_data_end+0xfffc6174>
  106948:	d8c02017 	ldw	r3,128(sp)
  10694c:	003e7106 	br	106314 <__alt_data_end+0xfffc6314>
  106950:	00801944 	movi	r2,101
  106954:	14407e0e 	bge	r2,r17,106b50 <___vfprintf_internal_r+0x10d0>
  106958:	d9003617 	ldw	r4,216(sp)
  10695c:	d9403817 	ldw	r5,224(sp)
  106960:	000d883a 	mov	r6,zero
  106964:	000f883a 	mov	r7,zero
  106968:	d8c03c15 	stw	r3,240(sp)
  10696c:	da003d15 	stw	r8,244(sp)
  106970:	0116e9c0 	call	116e9c <__eqdf2>
  106974:	d8c03c17 	ldw	r3,240(sp)
  106978:	da003d17 	ldw	r8,244(sp)
  10697c:	1000f71e 	bne	r2,zero,106d5c <___vfprintf_internal_r+0x12dc>
  106980:	d8801f17 	ldw	r2,124(sp)
  106984:	010004b4 	movhi	r4,18
  106988:	210c9704 	addi	r4,r4,12892
  10698c:	18c00044 	addi	r3,r3,1
  106990:	10800044 	addi	r2,r2,1
  106994:	41000015 	stw	r4,0(r8)
  106998:	01000044 	movi	r4,1
  10699c:	41000115 	stw	r4,4(r8)
  1069a0:	d8c02015 	stw	r3,128(sp)
  1069a4:	d8801f15 	stw	r2,124(sp)
  1069a8:	010001c4 	movi	r4,7
  1069ac:	2082b816 	blt	r4,r2,107490 <___vfprintf_internal_r+0x1a10>
  1069b0:	42000204 	addi	r8,r8,8
  1069b4:	d8802617 	ldw	r2,152(sp)
  1069b8:	d9403317 	ldw	r5,204(sp)
  1069bc:	11400216 	blt	r2,r5,1069c8 <___vfprintf_internal_r+0xf48>
  1069c0:	9080004c 	andi	r2,r18,1
  1069c4:	103eb326 	beq	r2,zero,106494 <__alt_data_end+0xfffc6494>
  1069c8:	d8803717 	ldw	r2,220(sp)
  1069cc:	d9003417 	ldw	r4,208(sp)
  1069d0:	d9403717 	ldw	r5,220(sp)
  1069d4:	1887883a 	add	r3,r3,r2
  1069d8:	d8801f17 	ldw	r2,124(sp)
  1069dc:	41000015 	stw	r4,0(r8)
  1069e0:	41400115 	stw	r5,4(r8)
  1069e4:	10800044 	addi	r2,r2,1
  1069e8:	d8c02015 	stw	r3,128(sp)
  1069ec:	d8801f15 	stw	r2,124(sp)
  1069f0:	010001c4 	movi	r4,7
  1069f4:	20832916 	blt	r4,r2,10769c <___vfprintf_internal_r+0x1c1c>
  1069f8:	42000204 	addi	r8,r8,8
  1069fc:	d8803317 	ldw	r2,204(sp)
  106a00:	143fffc4 	addi	r16,r2,-1
  106a04:	043ea30e 	bge	zero,r16,106494 <__alt_data_end+0xfffc6494>
  106a08:	04400404 	movi	r17,16
  106a0c:	d8801f17 	ldw	r2,124(sp)
  106a10:	8c00880e 	bge	r17,r16,106c34 <___vfprintf_internal_r+0x11b4>
  106a14:	014004b4 	movhi	r5,18
  106a18:	294caa04 	addi	r5,r5,12968
  106a1c:	d9402c15 	stw	r5,176(sp)
  106a20:	058001c4 	movi	r22,7
  106a24:	dcc02d17 	ldw	r19,180(sp)
  106a28:	00000306 	br	106a38 <___vfprintf_internal_r+0xfb8>
  106a2c:	42000204 	addi	r8,r8,8
  106a30:	843ffc04 	addi	r16,r16,-16
  106a34:	8c00820e 	bge	r17,r16,106c40 <___vfprintf_internal_r+0x11c0>
  106a38:	18c00404 	addi	r3,r3,16
  106a3c:	10800044 	addi	r2,r2,1
  106a40:	45000015 	stw	r20,0(r8)
  106a44:	44400115 	stw	r17,4(r8)
  106a48:	d8c02015 	stw	r3,128(sp)
  106a4c:	d8801f15 	stw	r2,124(sp)
  106a50:	b0bff60e 	bge	r22,r2,106a2c <__alt_data_end+0xfffc6a2c>
  106a54:	d9801e04 	addi	r6,sp,120
  106a58:	b80b883a 	mov	r5,r23
  106a5c:	9809883a 	mov	r4,r19
  106a60:	01120b80 	call	1120b8 <__sprint_r>
  106a64:	103d0a1e 	bne	r2,zero,105e90 <__alt_data_end+0xfffc5e90>
  106a68:	d8c02017 	ldw	r3,128(sp)
  106a6c:	d8801f17 	ldw	r2,124(sp)
  106a70:	da000404 	addi	r8,sp,16
  106a74:	003fee06 	br	106a30 <__alt_data_end+0xfffc6a30>
  106a78:	d9403117 	ldw	r5,196(sp)
  106a7c:	d8802917 	ldw	r2,164(sp)
  106a80:	28adc83a 	sub	r22,r5,r2
  106a84:	05be410e 	bge	zero,r22,10638c <__alt_data_end+0xfffc638c>
  106a88:	07000404 	movi	fp,16
  106a8c:	d8801f17 	ldw	r2,124(sp)
  106a90:	e5838f0e 	bge	fp,r22,1078d0 <___vfprintf_internal_r+0x1e50>
  106a94:	014004b4 	movhi	r5,18
  106a98:	294caa04 	addi	r5,r5,12968
  106a9c:	dc403015 	stw	r17,192(sp)
  106aa0:	d9402c15 	stw	r5,176(sp)
  106aa4:	b023883a 	mov	r17,r22
  106aa8:	04c001c4 	movi	r19,7
  106aac:	a82d883a 	mov	r22,r21
  106ab0:	902b883a 	mov	r21,r18
  106ab4:	8025883a 	mov	r18,r16
  106ab8:	dc002d17 	ldw	r16,180(sp)
  106abc:	00000306 	br	106acc <___vfprintf_internal_r+0x104c>
  106ac0:	8c7ffc04 	addi	r17,r17,-16
  106ac4:	42000204 	addi	r8,r8,8
  106ac8:	e440110e 	bge	fp,r17,106b10 <___vfprintf_internal_r+0x1090>
  106acc:	18c00404 	addi	r3,r3,16
  106ad0:	10800044 	addi	r2,r2,1
  106ad4:	45000015 	stw	r20,0(r8)
  106ad8:	47000115 	stw	fp,4(r8)
  106adc:	d8c02015 	stw	r3,128(sp)
  106ae0:	d8801f15 	stw	r2,124(sp)
  106ae4:	98bff60e 	bge	r19,r2,106ac0 <__alt_data_end+0xfffc6ac0>
  106ae8:	d9801e04 	addi	r6,sp,120
  106aec:	b80b883a 	mov	r5,r23
  106af0:	8009883a 	mov	r4,r16
  106af4:	01120b80 	call	1120b8 <__sprint_r>
  106af8:	103ce51e 	bne	r2,zero,105e90 <__alt_data_end+0xfffc5e90>
  106afc:	8c7ffc04 	addi	r17,r17,-16
  106b00:	d8c02017 	ldw	r3,128(sp)
  106b04:	d8801f17 	ldw	r2,124(sp)
  106b08:	da000404 	addi	r8,sp,16
  106b0c:	e47fef16 	blt	fp,r17,106acc <__alt_data_end+0xfffc6acc>
  106b10:	9021883a 	mov	r16,r18
  106b14:	a825883a 	mov	r18,r21
  106b18:	b02b883a 	mov	r21,r22
  106b1c:	882d883a 	mov	r22,r17
  106b20:	dc403017 	ldw	r17,192(sp)
  106b24:	d9002c17 	ldw	r4,176(sp)
  106b28:	1d87883a 	add	r3,r3,r22
  106b2c:	10800044 	addi	r2,r2,1
  106b30:	41000015 	stw	r4,0(r8)
  106b34:	45800115 	stw	r22,4(r8)
  106b38:	d8c02015 	stw	r3,128(sp)
  106b3c:	d8801f15 	stw	r2,124(sp)
  106b40:	010001c4 	movi	r4,7
  106b44:	20818e16 	blt	r4,r2,107180 <___vfprintf_internal_r+0x1700>
  106b48:	42000204 	addi	r8,r8,8
  106b4c:	003e0f06 	br	10638c <__alt_data_end+0xfffc638c>
  106b50:	d9403317 	ldw	r5,204(sp)
  106b54:	00800044 	movi	r2,1
  106b58:	18c00044 	addi	r3,r3,1
  106b5c:	1141530e 	bge	r2,r5,1070ac <___vfprintf_internal_r+0x162c>
  106b60:	dc401f17 	ldw	r17,124(sp)
  106b64:	00800044 	movi	r2,1
  106b68:	40800115 	stw	r2,4(r8)
  106b6c:	8c400044 	addi	r17,r17,1
  106b70:	44000015 	stw	r16,0(r8)
  106b74:	d8c02015 	stw	r3,128(sp)
  106b78:	dc401f15 	stw	r17,124(sp)
  106b7c:	008001c4 	movi	r2,7
  106b80:	14416b16 	blt	r2,r17,107130 <___vfprintf_internal_r+0x16b0>
  106b84:	42000204 	addi	r8,r8,8
  106b88:	d8803717 	ldw	r2,220(sp)
  106b8c:	d9003417 	ldw	r4,208(sp)
  106b90:	8c400044 	addi	r17,r17,1
  106b94:	10c7883a 	add	r3,r2,r3
  106b98:	40800115 	stw	r2,4(r8)
  106b9c:	41000015 	stw	r4,0(r8)
  106ba0:	d8c02015 	stw	r3,128(sp)
  106ba4:	dc401f15 	stw	r17,124(sp)
  106ba8:	008001c4 	movi	r2,7
  106bac:	14416916 	blt	r2,r17,107154 <___vfprintf_internal_r+0x16d4>
  106bb0:	45800204 	addi	r22,r8,8
  106bb4:	d9003617 	ldw	r4,216(sp)
  106bb8:	d9403817 	ldw	r5,224(sp)
  106bbc:	000d883a 	mov	r6,zero
  106bc0:	000f883a 	mov	r7,zero
  106bc4:	d8c03c15 	stw	r3,240(sp)
  106bc8:	0116e9c0 	call	116e9c <__eqdf2>
  106bcc:	d8c03c17 	ldw	r3,240(sp)
  106bd0:	1000bc26 	beq	r2,zero,106ec4 <___vfprintf_internal_r+0x1444>
  106bd4:	d9403317 	ldw	r5,204(sp)
  106bd8:	84000044 	addi	r16,r16,1
  106bdc:	8c400044 	addi	r17,r17,1
  106be0:	28bfffc4 	addi	r2,r5,-1
  106be4:	1887883a 	add	r3,r3,r2
  106be8:	b0800115 	stw	r2,4(r22)
  106bec:	b4000015 	stw	r16,0(r22)
  106bf0:	d8c02015 	stw	r3,128(sp)
  106bf4:	dc401f15 	stw	r17,124(sp)
  106bf8:	008001c4 	movi	r2,7
  106bfc:	14414316 	blt	r2,r17,10710c <___vfprintf_internal_r+0x168c>
  106c00:	b5800204 	addi	r22,r22,8
  106c04:	d9003a17 	ldw	r4,232(sp)
  106c08:	df0022c4 	addi	fp,sp,139
  106c0c:	8c400044 	addi	r17,r17,1
  106c10:	20c7883a 	add	r3,r4,r3
  106c14:	b7000015 	stw	fp,0(r22)
  106c18:	b1000115 	stw	r4,4(r22)
  106c1c:	d8c02015 	stw	r3,128(sp)
  106c20:	dc401f15 	stw	r17,124(sp)
  106c24:	008001c4 	movi	r2,7
  106c28:	14400e16 	blt	r2,r17,106c64 <___vfprintf_internal_r+0x11e4>
  106c2c:	b2000204 	addi	r8,r22,8
  106c30:	003e1806 	br	106494 <__alt_data_end+0xfffc6494>
  106c34:	010004b4 	movhi	r4,18
  106c38:	210caa04 	addi	r4,r4,12968
  106c3c:	d9002c15 	stw	r4,176(sp)
  106c40:	d9002c17 	ldw	r4,176(sp)
  106c44:	1c07883a 	add	r3,r3,r16
  106c48:	44000115 	stw	r16,4(r8)
  106c4c:	41000015 	stw	r4,0(r8)
  106c50:	10800044 	addi	r2,r2,1
  106c54:	d8c02015 	stw	r3,128(sp)
  106c58:	d8801f15 	stw	r2,124(sp)
  106c5c:	010001c4 	movi	r4,7
  106c60:	20be0b0e 	bge	r4,r2,106490 <__alt_data_end+0xfffc6490>
  106c64:	d9002d17 	ldw	r4,180(sp)
  106c68:	d9801e04 	addi	r6,sp,120
  106c6c:	b80b883a 	mov	r5,r23
  106c70:	01120b80 	call	1120b8 <__sprint_r>
  106c74:	103c861e 	bne	r2,zero,105e90 <__alt_data_end+0xfffc5e90>
  106c78:	d8c02017 	ldw	r3,128(sp)
  106c7c:	da000404 	addi	r8,sp,16
  106c80:	003e0406 	br	106494 <__alt_data_end+0xfffc6494>
  106c84:	d9002d17 	ldw	r4,180(sp)
  106c88:	d9801e04 	addi	r6,sp,120
  106c8c:	b80b883a 	mov	r5,r23
  106c90:	01120b80 	call	1120b8 <__sprint_r>
  106c94:	103e3b26 	beq	r2,zero,106584 <__alt_data_end+0xfffc6584>
  106c98:	003c7d06 	br	105e90 <__alt_data_end+0xfffc5e90>
  106c9c:	d9002d17 	ldw	r4,180(sp)
  106ca0:	d9801e04 	addi	r6,sp,120
  106ca4:	b80b883a 	mov	r5,r23
  106ca8:	01120b80 	call	1120b8 <__sprint_r>
  106cac:	103c781e 	bne	r2,zero,105e90 <__alt_data_end+0xfffc5e90>
  106cb0:	d8c02017 	ldw	r3,128(sp)
  106cb4:	da000404 	addi	r8,sp,16
  106cb8:	003de906 	br	106460 <__alt_data_end+0xfffc6460>
  106cbc:	d9002d17 	ldw	r4,180(sp)
  106cc0:	d9801e04 	addi	r6,sp,120
  106cc4:	b80b883a 	mov	r5,r23
  106cc8:	01120b80 	call	1120b8 <__sprint_r>
  106ccc:	103c701e 	bne	r2,zero,105e90 <__alt_data_end+0xfffc5e90>
  106cd0:	d8c02017 	ldw	r3,128(sp)
  106cd4:	da000404 	addi	r8,sp,16
  106cd8:	003d9b06 	br	106348 <__alt_data_end+0xfffc6348>
  106cdc:	d9002d17 	ldw	r4,180(sp)
  106ce0:	d9801e04 	addi	r6,sp,120
  106ce4:	b80b883a 	mov	r5,r23
  106ce8:	01120b80 	call	1120b8 <__sprint_r>
  106cec:	103c681e 	bne	r2,zero,105e90 <__alt_data_end+0xfffc5e90>
  106cf0:	d8c02017 	ldw	r3,128(sp)
  106cf4:	da000404 	addi	r8,sp,16
  106cf8:	003da106 	br	106380 <__alt_data_end+0xfffc6380>
  106cfc:	d9402a17 	ldw	r5,168(sp)
  106d00:	d8002785 	stb	zero,158(sp)
  106d04:	283f0616 	blt	r5,zero,106920 <__alt_data_end+0xfffc6920>
  106d08:	00ffdfc4 	movi	r3,-129
  106d0c:	9d84b03a 	or	r2,r19,r22
  106d10:	90e4703a 	and	r18,r18,r3
  106d14:	103c3b26 	beq	r2,zero,105e04 <__alt_data_end+0xfffc5e04>
  106d18:	0039883a 	mov	fp,zero
  106d1c:	003e5806 	br	106680 <__alt_data_end+0xfffc6680>
  106d20:	9080040c 	andi	r2,r18,16
  106d24:	1001b326 	beq	r2,zero,1073f4 <___vfprintf_internal_r+0x1974>
  106d28:	d8c02e17 	ldw	r3,184(sp)
  106d2c:	d9002a17 	ldw	r4,168(sp)
  106d30:	d8002785 	stb	zero,158(sp)
  106d34:	18800104 	addi	r2,r3,4
  106d38:	1cc00017 	ldw	r19,0(r3)
  106d3c:	002d883a 	mov	r22,zero
  106d40:	2001b516 	blt	r4,zero,107418 <___vfprintf_internal_r+0x1998>
  106d44:	00ffdfc4 	movi	r3,-129
  106d48:	d8802e15 	stw	r2,184(sp)
  106d4c:	90e4703a 	and	r18,r18,r3
  106d50:	983d0526 	beq	r19,zero,106168 <__alt_data_end+0xfffc6168>
  106d54:	0039883a 	mov	fp,zero
  106d58:	003d0806 	br	10617c <__alt_data_end+0xfffc617c>
  106d5c:	dc402617 	ldw	r17,152(sp)
  106d60:	0441d30e 	bge	zero,r17,1074b0 <___vfprintf_internal_r+0x1a30>
  106d64:	dc403217 	ldw	r17,200(sp)
  106d68:	d8803317 	ldw	r2,204(sp)
  106d6c:	1440010e 	bge	r2,r17,106d74 <___vfprintf_internal_r+0x12f4>
  106d70:	1023883a 	mov	r17,r2
  106d74:	04400a0e 	bge	zero,r17,106da0 <___vfprintf_internal_r+0x1320>
  106d78:	d8801f17 	ldw	r2,124(sp)
  106d7c:	1c47883a 	add	r3,r3,r17
  106d80:	44000015 	stw	r16,0(r8)
  106d84:	10800044 	addi	r2,r2,1
  106d88:	44400115 	stw	r17,4(r8)
  106d8c:	d8c02015 	stw	r3,128(sp)
  106d90:	d8801f15 	stw	r2,124(sp)
  106d94:	010001c4 	movi	r4,7
  106d98:	20826516 	blt	r4,r2,107730 <___vfprintf_internal_r+0x1cb0>
  106d9c:	42000204 	addi	r8,r8,8
  106da0:	88026116 	blt	r17,zero,107728 <___vfprintf_internal_r+0x1ca8>
  106da4:	d9003217 	ldw	r4,200(sp)
  106da8:	2463c83a 	sub	r17,r4,r17
  106dac:	04407b0e 	bge	zero,r17,106f9c <___vfprintf_internal_r+0x151c>
  106db0:	05800404 	movi	r22,16
  106db4:	d8801f17 	ldw	r2,124(sp)
  106db8:	b4419d0e 	bge	r22,r17,107430 <___vfprintf_internal_r+0x19b0>
  106dbc:	010004b4 	movhi	r4,18
  106dc0:	210caa04 	addi	r4,r4,12968
  106dc4:	d9002c15 	stw	r4,176(sp)
  106dc8:	070001c4 	movi	fp,7
  106dcc:	dcc02d17 	ldw	r19,180(sp)
  106dd0:	00000306 	br	106de0 <___vfprintf_internal_r+0x1360>
  106dd4:	42000204 	addi	r8,r8,8
  106dd8:	8c7ffc04 	addi	r17,r17,-16
  106ddc:	b441970e 	bge	r22,r17,10743c <___vfprintf_internal_r+0x19bc>
  106de0:	18c00404 	addi	r3,r3,16
  106de4:	10800044 	addi	r2,r2,1
  106de8:	45000015 	stw	r20,0(r8)
  106dec:	45800115 	stw	r22,4(r8)
  106df0:	d8c02015 	stw	r3,128(sp)
  106df4:	d8801f15 	stw	r2,124(sp)
  106df8:	e0bff60e 	bge	fp,r2,106dd4 <__alt_data_end+0xfffc6dd4>
  106dfc:	d9801e04 	addi	r6,sp,120
  106e00:	b80b883a 	mov	r5,r23
  106e04:	9809883a 	mov	r4,r19
  106e08:	01120b80 	call	1120b8 <__sprint_r>
  106e0c:	103c201e 	bne	r2,zero,105e90 <__alt_data_end+0xfffc5e90>
  106e10:	d8c02017 	ldw	r3,128(sp)
  106e14:	d8801f17 	ldw	r2,124(sp)
  106e18:	da000404 	addi	r8,sp,16
  106e1c:	003fee06 	br	106dd8 <__alt_data_end+0xfffc6dd8>
  106e20:	d9002d17 	ldw	r4,180(sp)
  106e24:	d9801e04 	addi	r6,sp,120
  106e28:	b80b883a 	mov	r5,r23
  106e2c:	01120b80 	call	1120b8 <__sprint_r>
  106e30:	103c171e 	bne	r2,zero,105e90 <__alt_data_end+0xfffc5e90>
  106e34:	d8c02017 	ldw	r3,128(sp)
  106e38:	df002787 	ldb	fp,158(sp)
  106e3c:	da000404 	addi	r8,sp,16
  106e40:	003d3406 	br	106314 <__alt_data_end+0xfffc6314>
  106e44:	9080040c 	andi	r2,r18,16
  106e48:	10016126 	beq	r2,zero,1073d0 <___vfprintf_internal_r+0x1950>
  106e4c:	d9402e17 	ldw	r5,184(sp)
  106e50:	2cc00017 	ldw	r19,0(r5)
  106e54:	29400104 	addi	r5,r5,4
  106e58:	d9402e15 	stw	r5,184(sp)
  106e5c:	982dd7fa 	srai	r22,r19,31
  106e60:	b005883a 	mov	r2,r22
  106e64:	003c5a06 	br	105fd0 <__alt_data_end+0xfffc5fd0>
  106e68:	9080040c 	andi	r2,r18,16
  106e6c:	10003526 	beq	r2,zero,106f44 <___vfprintf_internal_r+0x14c4>
  106e70:	d8c02e17 	ldw	r3,184(sp)
  106e74:	d9002a17 	ldw	r4,168(sp)
  106e78:	d8002785 	stb	zero,158(sp)
  106e7c:	18800104 	addi	r2,r3,4
  106e80:	1cc00017 	ldw	r19,0(r3)
  106e84:	002d883a 	mov	r22,zero
  106e88:	20003716 	blt	r4,zero,106f68 <___vfprintf_internal_r+0x14e8>
  106e8c:	00ffdfc4 	movi	r3,-129
  106e90:	d8802e15 	stw	r2,184(sp)
  106e94:	90e4703a 	and	r18,r18,r3
  106e98:	0039883a 	mov	fp,zero
  106e9c:	983dd426 	beq	r19,zero,1065f0 <__alt_data_end+0xfffc65f0>
  106ea0:	00800244 	movi	r2,9
  106ea4:	14fc5336 	bltu	r2,r19,105ff4 <__alt_data_end+0xfffc5ff4>
  106ea8:	d8c02817 	ldw	r3,160(sp)
  106eac:	dc001dc4 	addi	r16,sp,119
  106eb0:	9cc00c04 	addi	r19,r19,48
  106eb4:	1c07c83a 	sub	r3,r3,r16
  106eb8:	dcc01dc5 	stb	r19,119(sp)
  106ebc:	d8c02b15 	stw	r3,172(sp)
  106ec0:	003cc606 	br	1061dc <__alt_data_end+0xfffc61dc>
  106ec4:	d8803317 	ldw	r2,204(sp)
  106ec8:	143fffc4 	addi	r16,r2,-1
  106ecc:	043f4d0e 	bge	zero,r16,106c04 <__alt_data_end+0xfffc6c04>
  106ed0:	07000404 	movi	fp,16
  106ed4:	e400810e 	bge	fp,r16,1070dc <___vfprintf_internal_r+0x165c>
  106ed8:	014004b4 	movhi	r5,18
  106edc:	294caa04 	addi	r5,r5,12968
  106ee0:	d9402c15 	stw	r5,176(sp)
  106ee4:	01c001c4 	movi	r7,7
  106ee8:	dcc02d17 	ldw	r19,180(sp)
  106eec:	00000306 	br	106efc <___vfprintf_internal_r+0x147c>
  106ef0:	b5800204 	addi	r22,r22,8
  106ef4:	843ffc04 	addi	r16,r16,-16
  106ef8:	e4007b0e 	bge	fp,r16,1070e8 <___vfprintf_internal_r+0x1668>
  106efc:	18c00404 	addi	r3,r3,16
  106f00:	8c400044 	addi	r17,r17,1
  106f04:	b5000015 	stw	r20,0(r22)
  106f08:	b7000115 	stw	fp,4(r22)
  106f0c:	d8c02015 	stw	r3,128(sp)
  106f10:	dc401f15 	stw	r17,124(sp)
  106f14:	3c7ff60e 	bge	r7,r17,106ef0 <__alt_data_end+0xfffc6ef0>
  106f18:	d9801e04 	addi	r6,sp,120
  106f1c:	b80b883a 	mov	r5,r23
  106f20:	9809883a 	mov	r4,r19
  106f24:	d9c03c15 	stw	r7,240(sp)
  106f28:	01120b80 	call	1120b8 <__sprint_r>
  106f2c:	d9c03c17 	ldw	r7,240(sp)
  106f30:	103bd71e 	bne	r2,zero,105e90 <__alt_data_end+0xfffc5e90>
  106f34:	d8c02017 	ldw	r3,128(sp)
  106f38:	dc401f17 	ldw	r17,124(sp)
  106f3c:	dd800404 	addi	r22,sp,16
  106f40:	003fec06 	br	106ef4 <__alt_data_end+0xfffc6ef4>
  106f44:	9080100c 	andi	r2,r18,64
  106f48:	d8002785 	stb	zero,158(sp)
  106f4c:	10010e26 	beq	r2,zero,107388 <___vfprintf_internal_r+0x1908>
  106f50:	d9402e17 	ldw	r5,184(sp)
  106f54:	d8c02a17 	ldw	r3,168(sp)
  106f58:	002d883a 	mov	r22,zero
  106f5c:	28800104 	addi	r2,r5,4
  106f60:	2cc0000b 	ldhu	r19,0(r5)
  106f64:	183fc90e 	bge	r3,zero,106e8c <__alt_data_end+0xfffc6e8c>
  106f68:	d8802e15 	stw	r2,184(sp)
  106f6c:	0039883a 	mov	fp,zero
  106f70:	9d84b03a 	or	r2,r19,r22
  106f74:	103c1e1e 	bne	r2,zero,105ff0 <__alt_data_end+0xfffc5ff0>
  106f78:	00800044 	movi	r2,1
  106f7c:	003e6c06 	br	106930 <__alt_data_end+0xfffc6930>
  106f80:	d9002d17 	ldw	r4,180(sp)
  106f84:	d9801e04 	addi	r6,sp,120
  106f88:	b80b883a 	mov	r5,r23
  106f8c:	01120b80 	call	1120b8 <__sprint_r>
  106f90:	103bbf1e 	bne	r2,zero,105e90 <__alt_data_end+0xfffc5e90>
  106f94:	d8c02017 	ldw	r3,128(sp)
  106f98:	da000404 	addi	r8,sp,16
  106f9c:	d9003217 	ldw	r4,200(sp)
  106fa0:	d8802617 	ldw	r2,152(sp)
  106fa4:	d9403317 	ldw	r5,204(sp)
  106fa8:	8123883a 	add	r17,r16,r4
  106fac:	11400216 	blt	r2,r5,106fb8 <___vfprintf_internal_r+0x1538>
  106fb0:	9100004c 	andi	r4,r18,1
  106fb4:	20000d26 	beq	r4,zero,106fec <___vfprintf_internal_r+0x156c>
  106fb8:	d9003717 	ldw	r4,220(sp)
  106fbc:	d9403417 	ldw	r5,208(sp)
  106fc0:	1907883a 	add	r3,r3,r4
  106fc4:	d9001f17 	ldw	r4,124(sp)
  106fc8:	41400015 	stw	r5,0(r8)
  106fcc:	d9403717 	ldw	r5,220(sp)
  106fd0:	21000044 	addi	r4,r4,1
  106fd4:	d8c02015 	stw	r3,128(sp)
  106fd8:	41400115 	stw	r5,4(r8)
  106fdc:	d9001f15 	stw	r4,124(sp)
  106fe0:	014001c4 	movi	r5,7
  106fe4:	2901e816 	blt	r5,r4,107788 <___vfprintf_internal_r+0x1d08>
  106fe8:	42000204 	addi	r8,r8,8
  106fec:	d9003317 	ldw	r4,204(sp)
  106ff0:	8121883a 	add	r16,r16,r4
  106ff4:	2085c83a 	sub	r2,r4,r2
  106ff8:	8461c83a 	sub	r16,r16,r17
  106ffc:	1400010e 	bge	r2,r16,107004 <___vfprintf_internal_r+0x1584>
  107000:	1021883a 	mov	r16,r2
  107004:	04000a0e 	bge	zero,r16,107030 <___vfprintf_internal_r+0x15b0>
  107008:	d9001f17 	ldw	r4,124(sp)
  10700c:	1c07883a 	add	r3,r3,r16
  107010:	44400015 	stw	r17,0(r8)
  107014:	21000044 	addi	r4,r4,1
  107018:	44000115 	stw	r16,4(r8)
  10701c:	d8c02015 	stw	r3,128(sp)
  107020:	d9001f15 	stw	r4,124(sp)
  107024:	014001c4 	movi	r5,7
  107028:	2901fb16 	blt	r5,r4,107818 <___vfprintf_internal_r+0x1d98>
  10702c:	42000204 	addi	r8,r8,8
  107030:	8001f716 	blt	r16,zero,107810 <___vfprintf_internal_r+0x1d90>
  107034:	1421c83a 	sub	r16,r2,r16
  107038:	043d160e 	bge	zero,r16,106494 <__alt_data_end+0xfffc6494>
  10703c:	04400404 	movi	r17,16
  107040:	d8801f17 	ldw	r2,124(sp)
  107044:	8c3efb0e 	bge	r17,r16,106c34 <__alt_data_end+0xfffc6c34>
  107048:	014004b4 	movhi	r5,18
  10704c:	294caa04 	addi	r5,r5,12968
  107050:	d9402c15 	stw	r5,176(sp)
  107054:	058001c4 	movi	r22,7
  107058:	dcc02d17 	ldw	r19,180(sp)
  10705c:	00000306 	br	10706c <___vfprintf_internal_r+0x15ec>
  107060:	42000204 	addi	r8,r8,8
  107064:	843ffc04 	addi	r16,r16,-16
  107068:	8c3ef50e 	bge	r17,r16,106c40 <__alt_data_end+0xfffc6c40>
  10706c:	18c00404 	addi	r3,r3,16
  107070:	10800044 	addi	r2,r2,1
  107074:	45000015 	stw	r20,0(r8)
  107078:	44400115 	stw	r17,4(r8)
  10707c:	d8c02015 	stw	r3,128(sp)
  107080:	d8801f15 	stw	r2,124(sp)
  107084:	b0bff60e 	bge	r22,r2,107060 <__alt_data_end+0xfffc7060>
  107088:	d9801e04 	addi	r6,sp,120
  10708c:	b80b883a 	mov	r5,r23
  107090:	9809883a 	mov	r4,r19
  107094:	01120b80 	call	1120b8 <__sprint_r>
  107098:	103b7d1e 	bne	r2,zero,105e90 <__alt_data_end+0xfffc5e90>
  10709c:	d8c02017 	ldw	r3,128(sp)
  1070a0:	d8801f17 	ldw	r2,124(sp)
  1070a4:	da000404 	addi	r8,sp,16
  1070a8:	003fee06 	br	107064 <__alt_data_end+0xfffc7064>
  1070ac:	9088703a 	and	r4,r18,r2
  1070b0:	203eab1e 	bne	r4,zero,106b60 <__alt_data_end+0xfffc6b60>
  1070b4:	dc401f17 	ldw	r17,124(sp)
  1070b8:	40800115 	stw	r2,4(r8)
  1070bc:	44000015 	stw	r16,0(r8)
  1070c0:	8c400044 	addi	r17,r17,1
  1070c4:	d8c02015 	stw	r3,128(sp)
  1070c8:	dc401f15 	stw	r17,124(sp)
  1070cc:	008001c4 	movi	r2,7
  1070d0:	14400e16 	blt	r2,r17,10710c <___vfprintf_internal_r+0x168c>
  1070d4:	45800204 	addi	r22,r8,8
  1070d8:	003eca06 	br	106c04 <__alt_data_end+0xfffc6c04>
  1070dc:	010004b4 	movhi	r4,18
  1070e0:	210caa04 	addi	r4,r4,12968
  1070e4:	d9002c15 	stw	r4,176(sp)
  1070e8:	d8802c17 	ldw	r2,176(sp)
  1070ec:	1c07883a 	add	r3,r3,r16
  1070f0:	8c400044 	addi	r17,r17,1
  1070f4:	b0800015 	stw	r2,0(r22)
  1070f8:	b4000115 	stw	r16,4(r22)
  1070fc:	d8c02015 	stw	r3,128(sp)
  107100:	dc401f15 	stw	r17,124(sp)
  107104:	008001c4 	movi	r2,7
  107108:	147ebd0e 	bge	r2,r17,106c00 <__alt_data_end+0xfffc6c00>
  10710c:	d9002d17 	ldw	r4,180(sp)
  107110:	d9801e04 	addi	r6,sp,120
  107114:	b80b883a 	mov	r5,r23
  107118:	01120b80 	call	1120b8 <__sprint_r>
  10711c:	103b5c1e 	bne	r2,zero,105e90 <__alt_data_end+0xfffc5e90>
  107120:	d8c02017 	ldw	r3,128(sp)
  107124:	dc401f17 	ldw	r17,124(sp)
  107128:	dd800404 	addi	r22,sp,16
  10712c:	003eb506 	br	106c04 <__alt_data_end+0xfffc6c04>
  107130:	d9002d17 	ldw	r4,180(sp)
  107134:	d9801e04 	addi	r6,sp,120
  107138:	b80b883a 	mov	r5,r23
  10713c:	01120b80 	call	1120b8 <__sprint_r>
  107140:	103b531e 	bne	r2,zero,105e90 <__alt_data_end+0xfffc5e90>
  107144:	d8c02017 	ldw	r3,128(sp)
  107148:	dc401f17 	ldw	r17,124(sp)
  10714c:	da000404 	addi	r8,sp,16
  107150:	003e8d06 	br	106b88 <__alt_data_end+0xfffc6b88>
  107154:	d9002d17 	ldw	r4,180(sp)
  107158:	d9801e04 	addi	r6,sp,120
  10715c:	b80b883a 	mov	r5,r23
  107160:	01120b80 	call	1120b8 <__sprint_r>
  107164:	103b4a1e 	bne	r2,zero,105e90 <__alt_data_end+0xfffc5e90>
  107168:	d8c02017 	ldw	r3,128(sp)
  10716c:	dc401f17 	ldw	r17,124(sp)
  107170:	dd800404 	addi	r22,sp,16
  107174:	003e8f06 	br	106bb4 <__alt_data_end+0xfffc6bb4>
  107178:	0027883a 	mov	r19,zero
  10717c:	003f4a06 	br	106ea8 <__alt_data_end+0xfffc6ea8>
  107180:	d9002d17 	ldw	r4,180(sp)
  107184:	d9801e04 	addi	r6,sp,120
  107188:	b80b883a 	mov	r5,r23
  10718c:	01120b80 	call	1120b8 <__sprint_r>
  107190:	103b3f1e 	bne	r2,zero,105e90 <__alt_data_end+0xfffc5e90>
  107194:	d8c02017 	ldw	r3,128(sp)
  107198:	da000404 	addi	r8,sp,16
  10719c:	003c7b06 	br	10638c <__alt_data_end+0xfffc638c>
  1071a0:	d9402a17 	ldw	r5,168(sp)
  1071a4:	04e7c83a 	sub	r19,zero,r19
  1071a8:	07000b44 	movi	fp,45
  1071ac:	9804c03a 	cmpne	r2,r19,zero
  1071b0:	05adc83a 	sub	r22,zero,r22
  1071b4:	df002785 	stb	fp,158(sp)
  1071b8:	b0adc83a 	sub	r22,r22,r2
  1071bc:	28017b16 	blt	r5,zero,1077ac <___vfprintf_internal_r+0x1d2c>
  1071c0:	00bfdfc4 	movi	r2,-129
  1071c4:	90a4703a 	and	r18,r18,r2
  1071c8:	003b8906 	br	105ff0 <__alt_data_end+0xfffc5ff0>
  1071cc:	d9003617 	ldw	r4,216(sp)
  1071d0:	d9403817 	ldw	r5,224(sp)
  1071d4:	da003d15 	stw	r8,244(sp)
  1071d8:	010cfdc0 	call	10cfdc <__fpclassifyd>
  1071dc:	da003d17 	ldw	r8,244(sp)
  1071e0:	1000f026 	beq	r2,zero,1075a4 <___vfprintf_internal_r+0x1b24>
  1071e4:	d9002a17 	ldw	r4,168(sp)
  1071e8:	05bff7c4 	movi	r22,-33
  1071ec:	00bfffc4 	movi	r2,-1
  1071f0:	8dac703a 	and	r22,r17,r22
  1071f4:	20820026 	beq	r4,r2,1079f8 <___vfprintf_internal_r+0x1f78>
  1071f8:	008011c4 	movi	r2,71
  1071fc:	b081f726 	beq	r22,r2,1079dc <___vfprintf_internal_r+0x1f5c>
  107200:	d9003817 	ldw	r4,224(sp)
  107204:	90c04014 	ori	r3,r18,256
  107208:	d8c02c15 	stw	r3,176(sp)
  10720c:	20021516 	blt	r4,zero,107a64 <___vfprintf_internal_r+0x1fe4>
  107210:	dcc03817 	ldw	r19,224(sp)
  107214:	d8002905 	stb	zero,164(sp)
  107218:	00801984 	movi	r2,102
  10721c:	8881f926 	beq	r17,r2,107a04 <___vfprintf_internal_r+0x1f84>
  107220:	00801184 	movi	r2,70
  107224:	88821c26 	beq	r17,r2,107a98 <___vfprintf_internal_r+0x2018>
  107228:	00801144 	movi	r2,69
  10722c:	b081ef26 	beq	r22,r2,1079ec <___vfprintf_internal_r+0x1f6c>
  107230:	d8c02a17 	ldw	r3,168(sp)
  107234:	d8802104 	addi	r2,sp,132
  107238:	d8800315 	stw	r2,12(sp)
  10723c:	d9403617 	ldw	r5,216(sp)
  107240:	d8802504 	addi	r2,sp,148
  107244:	d9002d17 	ldw	r4,180(sp)
  107248:	d8800215 	stw	r2,8(sp)
  10724c:	d8802604 	addi	r2,sp,152
  107250:	d8c00015 	stw	r3,0(sp)
  107254:	d8800115 	stw	r2,4(sp)
  107258:	01c00084 	movi	r7,2
  10725c:	980d883a 	mov	r6,r19
  107260:	d8c03c15 	stw	r3,240(sp)
  107264:	da003d15 	stw	r8,244(sp)
  107268:	01082640 	call	108264 <_dtoa_r>
  10726c:	1021883a 	mov	r16,r2
  107270:	008019c4 	movi	r2,103
  107274:	d8c03c17 	ldw	r3,240(sp)
  107278:	da003d17 	ldw	r8,244(sp)
  10727c:	88817126 	beq	r17,r2,107844 <___vfprintf_internal_r+0x1dc4>
  107280:	008011c4 	movi	r2,71
  107284:	88829126 	beq	r17,r2,107ccc <___vfprintf_internal_r+0x224c>
  107288:	80f9883a 	add	fp,r16,r3
  10728c:	d9003617 	ldw	r4,216(sp)
  107290:	000d883a 	mov	r6,zero
  107294:	000f883a 	mov	r7,zero
  107298:	980b883a 	mov	r5,r19
  10729c:	da003d15 	stw	r8,244(sp)
  1072a0:	0116e9c0 	call	116e9c <__eqdf2>
  1072a4:	da003d17 	ldw	r8,244(sp)
  1072a8:	10018d26 	beq	r2,zero,1078e0 <___vfprintf_internal_r+0x1e60>
  1072ac:	d8802117 	ldw	r2,132(sp)
  1072b0:	1700062e 	bgeu	r2,fp,1072cc <___vfprintf_internal_r+0x184c>
  1072b4:	01000c04 	movi	r4,48
  1072b8:	10c00044 	addi	r3,r2,1
  1072bc:	d8c02115 	stw	r3,132(sp)
  1072c0:	11000005 	stb	r4,0(r2)
  1072c4:	d8802117 	ldw	r2,132(sp)
  1072c8:	173ffb36 	bltu	r2,fp,1072b8 <__alt_data_end+0xfffc72b8>
  1072cc:	1405c83a 	sub	r2,r2,r16
  1072d0:	d8803315 	stw	r2,204(sp)
  1072d4:	008011c4 	movi	r2,71
  1072d8:	b0817626 	beq	r22,r2,1078b4 <___vfprintf_internal_r+0x1e34>
  1072dc:	00801944 	movi	r2,101
  1072e0:	1442800e 	bge	r2,r17,107ce4 <___vfprintf_internal_r+0x2264>
  1072e4:	d8c02617 	ldw	r3,152(sp)
  1072e8:	00801984 	movi	r2,102
  1072ec:	d8c03215 	stw	r3,200(sp)
  1072f0:	8881fe26 	beq	r17,r2,107aec <___vfprintf_internal_r+0x206c>
  1072f4:	d8c03217 	ldw	r3,200(sp)
  1072f8:	d9003317 	ldw	r4,204(sp)
  1072fc:	1901dd16 	blt	r3,r4,107a74 <___vfprintf_internal_r+0x1ff4>
  107300:	9480004c 	andi	r18,r18,1
  107304:	90022b1e 	bne	r18,zero,107bb4 <___vfprintf_internal_r+0x2134>
  107308:	1805883a 	mov	r2,r3
  10730c:	18028316 	blt	r3,zero,107d1c <___vfprintf_internal_r+0x229c>
  107310:	d8c03217 	ldw	r3,200(sp)
  107314:	044019c4 	movi	r17,103
  107318:	d8c02b15 	stw	r3,172(sp)
  10731c:	df002907 	ldb	fp,164(sp)
  107320:	e001531e 	bne	fp,zero,107870 <___vfprintf_internal_r+0x1df0>
  107324:	df002783 	ldbu	fp,158(sp)
  107328:	d8802915 	stw	r2,164(sp)
  10732c:	dc802c17 	ldw	r18,176(sp)
  107330:	d8002a15 	stw	zero,168(sp)
  107334:	003baf06 	br	1061f4 <__alt_data_end+0xfffc61f4>
  107338:	d8c02e17 	ldw	r3,184(sp)
  10733c:	d9002e17 	ldw	r4,184(sp)
  107340:	d9402e17 	ldw	r5,184(sp)
  107344:	18c00017 	ldw	r3,0(r3)
  107348:	21000117 	ldw	r4,4(r4)
  10734c:	29400204 	addi	r5,r5,8
  107350:	d8c03615 	stw	r3,216(sp)
  107354:	d9003815 	stw	r4,224(sp)
  107358:	d9402e15 	stw	r5,184(sp)
  10735c:	003b5006 	br	1060a0 <__alt_data_end+0xfffc60a0>
  107360:	ac400007 	ldb	r17,0(r21)
  107364:	003a2806 	br	105c08 <__alt_data_end+0xfffc5c08>
  107368:	9080100c 	andi	r2,r18,64
  10736c:	1000a826 	beq	r2,zero,107610 <___vfprintf_internal_r+0x1b90>
  107370:	d8c02e17 	ldw	r3,184(sp)
  107374:	002d883a 	mov	r22,zero
  107378:	1cc0000b 	ldhu	r19,0(r3)
  10737c:	18c00104 	addi	r3,r3,4
  107380:	d8c02e15 	stw	r3,184(sp)
  107384:	003caf06 	br	106644 <__alt_data_end+0xfffc6644>
  107388:	d9002e17 	ldw	r4,184(sp)
  10738c:	d9402a17 	ldw	r5,168(sp)
  107390:	002d883a 	mov	r22,zero
  107394:	20800104 	addi	r2,r4,4
  107398:	24c00017 	ldw	r19,0(r4)
  10739c:	283ebb0e 	bge	r5,zero,106e8c <__alt_data_end+0xfffc6e8c>
  1073a0:	003ef106 	br	106f68 <__alt_data_end+0xfffc6f68>
  1073a4:	9080040c 	andi	r2,r18,16
  1073a8:	1000921e 	bne	r2,zero,1075f4 <___vfprintf_internal_r+0x1b74>
  1073ac:	9480100c 	andi	r18,r18,64
  1073b0:	90013926 	beq	r18,zero,107898 <___vfprintf_internal_r+0x1e18>
  1073b4:	d9402e17 	ldw	r5,184(sp)
  1073b8:	d8c02f17 	ldw	r3,188(sp)
  1073bc:	28800017 	ldw	r2,0(r5)
  1073c0:	29400104 	addi	r5,r5,4
  1073c4:	d9402e15 	stw	r5,184(sp)
  1073c8:	10c0000d 	sth	r3,0(r2)
  1073cc:	0039e406 	br	105b60 <__alt_data_end+0xfffc5b60>
  1073d0:	9080100c 	andi	r2,r18,64
  1073d4:	10008026 	beq	r2,zero,1075d8 <___vfprintf_internal_r+0x1b58>
  1073d8:	d8802e17 	ldw	r2,184(sp)
  1073dc:	14c0000f 	ldh	r19,0(r2)
  1073e0:	10800104 	addi	r2,r2,4
  1073e4:	d8802e15 	stw	r2,184(sp)
  1073e8:	982dd7fa 	srai	r22,r19,31
  1073ec:	b005883a 	mov	r2,r22
  1073f0:	003af706 	br	105fd0 <__alt_data_end+0xfffc5fd0>
  1073f4:	9080100c 	andi	r2,r18,64
  1073f8:	d8002785 	stb	zero,158(sp)
  1073fc:	10008a1e 	bne	r2,zero,107628 <___vfprintf_internal_r+0x1ba8>
  107400:	d9002e17 	ldw	r4,184(sp)
  107404:	d9402a17 	ldw	r5,168(sp)
  107408:	002d883a 	mov	r22,zero
  10740c:	20800104 	addi	r2,r4,4
  107410:	24c00017 	ldw	r19,0(r4)
  107414:	283e4b0e 	bge	r5,zero,106d44 <__alt_data_end+0xfffc6d44>
  107418:	9d86b03a 	or	r3,r19,r22
  10741c:	d8802e15 	stw	r2,184(sp)
  107420:	183e4c1e 	bne	r3,zero,106d54 <__alt_data_end+0xfffc6d54>
  107424:	0039883a 	mov	fp,zero
  107428:	0005883a 	mov	r2,zero
  10742c:	003d4006 	br	106930 <__alt_data_end+0xfffc6930>
  107430:	014004b4 	movhi	r5,18
  107434:	294caa04 	addi	r5,r5,12968
  107438:	d9402c15 	stw	r5,176(sp)
  10743c:	d9402c17 	ldw	r5,176(sp)
  107440:	1c47883a 	add	r3,r3,r17
  107444:	10800044 	addi	r2,r2,1
  107448:	41400015 	stw	r5,0(r8)
  10744c:	44400115 	stw	r17,4(r8)
  107450:	d8c02015 	stw	r3,128(sp)
  107454:	d8801f15 	stw	r2,124(sp)
  107458:	010001c4 	movi	r4,7
  10745c:	20bec816 	blt	r4,r2,106f80 <__alt_data_end+0xfffc6f80>
  107460:	42000204 	addi	r8,r8,8
  107464:	003ecd06 	br	106f9c <__alt_data_end+0xfffc6f9c>
  107468:	d9002a17 	ldw	r4,168(sp)
  10746c:	d8002785 	stb	zero,158(sp)
  107470:	203d2d16 	blt	r4,zero,106928 <__alt_data_end+0xfffc6928>
  107474:	00bfdfc4 	movi	r2,-129
  107478:	90a4703a 	and	r18,r18,r2
  10747c:	003a6106 	br	105e04 <__alt_data_end+0xfffc5e04>
  107480:	010004b4 	movhi	r4,18
  107484:	210caa04 	addi	r4,r4,12968
  107488:	d9002c15 	stw	r4,176(sp)
  10748c:	003bea06 	br	106438 <__alt_data_end+0xfffc6438>
  107490:	d9002d17 	ldw	r4,180(sp)
  107494:	d9801e04 	addi	r6,sp,120
  107498:	b80b883a 	mov	r5,r23
  10749c:	01120b80 	call	1120b8 <__sprint_r>
  1074a0:	103a7b1e 	bne	r2,zero,105e90 <__alt_data_end+0xfffc5e90>
  1074a4:	d8c02017 	ldw	r3,128(sp)
  1074a8:	da000404 	addi	r8,sp,16
  1074ac:	003d4106 	br	1069b4 <__alt_data_end+0xfffc69b4>
  1074b0:	d8801f17 	ldw	r2,124(sp)
  1074b4:	014004b4 	movhi	r5,18
  1074b8:	01000044 	movi	r4,1
  1074bc:	18c00044 	addi	r3,r3,1
  1074c0:	10800044 	addi	r2,r2,1
  1074c4:	294c9704 	addi	r5,r5,12892
  1074c8:	41000115 	stw	r4,4(r8)
  1074cc:	41400015 	stw	r5,0(r8)
  1074d0:	d8c02015 	stw	r3,128(sp)
  1074d4:	d8801f15 	stw	r2,124(sp)
  1074d8:	010001c4 	movi	r4,7
  1074dc:	20805c16 	blt	r4,r2,107650 <___vfprintf_internal_r+0x1bd0>
  1074e0:	42000204 	addi	r8,r8,8
  1074e4:	8800041e 	bne	r17,zero,1074f8 <___vfprintf_internal_r+0x1a78>
  1074e8:	d8803317 	ldw	r2,204(sp)
  1074ec:	1000021e 	bne	r2,zero,1074f8 <___vfprintf_internal_r+0x1a78>
  1074f0:	9080004c 	andi	r2,r18,1
  1074f4:	103be726 	beq	r2,zero,106494 <__alt_data_end+0xfffc6494>
  1074f8:	d9003717 	ldw	r4,220(sp)
  1074fc:	d8801f17 	ldw	r2,124(sp)
  107500:	d9403417 	ldw	r5,208(sp)
  107504:	20c7883a 	add	r3,r4,r3
  107508:	10800044 	addi	r2,r2,1
  10750c:	41000115 	stw	r4,4(r8)
  107510:	41400015 	stw	r5,0(r8)
  107514:	d8c02015 	stw	r3,128(sp)
  107518:	d8801f15 	stw	r2,124(sp)
  10751c:	010001c4 	movi	r4,7
  107520:	20812116 	blt	r4,r2,1079a8 <___vfprintf_internal_r+0x1f28>
  107524:	42000204 	addi	r8,r8,8
  107528:	0463c83a 	sub	r17,zero,r17
  10752c:	0440730e 	bge	zero,r17,1076fc <___vfprintf_internal_r+0x1c7c>
  107530:	05800404 	movi	r22,16
  107534:	b440860e 	bge	r22,r17,107750 <___vfprintf_internal_r+0x1cd0>
  107538:	014004b4 	movhi	r5,18
  10753c:	294caa04 	addi	r5,r5,12968
  107540:	d9402c15 	stw	r5,176(sp)
  107544:	070001c4 	movi	fp,7
  107548:	dcc02d17 	ldw	r19,180(sp)
  10754c:	00000306 	br	10755c <___vfprintf_internal_r+0x1adc>
  107550:	42000204 	addi	r8,r8,8
  107554:	8c7ffc04 	addi	r17,r17,-16
  107558:	b440800e 	bge	r22,r17,10775c <___vfprintf_internal_r+0x1cdc>
  10755c:	18c00404 	addi	r3,r3,16
  107560:	10800044 	addi	r2,r2,1
  107564:	45000015 	stw	r20,0(r8)
  107568:	45800115 	stw	r22,4(r8)
  10756c:	d8c02015 	stw	r3,128(sp)
  107570:	d8801f15 	stw	r2,124(sp)
  107574:	e0bff60e 	bge	fp,r2,107550 <__alt_data_end+0xfffc7550>
  107578:	d9801e04 	addi	r6,sp,120
  10757c:	b80b883a 	mov	r5,r23
  107580:	9809883a 	mov	r4,r19
  107584:	01120b80 	call	1120b8 <__sprint_r>
  107588:	103a411e 	bne	r2,zero,105e90 <__alt_data_end+0xfffc5e90>
  10758c:	d8c02017 	ldw	r3,128(sp)
  107590:	d8801f17 	ldw	r2,124(sp)
  107594:	da000404 	addi	r8,sp,16
  107598:	003fee06 	br	107554 <__alt_data_end+0xfffc7554>
  10759c:	00bfffc4 	movi	r2,-1
  1075a0:	003a3f06 	br	105ea0 <__alt_data_end+0xfffc5ea0>
  1075a4:	008011c4 	movi	r2,71
  1075a8:	1440b816 	blt	r2,r17,10788c <___vfprintf_internal_r+0x1e0c>
  1075ac:	040004b4 	movhi	r16,18
  1075b0:	840c8904 	addi	r16,r16,12836
  1075b4:	00c000c4 	movi	r3,3
  1075b8:	00bfdfc4 	movi	r2,-129
  1075bc:	d8c02915 	stw	r3,164(sp)
  1075c0:	90a4703a 	and	r18,r18,r2
  1075c4:	df002783 	ldbu	fp,158(sp)
  1075c8:	d8c02b15 	stw	r3,172(sp)
  1075cc:	d8002a15 	stw	zero,168(sp)
  1075d0:	d8003215 	stw	zero,200(sp)
  1075d4:	003b0706 	br	1061f4 <__alt_data_end+0xfffc61f4>
  1075d8:	d8c02e17 	ldw	r3,184(sp)
  1075dc:	1cc00017 	ldw	r19,0(r3)
  1075e0:	18c00104 	addi	r3,r3,4
  1075e4:	d8c02e15 	stw	r3,184(sp)
  1075e8:	982dd7fa 	srai	r22,r19,31
  1075ec:	b005883a 	mov	r2,r22
  1075f0:	003a7706 	br	105fd0 <__alt_data_end+0xfffc5fd0>
  1075f4:	d8c02e17 	ldw	r3,184(sp)
  1075f8:	d9002f17 	ldw	r4,188(sp)
  1075fc:	18800017 	ldw	r2,0(r3)
  107600:	18c00104 	addi	r3,r3,4
  107604:	d8c02e15 	stw	r3,184(sp)
  107608:	11000015 	stw	r4,0(r2)
  10760c:	00395406 	br	105b60 <__alt_data_end+0xfffc5b60>
  107610:	d9002e17 	ldw	r4,184(sp)
  107614:	002d883a 	mov	r22,zero
  107618:	24c00017 	ldw	r19,0(r4)
  10761c:	21000104 	addi	r4,r4,4
  107620:	d9002e15 	stw	r4,184(sp)
  107624:	003c0706 	br	106644 <__alt_data_end+0xfffc6644>
  107628:	d9402e17 	ldw	r5,184(sp)
  10762c:	d8c02a17 	ldw	r3,168(sp)
  107630:	002d883a 	mov	r22,zero
  107634:	28800104 	addi	r2,r5,4
  107638:	2cc0000b 	ldhu	r19,0(r5)
  10763c:	183dc10e 	bge	r3,zero,106d44 <__alt_data_end+0xfffc6d44>
  107640:	003f7506 	br	107418 <__alt_data_end+0xfffc7418>
  107644:	040004b4 	movhi	r16,18
  107648:	840c8704 	addi	r16,r16,12828
  10764c:	003aa706 	br	1060ec <__alt_data_end+0xfffc60ec>
  107650:	d9002d17 	ldw	r4,180(sp)
  107654:	d9801e04 	addi	r6,sp,120
  107658:	b80b883a 	mov	r5,r23
  10765c:	01120b80 	call	1120b8 <__sprint_r>
  107660:	103a0b1e 	bne	r2,zero,105e90 <__alt_data_end+0xfffc5e90>
  107664:	dc402617 	ldw	r17,152(sp)
  107668:	d8c02017 	ldw	r3,128(sp)
  10766c:	da000404 	addi	r8,sp,16
  107670:	003f9c06 	br	1074e4 <__alt_data_end+0xfffc74e4>
  107674:	ac400043 	ldbu	r17,1(r21)
  107678:	84000814 	ori	r16,r16,32
  10767c:	ad400044 	addi	r21,r21,1
  107680:	8c403fcc 	andi	r17,r17,255
  107684:	8c40201c 	xori	r17,r17,128
  107688:	8c7fe004 	addi	r17,r17,-128
  10768c:	00395e06 	br	105c08 <__alt_data_end+0xfffc5c08>
  107690:	d8c02e15 	stw	r3,184(sp)
  107694:	0039883a 	mov	fp,zero
  107698:	003e3506 	br	106f70 <__alt_data_end+0xfffc6f70>
  10769c:	d9002d17 	ldw	r4,180(sp)
  1076a0:	d9801e04 	addi	r6,sp,120
  1076a4:	b80b883a 	mov	r5,r23
  1076a8:	01120b80 	call	1120b8 <__sprint_r>
  1076ac:	1039f81e 	bne	r2,zero,105e90 <__alt_data_end+0xfffc5e90>
  1076b0:	d8c02017 	ldw	r3,128(sp)
  1076b4:	da000404 	addi	r8,sp,16
  1076b8:	003cd006 	br	1069fc <__alt_data_end+0xfffc69fc>
  1076bc:	8009883a 	mov	r4,r16
  1076c0:	df003d15 	stw	fp,244(sp)
  1076c4:	0101cfc0 	call	101cfc <strlen>
  1076c8:	d8802b15 	stw	r2,172(sp)
  1076cc:	da003d17 	ldw	r8,244(sp)
  1076d0:	103c200e 	bge	r2,zero,106754 <__alt_data_end+0xfffc6754>
  1076d4:	0005883a 	mov	r2,zero
  1076d8:	003c1e06 	br	106754 <__alt_data_end+0xfffc6754>
  1076dc:	d9002d17 	ldw	r4,180(sp)
  1076e0:	d9801e04 	addi	r6,sp,120
  1076e4:	b80b883a 	mov	r5,r23
  1076e8:	01120b80 	call	1120b8 <__sprint_r>
  1076ec:	1039e81e 	bne	r2,zero,105e90 <__alt_data_end+0xfffc5e90>
  1076f0:	d8c02017 	ldw	r3,128(sp)
  1076f4:	d8801f17 	ldw	r2,124(sp)
  1076f8:	da000404 	addi	r8,sp,16
  1076fc:	d9403317 	ldw	r5,204(sp)
  107700:	10800044 	addi	r2,r2,1
  107704:	44000015 	stw	r16,0(r8)
  107708:	28c7883a 	add	r3,r5,r3
  10770c:	003b5b06 	br	10647c <__alt_data_end+0xfffc647c>
  107710:	010004b4 	movhi	r4,18
  107714:	210cae04 	addi	r4,r4,12984
  107718:	d9003515 	stw	r4,212(sp)
  10771c:	003af206 	br	1062e8 <__alt_data_end+0xfffc62e8>
  107720:	013fffc4 	movi	r4,-1
  107724:	003a0806 	br	105f48 <__alt_data_end+0xfffc5f48>
  107728:	0023883a 	mov	r17,zero
  10772c:	003d9d06 	br	106da4 <__alt_data_end+0xfffc6da4>
  107730:	d9002d17 	ldw	r4,180(sp)
  107734:	d9801e04 	addi	r6,sp,120
  107738:	b80b883a 	mov	r5,r23
  10773c:	01120b80 	call	1120b8 <__sprint_r>
  107740:	1039d31e 	bne	r2,zero,105e90 <__alt_data_end+0xfffc5e90>
  107744:	d8c02017 	ldw	r3,128(sp)
  107748:	da000404 	addi	r8,sp,16
  10774c:	003d9406 	br	106da0 <__alt_data_end+0xfffc6da0>
  107750:	010004b4 	movhi	r4,18
  107754:	210caa04 	addi	r4,r4,12968
  107758:	d9002c15 	stw	r4,176(sp)
  10775c:	d9002c17 	ldw	r4,176(sp)
  107760:	1c47883a 	add	r3,r3,r17
  107764:	10800044 	addi	r2,r2,1
  107768:	41000015 	stw	r4,0(r8)
  10776c:	44400115 	stw	r17,4(r8)
  107770:	d8c02015 	stw	r3,128(sp)
  107774:	d8801f15 	stw	r2,124(sp)
  107778:	010001c4 	movi	r4,7
  10777c:	20bfd716 	blt	r4,r2,1076dc <__alt_data_end+0xfffc76dc>
  107780:	42000204 	addi	r8,r8,8
  107784:	003fdd06 	br	1076fc <__alt_data_end+0xfffc76fc>
  107788:	d9002d17 	ldw	r4,180(sp)
  10778c:	d9801e04 	addi	r6,sp,120
  107790:	b80b883a 	mov	r5,r23
  107794:	01120b80 	call	1120b8 <__sprint_r>
  107798:	1039bd1e 	bne	r2,zero,105e90 <__alt_data_end+0xfffc5e90>
  10779c:	d8802617 	ldw	r2,152(sp)
  1077a0:	d8c02017 	ldw	r3,128(sp)
  1077a4:	da000404 	addi	r8,sp,16
  1077a8:	003e1006 	br	106fec <__alt_data_end+0xfffc6fec>
  1077ac:	00800044 	movi	r2,1
  1077b0:	10803fcc 	andi	r2,r2,255
  1077b4:	00c00044 	movi	r3,1
  1077b8:	10fa0d26 	beq	r2,r3,105ff0 <__alt_data_end+0xfffc5ff0>
  1077bc:	00c00084 	movi	r3,2
  1077c0:	10fbaf26 	beq	r2,r3,106680 <__alt_data_end+0xfffc6680>
  1077c4:	003a6d06 	br	10617c <__alt_data_end+0xfffc617c>
  1077c8:	010004b4 	movhi	r4,18
  1077cc:	210cae04 	addi	r4,r4,12984
  1077d0:	d9003515 	stw	r4,212(sp)
  1077d4:	003b5406 	br	106528 <__alt_data_end+0xfffc6528>
  1077d8:	d8802a17 	ldw	r2,168(sp)
  1077dc:	00c00184 	movi	r3,6
  1077e0:	1880012e 	bgeu	r3,r2,1077e8 <___vfprintf_internal_r+0x1d68>
  1077e4:	1805883a 	mov	r2,r3
  1077e8:	d8802b15 	stw	r2,172(sp)
  1077ec:	1000ef16 	blt	r2,zero,107bac <___vfprintf_internal_r+0x212c>
  1077f0:	040004b4 	movhi	r16,18
  1077f4:	d8802915 	stw	r2,164(sp)
  1077f8:	dcc02e15 	stw	r19,184(sp)
  1077fc:	d8002a15 	stw	zero,168(sp)
  107800:	d8003215 	stw	zero,200(sp)
  107804:	840c9504 	addi	r16,r16,12884
  107808:	0039883a 	mov	fp,zero
  10780c:	003a8006 	br	106210 <__alt_data_end+0xfffc6210>
  107810:	0021883a 	mov	r16,zero
  107814:	003e0706 	br	107034 <__alt_data_end+0xfffc7034>
  107818:	d9002d17 	ldw	r4,180(sp)
  10781c:	d9801e04 	addi	r6,sp,120
  107820:	b80b883a 	mov	r5,r23
  107824:	01120b80 	call	1120b8 <__sprint_r>
  107828:	1039991e 	bne	r2,zero,105e90 <__alt_data_end+0xfffc5e90>
  10782c:	d8802617 	ldw	r2,152(sp)
  107830:	d9403317 	ldw	r5,204(sp)
  107834:	d8c02017 	ldw	r3,128(sp)
  107838:	da000404 	addi	r8,sp,16
  10783c:	2885c83a 	sub	r2,r5,r2
  107840:	003dfb06 	br	107030 <__alt_data_end+0xfffc7030>
  107844:	9080004c 	andi	r2,r18,1
  107848:	103e8f1e 	bne	r2,zero,107288 <__alt_data_end+0xfffc7288>
  10784c:	d8802117 	ldw	r2,132(sp)
  107850:	003e9e06 	br	1072cc <__alt_data_end+0xfffc72cc>
  107854:	1025883a 	mov	r18,r2
  107858:	0039883a 	mov	fp,zero
  10785c:	00800084 	movi	r2,2
  107860:	003fd306 	br	1077b0 <__alt_data_end+0xfffc77b0>
  107864:	07000b44 	movi	fp,45
  107868:	df002785 	stb	fp,158(sp)
  10786c:	003a1b06 	br	1060dc <__alt_data_end+0xfffc60dc>
  107870:	00c00b44 	movi	r3,45
  107874:	d8c02785 	stb	r3,158(sp)
  107878:	d8802915 	stw	r2,164(sp)
  10787c:	dc802c17 	ldw	r18,176(sp)
  107880:	d8002a15 	stw	zero,168(sp)
  107884:	07000b44 	movi	fp,45
  107888:	003a5e06 	br	106204 <__alt_data_end+0xfffc6204>
  10788c:	040004b4 	movhi	r16,18
  107890:	840c8a04 	addi	r16,r16,12840
  107894:	003f4706 	br	1075b4 <__alt_data_end+0xfffc75b4>
  107898:	d9002e17 	ldw	r4,184(sp)
  10789c:	d9402f17 	ldw	r5,188(sp)
  1078a0:	20800017 	ldw	r2,0(r4)
  1078a4:	21000104 	addi	r4,r4,4
  1078a8:	d9002e15 	stw	r4,184(sp)
  1078ac:	11400015 	stw	r5,0(r2)
  1078b0:	0038ab06 	br	105b60 <__alt_data_end+0xfffc5b60>
  1078b4:	dd802617 	ldw	r22,152(sp)
  1078b8:	00bfff44 	movi	r2,-3
  1078bc:	b0801c16 	blt	r22,r2,107930 <___vfprintf_internal_r+0x1eb0>
  1078c0:	d9402a17 	ldw	r5,168(sp)
  1078c4:	2d801a16 	blt	r5,r22,107930 <___vfprintf_internal_r+0x1eb0>
  1078c8:	dd803215 	stw	r22,200(sp)
  1078cc:	003e8906 	br	1072f4 <__alt_data_end+0xfffc72f4>
  1078d0:	010004b4 	movhi	r4,18
  1078d4:	210caa04 	addi	r4,r4,12968
  1078d8:	d9002c15 	stw	r4,176(sp)
  1078dc:	003c9106 	br	106b24 <__alt_data_end+0xfffc6b24>
  1078e0:	e005883a 	mov	r2,fp
  1078e4:	003e7906 	br	1072cc <__alt_data_end+0xfffc72cc>
  1078e8:	d9002a17 	ldw	r4,168(sp)
  1078ec:	df002783 	ldbu	fp,158(sp)
  1078f0:	dcc02e15 	stw	r19,184(sp)
  1078f4:	d9002915 	stw	r4,164(sp)
  1078f8:	d9002b15 	stw	r4,172(sp)
  1078fc:	d8002a15 	stw	zero,168(sp)
  107900:	d8003215 	stw	zero,200(sp)
  107904:	003a3b06 	br	1061f4 <__alt_data_end+0xfffc61f4>
  107908:	9080004c 	andi	r2,r18,1
  10790c:	0039883a 	mov	fp,zero
  107910:	10000426 	beq	r2,zero,107924 <___vfprintf_internal_r+0x1ea4>
  107914:	00800c04 	movi	r2,48
  107918:	dc001dc4 	addi	r16,sp,119
  10791c:	d8801dc5 	stb	r2,119(sp)
  107920:	003b6406 	br	1066b4 <__alt_data_end+0xfffc66b4>
  107924:	d8002b15 	stw	zero,172(sp)
  107928:	dc001e04 	addi	r16,sp,120
  10792c:	003a2b06 	br	1061dc <__alt_data_end+0xfffc61dc>
  107930:	8c7fff84 	addi	r17,r17,-2
  107934:	b5bfffc4 	addi	r22,r22,-1
  107938:	dd802615 	stw	r22,152(sp)
  10793c:	dc4022c5 	stb	r17,139(sp)
  107940:	b000bf16 	blt	r22,zero,107c40 <___vfprintf_internal_r+0x21c0>
  107944:	00800ac4 	movi	r2,43
  107948:	d8802305 	stb	r2,140(sp)
  10794c:	00800244 	movi	r2,9
  107950:	15807016 	blt	r2,r22,107b14 <___vfprintf_internal_r+0x2094>
  107954:	00800c04 	movi	r2,48
  107958:	b5800c04 	addi	r22,r22,48
  10795c:	d8802345 	stb	r2,141(sp)
  107960:	dd802385 	stb	r22,142(sp)
  107964:	d88023c4 	addi	r2,sp,143
  107968:	df0022c4 	addi	fp,sp,139
  10796c:	d8c03317 	ldw	r3,204(sp)
  107970:	1739c83a 	sub	fp,r2,fp
  107974:	d9003317 	ldw	r4,204(sp)
  107978:	e0c7883a 	add	r3,fp,r3
  10797c:	df003a15 	stw	fp,232(sp)
  107980:	d8c02b15 	stw	r3,172(sp)
  107984:	00800044 	movi	r2,1
  107988:	1100b30e 	bge	r2,r4,107c58 <___vfprintf_internal_r+0x21d8>
  10798c:	d8c02b17 	ldw	r3,172(sp)
  107990:	18c00044 	addi	r3,r3,1
  107994:	d8c02b15 	stw	r3,172(sp)
  107998:	1805883a 	mov	r2,r3
  10799c:	1800ac16 	blt	r3,zero,107c50 <___vfprintf_internal_r+0x21d0>
  1079a0:	d8003215 	stw	zero,200(sp)
  1079a4:	003e5d06 	br	10731c <__alt_data_end+0xfffc731c>
  1079a8:	d9002d17 	ldw	r4,180(sp)
  1079ac:	d9801e04 	addi	r6,sp,120
  1079b0:	b80b883a 	mov	r5,r23
  1079b4:	01120b80 	call	1120b8 <__sprint_r>
  1079b8:	1039351e 	bne	r2,zero,105e90 <__alt_data_end+0xfffc5e90>
  1079bc:	dc402617 	ldw	r17,152(sp)
  1079c0:	d8c02017 	ldw	r3,128(sp)
  1079c4:	d8801f17 	ldw	r2,124(sp)
  1079c8:	da000404 	addi	r8,sp,16
  1079cc:	003ed606 	br	107528 <__alt_data_end+0xfffc7528>
  1079d0:	182b883a 	mov	r21,r3
  1079d4:	d8002a15 	stw	zero,168(sp)
  1079d8:	00388c06 	br	105c0c <__alt_data_end+0xfffc5c0c>
  1079dc:	d8802a17 	ldw	r2,168(sp)
  1079e0:	103e071e 	bne	r2,zero,107200 <__alt_data_end+0xfffc7200>
  1079e4:	dc002a15 	stw	r16,168(sp)
  1079e8:	003e0506 	br	107200 <__alt_data_end+0xfffc7200>
  1079ec:	d9002a17 	ldw	r4,168(sp)
  1079f0:	20c00044 	addi	r3,r4,1
  1079f4:	003e0f06 	br	107234 <__alt_data_end+0xfffc7234>
  1079f8:	01400184 	movi	r5,6
  1079fc:	d9402a15 	stw	r5,168(sp)
  107a00:	003dff06 	br	107200 <__alt_data_end+0xfffc7200>
  107a04:	d8802104 	addi	r2,sp,132
  107a08:	d8800315 	stw	r2,12(sp)
  107a0c:	d8802504 	addi	r2,sp,148
  107a10:	d8800215 	stw	r2,8(sp)
  107a14:	d8802604 	addi	r2,sp,152
  107a18:	d8800115 	stw	r2,4(sp)
  107a1c:	d8802a17 	ldw	r2,168(sp)
  107a20:	d9403617 	ldw	r5,216(sp)
  107a24:	d9002d17 	ldw	r4,180(sp)
  107a28:	d8800015 	stw	r2,0(sp)
  107a2c:	01c000c4 	movi	r7,3
  107a30:	980d883a 	mov	r6,r19
  107a34:	da003d15 	stw	r8,244(sp)
  107a38:	01082640 	call	108264 <_dtoa_r>
  107a3c:	d8c02a17 	ldw	r3,168(sp)
  107a40:	da003d17 	ldw	r8,244(sp)
  107a44:	1021883a 	mov	r16,r2
  107a48:	10f9883a 	add	fp,r2,r3
  107a4c:	81000007 	ldb	r4,0(r16)
  107a50:	00800c04 	movi	r2,48
  107a54:	20805e26 	beq	r4,r2,107bd0 <___vfprintf_internal_r+0x2150>
  107a58:	d8c02617 	ldw	r3,152(sp)
  107a5c:	e0f9883a 	add	fp,fp,r3
  107a60:	003e0a06 	br	10728c <__alt_data_end+0xfffc728c>
  107a64:	00c00b44 	movi	r3,45
  107a68:	24e0003c 	xorhi	r19,r4,32768
  107a6c:	d8c02905 	stb	r3,164(sp)
  107a70:	003de906 	br	107218 <__alt_data_end+0xfffc7218>
  107a74:	d8c03217 	ldw	r3,200(sp)
  107a78:	00c07a0e 	bge	zero,r3,107c64 <___vfprintf_internal_r+0x21e4>
  107a7c:	00800044 	movi	r2,1
  107a80:	d9003317 	ldw	r4,204(sp)
  107a84:	1105883a 	add	r2,r2,r4
  107a88:	d8802b15 	stw	r2,172(sp)
  107a8c:	10004e16 	blt	r2,zero,107bc8 <___vfprintf_internal_r+0x2148>
  107a90:	044019c4 	movi	r17,103
  107a94:	003e2106 	br	10731c <__alt_data_end+0xfffc731c>
  107a98:	d9002a17 	ldw	r4,168(sp)
  107a9c:	d8802104 	addi	r2,sp,132
  107aa0:	d8800315 	stw	r2,12(sp)
  107aa4:	d9000015 	stw	r4,0(sp)
  107aa8:	d8802504 	addi	r2,sp,148
  107aac:	d9403617 	ldw	r5,216(sp)
  107ab0:	d9002d17 	ldw	r4,180(sp)
  107ab4:	d8800215 	stw	r2,8(sp)
  107ab8:	d8802604 	addi	r2,sp,152
  107abc:	d8800115 	stw	r2,4(sp)
  107ac0:	01c000c4 	movi	r7,3
  107ac4:	980d883a 	mov	r6,r19
  107ac8:	da003d15 	stw	r8,244(sp)
  107acc:	01082640 	call	108264 <_dtoa_r>
  107ad0:	d8c02a17 	ldw	r3,168(sp)
  107ad4:	da003d17 	ldw	r8,244(sp)
  107ad8:	1021883a 	mov	r16,r2
  107adc:	00801184 	movi	r2,70
  107ae0:	80f9883a 	add	fp,r16,r3
  107ae4:	88bfd926 	beq	r17,r2,107a4c <__alt_data_end+0xfffc7a4c>
  107ae8:	003de806 	br	10728c <__alt_data_end+0xfffc728c>
  107aec:	d9002a17 	ldw	r4,168(sp)
  107af0:	00c04d0e 	bge	zero,r3,107c28 <___vfprintf_internal_r+0x21a8>
  107af4:	2000441e 	bne	r4,zero,107c08 <___vfprintf_internal_r+0x2188>
  107af8:	9480004c 	andi	r18,r18,1
  107afc:	9000421e 	bne	r18,zero,107c08 <___vfprintf_internal_r+0x2188>
  107b00:	1805883a 	mov	r2,r3
  107b04:	18006f16 	blt	r3,zero,107cc4 <___vfprintf_internal_r+0x2244>
  107b08:	d8c03217 	ldw	r3,200(sp)
  107b0c:	d8c02b15 	stw	r3,172(sp)
  107b10:	003e0206 	br	10731c <__alt_data_end+0xfffc731c>
  107b14:	df0022c4 	addi	fp,sp,139
  107b18:	dc002a15 	stw	r16,168(sp)
  107b1c:	4027883a 	mov	r19,r8
  107b20:	e021883a 	mov	r16,fp
  107b24:	b009883a 	mov	r4,r22
  107b28:	01400284 	movi	r5,10
  107b2c:	01158cc0 	call	1158cc <__modsi3>
  107b30:	10800c04 	addi	r2,r2,48
  107b34:	843fffc4 	addi	r16,r16,-1
  107b38:	b009883a 	mov	r4,r22
  107b3c:	01400284 	movi	r5,10
  107b40:	80800005 	stb	r2,0(r16)
  107b44:	01158480 	call	115848 <__divsi3>
  107b48:	102d883a 	mov	r22,r2
  107b4c:	00800244 	movi	r2,9
  107b50:	15bff416 	blt	r2,r22,107b24 <__alt_data_end+0xfffc7b24>
  107b54:	9811883a 	mov	r8,r19
  107b58:	b0800c04 	addi	r2,r22,48
  107b5c:	8027883a 	mov	r19,r16
  107b60:	997fffc4 	addi	r5,r19,-1
  107b64:	98bfffc5 	stb	r2,-1(r19)
  107b68:	dc002a17 	ldw	r16,168(sp)
  107b6c:	2f006d2e 	bgeu	r5,fp,107d24 <___vfprintf_internal_r+0x22a4>
  107b70:	d9c02384 	addi	r7,sp,142
  107b74:	3ccfc83a 	sub	r7,r7,r19
  107b78:	d9002344 	addi	r4,sp,141
  107b7c:	e1cf883a 	add	r7,fp,r7
  107b80:	00000106 	br	107b88 <___vfprintf_internal_r+0x2108>
  107b84:	28800003 	ldbu	r2,0(r5)
  107b88:	20800005 	stb	r2,0(r4)
  107b8c:	21000044 	addi	r4,r4,1
  107b90:	29400044 	addi	r5,r5,1
  107b94:	393ffb1e 	bne	r7,r4,107b84 <__alt_data_end+0xfffc7b84>
  107b98:	d8802304 	addi	r2,sp,140
  107b9c:	14c5c83a 	sub	r2,r2,r19
  107ba0:	d8c02344 	addi	r3,sp,141
  107ba4:	1885883a 	add	r2,r3,r2
  107ba8:	003f7006 	br	10796c <__alt_data_end+0xfffc796c>
  107bac:	0005883a 	mov	r2,zero
  107bb0:	003f0f06 	br	1077f0 <__alt_data_end+0xfffc77f0>
  107bb4:	d8c03217 	ldw	r3,200(sp)
  107bb8:	18c00044 	addi	r3,r3,1
  107bbc:	d8c02b15 	stw	r3,172(sp)
  107bc0:	1805883a 	mov	r2,r3
  107bc4:	183fb20e 	bge	r3,zero,107a90 <__alt_data_end+0xfffc7a90>
  107bc8:	0005883a 	mov	r2,zero
  107bcc:	003fb006 	br	107a90 <__alt_data_end+0xfffc7a90>
  107bd0:	d9003617 	ldw	r4,216(sp)
  107bd4:	000d883a 	mov	r6,zero
  107bd8:	000f883a 	mov	r7,zero
  107bdc:	980b883a 	mov	r5,r19
  107be0:	d8c03c15 	stw	r3,240(sp)
  107be4:	da003d15 	stw	r8,244(sp)
  107be8:	0116e9c0 	call	116e9c <__eqdf2>
  107bec:	d8c03c17 	ldw	r3,240(sp)
  107bf0:	da003d17 	ldw	r8,244(sp)
  107bf4:	103f9826 	beq	r2,zero,107a58 <__alt_data_end+0xfffc7a58>
  107bf8:	00800044 	movi	r2,1
  107bfc:	10c7c83a 	sub	r3,r2,r3
  107c00:	d8c02615 	stw	r3,152(sp)
  107c04:	003f9506 	br	107a5c <__alt_data_end+0xfffc7a5c>
  107c08:	d9002a17 	ldw	r4,168(sp)
  107c0c:	d8c03217 	ldw	r3,200(sp)
  107c10:	20800044 	addi	r2,r4,1
  107c14:	1885883a 	add	r2,r3,r2
  107c18:	d8802b15 	stw	r2,172(sp)
  107c1c:	103dbf0e 	bge	r2,zero,10731c <__alt_data_end+0xfffc731c>
  107c20:	0005883a 	mov	r2,zero
  107c24:	003dbd06 	br	10731c <__alt_data_end+0xfffc731c>
  107c28:	2000201e 	bne	r4,zero,107cac <___vfprintf_internal_r+0x222c>
  107c2c:	9480004c 	andi	r18,r18,1
  107c30:	90001e1e 	bne	r18,zero,107cac <___vfprintf_internal_r+0x222c>
  107c34:	00800044 	movi	r2,1
  107c38:	d8802b15 	stw	r2,172(sp)
  107c3c:	003db706 	br	10731c <__alt_data_end+0xfffc731c>
  107c40:	00800b44 	movi	r2,45
  107c44:	05adc83a 	sub	r22,zero,r22
  107c48:	d8802305 	stb	r2,140(sp)
  107c4c:	003f3f06 	br	10794c <__alt_data_end+0xfffc794c>
  107c50:	0005883a 	mov	r2,zero
  107c54:	003f5206 	br	1079a0 <__alt_data_end+0xfffc79a0>
  107c58:	90a4703a 	and	r18,r18,r2
  107c5c:	903f4e26 	beq	r18,zero,107998 <__alt_data_end+0xfffc7998>
  107c60:	003f4a06 	br	10798c <__alt_data_end+0xfffc798c>
  107c64:	00800084 	movi	r2,2
  107c68:	10c5c83a 	sub	r2,r2,r3
  107c6c:	003f8406 	br	107a80 <__alt_data_end+0xfffc7a80>
  107c70:	d9402e17 	ldw	r5,184(sp)
  107c74:	d9002e17 	ldw	r4,184(sp)
  107c78:	ac400043 	ldbu	r17,1(r21)
  107c7c:	29400017 	ldw	r5,0(r5)
  107c80:	20800104 	addi	r2,r4,4
  107c84:	d8802e15 	stw	r2,184(sp)
  107c88:	d9402a15 	stw	r5,168(sp)
  107c8c:	182b883a 	mov	r21,r3
  107c90:	283e7b0e 	bge	r5,zero,107680 <__alt_data_end+0xfffc7680>
  107c94:	8c403fcc 	andi	r17,r17,255
  107c98:	017fffc4 	movi	r5,-1
  107c9c:	8c40201c 	xori	r17,r17,128
  107ca0:	d9402a15 	stw	r5,168(sp)
  107ca4:	8c7fe004 	addi	r17,r17,-128
  107ca8:	0037d706 	br	105c08 <__alt_data_end+0xfffc5c08>
  107cac:	d8c02a17 	ldw	r3,168(sp)
  107cb0:	18c00084 	addi	r3,r3,2
  107cb4:	d8c02b15 	stw	r3,172(sp)
  107cb8:	1805883a 	mov	r2,r3
  107cbc:	183d970e 	bge	r3,zero,10731c <__alt_data_end+0xfffc731c>
  107cc0:	003fd706 	br	107c20 <__alt_data_end+0xfffc7c20>
  107cc4:	0005883a 	mov	r2,zero
  107cc8:	003f8f06 	br	107b08 <__alt_data_end+0xfffc7b08>
  107ccc:	9080004c 	andi	r2,r18,1
  107cd0:	103f821e 	bne	r2,zero,107adc <__alt_data_end+0xfffc7adc>
  107cd4:	d8802117 	ldw	r2,132(sp)
  107cd8:	1405c83a 	sub	r2,r2,r16
  107cdc:	d8803315 	stw	r2,204(sp)
  107ce0:	b47ef426 	beq	r22,r17,1078b4 <__alt_data_end+0xfffc78b4>
  107ce4:	dd802617 	ldw	r22,152(sp)
  107ce8:	003f1206 	br	107934 <__alt_data_end+0xfffc7934>
  107cec:	d8c02b03 	ldbu	r3,172(sp)
  107cf0:	d8c02785 	stb	r3,158(sp)
  107cf4:	0038df06 	br	106074 <__alt_data_end+0xfffc6074>
  107cf8:	d8c02b03 	ldbu	r3,172(sp)
  107cfc:	d8c02785 	stb	r3,158(sp)
  107d00:	0038aa06 	br	105fac <__alt_data_end+0xfffc5fac>
  107d04:	d8c02b03 	ldbu	r3,172(sp)
  107d08:	d8c02785 	stb	r3,158(sp)
  107d0c:	003a4306 	br	10661c <__alt_data_end+0xfffc661c>
  107d10:	d8c02b03 	ldbu	r3,172(sp)
  107d14:	d8c02785 	stb	r3,158(sp)
  107d18:	003af506 	br	1068f0 <__alt_data_end+0xfffc68f0>
  107d1c:	0005883a 	mov	r2,zero
  107d20:	003d7b06 	br	107310 <__alt_data_end+0xfffc7310>
  107d24:	d8802344 	addi	r2,sp,141
  107d28:	003f1006 	br	10796c <__alt_data_end+0xfffc796c>
  107d2c:	d8c02b03 	ldbu	r3,172(sp)
  107d30:	d8c02785 	stb	r3,158(sp)
  107d34:	0038fd06 	br	10612c <__alt_data_end+0xfffc612c>
  107d38:	d8c02b03 	ldbu	r3,172(sp)
  107d3c:	d8c02785 	stb	r3,158(sp)
  107d40:	003a9706 	br	1067a0 <__alt_data_end+0xfffc67a0>
  107d44:	d8c02b03 	ldbu	r3,172(sp)
  107d48:	d8c02785 	stb	r3,158(sp)
  107d4c:	003a1806 	br	1065b0 <__alt_data_end+0xfffc65b0>
  107d50:	d8c02b03 	ldbu	r3,172(sp)
  107d54:	d8c02785 	stb	r3,158(sp)
  107d58:	003abe06 	br	106854 <__alt_data_end+0xfffc6854>

00107d5c <__vfprintf_internal>:
  107d5c:	008004b4 	movhi	r2,18
  107d60:	10957404 	addi	r2,r2,21968
  107d64:	300f883a 	mov	r7,r6
  107d68:	280d883a 	mov	r6,r5
  107d6c:	200b883a 	mov	r5,r4
  107d70:	11000017 	ldw	r4,0(r2)
  107d74:	0105a801 	jmpi	105a80 <___vfprintf_internal_r>

00107d78 <__sbprintf>:
  107d78:	2880030b 	ldhu	r2,12(r5)
  107d7c:	2ac01917 	ldw	r11,100(r5)
  107d80:	2a80038b 	ldhu	r10,14(r5)
  107d84:	2a400717 	ldw	r9,28(r5)
  107d88:	2a000917 	ldw	r8,36(r5)
  107d8c:	defee204 	addi	sp,sp,-1144
  107d90:	00c10004 	movi	r3,1024
  107d94:	dc011a15 	stw	r16,1128(sp)
  107d98:	10bfff4c 	andi	r2,r2,65533
  107d9c:	2821883a 	mov	r16,r5
  107da0:	d8cb883a 	add	r5,sp,r3
  107da4:	dc811c15 	stw	r18,1136(sp)
  107da8:	dc411b15 	stw	r17,1132(sp)
  107dac:	dfc11d15 	stw	ra,1140(sp)
  107db0:	2025883a 	mov	r18,r4
  107db4:	d881030d 	sth	r2,1036(sp)
  107db8:	dac11915 	stw	r11,1124(sp)
  107dbc:	da81038d 	sth	r10,1038(sp)
  107dc0:	da410715 	stw	r9,1052(sp)
  107dc4:	da010915 	stw	r8,1060(sp)
  107dc8:	dec10015 	stw	sp,1024(sp)
  107dcc:	dec10415 	stw	sp,1040(sp)
  107dd0:	d8c10215 	stw	r3,1032(sp)
  107dd4:	d8c10515 	stw	r3,1044(sp)
  107dd8:	d8010615 	stw	zero,1048(sp)
  107ddc:	0105a800 	call	105a80 <___vfprintf_internal_r>
  107de0:	1023883a 	mov	r17,r2
  107de4:	10000416 	blt	r2,zero,107df8 <__sbprintf+0x80>
  107de8:	d9410004 	addi	r5,sp,1024
  107dec:	9009883a 	mov	r4,r18
  107df0:	0109b080 	call	109b08 <_fflush_r>
  107df4:	10000d1e 	bne	r2,zero,107e2c <__sbprintf+0xb4>
  107df8:	d881030b 	ldhu	r2,1036(sp)
  107dfc:	1080100c 	andi	r2,r2,64
  107e00:	10000326 	beq	r2,zero,107e10 <__sbprintf+0x98>
  107e04:	8080030b 	ldhu	r2,12(r16)
  107e08:	10801014 	ori	r2,r2,64
  107e0c:	8080030d 	sth	r2,12(r16)
  107e10:	8805883a 	mov	r2,r17
  107e14:	dfc11d17 	ldw	ra,1140(sp)
  107e18:	dc811c17 	ldw	r18,1136(sp)
  107e1c:	dc411b17 	ldw	r17,1132(sp)
  107e20:	dc011a17 	ldw	r16,1128(sp)
  107e24:	dec11e04 	addi	sp,sp,1144
  107e28:	f800283a 	ret
  107e2c:	047fffc4 	movi	r17,-1
  107e30:	003ff106 	br	107df8 <__alt_data_end+0xfffc7df8>

00107e34 <_write_r>:
  107e34:	defffd04 	addi	sp,sp,-12
  107e38:	2805883a 	mov	r2,r5
  107e3c:	dc000015 	stw	r16,0(sp)
  107e40:	040004b4 	movhi	r16,18
  107e44:	dc400115 	stw	r17,4(sp)
  107e48:	300b883a 	mov	r5,r6
  107e4c:	841c9c04 	addi	r16,r16,29296
  107e50:	2023883a 	mov	r17,r4
  107e54:	380d883a 	mov	r6,r7
  107e58:	1009883a 	mov	r4,r2
  107e5c:	dfc00215 	stw	ra,8(sp)
  107e60:	80000015 	stw	zero,0(r16)
  107e64:	0118ef80 	call	118ef8 <write>
  107e68:	00ffffc4 	movi	r3,-1
  107e6c:	10c00526 	beq	r2,r3,107e84 <_write_r+0x50>
  107e70:	dfc00217 	ldw	ra,8(sp)
  107e74:	dc400117 	ldw	r17,4(sp)
  107e78:	dc000017 	ldw	r16,0(sp)
  107e7c:	dec00304 	addi	sp,sp,12
  107e80:	f800283a 	ret
  107e84:	80c00017 	ldw	r3,0(r16)
  107e88:	183ff926 	beq	r3,zero,107e70 <__alt_data_end+0xfffc7e70>
  107e8c:	88c00015 	stw	r3,0(r17)
  107e90:	003ff706 	br	107e70 <__alt_data_end+0xfffc7e70>

00107e94 <__swsetup_r>:
  107e94:	008004b4 	movhi	r2,18
  107e98:	defffd04 	addi	sp,sp,-12
  107e9c:	10957404 	addi	r2,r2,21968
  107ea0:	dc400115 	stw	r17,4(sp)
  107ea4:	2023883a 	mov	r17,r4
  107ea8:	11000017 	ldw	r4,0(r2)
  107eac:	dc000015 	stw	r16,0(sp)
  107eb0:	dfc00215 	stw	ra,8(sp)
  107eb4:	2821883a 	mov	r16,r5
  107eb8:	20000226 	beq	r4,zero,107ec4 <__swsetup_r+0x30>
  107ebc:	20800e17 	ldw	r2,56(r4)
  107ec0:	10003126 	beq	r2,zero,107f88 <__swsetup_r+0xf4>
  107ec4:	8080030b 	ldhu	r2,12(r16)
  107ec8:	10c0020c 	andi	r3,r2,8
  107ecc:	1009883a 	mov	r4,r2
  107ed0:	18000f26 	beq	r3,zero,107f10 <__swsetup_r+0x7c>
  107ed4:	80c00417 	ldw	r3,16(r16)
  107ed8:	18001526 	beq	r3,zero,107f30 <__swsetup_r+0x9c>
  107edc:	1100004c 	andi	r4,r2,1
  107ee0:	20001c1e 	bne	r4,zero,107f54 <__swsetup_r+0xc0>
  107ee4:	1080008c 	andi	r2,r2,2
  107ee8:	1000291e 	bne	r2,zero,107f90 <__swsetup_r+0xfc>
  107eec:	80800517 	ldw	r2,20(r16)
  107ef0:	80800215 	stw	r2,8(r16)
  107ef4:	18001c26 	beq	r3,zero,107f68 <__swsetup_r+0xd4>
  107ef8:	0005883a 	mov	r2,zero
  107efc:	dfc00217 	ldw	ra,8(sp)
  107f00:	dc400117 	ldw	r17,4(sp)
  107f04:	dc000017 	ldw	r16,0(sp)
  107f08:	dec00304 	addi	sp,sp,12
  107f0c:	f800283a 	ret
  107f10:	2080040c 	andi	r2,r4,16
  107f14:	10002e26 	beq	r2,zero,107fd0 <__swsetup_r+0x13c>
  107f18:	2080010c 	andi	r2,r4,4
  107f1c:	10001e1e 	bne	r2,zero,107f98 <__swsetup_r+0x104>
  107f20:	80c00417 	ldw	r3,16(r16)
  107f24:	20800214 	ori	r2,r4,8
  107f28:	8080030d 	sth	r2,12(r16)
  107f2c:	183feb1e 	bne	r3,zero,107edc <__alt_data_end+0xfffc7edc>
  107f30:	1100a00c 	andi	r4,r2,640
  107f34:	01408004 	movi	r5,512
  107f38:	217fe826 	beq	r4,r5,107edc <__alt_data_end+0xfffc7edc>
  107f3c:	800b883a 	mov	r5,r16
  107f40:	8809883a 	mov	r4,r17
  107f44:	010ab340 	call	10ab34 <__smakebuf_r>
  107f48:	8080030b 	ldhu	r2,12(r16)
  107f4c:	80c00417 	ldw	r3,16(r16)
  107f50:	003fe206 	br	107edc <__alt_data_end+0xfffc7edc>
  107f54:	80800517 	ldw	r2,20(r16)
  107f58:	80000215 	stw	zero,8(r16)
  107f5c:	0085c83a 	sub	r2,zero,r2
  107f60:	80800615 	stw	r2,24(r16)
  107f64:	183fe41e 	bne	r3,zero,107ef8 <__alt_data_end+0xfffc7ef8>
  107f68:	80c0030b 	ldhu	r3,12(r16)
  107f6c:	0005883a 	mov	r2,zero
  107f70:	1900200c 	andi	r4,r3,128
  107f74:	203fe126 	beq	r4,zero,107efc <__alt_data_end+0xfffc7efc>
  107f78:	18c01014 	ori	r3,r3,64
  107f7c:	80c0030d 	sth	r3,12(r16)
  107f80:	00bfffc4 	movi	r2,-1
  107f84:	003fdd06 	br	107efc <__alt_data_end+0xfffc7efc>
  107f88:	0109ef40 	call	109ef4 <__sinit>
  107f8c:	003fcd06 	br	107ec4 <__alt_data_end+0xfffc7ec4>
  107f90:	0005883a 	mov	r2,zero
  107f94:	003fd606 	br	107ef0 <__alt_data_end+0xfffc7ef0>
  107f98:	81400c17 	ldw	r5,48(r16)
  107f9c:	28000626 	beq	r5,zero,107fb8 <__swsetup_r+0x124>
  107fa0:	80801004 	addi	r2,r16,64
  107fa4:	28800326 	beq	r5,r2,107fb4 <__swsetup_r+0x120>
  107fa8:	8809883a 	mov	r4,r17
  107fac:	010a0680 	call	10a068 <_free_r>
  107fb0:	8100030b 	ldhu	r4,12(r16)
  107fb4:	80000c15 	stw	zero,48(r16)
  107fb8:	80c00417 	ldw	r3,16(r16)
  107fbc:	00bff6c4 	movi	r2,-37
  107fc0:	1108703a 	and	r4,r2,r4
  107fc4:	80000115 	stw	zero,4(r16)
  107fc8:	80c00015 	stw	r3,0(r16)
  107fcc:	003fd506 	br	107f24 <__alt_data_end+0xfffc7f24>
  107fd0:	00800244 	movi	r2,9
  107fd4:	88800015 	stw	r2,0(r17)
  107fd8:	20801014 	ori	r2,r4,64
  107fdc:	8080030d 	sth	r2,12(r16)
  107fe0:	00bfffc4 	movi	r2,-1
  107fe4:	003fc506 	br	107efc <__alt_data_end+0xfffc7efc>

00107fe8 <_close_r>:
  107fe8:	defffd04 	addi	sp,sp,-12
  107fec:	dc000015 	stw	r16,0(sp)
  107ff0:	040004b4 	movhi	r16,18
  107ff4:	dc400115 	stw	r17,4(sp)
  107ff8:	841c9c04 	addi	r16,r16,29296
  107ffc:	2023883a 	mov	r17,r4
  108000:	2809883a 	mov	r4,r5
  108004:	dfc00215 	stw	ra,8(sp)
  108008:	80000015 	stw	zero,0(r16)
  10800c:	01186a80 	call	1186a8 <close>
  108010:	00ffffc4 	movi	r3,-1
  108014:	10c00526 	beq	r2,r3,10802c <_close_r+0x44>
  108018:	dfc00217 	ldw	ra,8(sp)
  10801c:	dc400117 	ldw	r17,4(sp)
  108020:	dc000017 	ldw	r16,0(sp)
  108024:	dec00304 	addi	sp,sp,12
  108028:	f800283a 	ret
  10802c:	80c00017 	ldw	r3,0(r16)
  108030:	183ff926 	beq	r3,zero,108018 <__alt_data_end+0xfffc8018>
  108034:	88c00015 	stw	r3,0(r17)
  108038:	003ff706 	br	108018 <__alt_data_end+0xfffc8018>

0010803c <quorem>:
  10803c:	defff204 	addi	sp,sp,-56
  108040:	ddc00b15 	stw	r23,44(sp)
  108044:	20800417 	ldw	r2,16(r4)
  108048:	2dc00417 	ldw	r23,16(r5)
  10804c:	dfc00d15 	stw	ra,52(sp)
  108050:	df000c15 	stw	fp,48(sp)
  108054:	dd800a15 	stw	r22,40(sp)
  108058:	dd400915 	stw	r21,36(sp)
  10805c:	dd000815 	stw	r20,32(sp)
  108060:	dcc00715 	stw	r19,28(sp)
  108064:	dc800615 	stw	r18,24(sp)
  108068:	dc400515 	stw	r17,20(sp)
  10806c:	dc000415 	stw	r16,16(sp)
  108070:	15c07a16 	blt	r2,r23,10825c <quorem+0x220>
  108074:	bdffffc4 	addi	r23,r23,-1
  108078:	bde9883a 	add	r20,r23,r23
  10807c:	28c00504 	addi	r3,r5,20
  108080:	a529883a 	add	r20,r20,r20
  108084:	1d39883a 	add	fp,r3,r20
  108088:	24c00504 	addi	r19,r4,20
  10808c:	d9400215 	stw	r5,8(sp)
  108090:	9d29883a 	add	r20,r19,r20
  108094:	e1400017 	ldw	r5,0(fp)
  108098:	d9000015 	stw	r4,0(sp)
  10809c:	a1000017 	ldw	r4,0(r20)
  1080a0:	29400044 	addi	r5,r5,1
  1080a4:	d8c00115 	stw	r3,4(sp)
  1080a8:	dd000315 	stw	r20,12(sp)
  1080ac:	01159400 	call	115940 <__udivsi3>
  1080b0:	1025883a 	mov	r18,r2
  1080b4:	10003026 	beq	r2,zero,108178 <quorem+0x13c>
  1080b8:	dc400117 	ldw	r17,4(sp)
  1080bc:	9829883a 	mov	r20,r19
  1080c0:	002d883a 	mov	r22,zero
  1080c4:	0021883a 	mov	r16,zero
  1080c8:	8d400017 	ldw	r21,0(r17)
  1080cc:	900b883a 	mov	r5,r18
  1080d0:	8c400104 	addi	r17,r17,4
  1080d4:	a93fffcc 	andi	r4,r21,65535
  1080d8:	01159fc0 	call	1159fc <__mulsi3>
  1080dc:	a808d43a 	srli	r4,r21,16
  1080e0:	900b883a 	mov	r5,r18
  1080e4:	15ad883a 	add	r22,r2,r22
  1080e8:	01159fc0 	call	1159fc <__mulsi3>
  1080ec:	a1000017 	ldw	r4,0(r20)
  1080f0:	b00cd43a 	srli	r6,r22,16
  1080f4:	b0ffffcc 	andi	r3,r22,65535
  1080f8:	217fffcc 	andi	r5,r4,65535
  1080fc:	2c21883a 	add	r16,r5,r16
  108100:	80c7c83a 	sub	r3,r16,r3
  108104:	2008d43a 	srli	r4,r4,16
  108108:	1185883a 	add	r2,r2,r6
  10810c:	1821d43a 	srai	r16,r3,16
  108110:	117fffcc 	andi	r5,r2,65535
  108114:	2149c83a 	sub	r4,r4,r5
  108118:	2421883a 	add	r16,r4,r16
  10811c:	8008943a 	slli	r4,r16,16
  108120:	18ffffcc 	andi	r3,r3,65535
  108124:	102cd43a 	srli	r22,r2,16
  108128:	20c8b03a 	or	r4,r4,r3
  10812c:	a1000015 	stw	r4,0(r20)
  108130:	8021d43a 	srai	r16,r16,16
  108134:	a5000104 	addi	r20,r20,4
  108138:	e47fe32e 	bgeu	fp,r17,1080c8 <__alt_data_end+0xfffc80c8>
  10813c:	d8c00317 	ldw	r3,12(sp)
  108140:	18800017 	ldw	r2,0(r3)
  108144:	10000c1e 	bne	r2,zero,108178 <quorem+0x13c>
  108148:	18bfff04 	addi	r2,r3,-4
  10814c:	9880082e 	bgeu	r19,r2,108170 <quorem+0x134>
  108150:	18ffff17 	ldw	r3,-4(r3)
  108154:	18000326 	beq	r3,zero,108164 <quorem+0x128>
  108158:	00000506 	br	108170 <quorem+0x134>
  10815c:	10c00017 	ldw	r3,0(r2)
  108160:	1800031e 	bne	r3,zero,108170 <quorem+0x134>
  108164:	10bfff04 	addi	r2,r2,-4
  108168:	bdffffc4 	addi	r23,r23,-1
  10816c:	98bffb36 	bltu	r19,r2,10815c <__alt_data_end+0xfffc815c>
  108170:	d8c00017 	ldw	r3,0(sp)
  108174:	1dc00415 	stw	r23,16(r3)
  108178:	d9400217 	ldw	r5,8(sp)
  10817c:	d9000017 	ldw	r4,0(sp)
  108180:	010c2e40 	call	10c2e4 <__mcmp>
  108184:	10002816 	blt	r2,zero,108228 <quorem+0x1ec>
  108188:	dc400117 	ldw	r17,4(sp)
  10818c:	94800044 	addi	r18,r18,1
  108190:	980d883a 	mov	r6,r19
  108194:	0007883a 	mov	r3,zero
  108198:	31000017 	ldw	r4,0(r6)
  10819c:	89400017 	ldw	r5,0(r17)
  1081a0:	31800104 	addi	r6,r6,4
  1081a4:	20bfffcc 	andi	r2,r4,65535
  1081a8:	10c7883a 	add	r3,r2,r3
  1081ac:	28bfffcc 	andi	r2,r5,65535
  1081b0:	1885c83a 	sub	r2,r3,r2
  1081b4:	280ad43a 	srli	r5,r5,16
  1081b8:	2008d43a 	srli	r4,r4,16
  1081bc:	1007d43a 	srai	r3,r2,16
  1081c0:	10bfffcc 	andi	r2,r2,65535
  1081c4:	2149c83a 	sub	r4,r4,r5
  1081c8:	20c9883a 	add	r4,r4,r3
  1081cc:	200a943a 	slli	r5,r4,16
  1081d0:	8c400104 	addi	r17,r17,4
  1081d4:	2007d43a 	srai	r3,r4,16
  1081d8:	2884b03a 	or	r2,r5,r2
  1081dc:	30bfff15 	stw	r2,-4(r6)
  1081e0:	e47fed2e 	bgeu	fp,r17,108198 <__alt_data_end+0xfffc8198>
  1081e4:	bdc5883a 	add	r2,r23,r23
  1081e8:	1085883a 	add	r2,r2,r2
  1081ec:	9887883a 	add	r3,r19,r2
  1081f0:	18800017 	ldw	r2,0(r3)
  1081f4:	10000c1e 	bne	r2,zero,108228 <quorem+0x1ec>
  1081f8:	18bfff04 	addi	r2,r3,-4
  1081fc:	9880082e 	bgeu	r19,r2,108220 <quorem+0x1e4>
  108200:	18ffff17 	ldw	r3,-4(r3)
  108204:	18000326 	beq	r3,zero,108214 <quorem+0x1d8>
  108208:	00000506 	br	108220 <quorem+0x1e4>
  10820c:	10c00017 	ldw	r3,0(r2)
  108210:	1800031e 	bne	r3,zero,108220 <quorem+0x1e4>
  108214:	10bfff04 	addi	r2,r2,-4
  108218:	bdffffc4 	addi	r23,r23,-1
  10821c:	98bffb36 	bltu	r19,r2,10820c <__alt_data_end+0xfffc820c>
  108220:	d8c00017 	ldw	r3,0(sp)
  108224:	1dc00415 	stw	r23,16(r3)
  108228:	9005883a 	mov	r2,r18
  10822c:	dfc00d17 	ldw	ra,52(sp)
  108230:	df000c17 	ldw	fp,48(sp)
  108234:	ddc00b17 	ldw	r23,44(sp)
  108238:	dd800a17 	ldw	r22,40(sp)
  10823c:	dd400917 	ldw	r21,36(sp)
  108240:	dd000817 	ldw	r20,32(sp)
  108244:	dcc00717 	ldw	r19,28(sp)
  108248:	dc800617 	ldw	r18,24(sp)
  10824c:	dc400517 	ldw	r17,20(sp)
  108250:	dc000417 	ldw	r16,16(sp)
  108254:	dec00e04 	addi	sp,sp,56
  108258:	f800283a 	ret
  10825c:	0005883a 	mov	r2,zero
  108260:	003ff206 	br	10822c <__alt_data_end+0xfffc822c>

00108264 <_dtoa_r>:
  108264:	20801017 	ldw	r2,64(r4)
  108268:	deffde04 	addi	sp,sp,-136
  10826c:	df002015 	stw	fp,128(sp)
  108270:	dcc01b15 	stw	r19,108(sp)
  108274:	dc801a15 	stw	r18,104(sp)
  108278:	dc401915 	stw	r17,100(sp)
  10827c:	dc001815 	stw	r16,96(sp)
  108280:	dfc02115 	stw	ra,132(sp)
  108284:	ddc01f15 	stw	r23,124(sp)
  108288:	dd801e15 	stw	r22,120(sp)
  10828c:	dd401d15 	stw	r21,116(sp)
  108290:	dd001c15 	stw	r20,112(sp)
  108294:	d9c00315 	stw	r7,12(sp)
  108298:	2039883a 	mov	fp,r4
  10829c:	3023883a 	mov	r17,r6
  1082a0:	2825883a 	mov	r18,r5
  1082a4:	dc002417 	ldw	r16,144(sp)
  1082a8:	3027883a 	mov	r19,r6
  1082ac:	10000826 	beq	r2,zero,1082d0 <_dtoa_r+0x6c>
  1082b0:	21801117 	ldw	r6,68(r4)
  1082b4:	00c00044 	movi	r3,1
  1082b8:	100b883a 	mov	r5,r2
  1082bc:	1986983a 	sll	r3,r3,r6
  1082c0:	11800115 	stw	r6,4(r2)
  1082c4:	10c00215 	stw	r3,8(r2)
  1082c8:	010ba080 	call	10ba08 <_Bfree>
  1082cc:	e0001015 	stw	zero,64(fp)
  1082d0:	88002e16 	blt	r17,zero,10838c <_dtoa_r+0x128>
  1082d4:	80000015 	stw	zero,0(r16)
  1082d8:	889ffc2c 	andhi	r2,r17,32752
  1082dc:	00dffc34 	movhi	r3,32752
  1082e0:	10c01c26 	beq	r2,r3,108354 <_dtoa_r+0xf0>
  1082e4:	000d883a 	mov	r6,zero
  1082e8:	000f883a 	mov	r7,zero
  1082ec:	9009883a 	mov	r4,r18
  1082f0:	980b883a 	mov	r5,r19
  1082f4:	0116e9c0 	call	116e9c <__eqdf2>
  1082f8:	10002b1e 	bne	r2,zero,1083a8 <_dtoa_r+0x144>
  1082fc:	d9c02317 	ldw	r7,140(sp)
  108300:	00800044 	movi	r2,1
  108304:	38800015 	stw	r2,0(r7)
  108308:	d8802517 	ldw	r2,148(sp)
  10830c:	10019e26 	beq	r2,zero,108988 <_dtoa_r+0x724>
  108310:	d8c02517 	ldw	r3,148(sp)
  108314:	008004b4 	movhi	r2,18
  108318:	108c9744 	addi	r2,r2,12893
  10831c:	18800015 	stw	r2,0(r3)
  108320:	10bfffc4 	addi	r2,r2,-1
  108324:	dfc02117 	ldw	ra,132(sp)
  108328:	df002017 	ldw	fp,128(sp)
  10832c:	ddc01f17 	ldw	r23,124(sp)
  108330:	dd801e17 	ldw	r22,120(sp)
  108334:	dd401d17 	ldw	r21,116(sp)
  108338:	dd001c17 	ldw	r20,112(sp)
  10833c:	dcc01b17 	ldw	r19,108(sp)
  108340:	dc801a17 	ldw	r18,104(sp)
  108344:	dc401917 	ldw	r17,100(sp)
  108348:	dc001817 	ldw	r16,96(sp)
  10834c:	dec02204 	addi	sp,sp,136
  108350:	f800283a 	ret
  108354:	d8c02317 	ldw	r3,140(sp)
  108358:	0089c3c4 	movi	r2,9999
  10835c:	18800015 	stw	r2,0(r3)
  108360:	90017726 	beq	r18,zero,108940 <_dtoa_r+0x6dc>
  108364:	008004b4 	movhi	r2,18
  108368:	108d5604 	addi	r2,r2,13656
  10836c:	d9002517 	ldw	r4,148(sp)
  108370:	203fec26 	beq	r4,zero,108324 <__alt_data_end+0xfffc8324>
  108374:	10c000c7 	ldb	r3,3(r2)
  108378:	1801781e 	bne	r3,zero,10895c <_dtoa_r+0x6f8>
  10837c:	10c000c4 	addi	r3,r2,3
  108380:	d9802517 	ldw	r6,148(sp)
  108384:	30c00015 	stw	r3,0(r6)
  108388:	003fe606 	br	108324 <__alt_data_end+0xfffc8324>
  10838c:	04e00034 	movhi	r19,32768
  108390:	9cffffc4 	addi	r19,r19,-1
  108394:	00800044 	movi	r2,1
  108398:	8ce6703a 	and	r19,r17,r19
  10839c:	80800015 	stw	r2,0(r16)
  1083a0:	9823883a 	mov	r17,r19
  1083a4:	003fcc06 	br	1082d8 <__alt_data_end+0xfffc82d8>
  1083a8:	d8800204 	addi	r2,sp,8
  1083ac:	d8800015 	stw	r2,0(sp)
  1083b0:	d9c00104 	addi	r7,sp,4
  1083b4:	900b883a 	mov	r5,r18
  1083b8:	980d883a 	mov	r6,r19
  1083bc:	e009883a 	mov	r4,fp
  1083c0:	8820d53a 	srli	r16,r17,20
  1083c4:	010c6b00 	call	10c6b0 <__d2b>
  1083c8:	d8800915 	stw	r2,36(sp)
  1083cc:	8001651e 	bne	r16,zero,108964 <_dtoa_r+0x700>
  1083d0:	dd800217 	ldw	r22,8(sp)
  1083d4:	dc000117 	ldw	r16,4(sp)
  1083d8:	00800804 	movi	r2,32
  1083dc:	b421883a 	add	r16,r22,r16
  1083e0:	80c10c84 	addi	r3,r16,1074
  1083e4:	10c2d10e 	bge	r2,r3,108f2c <_dtoa_r+0xcc8>
  1083e8:	00801004 	movi	r2,64
  1083ec:	81010484 	addi	r4,r16,1042
  1083f0:	10c7c83a 	sub	r3,r2,r3
  1083f4:	9108d83a 	srl	r4,r18,r4
  1083f8:	88e2983a 	sll	r17,r17,r3
  1083fc:	2448b03a 	or	r4,r4,r17
  108400:	01183b80 	call	1183b8 <__floatunsidf>
  108404:	017f8434 	movhi	r5,65040
  108408:	01800044 	movi	r6,1
  10840c:	1009883a 	mov	r4,r2
  108410:	194b883a 	add	r5,r3,r5
  108414:	843fffc4 	addi	r16,r16,-1
  108418:	d9801115 	stw	r6,68(sp)
  10841c:	000d883a 	mov	r6,zero
  108420:	01cffe34 	movhi	r7,16376
  108424:	01179600 	call	117960 <__subdf3>
  108428:	0198dbf4 	movhi	r6,25455
  10842c:	01cff4f4 	movhi	r7,16339
  108430:	3190d844 	addi	r6,r6,17249
  108434:	39e1e9c4 	addi	r7,r7,-30809
  108438:	1009883a 	mov	r4,r2
  10843c:	180b883a 	mov	r5,r3
  108440:	01170f40 	call	1170f4 <__muldf3>
  108444:	01a2d874 	movhi	r6,35681
  108448:	01cff1f4 	movhi	r7,16327
  10844c:	31b22cc4 	addi	r6,r6,-14157
  108450:	39e28a04 	addi	r7,r7,-30168
  108454:	180b883a 	mov	r5,r3
  108458:	1009883a 	mov	r4,r2
  10845c:	0115c200 	call	115c20 <__adddf3>
  108460:	8009883a 	mov	r4,r16
  108464:	1029883a 	mov	r20,r2
  108468:	1823883a 	mov	r17,r3
  10846c:	01182dc0 	call	1182dc <__floatsidf>
  108470:	019427f4 	movhi	r6,20639
  108474:	01cff4f4 	movhi	r7,16339
  108478:	319e7ec4 	addi	r6,r6,31227
  10847c:	39d104c4 	addi	r7,r7,17427
  108480:	1009883a 	mov	r4,r2
  108484:	180b883a 	mov	r5,r3
  108488:	01170f40 	call	1170f4 <__muldf3>
  10848c:	100d883a 	mov	r6,r2
  108490:	180f883a 	mov	r7,r3
  108494:	a009883a 	mov	r4,r20
  108498:	880b883a 	mov	r5,r17
  10849c:	0115c200 	call	115c20 <__adddf3>
  1084a0:	1009883a 	mov	r4,r2
  1084a4:	180b883a 	mov	r5,r3
  1084a8:	1029883a 	mov	r20,r2
  1084ac:	1823883a 	mov	r17,r3
  1084b0:	011825c0 	call	11825c <__fixdfsi>
  1084b4:	000d883a 	mov	r6,zero
  1084b8:	000f883a 	mov	r7,zero
  1084bc:	a009883a 	mov	r4,r20
  1084c0:	880b883a 	mov	r5,r17
  1084c4:	d8800515 	stw	r2,20(sp)
  1084c8:	01170000 	call	117000 <__ledf2>
  1084cc:	10028716 	blt	r2,zero,108eec <_dtoa_r+0xc88>
  1084d0:	d8c00517 	ldw	r3,20(sp)
  1084d4:	00800584 	movi	r2,22
  1084d8:	10c27536 	bltu	r2,r3,108eb0 <_dtoa_r+0xc4c>
  1084dc:	180490fa 	slli	r2,r3,3
  1084e0:	00c004b4 	movhi	r3,18
  1084e4:	18cd7204 	addi	r3,r3,13768
  1084e8:	1885883a 	add	r2,r3,r2
  1084ec:	11000017 	ldw	r4,0(r2)
  1084f0:	11400117 	ldw	r5,4(r2)
  1084f4:	900d883a 	mov	r6,r18
  1084f8:	980f883a 	mov	r7,r19
  1084fc:	0116f240 	call	116f24 <__gedf2>
  108500:	00828d0e 	bge	zero,r2,108f38 <_dtoa_r+0xcd4>
  108504:	d9000517 	ldw	r4,20(sp)
  108508:	d8000e15 	stw	zero,56(sp)
  10850c:	213fffc4 	addi	r4,r4,-1
  108510:	d9000515 	stw	r4,20(sp)
  108514:	b42dc83a 	sub	r22,r22,r16
  108518:	b5bfffc4 	addi	r22,r22,-1
  10851c:	b0026f16 	blt	r22,zero,108edc <_dtoa_r+0xc78>
  108520:	d8000815 	stw	zero,32(sp)
  108524:	d9c00517 	ldw	r7,20(sp)
  108528:	38026416 	blt	r7,zero,108ebc <_dtoa_r+0xc58>
  10852c:	b1ed883a 	add	r22,r22,r7
  108530:	d9c00d15 	stw	r7,52(sp)
  108534:	d8000a15 	stw	zero,40(sp)
  108538:	d9800317 	ldw	r6,12(sp)
  10853c:	00800244 	movi	r2,9
  108540:	11811436 	bltu	r2,r6,108994 <_dtoa_r+0x730>
  108544:	00800144 	movi	r2,5
  108548:	1184e10e 	bge	r2,r6,1098d0 <_dtoa_r+0x166c>
  10854c:	31bfff04 	addi	r6,r6,-4
  108550:	d9800315 	stw	r6,12(sp)
  108554:	0023883a 	mov	r17,zero
  108558:	d9800317 	ldw	r6,12(sp)
  10855c:	008000c4 	movi	r2,3
  108560:	30836726 	beq	r6,r2,109300 <_dtoa_r+0x109c>
  108564:	1183410e 	bge	r2,r6,10926c <_dtoa_r+0x1008>
  108568:	d9c00317 	ldw	r7,12(sp)
  10856c:	00800104 	movi	r2,4
  108570:	38827c26 	beq	r7,r2,108f64 <_dtoa_r+0xd00>
  108574:	00800144 	movi	r2,5
  108578:	3884c41e 	bne	r7,r2,10988c <_dtoa_r+0x1628>
  10857c:	00800044 	movi	r2,1
  108580:	d8800b15 	stw	r2,44(sp)
  108584:	d8c00517 	ldw	r3,20(sp)
  108588:	d9002217 	ldw	r4,136(sp)
  10858c:	1907883a 	add	r3,r3,r4
  108590:	19800044 	addi	r6,r3,1
  108594:	d8c00c15 	stw	r3,48(sp)
  108598:	d9800615 	stw	r6,24(sp)
  10859c:	0183a40e 	bge	zero,r6,109430 <_dtoa_r+0x11cc>
  1085a0:	d9800617 	ldw	r6,24(sp)
  1085a4:	3021883a 	mov	r16,r6
  1085a8:	e0001115 	stw	zero,68(fp)
  1085ac:	008005c4 	movi	r2,23
  1085b0:	1184c92e 	bgeu	r2,r6,1098d8 <_dtoa_r+0x1674>
  1085b4:	00c00044 	movi	r3,1
  1085b8:	00800104 	movi	r2,4
  1085bc:	1085883a 	add	r2,r2,r2
  1085c0:	11000504 	addi	r4,r2,20
  1085c4:	180b883a 	mov	r5,r3
  1085c8:	18c00044 	addi	r3,r3,1
  1085cc:	313ffb2e 	bgeu	r6,r4,1085bc <__alt_data_end+0xfffc85bc>
  1085d0:	e1401115 	stw	r5,68(fp)
  1085d4:	e009883a 	mov	r4,fp
  1085d8:	010b9600 	call	10b960 <_Balloc>
  1085dc:	d8800715 	stw	r2,28(sp)
  1085e0:	e0801015 	stw	r2,64(fp)
  1085e4:	00800384 	movi	r2,14
  1085e8:	1400f736 	bltu	r2,r16,1089c8 <_dtoa_r+0x764>
  1085ec:	8800f626 	beq	r17,zero,1089c8 <_dtoa_r+0x764>
  1085f0:	d9c00517 	ldw	r7,20(sp)
  1085f4:	01c39a0e 	bge	zero,r7,109460 <_dtoa_r+0x11fc>
  1085f8:	388003cc 	andi	r2,r7,15
  1085fc:	100490fa 	slli	r2,r2,3
  108600:	382bd13a 	srai	r21,r7,4
  108604:	00c004b4 	movhi	r3,18
  108608:	18cd7204 	addi	r3,r3,13768
  10860c:	1885883a 	add	r2,r3,r2
  108610:	a8c0040c 	andi	r3,r21,16
  108614:	12400017 	ldw	r9,0(r2)
  108618:	12000117 	ldw	r8,4(r2)
  10861c:	18037926 	beq	r3,zero,109404 <_dtoa_r+0x11a0>
  108620:	008004b4 	movhi	r2,18
  108624:	108d6804 	addi	r2,r2,13728
  108628:	11800817 	ldw	r6,32(r2)
  10862c:	11c00917 	ldw	r7,36(r2)
  108630:	9009883a 	mov	r4,r18
  108634:	980b883a 	mov	r5,r19
  108638:	da001715 	stw	r8,92(sp)
  10863c:	da401615 	stw	r9,88(sp)
  108640:	01164cc0 	call	1164cc <__divdf3>
  108644:	da001717 	ldw	r8,92(sp)
  108648:	da401617 	ldw	r9,88(sp)
  10864c:	ad4003cc 	andi	r21,r21,15
  108650:	040000c4 	movi	r16,3
  108654:	1023883a 	mov	r17,r2
  108658:	1829883a 	mov	r20,r3
  10865c:	a8001126 	beq	r21,zero,1086a4 <_dtoa_r+0x440>
  108660:	05c004b4 	movhi	r23,18
  108664:	bdcd6804 	addi	r23,r23,13728
  108668:	4805883a 	mov	r2,r9
  10866c:	4007883a 	mov	r3,r8
  108670:	a980004c 	andi	r6,r21,1
  108674:	1009883a 	mov	r4,r2
  108678:	a82bd07a 	srai	r21,r21,1
  10867c:	180b883a 	mov	r5,r3
  108680:	30000426 	beq	r6,zero,108694 <_dtoa_r+0x430>
  108684:	b9800017 	ldw	r6,0(r23)
  108688:	b9c00117 	ldw	r7,4(r23)
  10868c:	84000044 	addi	r16,r16,1
  108690:	01170f40 	call	1170f4 <__muldf3>
  108694:	bdc00204 	addi	r23,r23,8
  108698:	a83ff51e 	bne	r21,zero,108670 <__alt_data_end+0xfffc8670>
  10869c:	1013883a 	mov	r9,r2
  1086a0:	1811883a 	mov	r8,r3
  1086a4:	480d883a 	mov	r6,r9
  1086a8:	400f883a 	mov	r7,r8
  1086ac:	8809883a 	mov	r4,r17
  1086b0:	a00b883a 	mov	r5,r20
  1086b4:	01164cc0 	call	1164cc <__divdf3>
  1086b8:	d8800f15 	stw	r2,60(sp)
  1086bc:	d8c01015 	stw	r3,64(sp)
  1086c0:	d8c00e17 	ldw	r3,56(sp)
  1086c4:	18000626 	beq	r3,zero,1086e0 <_dtoa_r+0x47c>
  1086c8:	d9000f17 	ldw	r4,60(sp)
  1086cc:	d9401017 	ldw	r5,64(sp)
  1086d0:	000d883a 	mov	r6,zero
  1086d4:	01cffc34 	movhi	r7,16368
  1086d8:	01170000 	call	117000 <__ledf2>
  1086dc:	10040b16 	blt	r2,zero,10970c <_dtoa_r+0x14a8>
  1086e0:	8009883a 	mov	r4,r16
  1086e4:	01182dc0 	call	1182dc <__floatsidf>
  1086e8:	d9800f17 	ldw	r6,60(sp)
  1086ec:	d9c01017 	ldw	r7,64(sp)
  1086f0:	1009883a 	mov	r4,r2
  1086f4:	180b883a 	mov	r5,r3
  1086f8:	01170f40 	call	1170f4 <__muldf3>
  1086fc:	000d883a 	mov	r6,zero
  108700:	01d00734 	movhi	r7,16412
  108704:	1009883a 	mov	r4,r2
  108708:	180b883a 	mov	r5,r3
  10870c:	0115c200 	call	115c20 <__adddf3>
  108710:	1021883a 	mov	r16,r2
  108714:	d8800617 	ldw	r2,24(sp)
  108718:	047f3034 	movhi	r17,64704
  10871c:	1c63883a 	add	r17,r3,r17
  108720:	10031826 	beq	r2,zero,109384 <_dtoa_r+0x1120>
  108724:	d8c00517 	ldw	r3,20(sp)
  108728:	db000617 	ldw	r12,24(sp)
  10872c:	d8c01315 	stw	r3,76(sp)
  108730:	d9000b17 	ldw	r4,44(sp)
  108734:	20038f26 	beq	r4,zero,109574 <_dtoa_r+0x1310>
  108738:	60bfffc4 	addi	r2,r12,-1
  10873c:	100490fa 	slli	r2,r2,3
  108740:	00c004b4 	movhi	r3,18
  108744:	18cd7204 	addi	r3,r3,13768
  108748:	1885883a 	add	r2,r3,r2
  10874c:	11800017 	ldw	r6,0(r2)
  108750:	11c00117 	ldw	r7,4(r2)
  108754:	d8800717 	ldw	r2,28(sp)
  108758:	0009883a 	mov	r4,zero
  10875c:	014ff834 	movhi	r5,16352
  108760:	db001615 	stw	r12,88(sp)
  108764:	15c00044 	addi	r23,r2,1
  108768:	01164cc0 	call	1164cc <__divdf3>
  10876c:	800d883a 	mov	r6,r16
  108770:	880f883a 	mov	r7,r17
  108774:	1009883a 	mov	r4,r2
  108778:	180b883a 	mov	r5,r3
  10877c:	01179600 	call	117960 <__subdf3>
  108780:	d9401017 	ldw	r5,64(sp)
  108784:	d9000f17 	ldw	r4,60(sp)
  108788:	102b883a 	mov	r21,r2
  10878c:	d8c01215 	stw	r3,72(sp)
  108790:	011825c0 	call	11825c <__fixdfsi>
  108794:	1009883a 	mov	r4,r2
  108798:	1029883a 	mov	r20,r2
  10879c:	01182dc0 	call	1182dc <__floatsidf>
  1087a0:	d9000f17 	ldw	r4,60(sp)
  1087a4:	d9401017 	ldw	r5,64(sp)
  1087a8:	100d883a 	mov	r6,r2
  1087ac:	180f883a 	mov	r7,r3
  1087b0:	01179600 	call	117960 <__subdf3>
  1087b4:	1823883a 	mov	r17,r3
  1087b8:	d8c00717 	ldw	r3,28(sp)
  1087bc:	d9401217 	ldw	r5,72(sp)
  1087c0:	a2000c04 	addi	r8,r20,48
  1087c4:	1021883a 	mov	r16,r2
  1087c8:	1a000005 	stb	r8,0(r3)
  1087cc:	800d883a 	mov	r6,r16
  1087d0:	880f883a 	mov	r7,r17
  1087d4:	a809883a 	mov	r4,r21
  1087d8:	4029883a 	mov	r20,r8
  1087dc:	0116f240 	call	116f24 <__gedf2>
  1087e0:	00841d16 	blt	zero,r2,109858 <_dtoa_r+0x15f4>
  1087e4:	800d883a 	mov	r6,r16
  1087e8:	880f883a 	mov	r7,r17
  1087ec:	0009883a 	mov	r4,zero
  1087f0:	014ffc34 	movhi	r5,16368
  1087f4:	01179600 	call	117960 <__subdf3>
  1087f8:	d9401217 	ldw	r5,72(sp)
  1087fc:	100d883a 	mov	r6,r2
  108800:	180f883a 	mov	r7,r3
  108804:	a809883a 	mov	r4,r21
  108808:	0116f240 	call	116f24 <__gedf2>
  10880c:	db001617 	ldw	r12,88(sp)
  108810:	00840e16 	blt	zero,r2,10984c <_dtoa_r+0x15e8>
  108814:	00800044 	movi	r2,1
  108818:	13006b0e 	bge	r2,r12,1089c8 <_dtoa_r+0x764>
  10881c:	d9000717 	ldw	r4,28(sp)
  108820:	dd800f15 	stw	r22,60(sp)
  108824:	dcc01015 	stw	r19,64(sp)
  108828:	2319883a 	add	r12,r4,r12
  10882c:	dcc01217 	ldw	r19,72(sp)
  108830:	602d883a 	mov	r22,r12
  108834:	dc801215 	stw	r18,72(sp)
  108838:	b825883a 	mov	r18,r23
  10883c:	00000906 	br	108864 <_dtoa_r+0x600>
  108840:	01179600 	call	117960 <__subdf3>
  108844:	a80d883a 	mov	r6,r21
  108848:	980f883a 	mov	r7,r19
  10884c:	1009883a 	mov	r4,r2
  108850:	180b883a 	mov	r5,r3
  108854:	01170000 	call	117000 <__ledf2>
  108858:	1003e816 	blt	r2,zero,1097fc <_dtoa_r+0x1598>
  10885c:	b825883a 	mov	r18,r23
  108860:	bd83e926 	beq	r23,r22,109808 <_dtoa_r+0x15a4>
  108864:	a809883a 	mov	r4,r21
  108868:	980b883a 	mov	r5,r19
  10886c:	000d883a 	mov	r6,zero
  108870:	01d00934 	movhi	r7,16420
  108874:	01170f40 	call	1170f4 <__muldf3>
  108878:	000d883a 	mov	r6,zero
  10887c:	01d00934 	movhi	r7,16420
  108880:	8009883a 	mov	r4,r16
  108884:	880b883a 	mov	r5,r17
  108888:	102b883a 	mov	r21,r2
  10888c:	1827883a 	mov	r19,r3
  108890:	01170f40 	call	1170f4 <__muldf3>
  108894:	180b883a 	mov	r5,r3
  108898:	1009883a 	mov	r4,r2
  10889c:	1821883a 	mov	r16,r3
  1088a0:	1023883a 	mov	r17,r2
  1088a4:	011825c0 	call	11825c <__fixdfsi>
  1088a8:	1009883a 	mov	r4,r2
  1088ac:	1029883a 	mov	r20,r2
  1088b0:	01182dc0 	call	1182dc <__floatsidf>
  1088b4:	8809883a 	mov	r4,r17
  1088b8:	800b883a 	mov	r5,r16
  1088bc:	100d883a 	mov	r6,r2
  1088c0:	180f883a 	mov	r7,r3
  1088c4:	01179600 	call	117960 <__subdf3>
  1088c8:	a5000c04 	addi	r20,r20,48
  1088cc:	a80d883a 	mov	r6,r21
  1088d0:	980f883a 	mov	r7,r19
  1088d4:	1009883a 	mov	r4,r2
  1088d8:	180b883a 	mov	r5,r3
  1088dc:	95000005 	stb	r20,0(r18)
  1088e0:	1021883a 	mov	r16,r2
  1088e4:	1823883a 	mov	r17,r3
  1088e8:	01170000 	call	117000 <__ledf2>
  1088ec:	bdc00044 	addi	r23,r23,1
  1088f0:	800d883a 	mov	r6,r16
  1088f4:	880f883a 	mov	r7,r17
  1088f8:	0009883a 	mov	r4,zero
  1088fc:	014ffc34 	movhi	r5,16368
  108900:	103fcf0e 	bge	r2,zero,108840 <__alt_data_end+0xfffc8840>
  108904:	d8c01317 	ldw	r3,76(sp)
  108908:	d8c00515 	stw	r3,20(sp)
  10890c:	d9400917 	ldw	r5,36(sp)
  108910:	e009883a 	mov	r4,fp
  108914:	010ba080 	call	10ba08 <_Bfree>
  108918:	d9000517 	ldw	r4,20(sp)
  10891c:	d9802317 	ldw	r6,140(sp)
  108920:	d9c02517 	ldw	r7,148(sp)
  108924:	b8000005 	stb	zero,0(r23)
  108928:	20800044 	addi	r2,r4,1
  10892c:	30800015 	stw	r2,0(r6)
  108930:	3802aa26 	beq	r7,zero,1093dc <_dtoa_r+0x1178>
  108934:	3dc00015 	stw	r23,0(r7)
  108938:	d8800717 	ldw	r2,28(sp)
  10893c:	003e7906 	br	108324 <__alt_data_end+0xfffc8324>
  108940:	00800434 	movhi	r2,16
  108944:	10bfffc4 	addi	r2,r2,-1
  108948:	88a2703a 	and	r17,r17,r2
  10894c:	883e851e 	bne	r17,zero,108364 <__alt_data_end+0xfffc8364>
  108950:	008004b4 	movhi	r2,18
  108954:	108d5304 	addi	r2,r2,13644
  108958:	003e8406 	br	10836c <__alt_data_end+0xfffc836c>
  10895c:	10c00204 	addi	r3,r2,8
  108960:	003e8706 	br	108380 <__alt_data_end+0xfffc8380>
  108964:	01400434 	movhi	r5,16
  108968:	297fffc4 	addi	r5,r5,-1
  10896c:	994a703a 	and	r5,r19,r5
  108970:	9009883a 	mov	r4,r18
  108974:	843f0044 	addi	r16,r16,-1023
  108978:	294ffc34 	orhi	r5,r5,16368
  10897c:	dd800217 	ldw	r22,8(sp)
  108980:	d8001115 	stw	zero,68(sp)
  108984:	003ea506 	br	10841c <__alt_data_end+0xfffc841c>
  108988:	008004b4 	movhi	r2,18
  10898c:	108c9704 	addi	r2,r2,12892
  108990:	003e6406 	br	108324 <__alt_data_end+0xfffc8324>
  108994:	e0001115 	stw	zero,68(fp)
  108998:	000b883a 	mov	r5,zero
  10899c:	e009883a 	mov	r4,fp
  1089a0:	010b9600 	call	10b960 <_Balloc>
  1089a4:	01bfffc4 	movi	r6,-1
  1089a8:	01c00044 	movi	r7,1
  1089ac:	d8800715 	stw	r2,28(sp)
  1089b0:	d9800c15 	stw	r6,48(sp)
  1089b4:	e0801015 	stw	r2,64(fp)
  1089b8:	d8000315 	stw	zero,12(sp)
  1089bc:	d9c00b15 	stw	r7,44(sp)
  1089c0:	d9800615 	stw	r6,24(sp)
  1089c4:	d8002215 	stw	zero,136(sp)
  1089c8:	d8800117 	ldw	r2,4(sp)
  1089cc:	10008916 	blt	r2,zero,108bf4 <_dtoa_r+0x990>
  1089d0:	d9000517 	ldw	r4,20(sp)
  1089d4:	00c00384 	movi	r3,14
  1089d8:	19008616 	blt	r3,r4,108bf4 <_dtoa_r+0x990>
  1089dc:	200490fa 	slli	r2,r4,3
  1089e0:	00c004b4 	movhi	r3,18
  1089e4:	d9802217 	ldw	r6,136(sp)
  1089e8:	18cd7204 	addi	r3,r3,13768
  1089ec:	1885883a 	add	r2,r3,r2
  1089f0:	14000017 	ldw	r16,0(r2)
  1089f4:	14400117 	ldw	r17,4(r2)
  1089f8:	30016316 	blt	r6,zero,108f88 <_dtoa_r+0xd24>
  1089fc:	800d883a 	mov	r6,r16
  108a00:	880f883a 	mov	r7,r17
  108a04:	9009883a 	mov	r4,r18
  108a08:	980b883a 	mov	r5,r19
  108a0c:	01164cc0 	call	1164cc <__divdf3>
  108a10:	180b883a 	mov	r5,r3
  108a14:	1009883a 	mov	r4,r2
  108a18:	011825c0 	call	11825c <__fixdfsi>
  108a1c:	1009883a 	mov	r4,r2
  108a20:	102b883a 	mov	r21,r2
  108a24:	01182dc0 	call	1182dc <__floatsidf>
  108a28:	800d883a 	mov	r6,r16
  108a2c:	880f883a 	mov	r7,r17
  108a30:	1009883a 	mov	r4,r2
  108a34:	180b883a 	mov	r5,r3
  108a38:	01170f40 	call	1170f4 <__muldf3>
  108a3c:	100d883a 	mov	r6,r2
  108a40:	180f883a 	mov	r7,r3
  108a44:	9009883a 	mov	r4,r18
  108a48:	980b883a 	mov	r5,r19
  108a4c:	01179600 	call	117960 <__subdf3>
  108a50:	d9c00717 	ldw	r7,28(sp)
  108a54:	1009883a 	mov	r4,r2
  108a58:	a8800c04 	addi	r2,r21,48
  108a5c:	38800005 	stb	r2,0(r7)
  108a60:	3dc00044 	addi	r23,r7,1
  108a64:	d9c00617 	ldw	r7,24(sp)
  108a68:	01800044 	movi	r6,1
  108a6c:	180b883a 	mov	r5,r3
  108a70:	2005883a 	mov	r2,r4
  108a74:	39803826 	beq	r7,r6,108b58 <_dtoa_r+0x8f4>
  108a78:	000d883a 	mov	r6,zero
  108a7c:	01d00934 	movhi	r7,16420
  108a80:	01170f40 	call	1170f4 <__muldf3>
  108a84:	000d883a 	mov	r6,zero
  108a88:	000f883a 	mov	r7,zero
  108a8c:	1009883a 	mov	r4,r2
  108a90:	180b883a 	mov	r5,r3
  108a94:	1025883a 	mov	r18,r2
  108a98:	1827883a 	mov	r19,r3
  108a9c:	0116e9c0 	call	116e9c <__eqdf2>
  108aa0:	103f9a26 	beq	r2,zero,10890c <__alt_data_end+0xfffc890c>
  108aa4:	d9c00617 	ldw	r7,24(sp)
  108aa8:	d8c00717 	ldw	r3,28(sp)
  108aac:	b829883a 	mov	r20,r23
  108ab0:	38bfffc4 	addi	r2,r7,-1
  108ab4:	18ad883a 	add	r22,r3,r2
  108ab8:	00000a06 	br	108ae4 <_dtoa_r+0x880>
  108abc:	01170f40 	call	1170f4 <__muldf3>
  108ac0:	000d883a 	mov	r6,zero
  108ac4:	000f883a 	mov	r7,zero
  108ac8:	1009883a 	mov	r4,r2
  108acc:	180b883a 	mov	r5,r3
  108ad0:	1025883a 	mov	r18,r2
  108ad4:	1827883a 	mov	r19,r3
  108ad8:	b829883a 	mov	r20,r23
  108adc:	0116e9c0 	call	116e9c <__eqdf2>
  108ae0:	103f8a26 	beq	r2,zero,10890c <__alt_data_end+0xfffc890c>
  108ae4:	800d883a 	mov	r6,r16
  108ae8:	880f883a 	mov	r7,r17
  108aec:	9009883a 	mov	r4,r18
  108af0:	980b883a 	mov	r5,r19
  108af4:	01164cc0 	call	1164cc <__divdf3>
  108af8:	180b883a 	mov	r5,r3
  108afc:	1009883a 	mov	r4,r2
  108b00:	011825c0 	call	11825c <__fixdfsi>
  108b04:	1009883a 	mov	r4,r2
  108b08:	102b883a 	mov	r21,r2
  108b0c:	01182dc0 	call	1182dc <__floatsidf>
  108b10:	800d883a 	mov	r6,r16
  108b14:	880f883a 	mov	r7,r17
  108b18:	1009883a 	mov	r4,r2
  108b1c:	180b883a 	mov	r5,r3
  108b20:	01170f40 	call	1170f4 <__muldf3>
  108b24:	100d883a 	mov	r6,r2
  108b28:	180f883a 	mov	r7,r3
  108b2c:	9009883a 	mov	r4,r18
  108b30:	980b883a 	mov	r5,r19
  108b34:	01179600 	call	117960 <__subdf3>
  108b38:	aa000c04 	addi	r8,r21,48
  108b3c:	a2000005 	stb	r8,0(r20)
  108b40:	000d883a 	mov	r6,zero
  108b44:	01d00934 	movhi	r7,16420
  108b48:	1009883a 	mov	r4,r2
  108b4c:	180b883a 	mov	r5,r3
  108b50:	a5c00044 	addi	r23,r20,1
  108b54:	b53fd91e 	bne	r22,r20,108abc <__alt_data_end+0xfffc8abc>
  108b58:	100d883a 	mov	r6,r2
  108b5c:	180f883a 	mov	r7,r3
  108b60:	1009883a 	mov	r4,r2
  108b64:	180b883a 	mov	r5,r3
  108b68:	0115c200 	call	115c20 <__adddf3>
  108b6c:	100d883a 	mov	r6,r2
  108b70:	180f883a 	mov	r7,r3
  108b74:	8009883a 	mov	r4,r16
  108b78:	880b883a 	mov	r5,r17
  108b7c:	1027883a 	mov	r19,r2
  108b80:	1825883a 	mov	r18,r3
  108b84:	01170000 	call	117000 <__ledf2>
  108b88:	10000816 	blt	r2,zero,108bac <_dtoa_r+0x948>
  108b8c:	980d883a 	mov	r6,r19
  108b90:	900f883a 	mov	r7,r18
  108b94:	8009883a 	mov	r4,r16
  108b98:	880b883a 	mov	r5,r17
  108b9c:	0116e9c0 	call	116e9c <__eqdf2>
  108ba0:	103f5a1e 	bne	r2,zero,10890c <__alt_data_end+0xfffc890c>
  108ba4:	ad40004c 	andi	r21,r21,1
  108ba8:	a83f5826 	beq	r21,zero,10890c <__alt_data_end+0xfffc890c>
  108bac:	bd3fffc3 	ldbu	r20,-1(r23)
  108bb0:	b8bfffc4 	addi	r2,r23,-1
  108bb4:	1007883a 	mov	r3,r2
  108bb8:	01400e44 	movi	r5,57
  108bbc:	d9800717 	ldw	r6,28(sp)
  108bc0:	00000506 	br	108bd8 <_dtoa_r+0x974>
  108bc4:	18ffffc4 	addi	r3,r3,-1
  108bc8:	11824726 	beq	r2,r6,1094e8 <_dtoa_r+0x1284>
  108bcc:	1d000003 	ldbu	r20,0(r3)
  108bd0:	102f883a 	mov	r23,r2
  108bd4:	10bfffc4 	addi	r2,r2,-1
  108bd8:	a1003fcc 	andi	r4,r20,255
  108bdc:	2100201c 	xori	r4,r4,128
  108be0:	213fe004 	addi	r4,r4,-128
  108be4:	217ff726 	beq	r4,r5,108bc4 <__alt_data_end+0xfffc8bc4>
  108be8:	a2000044 	addi	r8,r20,1
  108bec:	12000005 	stb	r8,0(r2)
  108bf0:	003f4606 	br	10890c <__alt_data_end+0xfffc890c>
  108bf4:	d9000b17 	ldw	r4,44(sp)
  108bf8:	2000c826 	beq	r4,zero,108f1c <_dtoa_r+0xcb8>
  108bfc:	d9800317 	ldw	r6,12(sp)
  108c00:	00c00044 	movi	r3,1
  108c04:	1980f90e 	bge	r3,r6,108fec <_dtoa_r+0xd88>
  108c08:	d8800617 	ldw	r2,24(sp)
  108c0c:	d8c00a17 	ldw	r3,40(sp)
  108c10:	157fffc4 	addi	r21,r2,-1
  108c14:	1d41f316 	blt	r3,r21,1093e4 <_dtoa_r+0x1180>
  108c18:	1d6bc83a 	sub	r21,r3,r21
  108c1c:	d9c00617 	ldw	r7,24(sp)
  108c20:	3802aa16 	blt	r7,zero,1096cc <_dtoa_r+0x1468>
  108c24:	dd000817 	ldw	r20,32(sp)
  108c28:	d8800617 	ldw	r2,24(sp)
  108c2c:	d8c00817 	ldw	r3,32(sp)
  108c30:	01400044 	movi	r5,1
  108c34:	e009883a 	mov	r4,fp
  108c38:	1887883a 	add	r3,r3,r2
  108c3c:	d8c00815 	stw	r3,32(sp)
  108c40:	b0ad883a 	add	r22,r22,r2
  108c44:	010bd940 	call	10bd94 <__i2b>
  108c48:	1023883a 	mov	r17,r2
  108c4c:	a0000826 	beq	r20,zero,108c70 <_dtoa_r+0xa0c>
  108c50:	0580070e 	bge	zero,r22,108c70 <_dtoa_r+0xa0c>
  108c54:	a005883a 	mov	r2,r20
  108c58:	b500b916 	blt	r22,r20,108f40 <_dtoa_r+0xcdc>
  108c5c:	d9000817 	ldw	r4,32(sp)
  108c60:	a0a9c83a 	sub	r20,r20,r2
  108c64:	b0adc83a 	sub	r22,r22,r2
  108c68:	2089c83a 	sub	r4,r4,r2
  108c6c:	d9000815 	stw	r4,32(sp)
  108c70:	d9800a17 	ldw	r6,40(sp)
  108c74:	0181810e 	bge	zero,r6,10927c <_dtoa_r+0x1018>
  108c78:	d9c00b17 	ldw	r7,44(sp)
  108c7c:	3800b326 	beq	r7,zero,108f4c <_dtoa_r+0xce8>
  108c80:	a800b226 	beq	r21,zero,108f4c <_dtoa_r+0xce8>
  108c84:	880b883a 	mov	r5,r17
  108c88:	a80d883a 	mov	r6,r21
  108c8c:	e009883a 	mov	r4,fp
  108c90:	010c05c0 	call	10c05c <__pow5mult>
  108c94:	d9800917 	ldw	r6,36(sp)
  108c98:	100b883a 	mov	r5,r2
  108c9c:	e009883a 	mov	r4,fp
  108ca0:	1023883a 	mov	r17,r2
  108ca4:	010bdd00 	call	10bdd0 <__multiply>
  108ca8:	1021883a 	mov	r16,r2
  108cac:	d8800a17 	ldw	r2,40(sp)
  108cb0:	d9400917 	ldw	r5,36(sp)
  108cb4:	e009883a 	mov	r4,fp
  108cb8:	1545c83a 	sub	r2,r2,r21
  108cbc:	d8800a15 	stw	r2,40(sp)
  108cc0:	010ba080 	call	10ba08 <_Bfree>
  108cc4:	d8c00a17 	ldw	r3,40(sp)
  108cc8:	18009f1e 	bne	r3,zero,108f48 <_dtoa_r+0xce4>
  108ccc:	05c00044 	movi	r23,1
  108cd0:	e009883a 	mov	r4,fp
  108cd4:	b80b883a 	mov	r5,r23
  108cd8:	010bd940 	call	10bd94 <__i2b>
  108cdc:	d9000d17 	ldw	r4,52(sp)
  108ce0:	102b883a 	mov	r21,r2
  108ce4:	2000ce26 	beq	r4,zero,109020 <_dtoa_r+0xdbc>
  108ce8:	200d883a 	mov	r6,r4
  108cec:	100b883a 	mov	r5,r2
  108cf0:	e009883a 	mov	r4,fp
  108cf4:	010c05c0 	call	10c05c <__pow5mult>
  108cf8:	d9800317 	ldw	r6,12(sp)
  108cfc:	102b883a 	mov	r21,r2
  108d00:	b981810e 	bge	r23,r6,109308 <_dtoa_r+0x10a4>
  108d04:	0027883a 	mov	r19,zero
  108d08:	a8800417 	ldw	r2,16(r21)
  108d0c:	05c00804 	movi	r23,32
  108d10:	10800104 	addi	r2,r2,4
  108d14:	1085883a 	add	r2,r2,r2
  108d18:	1085883a 	add	r2,r2,r2
  108d1c:	a885883a 	add	r2,r21,r2
  108d20:	11000017 	ldw	r4,0(r2)
  108d24:	010bc7c0 	call	10bc7c <__hi0bits>
  108d28:	b885c83a 	sub	r2,r23,r2
  108d2c:	1585883a 	add	r2,r2,r22
  108d30:	108007cc 	andi	r2,r2,31
  108d34:	1000b326 	beq	r2,zero,109004 <_dtoa_r+0xda0>
  108d38:	00c00804 	movi	r3,32
  108d3c:	1887c83a 	sub	r3,r3,r2
  108d40:	01000104 	movi	r4,4
  108d44:	20c2cd0e 	bge	r4,r3,10987c <_dtoa_r+0x1618>
  108d48:	00c00704 	movi	r3,28
  108d4c:	1885c83a 	sub	r2,r3,r2
  108d50:	d8c00817 	ldw	r3,32(sp)
  108d54:	a0a9883a 	add	r20,r20,r2
  108d58:	b0ad883a 	add	r22,r22,r2
  108d5c:	1887883a 	add	r3,r3,r2
  108d60:	d8c00815 	stw	r3,32(sp)
  108d64:	d9800817 	ldw	r6,32(sp)
  108d68:	0180040e 	bge	zero,r6,108d7c <_dtoa_r+0xb18>
  108d6c:	800b883a 	mov	r5,r16
  108d70:	e009883a 	mov	r4,fp
  108d74:	010c19c0 	call	10c19c <__lshift>
  108d78:	1021883a 	mov	r16,r2
  108d7c:	0580050e 	bge	zero,r22,108d94 <_dtoa_r+0xb30>
  108d80:	a80b883a 	mov	r5,r21
  108d84:	b00d883a 	mov	r6,r22
  108d88:	e009883a 	mov	r4,fp
  108d8c:	010c19c0 	call	10c19c <__lshift>
  108d90:	102b883a 	mov	r21,r2
  108d94:	d9c00e17 	ldw	r7,56(sp)
  108d98:	3801211e 	bne	r7,zero,109220 <_dtoa_r+0xfbc>
  108d9c:	d9800617 	ldw	r6,24(sp)
  108da0:	0181380e 	bge	zero,r6,109284 <_dtoa_r+0x1020>
  108da4:	d8c00b17 	ldw	r3,44(sp)
  108da8:	1800ab1e 	bne	r3,zero,109058 <_dtoa_r+0xdf4>
  108dac:	dc800717 	ldw	r18,28(sp)
  108db0:	dcc00617 	ldw	r19,24(sp)
  108db4:	9029883a 	mov	r20,r18
  108db8:	00000206 	br	108dc4 <_dtoa_r+0xb60>
  108dbc:	010ba300 	call	10ba30 <__multadd>
  108dc0:	1021883a 	mov	r16,r2
  108dc4:	a80b883a 	mov	r5,r21
  108dc8:	8009883a 	mov	r4,r16
  108dcc:	010803c0 	call	10803c <quorem>
  108dd0:	10800c04 	addi	r2,r2,48
  108dd4:	90800005 	stb	r2,0(r18)
  108dd8:	94800044 	addi	r18,r18,1
  108ddc:	9507c83a 	sub	r3,r18,r20
  108de0:	000f883a 	mov	r7,zero
  108de4:	01800284 	movi	r6,10
  108de8:	800b883a 	mov	r5,r16
  108dec:	e009883a 	mov	r4,fp
  108df0:	1cfff216 	blt	r3,r19,108dbc <__alt_data_end+0xfffc8dbc>
  108df4:	1011883a 	mov	r8,r2
  108df8:	d8800617 	ldw	r2,24(sp)
  108dfc:	0082370e 	bge	zero,r2,1096dc <_dtoa_r+0x1478>
  108e00:	d9000717 	ldw	r4,28(sp)
  108e04:	0025883a 	mov	r18,zero
  108e08:	20af883a 	add	r23,r4,r2
  108e0c:	01800044 	movi	r6,1
  108e10:	800b883a 	mov	r5,r16
  108e14:	e009883a 	mov	r4,fp
  108e18:	da001715 	stw	r8,92(sp)
  108e1c:	010c19c0 	call	10c19c <__lshift>
  108e20:	a80b883a 	mov	r5,r21
  108e24:	1009883a 	mov	r4,r2
  108e28:	d8800915 	stw	r2,36(sp)
  108e2c:	010c2e40 	call	10c2e4 <__mcmp>
  108e30:	da001717 	ldw	r8,92(sp)
  108e34:	0081800e 	bge	zero,r2,109438 <_dtoa_r+0x11d4>
  108e38:	b93fffc3 	ldbu	r4,-1(r23)
  108e3c:	b8bfffc4 	addi	r2,r23,-1
  108e40:	1007883a 	mov	r3,r2
  108e44:	01800e44 	movi	r6,57
  108e48:	d9c00717 	ldw	r7,28(sp)
  108e4c:	00000506 	br	108e64 <_dtoa_r+0xc00>
  108e50:	18ffffc4 	addi	r3,r3,-1
  108e54:	11c12326 	beq	r2,r7,1092e4 <_dtoa_r+0x1080>
  108e58:	19000003 	ldbu	r4,0(r3)
  108e5c:	102f883a 	mov	r23,r2
  108e60:	10bfffc4 	addi	r2,r2,-1
  108e64:	21403fcc 	andi	r5,r4,255
  108e68:	2940201c 	xori	r5,r5,128
  108e6c:	297fe004 	addi	r5,r5,-128
  108e70:	29bff726 	beq	r5,r6,108e50 <__alt_data_end+0xfffc8e50>
  108e74:	21000044 	addi	r4,r4,1
  108e78:	11000005 	stb	r4,0(r2)
  108e7c:	a80b883a 	mov	r5,r21
  108e80:	e009883a 	mov	r4,fp
  108e84:	010ba080 	call	10ba08 <_Bfree>
  108e88:	883ea026 	beq	r17,zero,10890c <__alt_data_end+0xfffc890c>
  108e8c:	90000426 	beq	r18,zero,108ea0 <_dtoa_r+0xc3c>
  108e90:	94400326 	beq	r18,r17,108ea0 <_dtoa_r+0xc3c>
  108e94:	900b883a 	mov	r5,r18
  108e98:	e009883a 	mov	r4,fp
  108e9c:	010ba080 	call	10ba08 <_Bfree>
  108ea0:	880b883a 	mov	r5,r17
  108ea4:	e009883a 	mov	r4,fp
  108ea8:	010ba080 	call	10ba08 <_Bfree>
  108eac:	003e9706 	br	10890c <__alt_data_end+0xfffc890c>
  108eb0:	01800044 	movi	r6,1
  108eb4:	d9800e15 	stw	r6,56(sp)
  108eb8:	003d9606 	br	108514 <__alt_data_end+0xfffc8514>
  108ebc:	d8800817 	ldw	r2,32(sp)
  108ec0:	d8c00517 	ldw	r3,20(sp)
  108ec4:	d8000d15 	stw	zero,52(sp)
  108ec8:	10c5c83a 	sub	r2,r2,r3
  108ecc:	00c9c83a 	sub	r4,zero,r3
  108ed0:	d8800815 	stw	r2,32(sp)
  108ed4:	d9000a15 	stw	r4,40(sp)
  108ed8:	003d9706 	br	108538 <__alt_data_end+0xfffc8538>
  108edc:	05adc83a 	sub	r22,zero,r22
  108ee0:	dd800815 	stw	r22,32(sp)
  108ee4:	002d883a 	mov	r22,zero
  108ee8:	003d8e06 	br	108524 <__alt_data_end+0xfffc8524>
  108eec:	d9000517 	ldw	r4,20(sp)
  108ef0:	01182dc0 	call	1182dc <__floatsidf>
  108ef4:	100d883a 	mov	r6,r2
  108ef8:	180f883a 	mov	r7,r3
  108efc:	a009883a 	mov	r4,r20
  108f00:	880b883a 	mov	r5,r17
  108f04:	0116e9c0 	call	116e9c <__eqdf2>
  108f08:	103d7126 	beq	r2,zero,1084d0 <__alt_data_end+0xfffc84d0>
  108f0c:	d9c00517 	ldw	r7,20(sp)
  108f10:	39ffffc4 	addi	r7,r7,-1
  108f14:	d9c00515 	stw	r7,20(sp)
  108f18:	003d6d06 	br	1084d0 <__alt_data_end+0xfffc84d0>
  108f1c:	dd400a17 	ldw	r21,40(sp)
  108f20:	dd000817 	ldw	r20,32(sp)
  108f24:	0023883a 	mov	r17,zero
  108f28:	003f4806 	br	108c4c <__alt_data_end+0xfffc8c4c>
  108f2c:	10e3c83a 	sub	r17,r2,r3
  108f30:	9448983a 	sll	r4,r18,r17
  108f34:	003d3206 	br	108400 <__alt_data_end+0xfffc8400>
  108f38:	d8000e15 	stw	zero,56(sp)
  108f3c:	003d7506 	br	108514 <__alt_data_end+0xfffc8514>
  108f40:	b005883a 	mov	r2,r22
  108f44:	003f4506 	br	108c5c <__alt_data_end+0xfffc8c5c>
  108f48:	dc000915 	stw	r16,36(sp)
  108f4c:	d9800a17 	ldw	r6,40(sp)
  108f50:	d9400917 	ldw	r5,36(sp)
  108f54:	e009883a 	mov	r4,fp
  108f58:	010c05c0 	call	10c05c <__pow5mult>
  108f5c:	1021883a 	mov	r16,r2
  108f60:	003f5a06 	br	108ccc <__alt_data_end+0xfffc8ccc>
  108f64:	01c00044 	movi	r7,1
  108f68:	d9c00b15 	stw	r7,44(sp)
  108f6c:	d8802217 	ldw	r2,136(sp)
  108f70:	0081280e 	bge	zero,r2,109414 <_dtoa_r+0x11b0>
  108f74:	100d883a 	mov	r6,r2
  108f78:	1021883a 	mov	r16,r2
  108f7c:	d8800c15 	stw	r2,48(sp)
  108f80:	d8800615 	stw	r2,24(sp)
  108f84:	003d8806 	br	1085a8 <__alt_data_end+0xfffc85a8>
  108f88:	d8800617 	ldw	r2,24(sp)
  108f8c:	00be9b16 	blt	zero,r2,1089fc <__alt_data_end+0xfffc89fc>
  108f90:	10010f1e 	bne	r2,zero,1093d0 <_dtoa_r+0x116c>
  108f94:	880b883a 	mov	r5,r17
  108f98:	000d883a 	mov	r6,zero
  108f9c:	01d00534 	movhi	r7,16404
  108fa0:	8009883a 	mov	r4,r16
  108fa4:	01170f40 	call	1170f4 <__muldf3>
  108fa8:	900d883a 	mov	r6,r18
  108fac:	980f883a 	mov	r7,r19
  108fb0:	1009883a 	mov	r4,r2
  108fb4:	180b883a 	mov	r5,r3
  108fb8:	0116f240 	call	116f24 <__gedf2>
  108fbc:	002b883a 	mov	r21,zero
  108fc0:	0023883a 	mov	r17,zero
  108fc4:	1000bf16 	blt	r2,zero,1092c4 <_dtoa_r+0x1060>
  108fc8:	d9802217 	ldw	r6,136(sp)
  108fcc:	ddc00717 	ldw	r23,28(sp)
  108fd0:	018c303a 	nor	r6,zero,r6
  108fd4:	d9800515 	stw	r6,20(sp)
  108fd8:	a80b883a 	mov	r5,r21
  108fdc:	e009883a 	mov	r4,fp
  108fe0:	010ba080 	call	10ba08 <_Bfree>
  108fe4:	883e4926 	beq	r17,zero,10890c <__alt_data_end+0xfffc890c>
  108fe8:	003fad06 	br	108ea0 <__alt_data_end+0xfffc8ea0>
  108fec:	d9c01117 	ldw	r7,68(sp)
  108ff0:	3801bc26 	beq	r7,zero,1096e4 <_dtoa_r+0x1480>
  108ff4:	10810cc4 	addi	r2,r2,1075
  108ff8:	dd400a17 	ldw	r21,40(sp)
  108ffc:	dd000817 	ldw	r20,32(sp)
  109000:	003f0a06 	br	108c2c <__alt_data_end+0xfffc8c2c>
  109004:	00800704 	movi	r2,28
  109008:	d9000817 	ldw	r4,32(sp)
  10900c:	a0a9883a 	add	r20,r20,r2
  109010:	b0ad883a 	add	r22,r22,r2
  109014:	2089883a 	add	r4,r4,r2
  109018:	d9000815 	stw	r4,32(sp)
  10901c:	003f5106 	br	108d64 <__alt_data_end+0xfffc8d64>
  109020:	d8c00317 	ldw	r3,12(sp)
  109024:	b8c1fc0e 	bge	r23,r3,109818 <_dtoa_r+0x15b4>
  109028:	0027883a 	mov	r19,zero
  10902c:	b805883a 	mov	r2,r23
  109030:	003f3e06 	br	108d2c <__alt_data_end+0xfffc8d2c>
  109034:	880b883a 	mov	r5,r17
  109038:	e009883a 	mov	r4,fp
  10903c:	000f883a 	mov	r7,zero
  109040:	01800284 	movi	r6,10
  109044:	010ba300 	call	10ba30 <__multadd>
  109048:	d9000c17 	ldw	r4,48(sp)
  10904c:	1023883a 	mov	r17,r2
  109050:	0102040e 	bge	zero,r4,109864 <_dtoa_r+0x1600>
  109054:	d9000615 	stw	r4,24(sp)
  109058:	0500050e 	bge	zero,r20,109070 <_dtoa_r+0xe0c>
  10905c:	880b883a 	mov	r5,r17
  109060:	a00d883a 	mov	r6,r20
  109064:	e009883a 	mov	r4,fp
  109068:	010c19c0 	call	10c19c <__lshift>
  10906c:	1023883a 	mov	r17,r2
  109070:	9801241e 	bne	r19,zero,109504 <_dtoa_r+0x12a0>
  109074:	8829883a 	mov	r20,r17
  109078:	d9000617 	ldw	r4,24(sp)
  10907c:	dcc00717 	ldw	r19,28(sp)
  109080:	9480004c 	andi	r18,r18,1
  109084:	20bfffc4 	addi	r2,r4,-1
  109088:	9885883a 	add	r2,r19,r2
  10908c:	d8800415 	stw	r2,16(sp)
  109090:	dc800615 	stw	r18,24(sp)
  109094:	a80b883a 	mov	r5,r21
  109098:	8009883a 	mov	r4,r16
  10909c:	010803c0 	call	10803c <quorem>
  1090a0:	880b883a 	mov	r5,r17
  1090a4:	8009883a 	mov	r4,r16
  1090a8:	102f883a 	mov	r23,r2
  1090ac:	010c2e40 	call	10c2e4 <__mcmp>
  1090b0:	a80b883a 	mov	r5,r21
  1090b4:	a00d883a 	mov	r6,r20
  1090b8:	e009883a 	mov	r4,fp
  1090bc:	102d883a 	mov	r22,r2
  1090c0:	010c3440 	call	10c344 <__mdiff>
  1090c4:	1007883a 	mov	r3,r2
  1090c8:	10800317 	ldw	r2,12(r2)
  1090cc:	bc800c04 	addi	r18,r23,48
  1090d0:	180b883a 	mov	r5,r3
  1090d4:	10004e1e 	bne	r2,zero,109210 <_dtoa_r+0xfac>
  1090d8:	8009883a 	mov	r4,r16
  1090dc:	d8c01615 	stw	r3,88(sp)
  1090e0:	010c2e40 	call	10c2e4 <__mcmp>
  1090e4:	d8c01617 	ldw	r3,88(sp)
  1090e8:	e009883a 	mov	r4,fp
  1090ec:	d8801615 	stw	r2,88(sp)
  1090f0:	180b883a 	mov	r5,r3
  1090f4:	010ba080 	call	10ba08 <_Bfree>
  1090f8:	d8801617 	ldw	r2,88(sp)
  1090fc:	1000041e 	bne	r2,zero,109110 <_dtoa_r+0xeac>
  109100:	d9800317 	ldw	r6,12(sp)
  109104:	3000021e 	bne	r6,zero,109110 <_dtoa_r+0xeac>
  109108:	d8c00617 	ldw	r3,24(sp)
  10910c:	18003726 	beq	r3,zero,1091ec <_dtoa_r+0xf88>
  109110:	b0002016 	blt	r22,zero,109194 <_dtoa_r+0xf30>
  109114:	b000041e 	bne	r22,zero,109128 <_dtoa_r+0xec4>
  109118:	d9000317 	ldw	r4,12(sp)
  10911c:	2000021e 	bne	r4,zero,109128 <_dtoa_r+0xec4>
  109120:	d8c00617 	ldw	r3,24(sp)
  109124:	18001b26 	beq	r3,zero,109194 <_dtoa_r+0xf30>
  109128:	00810716 	blt	zero,r2,109548 <_dtoa_r+0x12e4>
  10912c:	d8c00417 	ldw	r3,16(sp)
  109130:	9d800044 	addi	r22,r19,1
  109134:	9c800005 	stb	r18,0(r19)
  109138:	b02f883a 	mov	r23,r22
  10913c:	98c10626 	beq	r19,r3,109558 <_dtoa_r+0x12f4>
  109140:	800b883a 	mov	r5,r16
  109144:	000f883a 	mov	r7,zero
  109148:	01800284 	movi	r6,10
  10914c:	e009883a 	mov	r4,fp
  109150:	010ba300 	call	10ba30 <__multadd>
  109154:	1021883a 	mov	r16,r2
  109158:	000f883a 	mov	r7,zero
  10915c:	01800284 	movi	r6,10
  109160:	880b883a 	mov	r5,r17
  109164:	e009883a 	mov	r4,fp
  109168:	8d002526 	beq	r17,r20,109200 <_dtoa_r+0xf9c>
  10916c:	010ba300 	call	10ba30 <__multadd>
  109170:	a00b883a 	mov	r5,r20
  109174:	000f883a 	mov	r7,zero
  109178:	01800284 	movi	r6,10
  10917c:	e009883a 	mov	r4,fp
  109180:	1023883a 	mov	r17,r2
  109184:	010ba300 	call	10ba30 <__multadd>
  109188:	1029883a 	mov	r20,r2
  10918c:	b027883a 	mov	r19,r22
  109190:	003fc006 	br	109094 <__alt_data_end+0xfffc9094>
  109194:	9011883a 	mov	r8,r18
  109198:	00800e0e 	bge	zero,r2,1091d4 <_dtoa_r+0xf70>
  10919c:	800b883a 	mov	r5,r16
  1091a0:	01800044 	movi	r6,1
  1091a4:	e009883a 	mov	r4,fp
  1091a8:	da001715 	stw	r8,92(sp)
  1091ac:	010c19c0 	call	10c19c <__lshift>
  1091b0:	a80b883a 	mov	r5,r21
  1091b4:	1009883a 	mov	r4,r2
  1091b8:	1021883a 	mov	r16,r2
  1091bc:	010c2e40 	call	10c2e4 <__mcmp>
  1091c0:	da001717 	ldw	r8,92(sp)
  1091c4:	0081960e 	bge	zero,r2,109820 <_dtoa_r+0x15bc>
  1091c8:	00800e44 	movi	r2,57
  1091cc:	40817026 	beq	r8,r2,109790 <_dtoa_r+0x152c>
  1091d0:	ba000c44 	addi	r8,r23,49
  1091d4:	8825883a 	mov	r18,r17
  1091d8:	9dc00044 	addi	r23,r19,1
  1091dc:	9a000005 	stb	r8,0(r19)
  1091e0:	a023883a 	mov	r17,r20
  1091e4:	dc000915 	stw	r16,36(sp)
  1091e8:	003f2406 	br	108e7c <__alt_data_end+0xfffc8e7c>
  1091ec:	00800e44 	movi	r2,57
  1091f0:	9011883a 	mov	r8,r18
  1091f4:	90816626 	beq	r18,r2,109790 <_dtoa_r+0x152c>
  1091f8:	05bff516 	blt	zero,r22,1091d0 <__alt_data_end+0xfffc91d0>
  1091fc:	003ff506 	br	1091d4 <__alt_data_end+0xfffc91d4>
  109200:	010ba300 	call	10ba30 <__multadd>
  109204:	1023883a 	mov	r17,r2
  109208:	1029883a 	mov	r20,r2
  10920c:	003fdf06 	br	10918c <__alt_data_end+0xfffc918c>
  109210:	e009883a 	mov	r4,fp
  109214:	010ba080 	call	10ba08 <_Bfree>
  109218:	00800044 	movi	r2,1
  10921c:	003fbc06 	br	109110 <__alt_data_end+0xfffc9110>
  109220:	a80b883a 	mov	r5,r21
  109224:	8009883a 	mov	r4,r16
  109228:	010c2e40 	call	10c2e4 <__mcmp>
  10922c:	103edb0e 	bge	r2,zero,108d9c <__alt_data_end+0xfffc8d9c>
  109230:	800b883a 	mov	r5,r16
  109234:	000f883a 	mov	r7,zero
  109238:	01800284 	movi	r6,10
  10923c:	e009883a 	mov	r4,fp
  109240:	010ba300 	call	10ba30 <__multadd>
  109244:	1021883a 	mov	r16,r2
  109248:	d8800517 	ldw	r2,20(sp)
  10924c:	d8c00b17 	ldw	r3,44(sp)
  109250:	10bfffc4 	addi	r2,r2,-1
  109254:	d8800515 	stw	r2,20(sp)
  109258:	183f761e 	bne	r3,zero,109034 <__alt_data_end+0xfffc9034>
  10925c:	d9000c17 	ldw	r4,48(sp)
  109260:	0101730e 	bge	zero,r4,109830 <_dtoa_r+0x15cc>
  109264:	d9000615 	stw	r4,24(sp)
  109268:	003ed006 	br	108dac <__alt_data_end+0xfffc8dac>
  10926c:	00800084 	movi	r2,2
  109270:	3081861e 	bne	r6,r2,10988c <_dtoa_r+0x1628>
  109274:	d8000b15 	stw	zero,44(sp)
  109278:	003f3c06 	br	108f6c <__alt_data_end+0xfffc8f6c>
  10927c:	dc000917 	ldw	r16,36(sp)
  109280:	003e9206 	br	108ccc <__alt_data_end+0xfffc8ccc>
  109284:	d9c00317 	ldw	r7,12(sp)
  109288:	00800084 	movi	r2,2
  10928c:	11fec50e 	bge	r2,r7,108da4 <__alt_data_end+0xfffc8da4>
  109290:	d9000617 	ldw	r4,24(sp)
  109294:	20013c1e 	bne	r4,zero,109788 <_dtoa_r+0x1524>
  109298:	a80b883a 	mov	r5,r21
  10929c:	000f883a 	mov	r7,zero
  1092a0:	01800144 	movi	r6,5
  1092a4:	e009883a 	mov	r4,fp
  1092a8:	010ba300 	call	10ba30 <__multadd>
  1092ac:	100b883a 	mov	r5,r2
  1092b0:	8009883a 	mov	r4,r16
  1092b4:	102b883a 	mov	r21,r2
  1092b8:	010c2e40 	call	10c2e4 <__mcmp>
  1092bc:	dc000915 	stw	r16,36(sp)
  1092c0:	00bf410e 	bge	zero,r2,108fc8 <__alt_data_end+0xfffc8fc8>
  1092c4:	d9c00717 	ldw	r7,28(sp)
  1092c8:	00800c44 	movi	r2,49
  1092cc:	38800005 	stb	r2,0(r7)
  1092d0:	d8800517 	ldw	r2,20(sp)
  1092d4:	3dc00044 	addi	r23,r7,1
  1092d8:	10800044 	addi	r2,r2,1
  1092dc:	d8800515 	stw	r2,20(sp)
  1092e0:	003f3d06 	br	108fd8 <__alt_data_end+0xfffc8fd8>
  1092e4:	d9800517 	ldw	r6,20(sp)
  1092e8:	d9c00717 	ldw	r7,28(sp)
  1092ec:	00800c44 	movi	r2,49
  1092f0:	31800044 	addi	r6,r6,1
  1092f4:	d9800515 	stw	r6,20(sp)
  1092f8:	38800005 	stb	r2,0(r7)
  1092fc:	003edf06 	br	108e7c <__alt_data_end+0xfffc8e7c>
  109300:	d8000b15 	stw	zero,44(sp)
  109304:	003c9f06 	br	108584 <__alt_data_end+0xfffc8584>
  109308:	903e7e1e 	bne	r18,zero,108d04 <__alt_data_end+0xfffc8d04>
  10930c:	00800434 	movhi	r2,16
  109310:	10bfffc4 	addi	r2,r2,-1
  109314:	9884703a 	and	r2,r19,r2
  109318:	1000ea1e 	bne	r2,zero,1096c4 <_dtoa_r+0x1460>
  10931c:	9cdffc2c 	andhi	r19,r19,32752
  109320:	9800e826 	beq	r19,zero,1096c4 <_dtoa_r+0x1460>
  109324:	d9c00817 	ldw	r7,32(sp)
  109328:	b5800044 	addi	r22,r22,1
  10932c:	04c00044 	movi	r19,1
  109330:	39c00044 	addi	r7,r7,1
  109334:	d9c00815 	stw	r7,32(sp)
  109338:	d8800d17 	ldw	r2,52(sp)
  10933c:	103e721e 	bne	r2,zero,108d08 <__alt_data_end+0xfffc8d08>
  109340:	00800044 	movi	r2,1
  109344:	003e7906 	br	108d2c <__alt_data_end+0xfffc8d2c>
  109348:	8009883a 	mov	r4,r16
  10934c:	01182dc0 	call	1182dc <__floatsidf>
  109350:	d9800f17 	ldw	r6,60(sp)
  109354:	d9c01017 	ldw	r7,64(sp)
  109358:	1009883a 	mov	r4,r2
  10935c:	180b883a 	mov	r5,r3
  109360:	01170f40 	call	1170f4 <__muldf3>
  109364:	000d883a 	mov	r6,zero
  109368:	01d00734 	movhi	r7,16412
  10936c:	1009883a 	mov	r4,r2
  109370:	180b883a 	mov	r5,r3
  109374:	0115c200 	call	115c20 <__adddf3>
  109378:	047f3034 	movhi	r17,64704
  10937c:	1021883a 	mov	r16,r2
  109380:	1c63883a 	add	r17,r3,r17
  109384:	d9000f17 	ldw	r4,60(sp)
  109388:	d9401017 	ldw	r5,64(sp)
  10938c:	000d883a 	mov	r6,zero
  109390:	01d00534 	movhi	r7,16404
  109394:	01179600 	call	117960 <__subdf3>
  109398:	800d883a 	mov	r6,r16
  10939c:	880f883a 	mov	r7,r17
  1093a0:	1009883a 	mov	r4,r2
  1093a4:	180b883a 	mov	r5,r3
  1093a8:	102b883a 	mov	r21,r2
  1093ac:	1829883a 	mov	r20,r3
  1093b0:	0116f240 	call	116f24 <__gedf2>
  1093b4:	00806c16 	blt	zero,r2,109568 <_dtoa_r+0x1304>
  1093b8:	89e0003c 	xorhi	r7,r17,32768
  1093bc:	800d883a 	mov	r6,r16
  1093c0:	a809883a 	mov	r4,r21
  1093c4:	a00b883a 	mov	r5,r20
  1093c8:	01170000 	call	117000 <__ledf2>
  1093cc:	103d7e0e 	bge	r2,zero,1089c8 <__alt_data_end+0xfffc89c8>
  1093d0:	002b883a 	mov	r21,zero
  1093d4:	0023883a 	mov	r17,zero
  1093d8:	003efb06 	br	108fc8 <__alt_data_end+0xfffc8fc8>
  1093dc:	d8800717 	ldw	r2,28(sp)
  1093e0:	003bd006 	br	108324 <__alt_data_end+0xfffc8324>
  1093e4:	d9000a17 	ldw	r4,40(sp)
  1093e8:	d9800d17 	ldw	r6,52(sp)
  1093ec:	dd400a15 	stw	r21,40(sp)
  1093f0:	a905c83a 	sub	r2,r21,r4
  1093f4:	308d883a 	add	r6,r6,r2
  1093f8:	d9800d15 	stw	r6,52(sp)
  1093fc:	002b883a 	mov	r21,zero
  109400:	003e0606 	br	108c1c <__alt_data_end+0xfffc8c1c>
  109404:	9023883a 	mov	r17,r18
  109408:	9829883a 	mov	r20,r19
  10940c:	04000084 	movi	r16,2
  109410:	003c9206 	br	10865c <__alt_data_end+0xfffc865c>
  109414:	04000044 	movi	r16,1
  109418:	dc000c15 	stw	r16,48(sp)
  10941c:	dc000615 	stw	r16,24(sp)
  109420:	dc002215 	stw	r16,136(sp)
  109424:	e0001115 	stw	zero,68(fp)
  109428:	000b883a 	mov	r5,zero
  10942c:	003c6906 	br	1085d4 <__alt_data_end+0xfffc85d4>
  109430:	3021883a 	mov	r16,r6
  109434:	003ffb06 	br	109424 <__alt_data_end+0xfffc9424>
  109438:	1000021e 	bne	r2,zero,109444 <_dtoa_r+0x11e0>
  10943c:	4200004c 	andi	r8,r8,1
  109440:	403e7d1e 	bne	r8,zero,108e38 <__alt_data_end+0xfffc8e38>
  109444:	01000c04 	movi	r4,48
  109448:	00000106 	br	109450 <_dtoa_r+0x11ec>
  10944c:	102f883a 	mov	r23,r2
  109450:	b8bfffc4 	addi	r2,r23,-1
  109454:	10c00007 	ldb	r3,0(r2)
  109458:	193ffc26 	beq	r3,r4,10944c <__alt_data_end+0xfffc944c>
  10945c:	003e8706 	br	108e7c <__alt_data_end+0xfffc8e7c>
  109460:	d8800517 	ldw	r2,20(sp)
  109464:	00a3c83a 	sub	r17,zero,r2
  109468:	8800a426 	beq	r17,zero,1096fc <_dtoa_r+0x1498>
  10946c:	888003cc 	andi	r2,r17,15
  109470:	100490fa 	slli	r2,r2,3
  109474:	00c004b4 	movhi	r3,18
  109478:	18cd7204 	addi	r3,r3,13768
  10947c:	1885883a 	add	r2,r3,r2
  109480:	11800017 	ldw	r6,0(r2)
  109484:	11c00117 	ldw	r7,4(r2)
  109488:	9009883a 	mov	r4,r18
  10948c:	980b883a 	mov	r5,r19
  109490:	8823d13a 	srai	r17,r17,4
  109494:	01170f40 	call	1170f4 <__muldf3>
  109498:	d8800f15 	stw	r2,60(sp)
  10949c:	d8c01015 	stw	r3,64(sp)
  1094a0:	8800e826 	beq	r17,zero,109844 <_dtoa_r+0x15e0>
  1094a4:	050004b4 	movhi	r20,18
  1094a8:	a50d6804 	addi	r20,r20,13728
  1094ac:	04000084 	movi	r16,2
  1094b0:	8980004c 	andi	r6,r17,1
  1094b4:	1009883a 	mov	r4,r2
  1094b8:	8823d07a 	srai	r17,r17,1
  1094bc:	180b883a 	mov	r5,r3
  1094c0:	30000426 	beq	r6,zero,1094d4 <_dtoa_r+0x1270>
  1094c4:	a1800017 	ldw	r6,0(r20)
  1094c8:	a1c00117 	ldw	r7,4(r20)
  1094cc:	84000044 	addi	r16,r16,1
  1094d0:	01170f40 	call	1170f4 <__muldf3>
  1094d4:	a5000204 	addi	r20,r20,8
  1094d8:	883ff51e 	bne	r17,zero,1094b0 <__alt_data_end+0xfffc94b0>
  1094dc:	d8800f15 	stw	r2,60(sp)
  1094e0:	d8c01015 	stw	r3,64(sp)
  1094e4:	003c7606 	br	1086c0 <__alt_data_end+0xfffc86c0>
  1094e8:	00c00c04 	movi	r3,48
  1094ec:	10c00005 	stb	r3,0(r2)
  1094f0:	d8c00517 	ldw	r3,20(sp)
  1094f4:	bd3fffc3 	ldbu	r20,-1(r23)
  1094f8:	18c00044 	addi	r3,r3,1
  1094fc:	d8c00515 	stw	r3,20(sp)
  109500:	003db906 	br	108be8 <__alt_data_end+0xfffc8be8>
  109504:	89400117 	ldw	r5,4(r17)
  109508:	e009883a 	mov	r4,fp
  10950c:	010b9600 	call	10b960 <_Balloc>
  109510:	89800417 	ldw	r6,16(r17)
  109514:	89400304 	addi	r5,r17,12
  109518:	11000304 	addi	r4,r2,12
  10951c:	31800084 	addi	r6,r6,2
  109520:	318d883a 	add	r6,r6,r6
  109524:	318d883a 	add	r6,r6,r6
  109528:	1027883a 	mov	r19,r2
  10952c:	010157c0 	call	10157c <memcpy>
  109530:	01800044 	movi	r6,1
  109534:	980b883a 	mov	r5,r19
  109538:	e009883a 	mov	r4,fp
  10953c:	010c19c0 	call	10c19c <__lshift>
  109540:	1029883a 	mov	r20,r2
  109544:	003ecc06 	br	109078 <__alt_data_end+0xfffc9078>
  109548:	00800e44 	movi	r2,57
  10954c:	90809026 	beq	r18,r2,109790 <_dtoa_r+0x152c>
  109550:	92000044 	addi	r8,r18,1
  109554:	003f1f06 	br	1091d4 <__alt_data_end+0xfffc91d4>
  109558:	9011883a 	mov	r8,r18
  10955c:	8825883a 	mov	r18,r17
  109560:	a023883a 	mov	r17,r20
  109564:	003e2906 	br	108e0c <__alt_data_end+0xfffc8e0c>
  109568:	002b883a 	mov	r21,zero
  10956c:	0023883a 	mov	r17,zero
  109570:	003f5406 	br	1092c4 <__alt_data_end+0xfffc92c4>
  109574:	61bfffc4 	addi	r6,r12,-1
  109578:	300490fa 	slli	r2,r6,3
  10957c:	00c004b4 	movhi	r3,18
  109580:	18cd7204 	addi	r3,r3,13768
  109584:	1885883a 	add	r2,r3,r2
  109588:	11000017 	ldw	r4,0(r2)
  10958c:	11400117 	ldw	r5,4(r2)
  109590:	d8800717 	ldw	r2,28(sp)
  109594:	880f883a 	mov	r7,r17
  109598:	d9801215 	stw	r6,72(sp)
  10959c:	800d883a 	mov	r6,r16
  1095a0:	db001615 	stw	r12,88(sp)
  1095a4:	15c00044 	addi	r23,r2,1
  1095a8:	01170f40 	call	1170f4 <__muldf3>
  1095ac:	d9401017 	ldw	r5,64(sp)
  1095b0:	d9000f17 	ldw	r4,60(sp)
  1095b4:	d8c01515 	stw	r3,84(sp)
  1095b8:	d8801415 	stw	r2,80(sp)
  1095bc:	011825c0 	call	11825c <__fixdfsi>
  1095c0:	1009883a 	mov	r4,r2
  1095c4:	1021883a 	mov	r16,r2
  1095c8:	01182dc0 	call	1182dc <__floatsidf>
  1095cc:	d9000f17 	ldw	r4,60(sp)
  1095d0:	d9401017 	ldw	r5,64(sp)
  1095d4:	100d883a 	mov	r6,r2
  1095d8:	180f883a 	mov	r7,r3
  1095dc:	01179600 	call	117960 <__subdf3>
  1095e0:	1829883a 	mov	r20,r3
  1095e4:	d8c00717 	ldw	r3,28(sp)
  1095e8:	84000c04 	addi	r16,r16,48
  1095ec:	1023883a 	mov	r17,r2
  1095f0:	1c000005 	stb	r16,0(r3)
  1095f4:	db001617 	ldw	r12,88(sp)
  1095f8:	00800044 	movi	r2,1
  1095fc:	60802226 	beq	r12,r2,109688 <_dtoa_r+0x1424>
  109600:	d9c00717 	ldw	r7,28(sp)
  109604:	8805883a 	mov	r2,r17
  109608:	b82b883a 	mov	r21,r23
  10960c:	3b19883a 	add	r12,r7,r12
  109610:	6023883a 	mov	r17,r12
  109614:	a007883a 	mov	r3,r20
  109618:	dc800f15 	stw	r18,60(sp)
  10961c:	000d883a 	mov	r6,zero
  109620:	01d00934 	movhi	r7,16420
  109624:	1009883a 	mov	r4,r2
  109628:	180b883a 	mov	r5,r3
  10962c:	01170f40 	call	1170f4 <__muldf3>
  109630:	180b883a 	mov	r5,r3
  109634:	1009883a 	mov	r4,r2
  109638:	1829883a 	mov	r20,r3
  10963c:	1025883a 	mov	r18,r2
  109640:	011825c0 	call	11825c <__fixdfsi>
  109644:	1009883a 	mov	r4,r2
  109648:	1021883a 	mov	r16,r2
  10964c:	01182dc0 	call	1182dc <__floatsidf>
  109650:	100d883a 	mov	r6,r2
  109654:	180f883a 	mov	r7,r3
  109658:	9009883a 	mov	r4,r18
  10965c:	a00b883a 	mov	r5,r20
  109660:	84000c04 	addi	r16,r16,48
  109664:	01179600 	call	117960 <__subdf3>
  109668:	ad400044 	addi	r21,r21,1
  10966c:	ac3fffc5 	stb	r16,-1(r21)
  109670:	ac7fea1e 	bne	r21,r17,10961c <__alt_data_end+0xfffc961c>
  109674:	1023883a 	mov	r17,r2
  109678:	d8801217 	ldw	r2,72(sp)
  10967c:	dc800f17 	ldw	r18,60(sp)
  109680:	1829883a 	mov	r20,r3
  109684:	b8af883a 	add	r23,r23,r2
  109688:	d9001417 	ldw	r4,80(sp)
  10968c:	d9401517 	ldw	r5,84(sp)
  109690:	000d883a 	mov	r6,zero
  109694:	01cff834 	movhi	r7,16352
  109698:	0115c200 	call	115c20 <__adddf3>
  10969c:	880d883a 	mov	r6,r17
  1096a0:	a00f883a 	mov	r7,r20
  1096a4:	1009883a 	mov	r4,r2
  1096a8:	180b883a 	mov	r5,r3
  1096ac:	01170000 	call	117000 <__ledf2>
  1096b0:	10003e0e 	bge	r2,zero,1097ac <_dtoa_r+0x1548>
  1096b4:	d9001317 	ldw	r4,76(sp)
  1096b8:	bd3fffc3 	ldbu	r20,-1(r23)
  1096bc:	d9000515 	stw	r4,20(sp)
  1096c0:	003d3b06 	br	108bb0 <__alt_data_end+0xfffc8bb0>
  1096c4:	0027883a 	mov	r19,zero
  1096c8:	003f1b06 	br	109338 <__alt_data_end+0xfffc9338>
  1096cc:	d8800817 	ldw	r2,32(sp)
  1096d0:	11e9c83a 	sub	r20,r2,r7
  1096d4:	0005883a 	mov	r2,zero
  1096d8:	003d5406 	br	108c2c <__alt_data_end+0xfffc8c2c>
  1096dc:	00800044 	movi	r2,1
  1096e0:	003dc706 	br	108e00 <__alt_data_end+0xfffc8e00>
  1096e4:	d8c00217 	ldw	r3,8(sp)
  1096e8:	00800d84 	movi	r2,54
  1096ec:	dd400a17 	ldw	r21,40(sp)
  1096f0:	10c5c83a 	sub	r2,r2,r3
  1096f4:	dd000817 	ldw	r20,32(sp)
  1096f8:	003d4c06 	br	108c2c <__alt_data_end+0xfffc8c2c>
  1096fc:	dc800f15 	stw	r18,60(sp)
  109700:	dcc01015 	stw	r19,64(sp)
  109704:	04000084 	movi	r16,2
  109708:	003bed06 	br	1086c0 <__alt_data_end+0xfffc86c0>
  10970c:	d9000617 	ldw	r4,24(sp)
  109710:	203f0d26 	beq	r4,zero,109348 <__alt_data_end+0xfffc9348>
  109714:	d9800c17 	ldw	r6,48(sp)
  109718:	01bcab0e 	bge	zero,r6,1089c8 <__alt_data_end+0xfffc89c8>
  10971c:	d9401017 	ldw	r5,64(sp)
  109720:	d9000f17 	ldw	r4,60(sp)
  109724:	000d883a 	mov	r6,zero
  109728:	01d00934 	movhi	r7,16420
  10972c:	01170f40 	call	1170f4 <__muldf3>
  109730:	81000044 	addi	r4,r16,1
  109734:	d8800f15 	stw	r2,60(sp)
  109738:	d8c01015 	stw	r3,64(sp)
  10973c:	01182dc0 	call	1182dc <__floatsidf>
  109740:	d9800f17 	ldw	r6,60(sp)
  109744:	d9c01017 	ldw	r7,64(sp)
  109748:	1009883a 	mov	r4,r2
  10974c:	180b883a 	mov	r5,r3
  109750:	01170f40 	call	1170f4 <__muldf3>
  109754:	01d00734 	movhi	r7,16412
  109758:	000d883a 	mov	r6,zero
  10975c:	1009883a 	mov	r4,r2
  109760:	180b883a 	mov	r5,r3
  109764:	0115c200 	call	115c20 <__adddf3>
  109768:	d9c00517 	ldw	r7,20(sp)
  10976c:	047f3034 	movhi	r17,64704
  109770:	1021883a 	mov	r16,r2
  109774:	39ffffc4 	addi	r7,r7,-1
  109778:	d9c01315 	stw	r7,76(sp)
  10977c:	1c63883a 	add	r17,r3,r17
  109780:	db000c17 	ldw	r12,48(sp)
  109784:	003bea06 	br	108730 <__alt_data_end+0xfffc8730>
  109788:	dc000915 	stw	r16,36(sp)
  10978c:	003e0e06 	br	108fc8 <__alt_data_end+0xfffc8fc8>
  109790:	01000e44 	movi	r4,57
  109794:	8825883a 	mov	r18,r17
  109798:	9dc00044 	addi	r23,r19,1
  10979c:	99000005 	stb	r4,0(r19)
  1097a0:	a023883a 	mov	r17,r20
  1097a4:	dc000915 	stw	r16,36(sp)
  1097a8:	003da406 	br	108e3c <__alt_data_end+0xfffc8e3c>
  1097ac:	d9801417 	ldw	r6,80(sp)
  1097b0:	d9c01517 	ldw	r7,84(sp)
  1097b4:	0009883a 	mov	r4,zero
  1097b8:	014ff834 	movhi	r5,16352
  1097bc:	01179600 	call	117960 <__subdf3>
  1097c0:	880d883a 	mov	r6,r17
  1097c4:	a00f883a 	mov	r7,r20
  1097c8:	1009883a 	mov	r4,r2
  1097cc:	180b883a 	mov	r5,r3
  1097d0:	0116f240 	call	116f24 <__gedf2>
  1097d4:	00bc7c0e 	bge	zero,r2,1089c8 <__alt_data_end+0xfffc89c8>
  1097d8:	01000c04 	movi	r4,48
  1097dc:	00000106 	br	1097e4 <_dtoa_r+0x1580>
  1097e0:	102f883a 	mov	r23,r2
  1097e4:	b8bfffc4 	addi	r2,r23,-1
  1097e8:	10c00007 	ldb	r3,0(r2)
  1097ec:	193ffc26 	beq	r3,r4,1097e0 <__alt_data_end+0xfffc97e0>
  1097f0:	d9801317 	ldw	r6,76(sp)
  1097f4:	d9800515 	stw	r6,20(sp)
  1097f8:	003c4406 	br	10890c <__alt_data_end+0xfffc890c>
  1097fc:	d9801317 	ldw	r6,76(sp)
  109800:	d9800515 	stw	r6,20(sp)
  109804:	003cea06 	br	108bb0 <__alt_data_end+0xfffc8bb0>
  109808:	dd800f17 	ldw	r22,60(sp)
  10980c:	dcc01017 	ldw	r19,64(sp)
  109810:	dc801217 	ldw	r18,72(sp)
  109814:	003c6c06 	br	1089c8 <__alt_data_end+0xfffc89c8>
  109818:	903e031e 	bne	r18,zero,109028 <__alt_data_end+0xfffc9028>
  10981c:	003ebb06 	br	10930c <__alt_data_end+0xfffc930c>
  109820:	103e6c1e 	bne	r2,zero,1091d4 <__alt_data_end+0xfffc91d4>
  109824:	4080004c 	andi	r2,r8,1
  109828:	103e6a26 	beq	r2,zero,1091d4 <__alt_data_end+0xfffc91d4>
  10982c:	003e6606 	br	1091c8 <__alt_data_end+0xfffc91c8>
  109830:	d8c00317 	ldw	r3,12(sp)
  109834:	00800084 	movi	r2,2
  109838:	10c02916 	blt	r2,r3,1098e0 <_dtoa_r+0x167c>
  10983c:	d9000c17 	ldw	r4,48(sp)
  109840:	003e8806 	br	109264 <__alt_data_end+0xfffc9264>
  109844:	04000084 	movi	r16,2
  109848:	003b9d06 	br	1086c0 <__alt_data_end+0xfffc86c0>
  10984c:	d9001317 	ldw	r4,76(sp)
  109850:	d9000515 	stw	r4,20(sp)
  109854:	003cd606 	br	108bb0 <__alt_data_end+0xfffc8bb0>
  109858:	d8801317 	ldw	r2,76(sp)
  10985c:	d8800515 	stw	r2,20(sp)
  109860:	003c2a06 	br	10890c <__alt_data_end+0xfffc890c>
  109864:	d9800317 	ldw	r6,12(sp)
  109868:	00800084 	movi	r2,2
  10986c:	11801516 	blt	r2,r6,1098c4 <_dtoa_r+0x1660>
  109870:	d9c00c17 	ldw	r7,48(sp)
  109874:	d9c00615 	stw	r7,24(sp)
  109878:	003df706 	br	109058 <__alt_data_end+0xfffc9058>
  10987c:	193d3926 	beq	r3,r4,108d64 <__alt_data_end+0xfffc8d64>
  109880:	00c00f04 	movi	r3,60
  109884:	1885c83a 	sub	r2,r3,r2
  109888:	003ddf06 	br	109008 <__alt_data_end+0xfffc9008>
  10988c:	e009883a 	mov	r4,fp
  109890:	e0001115 	stw	zero,68(fp)
  109894:	000b883a 	mov	r5,zero
  109898:	010b9600 	call	10b960 <_Balloc>
  10989c:	d8800715 	stw	r2,28(sp)
  1098a0:	d8c00717 	ldw	r3,28(sp)
  1098a4:	00bfffc4 	movi	r2,-1
  1098a8:	01000044 	movi	r4,1
  1098ac:	d8800c15 	stw	r2,48(sp)
  1098b0:	e0c01015 	stw	r3,64(fp)
  1098b4:	d9000b15 	stw	r4,44(sp)
  1098b8:	d8800615 	stw	r2,24(sp)
  1098bc:	d8002215 	stw	zero,136(sp)
  1098c0:	003c4106 	br	1089c8 <__alt_data_end+0xfffc89c8>
  1098c4:	d8c00c17 	ldw	r3,48(sp)
  1098c8:	d8c00615 	stw	r3,24(sp)
  1098cc:	003e7006 	br	109290 <__alt_data_end+0xfffc9290>
  1098d0:	04400044 	movi	r17,1
  1098d4:	003b2006 	br	108558 <__alt_data_end+0xfffc8558>
  1098d8:	000b883a 	mov	r5,zero
  1098dc:	003b3d06 	br	1085d4 <__alt_data_end+0xfffc85d4>
  1098e0:	d8800c17 	ldw	r2,48(sp)
  1098e4:	d8800615 	stw	r2,24(sp)
  1098e8:	003e6906 	br	109290 <__alt_data_end+0xfffc9290>

001098ec <__sflush_r>:
  1098ec:	2880030b 	ldhu	r2,12(r5)
  1098f0:	defffb04 	addi	sp,sp,-20
  1098f4:	dcc00315 	stw	r19,12(sp)
  1098f8:	dc400115 	stw	r17,4(sp)
  1098fc:	dfc00415 	stw	ra,16(sp)
  109900:	dc800215 	stw	r18,8(sp)
  109904:	dc000015 	stw	r16,0(sp)
  109908:	10c0020c 	andi	r3,r2,8
  10990c:	2823883a 	mov	r17,r5
  109910:	2027883a 	mov	r19,r4
  109914:	1800311e 	bne	r3,zero,1099dc <__sflush_r+0xf0>
  109918:	28c00117 	ldw	r3,4(r5)
  10991c:	10820014 	ori	r2,r2,2048
  109920:	2880030d 	sth	r2,12(r5)
  109924:	00c04b0e 	bge	zero,r3,109a54 <__sflush_r+0x168>
  109928:	8a000a17 	ldw	r8,40(r17)
  10992c:	40002326 	beq	r8,zero,1099bc <__sflush_r+0xd0>
  109930:	9c000017 	ldw	r16,0(r19)
  109934:	10c4000c 	andi	r3,r2,4096
  109938:	98000015 	stw	zero,0(r19)
  10993c:	18004826 	beq	r3,zero,109a60 <__sflush_r+0x174>
  109940:	89801417 	ldw	r6,80(r17)
  109944:	10c0010c 	andi	r3,r2,4
  109948:	18000626 	beq	r3,zero,109964 <__sflush_r+0x78>
  10994c:	88c00117 	ldw	r3,4(r17)
  109950:	88800c17 	ldw	r2,48(r17)
  109954:	30cdc83a 	sub	r6,r6,r3
  109958:	10000226 	beq	r2,zero,109964 <__sflush_r+0x78>
  10995c:	88800f17 	ldw	r2,60(r17)
  109960:	308dc83a 	sub	r6,r6,r2
  109964:	89400717 	ldw	r5,28(r17)
  109968:	000f883a 	mov	r7,zero
  10996c:	9809883a 	mov	r4,r19
  109970:	403ee83a 	callr	r8
  109974:	00ffffc4 	movi	r3,-1
  109978:	10c04426 	beq	r2,r3,109a8c <__sflush_r+0x1a0>
  10997c:	88c0030b 	ldhu	r3,12(r17)
  109980:	89000417 	ldw	r4,16(r17)
  109984:	88000115 	stw	zero,4(r17)
  109988:	197dffcc 	andi	r5,r3,63487
  10998c:	8940030d 	sth	r5,12(r17)
  109990:	89000015 	stw	r4,0(r17)
  109994:	18c4000c 	andi	r3,r3,4096
  109998:	18002c1e 	bne	r3,zero,109a4c <__sflush_r+0x160>
  10999c:	89400c17 	ldw	r5,48(r17)
  1099a0:	9c000015 	stw	r16,0(r19)
  1099a4:	28000526 	beq	r5,zero,1099bc <__sflush_r+0xd0>
  1099a8:	88801004 	addi	r2,r17,64
  1099ac:	28800226 	beq	r5,r2,1099b8 <__sflush_r+0xcc>
  1099b0:	9809883a 	mov	r4,r19
  1099b4:	010a0680 	call	10a068 <_free_r>
  1099b8:	88000c15 	stw	zero,48(r17)
  1099bc:	0005883a 	mov	r2,zero
  1099c0:	dfc00417 	ldw	ra,16(sp)
  1099c4:	dcc00317 	ldw	r19,12(sp)
  1099c8:	dc800217 	ldw	r18,8(sp)
  1099cc:	dc400117 	ldw	r17,4(sp)
  1099d0:	dc000017 	ldw	r16,0(sp)
  1099d4:	dec00504 	addi	sp,sp,20
  1099d8:	f800283a 	ret
  1099dc:	2c800417 	ldw	r18,16(r5)
  1099e0:	903ff626 	beq	r18,zero,1099bc <__alt_data_end+0xfffc99bc>
  1099e4:	2c000017 	ldw	r16,0(r5)
  1099e8:	108000cc 	andi	r2,r2,3
  1099ec:	2c800015 	stw	r18,0(r5)
  1099f0:	84a1c83a 	sub	r16,r16,r18
  1099f4:	1000131e 	bne	r2,zero,109a44 <__sflush_r+0x158>
  1099f8:	28800517 	ldw	r2,20(r5)
  1099fc:	88800215 	stw	r2,8(r17)
  109a00:	04000316 	blt	zero,r16,109a10 <__sflush_r+0x124>
  109a04:	003fed06 	br	1099bc <__alt_data_end+0xfffc99bc>
  109a08:	90a5883a 	add	r18,r18,r2
  109a0c:	043feb0e 	bge	zero,r16,1099bc <__alt_data_end+0xfffc99bc>
  109a10:	88800917 	ldw	r2,36(r17)
  109a14:	89400717 	ldw	r5,28(r17)
  109a18:	800f883a 	mov	r7,r16
  109a1c:	900d883a 	mov	r6,r18
  109a20:	9809883a 	mov	r4,r19
  109a24:	103ee83a 	callr	r2
  109a28:	80a1c83a 	sub	r16,r16,r2
  109a2c:	00bff616 	blt	zero,r2,109a08 <__alt_data_end+0xfffc9a08>
  109a30:	88c0030b 	ldhu	r3,12(r17)
  109a34:	00bfffc4 	movi	r2,-1
  109a38:	18c01014 	ori	r3,r3,64
  109a3c:	88c0030d 	sth	r3,12(r17)
  109a40:	003fdf06 	br	1099c0 <__alt_data_end+0xfffc99c0>
  109a44:	0005883a 	mov	r2,zero
  109a48:	003fec06 	br	1099fc <__alt_data_end+0xfffc99fc>
  109a4c:	88801415 	stw	r2,80(r17)
  109a50:	003fd206 	br	10999c <__alt_data_end+0xfffc999c>
  109a54:	28c00f17 	ldw	r3,60(r5)
  109a58:	00ffb316 	blt	zero,r3,109928 <__alt_data_end+0xfffc9928>
  109a5c:	003fd706 	br	1099bc <__alt_data_end+0xfffc99bc>
  109a60:	89400717 	ldw	r5,28(r17)
  109a64:	000d883a 	mov	r6,zero
  109a68:	01c00044 	movi	r7,1
  109a6c:	9809883a 	mov	r4,r19
  109a70:	403ee83a 	callr	r8
  109a74:	100d883a 	mov	r6,r2
  109a78:	00bfffc4 	movi	r2,-1
  109a7c:	30801426 	beq	r6,r2,109ad0 <__sflush_r+0x1e4>
  109a80:	8880030b 	ldhu	r2,12(r17)
  109a84:	8a000a17 	ldw	r8,40(r17)
  109a88:	003fae06 	br	109944 <__alt_data_end+0xfffc9944>
  109a8c:	98c00017 	ldw	r3,0(r19)
  109a90:	183fba26 	beq	r3,zero,10997c <__alt_data_end+0xfffc997c>
  109a94:	01000744 	movi	r4,29
  109a98:	19000626 	beq	r3,r4,109ab4 <__sflush_r+0x1c8>
  109a9c:	01000584 	movi	r4,22
  109aa0:	19000426 	beq	r3,r4,109ab4 <__sflush_r+0x1c8>
  109aa4:	88c0030b 	ldhu	r3,12(r17)
  109aa8:	18c01014 	ori	r3,r3,64
  109aac:	88c0030d 	sth	r3,12(r17)
  109ab0:	003fc306 	br	1099c0 <__alt_data_end+0xfffc99c0>
  109ab4:	8880030b 	ldhu	r2,12(r17)
  109ab8:	88c00417 	ldw	r3,16(r17)
  109abc:	88000115 	stw	zero,4(r17)
  109ac0:	10bdffcc 	andi	r2,r2,63487
  109ac4:	8880030d 	sth	r2,12(r17)
  109ac8:	88c00015 	stw	r3,0(r17)
  109acc:	003fb306 	br	10999c <__alt_data_end+0xfffc999c>
  109ad0:	98800017 	ldw	r2,0(r19)
  109ad4:	103fea26 	beq	r2,zero,109a80 <__alt_data_end+0xfffc9a80>
  109ad8:	00c00744 	movi	r3,29
  109adc:	10c00226 	beq	r2,r3,109ae8 <__sflush_r+0x1fc>
  109ae0:	00c00584 	movi	r3,22
  109ae4:	10c0031e 	bne	r2,r3,109af4 <__sflush_r+0x208>
  109ae8:	9c000015 	stw	r16,0(r19)
  109aec:	0005883a 	mov	r2,zero
  109af0:	003fb306 	br	1099c0 <__alt_data_end+0xfffc99c0>
  109af4:	88c0030b 	ldhu	r3,12(r17)
  109af8:	3005883a 	mov	r2,r6
  109afc:	18c01014 	ori	r3,r3,64
  109b00:	88c0030d 	sth	r3,12(r17)
  109b04:	003fae06 	br	1099c0 <__alt_data_end+0xfffc99c0>

00109b08 <_fflush_r>:
  109b08:	defffd04 	addi	sp,sp,-12
  109b0c:	dc000115 	stw	r16,4(sp)
  109b10:	dfc00215 	stw	ra,8(sp)
  109b14:	2021883a 	mov	r16,r4
  109b18:	20000226 	beq	r4,zero,109b24 <_fflush_r+0x1c>
  109b1c:	20800e17 	ldw	r2,56(r4)
  109b20:	10000c26 	beq	r2,zero,109b54 <_fflush_r+0x4c>
  109b24:	2880030f 	ldh	r2,12(r5)
  109b28:	1000051e 	bne	r2,zero,109b40 <_fflush_r+0x38>
  109b2c:	0005883a 	mov	r2,zero
  109b30:	dfc00217 	ldw	ra,8(sp)
  109b34:	dc000117 	ldw	r16,4(sp)
  109b38:	dec00304 	addi	sp,sp,12
  109b3c:	f800283a 	ret
  109b40:	8009883a 	mov	r4,r16
  109b44:	dfc00217 	ldw	ra,8(sp)
  109b48:	dc000117 	ldw	r16,4(sp)
  109b4c:	dec00304 	addi	sp,sp,12
  109b50:	01098ec1 	jmpi	1098ec <__sflush_r>
  109b54:	d9400015 	stw	r5,0(sp)
  109b58:	0109ef40 	call	109ef4 <__sinit>
  109b5c:	d9400017 	ldw	r5,0(sp)
  109b60:	003ff006 	br	109b24 <__alt_data_end+0xfffc9b24>

00109b64 <fflush>:
  109b64:	20000526 	beq	r4,zero,109b7c <fflush+0x18>
  109b68:	008004b4 	movhi	r2,18
  109b6c:	10957404 	addi	r2,r2,21968
  109b70:	200b883a 	mov	r5,r4
  109b74:	11000017 	ldw	r4,0(r2)
  109b78:	0109b081 	jmpi	109b08 <_fflush_r>
  109b7c:	008004b4 	movhi	r2,18
  109b80:	10957304 	addi	r2,r2,21964
  109b84:	11000017 	ldw	r4,0(r2)
  109b88:	01400474 	movhi	r5,17
  109b8c:	2966c204 	addi	r5,r5,-25848
  109b90:	010a9041 	jmpi	10a904 <_fwalk_reent>

00109b94 <__fp_unlock>:
  109b94:	0005883a 	mov	r2,zero
  109b98:	f800283a 	ret

00109b9c <_cleanup_r>:
  109b9c:	01400474 	movhi	r5,17
  109ba0:	294de404 	addi	r5,r5,14224
  109ba4:	010a9041 	jmpi	10a904 <_fwalk_reent>

00109ba8 <__sinit.part.1>:
  109ba8:	defff704 	addi	sp,sp,-36
  109bac:	00c00474 	movhi	r3,17
  109bb0:	dfc00815 	stw	ra,32(sp)
  109bb4:	ddc00715 	stw	r23,28(sp)
  109bb8:	dd800615 	stw	r22,24(sp)
  109bbc:	dd400515 	stw	r21,20(sp)
  109bc0:	dd000415 	stw	r20,16(sp)
  109bc4:	dcc00315 	stw	r19,12(sp)
  109bc8:	dc800215 	stw	r18,8(sp)
  109bcc:	dc400115 	stw	r17,4(sp)
  109bd0:	dc000015 	stw	r16,0(sp)
  109bd4:	18e6e704 	addi	r3,r3,-25700
  109bd8:	24000117 	ldw	r16,4(r4)
  109bdc:	20c00f15 	stw	r3,60(r4)
  109be0:	2080bb04 	addi	r2,r4,748
  109be4:	00c000c4 	movi	r3,3
  109be8:	20c0b915 	stw	r3,740(r4)
  109bec:	2080ba15 	stw	r2,744(r4)
  109bf0:	2000b815 	stw	zero,736(r4)
  109bf4:	05c00204 	movi	r23,8
  109bf8:	00800104 	movi	r2,4
  109bfc:	2025883a 	mov	r18,r4
  109c00:	b80d883a 	mov	r6,r23
  109c04:	81001704 	addi	r4,r16,92
  109c08:	000b883a 	mov	r5,zero
  109c0c:	80000015 	stw	zero,0(r16)
  109c10:	80000115 	stw	zero,4(r16)
  109c14:	80000215 	stw	zero,8(r16)
  109c18:	8080030d 	sth	r2,12(r16)
  109c1c:	80001915 	stw	zero,100(r16)
  109c20:	8000038d 	sth	zero,14(r16)
  109c24:	80000415 	stw	zero,16(r16)
  109c28:	80000515 	stw	zero,20(r16)
  109c2c:	80000615 	stw	zero,24(r16)
  109c30:	01016c40 	call	1016c4 <memset>
  109c34:	05800434 	movhi	r22,16
  109c38:	94400217 	ldw	r17,8(r18)
  109c3c:	05400434 	movhi	r21,16
  109c40:	05000434 	movhi	r20,16
  109c44:	04c00434 	movhi	r19,16
  109c48:	b586b904 	addi	r22,r22,6884
  109c4c:	ad46d004 	addi	r21,r21,6976
  109c50:	a506ef04 	addi	r20,r20,7100
  109c54:	9cc70604 	addi	r19,r19,7192
  109c58:	85800815 	stw	r22,32(r16)
  109c5c:	85400915 	stw	r21,36(r16)
  109c60:	85000a15 	stw	r20,40(r16)
  109c64:	84c00b15 	stw	r19,44(r16)
  109c68:	84000715 	stw	r16,28(r16)
  109c6c:	00800284 	movi	r2,10
  109c70:	8880030d 	sth	r2,12(r17)
  109c74:	00800044 	movi	r2,1
  109c78:	b80d883a 	mov	r6,r23
  109c7c:	89001704 	addi	r4,r17,92
  109c80:	000b883a 	mov	r5,zero
  109c84:	88000015 	stw	zero,0(r17)
  109c88:	88000115 	stw	zero,4(r17)
  109c8c:	88000215 	stw	zero,8(r17)
  109c90:	88001915 	stw	zero,100(r17)
  109c94:	8880038d 	sth	r2,14(r17)
  109c98:	88000415 	stw	zero,16(r17)
  109c9c:	88000515 	stw	zero,20(r17)
  109ca0:	88000615 	stw	zero,24(r17)
  109ca4:	01016c40 	call	1016c4 <memset>
  109ca8:	94000317 	ldw	r16,12(r18)
  109cac:	00800484 	movi	r2,18
  109cb0:	8c400715 	stw	r17,28(r17)
  109cb4:	8d800815 	stw	r22,32(r17)
  109cb8:	8d400915 	stw	r21,36(r17)
  109cbc:	8d000a15 	stw	r20,40(r17)
  109cc0:	8cc00b15 	stw	r19,44(r17)
  109cc4:	8080030d 	sth	r2,12(r16)
  109cc8:	00800084 	movi	r2,2
  109ccc:	80000015 	stw	zero,0(r16)
  109cd0:	80000115 	stw	zero,4(r16)
  109cd4:	80000215 	stw	zero,8(r16)
  109cd8:	80001915 	stw	zero,100(r16)
  109cdc:	8080038d 	sth	r2,14(r16)
  109ce0:	80000415 	stw	zero,16(r16)
  109ce4:	80000515 	stw	zero,20(r16)
  109ce8:	80000615 	stw	zero,24(r16)
  109cec:	b80d883a 	mov	r6,r23
  109cf0:	000b883a 	mov	r5,zero
  109cf4:	81001704 	addi	r4,r16,92
  109cf8:	01016c40 	call	1016c4 <memset>
  109cfc:	00800044 	movi	r2,1
  109d00:	84000715 	stw	r16,28(r16)
  109d04:	85800815 	stw	r22,32(r16)
  109d08:	85400915 	stw	r21,36(r16)
  109d0c:	85000a15 	stw	r20,40(r16)
  109d10:	84c00b15 	stw	r19,44(r16)
  109d14:	90800e15 	stw	r2,56(r18)
  109d18:	dfc00817 	ldw	ra,32(sp)
  109d1c:	ddc00717 	ldw	r23,28(sp)
  109d20:	dd800617 	ldw	r22,24(sp)
  109d24:	dd400517 	ldw	r21,20(sp)
  109d28:	dd000417 	ldw	r20,16(sp)
  109d2c:	dcc00317 	ldw	r19,12(sp)
  109d30:	dc800217 	ldw	r18,8(sp)
  109d34:	dc400117 	ldw	r17,4(sp)
  109d38:	dc000017 	ldw	r16,0(sp)
  109d3c:	dec00904 	addi	sp,sp,36
  109d40:	f800283a 	ret

00109d44 <__fp_lock>:
  109d44:	0005883a 	mov	r2,zero
  109d48:	f800283a 	ret

00109d4c <__sfmoreglue>:
  109d4c:	defffc04 	addi	sp,sp,-16
  109d50:	dc800215 	stw	r18,8(sp)
  109d54:	2825883a 	mov	r18,r5
  109d58:	dc000015 	stw	r16,0(sp)
  109d5c:	01401a04 	movi	r5,104
  109d60:	2021883a 	mov	r16,r4
  109d64:	913fffc4 	addi	r4,r18,-1
  109d68:	dfc00315 	stw	ra,12(sp)
  109d6c:	dc400115 	stw	r17,4(sp)
  109d70:	01159fc0 	call	1159fc <__mulsi3>
  109d74:	8009883a 	mov	r4,r16
  109d78:	11401d04 	addi	r5,r2,116
  109d7c:	1023883a 	mov	r17,r2
  109d80:	010acf00 	call	10acf0 <_malloc_r>
  109d84:	1021883a 	mov	r16,r2
  109d88:	10000726 	beq	r2,zero,109da8 <__sfmoreglue+0x5c>
  109d8c:	11000304 	addi	r4,r2,12
  109d90:	10000015 	stw	zero,0(r2)
  109d94:	14800115 	stw	r18,4(r2)
  109d98:	11000215 	stw	r4,8(r2)
  109d9c:	89801a04 	addi	r6,r17,104
  109da0:	000b883a 	mov	r5,zero
  109da4:	01016c40 	call	1016c4 <memset>
  109da8:	8005883a 	mov	r2,r16
  109dac:	dfc00317 	ldw	ra,12(sp)
  109db0:	dc800217 	ldw	r18,8(sp)
  109db4:	dc400117 	ldw	r17,4(sp)
  109db8:	dc000017 	ldw	r16,0(sp)
  109dbc:	dec00404 	addi	sp,sp,16
  109dc0:	f800283a 	ret

00109dc4 <__sfp>:
  109dc4:	defffb04 	addi	sp,sp,-20
  109dc8:	dc000015 	stw	r16,0(sp)
  109dcc:	040004b4 	movhi	r16,18
  109dd0:	84157304 	addi	r16,r16,21964
  109dd4:	dcc00315 	stw	r19,12(sp)
  109dd8:	2027883a 	mov	r19,r4
  109ddc:	81000017 	ldw	r4,0(r16)
  109de0:	dfc00415 	stw	ra,16(sp)
  109de4:	dc800215 	stw	r18,8(sp)
  109de8:	20800e17 	ldw	r2,56(r4)
  109dec:	dc400115 	stw	r17,4(sp)
  109df0:	1000021e 	bne	r2,zero,109dfc <__sfp+0x38>
  109df4:	0109ba80 	call	109ba8 <__sinit.part.1>
  109df8:	81000017 	ldw	r4,0(r16)
  109dfc:	2480b804 	addi	r18,r4,736
  109e00:	047fffc4 	movi	r17,-1
  109e04:	91000117 	ldw	r4,4(r18)
  109e08:	94000217 	ldw	r16,8(r18)
  109e0c:	213fffc4 	addi	r4,r4,-1
  109e10:	20000a16 	blt	r4,zero,109e3c <__sfp+0x78>
  109e14:	8080030f 	ldh	r2,12(r16)
  109e18:	10000c26 	beq	r2,zero,109e4c <__sfp+0x88>
  109e1c:	80c01d04 	addi	r3,r16,116
  109e20:	00000206 	br	109e2c <__sfp+0x68>
  109e24:	18bfe60f 	ldh	r2,-104(r3)
  109e28:	10000826 	beq	r2,zero,109e4c <__sfp+0x88>
  109e2c:	213fffc4 	addi	r4,r4,-1
  109e30:	1c3ffd04 	addi	r16,r3,-12
  109e34:	18c01a04 	addi	r3,r3,104
  109e38:	247ffa1e 	bne	r4,r17,109e24 <__alt_data_end+0xfffc9e24>
  109e3c:	90800017 	ldw	r2,0(r18)
  109e40:	10001d26 	beq	r2,zero,109eb8 <__sfp+0xf4>
  109e44:	1025883a 	mov	r18,r2
  109e48:	003fee06 	br	109e04 <__alt_data_end+0xfffc9e04>
  109e4c:	00bfffc4 	movi	r2,-1
  109e50:	8080038d 	sth	r2,14(r16)
  109e54:	00800044 	movi	r2,1
  109e58:	8080030d 	sth	r2,12(r16)
  109e5c:	80001915 	stw	zero,100(r16)
  109e60:	80000015 	stw	zero,0(r16)
  109e64:	80000215 	stw	zero,8(r16)
  109e68:	80000115 	stw	zero,4(r16)
  109e6c:	80000415 	stw	zero,16(r16)
  109e70:	80000515 	stw	zero,20(r16)
  109e74:	80000615 	stw	zero,24(r16)
  109e78:	01800204 	movi	r6,8
  109e7c:	000b883a 	mov	r5,zero
  109e80:	81001704 	addi	r4,r16,92
  109e84:	01016c40 	call	1016c4 <memset>
  109e88:	8005883a 	mov	r2,r16
  109e8c:	80000c15 	stw	zero,48(r16)
  109e90:	80000d15 	stw	zero,52(r16)
  109e94:	80001115 	stw	zero,68(r16)
  109e98:	80001215 	stw	zero,72(r16)
  109e9c:	dfc00417 	ldw	ra,16(sp)
  109ea0:	dcc00317 	ldw	r19,12(sp)
  109ea4:	dc800217 	ldw	r18,8(sp)
  109ea8:	dc400117 	ldw	r17,4(sp)
  109eac:	dc000017 	ldw	r16,0(sp)
  109eb0:	dec00504 	addi	sp,sp,20
  109eb4:	f800283a 	ret
  109eb8:	01400104 	movi	r5,4
  109ebc:	9809883a 	mov	r4,r19
  109ec0:	0109d4c0 	call	109d4c <__sfmoreglue>
  109ec4:	90800015 	stw	r2,0(r18)
  109ec8:	103fde1e 	bne	r2,zero,109e44 <__alt_data_end+0xfffc9e44>
  109ecc:	00800304 	movi	r2,12
  109ed0:	98800015 	stw	r2,0(r19)
  109ed4:	0005883a 	mov	r2,zero
  109ed8:	003ff006 	br	109e9c <__alt_data_end+0xfffc9e9c>

00109edc <_cleanup>:
  109edc:	008004b4 	movhi	r2,18
  109ee0:	10957304 	addi	r2,r2,21964
  109ee4:	11000017 	ldw	r4,0(r2)
  109ee8:	01400474 	movhi	r5,17
  109eec:	294de404 	addi	r5,r5,14224
  109ef0:	010a9041 	jmpi	10a904 <_fwalk_reent>

00109ef4 <__sinit>:
  109ef4:	20800e17 	ldw	r2,56(r4)
  109ef8:	10000126 	beq	r2,zero,109f00 <__sinit+0xc>
  109efc:	f800283a 	ret
  109f00:	0109ba81 	jmpi	109ba8 <__sinit.part.1>

00109f04 <__sfp_lock_acquire>:
  109f04:	f800283a 	ret

00109f08 <__sfp_lock_release>:
  109f08:	f800283a 	ret

00109f0c <__sinit_lock_acquire>:
  109f0c:	f800283a 	ret

00109f10 <__sinit_lock_release>:
  109f10:	f800283a 	ret

00109f14 <__fp_lock_all>:
  109f14:	008004b4 	movhi	r2,18
  109f18:	10957404 	addi	r2,r2,21968
  109f1c:	11000017 	ldw	r4,0(r2)
  109f20:	01400474 	movhi	r5,17
  109f24:	29675104 	addi	r5,r5,-25276
  109f28:	010a8401 	jmpi	10a840 <_fwalk>

00109f2c <__fp_unlock_all>:
  109f2c:	008004b4 	movhi	r2,18
  109f30:	10957404 	addi	r2,r2,21968
  109f34:	11000017 	ldw	r4,0(r2)
  109f38:	01400474 	movhi	r5,17
  109f3c:	2966e504 	addi	r5,r5,-25708
  109f40:	010a8401 	jmpi	10a840 <_fwalk>

00109f44 <_malloc_trim_r>:
  109f44:	defffb04 	addi	sp,sp,-20
  109f48:	dcc00315 	stw	r19,12(sp)
  109f4c:	04c004b4 	movhi	r19,18
  109f50:	dc800215 	stw	r18,8(sp)
  109f54:	dc400115 	stw	r17,4(sp)
  109f58:	dc000015 	stw	r16,0(sp)
  109f5c:	dfc00415 	stw	ra,16(sp)
  109f60:	2821883a 	mov	r16,r5
  109f64:	9ccfeb04 	addi	r19,r19,16300
  109f68:	2025883a 	mov	r18,r4
  109f6c:	011911c0 	call	11911c <__malloc_lock>
  109f70:	98800217 	ldw	r2,8(r19)
  109f74:	14400117 	ldw	r17,4(r2)
  109f78:	00bfff04 	movi	r2,-4
  109f7c:	88a2703a 	and	r17,r17,r2
  109f80:	8c21c83a 	sub	r16,r17,r16
  109f84:	8403fbc4 	addi	r16,r16,4079
  109f88:	8020d33a 	srli	r16,r16,12
  109f8c:	0083ffc4 	movi	r2,4095
  109f90:	843fffc4 	addi	r16,r16,-1
  109f94:	8020933a 	slli	r16,r16,12
  109f98:	1400060e 	bge	r2,r16,109fb4 <_malloc_trim_r+0x70>
  109f9c:	000b883a 	mov	r5,zero
  109fa0:	9009883a 	mov	r4,r18
  109fa4:	010d0500 	call	10d050 <_sbrk_r>
  109fa8:	98c00217 	ldw	r3,8(r19)
  109fac:	1c47883a 	add	r3,r3,r17
  109fb0:	10c00a26 	beq	r2,r3,109fdc <_malloc_trim_r+0x98>
  109fb4:	9009883a 	mov	r4,r18
  109fb8:	011923c0 	call	11923c <__malloc_unlock>
  109fbc:	0005883a 	mov	r2,zero
  109fc0:	dfc00417 	ldw	ra,16(sp)
  109fc4:	dcc00317 	ldw	r19,12(sp)
  109fc8:	dc800217 	ldw	r18,8(sp)
  109fcc:	dc400117 	ldw	r17,4(sp)
  109fd0:	dc000017 	ldw	r16,0(sp)
  109fd4:	dec00504 	addi	sp,sp,20
  109fd8:	f800283a 	ret
  109fdc:	040bc83a 	sub	r5,zero,r16
  109fe0:	9009883a 	mov	r4,r18
  109fe4:	010d0500 	call	10d050 <_sbrk_r>
  109fe8:	00ffffc4 	movi	r3,-1
  109fec:	10c00d26 	beq	r2,r3,10a024 <_malloc_trim_r+0xe0>
  109ff0:	00c004b4 	movhi	r3,18
  109ff4:	18dcca04 	addi	r3,r3,29480
  109ff8:	18800017 	ldw	r2,0(r3)
  109ffc:	99000217 	ldw	r4,8(r19)
  10a000:	8c23c83a 	sub	r17,r17,r16
  10a004:	8c400054 	ori	r17,r17,1
  10a008:	1421c83a 	sub	r16,r2,r16
  10a00c:	24400115 	stw	r17,4(r4)
  10a010:	9009883a 	mov	r4,r18
  10a014:	1c000015 	stw	r16,0(r3)
  10a018:	011923c0 	call	11923c <__malloc_unlock>
  10a01c:	00800044 	movi	r2,1
  10a020:	003fe706 	br	109fc0 <__alt_data_end+0xfffc9fc0>
  10a024:	000b883a 	mov	r5,zero
  10a028:	9009883a 	mov	r4,r18
  10a02c:	010d0500 	call	10d050 <_sbrk_r>
  10a030:	99000217 	ldw	r4,8(r19)
  10a034:	014003c4 	movi	r5,15
  10a038:	1107c83a 	sub	r3,r2,r4
  10a03c:	28ffdd0e 	bge	r5,r3,109fb4 <__alt_data_end+0xfffc9fb4>
  10a040:	014004b4 	movhi	r5,18
  10a044:	29557604 	addi	r5,r5,21976
  10a048:	29400017 	ldw	r5,0(r5)
  10a04c:	18c00054 	ori	r3,r3,1
  10a050:	20c00115 	stw	r3,4(r4)
  10a054:	00c004b4 	movhi	r3,18
  10a058:	1145c83a 	sub	r2,r2,r5
  10a05c:	18dcca04 	addi	r3,r3,29480
  10a060:	18800015 	stw	r2,0(r3)
  10a064:	003fd306 	br	109fb4 <__alt_data_end+0xfffc9fb4>

0010a068 <_free_r>:
  10a068:	28004126 	beq	r5,zero,10a170 <_free_r+0x108>
  10a06c:	defffd04 	addi	sp,sp,-12
  10a070:	dc400115 	stw	r17,4(sp)
  10a074:	dc000015 	stw	r16,0(sp)
  10a078:	2023883a 	mov	r17,r4
  10a07c:	2821883a 	mov	r16,r5
  10a080:	dfc00215 	stw	ra,8(sp)
  10a084:	011911c0 	call	11911c <__malloc_lock>
  10a088:	81ffff17 	ldw	r7,-4(r16)
  10a08c:	00bfff84 	movi	r2,-2
  10a090:	010004b4 	movhi	r4,18
  10a094:	81bffe04 	addi	r6,r16,-8
  10a098:	3884703a 	and	r2,r7,r2
  10a09c:	210feb04 	addi	r4,r4,16300
  10a0a0:	308b883a 	add	r5,r6,r2
  10a0a4:	2a400117 	ldw	r9,4(r5)
  10a0a8:	22000217 	ldw	r8,8(r4)
  10a0ac:	00ffff04 	movi	r3,-4
  10a0b0:	48c6703a 	and	r3,r9,r3
  10a0b4:	2a005726 	beq	r5,r8,10a214 <_free_r+0x1ac>
  10a0b8:	28c00115 	stw	r3,4(r5)
  10a0bc:	39c0004c 	andi	r7,r7,1
  10a0c0:	3800091e 	bne	r7,zero,10a0e8 <_free_r+0x80>
  10a0c4:	823ffe17 	ldw	r8,-8(r16)
  10a0c8:	22400204 	addi	r9,r4,8
  10a0cc:	320dc83a 	sub	r6,r6,r8
  10a0d0:	31c00217 	ldw	r7,8(r6)
  10a0d4:	1205883a 	add	r2,r2,r8
  10a0d8:	3a406526 	beq	r7,r9,10a270 <_free_r+0x208>
  10a0dc:	32000317 	ldw	r8,12(r6)
  10a0e0:	3a000315 	stw	r8,12(r7)
  10a0e4:	41c00215 	stw	r7,8(r8)
  10a0e8:	28cf883a 	add	r7,r5,r3
  10a0ec:	39c00117 	ldw	r7,4(r7)
  10a0f0:	39c0004c 	andi	r7,r7,1
  10a0f4:	38003a26 	beq	r7,zero,10a1e0 <_free_r+0x178>
  10a0f8:	10c00054 	ori	r3,r2,1
  10a0fc:	30c00115 	stw	r3,4(r6)
  10a100:	3087883a 	add	r3,r6,r2
  10a104:	18800015 	stw	r2,0(r3)
  10a108:	00c07fc4 	movi	r3,511
  10a10c:	18801936 	bltu	r3,r2,10a174 <_free_r+0x10c>
  10a110:	1004d0fa 	srli	r2,r2,3
  10a114:	01c00044 	movi	r7,1
  10a118:	21400117 	ldw	r5,4(r4)
  10a11c:	10c00044 	addi	r3,r2,1
  10a120:	18c7883a 	add	r3,r3,r3
  10a124:	1005d0ba 	srai	r2,r2,2
  10a128:	18c7883a 	add	r3,r3,r3
  10a12c:	18c7883a 	add	r3,r3,r3
  10a130:	1907883a 	add	r3,r3,r4
  10a134:	3884983a 	sll	r2,r7,r2
  10a138:	19c00017 	ldw	r7,0(r3)
  10a13c:	1a3ffe04 	addi	r8,r3,-8
  10a140:	1144b03a 	or	r2,r2,r5
  10a144:	32000315 	stw	r8,12(r6)
  10a148:	31c00215 	stw	r7,8(r6)
  10a14c:	20800115 	stw	r2,4(r4)
  10a150:	19800015 	stw	r6,0(r3)
  10a154:	39800315 	stw	r6,12(r7)
  10a158:	8809883a 	mov	r4,r17
  10a15c:	dfc00217 	ldw	ra,8(sp)
  10a160:	dc400117 	ldw	r17,4(sp)
  10a164:	dc000017 	ldw	r16,0(sp)
  10a168:	dec00304 	addi	sp,sp,12
  10a16c:	011923c1 	jmpi	11923c <__malloc_unlock>
  10a170:	f800283a 	ret
  10a174:	100ad27a 	srli	r5,r2,9
  10a178:	00c00104 	movi	r3,4
  10a17c:	19404a36 	bltu	r3,r5,10a2a8 <_free_r+0x240>
  10a180:	100ad1ba 	srli	r5,r2,6
  10a184:	28c00e44 	addi	r3,r5,57
  10a188:	18c7883a 	add	r3,r3,r3
  10a18c:	29400e04 	addi	r5,r5,56
  10a190:	18c7883a 	add	r3,r3,r3
  10a194:	18c7883a 	add	r3,r3,r3
  10a198:	1909883a 	add	r4,r3,r4
  10a19c:	20c00017 	ldw	r3,0(r4)
  10a1a0:	01c004b4 	movhi	r7,18
  10a1a4:	213ffe04 	addi	r4,r4,-8
  10a1a8:	39cfeb04 	addi	r7,r7,16300
  10a1ac:	20c04426 	beq	r4,r3,10a2c0 <_free_r+0x258>
  10a1b0:	01ffff04 	movi	r7,-4
  10a1b4:	19400117 	ldw	r5,4(r3)
  10a1b8:	29ca703a 	and	r5,r5,r7
  10a1bc:	1140022e 	bgeu	r2,r5,10a1c8 <_free_r+0x160>
  10a1c0:	18c00217 	ldw	r3,8(r3)
  10a1c4:	20fffb1e 	bne	r4,r3,10a1b4 <__alt_data_end+0xfffca1b4>
  10a1c8:	19000317 	ldw	r4,12(r3)
  10a1cc:	31000315 	stw	r4,12(r6)
  10a1d0:	30c00215 	stw	r3,8(r6)
  10a1d4:	21800215 	stw	r6,8(r4)
  10a1d8:	19800315 	stw	r6,12(r3)
  10a1dc:	003fde06 	br	10a158 <__alt_data_end+0xfffca158>
  10a1e0:	29c00217 	ldw	r7,8(r5)
  10a1e4:	10c5883a 	add	r2,r2,r3
  10a1e8:	00c004b4 	movhi	r3,18
  10a1ec:	18cfed04 	addi	r3,r3,16308
  10a1f0:	38c03b26 	beq	r7,r3,10a2e0 <_free_r+0x278>
  10a1f4:	2a000317 	ldw	r8,12(r5)
  10a1f8:	11400054 	ori	r5,r2,1
  10a1fc:	3087883a 	add	r3,r6,r2
  10a200:	3a000315 	stw	r8,12(r7)
  10a204:	41c00215 	stw	r7,8(r8)
  10a208:	31400115 	stw	r5,4(r6)
  10a20c:	18800015 	stw	r2,0(r3)
  10a210:	003fbd06 	br	10a108 <__alt_data_end+0xfffca108>
  10a214:	39c0004c 	andi	r7,r7,1
  10a218:	10c5883a 	add	r2,r2,r3
  10a21c:	3800071e 	bne	r7,zero,10a23c <_free_r+0x1d4>
  10a220:	81fffe17 	ldw	r7,-8(r16)
  10a224:	31cdc83a 	sub	r6,r6,r7
  10a228:	30c00317 	ldw	r3,12(r6)
  10a22c:	31400217 	ldw	r5,8(r6)
  10a230:	11c5883a 	add	r2,r2,r7
  10a234:	28c00315 	stw	r3,12(r5)
  10a238:	19400215 	stw	r5,8(r3)
  10a23c:	10c00054 	ori	r3,r2,1
  10a240:	30c00115 	stw	r3,4(r6)
  10a244:	00c004b4 	movhi	r3,18
  10a248:	18d57704 	addi	r3,r3,21980
  10a24c:	18c00017 	ldw	r3,0(r3)
  10a250:	21800215 	stw	r6,8(r4)
  10a254:	10ffc036 	bltu	r2,r3,10a158 <__alt_data_end+0xfffca158>
  10a258:	008004b4 	movhi	r2,18
  10a25c:	109ca204 	addi	r2,r2,29320
  10a260:	11400017 	ldw	r5,0(r2)
  10a264:	8809883a 	mov	r4,r17
  10a268:	0109f440 	call	109f44 <_malloc_trim_r>
  10a26c:	003fba06 	br	10a158 <__alt_data_end+0xfffca158>
  10a270:	28c9883a 	add	r4,r5,r3
  10a274:	21000117 	ldw	r4,4(r4)
  10a278:	2100004c 	andi	r4,r4,1
  10a27c:	2000391e 	bne	r4,zero,10a364 <_free_r+0x2fc>
  10a280:	29c00217 	ldw	r7,8(r5)
  10a284:	29000317 	ldw	r4,12(r5)
  10a288:	1885883a 	add	r2,r3,r2
  10a28c:	10c00054 	ori	r3,r2,1
  10a290:	39000315 	stw	r4,12(r7)
  10a294:	21c00215 	stw	r7,8(r4)
  10a298:	30c00115 	stw	r3,4(r6)
  10a29c:	308d883a 	add	r6,r6,r2
  10a2a0:	30800015 	stw	r2,0(r6)
  10a2a4:	003fac06 	br	10a158 <__alt_data_end+0xfffca158>
  10a2a8:	00c00504 	movi	r3,20
  10a2ac:	19401536 	bltu	r3,r5,10a304 <_free_r+0x29c>
  10a2b0:	28c01704 	addi	r3,r5,92
  10a2b4:	18c7883a 	add	r3,r3,r3
  10a2b8:	294016c4 	addi	r5,r5,91
  10a2bc:	003fb406 	br	10a190 <__alt_data_end+0xfffca190>
  10a2c0:	280bd0ba 	srai	r5,r5,2
  10a2c4:	00c00044 	movi	r3,1
  10a2c8:	38800117 	ldw	r2,4(r7)
  10a2cc:	194a983a 	sll	r5,r3,r5
  10a2d0:	2007883a 	mov	r3,r4
  10a2d4:	2884b03a 	or	r2,r5,r2
  10a2d8:	38800115 	stw	r2,4(r7)
  10a2dc:	003fbb06 	br	10a1cc <__alt_data_end+0xfffca1cc>
  10a2e0:	21800515 	stw	r6,20(r4)
  10a2e4:	21800415 	stw	r6,16(r4)
  10a2e8:	10c00054 	ori	r3,r2,1
  10a2ec:	31c00315 	stw	r7,12(r6)
  10a2f0:	31c00215 	stw	r7,8(r6)
  10a2f4:	30c00115 	stw	r3,4(r6)
  10a2f8:	308d883a 	add	r6,r6,r2
  10a2fc:	30800015 	stw	r2,0(r6)
  10a300:	003f9506 	br	10a158 <__alt_data_end+0xfffca158>
  10a304:	00c01504 	movi	r3,84
  10a308:	19400536 	bltu	r3,r5,10a320 <_free_r+0x2b8>
  10a30c:	100ad33a 	srli	r5,r2,12
  10a310:	28c01bc4 	addi	r3,r5,111
  10a314:	18c7883a 	add	r3,r3,r3
  10a318:	29401b84 	addi	r5,r5,110
  10a31c:	003f9c06 	br	10a190 <__alt_data_end+0xfffca190>
  10a320:	00c05504 	movi	r3,340
  10a324:	19400536 	bltu	r3,r5,10a33c <_free_r+0x2d4>
  10a328:	100ad3fa 	srli	r5,r2,15
  10a32c:	28c01e04 	addi	r3,r5,120
  10a330:	18c7883a 	add	r3,r3,r3
  10a334:	29401dc4 	addi	r5,r5,119
  10a338:	003f9506 	br	10a190 <__alt_data_end+0xfffca190>
  10a33c:	00c15504 	movi	r3,1364
  10a340:	19400536 	bltu	r3,r5,10a358 <_free_r+0x2f0>
  10a344:	100ad4ba 	srli	r5,r2,18
  10a348:	28c01f44 	addi	r3,r5,125
  10a34c:	18c7883a 	add	r3,r3,r3
  10a350:	29401f04 	addi	r5,r5,124
  10a354:	003f8e06 	br	10a190 <__alt_data_end+0xfffca190>
  10a358:	00c03f84 	movi	r3,254
  10a35c:	01401f84 	movi	r5,126
  10a360:	003f8b06 	br	10a190 <__alt_data_end+0xfffca190>
  10a364:	10c00054 	ori	r3,r2,1
  10a368:	30c00115 	stw	r3,4(r6)
  10a36c:	308d883a 	add	r6,r6,r2
  10a370:	30800015 	stw	r2,0(r6)
  10a374:	003f7806 	br	10a158 <__alt_data_end+0xfffca158>

0010a378 <__sfvwrite_r>:
  10a378:	30800217 	ldw	r2,8(r6)
  10a37c:	10006726 	beq	r2,zero,10a51c <__sfvwrite_r+0x1a4>
  10a380:	28c0030b 	ldhu	r3,12(r5)
  10a384:	defff404 	addi	sp,sp,-48
  10a388:	dd400715 	stw	r21,28(sp)
  10a38c:	dd000615 	stw	r20,24(sp)
  10a390:	dc000215 	stw	r16,8(sp)
  10a394:	dfc00b15 	stw	ra,44(sp)
  10a398:	df000a15 	stw	fp,40(sp)
  10a39c:	ddc00915 	stw	r23,36(sp)
  10a3a0:	dd800815 	stw	r22,32(sp)
  10a3a4:	dcc00515 	stw	r19,20(sp)
  10a3a8:	dc800415 	stw	r18,16(sp)
  10a3ac:	dc400315 	stw	r17,12(sp)
  10a3b0:	1880020c 	andi	r2,r3,8
  10a3b4:	2821883a 	mov	r16,r5
  10a3b8:	202b883a 	mov	r21,r4
  10a3bc:	3029883a 	mov	r20,r6
  10a3c0:	10002726 	beq	r2,zero,10a460 <__sfvwrite_r+0xe8>
  10a3c4:	28800417 	ldw	r2,16(r5)
  10a3c8:	10002526 	beq	r2,zero,10a460 <__sfvwrite_r+0xe8>
  10a3cc:	1880008c 	andi	r2,r3,2
  10a3d0:	a4400017 	ldw	r17,0(r20)
  10a3d4:	10002a26 	beq	r2,zero,10a480 <__sfvwrite_r+0x108>
  10a3d8:	05a00034 	movhi	r22,32768
  10a3dc:	0027883a 	mov	r19,zero
  10a3e0:	0025883a 	mov	r18,zero
  10a3e4:	b5bf0004 	addi	r22,r22,-1024
  10a3e8:	980d883a 	mov	r6,r19
  10a3ec:	a809883a 	mov	r4,r21
  10a3f0:	90004626 	beq	r18,zero,10a50c <__sfvwrite_r+0x194>
  10a3f4:	900f883a 	mov	r7,r18
  10a3f8:	b480022e 	bgeu	r22,r18,10a404 <__sfvwrite_r+0x8c>
  10a3fc:	01e00034 	movhi	r7,32768
  10a400:	39ff0004 	addi	r7,r7,-1024
  10a404:	80800917 	ldw	r2,36(r16)
  10a408:	81400717 	ldw	r5,28(r16)
  10a40c:	103ee83a 	callr	r2
  10a410:	00805a0e 	bge	zero,r2,10a57c <__sfvwrite_r+0x204>
  10a414:	a0c00217 	ldw	r3,8(r20)
  10a418:	98a7883a 	add	r19,r19,r2
  10a41c:	90a5c83a 	sub	r18,r18,r2
  10a420:	1885c83a 	sub	r2,r3,r2
  10a424:	a0800215 	stw	r2,8(r20)
  10a428:	103fef1e 	bne	r2,zero,10a3e8 <__alt_data_end+0xfffca3e8>
  10a42c:	0005883a 	mov	r2,zero
  10a430:	dfc00b17 	ldw	ra,44(sp)
  10a434:	df000a17 	ldw	fp,40(sp)
  10a438:	ddc00917 	ldw	r23,36(sp)
  10a43c:	dd800817 	ldw	r22,32(sp)
  10a440:	dd400717 	ldw	r21,28(sp)
  10a444:	dd000617 	ldw	r20,24(sp)
  10a448:	dcc00517 	ldw	r19,20(sp)
  10a44c:	dc800417 	ldw	r18,16(sp)
  10a450:	dc400317 	ldw	r17,12(sp)
  10a454:	dc000217 	ldw	r16,8(sp)
  10a458:	dec00c04 	addi	sp,sp,48
  10a45c:	f800283a 	ret
  10a460:	800b883a 	mov	r5,r16
  10a464:	a809883a 	mov	r4,r21
  10a468:	0107e940 	call	107e94 <__swsetup_r>
  10a46c:	1000ee1e 	bne	r2,zero,10a828 <__sfvwrite_r+0x4b0>
  10a470:	80c0030b 	ldhu	r3,12(r16)
  10a474:	a4400017 	ldw	r17,0(r20)
  10a478:	1880008c 	andi	r2,r3,2
  10a47c:	103fd61e 	bne	r2,zero,10a3d8 <__alt_data_end+0xfffca3d8>
  10a480:	1880004c 	andi	r2,r3,1
  10a484:	1000421e 	bne	r2,zero,10a590 <__sfvwrite_r+0x218>
  10a488:	0039883a 	mov	fp,zero
  10a48c:	0025883a 	mov	r18,zero
  10a490:	90001a26 	beq	r18,zero,10a4fc <__sfvwrite_r+0x184>
  10a494:	1880800c 	andi	r2,r3,512
  10a498:	84c00217 	ldw	r19,8(r16)
  10a49c:	10002126 	beq	r2,zero,10a524 <__sfvwrite_r+0x1ac>
  10a4a0:	982f883a 	mov	r23,r19
  10a4a4:	94c09636 	bltu	r18,r19,10a700 <__sfvwrite_r+0x388>
  10a4a8:	1881200c 	andi	r2,r3,1152
  10a4ac:	1000a11e 	bne	r2,zero,10a734 <__sfvwrite_r+0x3bc>
  10a4b0:	81000017 	ldw	r4,0(r16)
  10a4b4:	b80d883a 	mov	r6,r23
  10a4b8:	e00b883a 	mov	r5,fp
  10a4bc:	010b8040 	call	10b804 <memmove>
  10a4c0:	80c00217 	ldw	r3,8(r16)
  10a4c4:	81000017 	ldw	r4,0(r16)
  10a4c8:	9005883a 	mov	r2,r18
  10a4cc:	1ce7c83a 	sub	r19,r3,r19
  10a4d0:	25cf883a 	add	r7,r4,r23
  10a4d4:	84c00215 	stw	r19,8(r16)
  10a4d8:	81c00015 	stw	r7,0(r16)
  10a4dc:	a0c00217 	ldw	r3,8(r20)
  10a4e0:	e0b9883a 	add	fp,fp,r2
  10a4e4:	90a5c83a 	sub	r18,r18,r2
  10a4e8:	18a7c83a 	sub	r19,r3,r2
  10a4ec:	a4c00215 	stw	r19,8(r20)
  10a4f0:	983fce26 	beq	r19,zero,10a42c <__alt_data_end+0xfffca42c>
  10a4f4:	80c0030b 	ldhu	r3,12(r16)
  10a4f8:	903fe61e 	bne	r18,zero,10a494 <__alt_data_end+0xfffca494>
  10a4fc:	8f000017 	ldw	fp,0(r17)
  10a500:	8c800117 	ldw	r18,4(r17)
  10a504:	8c400204 	addi	r17,r17,8
  10a508:	003fe106 	br	10a490 <__alt_data_end+0xfffca490>
  10a50c:	8cc00017 	ldw	r19,0(r17)
  10a510:	8c800117 	ldw	r18,4(r17)
  10a514:	8c400204 	addi	r17,r17,8
  10a518:	003fb306 	br	10a3e8 <__alt_data_end+0xfffca3e8>
  10a51c:	0005883a 	mov	r2,zero
  10a520:	f800283a 	ret
  10a524:	81000017 	ldw	r4,0(r16)
  10a528:	80800417 	ldw	r2,16(r16)
  10a52c:	11005a36 	bltu	r2,r4,10a698 <__sfvwrite_r+0x320>
  10a530:	85c00517 	ldw	r23,20(r16)
  10a534:	95c05836 	bltu	r18,r23,10a698 <__sfvwrite_r+0x320>
  10a538:	00a00034 	movhi	r2,32768
  10a53c:	10bfffc4 	addi	r2,r2,-1
  10a540:	9009883a 	mov	r4,r18
  10a544:	1480012e 	bgeu	r2,r18,10a54c <__sfvwrite_r+0x1d4>
  10a548:	1009883a 	mov	r4,r2
  10a54c:	b80b883a 	mov	r5,r23
  10a550:	01158480 	call	115848 <__divsi3>
  10a554:	b80b883a 	mov	r5,r23
  10a558:	1009883a 	mov	r4,r2
  10a55c:	01159fc0 	call	1159fc <__mulsi3>
  10a560:	81400717 	ldw	r5,28(r16)
  10a564:	80c00917 	ldw	r3,36(r16)
  10a568:	100f883a 	mov	r7,r2
  10a56c:	e00d883a 	mov	r6,fp
  10a570:	a809883a 	mov	r4,r21
  10a574:	183ee83a 	callr	r3
  10a578:	00bfd816 	blt	zero,r2,10a4dc <__alt_data_end+0xfffca4dc>
  10a57c:	8080030b 	ldhu	r2,12(r16)
  10a580:	10801014 	ori	r2,r2,64
  10a584:	8080030d 	sth	r2,12(r16)
  10a588:	00bfffc4 	movi	r2,-1
  10a58c:	003fa806 	br	10a430 <__alt_data_end+0xfffca430>
  10a590:	0027883a 	mov	r19,zero
  10a594:	0011883a 	mov	r8,zero
  10a598:	0039883a 	mov	fp,zero
  10a59c:	0025883a 	mov	r18,zero
  10a5a0:	90001f26 	beq	r18,zero,10a620 <__sfvwrite_r+0x2a8>
  10a5a4:	40005a26 	beq	r8,zero,10a710 <__sfvwrite_r+0x398>
  10a5a8:	982d883a 	mov	r22,r19
  10a5ac:	94c0012e 	bgeu	r18,r19,10a5b4 <__sfvwrite_r+0x23c>
  10a5b0:	902d883a 	mov	r22,r18
  10a5b4:	81000017 	ldw	r4,0(r16)
  10a5b8:	80800417 	ldw	r2,16(r16)
  10a5bc:	b02f883a 	mov	r23,r22
  10a5c0:	81c00517 	ldw	r7,20(r16)
  10a5c4:	1100032e 	bgeu	r2,r4,10a5d4 <__sfvwrite_r+0x25c>
  10a5c8:	80c00217 	ldw	r3,8(r16)
  10a5cc:	38c7883a 	add	r3,r7,r3
  10a5d0:	1d801816 	blt	r3,r22,10a634 <__sfvwrite_r+0x2bc>
  10a5d4:	b1c03e16 	blt	r22,r7,10a6d0 <__sfvwrite_r+0x358>
  10a5d8:	80800917 	ldw	r2,36(r16)
  10a5dc:	81400717 	ldw	r5,28(r16)
  10a5e0:	e00d883a 	mov	r6,fp
  10a5e4:	da000115 	stw	r8,4(sp)
  10a5e8:	a809883a 	mov	r4,r21
  10a5ec:	103ee83a 	callr	r2
  10a5f0:	102f883a 	mov	r23,r2
  10a5f4:	da000117 	ldw	r8,4(sp)
  10a5f8:	00bfe00e 	bge	zero,r2,10a57c <__alt_data_end+0xfffca57c>
  10a5fc:	9de7c83a 	sub	r19,r19,r23
  10a600:	98001f26 	beq	r19,zero,10a680 <__sfvwrite_r+0x308>
  10a604:	a0800217 	ldw	r2,8(r20)
  10a608:	e5f9883a 	add	fp,fp,r23
  10a60c:	95e5c83a 	sub	r18,r18,r23
  10a610:	15efc83a 	sub	r23,r2,r23
  10a614:	a5c00215 	stw	r23,8(r20)
  10a618:	b83f8426 	beq	r23,zero,10a42c <__alt_data_end+0xfffca42c>
  10a61c:	903fe11e 	bne	r18,zero,10a5a4 <__alt_data_end+0xfffca5a4>
  10a620:	8f000017 	ldw	fp,0(r17)
  10a624:	8c800117 	ldw	r18,4(r17)
  10a628:	0011883a 	mov	r8,zero
  10a62c:	8c400204 	addi	r17,r17,8
  10a630:	003fdb06 	br	10a5a0 <__alt_data_end+0xfffca5a0>
  10a634:	180d883a 	mov	r6,r3
  10a638:	e00b883a 	mov	r5,fp
  10a63c:	da000115 	stw	r8,4(sp)
  10a640:	d8c00015 	stw	r3,0(sp)
  10a644:	010b8040 	call	10b804 <memmove>
  10a648:	d8c00017 	ldw	r3,0(sp)
  10a64c:	80800017 	ldw	r2,0(r16)
  10a650:	800b883a 	mov	r5,r16
  10a654:	a809883a 	mov	r4,r21
  10a658:	10c5883a 	add	r2,r2,r3
  10a65c:	80800015 	stw	r2,0(r16)
  10a660:	d8c00015 	stw	r3,0(sp)
  10a664:	0109b080 	call	109b08 <_fflush_r>
  10a668:	d8c00017 	ldw	r3,0(sp)
  10a66c:	da000117 	ldw	r8,4(sp)
  10a670:	103fc21e 	bne	r2,zero,10a57c <__alt_data_end+0xfffca57c>
  10a674:	182f883a 	mov	r23,r3
  10a678:	9de7c83a 	sub	r19,r19,r23
  10a67c:	983fe11e 	bne	r19,zero,10a604 <__alt_data_end+0xfffca604>
  10a680:	800b883a 	mov	r5,r16
  10a684:	a809883a 	mov	r4,r21
  10a688:	0109b080 	call	109b08 <_fflush_r>
  10a68c:	103fbb1e 	bne	r2,zero,10a57c <__alt_data_end+0xfffca57c>
  10a690:	0011883a 	mov	r8,zero
  10a694:	003fdb06 	br	10a604 <__alt_data_end+0xfffca604>
  10a698:	94c0012e 	bgeu	r18,r19,10a6a0 <__sfvwrite_r+0x328>
  10a69c:	9027883a 	mov	r19,r18
  10a6a0:	980d883a 	mov	r6,r19
  10a6a4:	e00b883a 	mov	r5,fp
  10a6a8:	010b8040 	call	10b804 <memmove>
  10a6ac:	80800217 	ldw	r2,8(r16)
  10a6b0:	80c00017 	ldw	r3,0(r16)
  10a6b4:	14c5c83a 	sub	r2,r2,r19
  10a6b8:	1cc7883a 	add	r3,r3,r19
  10a6bc:	80800215 	stw	r2,8(r16)
  10a6c0:	80c00015 	stw	r3,0(r16)
  10a6c4:	10004326 	beq	r2,zero,10a7d4 <__sfvwrite_r+0x45c>
  10a6c8:	9805883a 	mov	r2,r19
  10a6cc:	003f8306 	br	10a4dc <__alt_data_end+0xfffca4dc>
  10a6d0:	b00d883a 	mov	r6,r22
  10a6d4:	e00b883a 	mov	r5,fp
  10a6d8:	da000115 	stw	r8,4(sp)
  10a6dc:	010b8040 	call	10b804 <memmove>
  10a6e0:	80800217 	ldw	r2,8(r16)
  10a6e4:	80c00017 	ldw	r3,0(r16)
  10a6e8:	da000117 	ldw	r8,4(sp)
  10a6ec:	1585c83a 	sub	r2,r2,r22
  10a6f0:	1dad883a 	add	r22,r3,r22
  10a6f4:	80800215 	stw	r2,8(r16)
  10a6f8:	85800015 	stw	r22,0(r16)
  10a6fc:	003fbf06 	br	10a5fc <__alt_data_end+0xfffca5fc>
  10a700:	81000017 	ldw	r4,0(r16)
  10a704:	9027883a 	mov	r19,r18
  10a708:	902f883a 	mov	r23,r18
  10a70c:	003f6906 	br	10a4b4 <__alt_data_end+0xfffca4b4>
  10a710:	900d883a 	mov	r6,r18
  10a714:	01400284 	movi	r5,10
  10a718:	e009883a 	mov	r4,fp
  10a71c:	010b7200 	call	10b720 <memchr>
  10a720:	10003e26 	beq	r2,zero,10a81c <__sfvwrite_r+0x4a4>
  10a724:	10800044 	addi	r2,r2,1
  10a728:	1727c83a 	sub	r19,r2,fp
  10a72c:	02000044 	movi	r8,1
  10a730:	003f9d06 	br	10a5a8 <__alt_data_end+0xfffca5a8>
  10a734:	80800517 	ldw	r2,20(r16)
  10a738:	81400417 	ldw	r5,16(r16)
  10a73c:	81c00017 	ldw	r7,0(r16)
  10a740:	10a7883a 	add	r19,r2,r2
  10a744:	9885883a 	add	r2,r19,r2
  10a748:	1026d7fa 	srli	r19,r2,31
  10a74c:	396dc83a 	sub	r22,r7,r5
  10a750:	b1000044 	addi	r4,r22,1
  10a754:	9885883a 	add	r2,r19,r2
  10a758:	1027d07a 	srai	r19,r2,1
  10a75c:	2485883a 	add	r2,r4,r18
  10a760:	980d883a 	mov	r6,r19
  10a764:	9880022e 	bgeu	r19,r2,10a770 <__sfvwrite_r+0x3f8>
  10a768:	1027883a 	mov	r19,r2
  10a76c:	100d883a 	mov	r6,r2
  10a770:	18c1000c 	andi	r3,r3,1024
  10a774:	18001c26 	beq	r3,zero,10a7e8 <__sfvwrite_r+0x470>
  10a778:	300b883a 	mov	r5,r6
  10a77c:	a809883a 	mov	r4,r21
  10a780:	010acf00 	call	10acf0 <_malloc_r>
  10a784:	102f883a 	mov	r23,r2
  10a788:	10002926 	beq	r2,zero,10a830 <__sfvwrite_r+0x4b8>
  10a78c:	81400417 	ldw	r5,16(r16)
  10a790:	b00d883a 	mov	r6,r22
  10a794:	1009883a 	mov	r4,r2
  10a798:	010157c0 	call	10157c <memcpy>
  10a79c:	8080030b 	ldhu	r2,12(r16)
  10a7a0:	00fedfc4 	movi	r3,-1153
  10a7a4:	10c4703a 	and	r2,r2,r3
  10a7a8:	10802014 	ori	r2,r2,128
  10a7ac:	8080030d 	sth	r2,12(r16)
  10a7b0:	bd89883a 	add	r4,r23,r22
  10a7b4:	9d8fc83a 	sub	r7,r19,r22
  10a7b8:	85c00415 	stw	r23,16(r16)
  10a7bc:	84c00515 	stw	r19,20(r16)
  10a7c0:	81000015 	stw	r4,0(r16)
  10a7c4:	9027883a 	mov	r19,r18
  10a7c8:	81c00215 	stw	r7,8(r16)
  10a7cc:	902f883a 	mov	r23,r18
  10a7d0:	003f3806 	br	10a4b4 <__alt_data_end+0xfffca4b4>
  10a7d4:	800b883a 	mov	r5,r16
  10a7d8:	a809883a 	mov	r4,r21
  10a7dc:	0109b080 	call	109b08 <_fflush_r>
  10a7e0:	103fb926 	beq	r2,zero,10a6c8 <__alt_data_end+0xfffca6c8>
  10a7e4:	003f6506 	br	10a57c <__alt_data_end+0xfffca57c>
  10a7e8:	a809883a 	mov	r4,r21
  10a7ec:	010ca780 	call	10ca78 <_realloc_r>
  10a7f0:	102f883a 	mov	r23,r2
  10a7f4:	103fee1e 	bne	r2,zero,10a7b0 <__alt_data_end+0xfffca7b0>
  10a7f8:	81400417 	ldw	r5,16(r16)
  10a7fc:	a809883a 	mov	r4,r21
  10a800:	010a0680 	call	10a068 <_free_r>
  10a804:	8080030b 	ldhu	r2,12(r16)
  10a808:	00ffdfc4 	movi	r3,-129
  10a80c:	1884703a 	and	r2,r3,r2
  10a810:	00c00304 	movi	r3,12
  10a814:	a8c00015 	stw	r3,0(r21)
  10a818:	003f5906 	br	10a580 <__alt_data_end+0xfffca580>
  10a81c:	94c00044 	addi	r19,r18,1
  10a820:	02000044 	movi	r8,1
  10a824:	003f6006 	br	10a5a8 <__alt_data_end+0xfffca5a8>
  10a828:	00bfffc4 	movi	r2,-1
  10a82c:	003f0006 	br	10a430 <__alt_data_end+0xfffca430>
  10a830:	00800304 	movi	r2,12
  10a834:	a8800015 	stw	r2,0(r21)
  10a838:	8080030b 	ldhu	r2,12(r16)
  10a83c:	003f5006 	br	10a580 <__alt_data_end+0xfffca580>

0010a840 <_fwalk>:
  10a840:	defff704 	addi	sp,sp,-36
  10a844:	dd000415 	stw	r20,16(sp)
  10a848:	dfc00815 	stw	ra,32(sp)
  10a84c:	ddc00715 	stw	r23,28(sp)
  10a850:	dd800615 	stw	r22,24(sp)
  10a854:	dd400515 	stw	r21,20(sp)
  10a858:	dcc00315 	stw	r19,12(sp)
  10a85c:	dc800215 	stw	r18,8(sp)
  10a860:	dc400115 	stw	r17,4(sp)
  10a864:	dc000015 	stw	r16,0(sp)
  10a868:	2500b804 	addi	r20,r4,736
  10a86c:	a0002326 	beq	r20,zero,10a8fc <_fwalk+0xbc>
  10a870:	282b883a 	mov	r21,r5
  10a874:	002f883a 	mov	r23,zero
  10a878:	05800044 	movi	r22,1
  10a87c:	04ffffc4 	movi	r19,-1
  10a880:	a4400117 	ldw	r17,4(r20)
  10a884:	a4800217 	ldw	r18,8(r20)
  10a888:	8c7fffc4 	addi	r17,r17,-1
  10a88c:	88000d16 	blt	r17,zero,10a8c4 <_fwalk+0x84>
  10a890:	94000304 	addi	r16,r18,12
  10a894:	94800384 	addi	r18,r18,14
  10a898:	8080000b 	ldhu	r2,0(r16)
  10a89c:	8c7fffc4 	addi	r17,r17,-1
  10a8a0:	813ffd04 	addi	r4,r16,-12
  10a8a4:	b080042e 	bgeu	r22,r2,10a8b8 <_fwalk+0x78>
  10a8a8:	9080000f 	ldh	r2,0(r18)
  10a8ac:	14c00226 	beq	r2,r19,10a8b8 <_fwalk+0x78>
  10a8b0:	a83ee83a 	callr	r21
  10a8b4:	b8aeb03a 	or	r23,r23,r2
  10a8b8:	84001a04 	addi	r16,r16,104
  10a8bc:	94801a04 	addi	r18,r18,104
  10a8c0:	8cfff51e 	bne	r17,r19,10a898 <__alt_data_end+0xfffca898>
  10a8c4:	a5000017 	ldw	r20,0(r20)
  10a8c8:	a03fed1e 	bne	r20,zero,10a880 <__alt_data_end+0xfffca880>
  10a8cc:	b805883a 	mov	r2,r23
  10a8d0:	dfc00817 	ldw	ra,32(sp)
  10a8d4:	ddc00717 	ldw	r23,28(sp)
  10a8d8:	dd800617 	ldw	r22,24(sp)
  10a8dc:	dd400517 	ldw	r21,20(sp)
  10a8e0:	dd000417 	ldw	r20,16(sp)
  10a8e4:	dcc00317 	ldw	r19,12(sp)
  10a8e8:	dc800217 	ldw	r18,8(sp)
  10a8ec:	dc400117 	ldw	r17,4(sp)
  10a8f0:	dc000017 	ldw	r16,0(sp)
  10a8f4:	dec00904 	addi	sp,sp,36
  10a8f8:	f800283a 	ret
  10a8fc:	002f883a 	mov	r23,zero
  10a900:	003ff206 	br	10a8cc <__alt_data_end+0xfffca8cc>

0010a904 <_fwalk_reent>:
  10a904:	defff704 	addi	sp,sp,-36
  10a908:	dd000415 	stw	r20,16(sp)
  10a90c:	dfc00815 	stw	ra,32(sp)
  10a910:	ddc00715 	stw	r23,28(sp)
  10a914:	dd800615 	stw	r22,24(sp)
  10a918:	dd400515 	stw	r21,20(sp)
  10a91c:	dcc00315 	stw	r19,12(sp)
  10a920:	dc800215 	stw	r18,8(sp)
  10a924:	dc400115 	stw	r17,4(sp)
  10a928:	dc000015 	stw	r16,0(sp)
  10a92c:	2500b804 	addi	r20,r4,736
  10a930:	a0002326 	beq	r20,zero,10a9c0 <_fwalk_reent+0xbc>
  10a934:	282b883a 	mov	r21,r5
  10a938:	2027883a 	mov	r19,r4
  10a93c:	002f883a 	mov	r23,zero
  10a940:	05800044 	movi	r22,1
  10a944:	04bfffc4 	movi	r18,-1
  10a948:	a4400117 	ldw	r17,4(r20)
  10a94c:	a4000217 	ldw	r16,8(r20)
  10a950:	8c7fffc4 	addi	r17,r17,-1
  10a954:	88000c16 	blt	r17,zero,10a988 <_fwalk_reent+0x84>
  10a958:	84000304 	addi	r16,r16,12
  10a95c:	8080000b 	ldhu	r2,0(r16)
  10a960:	8c7fffc4 	addi	r17,r17,-1
  10a964:	817ffd04 	addi	r5,r16,-12
  10a968:	b080052e 	bgeu	r22,r2,10a980 <_fwalk_reent+0x7c>
  10a96c:	8080008f 	ldh	r2,2(r16)
  10a970:	9809883a 	mov	r4,r19
  10a974:	14800226 	beq	r2,r18,10a980 <_fwalk_reent+0x7c>
  10a978:	a83ee83a 	callr	r21
  10a97c:	b8aeb03a 	or	r23,r23,r2
  10a980:	84001a04 	addi	r16,r16,104
  10a984:	8cbff51e 	bne	r17,r18,10a95c <__alt_data_end+0xfffca95c>
  10a988:	a5000017 	ldw	r20,0(r20)
  10a98c:	a03fee1e 	bne	r20,zero,10a948 <__alt_data_end+0xfffca948>
  10a990:	b805883a 	mov	r2,r23
  10a994:	dfc00817 	ldw	ra,32(sp)
  10a998:	ddc00717 	ldw	r23,28(sp)
  10a99c:	dd800617 	ldw	r22,24(sp)
  10a9a0:	dd400517 	ldw	r21,20(sp)
  10a9a4:	dd000417 	ldw	r20,16(sp)
  10a9a8:	dcc00317 	ldw	r19,12(sp)
  10a9ac:	dc800217 	ldw	r18,8(sp)
  10a9b0:	dc400117 	ldw	r17,4(sp)
  10a9b4:	dc000017 	ldw	r16,0(sp)
  10a9b8:	dec00904 	addi	sp,sp,36
  10a9bc:	f800283a 	ret
  10a9c0:	002f883a 	mov	r23,zero
  10a9c4:	003ff206 	br	10a990 <__alt_data_end+0xfffca990>

0010a9c8 <iswspace>:
  10a9c8:	00803fc4 	movi	r2,255
  10a9cc:	11000836 	bltu	r2,r4,10a9f0 <iswspace+0x28>
  10a9d0:	008004b4 	movhi	r2,18
  10a9d4:	10957204 	addi	r2,r2,21960
  10a9d8:	10800017 	ldw	r2,0(r2)
  10a9dc:	1109883a 	add	r4,r2,r4
  10a9e0:	20800043 	ldbu	r2,1(r4)
  10a9e4:	1080020c 	andi	r2,r2,8
  10a9e8:	10803fcc 	andi	r2,r2,255
  10a9ec:	f800283a 	ret
  10a9f0:	0005883a 	mov	r2,zero
  10a9f4:	f800283a 	ret

0010a9f8 <_setlocale_r>:
  10a9f8:	30001b26 	beq	r6,zero,10aa68 <_setlocale_r+0x70>
  10a9fc:	014004b4 	movhi	r5,18
  10aa00:	defffe04 	addi	sp,sp,-8
  10aa04:	294d5804 	addi	r5,r5,13664
  10aa08:	3009883a 	mov	r4,r6
  10aa0c:	dc000015 	stw	r16,0(sp)
  10aa10:	dfc00115 	stw	ra,4(sp)
  10aa14:	3021883a 	mov	r16,r6
  10aa18:	0101c200 	call	101c20 <strcmp>
  10aa1c:	1000061e 	bne	r2,zero,10aa38 <_setlocale_r+0x40>
  10aa20:	008004b4 	movhi	r2,18
  10aa24:	108d5704 	addi	r2,r2,13660
  10aa28:	dfc00117 	ldw	ra,4(sp)
  10aa2c:	dc000017 	ldw	r16,0(sp)
  10aa30:	dec00204 	addi	sp,sp,8
  10aa34:	f800283a 	ret
  10aa38:	014004b4 	movhi	r5,18
  10aa3c:	294d5704 	addi	r5,r5,13660
  10aa40:	8009883a 	mov	r4,r16
  10aa44:	0101c200 	call	101c20 <strcmp>
  10aa48:	103ff526 	beq	r2,zero,10aa20 <__alt_data_end+0xfffcaa20>
  10aa4c:	014004b4 	movhi	r5,18
  10aa50:	294c8f04 	addi	r5,r5,12860
  10aa54:	8009883a 	mov	r4,r16
  10aa58:	0101c200 	call	101c20 <strcmp>
  10aa5c:	103ff026 	beq	r2,zero,10aa20 <__alt_data_end+0xfffcaa20>
  10aa60:	0005883a 	mov	r2,zero
  10aa64:	003ff006 	br	10aa28 <__alt_data_end+0xfffcaa28>
  10aa68:	008004b4 	movhi	r2,18
  10aa6c:	108d5704 	addi	r2,r2,13660
  10aa70:	f800283a 	ret

0010aa74 <__locale_charset>:
  10aa74:	008004b4 	movhi	r2,18
  10aa78:	108fd504 	addi	r2,r2,16212
  10aa7c:	f800283a 	ret

0010aa80 <__locale_mb_cur_max>:
  10aa80:	008004b4 	movhi	r2,18
  10aa84:	10957504 	addi	r2,r2,21972
  10aa88:	10800017 	ldw	r2,0(r2)
  10aa8c:	f800283a 	ret

0010aa90 <__locale_msgcharset>:
  10aa90:	008004b4 	movhi	r2,18
  10aa94:	108fcd04 	addi	r2,r2,16180
  10aa98:	f800283a 	ret

0010aa9c <__locale_cjk_lang>:
  10aa9c:	0005883a 	mov	r2,zero
  10aaa0:	f800283a 	ret

0010aaa4 <_localeconv_r>:
  10aaa4:	008004b4 	movhi	r2,18
  10aaa8:	108fdd04 	addi	r2,r2,16244
  10aaac:	f800283a 	ret

0010aab0 <setlocale>:
  10aab0:	008004b4 	movhi	r2,18
  10aab4:	10957404 	addi	r2,r2,21968
  10aab8:	280d883a 	mov	r6,r5
  10aabc:	200b883a 	mov	r5,r4
  10aac0:	11000017 	ldw	r4,0(r2)
  10aac4:	010a9f81 	jmpi	10a9f8 <_setlocale_r>

0010aac8 <localeconv>:
  10aac8:	008004b4 	movhi	r2,18
  10aacc:	108fdd04 	addi	r2,r2,16244
  10aad0:	f800283a 	ret

0010aad4 <_lseek_r>:
  10aad4:	defffd04 	addi	sp,sp,-12
  10aad8:	2805883a 	mov	r2,r5
  10aadc:	dc000015 	stw	r16,0(sp)
  10aae0:	040004b4 	movhi	r16,18
  10aae4:	dc400115 	stw	r17,4(sp)
  10aae8:	300b883a 	mov	r5,r6
  10aaec:	841c9c04 	addi	r16,r16,29296
  10aaf0:	2023883a 	mov	r17,r4
  10aaf4:	380d883a 	mov	r6,r7
  10aaf8:	1009883a 	mov	r4,r2
  10aafc:	dfc00215 	stw	ra,8(sp)
  10ab00:	80000015 	stw	zero,0(r16)
  10ab04:	0118ab00 	call	118ab0 <lseek>
  10ab08:	00ffffc4 	movi	r3,-1
  10ab0c:	10c00526 	beq	r2,r3,10ab24 <_lseek_r+0x50>
  10ab10:	dfc00217 	ldw	ra,8(sp)
  10ab14:	dc400117 	ldw	r17,4(sp)
  10ab18:	dc000017 	ldw	r16,0(sp)
  10ab1c:	dec00304 	addi	sp,sp,12
  10ab20:	f800283a 	ret
  10ab24:	80c00017 	ldw	r3,0(r16)
  10ab28:	183ff926 	beq	r3,zero,10ab10 <__alt_data_end+0xfffcab10>
  10ab2c:	88c00015 	stw	r3,0(r17)
  10ab30:	003ff706 	br	10ab10 <__alt_data_end+0xfffcab10>

0010ab34 <__smakebuf_r>:
  10ab34:	2880030b 	ldhu	r2,12(r5)
  10ab38:	10c0008c 	andi	r3,r2,2
  10ab3c:	1800411e 	bne	r3,zero,10ac44 <__smakebuf_r+0x110>
  10ab40:	deffec04 	addi	sp,sp,-80
  10ab44:	dc000f15 	stw	r16,60(sp)
  10ab48:	2821883a 	mov	r16,r5
  10ab4c:	2940038f 	ldh	r5,14(r5)
  10ab50:	dc401015 	stw	r17,64(sp)
  10ab54:	dfc01315 	stw	ra,76(sp)
  10ab58:	dcc01215 	stw	r19,72(sp)
  10ab5c:	dc801115 	stw	r18,68(sp)
  10ab60:	2023883a 	mov	r17,r4
  10ab64:	28001c16 	blt	r5,zero,10abd8 <__smakebuf_r+0xa4>
  10ab68:	d80d883a 	mov	r6,sp
  10ab6c:	0113a9c0 	call	113a9c <_fstat_r>
  10ab70:	10001816 	blt	r2,zero,10abd4 <__smakebuf_r+0xa0>
  10ab74:	d8800117 	ldw	r2,4(sp)
  10ab78:	00e00014 	movui	r3,32768
  10ab7c:	10bc000c 	andi	r2,r2,61440
  10ab80:	14c80020 	cmpeqi	r19,r2,8192
  10ab84:	10c03726 	beq	r2,r3,10ac64 <__smakebuf_r+0x130>
  10ab88:	80c0030b 	ldhu	r3,12(r16)
  10ab8c:	18c20014 	ori	r3,r3,2048
  10ab90:	80c0030d 	sth	r3,12(r16)
  10ab94:	00c80004 	movi	r3,8192
  10ab98:	10c0521e 	bne	r2,r3,10ace4 <__smakebuf_r+0x1b0>
  10ab9c:	8140038f 	ldh	r5,14(r16)
  10aba0:	8809883a 	mov	r4,r17
  10aba4:	01146a40 	call	1146a4 <_isatty_r>
  10aba8:	10004c26 	beq	r2,zero,10acdc <__smakebuf_r+0x1a8>
  10abac:	8080030b 	ldhu	r2,12(r16)
  10abb0:	80c010c4 	addi	r3,r16,67
  10abb4:	80c00015 	stw	r3,0(r16)
  10abb8:	10800054 	ori	r2,r2,1
  10abbc:	8080030d 	sth	r2,12(r16)
  10abc0:	00800044 	movi	r2,1
  10abc4:	80c00415 	stw	r3,16(r16)
  10abc8:	80800515 	stw	r2,20(r16)
  10abcc:	04810004 	movi	r18,1024
  10abd0:	00000706 	br	10abf0 <__smakebuf_r+0xbc>
  10abd4:	8080030b 	ldhu	r2,12(r16)
  10abd8:	10c0200c 	andi	r3,r2,128
  10abdc:	18001f1e 	bne	r3,zero,10ac5c <__smakebuf_r+0x128>
  10abe0:	04810004 	movi	r18,1024
  10abe4:	10820014 	ori	r2,r2,2048
  10abe8:	8080030d 	sth	r2,12(r16)
  10abec:	0027883a 	mov	r19,zero
  10abf0:	900b883a 	mov	r5,r18
  10abf4:	8809883a 	mov	r4,r17
  10abf8:	010acf00 	call	10acf0 <_malloc_r>
  10abfc:	10002c26 	beq	r2,zero,10acb0 <__smakebuf_r+0x17c>
  10ac00:	80c0030b 	ldhu	r3,12(r16)
  10ac04:	01000474 	movhi	r4,17
  10ac08:	2126e704 	addi	r4,r4,-25700
  10ac0c:	89000f15 	stw	r4,60(r17)
  10ac10:	18c02014 	ori	r3,r3,128
  10ac14:	80c0030d 	sth	r3,12(r16)
  10ac18:	80800015 	stw	r2,0(r16)
  10ac1c:	80800415 	stw	r2,16(r16)
  10ac20:	84800515 	stw	r18,20(r16)
  10ac24:	98001a1e 	bne	r19,zero,10ac90 <__smakebuf_r+0x15c>
  10ac28:	dfc01317 	ldw	ra,76(sp)
  10ac2c:	dcc01217 	ldw	r19,72(sp)
  10ac30:	dc801117 	ldw	r18,68(sp)
  10ac34:	dc401017 	ldw	r17,64(sp)
  10ac38:	dc000f17 	ldw	r16,60(sp)
  10ac3c:	dec01404 	addi	sp,sp,80
  10ac40:	f800283a 	ret
  10ac44:	288010c4 	addi	r2,r5,67
  10ac48:	28800015 	stw	r2,0(r5)
  10ac4c:	28800415 	stw	r2,16(r5)
  10ac50:	00800044 	movi	r2,1
  10ac54:	28800515 	stw	r2,20(r5)
  10ac58:	f800283a 	ret
  10ac5c:	04801004 	movi	r18,64
  10ac60:	003fe006 	br	10abe4 <__alt_data_end+0xfffcabe4>
  10ac64:	81000a17 	ldw	r4,40(r16)
  10ac68:	00c00434 	movhi	r3,16
  10ac6c:	18c6ef04 	addi	r3,r3,7100
  10ac70:	20ffc51e 	bne	r4,r3,10ab88 <__alt_data_end+0xfffcab88>
  10ac74:	8080030b 	ldhu	r2,12(r16)
  10ac78:	04810004 	movi	r18,1024
  10ac7c:	84801315 	stw	r18,76(r16)
  10ac80:	1484b03a 	or	r2,r2,r18
  10ac84:	8080030d 	sth	r2,12(r16)
  10ac88:	0027883a 	mov	r19,zero
  10ac8c:	003fd806 	br	10abf0 <__alt_data_end+0xfffcabf0>
  10ac90:	8140038f 	ldh	r5,14(r16)
  10ac94:	8809883a 	mov	r4,r17
  10ac98:	01146a40 	call	1146a4 <_isatty_r>
  10ac9c:	103fe226 	beq	r2,zero,10ac28 <__alt_data_end+0xfffcac28>
  10aca0:	8080030b 	ldhu	r2,12(r16)
  10aca4:	10800054 	ori	r2,r2,1
  10aca8:	8080030d 	sth	r2,12(r16)
  10acac:	003fde06 	br	10ac28 <__alt_data_end+0xfffcac28>
  10acb0:	8080030b 	ldhu	r2,12(r16)
  10acb4:	10c0800c 	andi	r3,r2,512
  10acb8:	183fdb1e 	bne	r3,zero,10ac28 <__alt_data_end+0xfffcac28>
  10acbc:	10800094 	ori	r2,r2,2
  10acc0:	80c010c4 	addi	r3,r16,67
  10acc4:	8080030d 	sth	r2,12(r16)
  10acc8:	00800044 	movi	r2,1
  10accc:	80c00015 	stw	r3,0(r16)
  10acd0:	80c00415 	stw	r3,16(r16)
  10acd4:	80800515 	stw	r2,20(r16)
  10acd8:	003fd306 	br	10ac28 <__alt_data_end+0xfffcac28>
  10acdc:	04810004 	movi	r18,1024
  10ace0:	003fc306 	br	10abf0 <__alt_data_end+0xfffcabf0>
  10ace4:	0027883a 	mov	r19,zero
  10ace8:	04810004 	movi	r18,1024
  10acec:	003fc006 	br	10abf0 <__alt_data_end+0xfffcabf0>

0010acf0 <_malloc_r>:
  10acf0:	defff504 	addi	sp,sp,-44
  10acf4:	dc800315 	stw	r18,12(sp)
  10acf8:	dfc00a15 	stw	ra,40(sp)
  10acfc:	df000915 	stw	fp,36(sp)
  10ad00:	ddc00815 	stw	r23,32(sp)
  10ad04:	dd800715 	stw	r22,28(sp)
  10ad08:	dd400615 	stw	r21,24(sp)
  10ad0c:	dd000515 	stw	r20,20(sp)
  10ad10:	dcc00415 	stw	r19,16(sp)
  10ad14:	dc400215 	stw	r17,8(sp)
  10ad18:	dc000115 	stw	r16,4(sp)
  10ad1c:	288002c4 	addi	r2,r5,11
  10ad20:	00c00584 	movi	r3,22
  10ad24:	2025883a 	mov	r18,r4
  10ad28:	18807f2e 	bgeu	r3,r2,10af28 <_malloc_r+0x238>
  10ad2c:	047ffe04 	movi	r17,-8
  10ad30:	1462703a 	and	r17,r2,r17
  10ad34:	8800a316 	blt	r17,zero,10afc4 <_malloc_r+0x2d4>
  10ad38:	8940a236 	bltu	r17,r5,10afc4 <_malloc_r+0x2d4>
  10ad3c:	011911c0 	call	11911c <__malloc_lock>
  10ad40:	00807dc4 	movi	r2,503
  10ad44:	1441e92e 	bgeu	r2,r17,10b4ec <_malloc_r+0x7fc>
  10ad48:	8804d27a 	srli	r2,r17,9
  10ad4c:	1000a126 	beq	r2,zero,10afd4 <_malloc_r+0x2e4>
  10ad50:	00c00104 	movi	r3,4
  10ad54:	18811e36 	bltu	r3,r2,10b1d0 <_malloc_r+0x4e0>
  10ad58:	8804d1ba 	srli	r2,r17,6
  10ad5c:	12000e44 	addi	r8,r2,57
  10ad60:	11c00e04 	addi	r7,r2,56
  10ad64:	4209883a 	add	r4,r8,r8
  10ad68:	04c004b4 	movhi	r19,18
  10ad6c:	2109883a 	add	r4,r4,r4
  10ad70:	9ccfeb04 	addi	r19,r19,16300
  10ad74:	2109883a 	add	r4,r4,r4
  10ad78:	9909883a 	add	r4,r19,r4
  10ad7c:	24000117 	ldw	r16,4(r4)
  10ad80:	213ffe04 	addi	r4,r4,-8
  10ad84:	24009726 	beq	r4,r16,10afe4 <_malloc_r+0x2f4>
  10ad88:	80800117 	ldw	r2,4(r16)
  10ad8c:	01bfff04 	movi	r6,-4
  10ad90:	014003c4 	movi	r5,15
  10ad94:	1184703a 	and	r2,r2,r6
  10ad98:	1447c83a 	sub	r3,r2,r17
  10ad9c:	28c00716 	blt	r5,r3,10adbc <_malloc_r+0xcc>
  10ada0:	1800920e 	bge	r3,zero,10afec <_malloc_r+0x2fc>
  10ada4:	84000317 	ldw	r16,12(r16)
  10ada8:	24008e26 	beq	r4,r16,10afe4 <_malloc_r+0x2f4>
  10adac:	80800117 	ldw	r2,4(r16)
  10adb0:	1184703a 	and	r2,r2,r6
  10adb4:	1447c83a 	sub	r3,r2,r17
  10adb8:	28fff90e 	bge	r5,r3,10ada0 <__alt_data_end+0xfffcada0>
  10adbc:	3809883a 	mov	r4,r7
  10adc0:	018004b4 	movhi	r6,18
  10adc4:	9c000417 	ldw	r16,16(r19)
  10adc8:	318feb04 	addi	r6,r6,16300
  10adcc:	32000204 	addi	r8,r6,8
  10add0:	82013426 	beq	r16,r8,10b2a4 <_malloc_r+0x5b4>
  10add4:	80c00117 	ldw	r3,4(r16)
  10add8:	00bfff04 	movi	r2,-4
  10addc:	188e703a 	and	r7,r3,r2
  10ade0:	3c45c83a 	sub	r2,r7,r17
  10ade4:	00c003c4 	movi	r3,15
  10ade8:	18811f16 	blt	r3,r2,10b268 <_malloc_r+0x578>
  10adec:	32000515 	stw	r8,20(r6)
  10adf0:	32000415 	stw	r8,16(r6)
  10adf4:	10007f0e 	bge	r2,zero,10aff4 <_malloc_r+0x304>
  10adf8:	00807fc4 	movi	r2,511
  10adfc:	11c0fd36 	bltu	r2,r7,10b1f4 <_malloc_r+0x504>
  10ae00:	3806d0fa 	srli	r3,r7,3
  10ae04:	01c00044 	movi	r7,1
  10ae08:	30800117 	ldw	r2,4(r6)
  10ae0c:	19400044 	addi	r5,r3,1
  10ae10:	294b883a 	add	r5,r5,r5
  10ae14:	1807d0ba 	srai	r3,r3,2
  10ae18:	294b883a 	add	r5,r5,r5
  10ae1c:	294b883a 	add	r5,r5,r5
  10ae20:	298b883a 	add	r5,r5,r6
  10ae24:	38c6983a 	sll	r3,r7,r3
  10ae28:	29c00017 	ldw	r7,0(r5)
  10ae2c:	2a7ffe04 	addi	r9,r5,-8
  10ae30:	1886b03a 	or	r3,r3,r2
  10ae34:	82400315 	stw	r9,12(r16)
  10ae38:	81c00215 	stw	r7,8(r16)
  10ae3c:	30c00115 	stw	r3,4(r6)
  10ae40:	2c000015 	stw	r16,0(r5)
  10ae44:	3c000315 	stw	r16,12(r7)
  10ae48:	2005d0ba 	srai	r2,r4,2
  10ae4c:	01400044 	movi	r5,1
  10ae50:	288a983a 	sll	r5,r5,r2
  10ae54:	19406f36 	bltu	r3,r5,10b014 <_malloc_r+0x324>
  10ae58:	28c4703a 	and	r2,r5,r3
  10ae5c:	10000a1e 	bne	r2,zero,10ae88 <_malloc_r+0x198>
  10ae60:	00bfff04 	movi	r2,-4
  10ae64:	294b883a 	add	r5,r5,r5
  10ae68:	2088703a 	and	r4,r4,r2
  10ae6c:	28c4703a 	and	r2,r5,r3
  10ae70:	21000104 	addi	r4,r4,4
  10ae74:	1000041e 	bne	r2,zero,10ae88 <_malloc_r+0x198>
  10ae78:	294b883a 	add	r5,r5,r5
  10ae7c:	28c4703a 	and	r2,r5,r3
  10ae80:	21000104 	addi	r4,r4,4
  10ae84:	103ffc26 	beq	r2,zero,10ae78 <__alt_data_end+0xfffcae78>
  10ae88:	02bfff04 	movi	r10,-4
  10ae8c:	024003c4 	movi	r9,15
  10ae90:	21800044 	addi	r6,r4,1
  10ae94:	318d883a 	add	r6,r6,r6
  10ae98:	318d883a 	add	r6,r6,r6
  10ae9c:	318d883a 	add	r6,r6,r6
  10aea0:	998d883a 	add	r6,r19,r6
  10aea4:	333ffe04 	addi	r12,r6,-8
  10aea8:	2017883a 	mov	r11,r4
  10aeac:	31800104 	addi	r6,r6,4
  10aeb0:	34000017 	ldw	r16,0(r6)
  10aeb4:	31fffd04 	addi	r7,r6,-12
  10aeb8:	81c0041e 	bne	r16,r7,10aecc <_malloc_r+0x1dc>
  10aebc:	0000fb06 	br	10b2ac <_malloc_r+0x5bc>
  10aec0:	1801030e 	bge	r3,zero,10b2d0 <_malloc_r+0x5e0>
  10aec4:	84000317 	ldw	r16,12(r16)
  10aec8:	81c0f826 	beq	r16,r7,10b2ac <_malloc_r+0x5bc>
  10aecc:	80800117 	ldw	r2,4(r16)
  10aed0:	1284703a 	and	r2,r2,r10
  10aed4:	1447c83a 	sub	r3,r2,r17
  10aed8:	48fff90e 	bge	r9,r3,10aec0 <__alt_data_end+0xfffcaec0>
  10aedc:	80800317 	ldw	r2,12(r16)
  10aee0:	81000217 	ldw	r4,8(r16)
  10aee4:	89400054 	ori	r5,r17,1
  10aee8:	81400115 	stw	r5,4(r16)
  10aeec:	20800315 	stw	r2,12(r4)
  10aef0:	11000215 	stw	r4,8(r2)
  10aef4:	8463883a 	add	r17,r16,r17
  10aef8:	9c400515 	stw	r17,20(r19)
  10aefc:	9c400415 	stw	r17,16(r19)
  10af00:	18800054 	ori	r2,r3,1
  10af04:	88800115 	stw	r2,4(r17)
  10af08:	8a000315 	stw	r8,12(r17)
  10af0c:	8a000215 	stw	r8,8(r17)
  10af10:	88e3883a 	add	r17,r17,r3
  10af14:	88c00015 	stw	r3,0(r17)
  10af18:	9009883a 	mov	r4,r18
  10af1c:	011923c0 	call	11923c <__malloc_unlock>
  10af20:	80800204 	addi	r2,r16,8
  10af24:	00001b06 	br	10af94 <_malloc_r+0x2a4>
  10af28:	04400404 	movi	r17,16
  10af2c:	89402536 	bltu	r17,r5,10afc4 <_malloc_r+0x2d4>
  10af30:	011911c0 	call	11911c <__malloc_lock>
  10af34:	00800184 	movi	r2,6
  10af38:	01000084 	movi	r4,2
  10af3c:	04c004b4 	movhi	r19,18
  10af40:	1085883a 	add	r2,r2,r2
  10af44:	9ccfeb04 	addi	r19,r19,16300
  10af48:	1085883a 	add	r2,r2,r2
  10af4c:	9885883a 	add	r2,r19,r2
  10af50:	14000117 	ldw	r16,4(r2)
  10af54:	10fffe04 	addi	r3,r2,-8
  10af58:	80c0d926 	beq	r16,r3,10b2c0 <_malloc_r+0x5d0>
  10af5c:	80c00117 	ldw	r3,4(r16)
  10af60:	81000317 	ldw	r4,12(r16)
  10af64:	00bfff04 	movi	r2,-4
  10af68:	1884703a 	and	r2,r3,r2
  10af6c:	81400217 	ldw	r5,8(r16)
  10af70:	8085883a 	add	r2,r16,r2
  10af74:	10c00117 	ldw	r3,4(r2)
  10af78:	29000315 	stw	r4,12(r5)
  10af7c:	21400215 	stw	r5,8(r4)
  10af80:	18c00054 	ori	r3,r3,1
  10af84:	10c00115 	stw	r3,4(r2)
  10af88:	9009883a 	mov	r4,r18
  10af8c:	011923c0 	call	11923c <__malloc_unlock>
  10af90:	80800204 	addi	r2,r16,8
  10af94:	dfc00a17 	ldw	ra,40(sp)
  10af98:	df000917 	ldw	fp,36(sp)
  10af9c:	ddc00817 	ldw	r23,32(sp)
  10afa0:	dd800717 	ldw	r22,28(sp)
  10afa4:	dd400617 	ldw	r21,24(sp)
  10afa8:	dd000517 	ldw	r20,20(sp)
  10afac:	dcc00417 	ldw	r19,16(sp)
  10afb0:	dc800317 	ldw	r18,12(sp)
  10afb4:	dc400217 	ldw	r17,8(sp)
  10afb8:	dc000117 	ldw	r16,4(sp)
  10afbc:	dec00b04 	addi	sp,sp,44
  10afc0:	f800283a 	ret
  10afc4:	00800304 	movi	r2,12
  10afc8:	90800015 	stw	r2,0(r18)
  10afcc:	0005883a 	mov	r2,zero
  10afd0:	003ff006 	br	10af94 <__alt_data_end+0xfffcaf94>
  10afd4:	01002004 	movi	r4,128
  10afd8:	02001004 	movi	r8,64
  10afdc:	01c00fc4 	movi	r7,63
  10afe0:	003f6106 	br	10ad68 <__alt_data_end+0xfffcad68>
  10afe4:	4009883a 	mov	r4,r8
  10afe8:	003f7506 	br	10adc0 <__alt_data_end+0xfffcadc0>
  10afec:	81000317 	ldw	r4,12(r16)
  10aff0:	003fde06 	br	10af6c <__alt_data_end+0xfffcaf6c>
  10aff4:	81c5883a 	add	r2,r16,r7
  10aff8:	11400117 	ldw	r5,4(r2)
  10affc:	9009883a 	mov	r4,r18
  10b000:	29400054 	ori	r5,r5,1
  10b004:	11400115 	stw	r5,4(r2)
  10b008:	011923c0 	call	11923c <__malloc_unlock>
  10b00c:	80800204 	addi	r2,r16,8
  10b010:	003fe006 	br	10af94 <__alt_data_end+0xfffcaf94>
  10b014:	9c000217 	ldw	r16,8(r19)
  10b018:	00bfff04 	movi	r2,-4
  10b01c:	85800117 	ldw	r22,4(r16)
  10b020:	b0ac703a 	and	r22,r22,r2
  10b024:	b4400336 	bltu	r22,r17,10b034 <_malloc_r+0x344>
  10b028:	b445c83a 	sub	r2,r22,r17
  10b02c:	00c003c4 	movi	r3,15
  10b030:	18805d16 	blt	r3,r2,10b1a8 <_malloc_r+0x4b8>
  10b034:	05c004b4 	movhi	r23,18
  10b038:	008004b4 	movhi	r2,18
  10b03c:	109ca204 	addi	r2,r2,29320
  10b040:	bdd57604 	addi	r23,r23,21976
  10b044:	15400017 	ldw	r21,0(r2)
  10b048:	b8c00017 	ldw	r3,0(r23)
  10b04c:	00bfffc4 	movi	r2,-1
  10b050:	858d883a 	add	r6,r16,r22
  10b054:	8d6b883a 	add	r21,r17,r21
  10b058:	1880ea26 	beq	r3,r2,10b404 <_malloc_r+0x714>
  10b05c:	ad4403c4 	addi	r21,r21,4111
  10b060:	00bc0004 	movi	r2,-4096
  10b064:	a8aa703a 	and	r21,r21,r2
  10b068:	a80b883a 	mov	r5,r21
  10b06c:	9009883a 	mov	r4,r18
  10b070:	d9800015 	stw	r6,0(sp)
  10b074:	010d0500 	call	10d050 <_sbrk_r>
  10b078:	1029883a 	mov	r20,r2
  10b07c:	00bfffc4 	movi	r2,-1
  10b080:	d9800017 	ldw	r6,0(sp)
  10b084:	a080e826 	beq	r20,r2,10b428 <_malloc_r+0x738>
  10b088:	a180a636 	bltu	r20,r6,10b324 <_malloc_r+0x634>
  10b08c:	070004b4 	movhi	fp,18
  10b090:	e71cca04 	addi	fp,fp,29480
  10b094:	e0800017 	ldw	r2,0(fp)
  10b098:	a887883a 	add	r3,r21,r2
  10b09c:	e0c00015 	stw	r3,0(fp)
  10b0a0:	3500e626 	beq	r6,r20,10b43c <_malloc_r+0x74c>
  10b0a4:	b9000017 	ldw	r4,0(r23)
  10b0a8:	00bfffc4 	movi	r2,-1
  10b0ac:	2080ee26 	beq	r4,r2,10b468 <_malloc_r+0x778>
  10b0b0:	a185c83a 	sub	r2,r20,r6
  10b0b4:	10c5883a 	add	r2,r2,r3
  10b0b8:	e0800015 	stw	r2,0(fp)
  10b0bc:	a0c001cc 	andi	r3,r20,7
  10b0c0:	1800bc26 	beq	r3,zero,10b3b4 <_malloc_r+0x6c4>
  10b0c4:	a0e9c83a 	sub	r20,r20,r3
  10b0c8:	00840204 	movi	r2,4104
  10b0cc:	a5000204 	addi	r20,r20,8
  10b0d0:	10c7c83a 	sub	r3,r2,r3
  10b0d4:	a545883a 	add	r2,r20,r21
  10b0d8:	1083ffcc 	andi	r2,r2,4095
  10b0dc:	18abc83a 	sub	r21,r3,r2
  10b0e0:	a80b883a 	mov	r5,r21
  10b0e4:	9009883a 	mov	r4,r18
  10b0e8:	010d0500 	call	10d050 <_sbrk_r>
  10b0ec:	00ffffc4 	movi	r3,-1
  10b0f0:	10c0e126 	beq	r2,r3,10b478 <_malloc_r+0x788>
  10b0f4:	1505c83a 	sub	r2,r2,r20
  10b0f8:	1545883a 	add	r2,r2,r21
  10b0fc:	10800054 	ori	r2,r2,1
  10b100:	e0c00017 	ldw	r3,0(fp)
  10b104:	9d000215 	stw	r20,8(r19)
  10b108:	a0800115 	stw	r2,4(r20)
  10b10c:	a8c7883a 	add	r3,r21,r3
  10b110:	e0c00015 	stw	r3,0(fp)
  10b114:	84c00e26 	beq	r16,r19,10b150 <_malloc_r+0x460>
  10b118:	018003c4 	movi	r6,15
  10b11c:	3580a72e 	bgeu	r6,r22,10b3bc <_malloc_r+0x6cc>
  10b120:	81400117 	ldw	r5,4(r16)
  10b124:	013ffe04 	movi	r4,-8
  10b128:	b0bffd04 	addi	r2,r22,-12
  10b12c:	1104703a 	and	r2,r2,r4
  10b130:	2900004c 	andi	r4,r5,1
  10b134:	2088b03a 	or	r4,r4,r2
  10b138:	81000115 	stw	r4,4(r16)
  10b13c:	01400144 	movi	r5,5
  10b140:	8089883a 	add	r4,r16,r2
  10b144:	21400115 	stw	r5,4(r4)
  10b148:	21400215 	stw	r5,8(r4)
  10b14c:	3080cd36 	bltu	r6,r2,10b484 <_malloc_r+0x794>
  10b150:	008004b4 	movhi	r2,18
  10b154:	109ca104 	addi	r2,r2,29316
  10b158:	11000017 	ldw	r4,0(r2)
  10b15c:	20c0012e 	bgeu	r4,r3,10b164 <_malloc_r+0x474>
  10b160:	10c00015 	stw	r3,0(r2)
  10b164:	008004b4 	movhi	r2,18
  10b168:	109ca004 	addi	r2,r2,29312
  10b16c:	11000017 	ldw	r4,0(r2)
  10b170:	9c000217 	ldw	r16,8(r19)
  10b174:	20c0012e 	bgeu	r4,r3,10b17c <_malloc_r+0x48c>
  10b178:	10c00015 	stw	r3,0(r2)
  10b17c:	80c00117 	ldw	r3,4(r16)
  10b180:	00bfff04 	movi	r2,-4
  10b184:	1886703a 	and	r3,r3,r2
  10b188:	1c45c83a 	sub	r2,r3,r17
  10b18c:	1c400236 	bltu	r3,r17,10b198 <_malloc_r+0x4a8>
  10b190:	00c003c4 	movi	r3,15
  10b194:	18800416 	blt	r3,r2,10b1a8 <_malloc_r+0x4b8>
  10b198:	9009883a 	mov	r4,r18
  10b19c:	011923c0 	call	11923c <__malloc_unlock>
  10b1a0:	0005883a 	mov	r2,zero
  10b1a4:	003f7b06 	br	10af94 <__alt_data_end+0xfffcaf94>
  10b1a8:	88c00054 	ori	r3,r17,1
  10b1ac:	80c00115 	stw	r3,4(r16)
  10b1b0:	8463883a 	add	r17,r16,r17
  10b1b4:	10800054 	ori	r2,r2,1
  10b1b8:	9c400215 	stw	r17,8(r19)
  10b1bc:	88800115 	stw	r2,4(r17)
  10b1c0:	9009883a 	mov	r4,r18
  10b1c4:	011923c0 	call	11923c <__malloc_unlock>
  10b1c8:	80800204 	addi	r2,r16,8
  10b1cc:	003f7106 	br	10af94 <__alt_data_end+0xfffcaf94>
  10b1d0:	00c00504 	movi	r3,20
  10b1d4:	18804a2e 	bgeu	r3,r2,10b300 <_malloc_r+0x610>
  10b1d8:	00c01504 	movi	r3,84
  10b1dc:	18806e36 	bltu	r3,r2,10b398 <_malloc_r+0x6a8>
  10b1e0:	8804d33a 	srli	r2,r17,12
  10b1e4:	12001bc4 	addi	r8,r2,111
  10b1e8:	11c01b84 	addi	r7,r2,110
  10b1ec:	4209883a 	add	r4,r8,r8
  10b1f0:	003edd06 	br	10ad68 <__alt_data_end+0xfffcad68>
  10b1f4:	3804d27a 	srli	r2,r7,9
  10b1f8:	00c00104 	movi	r3,4
  10b1fc:	1880442e 	bgeu	r3,r2,10b310 <_malloc_r+0x620>
  10b200:	00c00504 	movi	r3,20
  10b204:	18808136 	bltu	r3,r2,10b40c <_malloc_r+0x71c>
  10b208:	11401704 	addi	r5,r2,92
  10b20c:	10c016c4 	addi	r3,r2,91
  10b210:	294b883a 	add	r5,r5,r5
  10b214:	294b883a 	add	r5,r5,r5
  10b218:	294b883a 	add	r5,r5,r5
  10b21c:	994b883a 	add	r5,r19,r5
  10b220:	28800017 	ldw	r2,0(r5)
  10b224:	018004b4 	movhi	r6,18
  10b228:	297ffe04 	addi	r5,r5,-8
  10b22c:	318feb04 	addi	r6,r6,16300
  10b230:	28806526 	beq	r5,r2,10b3c8 <_malloc_r+0x6d8>
  10b234:	01bfff04 	movi	r6,-4
  10b238:	10c00117 	ldw	r3,4(r2)
  10b23c:	1986703a 	and	r3,r3,r6
  10b240:	38c0022e 	bgeu	r7,r3,10b24c <_malloc_r+0x55c>
  10b244:	10800217 	ldw	r2,8(r2)
  10b248:	28bffb1e 	bne	r5,r2,10b238 <__alt_data_end+0xfffcb238>
  10b24c:	11400317 	ldw	r5,12(r2)
  10b250:	98c00117 	ldw	r3,4(r19)
  10b254:	81400315 	stw	r5,12(r16)
  10b258:	80800215 	stw	r2,8(r16)
  10b25c:	2c000215 	stw	r16,8(r5)
  10b260:	14000315 	stw	r16,12(r2)
  10b264:	003ef806 	br	10ae48 <__alt_data_end+0xfffcae48>
  10b268:	88c00054 	ori	r3,r17,1
  10b26c:	80c00115 	stw	r3,4(r16)
  10b270:	8463883a 	add	r17,r16,r17
  10b274:	34400515 	stw	r17,20(r6)
  10b278:	34400415 	stw	r17,16(r6)
  10b27c:	10c00054 	ori	r3,r2,1
  10b280:	8a000315 	stw	r8,12(r17)
  10b284:	8a000215 	stw	r8,8(r17)
  10b288:	88c00115 	stw	r3,4(r17)
  10b28c:	88a3883a 	add	r17,r17,r2
  10b290:	88800015 	stw	r2,0(r17)
  10b294:	9009883a 	mov	r4,r18
  10b298:	011923c0 	call	11923c <__malloc_unlock>
  10b29c:	80800204 	addi	r2,r16,8
  10b2a0:	003f3c06 	br	10af94 <__alt_data_end+0xfffcaf94>
  10b2a4:	30c00117 	ldw	r3,4(r6)
  10b2a8:	003ee706 	br	10ae48 <__alt_data_end+0xfffcae48>
  10b2ac:	5ac00044 	addi	r11,r11,1
  10b2b0:	588000cc 	andi	r2,r11,3
  10b2b4:	31800204 	addi	r6,r6,8
  10b2b8:	103efd1e 	bne	r2,zero,10aeb0 <__alt_data_end+0xfffcaeb0>
  10b2bc:	00002406 	br	10b350 <_malloc_r+0x660>
  10b2c0:	14000317 	ldw	r16,12(r2)
  10b2c4:	143f251e 	bne	r2,r16,10af5c <__alt_data_end+0xfffcaf5c>
  10b2c8:	21000084 	addi	r4,r4,2
  10b2cc:	003ebc06 	br	10adc0 <__alt_data_end+0xfffcadc0>
  10b2d0:	8085883a 	add	r2,r16,r2
  10b2d4:	10c00117 	ldw	r3,4(r2)
  10b2d8:	81000317 	ldw	r4,12(r16)
  10b2dc:	81400217 	ldw	r5,8(r16)
  10b2e0:	18c00054 	ori	r3,r3,1
  10b2e4:	10c00115 	stw	r3,4(r2)
  10b2e8:	29000315 	stw	r4,12(r5)
  10b2ec:	21400215 	stw	r5,8(r4)
  10b2f0:	9009883a 	mov	r4,r18
  10b2f4:	011923c0 	call	11923c <__malloc_unlock>
  10b2f8:	80800204 	addi	r2,r16,8
  10b2fc:	003f2506 	br	10af94 <__alt_data_end+0xfffcaf94>
  10b300:	12001704 	addi	r8,r2,92
  10b304:	11c016c4 	addi	r7,r2,91
  10b308:	4209883a 	add	r4,r8,r8
  10b30c:	003e9606 	br	10ad68 <__alt_data_end+0xfffcad68>
  10b310:	3804d1ba 	srli	r2,r7,6
  10b314:	11400e44 	addi	r5,r2,57
  10b318:	10c00e04 	addi	r3,r2,56
  10b31c:	294b883a 	add	r5,r5,r5
  10b320:	003fbc06 	br	10b214 <__alt_data_end+0xfffcb214>
  10b324:	84ff5926 	beq	r16,r19,10b08c <__alt_data_end+0xfffcb08c>
  10b328:	008004b4 	movhi	r2,18
  10b32c:	108feb04 	addi	r2,r2,16300
  10b330:	14000217 	ldw	r16,8(r2)
  10b334:	00bfff04 	movi	r2,-4
  10b338:	80c00117 	ldw	r3,4(r16)
  10b33c:	1886703a 	and	r3,r3,r2
  10b340:	003f9106 	br	10b188 <__alt_data_end+0xfffcb188>
  10b344:	60800217 	ldw	r2,8(r12)
  10b348:	213fffc4 	addi	r4,r4,-1
  10b34c:	1300651e 	bne	r2,r12,10b4e4 <_malloc_r+0x7f4>
  10b350:	208000cc 	andi	r2,r4,3
  10b354:	633ffe04 	addi	r12,r12,-8
  10b358:	103ffa1e 	bne	r2,zero,10b344 <__alt_data_end+0xfffcb344>
  10b35c:	98800117 	ldw	r2,4(r19)
  10b360:	0146303a 	nor	r3,zero,r5
  10b364:	1884703a 	and	r2,r3,r2
  10b368:	98800115 	stw	r2,4(r19)
  10b36c:	294b883a 	add	r5,r5,r5
  10b370:	117f2836 	bltu	r2,r5,10b014 <__alt_data_end+0xfffcb014>
  10b374:	283f2726 	beq	r5,zero,10b014 <__alt_data_end+0xfffcb014>
  10b378:	2886703a 	and	r3,r5,r2
  10b37c:	5809883a 	mov	r4,r11
  10b380:	183ec31e 	bne	r3,zero,10ae90 <__alt_data_end+0xfffcae90>
  10b384:	294b883a 	add	r5,r5,r5
  10b388:	2886703a 	and	r3,r5,r2
  10b38c:	21000104 	addi	r4,r4,4
  10b390:	183ffc26 	beq	r3,zero,10b384 <__alt_data_end+0xfffcb384>
  10b394:	003ebe06 	br	10ae90 <__alt_data_end+0xfffcae90>
  10b398:	00c05504 	movi	r3,340
  10b39c:	18801236 	bltu	r3,r2,10b3e8 <_malloc_r+0x6f8>
  10b3a0:	8804d3fa 	srli	r2,r17,15
  10b3a4:	12001e04 	addi	r8,r2,120
  10b3a8:	11c01dc4 	addi	r7,r2,119
  10b3ac:	4209883a 	add	r4,r8,r8
  10b3b0:	003e6d06 	br	10ad68 <__alt_data_end+0xfffcad68>
  10b3b4:	00c40004 	movi	r3,4096
  10b3b8:	003f4606 	br	10b0d4 <__alt_data_end+0xfffcb0d4>
  10b3bc:	00800044 	movi	r2,1
  10b3c0:	a0800115 	stw	r2,4(r20)
  10b3c4:	003f7406 	br	10b198 <__alt_data_end+0xfffcb198>
  10b3c8:	1805d0ba 	srai	r2,r3,2
  10b3cc:	01c00044 	movi	r7,1
  10b3d0:	30c00117 	ldw	r3,4(r6)
  10b3d4:	388e983a 	sll	r7,r7,r2
  10b3d8:	2805883a 	mov	r2,r5
  10b3dc:	38c6b03a 	or	r3,r7,r3
  10b3e0:	30c00115 	stw	r3,4(r6)
  10b3e4:	003f9b06 	br	10b254 <__alt_data_end+0xfffcb254>
  10b3e8:	00c15504 	movi	r3,1364
  10b3ec:	18801a36 	bltu	r3,r2,10b458 <_malloc_r+0x768>
  10b3f0:	8804d4ba 	srli	r2,r17,18
  10b3f4:	12001f44 	addi	r8,r2,125
  10b3f8:	11c01f04 	addi	r7,r2,124
  10b3fc:	4209883a 	add	r4,r8,r8
  10b400:	003e5906 	br	10ad68 <__alt_data_end+0xfffcad68>
  10b404:	ad400404 	addi	r21,r21,16
  10b408:	003f1706 	br	10b068 <__alt_data_end+0xfffcb068>
  10b40c:	00c01504 	movi	r3,84
  10b410:	18802336 	bltu	r3,r2,10b4a0 <_malloc_r+0x7b0>
  10b414:	3804d33a 	srli	r2,r7,12
  10b418:	11401bc4 	addi	r5,r2,111
  10b41c:	10c01b84 	addi	r3,r2,110
  10b420:	294b883a 	add	r5,r5,r5
  10b424:	003f7b06 	br	10b214 <__alt_data_end+0xfffcb214>
  10b428:	9c000217 	ldw	r16,8(r19)
  10b42c:	00bfff04 	movi	r2,-4
  10b430:	80c00117 	ldw	r3,4(r16)
  10b434:	1886703a 	and	r3,r3,r2
  10b438:	003f5306 	br	10b188 <__alt_data_end+0xfffcb188>
  10b43c:	3083ffcc 	andi	r2,r6,4095
  10b440:	103f181e 	bne	r2,zero,10b0a4 <__alt_data_end+0xfffcb0a4>
  10b444:	99000217 	ldw	r4,8(r19)
  10b448:	b545883a 	add	r2,r22,r21
  10b44c:	10800054 	ori	r2,r2,1
  10b450:	20800115 	stw	r2,4(r4)
  10b454:	003f3e06 	br	10b150 <__alt_data_end+0xfffcb150>
  10b458:	01003f84 	movi	r4,254
  10b45c:	02001fc4 	movi	r8,127
  10b460:	01c01f84 	movi	r7,126
  10b464:	003e4006 	br	10ad68 <__alt_data_end+0xfffcad68>
  10b468:	008004b4 	movhi	r2,18
  10b46c:	10957604 	addi	r2,r2,21976
  10b470:	15000015 	stw	r20,0(r2)
  10b474:	003f1106 	br	10b0bc <__alt_data_end+0xfffcb0bc>
  10b478:	00800044 	movi	r2,1
  10b47c:	002b883a 	mov	r21,zero
  10b480:	003f1f06 	br	10b100 <__alt_data_end+0xfffcb100>
  10b484:	81400204 	addi	r5,r16,8
  10b488:	9009883a 	mov	r4,r18
  10b48c:	010a0680 	call	10a068 <_free_r>
  10b490:	008004b4 	movhi	r2,18
  10b494:	109cca04 	addi	r2,r2,29480
  10b498:	10c00017 	ldw	r3,0(r2)
  10b49c:	003f2c06 	br	10b150 <__alt_data_end+0xfffcb150>
  10b4a0:	00c05504 	movi	r3,340
  10b4a4:	18800536 	bltu	r3,r2,10b4bc <_malloc_r+0x7cc>
  10b4a8:	3804d3fa 	srli	r2,r7,15
  10b4ac:	11401e04 	addi	r5,r2,120
  10b4b0:	10c01dc4 	addi	r3,r2,119
  10b4b4:	294b883a 	add	r5,r5,r5
  10b4b8:	003f5606 	br	10b214 <__alt_data_end+0xfffcb214>
  10b4bc:	00c15504 	movi	r3,1364
  10b4c0:	18800536 	bltu	r3,r2,10b4d8 <_malloc_r+0x7e8>
  10b4c4:	3804d4ba 	srli	r2,r7,18
  10b4c8:	11401f44 	addi	r5,r2,125
  10b4cc:	10c01f04 	addi	r3,r2,124
  10b4d0:	294b883a 	add	r5,r5,r5
  10b4d4:	003f4f06 	br	10b214 <__alt_data_end+0xfffcb214>
  10b4d8:	01403f84 	movi	r5,254
  10b4dc:	00c01f84 	movi	r3,126
  10b4e0:	003f4c06 	br	10b214 <__alt_data_end+0xfffcb214>
  10b4e4:	98800117 	ldw	r2,4(r19)
  10b4e8:	003fa006 	br	10b36c <__alt_data_end+0xfffcb36c>
  10b4ec:	8808d0fa 	srli	r4,r17,3
  10b4f0:	20800044 	addi	r2,r4,1
  10b4f4:	1085883a 	add	r2,r2,r2
  10b4f8:	003e9006 	br	10af3c <__alt_data_end+0xfffcaf3c>

0010b4fc <_mbrtowc_r>:
  10b4fc:	defff704 	addi	sp,sp,-36
  10b500:	008004b4 	movhi	r2,18
  10b504:	dc800715 	stw	r18,28(sp)
  10b508:	dc400615 	stw	r17,24(sp)
  10b50c:	dc000515 	stw	r16,20(sp)
  10b510:	10957804 	addi	r2,r2,21984
  10b514:	dfc00815 	stw	ra,32(sp)
  10b518:	2021883a 	mov	r16,r4
  10b51c:	dc400917 	ldw	r17,36(sp)
  10b520:	14800017 	ldw	r18,0(r2)
  10b524:	30001626 	beq	r6,zero,10b580 <_mbrtowc_r+0x84>
  10b528:	d9400215 	stw	r5,8(sp)
  10b52c:	d9800315 	stw	r6,12(sp)
  10b530:	d9c00415 	stw	r7,16(sp)
  10b534:	010aa740 	call	10aa74 <__locale_charset>
  10b538:	d9c00417 	ldw	r7,16(sp)
  10b53c:	d9800317 	ldw	r6,12(sp)
  10b540:	d9400217 	ldw	r5,8(sp)
  10b544:	d8800015 	stw	r2,0(sp)
  10b548:	dc400115 	stw	r17,4(sp)
  10b54c:	8009883a 	mov	r4,r16
  10b550:	903ee83a 	callr	r18
  10b554:	00ffffc4 	movi	r3,-1
  10b558:	10c0031e 	bne	r2,r3,10b568 <_mbrtowc_r+0x6c>
  10b55c:	88000015 	stw	zero,0(r17)
  10b560:	00c02284 	movi	r3,138
  10b564:	80c00015 	stw	r3,0(r16)
  10b568:	dfc00817 	ldw	ra,32(sp)
  10b56c:	dc800717 	ldw	r18,28(sp)
  10b570:	dc400617 	ldw	r17,24(sp)
  10b574:	dc000517 	ldw	r16,20(sp)
  10b578:	dec00904 	addi	sp,sp,36
  10b57c:	f800283a 	ret
  10b580:	010aa740 	call	10aa74 <__locale_charset>
  10b584:	018004b4 	movhi	r6,18
  10b588:	318c8f04 	addi	r6,r6,12860
  10b58c:	dc400115 	stw	r17,4(sp)
  10b590:	d8800015 	stw	r2,0(sp)
  10b594:	01c00044 	movi	r7,1
  10b598:	000b883a 	mov	r5,zero
  10b59c:	8009883a 	mov	r4,r16
  10b5a0:	903ee83a 	callr	r18
  10b5a4:	003feb06 	br	10b554 <__alt_data_end+0xfffcb554>

0010b5a8 <mbrtowc>:
  10b5a8:	defff704 	addi	sp,sp,-36
  10b5ac:	008004b4 	movhi	r2,18
  10b5b0:	dc800415 	stw	r18,16(sp)
  10b5b4:	dc400315 	stw	r17,12(sp)
  10b5b8:	10957404 	addi	r2,r2,21968
  10b5bc:	dfc00815 	stw	ra,32(sp)
  10b5c0:	dd400715 	stw	r21,28(sp)
  10b5c4:	dd000615 	stw	r20,24(sp)
  10b5c8:	dcc00515 	stw	r19,20(sp)
  10b5cc:	dc000215 	stw	r16,8(sp)
  10b5d0:	3825883a 	mov	r18,r7
  10b5d4:	14400017 	ldw	r17,0(r2)
  10b5d8:	28001c26 	beq	r5,zero,10b64c <mbrtowc+0xa4>
  10b5dc:	008004b4 	movhi	r2,18
  10b5e0:	10957804 	addi	r2,r2,21984
  10b5e4:	15400017 	ldw	r21,0(r2)
  10b5e8:	2821883a 	mov	r16,r5
  10b5ec:	2027883a 	mov	r19,r4
  10b5f0:	3029883a 	mov	r20,r6
  10b5f4:	010aa740 	call	10aa74 <__locale_charset>
  10b5f8:	d8800015 	stw	r2,0(sp)
  10b5fc:	dc800115 	stw	r18,4(sp)
  10b600:	a00f883a 	mov	r7,r20
  10b604:	800d883a 	mov	r6,r16
  10b608:	980b883a 	mov	r5,r19
  10b60c:	8809883a 	mov	r4,r17
  10b610:	a83ee83a 	callr	r21
  10b614:	00ffffc4 	movi	r3,-1
  10b618:	10c0031e 	bne	r2,r3,10b628 <mbrtowc+0x80>
  10b61c:	90000015 	stw	zero,0(r18)
  10b620:	00c02284 	movi	r3,138
  10b624:	88c00015 	stw	r3,0(r17)
  10b628:	dfc00817 	ldw	ra,32(sp)
  10b62c:	dd400717 	ldw	r21,28(sp)
  10b630:	dd000617 	ldw	r20,24(sp)
  10b634:	dcc00517 	ldw	r19,20(sp)
  10b638:	dc800417 	ldw	r18,16(sp)
  10b63c:	dc400317 	ldw	r17,12(sp)
  10b640:	dc000217 	ldw	r16,8(sp)
  10b644:	dec00904 	addi	sp,sp,36
  10b648:	f800283a 	ret
  10b64c:	008004b4 	movhi	r2,18
  10b650:	10957804 	addi	r2,r2,21984
  10b654:	14000017 	ldw	r16,0(r2)
  10b658:	010aa740 	call	10aa74 <__locale_charset>
  10b65c:	018004b4 	movhi	r6,18
  10b660:	318c8f04 	addi	r6,r6,12860
  10b664:	dc800115 	stw	r18,4(sp)
  10b668:	d8800015 	stw	r2,0(sp)
  10b66c:	01c00044 	movi	r7,1
  10b670:	000b883a 	mov	r5,zero
  10b674:	8809883a 	mov	r4,r17
  10b678:	803ee83a 	callr	r16
  10b67c:	003fe506 	br	10b614 <__alt_data_end+0xfffcb614>

0010b680 <__ascii_mbtowc>:
  10b680:	deffff04 	addi	sp,sp,-4
  10b684:	28000826 	beq	r5,zero,10b6a8 <__ascii_mbtowc+0x28>
  10b688:	30000926 	beq	r6,zero,10b6b0 <__ascii_mbtowc+0x30>
  10b68c:	38000b26 	beq	r7,zero,10b6bc <__ascii_mbtowc+0x3c>
  10b690:	30800003 	ldbu	r2,0(r6)
  10b694:	28800015 	stw	r2,0(r5)
  10b698:	30800003 	ldbu	r2,0(r6)
  10b69c:	1004c03a 	cmpne	r2,r2,zero
  10b6a0:	dec00104 	addi	sp,sp,4
  10b6a4:	f800283a 	ret
  10b6a8:	d80b883a 	mov	r5,sp
  10b6ac:	303ff71e 	bne	r6,zero,10b68c <__alt_data_end+0xfffcb68c>
  10b6b0:	0005883a 	mov	r2,zero
  10b6b4:	dec00104 	addi	sp,sp,4
  10b6b8:	f800283a 	ret
  10b6bc:	00bfff84 	movi	r2,-2
  10b6c0:	003ff706 	br	10b6a0 <__alt_data_end+0xfffcb6a0>

0010b6c4 <_mbtowc_r>:
  10b6c4:	008004b4 	movhi	r2,18
  10b6c8:	defff804 	addi	sp,sp,-32
  10b6cc:	10957804 	addi	r2,r2,21984
  10b6d0:	dfc00715 	stw	ra,28(sp)
  10b6d4:	dc000615 	stw	r16,24(sp)
  10b6d8:	14000017 	ldw	r16,0(r2)
  10b6dc:	d9000215 	stw	r4,8(sp)
  10b6e0:	d9400315 	stw	r5,12(sp)
  10b6e4:	d9800415 	stw	r6,16(sp)
  10b6e8:	d9c00515 	stw	r7,20(sp)
  10b6ec:	010aa740 	call	10aa74 <__locale_charset>
  10b6f0:	d8800015 	stw	r2,0(sp)
  10b6f4:	d8800817 	ldw	r2,32(sp)
  10b6f8:	d9c00517 	ldw	r7,20(sp)
  10b6fc:	d9800417 	ldw	r6,16(sp)
  10b700:	d9400317 	ldw	r5,12(sp)
  10b704:	d9000217 	ldw	r4,8(sp)
  10b708:	d8800115 	stw	r2,4(sp)
  10b70c:	803ee83a 	callr	r16
  10b710:	dfc00717 	ldw	ra,28(sp)
  10b714:	dc000617 	ldw	r16,24(sp)
  10b718:	dec00804 	addi	sp,sp,32
  10b71c:	f800283a 	ret

0010b720 <memchr>:
  10b720:	208000cc 	andi	r2,r4,3
  10b724:	280f883a 	mov	r7,r5
  10b728:	10003426 	beq	r2,zero,10b7fc <memchr+0xdc>
  10b72c:	30bfffc4 	addi	r2,r6,-1
  10b730:	30001a26 	beq	r6,zero,10b79c <memchr+0x7c>
  10b734:	20c00003 	ldbu	r3,0(r4)
  10b738:	29803fcc 	andi	r6,r5,255
  10b73c:	30c0051e 	bne	r6,r3,10b754 <memchr+0x34>
  10b740:	00001806 	br	10b7a4 <memchr+0x84>
  10b744:	10001526 	beq	r2,zero,10b79c <memchr+0x7c>
  10b748:	20c00003 	ldbu	r3,0(r4)
  10b74c:	10bfffc4 	addi	r2,r2,-1
  10b750:	30c01426 	beq	r6,r3,10b7a4 <memchr+0x84>
  10b754:	21000044 	addi	r4,r4,1
  10b758:	20c000cc 	andi	r3,r4,3
  10b75c:	183ff91e 	bne	r3,zero,10b744 <__alt_data_end+0xfffcb744>
  10b760:	020000c4 	movi	r8,3
  10b764:	40801136 	bltu	r8,r2,10b7ac <memchr+0x8c>
  10b768:	10000c26 	beq	r2,zero,10b79c <memchr+0x7c>
  10b76c:	20c00003 	ldbu	r3,0(r4)
  10b770:	29403fcc 	andi	r5,r5,255
  10b774:	28c00b26 	beq	r5,r3,10b7a4 <memchr+0x84>
  10b778:	20c00044 	addi	r3,r4,1
  10b77c:	39803fcc 	andi	r6,r7,255
  10b780:	2089883a 	add	r4,r4,r2
  10b784:	00000306 	br	10b794 <memchr+0x74>
  10b788:	18c00044 	addi	r3,r3,1
  10b78c:	197fffc3 	ldbu	r5,-1(r3)
  10b790:	31400526 	beq	r6,r5,10b7a8 <memchr+0x88>
  10b794:	1805883a 	mov	r2,r3
  10b798:	20fffb1e 	bne	r4,r3,10b788 <__alt_data_end+0xfffcb788>
  10b79c:	0005883a 	mov	r2,zero
  10b7a0:	f800283a 	ret
  10b7a4:	2005883a 	mov	r2,r4
  10b7a8:	f800283a 	ret
  10b7ac:	28c03fcc 	andi	r3,r5,255
  10b7b0:	1812923a 	slli	r9,r3,8
  10b7b4:	02ffbff4 	movhi	r11,65279
  10b7b8:	02a02074 	movhi	r10,32897
  10b7bc:	48d2b03a 	or	r9,r9,r3
  10b7c0:	4806943a 	slli	r3,r9,16
  10b7c4:	5affbfc4 	addi	r11,r11,-257
  10b7c8:	52a02004 	addi	r10,r10,-32640
  10b7cc:	48d2b03a 	or	r9,r9,r3
  10b7d0:	20c00017 	ldw	r3,0(r4)
  10b7d4:	48c6f03a 	xor	r3,r9,r3
  10b7d8:	1acd883a 	add	r6,r3,r11
  10b7dc:	00c6303a 	nor	r3,zero,r3
  10b7e0:	30c6703a 	and	r3,r6,r3
  10b7e4:	1a86703a 	and	r3,r3,r10
  10b7e8:	183fe01e 	bne	r3,zero,10b76c <__alt_data_end+0xfffcb76c>
  10b7ec:	10bfff04 	addi	r2,r2,-4
  10b7f0:	21000104 	addi	r4,r4,4
  10b7f4:	40bff636 	bltu	r8,r2,10b7d0 <__alt_data_end+0xfffcb7d0>
  10b7f8:	003fdb06 	br	10b768 <__alt_data_end+0xfffcb768>
  10b7fc:	3005883a 	mov	r2,r6
  10b800:	003fd706 	br	10b760 <__alt_data_end+0xfffcb760>

0010b804 <memmove>:
  10b804:	2005883a 	mov	r2,r4
  10b808:	29000b2e 	bgeu	r5,r4,10b838 <memmove+0x34>
  10b80c:	298f883a 	add	r7,r5,r6
  10b810:	21c0092e 	bgeu	r4,r7,10b838 <memmove+0x34>
  10b814:	2187883a 	add	r3,r4,r6
  10b818:	198bc83a 	sub	r5,r3,r6
  10b81c:	30004826 	beq	r6,zero,10b940 <memmove+0x13c>
  10b820:	39ffffc4 	addi	r7,r7,-1
  10b824:	39000003 	ldbu	r4,0(r7)
  10b828:	18ffffc4 	addi	r3,r3,-1
  10b82c:	19000005 	stb	r4,0(r3)
  10b830:	28fffb1e 	bne	r5,r3,10b820 <__alt_data_end+0xfffcb820>
  10b834:	f800283a 	ret
  10b838:	00c003c4 	movi	r3,15
  10b83c:	1980412e 	bgeu	r3,r6,10b944 <memmove+0x140>
  10b840:	2886b03a 	or	r3,r5,r2
  10b844:	18c000cc 	andi	r3,r3,3
  10b848:	1800401e 	bne	r3,zero,10b94c <memmove+0x148>
  10b84c:	33fffc04 	addi	r15,r6,-16
  10b850:	781ed13a 	srli	r15,r15,4
  10b854:	28c00104 	addi	r3,r5,4
  10b858:	13400104 	addi	r13,r2,4
  10b85c:	781c913a 	slli	r14,r15,4
  10b860:	2b000204 	addi	r12,r5,8
  10b864:	12c00204 	addi	r11,r2,8
  10b868:	73800504 	addi	r14,r14,20
  10b86c:	2a800304 	addi	r10,r5,12
  10b870:	12400304 	addi	r9,r2,12
  10b874:	2b9d883a 	add	r14,r5,r14
  10b878:	2811883a 	mov	r8,r5
  10b87c:	100f883a 	mov	r7,r2
  10b880:	41000017 	ldw	r4,0(r8)
  10b884:	39c00404 	addi	r7,r7,16
  10b888:	18c00404 	addi	r3,r3,16
  10b88c:	393ffc15 	stw	r4,-16(r7)
  10b890:	193ffc17 	ldw	r4,-16(r3)
  10b894:	6b400404 	addi	r13,r13,16
  10b898:	5ac00404 	addi	r11,r11,16
  10b89c:	693ffc15 	stw	r4,-16(r13)
  10b8a0:	61000017 	ldw	r4,0(r12)
  10b8a4:	4a400404 	addi	r9,r9,16
  10b8a8:	42000404 	addi	r8,r8,16
  10b8ac:	593ffc15 	stw	r4,-16(r11)
  10b8b0:	51000017 	ldw	r4,0(r10)
  10b8b4:	63000404 	addi	r12,r12,16
  10b8b8:	52800404 	addi	r10,r10,16
  10b8bc:	493ffc15 	stw	r4,-16(r9)
  10b8c0:	1bbfef1e 	bne	r3,r14,10b880 <__alt_data_end+0xfffcb880>
  10b8c4:	79000044 	addi	r4,r15,1
  10b8c8:	2008913a 	slli	r4,r4,4
  10b8cc:	328003cc 	andi	r10,r6,15
  10b8d0:	02c000c4 	movi	r11,3
  10b8d4:	1107883a 	add	r3,r2,r4
  10b8d8:	290b883a 	add	r5,r5,r4
  10b8dc:	5a801e2e 	bgeu	r11,r10,10b958 <memmove+0x154>
  10b8e0:	1813883a 	mov	r9,r3
  10b8e4:	2811883a 	mov	r8,r5
  10b8e8:	500f883a 	mov	r7,r10
  10b8ec:	41000017 	ldw	r4,0(r8)
  10b8f0:	4a400104 	addi	r9,r9,4
  10b8f4:	39ffff04 	addi	r7,r7,-4
  10b8f8:	493fff15 	stw	r4,-4(r9)
  10b8fc:	42000104 	addi	r8,r8,4
  10b900:	59fffa36 	bltu	r11,r7,10b8ec <__alt_data_end+0xfffcb8ec>
  10b904:	513fff04 	addi	r4,r10,-4
  10b908:	2008d0ba 	srli	r4,r4,2
  10b90c:	318000cc 	andi	r6,r6,3
  10b910:	21000044 	addi	r4,r4,1
  10b914:	2109883a 	add	r4,r4,r4
  10b918:	2109883a 	add	r4,r4,r4
  10b91c:	1907883a 	add	r3,r3,r4
  10b920:	290b883a 	add	r5,r5,r4
  10b924:	30000b26 	beq	r6,zero,10b954 <memmove+0x150>
  10b928:	198d883a 	add	r6,r3,r6
  10b92c:	29c00003 	ldbu	r7,0(r5)
  10b930:	18c00044 	addi	r3,r3,1
  10b934:	29400044 	addi	r5,r5,1
  10b938:	19ffffc5 	stb	r7,-1(r3)
  10b93c:	19bffb1e 	bne	r3,r6,10b92c <__alt_data_end+0xfffcb92c>
  10b940:	f800283a 	ret
  10b944:	1007883a 	mov	r3,r2
  10b948:	003ff606 	br	10b924 <__alt_data_end+0xfffcb924>
  10b94c:	1007883a 	mov	r3,r2
  10b950:	003ff506 	br	10b928 <__alt_data_end+0xfffcb928>
  10b954:	f800283a 	ret
  10b958:	500d883a 	mov	r6,r10
  10b95c:	003ff106 	br	10b924 <__alt_data_end+0xfffcb924>

0010b960 <_Balloc>:
  10b960:	20801317 	ldw	r2,76(r4)
  10b964:	defffc04 	addi	sp,sp,-16
  10b968:	dc400115 	stw	r17,4(sp)
  10b96c:	dc000015 	stw	r16,0(sp)
  10b970:	dfc00315 	stw	ra,12(sp)
  10b974:	dc800215 	stw	r18,8(sp)
  10b978:	2023883a 	mov	r17,r4
  10b97c:	2821883a 	mov	r16,r5
  10b980:	10000f26 	beq	r2,zero,10b9c0 <_Balloc+0x60>
  10b984:	8407883a 	add	r3,r16,r16
  10b988:	18c7883a 	add	r3,r3,r3
  10b98c:	10c7883a 	add	r3,r2,r3
  10b990:	18800017 	ldw	r2,0(r3)
  10b994:	10001126 	beq	r2,zero,10b9dc <_Balloc+0x7c>
  10b998:	11000017 	ldw	r4,0(r2)
  10b99c:	19000015 	stw	r4,0(r3)
  10b9a0:	10000415 	stw	zero,16(r2)
  10b9a4:	10000315 	stw	zero,12(r2)
  10b9a8:	dfc00317 	ldw	ra,12(sp)
  10b9ac:	dc800217 	ldw	r18,8(sp)
  10b9b0:	dc400117 	ldw	r17,4(sp)
  10b9b4:	dc000017 	ldw	r16,0(sp)
  10b9b8:	dec00404 	addi	sp,sp,16
  10b9bc:	f800283a 	ret
  10b9c0:	01800844 	movi	r6,33
  10b9c4:	01400104 	movi	r5,4
  10b9c8:	01136b40 	call	1136b4 <_calloc_r>
  10b9cc:	88801315 	stw	r2,76(r17)
  10b9d0:	103fec1e 	bne	r2,zero,10b984 <__alt_data_end+0xfffcb984>
  10b9d4:	0005883a 	mov	r2,zero
  10b9d8:	003ff306 	br	10b9a8 <__alt_data_end+0xfffcb9a8>
  10b9dc:	01400044 	movi	r5,1
  10b9e0:	2c24983a 	sll	r18,r5,r16
  10b9e4:	8809883a 	mov	r4,r17
  10b9e8:	91800144 	addi	r6,r18,5
  10b9ec:	318d883a 	add	r6,r6,r6
  10b9f0:	318d883a 	add	r6,r6,r6
  10b9f4:	01136b40 	call	1136b4 <_calloc_r>
  10b9f8:	103ff626 	beq	r2,zero,10b9d4 <__alt_data_end+0xfffcb9d4>
  10b9fc:	14000115 	stw	r16,4(r2)
  10ba00:	14800215 	stw	r18,8(r2)
  10ba04:	003fe606 	br	10b9a0 <__alt_data_end+0xfffcb9a0>

0010ba08 <_Bfree>:
  10ba08:	28000826 	beq	r5,zero,10ba2c <_Bfree+0x24>
  10ba0c:	28c00117 	ldw	r3,4(r5)
  10ba10:	20801317 	ldw	r2,76(r4)
  10ba14:	18c7883a 	add	r3,r3,r3
  10ba18:	18c7883a 	add	r3,r3,r3
  10ba1c:	10c5883a 	add	r2,r2,r3
  10ba20:	10c00017 	ldw	r3,0(r2)
  10ba24:	28c00015 	stw	r3,0(r5)
  10ba28:	11400015 	stw	r5,0(r2)
  10ba2c:	f800283a 	ret

0010ba30 <__multadd>:
  10ba30:	defff704 	addi	sp,sp,-36
  10ba34:	dc800215 	stw	r18,8(sp)
  10ba38:	2c800417 	ldw	r18,16(r5)
  10ba3c:	dd800615 	stw	r22,24(sp)
  10ba40:	dd400515 	stw	r21,20(sp)
  10ba44:	dd000415 	stw	r20,16(sp)
  10ba48:	dcc00315 	stw	r19,12(sp)
  10ba4c:	dc400115 	stw	r17,4(sp)
  10ba50:	dc000015 	stw	r16,0(sp)
  10ba54:	dfc00815 	stw	ra,32(sp)
  10ba58:	ddc00715 	stw	r23,28(sp)
  10ba5c:	2827883a 	mov	r19,r5
  10ba60:	2029883a 	mov	r20,r4
  10ba64:	3023883a 	mov	r17,r6
  10ba68:	3821883a 	mov	r16,r7
  10ba6c:	2d400504 	addi	r21,r5,20
  10ba70:	002d883a 	mov	r22,zero
  10ba74:	adc00017 	ldw	r23,0(r21)
  10ba78:	880b883a 	mov	r5,r17
  10ba7c:	ad400104 	addi	r21,r21,4
  10ba80:	b93fffcc 	andi	r4,r23,65535
  10ba84:	01159fc0 	call	1159fc <__mulsi3>
  10ba88:	b808d43a 	srli	r4,r23,16
  10ba8c:	880b883a 	mov	r5,r17
  10ba90:	1421883a 	add	r16,r2,r16
  10ba94:	01159fc0 	call	1159fc <__mulsi3>
  10ba98:	800ed43a 	srli	r7,r16,16
  10ba9c:	80ffffcc 	andi	r3,r16,65535
  10baa0:	b5800044 	addi	r22,r22,1
  10baa4:	11c5883a 	add	r2,r2,r7
  10baa8:	100e943a 	slli	r7,r2,16
  10baac:	1020d43a 	srli	r16,r2,16
  10bab0:	38c7883a 	add	r3,r7,r3
  10bab4:	a8ffff15 	stw	r3,-4(r21)
  10bab8:	b4bfee16 	blt	r22,r18,10ba74 <__alt_data_end+0xfffcba74>
  10babc:	80000926 	beq	r16,zero,10bae4 <__multadd+0xb4>
  10bac0:	98800217 	ldw	r2,8(r19)
  10bac4:	9080130e 	bge	r18,r2,10bb14 <__multadd+0xe4>
  10bac8:	90800144 	addi	r2,r18,5
  10bacc:	1085883a 	add	r2,r2,r2
  10bad0:	1085883a 	add	r2,r2,r2
  10bad4:	9885883a 	add	r2,r19,r2
  10bad8:	14000015 	stw	r16,0(r2)
  10badc:	94800044 	addi	r18,r18,1
  10bae0:	9c800415 	stw	r18,16(r19)
  10bae4:	9805883a 	mov	r2,r19
  10bae8:	dfc00817 	ldw	ra,32(sp)
  10baec:	ddc00717 	ldw	r23,28(sp)
  10baf0:	dd800617 	ldw	r22,24(sp)
  10baf4:	dd400517 	ldw	r21,20(sp)
  10baf8:	dd000417 	ldw	r20,16(sp)
  10bafc:	dcc00317 	ldw	r19,12(sp)
  10bb00:	dc800217 	ldw	r18,8(sp)
  10bb04:	dc400117 	ldw	r17,4(sp)
  10bb08:	dc000017 	ldw	r16,0(sp)
  10bb0c:	dec00904 	addi	sp,sp,36
  10bb10:	f800283a 	ret
  10bb14:	99400117 	ldw	r5,4(r19)
  10bb18:	a009883a 	mov	r4,r20
  10bb1c:	29400044 	addi	r5,r5,1
  10bb20:	010b9600 	call	10b960 <_Balloc>
  10bb24:	99800417 	ldw	r6,16(r19)
  10bb28:	99400304 	addi	r5,r19,12
  10bb2c:	11000304 	addi	r4,r2,12
  10bb30:	31800084 	addi	r6,r6,2
  10bb34:	318d883a 	add	r6,r6,r6
  10bb38:	318d883a 	add	r6,r6,r6
  10bb3c:	1023883a 	mov	r17,r2
  10bb40:	010157c0 	call	10157c <memcpy>
  10bb44:	98000a26 	beq	r19,zero,10bb70 <__multadd+0x140>
  10bb48:	98c00117 	ldw	r3,4(r19)
  10bb4c:	a0801317 	ldw	r2,76(r20)
  10bb50:	18c7883a 	add	r3,r3,r3
  10bb54:	18c7883a 	add	r3,r3,r3
  10bb58:	10c5883a 	add	r2,r2,r3
  10bb5c:	10c00017 	ldw	r3,0(r2)
  10bb60:	98c00015 	stw	r3,0(r19)
  10bb64:	14c00015 	stw	r19,0(r2)
  10bb68:	8827883a 	mov	r19,r17
  10bb6c:	003fd606 	br	10bac8 <__alt_data_end+0xfffcbac8>
  10bb70:	8827883a 	mov	r19,r17
  10bb74:	003fd406 	br	10bac8 <__alt_data_end+0xfffcbac8>

0010bb78 <__s2b>:
  10bb78:	defff904 	addi	sp,sp,-28
  10bb7c:	dc400115 	stw	r17,4(sp)
  10bb80:	dc000015 	stw	r16,0(sp)
  10bb84:	2023883a 	mov	r17,r4
  10bb88:	2821883a 	mov	r16,r5
  10bb8c:	39000204 	addi	r4,r7,8
  10bb90:	01400244 	movi	r5,9
  10bb94:	dcc00315 	stw	r19,12(sp)
  10bb98:	dc800215 	stw	r18,8(sp)
  10bb9c:	dfc00615 	stw	ra,24(sp)
  10bba0:	dd400515 	stw	r21,20(sp)
  10bba4:	dd000415 	stw	r20,16(sp)
  10bba8:	3825883a 	mov	r18,r7
  10bbac:	3027883a 	mov	r19,r6
  10bbb0:	01158480 	call	115848 <__divsi3>
  10bbb4:	00c00044 	movi	r3,1
  10bbb8:	000b883a 	mov	r5,zero
  10bbbc:	1880030e 	bge	r3,r2,10bbcc <__s2b+0x54>
  10bbc0:	18c7883a 	add	r3,r3,r3
  10bbc4:	29400044 	addi	r5,r5,1
  10bbc8:	18bffd16 	blt	r3,r2,10bbc0 <__alt_data_end+0xfffcbbc0>
  10bbcc:	8809883a 	mov	r4,r17
  10bbd0:	010b9600 	call	10b960 <_Balloc>
  10bbd4:	d8c00717 	ldw	r3,28(sp)
  10bbd8:	10c00515 	stw	r3,20(r2)
  10bbdc:	00c00044 	movi	r3,1
  10bbe0:	10c00415 	stw	r3,16(r2)
  10bbe4:	00c00244 	movi	r3,9
  10bbe8:	1cc0210e 	bge	r3,r19,10bc70 <__s2b+0xf8>
  10bbec:	80eb883a 	add	r21,r16,r3
  10bbf0:	a829883a 	mov	r20,r21
  10bbf4:	84e1883a 	add	r16,r16,r19
  10bbf8:	a1c00007 	ldb	r7,0(r20)
  10bbfc:	01800284 	movi	r6,10
  10bc00:	a5000044 	addi	r20,r20,1
  10bc04:	100b883a 	mov	r5,r2
  10bc08:	39fff404 	addi	r7,r7,-48
  10bc0c:	8809883a 	mov	r4,r17
  10bc10:	010ba300 	call	10ba30 <__multadd>
  10bc14:	a43ff81e 	bne	r20,r16,10bbf8 <__alt_data_end+0xfffcbbf8>
  10bc18:	ace1883a 	add	r16,r21,r19
  10bc1c:	843ffe04 	addi	r16,r16,-8
  10bc20:	9c800a0e 	bge	r19,r18,10bc4c <__s2b+0xd4>
  10bc24:	94e5c83a 	sub	r18,r18,r19
  10bc28:	84a5883a 	add	r18,r16,r18
  10bc2c:	81c00007 	ldb	r7,0(r16)
  10bc30:	01800284 	movi	r6,10
  10bc34:	84000044 	addi	r16,r16,1
  10bc38:	100b883a 	mov	r5,r2
  10bc3c:	39fff404 	addi	r7,r7,-48
  10bc40:	8809883a 	mov	r4,r17
  10bc44:	010ba300 	call	10ba30 <__multadd>
  10bc48:	84bff81e 	bne	r16,r18,10bc2c <__alt_data_end+0xfffcbc2c>
  10bc4c:	dfc00617 	ldw	ra,24(sp)
  10bc50:	dd400517 	ldw	r21,20(sp)
  10bc54:	dd000417 	ldw	r20,16(sp)
  10bc58:	dcc00317 	ldw	r19,12(sp)
  10bc5c:	dc800217 	ldw	r18,8(sp)
  10bc60:	dc400117 	ldw	r17,4(sp)
  10bc64:	dc000017 	ldw	r16,0(sp)
  10bc68:	dec00704 	addi	sp,sp,28
  10bc6c:	f800283a 	ret
  10bc70:	84000284 	addi	r16,r16,10
  10bc74:	1827883a 	mov	r19,r3
  10bc78:	003fe906 	br	10bc20 <__alt_data_end+0xfffcbc20>

0010bc7c <__hi0bits>:
  10bc7c:	20bfffec 	andhi	r2,r4,65535
  10bc80:	1000141e 	bne	r2,zero,10bcd4 <__hi0bits+0x58>
  10bc84:	2008943a 	slli	r4,r4,16
  10bc88:	00800404 	movi	r2,16
  10bc8c:	20ffc02c 	andhi	r3,r4,65280
  10bc90:	1800021e 	bne	r3,zero,10bc9c <__hi0bits+0x20>
  10bc94:	2008923a 	slli	r4,r4,8
  10bc98:	10800204 	addi	r2,r2,8
  10bc9c:	20fc002c 	andhi	r3,r4,61440
  10bca0:	1800021e 	bne	r3,zero,10bcac <__hi0bits+0x30>
  10bca4:	2008913a 	slli	r4,r4,4
  10bca8:	10800104 	addi	r2,r2,4
  10bcac:	20f0002c 	andhi	r3,r4,49152
  10bcb0:	1800031e 	bne	r3,zero,10bcc0 <__hi0bits+0x44>
  10bcb4:	2109883a 	add	r4,r4,r4
  10bcb8:	10800084 	addi	r2,r2,2
  10bcbc:	2109883a 	add	r4,r4,r4
  10bcc0:	20000316 	blt	r4,zero,10bcd0 <__hi0bits+0x54>
  10bcc4:	2110002c 	andhi	r4,r4,16384
  10bcc8:	2000041e 	bne	r4,zero,10bcdc <__hi0bits+0x60>
  10bccc:	00800804 	movi	r2,32
  10bcd0:	f800283a 	ret
  10bcd4:	0005883a 	mov	r2,zero
  10bcd8:	003fec06 	br	10bc8c <__alt_data_end+0xfffcbc8c>
  10bcdc:	10800044 	addi	r2,r2,1
  10bce0:	f800283a 	ret

0010bce4 <__lo0bits>:
  10bce4:	20c00017 	ldw	r3,0(r4)
  10bce8:	188001cc 	andi	r2,r3,7
  10bcec:	10000826 	beq	r2,zero,10bd10 <__lo0bits+0x2c>
  10bcf0:	1880004c 	andi	r2,r3,1
  10bcf4:	1000211e 	bne	r2,zero,10bd7c <__lo0bits+0x98>
  10bcf8:	1880008c 	andi	r2,r3,2
  10bcfc:	1000211e 	bne	r2,zero,10bd84 <__lo0bits+0xa0>
  10bd00:	1806d0ba 	srli	r3,r3,2
  10bd04:	00800084 	movi	r2,2
  10bd08:	20c00015 	stw	r3,0(r4)
  10bd0c:	f800283a 	ret
  10bd10:	18bfffcc 	andi	r2,r3,65535
  10bd14:	10001326 	beq	r2,zero,10bd64 <__lo0bits+0x80>
  10bd18:	0005883a 	mov	r2,zero
  10bd1c:	19403fcc 	andi	r5,r3,255
  10bd20:	2800021e 	bne	r5,zero,10bd2c <__lo0bits+0x48>
  10bd24:	1806d23a 	srli	r3,r3,8
  10bd28:	10800204 	addi	r2,r2,8
  10bd2c:	194003cc 	andi	r5,r3,15
  10bd30:	2800021e 	bne	r5,zero,10bd3c <__lo0bits+0x58>
  10bd34:	1806d13a 	srli	r3,r3,4
  10bd38:	10800104 	addi	r2,r2,4
  10bd3c:	194000cc 	andi	r5,r3,3
  10bd40:	2800021e 	bne	r5,zero,10bd4c <__lo0bits+0x68>
  10bd44:	1806d0ba 	srli	r3,r3,2
  10bd48:	10800084 	addi	r2,r2,2
  10bd4c:	1940004c 	andi	r5,r3,1
  10bd50:	2800081e 	bne	r5,zero,10bd74 <__lo0bits+0x90>
  10bd54:	1806d07a 	srli	r3,r3,1
  10bd58:	1800051e 	bne	r3,zero,10bd70 <__lo0bits+0x8c>
  10bd5c:	00800804 	movi	r2,32
  10bd60:	f800283a 	ret
  10bd64:	1806d43a 	srli	r3,r3,16
  10bd68:	00800404 	movi	r2,16
  10bd6c:	003feb06 	br	10bd1c <__alt_data_end+0xfffcbd1c>
  10bd70:	10800044 	addi	r2,r2,1
  10bd74:	20c00015 	stw	r3,0(r4)
  10bd78:	f800283a 	ret
  10bd7c:	0005883a 	mov	r2,zero
  10bd80:	f800283a 	ret
  10bd84:	1806d07a 	srli	r3,r3,1
  10bd88:	00800044 	movi	r2,1
  10bd8c:	20c00015 	stw	r3,0(r4)
  10bd90:	f800283a 	ret

0010bd94 <__i2b>:
  10bd94:	defffd04 	addi	sp,sp,-12
  10bd98:	dc000015 	stw	r16,0(sp)
  10bd9c:	04000044 	movi	r16,1
  10bda0:	dc400115 	stw	r17,4(sp)
  10bda4:	2823883a 	mov	r17,r5
  10bda8:	800b883a 	mov	r5,r16
  10bdac:	dfc00215 	stw	ra,8(sp)
  10bdb0:	010b9600 	call	10b960 <_Balloc>
  10bdb4:	14400515 	stw	r17,20(r2)
  10bdb8:	14000415 	stw	r16,16(r2)
  10bdbc:	dfc00217 	ldw	ra,8(sp)
  10bdc0:	dc400117 	ldw	r17,4(sp)
  10bdc4:	dc000017 	ldw	r16,0(sp)
  10bdc8:	dec00304 	addi	sp,sp,12
  10bdcc:	f800283a 	ret

0010bdd0 <__multiply>:
  10bdd0:	deffef04 	addi	sp,sp,-68
  10bdd4:	dc400815 	stw	r17,32(sp)
  10bdd8:	dc000715 	stw	r16,28(sp)
  10bddc:	34400417 	ldw	r17,16(r6)
  10bde0:	2c000417 	ldw	r16,16(r5)
  10bde4:	dd800d15 	stw	r22,52(sp)
  10bde8:	dc800915 	stw	r18,36(sp)
  10bdec:	dfc01015 	stw	ra,64(sp)
  10bdf0:	df000f15 	stw	fp,60(sp)
  10bdf4:	ddc00e15 	stw	r23,56(sp)
  10bdf8:	dd400c15 	stw	r21,48(sp)
  10bdfc:	dd000b15 	stw	r20,44(sp)
  10be00:	dcc00a15 	stw	r19,40(sp)
  10be04:	2825883a 	mov	r18,r5
  10be08:	302d883a 	mov	r22,r6
  10be0c:	8440050e 	bge	r16,r17,10be24 <__multiply+0x54>
  10be10:	8007883a 	mov	r3,r16
  10be14:	3025883a 	mov	r18,r6
  10be18:	8821883a 	mov	r16,r17
  10be1c:	282d883a 	mov	r22,r5
  10be20:	1823883a 	mov	r17,r3
  10be24:	90800217 	ldw	r2,8(r18)
  10be28:	8447883a 	add	r3,r16,r17
  10be2c:	d8c00215 	stw	r3,8(sp)
  10be30:	91400117 	ldw	r5,4(r18)
  10be34:	10c0010e 	bge	r2,r3,10be3c <__multiply+0x6c>
  10be38:	29400044 	addi	r5,r5,1
  10be3c:	010b9600 	call	10b960 <_Balloc>
  10be40:	d8c00217 	ldw	r3,8(sp)
  10be44:	d8800615 	stw	r2,24(sp)
  10be48:	18eb883a 	add	r21,r3,r3
  10be4c:	ad6b883a 	add	r21,r21,r21
  10be50:	10c00504 	addi	r3,r2,20
  10be54:	1d6b883a 	add	r21,r3,r21
  10be58:	d8c00115 	stw	r3,4(sp)
  10be5c:	dd400315 	stw	r21,12(sp)
  10be60:	1805883a 	mov	r2,r3
  10be64:	1d40042e 	bgeu	r3,r21,10be78 <__multiply+0xa8>
  10be68:	d8c00317 	ldw	r3,12(sp)
  10be6c:	10000015 	stw	zero,0(r2)
  10be70:	10800104 	addi	r2,r2,4
  10be74:	10fffc36 	bltu	r2,r3,10be68 <__alt_data_end+0xfffcbe68>
  10be78:	8c63883a 	add	r17,r17,r17
  10be7c:	b5800504 	addi	r22,r22,20
  10be80:	8c63883a 	add	r17,r17,r17
  10be84:	94800504 	addi	r18,r18,20
  10be88:	8421883a 	add	r16,r16,r16
  10be8c:	b463883a 	add	r17,r22,r17
  10be90:	8421883a 	add	r16,r16,r16
  10be94:	dd800015 	stw	r22,0(sp)
  10be98:	dc800415 	stw	r18,16(sp)
  10be9c:	dc400515 	stw	r17,20(sp)
  10bea0:	9429883a 	add	r20,r18,r16
  10bea4:	b4404f2e 	bgeu	r22,r17,10bfe4 <__multiply+0x214>
  10bea8:	d8c00017 	ldw	r3,0(sp)
  10beac:	1c800017 	ldw	r18,0(r3)
  10beb0:	947fffcc 	andi	r17,r18,65535
  10beb4:	88001e26 	beq	r17,zero,10bf30 <__multiply+0x160>
  10beb8:	dd800117 	ldw	r22,4(sp)
  10bebc:	dd400417 	ldw	r21,16(sp)
  10bec0:	0027883a 	mov	r19,zero
  10bec4:	ac800017 	ldw	r18,0(r21)
  10bec8:	b4000017 	ldw	r16,0(r22)
  10becc:	880b883a 	mov	r5,r17
  10bed0:	913fffcc 	andi	r4,r18,65535
  10bed4:	01159fc0 	call	1159fc <__mulsi3>
  10bed8:	9008d43a 	srli	r4,r18,16
  10bedc:	84bfffcc 	andi	r18,r16,65535
  10bee0:	1485883a 	add	r2,r2,r18
  10bee4:	14e5883a 	add	r18,r2,r19
  10bee8:	8020d43a 	srli	r16,r16,16
  10beec:	9026d43a 	srli	r19,r18,16
  10bef0:	880b883a 	mov	r5,r17
  10bef4:	01159fc0 	call	1159fc <__mulsi3>
  10bef8:	1405883a 	add	r2,r2,r16
  10befc:	14e1883a 	add	r16,r2,r19
  10bf00:	90ffffcc 	andi	r3,r18,65535
  10bf04:	8024943a 	slli	r18,r16,16
  10bf08:	ad400104 	addi	r21,r21,4
  10bf0c:	b005883a 	mov	r2,r22
  10bf10:	90c6b03a 	or	r3,r18,r3
  10bf14:	b0c00015 	stw	r3,0(r22)
  10bf18:	8026d43a 	srli	r19,r16,16
  10bf1c:	b5800104 	addi	r22,r22,4
  10bf20:	ad3fe836 	bltu	r21,r20,10bec4 <__alt_data_end+0xfffcbec4>
  10bf24:	d8c00017 	ldw	r3,0(sp)
  10bf28:	14c00115 	stw	r19,4(r2)
  10bf2c:	1c800017 	ldw	r18,0(r3)
  10bf30:	9024d43a 	srli	r18,r18,16
  10bf34:	90002226 	beq	r18,zero,10bfc0 <__multiply+0x1f0>
  10bf38:	d8c00117 	ldw	r3,4(sp)
  10bf3c:	dd800417 	ldw	r22,16(sp)
  10bf40:	002f883a 	mov	r23,zero
  10bf44:	1f000017 	ldw	fp,0(r3)
  10bf48:	1823883a 	mov	r17,r3
  10bf4c:	182b883a 	mov	r21,r3
  10bf50:	e021883a 	mov	r16,fp
  10bf54:	00000106 	br	10bf5c <__multiply+0x18c>
  10bf58:	982b883a 	mov	r21,r19
  10bf5c:	b100000b 	ldhu	r4,0(r22)
  10bf60:	8020d43a 	srli	r16,r16,16
  10bf64:	900b883a 	mov	r5,r18
  10bf68:	01159fc0 	call	1159fc <__mulsi3>
  10bf6c:	1405883a 	add	r2,r2,r16
  10bf70:	15ef883a 	add	r23,r2,r23
  10bf74:	b804943a 	slli	r2,r23,16
  10bf78:	e0ffffcc 	andi	r3,fp,65535
  10bf7c:	8c400104 	addi	r17,r17,4
  10bf80:	10c6b03a 	or	r3,r2,r3
  10bf84:	88ffff15 	stw	r3,-4(r17)
  10bf88:	b5800104 	addi	r22,r22,4
  10bf8c:	b13fff17 	ldw	r4,-4(r22)
  10bf90:	acc00104 	addi	r19,r21,4
  10bf94:	900b883a 	mov	r5,r18
  10bf98:	2008d43a 	srli	r4,r4,16
  10bf9c:	9c000017 	ldw	r16,0(r19)
  10bfa0:	01159fc0 	call	1159fc <__mulsi3>
  10bfa4:	b806d43a 	srli	r3,r23,16
  10bfa8:	813fffcc 	andi	r4,r16,65535
  10bfac:	1105883a 	add	r2,r2,r4
  10bfb0:	10f9883a 	add	fp,r2,r3
  10bfb4:	e02ed43a 	srli	r23,fp,16
  10bfb8:	b53fe736 	bltu	r22,r20,10bf58 <__alt_data_end+0xfffcbf58>
  10bfbc:	af000115 	stw	fp,4(r21)
  10bfc0:	d8c00017 	ldw	r3,0(sp)
  10bfc4:	d9000517 	ldw	r4,20(sp)
  10bfc8:	18c00104 	addi	r3,r3,4
  10bfcc:	d8c00015 	stw	r3,0(sp)
  10bfd0:	d8c00117 	ldw	r3,4(sp)
  10bfd4:	18c00104 	addi	r3,r3,4
  10bfd8:	d8c00115 	stw	r3,4(sp)
  10bfdc:	d8c00017 	ldw	r3,0(sp)
  10bfe0:	193fb136 	bltu	r3,r4,10bea8 <__alt_data_end+0xfffcbea8>
  10bfe4:	d8c00217 	ldw	r3,8(sp)
  10bfe8:	00c00c0e 	bge	zero,r3,10c01c <__multiply+0x24c>
  10bfec:	d8c00317 	ldw	r3,12(sp)
  10bff0:	18bfff17 	ldw	r2,-4(r3)
  10bff4:	1d7fff04 	addi	r21,r3,-4
  10bff8:	10000326 	beq	r2,zero,10c008 <__multiply+0x238>
  10bffc:	00000706 	br	10c01c <__multiply+0x24c>
  10c000:	a8800017 	ldw	r2,0(r21)
  10c004:	1000051e 	bne	r2,zero,10c01c <__multiply+0x24c>
  10c008:	d8c00217 	ldw	r3,8(sp)
  10c00c:	ad7fff04 	addi	r21,r21,-4
  10c010:	18ffffc4 	addi	r3,r3,-1
  10c014:	d8c00215 	stw	r3,8(sp)
  10c018:	183ff91e 	bne	r3,zero,10c000 <__alt_data_end+0xfffcc000>
  10c01c:	d8c00617 	ldw	r3,24(sp)
  10c020:	d9000217 	ldw	r4,8(sp)
  10c024:	1805883a 	mov	r2,r3
  10c028:	19000415 	stw	r4,16(r3)
  10c02c:	dfc01017 	ldw	ra,64(sp)
  10c030:	df000f17 	ldw	fp,60(sp)
  10c034:	ddc00e17 	ldw	r23,56(sp)
  10c038:	dd800d17 	ldw	r22,52(sp)
  10c03c:	dd400c17 	ldw	r21,48(sp)
  10c040:	dd000b17 	ldw	r20,44(sp)
  10c044:	dcc00a17 	ldw	r19,40(sp)
  10c048:	dc800917 	ldw	r18,36(sp)
  10c04c:	dc400817 	ldw	r17,32(sp)
  10c050:	dc000717 	ldw	r16,28(sp)
  10c054:	dec01104 	addi	sp,sp,68
  10c058:	f800283a 	ret

0010c05c <__pow5mult>:
  10c05c:	defffa04 	addi	sp,sp,-24
  10c060:	dcc00315 	stw	r19,12(sp)
  10c064:	dc000015 	stw	r16,0(sp)
  10c068:	dfc00515 	stw	ra,20(sp)
  10c06c:	dd000415 	stw	r20,16(sp)
  10c070:	dc800215 	stw	r18,8(sp)
  10c074:	dc400115 	stw	r17,4(sp)
  10c078:	308000cc 	andi	r2,r6,3
  10c07c:	3021883a 	mov	r16,r6
  10c080:	2027883a 	mov	r19,r4
  10c084:	10002f1e 	bne	r2,zero,10c144 <__pow5mult+0xe8>
  10c088:	2825883a 	mov	r18,r5
  10c08c:	8021d0ba 	srai	r16,r16,2
  10c090:	80001a26 	beq	r16,zero,10c0fc <__pow5mult+0xa0>
  10c094:	9c401217 	ldw	r17,72(r19)
  10c098:	8800061e 	bne	r17,zero,10c0b4 <__pow5mult+0x58>
  10c09c:	00003406 	br	10c170 <__pow5mult+0x114>
  10c0a0:	8021d07a 	srai	r16,r16,1
  10c0a4:	80001526 	beq	r16,zero,10c0fc <__pow5mult+0xa0>
  10c0a8:	88800017 	ldw	r2,0(r17)
  10c0ac:	10001c26 	beq	r2,zero,10c120 <__pow5mult+0xc4>
  10c0b0:	1023883a 	mov	r17,r2
  10c0b4:	8080004c 	andi	r2,r16,1
  10c0b8:	103ff926 	beq	r2,zero,10c0a0 <__alt_data_end+0xfffcc0a0>
  10c0bc:	880d883a 	mov	r6,r17
  10c0c0:	900b883a 	mov	r5,r18
  10c0c4:	9809883a 	mov	r4,r19
  10c0c8:	010bdd00 	call	10bdd0 <__multiply>
  10c0cc:	90001b26 	beq	r18,zero,10c13c <__pow5mult+0xe0>
  10c0d0:	91000117 	ldw	r4,4(r18)
  10c0d4:	98c01317 	ldw	r3,76(r19)
  10c0d8:	8021d07a 	srai	r16,r16,1
  10c0dc:	2109883a 	add	r4,r4,r4
  10c0e0:	2109883a 	add	r4,r4,r4
  10c0e4:	1907883a 	add	r3,r3,r4
  10c0e8:	19000017 	ldw	r4,0(r3)
  10c0ec:	91000015 	stw	r4,0(r18)
  10c0f0:	1c800015 	stw	r18,0(r3)
  10c0f4:	1025883a 	mov	r18,r2
  10c0f8:	803feb1e 	bne	r16,zero,10c0a8 <__alt_data_end+0xfffcc0a8>
  10c0fc:	9005883a 	mov	r2,r18
  10c100:	dfc00517 	ldw	ra,20(sp)
  10c104:	dd000417 	ldw	r20,16(sp)
  10c108:	dcc00317 	ldw	r19,12(sp)
  10c10c:	dc800217 	ldw	r18,8(sp)
  10c110:	dc400117 	ldw	r17,4(sp)
  10c114:	dc000017 	ldw	r16,0(sp)
  10c118:	dec00604 	addi	sp,sp,24
  10c11c:	f800283a 	ret
  10c120:	880d883a 	mov	r6,r17
  10c124:	880b883a 	mov	r5,r17
  10c128:	9809883a 	mov	r4,r19
  10c12c:	010bdd00 	call	10bdd0 <__multiply>
  10c130:	88800015 	stw	r2,0(r17)
  10c134:	10000015 	stw	zero,0(r2)
  10c138:	003fdd06 	br	10c0b0 <__alt_data_end+0xfffcc0b0>
  10c13c:	1025883a 	mov	r18,r2
  10c140:	003fd706 	br	10c0a0 <__alt_data_end+0xfffcc0a0>
  10c144:	10bfffc4 	addi	r2,r2,-1
  10c148:	1085883a 	add	r2,r2,r2
  10c14c:	00c004b4 	movhi	r3,18
  10c150:	18cd5b04 	addi	r3,r3,13676
  10c154:	1085883a 	add	r2,r2,r2
  10c158:	1885883a 	add	r2,r3,r2
  10c15c:	11800017 	ldw	r6,0(r2)
  10c160:	000f883a 	mov	r7,zero
  10c164:	010ba300 	call	10ba30 <__multadd>
  10c168:	1025883a 	mov	r18,r2
  10c16c:	003fc706 	br	10c08c <__alt_data_end+0xfffcc08c>
  10c170:	05000044 	movi	r20,1
  10c174:	a00b883a 	mov	r5,r20
  10c178:	9809883a 	mov	r4,r19
  10c17c:	010b9600 	call	10b960 <_Balloc>
  10c180:	1023883a 	mov	r17,r2
  10c184:	00809c44 	movi	r2,625
  10c188:	88800515 	stw	r2,20(r17)
  10c18c:	8d000415 	stw	r20,16(r17)
  10c190:	9c401215 	stw	r17,72(r19)
  10c194:	88000015 	stw	zero,0(r17)
  10c198:	003fc606 	br	10c0b4 <__alt_data_end+0xfffcc0b4>

0010c19c <__lshift>:
  10c19c:	defff904 	addi	sp,sp,-28
  10c1a0:	dd400515 	stw	r21,20(sp)
  10c1a4:	dcc00315 	stw	r19,12(sp)
  10c1a8:	302bd17a 	srai	r21,r6,5
  10c1ac:	2cc00417 	ldw	r19,16(r5)
  10c1b0:	28800217 	ldw	r2,8(r5)
  10c1b4:	dd000415 	stw	r20,16(sp)
  10c1b8:	ace7883a 	add	r19,r21,r19
  10c1bc:	dc800215 	stw	r18,8(sp)
  10c1c0:	dc400115 	stw	r17,4(sp)
  10c1c4:	dc000015 	stw	r16,0(sp)
  10c1c8:	dfc00615 	stw	ra,24(sp)
  10c1cc:	9c000044 	addi	r16,r19,1
  10c1d0:	2823883a 	mov	r17,r5
  10c1d4:	3029883a 	mov	r20,r6
  10c1d8:	2025883a 	mov	r18,r4
  10c1dc:	29400117 	ldw	r5,4(r5)
  10c1e0:	1400030e 	bge	r2,r16,10c1f0 <__lshift+0x54>
  10c1e4:	1085883a 	add	r2,r2,r2
  10c1e8:	29400044 	addi	r5,r5,1
  10c1ec:	143ffd16 	blt	r2,r16,10c1e4 <__alt_data_end+0xfffcc1e4>
  10c1f0:	9009883a 	mov	r4,r18
  10c1f4:	010b9600 	call	10b960 <_Balloc>
  10c1f8:	10c00504 	addi	r3,r2,20
  10c1fc:	0540070e 	bge	zero,r21,10c21c <__lshift+0x80>
  10c200:	ad6b883a 	add	r21,r21,r21
  10c204:	ad6b883a 	add	r21,r21,r21
  10c208:	1809883a 	mov	r4,r3
  10c20c:	1d47883a 	add	r3,r3,r21
  10c210:	20000015 	stw	zero,0(r4)
  10c214:	21000104 	addi	r4,r4,4
  10c218:	193ffd1e 	bne	r3,r4,10c210 <__alt_data_end+0xfffcc210>
  10c21c:	8a000417 	ldw	r8,16(r17)
  10c220:	89000504 	addi	r4,r17,20
  10c224:	a18007cc 	andi	r6,r20,31
  10c228:	4211883a 	add	r8,r8,r8
  10c22c:	4211883a 	add	r8,r8,r8
  10c230:	2211883a 	add	r8,r4,r8
  10c234:	30002326 	beq	r6,zero,10c2c4 <__lshift+0x128>
  10c238:	02400804 	movi	r9,32
  10c23c:	4993c83a 	sub	r9,r9,r6
  10c240:	000b883a 	mov	r5,zero
  10c244:	21c00017 	ldw	r7,0(r4)
  10c248:	1815883a 	mov	r10,r3
  10c24c:	18c00104 	addi	r3,r3,4
  10c250:	398e983a 	sll	r7,r7,r6
  10c254:	21000104 	addi	r4,r4,4
  10c258:	394ab03a 	or	r5,r7,r5
  10c25c:	197fff15 	stw	r5,-4(r3)
  10c260:	217fff17 	ldw	r5,-4(r4)
  10c264:	2a4ad83a 	srl	r5,r5,r9
  10c268:	223ff636 	bltu	r4,r8,10c244 <__alt_data_end+0xfffcc244>
  10c26c:	51400115 	stw	r5,4(r10)
  10c270:	28001a1e 	bne	r5,zero,10c2dc <__lshift+0x140>
  10c274:	843fffc4 	addi	r16,r16,-1
  10c278:	14000415 	stw	r16,16(r2)
  10c27c:	88000826 	beq	r17,zero,10c2a0 <__lshift+0x104>
  10c280:	89000117 	ldw	r4,4(r17)
  10c284:	90c01317 	ldw	r3,76(r18)
  10c288:	2109883a 	add	r4,r4,r4
  10c28c:	2109883a 	add	r4,r4,r4
  10c290:	1907883a 	add	r3,r3,r4
  10c294:	19000017 	ldw	r4,0(r3)
  10c298:	89000015 	stw	r4,0(r17)
  10c29c:	1c400015 	stw	r17,0(r3)
  10c2a0:	dfc00617 	ldw	ra,24(sp)
  10c2a4:	dd400517 	ldw	r21,20(sp)
  10c2a8:	dd000417 	ldw	r20,16(sp)
  10c2ac:	dcc00317 	ldw	r19,12(sp)
  10c2b0:	dc800217 	ldw	r18,8(sp)
  10c2b4:	dc400117 	ldw	r17,4(sp)
  10c2b8:	dc000017 	ldw	r16,0(sp)
  10c2bc:	dec00704 	addi	sp,sp,28
  10c2c0:	f800283a 	ret
  10c2c4:	21400017 	ldw	r5,0(r4)
  10c2c8:	18c00104 	addi	r3,r3,4
  10c2cc:	21000104 	addi	r4,r4,4
  10c2d0:	197fff15 	stw	r5,-4(r3)
  10c2d4:	223ffb36 	bltu	r4,r8,10c2c4 <__alt_data_end+0xfffcc2c4>
  10c2d8:	003fe606 	br	10c274 <__alt_data_end+0xfffcc274>
  10c2dc:	9c000084 	addi	r16,r19,2
  10c2e0:	003fe406 	br	10c274 <__alt_data_end+0xfffcc274>

0010c2e4 <__mcmp>:
  10c2e4:	20800417 	ldw	r2,16(r4)
  10c2e8:	28c00417 	ldw	r3,16(r5)
  10c2ec:	10c5c83a 	sub	r2,r2,r3
  10c2f0:	1000111e 	bne	r2,zero,10c338 <__mcmp+0x54>
  10c2f4:	18c7883a 	add	r3,r3,r3
  10c2f8:	18c7883a 	add	r3,r3,r3
  10c2fc:	21000504 	addi	r4,r4,20
  10c300:	29400504 	addi	r5,r5,20
  10c304:	20c5883a 	add	r2,r4,r3
  10c308:	28cb883a 	add	r5,r5,r3
  10c30c:	00000106 	br	10c314 <__mcmp+0x30>
  10c310:	20800a2e 	bgeu	r4,r2,10c33c <__mcmp+0x58>
  10c314:	10bfff04 	addi	r2,r2,-4
  10c318:	297fff04 	addi	r5,r5,-4
  10c31c:	11800017 	ldw	r6,0(r2)
  10c320:	28c00017 	ldw	r3,0(r5)
  10c324:	30fffa26 	beq	r6,r3,10c310 <__alt_data_end+0xfffcc310>
  10c328:	30c00236 	bltu	r6,r3,10c334 <__mcmp+0x50>
  10c32c:	00800044 	movi	r2,1
  10c330:	f800283a 	ret
  10c334:	00bfffc4 	movi	r2,-1
  10c338:	f800283a 	ret
  10c33c:	0005883a 	mov	r2,zero
  10c340:	f800283a 	ret

0010c344 <__mdiff>:
  10c344:	28c00417 	ldw	r3,16(r5)
  10c348:	30800417 	ldw	r2,16(r6)
  10c34c:	defffa04 	addi	sp,sp,-24
  10c350:	dcc00315 	stw	r19,12(sp)
  10c354:	dc800215 	stw	r18,8(sp)
  10c358:	dfc00515 	stw	ra,20(sp)
  10c35c:	dd000415 	stw	r20,16(sp)
  10c360:	dc400115 	stw	r17,4(sp)
  10c364:	dc000015 	stw	r16,0(sp)
  10c368:	1887c83a 	sub	r3,r3,r2
  10c36c:	2825883a 	mov	r18,r5
  10c370:	3027883a 	mov	r19,r6
  10c374:	1800141e 	bne	r3,zero,10c3c8 <__mdiff+0x84>
  10c378:	1085883a 	add	r2,r2,r2
  10c37c:	1085883a 	add	r2,r2,r2
  10c380:	2a000504 	addi	r8,r5,20
  10c384:	34000504 	addi	r16,r6,20
  10c388:	4087883a 	add	r3,r8,r2
  10c38c:	8085883a 	add	r2,r16,r2
  10c390:	00000106 	br	10c398 <__mdiff+0x54>
  10c394:	40c0592e 	bgeu	r8,r3,10c4fc <__mdiff+0x1b8>
  10c398:	18ffff04 	addi	r3,r3,-4
  10c39c:	10bfff04 	addi	r2,r2,-4
  10c3a0:	19c00017 	ldw	r7,0(r3)
  10c3a4:	11400017 	ldw	r5,0(r2)
  10c3a8:	397ffa26 	beq	r7,r5,10c394 <__alt_data_end+0xfffcc394>
  10c3ac:	3940592e 	bgeu	r7,r5,10c514 <__mdiff+0x1d0>
  10c3b0:	9005883a 	mov	r2,r18
  10c3b4:	4023883a 	mov	r17,r8
  10c3b8:	9825883a 	mov	r18,r19
  10c3bc:	05000044 	movi	r20,1
  10c3c0:	1027883a 	mov	r19,r2
  10c3c4:	00000406 	br	10c3d8 <__mdiff+0x94>
  10c3c8:	18005616 	blt	r3,zero,10c524 <__mdiff+0x1e0>
  10c3cc:	34400504 	addi	r17,r6,20
  10c3d0:	2c000504 	addi	r16,r5,20
  10c3d4:	0029883a 	mov	r20,zero
  10c3d8:	91400117 	ldw	r5,4(r18)
  10c3dc:	010b9600 	call	10b960 <_Balloc>
  10c3e0:	92400417 	ldw	r9,16(r18)
  10c3e4:	9b000417 	ldw	r12,16(r19)
  10c3e8:	12c00504 	addi	r11,r2,20
  10c3ec:	4a51883a 	add	r8,r9,r9
  10c3f0:	6319883a 	add	r12,r12,r12
  10c3f4:	4211883a 	add	r8,r8,r8
  10c3f8:	6319883a 	add	r12,r12,r12
  10c3fc:	15000315 	stw	r20,12(r2)
  10c400:	8211883a 	add	r8,r16,r8
  10c404:	8b19883a 	add	r12,r17,r12
  10c408:	0007883a 	mov	r3,zero
  10c40c:	81400017 	ldw	r5,0(r16)
  10c410:	89c00017 	ldw	r7,0(r17)
  10c414:	59800104 	addi	r6,r11,4
  10c418:	293fffcc 	andi	r4,r5,65535
  10c41c:	20c7883a 	add	r3,r4,r3
  10c420:	393fffcc 	andi	r4,r7,65535
  10c424:	1909c83a 	sub	r4,r3,r4
  10c428:	280ad43a 	srli	r5,r5,16
  10c42c:	380ed43a 	srli	r7,r7,16
  10c430:	2007d43a 	srai	r3,r4,16
  10c434:	213fffcc 	andi	r4,r4,65535
  10c438:	29cbc83a 	sub	r5,r5,r7
  10c43c:	28c7883a 	add	r3,r5,r3
  10c440:	180a943a 	slli	r5,r3,16
  10c444:	8c400104 	addi	r17,r17,4
  10c448:	84000104 	addi	r16,r16,4
  10c44c:	2908b03a 	or	r4,r5,r4
  10c450:	59000015 	stw	r4,0(r11)
  10c454:	1807d43a 	srai	r3,r3,16
  10c458:	3015883a 	mov	r10,r6
  10c45c:	3017883a 	mov	r11,r6
  10c460:	8b3fea36 	bltu	r17,r12,10c40c <__alt_data_end+0xfffcc40c>
  10c464:	8200162e 	bgeu	r16,r8,10c4c0 <__mdiff+0x17c>
  10c468:	8017883a 	mov	r11,r16
  10c46c:	59400017 	ldw	r5,0(r11)
  10c470:	31800104 	addi	r6,r6,4
  10c474:	5ac00104 	addi	r11,r11,4
  10c478:	293fffcc 	andi	r4,r5,65535
  10c47c:	20c7883a 	add	r3,r4,r3
  10c480:	280ed43a 	srli	r7,r5,16
  10c484:	180bd43a 	srai	r5,r3,16
  10c488:	193fffcc 	andi	r4,r3,65535
  10c48c:	3947883a 	add	r3,r7,r5
  10c490:	180a943a 	slli	r5,r3,16
  10c494:	1807d43a 	srai	r3,r3,16
  10c498:	2908b03a 	or	r4,r5,r4
  10c49c:	313fff15 	stw	r4,-4(r6)
  10c4a0:	5a3ff236 	bltu	r11,r8,10c46c <__alt_data_end+0xfffcc46c>
  10c4a4:	0406303a 	nor	r3,zero,r16
  10c4a8:	1a07883a 	add	r3,r3,r8
  10c4ac:	1806d0ba 	srli	r3,r3,2
  10c4b0:	18c00044 	addi	r3,r3,1
  10c4b4:	18c7883a 	add	r3,r3,r3
  10c4b8:	18c7883a 	add	r3,r3,r3
  10c4bc:	50d5883a 	add	r10,r10,r3
  10c4c0:	50ffff04 	addi	r3,r10,-4
  10c4c4:	2000041e 	bne	r4,zero,10c4d8 <__mdiff+0x194>
  10c4c8:	18ffff04 	addi	r3,r3,-4
  10c4cc:	19000017 	ldw	r4,0(r3)
  10c4d0:	4a7fffc4 	addi	r9,r9,-1
  10c4d4:	203ffc26 	beq	r4,zero,10c4c8 <__alt_data_end+0xfffcc4c8>
  10c4d8:	12400415 	stw	r9,16(r2)
  10c4dc:	dfc00517 	ldw	ra,20(sp)
  10c4e0:	dd000417 	ldw	r20,16(sp)
  10c4e4:	dcc00317 	ldw	r19,12(sp)
  10c4e8:	dc800217 	ldw	r18,8(sp)
  10c4ec:	dc400117 	ldw	r17,4(sp)
  10c4f0:	dc000017 	ldw	r16,0(sp)
  10c4f4:	dec00604 	addi	sp,sp,24
  10c4f8:	f800283a 	ret
  10c4fc:	000b883a 	mov	r5,zero
  10c500:	010b9600 	call	10b960 <_Balloc>
  10c504:	00c00044 	movi	r3,1
  10c508:	10c00415 	stw	r3,16(r2)
  10c50c:	10000515 	stw	zero,20(r2)
  10c510:	003ff206 	br	10c4dc <__alt_data_end+0xfffcc4dc>
  10c514:	8023883a 	mov	r17,r16
  10c518:	0029883a 	mov	r20,zero
  10c51c:	4021883a 	mov	r16,r8
  10c520:	003fad06 	br	10c3d8 <__alt_data_end+0xfffcc3d8>
  10c524:	9005883a 	mov	r2,r18
  10c528:	94400504 	addi	r17,r18,20
  10c52c:	9c000504 	addi	r16,r19,20
  10c530:	9825883a 	mov	r18,r19
  10c534:	05000044 	movi	r20,1
  10c538:	1027883a 	mov	r19,r2
  10c53c:	003fa606 	br	10c3d8 <__alt_data_end+0xfffcc3d8>

0010c540 <__ulp>:
  10c540:	295ffc2c 	andhi	r5,r5,32752
  10c544:	00bf3034 	movhi	r2,64704
  10c548:	2887883a 	add	r3,r5,r2
  10c54c:	00c0020e 	bge	zero,r3,10c558 <__ulp+0x18>
  10c550:	0005883a 	mov	r2,zero
  10c554:	f800283a 	ret
  10c558:	00c7c83a 	sub	r3,zero,r3
  10c55c:	1807d53a 	srai	r3,r3,20
  10c560:	008004c4 	movi	r2,19
  10c564:	10c00b0e 	bge	r2,r3,10c594 <__ulp+0x54>
  10c568:	18bffb04 	addi	r2,r3,-20
  10c56c:	01000784 	movi	r4,30
  10c570:	0007883a 	mov	r3,zero
  10c574:	20800516 	blt	r4,r2,10c58c <__ulp+0x4c>
  10c578:	010007c4 	movi	r4,31
  10c57c:	2089c83a 	sub	r4,r4,r2
  10c580:	00800044 	movi	r2,1
  10c584:	1104983a 	sll	r2,r2,r4
  10c588:	f800283a 	ret
  10c58c:	00800044 	movi	r2,1
  10c590:	f800283a 	ret
  10c594:	01400234 	movhi	r5,8
  10c598:	28c7d83a 	sra	r3,r5,r3
  10c59c:	0005883a 	mov	r2,zero
  10c5a0:	f800283a 	ret

0010c5a4 <__b2d>:
  10c5a4:	defffa04 	addi	sp,sp,-24
  10c5a8:	dc000015 	stw	r16,0(sp)
  10c5ac:	24000417 	ldw	r16,16(r4)
  10c5b0:	dc400115 	stw	r17,4(sp)
  10c5b4:	24400504 	addi	r17,r4,20
  10c5b8:	8421883a 	add	r16,r16,r16
  10c5bc:	8421883a 	add	r16,r16,r16
  10c5c0:	8c21883a 	add	r16,r17,r16
  10c5c4:	dc800215 	stw	r18,8(sp)
  10c5c8:	84bfff17 	ldw	r18,-4(r16)
  10c5cc:	dd000415 	stw	r20,16(sp)
  10c5d0:	dcc00315 	stw	r19,12(sp)
  10c5d4:	9009883a 	mov	r4,r18
  10c5d8:	2829883a 	mov	r20,r5
  10c5dc:	dfc00515 	stw	ra,20(sp)
  10c5e0:	010bc7c0 	call	10bc7c <__hi0bits>
  10c5e4:	00c00804 	movi	r3,32
  10c5e8:	1889c83a 	sub	r4,r3,r2
  10c5ec:	a1000015 	stw	r4,0(r20)
  10c5f0:	01000284 	movi	r4,10
  10c5f4:	84ffff04 	addi	r19,r16,-4
  10c5f8:	20801216 	blt	r4,r2,10c644 <__b2d+0xa0>
  10c5fc:	018002c4 	movi	r6,11
  10c600:	308dc83a 	sub	r6,r6,r2
  10c604:	9186d83a 	srl	r3,r18,r6
  10c608:	18cffc34 	orhi	r3,r3,16368
  10c60c:	8cc0212e 	bgeu	r17,r19,10c694 <__b2d+0xf0>
  10c610:	813ffe17 	ldw	r4,-8(r16)
  10c614:	218cd83a 	srl	r6,r4,r6
  10c618:	10800544 	addi	r2,r2,21
  10c61c:	9084983a 	sll	r2,r18,r2
  10c620:	1184b03a 	or	r2,r2,r6
  10c624:	dfc00517 	ldw	ra,20(sp)
  10c628:	dd000417 	ldw	r20,16(sp)
  10c62c:	dcc00317 	ldw	r19,12(sp)
  10c630:	dc800217 	ldw	r18,8(sp)
  10c634:	dc400117 	ldw	r17,4(sp)
  10c638:	dc000017 	ldw	r16,0(sp)
  10c63c:	dec00604 	addi	sp,sp,24
  10c640:	f800283a 	ret
  10c644:	8cc00f2e 	bgeu	r17,r19,10c684 <__b2d+0xe0>
  10c648:	117ffd44 	addi	r5,r2,-11
  10c64c:	80bffe17 	ldw	r2,-8(r16)
  10c650:	28000e26 	beq	r5,zero,10c68c <__b2d+0xe8>
  10c654:	1949c83a 	sub	r4,r3,r5
  10c658:	9164983a 	sll	r18,r18,r5
  10c65c:	1106d83a 	srl	r3,r2,r4
  10c660:	81bffe04 	addi	r6,r16,-8
  10c664:	948ffc34 	orhi	r18,r18,16368
  10c668:	90c6b03a 	or	r3,r18,r3
  10c66c:	89800e2e 	bgeu	r17,r6,10c6a8 <__b2d+0x104>
  10c670:	81bffd17 	ldw	r6,-12(r16)
  10c674:	1144983a 	sll	r2,r2,r5
  10c678:	310ad83a 	srl	r5,r6,r4
  10c67c:	2884b03a 	or	r2,r5,r2
  10c680:	003fe806 	br	10c624 <__alt_data_end+0xfffcc624>
  10c684:	10bffd44 	addi	r2,r2,-11
  10c688:	1000041e 	bne	r2,zero,10c69c <__b2d+0xf8>
  10c68c:	90cffc34 	orhi	r3,r18,16368
  10c690:	003fe406 	br	10c624 <__alt_data_end+0xfffcc624>
  10c694:	000d883a 	mov	r6,zero
  10c698:	003fdf06 	br	10c618 <__alt_data_end+0xfffcc618>
  10c69c:	90a4983a 	sll	r18,r18,r2
  10c6a0:	0005883a 	mov	r2,zero
  10c6a4:	003ff906 	br	10c68c <__alt_data_end+0xfffcc68c>
  10c6a8:	1144983a 	sll	r2,r2,r5
  10c6ac:	003fdd06 	br	10c624 <__alt_data_end+0xfffcc624>

0010c6b0 <__d2b>:
  10c6b0:	defff804 	addi	sp,sp,-32
  10c6b4:	dc000215 	stw	r16,8(sp)
  10c6b8:	3021883a 	mov	r16,r6
  10c6bc:	dc400315 	stw	r17,12(sp)
  10c6c0:	8022907a 	slli	r17,r16,1
  10c6c4:	dd000615 	stw	r20,24(sp)
  10c6c8:	2829883a 	mov	r20,r5
  10c6cc:	01400044 	movi	r5,1
  10c6d0:	dcc00515 	stw	r19,20(sp)
  10c6d4:	dc800415 	stw	r18,16(sp)
  10c6d8:	dfc00715 	stw	ra,28(sp)
  10c6dc:	3825883a 	mov	r18,r7
  10c6e0:	8822d57a 	srli	r17,r17,21
  10c6e4:	010b9600 	call	10b960 <_Balloc>
  10c6e8:	1027883a 	mov	r19,r2
  10c6ec:	00800434 	movhi	r2,16
  10c6f0:	10bfffc4 	addi	r2,r2,-1
  10c6f4:	808c703a 	and	r6,r16,r2
  10c6f8:	88000126 	beq	r17,zero,10c700 <__d2b+0x50>
  10c6fc:	31800434 	orhi	r6,r6,16
  10c700:	d9800015 	stw	r6,0(sp)
  10c704:	a0002426 	beq	r20,zero,10c798 <__d2b+0xe8>
  10c708:	d9000104 	addi	r4,sp,4
  10c70c:	dd000115 	stw	r20,4(sp)
  10c710:	010bce40 	call	10bce4 <__lo0bits>
  10c714:	d8c00017 	ldw	r3,0(sp)
  10c718:	10002f1e 	bne	r2,zero,10c7d8 <__d2b+0x128>
  10c71c:	d9000117 	ldw	r4,4(sp)
  10c720:	99000515 	stw	r4,20(r19)
  10c724:	1821003a 	cmpeq	r16,r3,zero
  10c728:	01000084 	movi	r4,2
  10c72c:	2421c83a 	sub	r16,r4,r16
  10c730:	98c00615 	stw	r3,24(r19)
  10c734:	9c000415 	stw	r16,16(r19)
  10c738:	88001f1e 	bne	r17,zero,10c7b8 <__d2b+0x108>
  10c73c:	10bef384 	addi	r2,r2,-1074
  10c740:	90800015 	stw	r2,0(r18)
  10c744:	00900034 	movhi	r2,16384
  10c748:	10bfffc4 	addi	r2,r2,-1
  10c74c:	8085883a 	add	r2,r16,r2
  10c750:	1085883a 	add	r2,r2,r2
  10c754:	1085883a 	add	r2,r2,r2
  10c758:	9885883a 	add	r2,r19,r2
  10c75c:	11000517 	ldw	r4,20(r2)
  10c760:	8020917a 	slli	r16,r16,5
  10c764:	010bc7c0 	call	10bc7c <__hi0bits>
  10c768:	d8c00817 	ldw	r3,32(sp)
  10c76c:	8085c83a 	sub	r2,r16,r2
  10c770:	18800015 	stw	r2,0(r3)
  10c774:	9805883a 	mov	r2,r19
  10c778:	dfc00717 	ldw	ra,28(sp)
  10c77c:	dd000617 	ldw	r20,24(sp)
  10c780:	dcc00517 	ldw	r19,20(sp)
  10c784:	dc800417 	ldw	r18,16(sp)
  10c788:	dc400317 	ldw	r17,12(sp)
  10c78c:	dc000217 	ldw	r16,8(sp)
  10c790:	dec00804 	addi	sp,sp,32
  10c794:	f800283a 	ret
  10c798:	d809883a 	mov	r4,sp
  10c79c:	010bce40 	call	10bce4 <__lo0bits>
  10c7a0:	d8c00017 	ldw	r3,0(sp)
  10c7a4:	04000044 	movi	r16,1
  10c7a8:	9c000415 	stw	r16,16(r19)
  10c7ac:	98c00515 	stw	r3,20(r19)
  10c7b0:	10800804 	addi	r2,r2,32
  10c7b4:	883fe126 	beq	r17,zero,10c73c <__alt_data_end+0xfffcc73c>
  10c7b8:	00c00d44 	movi	r3,53
  10c7bc:	8c7ef344 	addi	r17,r17,-1075
  10c7c0:	88a3883a 	add	r17,r17,r2
  10c7c4:	1885c83a 	sub	r2,r3,r2
  10c7c8:	d8c00817 	ldw	r3,32(sp)
  10c7cc:	94400015 	stw	r17,0(r18)
  10c7d0:	18800015 	stw	r2,0(r3)
  10c7d4:	003fe706 	br	10c774 <__alt_data_end+0xfffcc774>
  10c7d8:	01000804 	movi	r4,32
  10c7dc:	2089c83a 	sub	r4,r4,r2
  10c7e0:	1908983a 	sll	r4,r3,r4
  10c7e4:	d9400117 	ldw	r5,4(sp)
  10c7e8:	1886d83a 	srl	r3,r3,r2
  10c7ec:	2148b03a 	or	r4,r4,r5
  10c7f0:	99000515 	stw	r4,20(r19)
  10c7f4:	d8c00015 	stw	r3,0(sp)
  10c7f8:	003fca06 	br	10c724 <__alt_data_end+0xfffcc724>

0010c7fc <__ratio>:
  10c7fc:	defff904 	addi	sp,sp,-28
  10c800:	dc400315 	stw	r17,12(sp)
  10c804:	2823883a 	mov	r17,r5
  10c808:	d9400104 	addi	r5,sp,4
  10c80c:	dfc00615 	stw	ra,24(sp)
  10c810:	dcc00515 	stw	r19,20(sp)
  10c814:	dc800415 	stw	r18,16(sp)
  10c818:	2027883a 	mov	r19,r4
  10c81c:	dc000215 	stw	r16,8(sp)
  10c820:	010c5a40 	call	10c5a4 <__b2d>
  10c824:	d80b883a 	mov	r5,sp
  10c828:	8809883a 	mov	r4,r17
  10c82c:	1025883a 	mov	r18,r2
  10c830:	1821883a 	mov	r16,r3
  10c834:	010c5a40 	call	10c5a4 <__b2d>
  10c838:	8a000417 	ldw	r8,16(r17)
  10c83c:	99000417 	ldw	r4,16(r19)
  10c840:	d9400117 	ldw	r5,4(sp)
  10c844:	2209c83a 	sub	r4,r4,r8
  10c848:	2010917a 	slli	r8,r4,5
  10c84c:	d9000017 	ldw	r4,0(sp)
  10c850:	2909c83a 	sub	r4,r5,r4
  10c854:	4109883a 	add	r4,r8,r4
  10c858:	01000e0e 	bge	zero,r4,10c894 <__ratio+0x98>
  10c85c:	2008953a 	slli	r4,r4,20
  10c860:	2421883a 	add	r16,r4,r16
  10c864:	100d883a 	mov	r6,r2
  10c868:	180f883a 	mov	r7,r3
  10c86c:	9009883a 	mov	r4,r18
  10c870:	800b883a 	mov	r5,r16
  10c874:	01164cc0 	call	1164cc <__divdf3>
  10c878:	dfc00617 	ldw	ra,24(sp)
  10c87c:	dcc00517 	ldw	r19,20(sp)
  10c880:	dc800417 	ldw	r18,16(sp)
  10c884:	dc400317 	ldw	r17,12(sp)
  10c888:	dc000217 	ldw	r16,8(sp)
  10c88c:	dec00704 	addi	sp,sp,28
  10c890:	f800283a 	ret
  10c894:	2008953a 	slli	r4,r4,20
  10c898:	1907c83a 	sub	r3,r3,r4
  10c89c:	003ff106 	br	10c864 <__alt_data_end+0xfffcc864>

0010c8a0 <_mprec_log10>:
  10c8a0:	defffe04 	addi	sp,sp,-8
  10c8a4:	dc000015 	stw	r16,0(sp)
  10c8a8:	dfc00115 	stw	ra,4(sp)
  10c8ac:	008005c4 	movi	r2,23
  10c8b0:	2021883a 	mov	r16,r4
  10c8b4:	11000d0e 	bge	r2,r4,10c8ec <_mprec_log10+0x4c>
  10c8b8:	0005883a 	mov	r2,zero
  10c8bc:	00cffc34 	movhi	r3,16368
  10c8c0:	843fffc4 	addi	r16,r16,-1
  10c8c4:	000d883a 	mov	r6,zero
  10c8c8:	01d00934 	movhi	r7,16420
  10c8cc:	1009883a 	mov	r4,r2
  10c8d0:	180b883a 	mov	r5,r3
  10c8d4:	01170f40 	call	1170f4 <__muldf3>
  10c8d8:	803ff91e 	bne	r16,zero,10c8c0 <__alt_data_end+0xfffcc8c0>
  10c8dc:	dfc00117 	ldw	ra,4(sp)
  10c8e0:	dc000017 	ldw	r16,0(sp)
  10c8e4:	dec00204 	addi	sp,sp,8
  10c8e8:	f800283a 	ret
  10c8ec:	202090fa 	slli	r16,r4,3
  10c8f0:	008004b4 	movhi	r2,18
  10c8f4:	108d7204 	addi	r2,r2,13768
  10c8f8:	1421883a 	add	r16,r2,r16
  10c8fc:	80800017 	ldw	r2,0(r16)
  10c900:	80c00117 	ldw	r3,4(r16)
  10c904:	dfc00117 	ldw	ra,4(sp)
  10c908:	dc000017 	ldw	r16,0(sp)
  10c90c:	dec00204 	addi	sp,sp,8
  10c910:	f800283a 	ret

0010c914 <__copybits>:
  10c914:	297fffc4 	addi	r5,r5,-1
  10c918:	280fd17a 	srai	r7,r5,5
  10c91c:	30c00417 	ldw	r3,16(r6)
  10c920:	30800504 	addi	r2,r6,20
  10c924:	39c00044 	addi	r7,r7,1
  10c928:	18c7883a 	add	r3,r3,r3
  10c92c:	39cf883a 	add	r7,r7,r7
  10c930:	18c7883a 	add	r3,r3,r3
  10c934:	39cf883a 	add	r7,r7,r7
  10c938:	10c7883a 	add	r3,r2,r3
  10c93c:	21cf883a 	add	r7,r4,r7
  10c940:	10c00d2e 	bgeu	r2,r3,10c978 <__copybits+0x64>
  10c944:	200b883a 	mov	r5,r4
  10c948:	12000017 	ldw	r8,0(r2)
  10c94c:	29400104 	addi	r5,r5,4
  10c950:	10800104 	addi	r2,r2,4
  10c954:	2a3fff15 	stw	r8,-4(r5)
  10c958:	10fffb36 	bltu	r2,r3,10c948 <__alt_data_end+0xfffcc948>
  10c95c:	1985c83a 	sub	r2,r3,r6
  10c960:	10bffac4 	addi	r2,r2,-21
  10c964:	1004d0ba 	srli	r2,r2,2
  10c968:	10800044 	addi	r2,r2,1
  10c96c:	1085883a 	add	r2,r2,r2
  10c970:	1085883a 	add	r2,r2,r2
  10c974:	2089883a 	add	r4,r4,r2
  10c978:	21c0032e 	bgeu	r4,r7,10c988 <__copybits+0x74>
  10c97c:	20000015 	stw	zero,0(r4)
  10c980:	21000104 	addi	r4,r4,4
  10c984:	21fffd36 	bltu	r4,r7,10c97c <__alt_data_end+0xfffcc97c>
  10c988:	f800283a 	ret

0010c98c <__any_on>:
  10c98c:	20c00417 	ldw	r3,16(r4)
  10c990:	2805d17a 	srai	r2,r5,5
  10c994:	21000504 	addi	r4,r4,20
  10c998:	18800d0e 	bge	r3,r2,10c9d0 <__any_on+0x44>
  10c99c:	18c7883a 	add	r3,r3,r3
  10c9a0:	18c7883a 	add	r3,r3,r3
  10c9a4:	20c7883a 	add	r3,r4,r3
  10c9a8:	20c0192e 	bgeu	r4,r3,10ca10 <__any_on+0x84>
  10c9ac:	18bfff17 	ldw	r2,-4(r3)
  10c9b0:	18ffff04 	addi	r3,r3,-4
  10c9b4:	1000041e 	bne	r2,zero,10c9c8 <__any_on+0x3c>
  10c9b8:	20c0142e 	bgeu	r4,r3,10ca0c <__any_on+0x80>
  10c9bc:	18ffff04 	addi	r3,r3,-4
  10c9c0:	19400017 	ldw	r5,0(r3)
  10c9c4:	283ffc26 	beq	r5,zero,10c9b8 <__alt_data_end+0xfffcc9b8>
  10c9c8:	00800044 	movi	r2,1
  10c9cc:	f800283a 	ret
  10c9d0:	10c00a0e 	bge	r2,r3,10c9fc <__any_on+0x70>
  10c9d4:	1085883a 	add	r2,r2,r2
  10c9d8:	1085883a 	add	r2,r2,r2
  10c9dc:	294007cc 	andi	r5,r5,31
  10c9e0:	2087883a 	add	r3,r4,r2
  10c9e4:	283ff026 	beq	r5,zero,10c9a8 <__alt_data_end+0xfffcc9a8>
  10c9e8:	19800017 	ldw	r6,0(r3)
  10c9ec:	3144d83a 	srl	r2,r6,r5
  10c9f0:	114a983a 	sll	r5,r2,r5
  10c9f4:	317ff41e 	bne	r6,r5,10c9c8 <__alt_data_end+0xfffcc9c8>
  10c9f8:	003feb06 	br	10c9a8 <__alt_data_end+0xfffcc9a8>
  10c9fc:	1085883a 	add	r2,r2,r2
  10ca00:	1085883a 	add	r2,r2,r2
  10ca04:	2087883a 	add	r3,r4,r2
  10ca08:	003fe706 	br	10c9a8 <__alt_data_end+0xfffcc9a8>
  10ca0c:	f800283a 	ret
  10ca10:	0005883a 	mov	r2,zero
  10ca14:	f800283a 	ret

0010ca18 <_read_r>:
  10ca18:	defffd04 	addi	sp,sp,-12
  10ca1c:	2805883a 	mov	r2,r5
  10ca20:	dc000015 	stw	r16,0(sp)
  10ca24:	040004b4 	movhi	r16,18
  10ca28:	dc400115 	stw	r17,4(sp)
  10ca2c:	300b883a 	mov	r5,r6
  10ca30:	841c9c04 	addi	r16,r16,29296
  10ca34:	2023883a 	mov	r17,r4
  10ca38:	380d883a 	mov	r6,r7
  10ca3c:	1009883a 	mov	r4,r2
  10ca40:	dfc00215 	stw	ra,8(sp)
  10ca44:	80000015 	stw	zero,0(r16)
  10ca48:	0118c840 	call	118c84 <read>
  10ca4c:	00ffffc4 	movi	r3,-1
  10ca50:	10c00526 	beq	r2,r3,10ca68 <_read_r+0x50>
  10ca54:	dfc00217 	ldw	ra,8(sp)
  10ca58:	dc400117 	ldw	r17,4(sp)
  10ca5c:	dc000017 	ldw	r16,0(sp)
  10ca60:	dec00304 	addi	sp,sp,12
  10ca64:	f800283a 	ret
  10ca68:	80c00017 	ldw	r3,0(r16)
  10ca6c:	183ff926 	beq	r3,zero,10ca54 <__alt_data_end+0xfffcca54>
  10ca70:	88c00015 	stw	r3,0(r17)
  10ca74:	003ff706 	br	10ca54 <__alt_data_end+0xfffcca54>

0010ca78 <_realloc_r>:
  10ca78:	defff604 	addi	sp,sp,-40
  10ca7c:	dc800215 	stw	r18,8(sp)
  10ca80:	dfc00915 	stw	ra,36(sp)
  10ca84:	df000815 	stw	fp,32(sp)
  10ca88:	ddc00715 	stw	r23,28(sp)
  10ca8c:	dd800615 	stw	r22,24(sp)
  10ca90:	dd400515 	stw	r21,20(sp)
  10ca94:	dd000415 	stw	r20,16(sp)
  10ca98:	dcc00315 	stw	r19,12(sp)
  10ca9c:	dc400115 	stw	r17,4(sp)
  10caa0:	dc000015 	stw	r16,0(sp)
  10caa4:	3025883a 	mov	r18,r6
  10caa8:	2800b726 	beq	r5,zero,10cd88 <_realloc_r+0x310>
  10caac:	282b883a 	mov	r21,r5
  10cab0:	2029883a 	mov	r20,r4
  10cab4:	011911c0 	call	11911c <__malloc_lock>
  10cab8:	a8bfff17 	ldw	r2,-4(r21)
  10cabc:	043fff04 	movi	r16,-4
  10cac0:	90c002c4 	addi	r3,r18,11
  10cac4:	01000584 	movi	r4,22
  10cac8:	acfffe04 	addi	r19,r21,-8
  10cacc:	1420703a 	and	r16,r2,r16
  10cad0:	20c0332e 	bgeu	r4,r3,10cba0 <_realloc_r+0x128>
  10cad4:	047ffe04 	movi	r17,-8
  10cad8:	1c62703a 	and	r17,r3,r17
  10cadc:	8807883a 	mov	r3,r17
  10cae0:	88005816 	blt	r17,zero,10cc44 <_realloc_r+0x1cc>
  10cae4:	8c805736 	bltu	r17,r18,10cc44 <_realloc_r+0x1cc>
  10cae8:	80c0300e 	bge	r16,r3,10cbac <_realloc_r+0x134>
  10caec:	070004b4 	movhi	fp,18
  10caf0:	e70feb04 	addi	fp,fp,16300
  10caf4:	e1c00217 	ldw	r7,8(fp)
  10caf8:	9c09883a 	add	r4,r19,r16
  10cafc:	22000117 	ldw	r8,4(r4)
  10cb00:	21c06326 	beq	r4,r7,10cc90 <_realloc_r+0x218>
  10cb04:	017fff84 	movi	r5,-2
  10cb08:	414a703a 	and	r5,r8,r5
  10cb0c:	214b883a 	add	r5,r4,r5
  10cb10:	29800117 	ldw	r6,4(r5)
  10cb14:	3180004c 	andi	r6,r6,1
  10cb18:	30003f26 	beq	r6,zero,10cc18 <_realloc_r+0x1a0>
  10cb1c:	1080004c 	andi	r2,r2,1
  10cb20:	10008326 	beq	r2,zero,10cd30 <_realloc_r+0x2b8>
  10cb24:	900b883a 	mov	r5,r18
  10cb28:	a009883a 	mov	r4,r20
  10cb2c:	010acf00 	call	10acf0 <_malloc_r>
  10cb30:	1025883a 	mov	r18,r2
  10cb34:	10011e26 	beq	r2,zero,10cfb0 <_realloc_r+0x538>
  10cb38:	a93fff17 	ldw	r4,-4(r21)
  10cb3c:	10fffe04 	addi	r3,r2,-8
  10cb40:	00bfff84 	movi	r2,-2
  10cb44:	2084703a 	and	r2,r4,r2
  10cb48:	9885883a 	add	r2,r19,r2
  10cb4c:	1880ee26 	beq	r3,r2,10cf08 <_realloc_r+0x490>
  10cb50:	81bfff04 	addi	r6,r16,-4
  10cb54:	00800904 	movi	r2,36
  10cb58:	1180b836 	bltu	r2,r6,10ce3c <_realloc_r+0x3c4>
  10cb5c:	00c004c4 	movi	r3,19
  10cb60:	19809636 	bltu	r3,r6,10cdbc <_realloc_r+0x344>
  10cb64:	9005883a 	mov	r2,r18
  10cb68:	a807883a 	mov	r3,r21
  10cb6c:	19000017 	ldw	r4,0(r3)
  10cb70:	11000015 	stw	r4,0(r2)
  10cb74:	19000117 	ldw	r4,4(r3)
  10cb78:	11000115 	stw	r4,4(r2)
  10cb7c:	18c00217 	ldw	r3,8(r3)
  10cb80:	10c00215 	stw	r3,8(r2)
  10cb84:	a80b883a 	mov	r5,r21
  10cb88:	a009883a 	mov	r4,r20
  10cb8c:	010a0680 	call	10a068 <_free_r>
  10cb90:	a009883a 	mov	r4,r20
  10cb94:	011923c0 	call	11923c <__malloc_unlock>
  10cb98:	9005883a 	mov	r2,r18
  10cb9c:	00001206 	br	10cbe8 <_realloc_r+0x170>
  10cba0:	00c00404 	movi	r3,16
  10cba4:	1823883a 	mov	r17,r3
  10cba8:	003fce06 	br	10cae4 <__alt_data_end+0xfffccae4>
  10cbac:	a825883a 	mov	r18,r21
  10cbb0:	8445c83a 	sub	r2,r16,r17
  10cbb4:	00c003c4 	movi	r3,15
  10cbb8:	18802636 	bltu	r3,r2,10cc54 <_realloc_r+0x1dc>
  10cbbc:	99800117 	ldw	r6,4(r19)
  10cbc0:	9c07883a 	add	r3,r19,r16
  10cbc4:	3180004c 	andi	r6,r6,1
  10cbc8:	3420b03a 	or	r16,r6,r16
  10cbcc:	9c000115 	stw	r16,4(r19)
  10cbd0:	18800117 	ldw	r2,4(r3)
  10cbd4:	10800054 	ori	r2,r2,1
  10cbd8:	18800115 	stw	r2,4(r3)
  10cbdc:	a009883a 	mov	r4,r20
  10cbe0:	011923c0 	call	11923c <__malloc_unlock>
  10cbe4:	9005883a 	mov	r2,r18
  10cbe8:	dfc00917 	ldw	ra,36(sp)
  10cbec:	df000817 	ldw	fp,32(sp)
  10cbf0:	ddc00717 	ldw	r23,28(sp)
  10cbf4:	dd800617 	ldw	r22,24(sp)
  10cbf8:	dd400517 	ldw	r21,20(sp)
  10cbfc:	dd000417 	ldw	r20,16(sp)
  10cc00:	dcc00317 	ldw	r19,12(sp)
  10cc04:	dc800217 	ldw	r18,8(sp)
  10cc08:	dc400117 	ldw	r17,4(sp)
  10cc0c:	dc000017 	ldw	r16,0(sp)
  10cc10:	dec00a04 	addi	sp,sp,40
  10cc14:	f800283a 	ret
  10cc18:	017fff04 	movi	r5,-4
  10cc1c:	414a703a 	and	r5,r8,r5
  10cc20:	814d883a 	add	r6,r16,r5
  10cc24:	30c01f16 	blt	r6,r3,10cca4 <_realloc_r+0x22c>
  10cc28:	20800317 	ldw	r2,12(r4)
  10cc2c:	20c00217 	ldw	r3,8(r4)
  10cc30:	a825883a 	mov	r18,r21
  10cc34:	3021883a 	mov	r16,r6
  10cc38:	18800315 	stw	r2,12(r3)
  10cc3c:	10c00215 	stw	r3,8(r2)
  10cc40:	003fdb06 	br	10cbb0 <__alt_data_end+0xfffccbb0>
  10cc44:	00800304 	movi	r2,12
  10cc48:	a0800015 	stw	r2,0(r20)
  10cc4c:	0005883a 	mov	r2,zero
  10cc50:	003fe506 	br	10cbe8 <__alt_data_end+0xfffccbe8>
  10cc54:	98c00117 	ldw	r3,4(r19)
  10cc58:	9c4b883a 	add	r5,r19,r17
  10cc5c:	11000054 	ori	r4,r2,1
  10cc60:	18c0004c 	andi	r3,r3,1
  10cc64:	1c62b03a 	or	r17,r3,r17
  10cc68:	9c400115 	stw	r17,4(r19)
  10cc6c:	29000115 	stw	r4,4(r5)
  10cc70:	2885883a 	add	r2,r5,r2
  10cc74:	10c00117 	ldw	r3,4(r2)
  10cc78:	29400204 	addi	r5,r5,8
  10cc7c:	a009883a 	mov	r4,r20
  10cc80:	18c00054 	ori	r3,r3,1
  10cc84:	10c00115 	stw	r3,4(r2)
  10cc88:	010a0680 	call	10a068 <_free_r>
  10cc8c:	003fd306 	br	10cbdc <__alt_data_end+0xfffccbdc>
  10cc90:	017fff04 	movi	r5,-4
  10cc94:	414a703a 	and	r5,r8,r5
  10cc98:	89800404 	addi	r6,r17,16
  10cc9c:	8151883a 	add	r8,r16,r5
  10cca0:	4180590e 	bge	r8,r6,10ce08 <_realloc_r+0x390>
  10cca4:	1080004c 	andi	r2,r2,1
  10cca8:	103f9e1e 	bne	r2,zero,10cb24 <__alt_data_end+0xfffccb24>
  10ccac:	adbffe17 	ldw	r22,-8(r21)
  10ccb0:	00bfff04 	movi	r2,-4
  10ccb4:	9dadc83a 	sub	r22,r19,r22
  10ccb8:	b1800117 	ldw	r6,4(r22)
  10ccbc:	3084703a 	and	r2,r6,r2
  10ccc0:	20002026 	beq	r4,zero,10cd44 <_realloc_r+0x2cc>
  10ccc4:	80af883a 	add	r23,r16,r2
  10ccc8:	b96f883a 	add	r23,r23,r5
  10cccc:	21c05f26 	beq	r4,r7,10ce4c <_realloc_r+0x3d4>
  10ccd0:	b8c01c16 	blt	r23,r3,10cd44 <_realloc_r+0x2cc>
  10ccd4:	20800317 	ldw	r2,12(r4)
  10ccd8:	20c00217 	ldw	r3,8(r4)
  10ccdc:	81bfff04 	addi	r6,r16,-4
  10cce0:	01000904 	movi	r4,36
  10cce4:	18800315 	stw	r2,12(r3)
  10cce8:	10c00215 	stw	r3,8(r2)
  10ccec:	b0c00217 	ldw	r3,8(r22)
  10ccf0:	b0800317 	ldw	r2,12(r22)
  10ccf4:	b4800204 	addi	r18,r22,8
  10ccf8:	18800315 	stw	r2,12(r3)
  10ccfc:	10c00215 	stw	r3,8(r2)
  10cd00:	21801b36 	bltu	r4,r6,10cd70 <_realloc_r+0x2f8>
  10cd04:	008004c4 	movi	r2,19
  10cd08:	1180352e 	bgeu	r2,r6,10cde0 <_realloc_r+0x368>
  10cd0c:	a8800017 	ldw	r2,0(r21)
  10cd10:	b0800215 	stw	r2,8(r22)
  10cd14:	a8800117 	ldw	r2,4(r21)
  10cd18:	b0800315 	stw	r2,12(r22)
  10cd1c:	008006c4 	movi	r2,27
  10cd20:	11807f36 	bltu	r2,r6,10cf20 <_realloc_r+0x4a8>
  10cd24:	b0800404 	addi	r2,r22,16
  10cd28:	ad400204 	addi	r21,r21,8
  10cd2c:	00002d06 	br	10cde4 <_realloc_r+0x36c>
  10cd30:	adbffe17 	ldw	r22,-8(r21)
  10cd34:	00bfff04 	movi	r2,-4
  10cd38:	9dadc83a 	sub	r22,r19,r22
  10cd3c:	b1000117 	ldw	r4,4(r22)
  10cd40:	2084703a 	and	r2,r4,r2
  10cd44:	b03f7726 	beq	r22,zero,10cb24 <__alt_data_end+0xfffccb24>
  10cd48:	80af883a 	add	r23,r16,r2
  10cd4c:	b8ff7516 	blt	r23,r3,10cb24 <__alt_data_end+0xfffccb24>
  10cd50:	b0800317 	ldw	r2,12(r22)
  10cd54:	b0c00217 	ldw	r3,8(r22)
  10cd58:	81bfff04 	addi	r6,r16,-4
  10cd5c:	01000904 	movi	r4,36
  10cd60:	18800315 	stw	r2,12(r3)
  10cd64:	10c00215 	stw	r3,8(r2)
  10cd68:	b4800204 	addi	r18,r22,8
  10cd6c:	21bfe52e 	bgeu	r4,r6,10cd04 <__alt_data_end+0xfffccd04>
  10cd70:	a80b883a 	mov	r5,r21
  10cd74:	9009883a 	mov	r4,r18
  10cd78:	010b8040 	call	10b804 <memmove>
  10cd7c:	b821883a 	mov	r16,r23
  10cd80:	b027883a 	mov	r19,r22
  10cd84:	003f8a06 	br	10cbb0 <__alt_data_end+0xfffccbb0>
  10cd88:	300b883a 	mov	r5,r6
  10cd8c:	dfc00917 	ldw	ra,36(sp)
  10cd90:	df000817 	ldw	fp,32(sp)
  10cd94:	ddc00717 	ldw	r23,28(sp)
  10cd98:	dd800617 	ldw	r22,24(sp)
  10cd9c:	dd400517 	ldw	r21,20(sp)
  10cda0:	dd000417 	ldw	r20,16(sp)
  10cda4:	dcc00317 	ldw	r19,12(sp)
  10cda8:	dc800217 	ldw	r18,8(sp)
  10cdac:	dc400117 	ldw	r17,4(sp)
  10cdb0:	dc000017 	ldw	r16,0(sp)
  10cdb4:	dec00a04 	addi	sp,sp,40
  10cdb8:	010acf01 	jmpi	10acf0 <_malloc_r>
  10cdbc:	a8c00017 	ldw	r3,0(r21)
  10cdc0:	90c00015 	stw	r3,0(r18)
  10cdc4:	a8c00117 	ldw	r3,4(r21)
  10cdc8:	90c00115 	stw	r3,4(r18)
  10cdcc:	00c006c4 	movi	r3,27
  10cdd0:	19804536 	bltu	r3,r6,10cee8 <_realloc_r+0x470>
  10cdd4:	90800204 	addi	r2,r18,8
  10cdd8:	a8c00204 	addi	r3,r21,8
  10cddc:	003f6306 	br	10cb6c <__alt_data_end+0xfffccb6c>
  10cde0:	9005883a 	mov	r2,r18
  10cde4:	a8c00017 	ldw	r3,0(r21)
  10cde8:	b821883a 	mov	r16,r23
  10cdec:	b027883a 	mov	r19,r22
  10cdf0:	10c00015 	stw	r3,0(r2)
  10cdf4:	a8c00117 	ldw	r3,4(r21)
  10cdf8:	10c00115 	stw	r3,4(r2)
  10cdfc:	a8c00217 	ldw	r3,8(r21)
  10ce00:	10c00215 	stw	r3,8(r2)
  10ce04:	003f6a06 	br	10cbb0 <__alt_data_end+0xfffccbb0>
  10ce08:	9c67883a 	add	r19,r19,r17
  10ce0c:	4445c83a 	sub	r2,r8,r17
  10ce10:	e4c00215 	stw	r19,8(fp)
  10ce14:	10800054 	ori	r2,r2,1
  10ce18:	98800115 	stw	r2,4(r19)
  10ce1c:	a8bfff17 	ldw	r2,-4(r21)
  10ce20:	a009883a 	mov	r4,r20
  10ce24:	1080004c 	andi	r2,r2,1
  10ce28:	1462b03a 	or	r17,r2,r17
  10ce2c:	ac7fff15 	stw	r17,-4(r21)
  10ce30:	011923c0 	call	11923c <__malloc_unlock>
  10ce34:	a805883a 	mov	r2,r21
  10ce38:	003f6b06 	br	10cbe8 <__alt_data_end+0xfffccbe8>
  10ce3c:	a80b883a 	mov	r5,r21
  10ce40:	9009883a 	mov	r4,r18
  10ce44:	010b8040 	call	10b804 <memmove>
  10ce48:	003f4e06 	br	10cb84 <__alt_data_end+0xfffccb84>
  10ce4c:	89000404 	addi	r4,r17,16
  10ce50:	b93fbc16 	blt	r23,r4,10cd44 <__alt_data_end+0xfffccd44>
  10ce54:	b0800317 	ldw	r2,12(r22)
  10ce58:	b0c00217 	ldw	r3,8(r22)
  10ce5c:	81bfff04 	addi	r6,r16,-4
  10ce60:	01000904 	movi	r4,36
  10ce64:	18800315 	stw	r2,12(r3)
  10ce68:	10c00215 	stw	r3,8(r2)
  10ce6c:	b4800204 	addi	r18,r22,8
  10ce70:	21804336 	bltu	r4,r6,10cf80 <_realloc_r+0x508>
  10ce74:	008004c4 	movi	r2,19
  10ce78:	11803f2e 	bgeu	r2,r6,10cf78 <_realloc_r+0x500>
  10ce7c:	a8800017 	ldw	r2,0(r21)
  10ce80:	b0800215 	stw	r2,8(r22)
  10ce84:	a8800117 	ldw	r2,4(r21)
  10ce88:	b0800315 	stw	r2,12(r22)
  10ce8c:	008006c4 	movi	r2,27
  10ce90:	11803f36 	bltu	r2,r6,10cf90 <_realloc_r+0x518>
  10ce94:	b0800404 	addi	r2,r22,16
  10ce98:	ad400204 	addi	r21,r21,8
  10ce9c:	a8c00017 	ldw	r3,0(r21)
  10cea0:	10c00015 	stw	r3,0(r2)
  10cea4:	a8c00117 	ldw	r3,4(r21)
  10cea8:	10c00115 	stw	r3,4(r2)
  10ceac:	a8c00217 	ldw	r3,8(r21)
  10ceb0:	10c00215 	stw	r3,8(r2)
  10ceb4:	b447883a 	add	r3,r22,r17
  10ceb8:	bc45c83a 	sub	r2,r23,r17
  10cebc:	e0c00215 	stw	r3,8(fp)
  10cec0:	10800054 	ori	r2,r2,1
  10cec4:	18800115 	stw	r2,4(r3)
  10cec8:	b0800117 	ldw	r2,4(r22)
  10cecc:	a009883a 	mov	r4,r20
  10ced0:	1080004c 	andi	r2,r2,1
  10ced4:	1462b03a 	or	r17,r2,r17
  10ced8:	b4400115 	stw	r17,4(r22)
  10cedc:	011923c0 	call	11923c <__malloc_unlock>
  10cee0:	9005883a 	mov	r2,r18
  10cee4:	003f4006 	br	10cbe8 <__alt_data_end+0xfffccbe8>
  10cee8:	a8c00217 	ldw	r3,8(r21)
  10ceec:	90c00215 	stw	r3,8(r18)
  10cef0:	a8c00317 	ldw	r3,12(r21)
  10cef4:	90c00315 	stw	r3,12(r18)
  10cef8:	30801126 	beq	r6,r2,10cf40 <_realloc_r+0x4c8>
  10cefc:	90800404 	addi	r2,r18,16
  10cf00:	a8c00404 	addi	r3,r21,16
  10cf04:	003f1906 	br	10cb6c <__alt_data_end+0xfffccb6c>
  10cf08:	90ffff17 	ldw	r3,-4(r18)
  10cf0c:	00bfff04 	movi	r2,-4
  10cf10:	a825883a 	mov	r18,r21
  10cf14:	1884703a 	and	r2,r3,r2
  10cf18:	80a1883a 	add	r16,r16,r2
  10cf1c:	003f2406 	br	10cbb0 <__alt_data_end+0xfffccbb0>
  10cf20:	a8800217 	ldw	r2,8(r21)
  10cf24:	b0800415 	stw	r2,16(r22)
  10cf28:	a8800317 	ldw	r2,12(r21)
  10cf2c:	b0800515 	stw	r2,20(r22)
  10cf30:	31000a26 	beq	r6,r4,10cf5c <_realloc_r+0x4e4>
  10cf34:	b0800604 	addi	r2,r22,24
  10cf38:	ad400404 	addi	r21,r21,16
  10cf3c:	003fa906 	br	10cde4 <__alt_data_end+0xfffccde4>
  10cf40:	a9000417 	ldw	r4,16(r21)
  10cf44:	90800604 	addi	r2,r18,24
  10cf48:	a8c00604 	addi	r3,r21,24
  10cf4c:	91000415 	stw	r4,16(r18)
  10cf50:	a9000517 	ldw	r4,20(r21)
  10cf54:	91000515 	stw	r4,20(r18)
  10cf58:	003f0406 	br	10cb6c <__alt_data_end+0xfffccb6c>
  10cf5c:	a8c00417 	ldw	r3,16(r21)
  10cf60:	ad400604 	addi	r21,r21,24
  10cf64:	b0800804 	addi	r2,r22,32
  10cf68:	b0c00615 	stw	r3,24(r22)
  10cf6c:	a8ffff17 	ldw	r3,-4(r21)
  10cf70:	b0c00715 	stw	r3,28(r22)
  10cf74:	003f9b06 	br	10cde4 <__alt_data_end+0xfffccde4>
  10cf78:	9005883a 	mov	r2,r18
  10cf7c:	003fc706 	br	10ce9c <__alt_data_end+0xfffcce9c>
  10cf80:	a80b883a 	mov	r5,r21
  10cf84:	9009883a 	mov	r4,r18
  10cf88:	010b8040 	call	10b804 <memmove>
  10cf8c:	003fc906 	br	10ceb4 <__alt_data_end+0xfffcceb4>
  10cf90:	a8800217 	ldw	r2,8(r21)
  10cf94:	b0800415 	stw	r2,16(r22)
  10cf98:	a8800317 	ldw	r2,12(r21)
  10cf9c:	b0800515 	stw	r2,20(r22)
  10cfa0:	31000726 	beq	r6,r4,10cfc0 <_realloc_r+0x548>
  10cfa4:	b0800604 	addi	r2,r22,24
  10cfa8:	ad400404 	addi	r21,r21,16
  10cfac:	003fbb06 	br	10ce9c <__alt_data_end+0xfffcce9c>
  10cfb0:	a009883a 	mov	r4,r20
  10cfb4:	011923c0 	call	11923c <__malloc_unlock>
  10cfb8:	0005883a 	mov	r2,zero
  10cfbc:	003f0a06 	br	10cbe8 <__alt_data_end+0xfffccbe8>
  10cfc0:	a8c00417 	ldw	r3,16(r21)
  10cfc4:	ad400604 	addi	r21,r21,24
  10cfc8:	b0800804 	addi	r2,r22,32
  10cfcc:	b0c00615 	stw	r3,24(r22)
  10cfd0:	a8ffff17 	ldw	r3,-4(r21)
  10cfd4:	b0c00715 	stw	r3,28(r22)
  10cfd8:	003fb006 	br	10ce9c <__alt_data_end+0xfffcce9c>

0010cfdc <__fpclassifyd>:
  10cfdc:	00a00034 	movhi	r2,32768
  10cfe0:	10bfffc4 	addi	r2,r2,-1
  10cfe4:	2884703a 	and	r2,r5,r2
  10cfe8:	10000726 	beq	r2,zero,10d008 <__fpclassifyd+0x2c>
  10cfec:	00fffc34 	movhi	r3,65520
  10cff0:	019ff834 	movhi	r6,32736
  10cff4:	28c7883a 	add	r3,r5,r3
  10cff8:	31bfffc4 	addi	r6,r6,-1
  10cffc:	30c00536 	bltu	r6,r3,10d014 <__fpclassifyd+0x38>
  10d000:	00800104 	movi	r2,4
  10d004:	f800283a 	ret
  10d008:	2000021e 	bne	r4,zero,10d014 <__fpclassifyd+0x38>
  10d00c:	00800084 	movi	r2,2
  10d010:	f800283a 	ret
  10d014:	00dffc34 	movhi	r3,32752
  10d018:	019ff834 	movhi	r6,32736
  10d01c:	28cb883a 	add	r5,r5,r3
  10d020:	31bfffc4 	addi	r6,r6,-1
  10d024:	317ff62e 	bgeu	r6,r5,10d000 <__alt_data_end+0xfffcd000>
  10d028:	01400434 	movhi	r5,16
  10d02c:	297fffc4 	addi	r5,r5,-1
  10d030:	28800236 	bltu	r5,r2,10d03c <__fpclassifyd+0x60>
  10d034:	008000c4 	movi	r2,3
  10d038:	f800283a 	ret
  10d03c:	10c00226 	beq	r2,r3,10d048 <__fpclassifyd+0x6c>
  10d040:	0005883a 	mov	r2,zero
  10d044:	f800283a 	ret
  10d048:	2005003a 	cmpeq	r2,r4,zero
  10d04c:	f800283a 	ret

0010d050 <_sbrk_r>:
  10d050:	defffd04 	addi	sp,sp,-12
  10d054:	dc000015 	stw	r16,0(sp)
  10d058:	040004b4 	movhi	r16,18
  10d05c:	dc400115 	stw	r17,4(sp)
  10d060:	841c9c04 	addi	r16,r16,29296
  10d064:	2023883a 	mov	r17,r4
  10d068:	2809883a 	mov	r4,r5
  10d06c:	dfc00215 	stw	ra,8(sp)
  10d070:	80000015 	stw	zero,0(r16)
  10d074:	0118e0c0 	call	118e0c <sbrk>
  10d078:	00ffffc4 	movi	r3,-1
  10d07c:	10c00526 	beq	r2,r3,10d094 <_sbrk_r+0x44>
  10d080:	dfc00217 	ldw	ra,8(sp)
  10d084:	dc400117 	ldw	r17,4(sp)
  10d088:	dc000017 	ldw	r16,0(sp)
  10d08c:	dec00304 	addi	sp,sp,12
  10d090:	f800283a 	ret
  10d094:	80c00017 	ldw	r3,0(r16)
  10d098:	183ff926 	beq	r3,zero,10d080 <__alt_data_end+0xfffcd080>
  10d09c:	88c00015 	stw	r3,0(r17)
  10d0a0:	003ff706 	br	10d080 <__alt_data_end+0xfffcd080>

0010d0a4 <__sccl>:
  10d0a4:	2a000003 	ldbu	r8,0(r5)
  10d0a8:	00801784 	movi	r2,94
  10d0ac:	40802a26 	beq	r8,r2,10d158 <__sccl+0xb4>
  10d0b0:	29400044 	addi	r5,r5,1
  10d0b4:	000f883a 	mov	r7,zero
  10d0b8:	0013883a 	mov	r9,zero
  10d0bc:	2007883a 	mov	r3,r4
  10d0c0:	21804004 	addi	r6,r4,256
  10d0c4:	19c00005 	stb	r7,0(r3)
  10d0c8:	18c00044 	addi	r3,r3,1
  10d0cc:	19bffd1e 	bne	r3,r6,10d0c4 <__alt_data_end+0xfffcd0c4>
  10d0d0:	40001126 	beq	r8,zero,10d118 <__sccl+0x74>
  10d0d4:	00800044 	movi	r2,1
  10d0d8:	124fc83a 	sub	r7,r2,r9
  10d0dc:	02800b44 	movi	r10,45
  10d0e0:	02c01744 	movi	r11,93
  10d0e4:	2205883a 	add	r2,r4,r8
  10d0e8:	11c00005 	stb	r7,0(r2)
  10d0ec:	28800044 	addi	r2,r5,1
  10d0f0:	28c00003 	ldbu	r3,0(r5)
  10d0f4:	1a800a26 	beq	r3,r10,10d120 <__sccl+0x7c>
  10d0f8:	1ac00426 	beq	r3,r11,10d10c <__sccl+0x68>
  10d0fc:	18000426 	beq	r3,zero,10d110 <__sccl+0x6c>
  10d100:	1811883a 	mov	r8,r3
  10d104:	100b883a 	mov	r5,r2
  10d108:	003ff606 	br	10d0e4 <__alt_data_end+0xfffcd0e4>
  10d10c:	f800283a 	ret
  10d110:	2805883a 	mov	r2,r5
  10d114:	f800283a 	ret
  10d118:	28bfffc4 	addi	r2,r5,-1
  10d11c:	f800283a 	ret
  10d120:	12400003 	ldbu	r9,0(r2)
  10d124:	4ac01126 	beq	r9,r11,10d16c <__sccl+0xc8>
  10d128:	4a001016 	blt	r9,r8,10d16c <__sccl+0xc8>
  10d12c:	41800044 	addi	r6,r8,1
  10d130:	29400084 	addi	r5,r5,2
  10d134:	2187883a 	add	r3,r4,r6
  10d138:	00000106 	br	10d140 <__sccl+0x9c>
  10d13c:	31800044 	addi	r6,r6,1
  10d140:	19c00005 	stb	r7,0(r3)
  10d144:	3011883a 	mov	r8,r6
  10d148:	18c00044 	addi	r3,r3,1
  10d14c:	327ffb16 	blt	r6,r9,10d13c <__alt_data_end+0xfffcd13c>
  10d150:	10800084 	addi	r2,r2,2
  10d154:	003fe606 	br	10d0f0 <__alt_data_end+0xfffcd0f0>
  10d158:	2a000043 	ldbu	r8,1(r5)
  10d15c:	01c00044 	movi	r7,1
  10d160:	29400084 	addi	r5,r5,2
  10d164:	02400044 	movi	r9,1
  10d168:	003fd406 	br	10d0bc <__alt_data_end+0xfffcd0bc>
  10d16c:	5011883a 	mov	r8,r10
  10d170:	003fe406 	br	10d104 <__alt_data_end+0xfffcd104>

0010d174 <nanf>:
  10d174:	009ff034 	movhi	r2,32704
  10d178:	f800283a 	ret

0010d17c <sulp>:
  10d17c:	defffd04 	addi	sp,sp,-12
  10d180:	dc400115 	stw	r17,4(sp)
  10d184:	3023883a 	mov	r17,r6
  10d188:	dc000015 	stw	r16,0(sp)
  10d18c:	dfc00215 	stw	ra,8(sp)
  10d190:	2821883a 	mov	r16,r5
  10d194:	010c5400 	call	10c540 <__ulp>
  10d198:	88000c26 	beq	r17,zero,10d1cc <sulp+0x50>
  10d19c:	841ffc2c 	andhi	r16,r16,32752
  10d1a0:	8020d53a 	srli	r16,r16,20
  10d1a4:	01c01ac4 	movi	r7,107
  10d1a8:	3c21c83a 	sub	r16,r7,r16
  10d1ac:	0400070e 	bge	zero,r16,10d1cc <sulp+0x50>
  10d1b0:	8020953a 	slli	r16,r16,20
  10d1b4:	01cffc34 	movhi	r7,16368
  10d1b8:	000d883a 	mov	r6,zero
  10d1bc:	81cf883a 	add	r7,r16,r7
  10d1c0:	1009883a 	mov	r4,r2
  10d1c4:	180b883a 	mov	r5,r3
  10d1c8:	01170f40 	call	1170f4 <__muldf3>
  10d1cc:	dfc00217 	ldw	ra,8(sp)
  10d1d0:	dc400117 	ldw	r17,4(sp)
  10d1d4:	dc000017 	ldw	r16,0(sp)
  10d1d8:	dec00304 	addi	sp,sp,12
  10d1dc:	f800283a 	ret

0010d1e0 <_strtod_r>:
  10d1e0:	deffe204 	addi	sp,sp,-120
  10d1e4:	ddc01b15 	stw	r23,108(sp)
  10d1e8:	dd801a15 	stw	r22,104(sp)
  10d1ec:	dc401515 	stw	r17,84(sp)
  10d1f0:	dfc01d15 	stw	ra,116(sp)
  10d1f4:	df001c15 	stw	fp,112(sp)
  10d1f8:	dd401915 	stw	r21,100(sp)
  10d1fc:	dd001815 	stw	r20,96(sp)
  10d200:	dcc01715 	stw	r19,92(sp)
  10d204:	dc801615 	stw	r18,88(sp)
  10d208:	dc001415 	stw	r16,80(sp)
  10d20c:	d8000515 	stw	zero,20(sp)
  10d210:	d9400615 	stw	r5,24(sp)
  10d214:	2807883a 	mov	r3,r5
  10d218:	1f000003 	ldbu	fp,0(r3)
  10d21c:	01c00474 	movhi	r7,17
  10d220:	2023883a 	mov	r17,r4
  10d224:	d9400715 	stw	r5,28(sp)
  10d228:	d9800915 	stw	r6,36(sp)
  10d22c:	01000b44 	movi	r4,45
  10d230:	e0803fcc 	andi	r2,fp,255
  10d234:	39f49504 	addi	r7,r7,-11692
  10d238:	002f883a 	mov	r23,zero
  10d23c:	002d883a 	mov	r22,zero
  10d240:	20809c36 	bltu	r4,r2,10d4b4 <_strtod_r+0x2d4>
  10d244:	100490ba 	slli	r2,r2,2
  10d248:	11c5883a 	add	r2,r2,r7
  10d24c:	10800017 	ldw	r2,0(r2)
  10d250:	1000683a 	jmp	r2
  10d254:	0010d314 	movui	zero,17228
  10d258:	0010d4b4 	movhi	zero,17234
  10d25c:	0010d4b4 	movhi	zero,17234
  10d260:	0010d4b4 	movhi	zero,17234
  10d264:	0010d4b4 	movhi	zero,17234
  10d268:	0010d4b4 	movhi	zero,17234
  10d26c:	0010d4b4 	movhi	zero,17234
  10d270:	0010d4b4 	movhi	zero,17234
  10d274:	0010d4b4 	movhi	zero,17234
  10d278:	0010d4a0 	cmpeqi	zero,zero,17234
  10d27c:	0010d4a0 	cmpeqi	zero,zero,17234
  10d280:	0010d4a0 	cmpeqi	zero,zero,17234
  10d284:	0010d4a0 	cmpeqi	zero,zero,17234
  10d288:	0010d4a0 	cmpeqi	zero,zero,17234
  10d28c:	0010d4b4 	movhi	zero,17234
  10d290:	0010d4b4 	movhi	zero,17234
  10d294:	0010d4b4 	movhi	zero,17234
  10d298:	0010d4b4 	movhi	zero,17234
  10d29c:	0010d4b4 	movhi	zero,17234
  10d2a0:	0010d4b4 	movhi	zero,17234
  10d2a4:	0010d4b4 	movhi	zero,17234
  10d2a8:	0010d4b4 	movhi	zero,17234
  10d2ac:	0010d4b4 	movhi	zero,17234
  10d2b0:	0010d4b4 	movhi	zero,17234
  10d2b4:	0010d4b4 	movhi	zero,17234
  10d2b8:	0010d4b4 	movhi	zero,17234
  10d2bc:	0010d4b4 	movhi	zero,17234
  10d2c0:	0010d4b4 	movhi	zero,17234
  10d2c4:	0010d4b4 	movhi	zero,17234
  10d2c8:	0010d4b4 	movhi	zero,17234
  10d2cc:	0010d4b4 	movhi	zero,17234
  10d2d0:	0010d4b4 	movhi	zero,17234
  10d2d4:	0010d4a0 	cmpeqi	zero,zero,17234
  10d2d8:	0010d4b4 	movhi	zero,17234
  10d2dc:	0010d4b4 	movhi	zero,17234
  10d2e0:	0010d4b4 	movhi	zero,17234
  10d2e4:	0010d4b4 	movhi	zero,17234
  10d2e8:	0010d4b4 	movhi	zero,17234
  10d2ec:	0010d4b4 	movhi	zero,17234
  10d2f0:	0010d4b4 	movhi	zero,17234
  10d2f4:	0010d4b4 	movhi	zero,17234
  10d2f8:	0010d4b4 	movhi	zero,17234
  10d2fc:	0010d4b4 	movhi	zero,17234
  10d300:	0010d378 	rdprs	zero,zero,17229
  10d304:	0010d4b4 	movhi	zero,17234
  10d308:	0010d494 	movui	zero,17234
  10d30c:	00801244 	movi	r2,73
  10d310:	b8844726 	beq	r23,r2,10e430 <_strtod_r+0x1250>
  10d314:	d9000917 	ldw	r4,36(sp)
  10d318:	d8000815 	stw	zero,32(sp)
  10d31c:	0039883a 	mov	fp,zero
  10d320:	20000726 	beq	r4,zero,10d340 <_strtod_r+0x160>
  10d324:	dc800717 	ldw	r18,28(sp)
  10d328:	d8000a15 	stw	zero,40(sp)
  10d32c:	d9400917 	ldw	r5,36(sp)
  10d330:	2c800015 	stw	r18,0(r5)
  10d334:	d8800a17 	ldw	r2,40(sp)
  10d338:	10000126 	beq	r2,zero,10d340 <_strtod_r+0x160>
  10d33c:	e720003c 	xorhi	fp,fp,32768
  10d340:	d8800817 	ldw	r2,32(sp)
  10d344:	e007883a 	mov	r3,fp
  10d348:	dfc01d17 	ldw	ra,116(sp)
  10d34c:	df001c17 	ldw	fp,112(sp)
  10d350:	ddc01b17 	ldw	r23,108(sp)
  10d354:	dd801a17 	ldw	r22,104(sp)
  10d358:	dd401917 	ldw	r21,100(sp)
  10d35c:	dd001817 	ldw	r20,96(sp)
  10d360:	dcc01717 	ldw	r19,92(sp)
  10d364:	dc801617 	ldw	r18,88(sp)
  10d368:	dc401517 	ldw	r17,84(sp)
  10d36c:	dc001417 	ldw	r16,80(sp)
  10d370:	dec01e04 	addi	sp,sp,120
  10d374:	f800283a 	ret
  10d378:	d8000a15 	stw	zero,40(sp)
  10d37c:	1c000044 	addi	r16,r3,1
  10d380:	dc000615 	stw	r16,24(sp)
  10d384:	1f000043 	ldbu	fp,1(r3)
  10d388:	e0803fcc 	andi	r2,fp,255
  10d38c:	1080201c 	xori	r2,r2,128
  10d390:	10bfe004 	addi	r2,r2,-128
  10d394:	103fdf26 	beq	r2,zero,10d314 <__alt_data_end+0xfffcd314>
  10d398:	e1003fcc 	andi	r4,fp,255
  10d39c:	2100201c 	xori	r4,r4,128
  10d3a0:	213fe004 	addi	r4,r4,-128
  10d3a4:	00800c04 	movi	r2,48
  10d3a8:	2080d426 	beq	r4,r2,10d6fc <_strtod_r+0x51c>
  10d3ac:	dc000815 	stw	r16,32(sp)
  10d3b0:	d8000c15 	stw	zero,48(sp)
  10d3b4:	e0bff404 	addi	r2,fp,-48
  10d3b8:	10803fcc 	andi	r2,r2,255
  10d3bc:	05400244 	movi	r21,9
  10d3c0:	a8837836 	bltu	r21,r2,10e1a4 <_strtod_r+0xfc4>
  10d3c4:	dc800817 	ldw	r18,32(sp)
  10d3c8:	0029883a 	mov	r20,zero
  10d3cc:	0027883a 	mov	r19,zero
  10d3d0:	0021883a 	mov	r16,zero
  10d3d4:	05800204 	movi	r22,8
  10d3d8:	b4003916 	blt	r22,r16,10d4c0 <_strtod_r+0x2e0>
  10d3dc:	e7003fcc 	andi	fp,fp,255
  10d3e0:	9809883a 	mov	r4,r19
  10d3e4:	01400284 	movi	r5,10
  10d3e8:	e700201c 	xori	fp,fp,128
  10d3ec:	01159fc0 	call	1159fc <__mulsi3>
  10d3f0:	e73fe004 	addi	fp,fp,-128
  10d3f4:	1705883a 	add	r2,r2,fp
  10d3f8:	14fff404 	addi	r19,r2,-48
  10d3fc:	94800044 	addi	r18,r18,1
  10d400:	dc800615 	stw	r18,24(sp)
  10d404:	97000003 	ldbu	fp,0(r18)
  10d408:	84000044 	addi	r16,r16,1
  10d40c:	e0bff404 	addi	r2,fp,-48
  10d410:	10803fcc 	andi	r2,r2,255
  10d414:	a8bff02e 	bgeu	r21,r2,10d3d8 <__alt_data_end+0xfffcd3d8>
  10d418:	e5c03fcc 	andi	r23,fp,255
  10d41c:	bdc0201c 	xori	r23,r23,128
  10d420:	bdffe004 	addi	r23,r23,-128
  10d424:	8809883a 	mov	r4,r17
  10d428:	010aaa40 	call	10aaa4 <_localeconv_r>
  10d42c:	8809883a 	mov	r4,r17
  10d430:	15400017 	ldw	r21,0(r2)
  10d434:	010aaa40 	call	10aaa4 <_localeconv_r>
  10d438:	11000017 	ldw	r4,0(r2)
  10d43c:	0101cfc0 	call	101cfc <strlen>
  10d440:	100d883a 	mov	r6,r2
  10d444:	a80b883a 	mov	r5,r21
  10d448:	9009883a 	mov	r4,r18
  10d44c:	01146f80 	call	1146f8 <strncmp>
  10d450:	1000bd26 	beq	r2,zero,10d748 <_strtod_r+0x568>
  10d454:	8039883a 	mov	fp,r16
  10d458:	002d883a 	mov	r22,zero
  10d45c:	d8000b15 	stw	zero,44(sp)
  10d460:	0025883a 	mov	r18,zero
  10d464:	00801944 	movi	r2,101
  10d468:	b8806026 	beq	r23,r2,10d5ec <_strtod_r+0x40c>
  10d46c:	00801144 	movi	r2,69
  10d470:	b8805e26 	beq	r23,r2,10d5ec <_strtod_r+0x40c>
  10d474:	0009883a 	mov	r4,zero
  10d478:	e0001a1e 	bne	fp,zero,10d4e4 <_strtod_r+0x304>
  10d47c:	b000cd26 	beq	r22,zero,10d7b4 <_strtod_r+0x5d4>
  10d480:	d8000815 	stw	zero,32(sp)
  10d484:	d9000917 	ldw	r4,36(sp)
  10d488:	203faa26 	beq	r4,zero,10d334 <__alt_data_end+0xfffcd334>
  10d48c:	dc800617 	ldw	r18,24(sp)
  10d490:	003fa606 	br	10d32c <__alt_data_end+0xfffcd32c>
  10d494:	00800044 	movi	r2,1
  10d498:	d8800a15 	stw	r2,40(sp)
  10d49c:	003fb706 	br	10d37c <__alt_data_end+0xfffcd37c>
  10d4a0:	18c00044 	addi	r3,r3,1
  10d4a4:	d8c00615 	stw	r3,24(sp)
  10d4a8:	1f000003 	ldbu	fp,0(r3)
  10d4ac:	e0803fcc 	andi	r2,fp,255
  10d4b0:	20bf642e 	bgeu	r4,r2,10d244 <__alt_data_end+0xfffcd244>
  10d4b4:	1821883a 	mov	r16,r3
  10d4b8:	d8000a15 	stw	zero,40(sp)
  10d4bc:	003fb606 	br	10d398 <__alt_data_end+0xfffcd398>
  10d4c0:	e7003fcc 	andi	fp,fp,255
  10d4c4:	a009883a 	mov	r4,r20
  10d4c8:	01400284 	movi	r5,10
  10d4cc:	e700201c 	xori	fp,fp,128
  10d4d0:	01159fc0 	call	1159fc <__mulsi3>
  10d4d4:	e73fe004 	addi	fp,fp,-128
  10d4d8:	1705883a 	add	r2,r2,fp
  10d4dc:	153ff404 	addi	r20,r2,-48
  10d4e0:	003fc606 	br	10d3fc <__alt_data_end+0xfffcd3fc>
  10d4e4:	d8c00b17 	ldw	r3,44(sp)
  10d4e8:	20ebc83a 	sub	r21,r4,r3
  10d4ec:	8000011e 	bne	r16,zero,10d4f4 <_strtod_r+0x314>
  10d4f0:	e021883a 	mov	r16,fp
  10d4f4:	00800404 	movi	r2,16
  10d4f8:	e025883a 	mov	r18,fp
  10d4fc:	1700010e 	bge	r2,fp,10d504 <_strtod_r+0x324>
  10d500:	1025883a 	mov	r18,r2
  10d504:	9809883a 	mov	r4,r19
  10d508:	01183b80 	call	1183b8 <__floatunsidf>
  10d50c:	102f883a 	mov	r23,r2
  10d510:	00800244 	movi	r2,9
  10d514:	182d883a 	mov	r22,r3
  10d518:	1480150e 	bge	r2,r18,10d570 <_strtod_r+0x390>
  10d51c:	90bffdc4 	addi	r2,r18,-9
  10d520:	100490fa 	slli	r2,r2,3
  10d524:	180b883a 	mov	r5,r3
  10d528:	00c004b4 	movhi	r3,18
  10d52c:	18cd7204 	addi	r3,r3,13768
  10d530:	1885883a 	add	r2,r3,r2
  10d534:	11800017 	ldw	r6,0(r2)
  10d538:	11c00117 	ldw	r7,4(r2)
  10d53c:	b809883a 	mov	r4,r23
  10d540:	01170f40 	call	1170f4 <__muldf3>
  10d544:	a009883a 	mov	r4,r20
  10d548:	102f883a 	mov	r23,r2
  10d54c:	182d883a 	mov	r22,r3
  10d550:	01183b80 	call	1183b8 <__floatunsidf>
  10d554:	b809883a 	mov	r4,r23
  10d558:	b00b883a 	mov	r5,r22
  10d55c:	100d883a 	mov	r6,r2
  10d560:	180f883a 	mov	r7,r3
  10d564:	0115c200 	call	115c20 <__adddf3>
  10d568:	102f883a 	mov	r23,r2
  10d56c:	182d883a 	mov	r22,r3
  10d570:	008003c4 	movi	r2,15
  10d574:	17009416 	blt	r2,fp,10d7c8 <_strtod_r+0x5e8>
  10d578:	a8001926 	beq	r21,zero,10d5e0 <_strtod_r+0x400>
  10d57c:	05439c0e 	bge	zero,r21,10e3f0 <_strtod_r+0x1210>
  10d580:	00c00584 	movi	r3,22
  10d584:	1d430f16 	blt	r3,r21,10e1c4 <_strtod_r+0xfe4>
  10d588:	a82a90fa 	slli	r21,r21,3
  10d58c:	008004b4 	movhi	r2,18
  10d590:	108d7204 	addi	r2,r2,13768
  10d594:	1545883a 	add	r2,r2,r21
  10d598:	11000017 	ldw	r4,0(r2)
  10d59c:	11400117 	ldw	r5,4(r2)
  10d5a0:	b80d883a 	mov	r6,r23
  10d5a4:	b00f883a 	mov	r7,r22
  10d5a8:	01170f40 	call	1170f4 <__muldf3>
  10d5ac:	d8800815 	stw	r2,32(sp)
  10d5b0:	1839883a 	mov	fp,r3
  10d5b4:	003fb306 	br	10d484 <__alt_data_end+0xfffcd484>
  10d5b8:	014004b4 	movhi	r5,18
  10d5bc:	294da804 	addi	r5,r5,13984
  10d5c0:	d9800204 	addi	r6,sp,8
  10d5c4:	d9000604 	addi	r4,sp,24
  10d5c8:	01144480 	call	114448 <__hexnan>
  10d5cc:	00c00144 	movi	r3,5
  10d5d0:	10c2161e 	bne	r2,r3,10de2c <_strtod_r+0xc4c>
  10d5d4:	dd800317 	ldw	r22,12(sp)
  10d5d8:	ddc00217 	ldw	r23,8(sp)
  10d5dc:	b59ffc34 	orhi	r22,r22,32752
  10d5e0:	ddc00815 	stw	r23,32(sp)
  10d5e4:	b039883a 	mov	fp,r22
  10d5e8:	003fa606 	br	10d484 <__alt_data_end+0xfffcd484>
  10d5ec:	e001a926 	beq	fp,zero,10dc94 <_strtod_r+0xab4>
  10d5f0:	d8c00617 	ldw	r3,24(sp)
  10d5f4:	18800044 	addi	r2,r3,1
  10d5f8:	d8800615 	stw	r2,24(sp)
  10d5fc:	d8c00715 	stw	r3,28(sp)
  10d600:	18c00047 	ldb	r3,1(r3)
  10d604:	00800ac4 	movi	r2,43
  10d608:	1881e526 	beq	r3,r2,10dda0 <_strtod_r+0xbc0>
  10d60c:	00800b44 	movi	r2,45
  10d610:	1881dc26 	beq	r3,r2,10dd84 <_strtod_r+0xba4>
  10d614:	182f883a 	mov	r23,r3
  10d618:	d8000e15 	stw	zero,56(sp)
  10d61c:	b8bff404 	addi	r2,r23,-48
  10d620:	01000244 	movi	r4,9
  10d624:	2081ab36 	bltu	r4,r2,10dcd4 <_strtod_r+0xaf4>
  10d628:	00800c04 	movi	r2,48
  10d62c:	b880071e 	bne	r23,r2,10d64c <_strtod_r+0x46c>
  10d630:	d8800617 	ldw	r2,24(sp)
  10d634:	b809883a 	mov	r4,r23
  10d638:	10800044 	addi	r2,r2,1
  10d63c:	d8800615 	stw	r2,24(sp)
  10d640:	15c00007 	ldb	r23,0(r2)
  10d644:	10800044 	addi	r2,r2,1
  10d648:	b93ffc26 	beq	r23,r4,10d63c <__alt_data_end+0xfffcd63c>
  10d64c:	b8bff3c4 	addi	r2,r23,-49
  10d650:	01000204 	movi	r4,8
  10d654:	20bf8736 	bltu	r4,r2,10d474 <__alt_data_end+0xfffcd474>
  10d658:	d8c00617 	ldw	r3,24(sp)
  10d65c:	b93ff404 	addi	r4,r23,-48
  10d660:	01400244 	movi	r5,9
  10d664:	1ac00044 	addi	r11,r3,1
  10d668:	dac00615 	stw	r11,24(sp)
  10d66c:	d8c00d15 	stw	r3,52(sp)
  10d670:	18c00043 	ldbu	r3,1(r3)
  10d674:	18bff404 	addi	r2,r3,-48
  10d678:	1dc03fcc 	andi	r23,r3,255
  10d67c:	bdc0201c 	xori	r23,r23,128
  10d680:	10803fcc 	andi	r2,r2,255
  10d684:	bdffe004 	addi	r23,r23,-128
  10d688:	28801136 	bltu	r5,r2,10d6d0 <_strtod_r+0x4f0>
  10d68c:	d8c00d17 	ldw	r3,52(sp)
  10d690:	1d400084 	addi	r21,r3,2
  10d694:	01400284 	movi	r5,10
  10d698:	01159fc0 	call	1159fc <__mulsi3>
  10d69c:	dd400615 	stw	r21,24(sp)
  10d6a0:	a9400003 	ldbu	r5,0(r21)
  10d6a4:	15c5883a 	add	r2,r2,r23
  10d6a8:	a817883a 	mov	r11,r21
  10d6ac:	28fff404 	addi	r3,r5,-48
  10d6b0:	2dc03fcc 	andi	r23,r5,255
  10d6b4:	bdc0201c 	xori	r23,r23,128
  10d6b8:	18c03fcc 	andi	r3,r3,255
  10d6bc:	01400244 	movi	r5,9
  10d6c0:	113ff404 	addi	r4,r2,-48
  10d6c4:	bdffe004 	addi	r23,r23,-128
  10d6c8:	ad400044 	addi	r21,r21,1
  10d6cc:	28fff12e 	bgeu	r5,r3,10d694 <__alt_data_end+0xfffcd694>
  10d6d0:	d8c00d17 	ldw	r3,52(sp)
  10d6d4:	00800204 	movi	r2,8
  10d6d8:	58d7c83a 	sub	r11,r11,r3
  10d6dc:	12c2ab16 	blt	r2,r11,10e18c <_strtod_r+0xfac>
  10d6e0:	009387c4 	movi	r2,19999
  10d6e4:	1100010e 	bge	r2,r4,10d6ec <_strtod_r+0x50c>
  10d6e8:	1009883a 	mov	r4,r2
  10d6ec:	d8c00e17 	ldw	r3,56(sp)
  10d6f0:	183f6126 	beq	r3,zero,10d478 <__alt_data_end+0xfffcd478>
  10d6f4:	0109c83a 	sub	r4,zero,r4
  10d6f8:	003f5f06 	br	10d478 <__alt_data_end+0xfffcd478>
  10d6fc:	80800047 	ldb	r2,1(r16)
  10d700:	00c01604 	movi	r3,88
  10d704:	10c20026 	beq	r2,r3,10df08 <_strtod_r+0xd28>
  10d708:	00c01e04 	movi	r3,120
  10d70c:	10c1fe26 	beq	r2,r3,10df08 <_strtod_r+0xd28>
  10d710:	80800044 	addi	r2,r16,1
  10d714:	1021883a 	mov	r16,r2
  10d718:	d8800615 	stw	r2,24(sp)
  10d71c:	10800044 	addi	r2,r2,1
  10d720:	173fffc3 	ldbu	fp,-1(r2)
  10d724:	e0c03fcc 	andi	r3,fp,255
  10d728:	18c0201c 	xori	r3,r3,128
  10d72c:	18ffe004 	addi	r3,r3,-128
  10d730:	193ff826 	beq	r3,r4,10d714 <__alt_data_end+0xfffcd714>
  10d734:	18002126 	beq	r3,zero,10d7bc <_strtod_r+0x5dc>
  10d738:	00c00044 	movi	r3,1
  10d73c:	dc000815 	stw	r16,32(sp)
  10d740:	d8c00c15 	stw	r3,48(sp)
  10d744:	003f1b06 	br	10d3b4 <__alt_data_end+0xfffcd3b4>
  10d748:	8809883a 	mov	r4,r17
  10d74c:	010aaa40 	call	10aaa4 <_localeconv_r>
  10d750:	11000017 	ldw	r4,0(r2)
  10d754:	0101cfc0 	call	101cfc <strlen>
  10d758:	d8c00617 	ldw	r3,24(sp)
  10d75c:	1885883a 	add	r2,r3,r2
  10d760:	d8800615 	stw	r2,24(sp)
  10d764:	15c00007 	ldb	r23,0(r2)
  10d768:	8001771e 	bne	r16,zero,10dd48 <_strtod_r+0xb68>
  10d76c:	01000c04 	movi	r4,48
  10d770:	b903581e 	bne	r23,r4,10e4d4 <_strtod_r+0x12f4>
  10d774:	11000044 	addi	r4,r2,1
  10d778:	b80b883a 	mov	r5,r23
  10d77c:	d9000615 	stw	r4,24(sp)
  10d780:	25c00007 	ldb	r23,0(r4)
  10d784:	20adc83a 	sub	r22,r4,r2
  10d788:	21000044 	addi	r4,r4,1
  10d78c:	b97ffb26 	beq	r23,r5,10d77c <__alt_data_end+0xfffcd77c>
  10d790:	b8bff3c4 	addi	r2,r23,-49
  10d794:	01000204 	movi	r4,8
  10d798:	2083002e 	bgeu	r4,r2,10e39c <_strtod_r+0x11bc>
  10d79c:	00801944 	movi	r2,101
  10d7a0:	b8813a26 	beq	r23,r2,10dc8c <_strtod_r+0xaac>
  10d7a4:	0039883a 	mov	fp,zero
  10d7a8:	d8000b15 	stw	zero,44(sp)
  10d7ac:	04800044 	movi	r18,1
  10d7b0:	003f2e06 	br	10d46c <__alt_data_end+0xfffcd46c>
  10d7b4:	d8c00c17 	ldw	r3,48(sp)
  10d7b8:	18017d26 	beq	r3,zero,10ddb0 <_strtod_r+0xbd0>
  10d7bc:	d8000815 	stw	zero,32(sp)
  10d7c0:	0039883a 	mov	fp,zero
  10d7c4:	003f2f06 	br	10d484 <__alt_data_end+0xfffcd484>
  10d7c8:	e4a5c83a 	sub	r18,fp,r18
  10d7cc:	9565883a 	add	r18,r18,r21
  10d7d0:	0482370e 	bge	zero,r18,10e0b0 <_strtod_r+0xed0>
  10d7d4:	908003cc 	andi	r2,r18,15
  10d7d8:	10000b26 	beq	r2,zero,10d808 <_strtod_r+0x628>
  10d7dc:	100490fa 	slli	r2,r2,3
  10d7e0:	00c004b4 	movhi	r3,18
  10d7e4:	18cd7204 	addi	r3,r3,13768
  10d7e8:	1885883a 	add	r2,r3,r2
  10d7ec:	11000017 	ldw	r4,0(r2)
  10d7f0:	11400117 	ldw	r5,4(r2)
  10d7f4:	b80d883a 	mov	r6,r23
  10d7f8:	b00f883a 	mov	r7,r22
  10d7fc:	01170f40 	call	1170f4 <__muldf3>
  10d800:	102f883a 	mov	r23,r2
  10d804:	182d883a 	mov	r22,r3
  10d808:	053ffc04 	movi	r20,-16
  10d80c:	9524703a 	and	r18,r18,r20
  10d810:	90003826 	beq	r18,zero,10d8f4 <_strtod_r+0x714>
  10d814:	00804d04 	movi	r2,308
  10d818:	1481eb16 	blt	r2,r18,10dfc8 <_strtod_r+0xde8>
  10d81c:	9029d13a 	srai	r20,r18,4
  10d820:	02c00044 	movi	r11,1
  10d824:	5d03900e 	bge	r11,r20,10e668 <_strtod_r+0x1488>
  10d828:	010004b4 	movhi	r4,18
  10d82c:	210d6804 	addi	r4,r4,13728
  10d830:	2011883a 	mov	r8,r4
  10d834:	0025883a 	mov	r18,zero
  10d838:	880b883a 	mov	r5,r17
  10d83c:	d9000715 	stw	r4,28(sp)
  10d840:	dc000b15 	stw	r16,44(sp)
  10d844:	9023883a 	mov	r17,r18
  10d848:	b805883a 	mov	r2,r23
  10d84c:	b007883a 	mov	r3,r22
  10d850:	0009883a 	mov	r4,zero
  10d854:	4021883a 	mov	r16,r8
  10d858:	2825883a 	mov	r18,r5
  10d85c:	a180004c 	andi	r6,r20,1
  10d860:	30000826 	beq	r6,zero,10d884 <_strtod_r+0x6a4>
  10d864:	81800017 	ldw	r6,0(r16)
  10d868:	81c00117 	ldw	r7,4(r16)
  10d86c:	1009883a 	mov	r4,r2
  10d870:	180b883a 	mov	r5,r3
  10d874:	dac01315 	stw	r11,76(sp)
  10d878:	01170f40 	call	1170f4 <__muldf3>
  10d87c:	dac01317 	ldw	r11,76(sp)
  10d880:	01000044 	movi	r4,1
  10d884:	a029d07a 	srai	r20,r20,1
  10d888:	8c400044 	addi	r17,r17,1
  10d88c:	84000204 	addi	r16,r16,8
  10d890:	a2fff21e 	bne	r20,r11,10d85c <__alt_data_end+0xfffcd85c>
  10d894:	900b883a 	mov	r5,r18
  10d898:	21003fcc 	andi	r4,r4,255
  10d89c:	8825883a 	mov	r18,r17
  10d8a0:	dc000b17 	ldw	r16,44(sp)
  10d8a4:	2823883a 	mov	r17,r5
  10d8a8:	2003c01e 	bne	r4,zero,10e7ac <_strtod_r+0x15cc>
  10d8ac:	901490fa 	slli	r10,r18,3
  10d8b0:	d8800717 	ldw	r2,28(sp)
  10d8b4:	01ff2c34 	movhi	r7,64688
  10d8b8:	b80d883a 	mov	r6,r23
  10d8bc:	12a5883a 	add	r18,r2,r10
  10d8c0:	91000017 	ldw	r4,0(r18)
  10d8c4:	91400117 	ldw	r5,4(r18)
  10d8c8:	b1cf883a 	add	r7,r22,r7
  10d8cc:	01170f40 	call	1170f4 <__muldf3>
  10d8d0:	102f883a 	mov	r23,r2
  10d8d4:	011f2834 	movhi	r4,31904
  10d8d8:	189ffc2c 	andhi	r2,r3,32752
  10d8dc:	2081ba36 	bltu	r4,r2,10dfc8 <_strtod_r+0xde8>
  10d8e0:	011f2434 	movhi	r4,31888
  10d8e4:	20834a2e 	bgeu	r4,r2,10e610 <_strtod_r+0x1430>
  10d8e8:	059ffc34 	movhi	r22,32752
  10d8ec:	b5bfffc4 	addi	r22,r22,-1
  10d8f0:	05ffffc4 	movi	r23,-1
  10d8f4:	d8000715 	stw	zero,28(sp)
  10d8f8:	d9400817 	ldw	r5,32(sp)
  10d8fc:	dcc00015 	stw	r19,0(sp)
  10d900:	e00f883a 	mov	r7,fp
  10d904:	800d883a 	mov	r6,r16
  10d908:	8809883a 	mov	r4,r17
  10d90c:	010bb780 	call	10bb78 <__s2b>
  10d910:	d8800b15 	stw	r2,44(sp)
  10d914:	1001ac26 	beq	r2,zero,10dfc8 <_strtod_r+0xde8>
  10d918:	a807d7fa 	srai	r3,r21,31
  10d91c:	0545c83a 	sub	r2,zero,r21
  10d920:	dd400c15 	stw	r21,48(sp)
  10d924:	1886703a 	and	r3,r3,r2
  10d928:	d8c00e15 	stw	r3,56(sp)
  10d92c:	a8015916 	blt	r21,zero,10de94 <_strtod_r+0xcb4>
  10d930:	d9400b17 	ldw	r5,44(sp)
  10d934:	0011883a 	mov	r8,zero
  10d938:	0021883a 	mov	r16,zero
  10d93c:	29400304 	addi	r5,r5,12
  10d940:	d9401115 	stw	r5,68(sp)
  10d944:	4025883a 	mov	r18,r8
  10d948:	d8800b17 	ldw	r2,44(sp)
  10d94c:	8809883a 	mov	r4,r17
  10d950:	11400117 	ldw	r5,4(r2)
  10d954:	010b9600 	call	10b960 <_Balloc>
  10d958:	1027883a 	mov	r19,r2
  10d95c:	10015226 	beq	r2,zero,10dea8 <_strtod_r+0xcc8>
  10d960:	d8c00b17 	ldw	r3,44(sp)
  10d964:	d9401117 	ldw	r5,68(sp)
  10d968:	11000304 	addi	r4,r2,12
  10d96c:	19800417 	ldw	r6,16(r3)
  10d970:	31800084 	addi	r6,r6,2
  10d974:	318d883a 	add	r6,r6,r6
  10d978:	318d883a 	add	r6,r6,r6
  10d97c:	010157c0 	call	10157c <memcpy>
  10d980:	d9000204 	addi	r4,sp,8
  10d984:	d9000015 	stw	r4,0(sp)
  10d988:	d9c00404 	addi	r7,sp,16
  10d98c:	b80b883a 	mov	r5,r23
  10d990:	b00d883a 	mov	r6,r22
  10d994:	8809883a 	mov	r4,r17
  10d998:	010c6b00 	call	10c6b0 <__d2b>
  10d99c:	d8800515 	stw	r2,20(sp)
  10d9a0:	ddc00815 	stw	r23,32(sp)
  10d9a4:	dd801215 	stw	r22,72(sp)
  10d9a8:	10029f26 	beq	r2,zero,10e428 <_strtod_r+0x1248>
  10d9ac:	01400044 	movi	r5,1
  10d9b0:	8809883a 	mov	r4,r17
  10d9b4:	010bd940 	call	10bd94 <__i2b>
  10d9b8:	1021883a 	mov	r16,r2
  10d9bc:	10013a26 	beq	r2,zero,10dea8 <_strtod_r+0xcc8>
  10d9c0:	d8800417 	ldw	r2,16(sp)
  10d9c4:	1000b816 	blt	r2,zero,10dca8 <_strtod_r+0xac8>
  10d9c8:	d9400e17 	ldw	r5,56(sp)
  10d9cc:	d9000c17 	ldw	r4,48(sp)
  10d9d0:	28a9883a 	add	r20,r5,r2
  10d9d4:	d9400717 	ldw	r5,28(sp)
  10d9d8:	dd400217 	ldw	r21,8(sp)
  10d9dc:	073f0084 	movi	fp,-1022
  10d9e0:	1147c83a 	sub	r3,r2,r5
  10d9e4:	1d47883a 	add	r3,r3,r21
  10d9e8:	00800d84 	movi	r2,54
  10d9ec:	18ffffc4 	addi	r3,r3,-1
  10d9f0:	156bc83a 	sub	r21,r2,r21
  10d9f4:	1f00950e 	bge	r3,fp,10dc4c <_strtod_r+0xa6c>
  10d9f8:	e0f9c83a 	sub	fp,fp,r3
  10d9fc:	008007c4 	movi	r2,31
  10da00:	af2bc83a 	sub	r21,r21,fp
  10da04:	1700ac16 	blt	r2,fp,10dcb8 <_strtod_r+0xad8>
  10da08:	00800044 	movi	r2,1
  10da0c:	1704983a 	sll	r2,r2,fp
  10da10:	d8000d15 	stw	zero,52(sp)
  10da14:	d8800f15 	stw	r2,60(sp)
  10da18:	2547883a 	add	r3,r4,r21
  10da1c:	d9000717 	ldw	r4,28(sp)
  10da20:	a56b883a 	add	r21,r20,r21
  10da24:	20f9883a 	add	fp,r4,r3
  10da28:	a009883a 	mov	r4,r20
  10da2c:	ad00010e 	bge	r21,r20,10da34 <_strtod_r+0x854>
  10da30:	a809883a 	mov	r4,r21
  10da34:	e005883a 	mov	r2,fp
  10da38:	2700010e 	bge	r4,fp,10da40 <_strtod_r+0x860>
  10da3c:	2005883a 	mov	r2,r4
  10da40:	0080030e 	bge	zero,r2,10da50 <_strtod_r+0x870>
  10da44:	a8abc83a 	sub	r21,r21,r2
  10da48:	e0b9c83a 	sub	fp,fp,r2
  10da4c:	a0a9c83a 	sub	r20,r20,r2
  10da50:	d9400e17 	ldw	r5,56(sp)
  10da54:	28001126 	beq	r5,zero,10da9c <_strtod_r+0x8bc>
  10da58:	280d883a 	mov	r6,r5
  10da5c:	8809883a 	mov	r4,r17
  10da60:	800b883a 	mov	r5,r16
  10da64:	010c05c0 	call	10c05c <__pow5mult>
  10da68:	1021883a 	mov	r16,r2
  10da6c:	10010e26 	beq	r2,zero,10dea8 <_strtod_r+0xcc8>
  10da70:	d9800517 	ldw	r6,20(sp)
  10da74:	100b883a 	mov	r5,r2
  10da78:	8809883a 	mov	r4,r17
  10da7c:	010bdd00 	call	10bdd0 <__multiply>
  10da80:	10010926 	beq	r2,zero,10dea8 <_strtod_r+0xcc8>
  10da84:	d9400517 	ldw	r5,20(sp)
  10da88:	8809883a 	mov	r4,r17
  10da8c:	d8801315 	stw	r2,76(sp)
  10da90:	010ba080 	call	10ba08 <_Bfree>
  10da94:	d8801317 	ldw	r2,76(sp)
  10da98:	d8800515 	stw	r2,20(sp)
  10da9c:	0540060e 	bge	zero,r21,10dab8 <_strtod_r+0x8d8>
  10daa0:	d9400517 	ldw	r5,20(sp)
  10daa4:	a80d883a 	mov	r6,r21
  10daa8:	8809883a 	mov	r4,r17
  10daac:	010c19c0 	call	10c19c <__lshift>
  10dab0:	d8800515 	stw	r2,20(sp)
  10dab4:	10025c26 	beq	r2,zero,10e428 <_strtod_r+0x1248>
  10dab8:	d8800c17 	ldw	r2,48(sp)
  10dabc:	10000626 	beq	r2,zero,10dad8 <_strtod_r+0x8f8>
  10dac0:	d9800c17 	ldw	r6,48(sp)
  10dac4:	980b883a 	mov	r5,r19
  10dac8:	8809883a 	mov	r4,r17
  10dacc:	010c05c0 	call	10c05c <__pow5mult>
  10dad0:	1027883a 	mov	r19,r2
  10dad4:	1000f426 	beq	r2,zero,10dea8 <_strtod_r+0xcc8>
  10dad8:	0700060e 	bge	zero,fp,10daf4 <_strtod_r+0x914>
  10dadc:	980b883a 	mov	r5,r19
  10dae0:	e00d883a 	mov	r6,fp
  10dae4:	8809883a 	mov	r4,r17
  10dae8:	010c19c0 	call	10c19c <__lshift>
  10daec:	1027883a 	mov	r19,r2
  10daf0:	1000ed26 	beq	r2,zero,10dea8 <_strtod_r+0xcc8>
  10daf4:	0500060e 	bge	zero,r20,10db10 <_strtod_r+0x930>
  10daf8:	800b883a 	mov	r5,r16
  10dafc:	a00d883a 	mov	r6,r20
  10db00:	8809883a 	mov	r4,r17
  10db04:	010c19c0 	call	10c19c <__lshift>
  10db08:	1021883a 	mov	r16,r2
  10db0c:	1000e626 	beq	r2,zero,10dea8 <_strtod_r+0xcc8>
  10db10:	d9400517 	ldw	r5,20(sp)
  10db14:	980d883a 	mov	r6,r19
  10db18:	8809883a 	mov	r4,r17
  10db1c:	010c3440 	call	10c344 <__mdiff>
  10db20:	1025883a 	mov	r18,r2
  10db24:	1000e026 	beq	r2,zero,10dea8 <_strtod_r+0xcc8>
  10db28:	15400317 	ldw	r21,12(r2)
  10db2c:	800b883a 	mov	r5,r16
  10db30:	10000315 	stw	zero,12(r2)
  10db34:	1009883a 	mov	r4,r2
  10db38:	010c2e40 	call	10c2e4 <__mcmp>
  10db3c:	10026716 	blt	r2,zero,10e4dc <_strtod_r+0x12fc>
  10db40:	10029626 	beq	r2,zero,10e59c <_strtod_r+0x13bc>
  10db44:	800b883a 	mov	r5,r16
  10db48:	9009883a 	mov	r4,r18
  10db4c:	010c7fc0 	call	10c7fc <__ratio>
  10db50:	000d883a 	mov	r6,zero
  10db54:	01d00034 	movhi	r7,16384
  10db58:	1009883a 	mov	r4,r2
  10db5c:	180b883a 	mov	r5,r3
  10db60:	1039883a 	mov	fp,r2
  10db64:	1829883a 	mov	r20,r3
  10db68:	01170000 	call	117000 <__ledf2>
  10db6c:	00803b16 	blt	zero,r2,10dc5c <_strtod_r+0xa7c>
  10db70:	a8005e26 	beq	r21,zero,10dcec <_strtod_r+0xb0c>
  10db74:	050ffc34 	movhi	r20,16368
  10db78:	d8000f15 	stw	zero,60(sp)
  10db7c:	d8001015 	stw	zero,64(sp)
  10db80:	dd000d15 	stw	r20,52(sp)
  10db84:	b71ffc2c 	andhi	fp,r22,32752
  10db88:	009ff834 	movhi	r2,32736
  10db8c:	e080f226 	beq	fp,r2,10df58 <_strtod_r+0xd78>
  10db90:	d9000717 	ldw	r4,28(sp)
  10db94:	20000c26 	beq	r4,zero,10dbc8 <_strtod_r+0x9e8>
  10db98:	0081a834 	movhi	r2,1696
  10db9c:	17000a36 	bltu	r2,fp,10dbc8 <_strtod_r+0x9e8>
  10dba0:	d9001017 	ldw	r4,64(sp)
  10dba4:	d9400d17 	ldw	r5,52(sp)
  10dba8:	01d07834 	movhi	r7,16864
  10dbac:	39ffffc4 	addi	r7,r7,-1
  10dbb0:	01bff034 	movhi	r6,65472
  10dbb4:	01170000 	call	117000 <__ledf2>
  10dbb8:	0080a70e 	bge	zero,r2,10de58 <_strtod_r+0xc78>
  10dbbc:	0081ac34 	movhi	r2,1712
  10dbc0:	a091883a 	add	r8,r20,r2
  10dbc4:	4729c83a 	sub	r20,r8,fp
  10dbc8:	b809883a 	mov	r4,r23
  10dbcc:	b00b883a 	mov	r5,r22
  10dbd0:	010c5400 	call	10c540 <__ulp>
  10dbd4:	d9000f17 	ldw	r4,60(sp)
  10dbd8:	a00b883a 	mov	r5,r20
  10dbdc:	100d883a 	mov	r6,r2
  10dbe0:	180f883a 	mov	r7,r3
  10dbe4:	01170f40 	call	1170f4 <__muldf3>
  10dbe8:	b80d883a 	mov	r6,r23
  10dbec:	b00f883a 	mov	r7,r22
  10dbf0:	1009883a 	mov	r4,r2
  10dbf4:	180b883a 	mov	r5,r3
  10dbf8:	0115c200 	call	115c20 <__adddf3>
  10dbfc:	102f883a 	mov	r23,r2
  10dc00:	182d883a 	mov	r22,r3
  10dc04:	1829883a 	mov	r20,r3
  10dc08:	d9000717 	ldw	r4,28(sp)
  10dc0c:	2000021e 	bne	r4,zero,10dc18 <_strtod_r+0xa38>
  10dc10:	a09ffc2c 	andhi	r2,r20,32752
  10dc14:	e080f126 	beq	fp,r2,10dfdc <_strtod_r+0xdfc>
  10dc18:	d9400517 	ldw	r5,20(sp)
  10dc1c:	8809883a 	mov	r4,r17
  10dc20:	010ba080 	call	10ba08 <_Bfree>
  10dc24:	980b883a 	mov	r5,r19
  10dc28:	8809883a 	mov	r4,r17
  10dc2c:	010ba080 	call	10ba08 <_Bfree>
  10dc30:	800b883a 	mov	r5,r16
  10dc34:	8809883a 	mov	r4,r17
  10dc38:	010ba080 	call	10ba08 <_Bfree>
  10dc3c:	900b883a 	mov	r5,r18
  10dc40:	8809883a 	mov	r4,r17
  10dc44:	010ba080 	call	10ba08 <_Bfree>
  10dc48:	003f3f06 	br	10d948 <__alt_data_end+0xfffcd948>
  10dc4c:	00c00044 	movi	r3,1
  10dc50:	d8000d15 	stw	zero,52(sp)
  10dc54:	d8c00f15 	stw	r3,60(sp)
  10dc58:	003f6f06 	br	10da18 <__alt_data_end+0xfffcda18>
  10dc5c:	000d883a 	mov	r6,zero
  10dc60:	01cff834 	movhi	r7,16352
  10dc64:	e009883a 	mov	r4,fp
  10dc68:	a00b883a 	mov	r5,r20
  10dc6c:	01170f40 	call	1170f4 <__muldf3>
  10dc70:	d8801015 	stw	r2,64(sp)
  10dc74:	d8c00d15 	stw	r3,52(sp)
  10dc78:	a8001a1e 	bne	r21,zero,10dce4 <_strtod_r+0xb04>
  10dc7c:	1a20003c 	xorhi	r8,r3,32768
  10dc80:	d8800f15 	stw	r2,60(sp)
  10dc84:	4029883a 	mov	r20,r8
  10dc88:	003fbe06 	br	10db84 <__alt_data_end+0xfffcdb84>
  10dc8c:	d8000b15 	stw	zero,44(sp)
  10dc90:	04800044 	movi	r18,1
  10dc94:	b000021e 	bne	r22,zero,10dca0 <_strtod_r+0xac0>
  10dc98:	d8c00c17 	ldw	r3,48(sp)
  10dc9c:	183d9d26 	beq	r3,zero,10d314 <__alt_data_end+0xfffcd314>
  10dca0:	0039883a 	mov	fp,zero
  10dca4:	003e5206 	br	10d5f0 <__alt_data_end+0xfffcd5f0>
  10dca8:	d8c00c17 	ldw	r3,48(sp)
  10dcac:	dd000e17 	ldw	r20,56(sp)
  10dcb0:	1889c83a 	sub	r4,r3,r2
  10dcb4:	003f4706 	br	10d9d4 <__alt_data_end+0xfffcd9d4>
  10dcb8:	00bef884 	movi	r2,-1054
  10dcbc:	07000044 	movi	fp,1
  10dcc0:	10c5c83a 	sub	r2,r2,r3
  10dcc4:	e084983a 	sll	r2,fp,r2
  10dcc8:	df000f15 	stw	fp,60(sp)
  10dccc:	d8800d15 	stw	r2,52(sp)
  10dcd0:	003f5106 	br	10da18 <__alt_data_end+0xfffcda18>
  10dcd4:	d8c00717 	ldw	r3,28(sp)
  10dcd8:	0009883a 	mov	r4,zero
  10dcdc:	d8c00615 	stw	r3,24(sp)
  10dce0:	003de506 	br	10d478 <__alt_data_end+0xfffcd478>
  10dce4:	da000d17 	ldw	r8,52(sp)
  10dce8:	003fe506 	br	10dc80 <__alt_data_end+0xfffcdc80>
  10dcec:	b800521e 	bne	r23,zero,10de38 <_strtod_r+0xc58>
  10dcf0:	01000434 	movhi	r4,16
  10dcf4:	213fffc4 	addi	r4,r4,-1
  10dcf8:	b104703a 	and	r2,r22,r4
  10dcfc:	1000501e 	bne	r2,zero,10de40 <_strtod_r+0xc60>
  10dd00:	000d883a 	mov	r6,zero
  10dd04:	01cffc34 	movhi	r7,16368
  10dd08:	e009883a 	mov	r4,fp
  10dd0c:	a00b883a 	mov	r5,r20
  10dd10:	01170000 	call	117000 <__ledf2>
  10dd14:	10024216 	blt	r2,zero,10e620 <_strtod_r+0x1440>
  10dd18:	a00b883a 	mov	r5,r20
  10dd1c:	000d883a 	mov	r6,zero
  10dd20:	01cff834 	movhi	r7,16352
  10dd24:	e009883a 	mov	r4,fp
  10dd28:	01170f40 	call	1170f4 <__muldf3>
  10dd2c:	d8801015 	stw	r2,64(sp)
  10dd30:	d8c00d15 	stw	r3,52(sp)
  10dd34:	1029883a 	mov	r20,r2
  10dd38:	1a20003c 	xorhi	r8,r3,32768
  10dd3c:	dd000f15 	stw	r20,60(sp)
  10dd40:	4029883a 	mov	r20,r8
  10dd44:	003f8f06 	br	10db84 <__alt_data_end+0xfffcdb84>
  10dd48:	8039883a 	mov	fp,r16
  10dd4c:	002d883a 	mov	r22,zero
  10dd50:	d8000b15 	stw	zero,44(sp)
  10dd54:	bd7ff404 	addi	r21,r23,-48
  10dd58:	00800244 	movi	r2,9
  10dd5c:	15401236 	bltu	r2,r21,10dda8 <_strtod_r+0xbc8>
  10dd60:	dd400e15 	stw	r21,56(sp)
  10dd64:	b0800044 	addi	r2,r22,1
  10dd68:	a801701e 	bne	r21,zero,10e32c <_strtod_r+0x114c>
  10dd6c:	ddc00617 	ldw	r23,24(sp)
  10dd70:	102d883a 	mov	r22,r2
  10dd74:	b8800044 	addi	r2,r23,1
  10dd78:	d8800615 	stw	r2,24(sp)
  10dd7c:	bdc00047 	ldb	r23,1(r23)
  10dd80:	003ff406 	br	10dd54 <__alt_data_end+0xfffcdd54>
  10dd84:	00c00044 	movi	r3,1
  10dd88:	d8c00e15 	stw	r3,56(sp)
  10dd8c:	d8c00717 	ldw	r3,28(sp)
  10dd90:	18800084 	addi	r2,r3,2
  10dd94:	d8800615 	stw	r2,24(sp)
  10dd98:	1dc00087 	ldb	r23,2(r3)
  10dd9c:	003e1f06 	br	10d61c <__alt_data_end+0xfffcd61c>
  10dda0:	d8000e15 	stw	zero,56(sp)
  10dda4:	003ff906 	br	10dd8c <__alt_data_end+0xfffcdd8c>
  10dda8:	04800044 	movi	r18,1
  10ddac:	003dad06 	br	10d464 <__alt_data_end+0xfffcd464>
  10ddb0:	903d581e 	bne	r18,zero,10d314 <__alt_data_end+0xfffcd314>
  10ddb4:	00801384 	movi	r2,78
  10ddb8:	b8800526 	beq	r23,r2,10ddd0 <_strtod_r+0xbf0>
  10ddbc:	15fd530e 	bge	r2,r23,10d30c <__alt_data_end+0xfffcd30c>
  10ddc0:	00801a44 	movi	r2,105
  10ddc4:	b8819a26 	beq	r23,r2,10e430 <_strtod_r+0x1250>
  10ddc8:	00801b84 	movi	r2,110
  10ddcc:	b8bd511e 	bne	r23,r2,10d314 <__alt_data_end+0xfffcd314>
  10ddd0:	014004b4 	movhi	r5,18
  10ddd4:	d9000617 	ldw	r4,24(sp)
  10ddd8:	294da704 	addi	r5,r5,13980
  10dddc:	01c00644 	movi	r7,25
  10dde0:	00000b06 	br	10de10 <_strtod_r+0xc30>
  10dde4:	21000044 	addi	r4,r4,1
  10dde8:	20800003 	ldbu	r2,0(r4)
  10ddec:	10ffefc4 	addi	r3,r2,-65
  10ddf0:	10803fcc 	andi	r2,r2,255
  10ddf4:	1080201c 	xori	r2,r2,128
  10ddf8:	18c03fcc 	andi	r3,r3,255
  10ddfc:	10bfe004 	addi	r2,r2,-128
  10de00:	38c00136 	bltu	r7,r3,10de08 <_strtod_r+0xc28>
  10de04:	10800804 	addi	r2,r2,32
  10de08:	29400044 	addi	r5,r5,1
  10de0c:	11bd411e 	bne	r2,r6,10d314 <__alt_data_end+0xfffcd314>
  10de10:	29800007 	ldb	r6,0(r5)
  10de14:	303ff31e 	bne	r6,zero,10dde4 <__alt_data_end+0xfffcdde4>
  10de18:	20800044 	addi	r2,r4,1
  10de1c:	d8800615 	stw	r2,24(sp)
  10de20:	20c00047 	ldb	r3,1(r4)
  10de24:	00800a04 	movi	r2,40
  10de28:	18bde326 	beq	r3,r2,10d5b8 <__alt_data_end+0xfffcd5b8>
  10de2c:	05bffe34 	movhi	r22,65528
  10de30:	002f883a 	mov	r23,zero
  10de34:	003dea06 	br	10d5e0 <__alt_data_end+0xfffcd5e0>
  10de38:	00800044 	movi	r2,1
  10de3c:	b880ff26 	beq	r23,r2,10e23c <_strtod_r+0x105c>
  10de40:	014ffc34 	movhi	r5,16368
  10de44:	d8000f15 	stw	zero,60(sp)
  10de48:	052ffc34 	movhi	r20,49136
  10de4c:	d8001015 	stw	zero,64(sp)
  10de50:	d9400d15 	stw	r5,52(sp)
  10de54:	003f4b06 	br	10db84 <__alt_data_end+0xfffcdb84>
  10de58:	d9001017 	ldw	r4,64(sp)
  10de5c:	d9400d17 	ldw	r5,52(sp)
  10de60:	0114c140 	call	114c14 <__fixunsdfsi>
  10de64:	1000f126 	beq	r2,zero,10e22c <_strtod_r+0x104c>
  10de68:	1009883a 	mov	r4,r2
  10de6c:	01183b80 	call	1183b8 <__floatunsidf>
  10de70:	d8801015 	stw	r2,64(sp)
  10de74:	d8c00d15 	stw	r3,52(sp)
  10de78:	a800ea1e 	bne	r21,zero,10e224 <_strtod_r+0x1044>
  10de7c:	d8800d17 	ldw	r2,52(sp)
  10de80:	1220003c 	xorhi	r8,r2,32768
  10de84:	d8c01017 	ldw	r3,64(sp)
  10de88:	4029883a 	mov	r20,r8
  10de8c:	d8c00f15 	stw	r3,60(sp)
  10de90:	003f4a06 	br	10dbbc <__alt_data_end+0xfffcdbbc>
  10de94:	d8000c15 	stw	zero,48(sp)
  10de98:	003ea506 	br	10d930 <__alt_data_end+0xfffcd930>
  10de9c:	d8c00817 	ldw	r3,32(sp)
  10dea0:	00bfffc4 	movi	r2,-1
  10dea4:	1880441e 	bne	r3,r2,10dfb8 <_strtod_r+0xdd8>
  10dea8:	9011883a 	mov	r8,r18
  10deac:	d8800517 	ldw	r2,20(sp)
  10deb0:	00c00884 	movi	r3,34
  10deb4:	88c00015 	stw	r3,0(r17)
  10deb8:	d8000815 	stw	zero,32(sp)
  10debc:	071ffc34 	movhi	fp,32752
  10dec0:	100b883a 	mov	r5,r2
  10dec4:	8809883a 	mov	r4,r17
  10dec8:	da001315 	stw	r8,76(sp)
  10decc:	010ba080 	call	10ba08 <_Bfree>
  10ded0:	980b883a 	mov	r5,r19
  10ded4:	8809883a 	mov	r4,r17
  10ded8:	010ba080 	call	10ba08 <_Bfree>
  10dedc:	800b883a 	mov	r5,r16
  10dee0:	8809883a 	mov	r4,r17
  10dee4:	010ba080 	call	10ba08 <_Bfree>
  10dee8:	d9400b17 	ldw	r5,44(sp)
  10deec:	8809883a 	mov	r4,r17
  10def0:	010ba080 	call	10ba08 <_Bfree>
  10def4:	da001317 	ldw	r8,76(sp)
  10def8:	8809883a 	mov	r4,r17
  10defc:	400b883a 	mov	r5,r8
  10df00:	010ba080 	call	10ba08 <_Bfree>
  10df04:	003d5f06 	br	10d484 <__alt_data_end+0xfffcd484>
  10df08:	d8c00a17 	ldw	r3,40(sp)
  10df0c:	d8800504 	addi	r2,sp,20
  10df10:	018004b4 	movhi	r6,18
  10df14:	318dad04 	addi	r6,r6,14004
  10df18:	d8c00115 	stw	r3,4(sp)
  10df1c:	d8800015 	stw	r2,0(sp)
  10df20:	d9c00404 	addi	r7,sp,16
  10df24:	d9400604 	addi	r5,sp,24
  10df28:	8809883a 	mov	r4,r17
  10df2c:	0113bf80 	call	113bf8 <__gethex>
  10df30:	148001cc 	andi	r18,r2,7
  10df34:	903e2126 	beq	r18,zero,10d7bc <__alt_data_end+0xfffcd7bc>
  10df38:	00c00184 	movi	r3,6
  10df3c:	90c0c71e 	bne	r18,r3,10e25c <_strtod_r+0x107c>
  10df40:	84000044 	addi	r16,r16,1
  10df44:	dc000615 	stw	r16,24(sp)
  10df48:	d8000815 	stw	zero,32(sp)
  10df4c:	0039883a 	mov	fp,zero
  10df50:	d8000a15 	stw	zero,40(sp)
  10df54:	003d4b06 	br	10d484 <__alt_data_end+0xfffcd484>
  10df58:	00bf2c34 	movhi	r2,64688
  10df5c:	b0ad883a 	add	r22,r22,r2
  10df60:	b809883a 	mov	r4,r23
  10df64:	b00b883a 	mov	r5,r22
  10df68:	010c5400 	call	10c540 <__ulp>
  10df6c:	d9000f17 	ldw	r4,60(sp)
  10df70:	100d883a 	mov	r6,r2
  10df74:	180f883a 	mov	r7,r3
  10df78:	a00b883a 	mov	r5,r20
  10df7c:	01170f40 	call	1170f4 <__muldf3>
  10df80:	b80d883a 	mov	r6,r23
  10df84:	1009883a 	mov	r4,r2
  10df88:	b00f883a 	mov	r7,r22
  10df8c:	180b883a 	mov	r5,r3
  10df90:	0115c200 	call	115c20 <__adddf3>
  10df94:	011f2834 	movhi	r4,31904
  10df98:	102f883a 	mov	r23,r2
  10df9c:	213fffc4 	addi	r4,r4,-1
  10dfa0:	189ffc2c 	andhi	r2,r3,32752
  10dfa4:	20807b2e 	bgeu	r4,r2,10e194 <_strtod_r+0xfb4>
  10dfa8:	d9401217 	ldw	r5,72(sp)
  10dfac:	009ffc34 	movhi	r2,32752
  10dfb0:	10bfffc4 	addi	r2,r2,-1
  10dfb4:	28bfb926 	beq	r5,r2,10de9c <__alt_data_end+0xfffcde9c>
  10dfb8:	059ffc34 	movhi	r22,32752
  10dfbc:	b5bfffc4 	addi	r22,r22,-1
  10dfc0:	05ffffc4 	movi	r23,-1
  10dfc4:	003f1406 	br	10dc18 <__alt_data_end+0xfffcdc18>
  10dfc8:	00800884 	movi	r2,34
  10dfcc:	88800015 	stw	r2,0(r17)
  10dfd0:	d8000815 	stw	zero,32(sp)
  10dfd4:	071ffc34 	movhi	fp,32752
  10dfd8:	003d2a06 	br	10d484 <__alt_data_end+0xfffcd484>
  10dfdc:	d9400d17 	ldw	r5,52(sp)
  10dfe0:	d9001017 	ldw	r4,64(sp)
  10dfe4:	011825c0 	call	11825c <__fixdfsi>
  10dfe8:	1009883a 	mov	r4,r2
  10dfec:	01182dc0 	call	1182dc <__floatsidf>
  10dff0:	d9001017 	ldw	r4,64(sp)
  10dff4:	d9400d17 	ldw	r5,52(sp)
  10dff8:	100d883a 	mov	r6,r2
  10dffc:	180f883a 	mov	r7,r3
  10e000:	01179600 	call	117960 <__subdf3>
  10e004:	1011883a 	mov	r8,r2
  10e008:	1839883a 	mov	fp,r3
  10e00c:	a800121e 	bne	r21,zero,10e058 <_strtod_r+0xe78>
  10e010:	b800111e 	bne	r23,zero,10e058 <_strtod_r+0xe78>
  10e014:	01400434 	movhi	r5,16
  10e018:	297fffc4 	addi	r5,r5,-1
  10e01c:	a168703a 	and	r20,r20,r5
  10e020:	a0000d1e 	bne	r20,zero,10e058 <_strtod_r+0xe78>
  10e024:	01a52834 	movhi	r6,38048
  10e028:	01cff434 	movhi	r7,16336
  10e02c:	318d6544 	addi	r6,r6,13717
  10e030:	39ffffc4 	addi	r7,r7,-1
  10e034:	1009883a 	mov	r4,r2
  10e038:	180b883a 	mov	r5,r3
  10e03c:	01170000 	call	117000 <__ledf2>
  10e040:	103ef50e 	bge	r2,zero,10dc18 <__alt_data_end+0xfffcdc18>
  10e044:	9011883a 	mov	r8,r18
  10e048:	d8800517 	ldw	r2,20(sp)
  10e04c:	d8000815 	stw	zero,32(sp)
  10e050:	b039883a 	mov	fp,r22
  10e054:	003f9a06 	br	10dec0 <__alt_data_end+0xfffcdec0>
  10e058:	01a52834 	movhi	r6,38048
  10e05c:	01cff834 	movhi	r7,16352
  10e060:	4009883a 	mov	r4,r8
  10e064:	318d6544 	addi	r6,r6,13717
  10e068:	39ffffc4 	addi	r7,r7,-1
  10e06c:	e00b883a 	mov	r5,fp
  10e070:	da001315 	stw	r8,76(sp)
  10e074:	01170000 	call	117000 <__ledf2>
  10e078:	da001317 	ldw	r8,76(sp)
  10e07c:	10000716 	blt	r2,zero,10e09c <_strtod_r+0xebc>
  10e080:	018d6c34 	movhi	r6,13744
  10e084:	31b94d44 	addi	r6,r6,-6859
  10e088:	01cff834 	movhi	r7,16352
  10e08c:	4009883a 	mov	r4,r8
  10e090:	e00b883a 	mov	r5,fp
  10e094:	0116f240 	call	116f24 <__gedf2>
  10e098:	00bedf0e 	bge	zero,r2,10dc18 <__alt_data_end+0xfffcdc18>
  10e09c:	9011883a 	mov	r8,r18
  10e0a0:	d8800517 	ldw	r2,20(sp)
  10e0a4:	ddc00815 	stw	r23,32(sp)
  10e0a8:	b039883a 	mov	fp,r22
  10e0ac:	003f8406 	br	10dec0 <__alt_data_end+0xfffcdec0>
  10e0b0:	903e1026 	beq	r18,zero,10d8f4 <__alt_data_end+0xfffcd8f4>
  10e0b4:	04a5c83a 	sub	r18,zero,r18
  10e0b8:	908003cc 	andi	r2,r18,15
  10e0bc:	10000b26 	beq	r2,zero,10e0ec <_strtod_r+0xf0c>
  10e0c0:	100490fa 	slli	r2,r2,3
  10e0c4:	00c004b4 	movhi	r3,18
  10e0c8:	18cd7204 	addi	r3,r3,13768
  10e0cc:	1885883a 	add	r2,r3,r2
  10e0d0:	11800017 	ldw	r6,0(r2)
  10e0d4:	11c00117 	ldw	r7,4(r2)
  10e0d8:	b809883a 	mov	r4,r23
  10e0dc:	b00b883a 	mov	r5,r22
  10e0e0:	01164cc0 	call	1164cc <__divdf3>
  10e0e4:	102f883a 	mov	r23,r2
  10e0e8:	182d883a 	mov	r22,r3
  10e0ec:	9025d13a 	srai	r18,r18,4
  10e0f0:	903e0026 	beq	r18,zero,10d8f4 <__alt_data_end+0xfffcd8f4>
  10e0f4:	008007c4 	movi	r2,31
  10e0f8:	14801f16 	blt	r2,r18,10e178 <_strtod_r+0xf98>
  10e0fc:	9080040c 	andi	r2,r18,16
  10e100:	10018d26 	beq	r2,zero,10e738 <_strtod_r+0x1558>
  10e104:	00c01a84 	movi	r3,106
  10e108:	d8c00715 	stw	r3,28(sp)
  10e10c:	04817e0e 	bge	zero,r18,10e708 <_strtod_r+0x1528>
  10e110:	050004b4 	movhi	r20,18
  10e114:	a50db204 	addi	r20,r20,14024
  10e118:	b805883a 	mov	r2,r23
  10e11c:	b007883a 	mov	r3,r22
  10e120:	0009883a 	mov	r4,zero
  10e124:	9180004c 	andi	r6,r18,1
  10e128:	30000626 	beq	r6,zero,10e144 <_strtod_r+0xf64>
  10e12c:	a1800017 	ldw	r6,0(r20)
  10e130:	a1c00117 	ldw	r7,4(r20)
  10e134:	1009883a 	mov	r4,r2
  10e138:	180b883a 	mov	r5,r3
  10e13c:	01170f40 	call	1170f4 <__muldf3>
  10e140:	01000044 	movi	r4,1
  10e144:	9025d07a 	srai	r18,r18,1
  10e148:	a5000204 	addi	r20,r20,8
  10e14c:	903ff51e 	bne	r18,zero,10e124 <__alt_data_end+0xfffce124>
  10e150:	21003fcc 	andi	r4,r4,255
  10e154:	2001891e 	bne	r4,zero,10e77c <_strtod_r+0x159c>
  10e158:	d9000717 	ldw	r4,28(sp)
  10e15c:	20016a1e 	bne	r4,zero,10e708 <_strtod_r+0x1528>
  10e160:	000d883a 	mov	r6,zero
  10e164:	000f883a 	mov	r7,zero
  10e168:	b809883a 	mov	r4,r23
  10e16c:	b00b883a 	mov	r5,r22
  10e170:	0116e9c0 	call	116e9c <__eqdf2>
  10e174:	103de01e 	bne	r2,zero,10d8f8 <__alt_data_end+0xfffcd8f8>
  10e178:	00800884 	movi	r2,34
  10e17c:	88800015 	stw	r2,0(r17)
  10e180:	d8000815 	stw	zero,32(sp)
  10e184:	0039883a 	mov	fp,zero
  10e188:	003cbe06 	br	10d484 <__alt_data_end+0xfffcd484>
  10e18c:	011387c4 	movi	r4,19999
  10e190:	003d5606 	br	10d6ec <__alt_data_end+0xfffcd6ec>
  10e194:	0580d434 	movhi	r22,848
  10e198:	1dad883a 	add	r22,r3,r22
  10e19c:	b029883a 	mov	r20,r22
  10e1a0:	003e9906 	br	10dc08 <__alt_data_end+0xfffcdc08>
  10e1a4:	e5c03fcc 	andi	r23,fp,255
  10e1a8:	bdc0201c 	xori	r23,r23,128
  10e1ac:	bdffe004 	addi	r23,r23,-128
  10e1b0:	dc800817 	ldw	r18,32(sp)
  10e1b4:	0029883a 	mov	r20,zero
  10e1b8:	0027883a 	mov	r19,zero
  10e1bc:	0021883a 	mov	r16,zero
  10e1c0:	003c9806 	br	10d424 <__alt_data_end+0xfffcd424>
  10e1c4:	00c00944 	movi	r3,37
  10e1c8:	1f07c83a 	sub	r3,r3,fp
  10e1cc:	1d7d7e16 	blt	r3,r21,10d7c8 <__alt_data_end+0xfffcd7c8>
  10e1d0:	1721c83a 	sub	r16,r2,fp
  10e1d4:	800490fa 	slli	r2,r16,3
  10e1d8:	044004b4 	movhi	r17,18
  10e1dc:	8c4d7204 	addi	r17,r17,13768
  10e1e0:	8885883a 	add	r2,r17,r2
  10e1e4:	11000017 	ldw	r4,0(r2)
  10e1e8:	11400117 	ldw	r5,4(r2)
  10e1ec:	b80d883a 	mov	r6,r23
  10e1f0:	b00f883a 	mov	r7,r22
  10e1f4:	01170f40 	call	1170f4 <__muldf3>
  10e1f8:	ac2bc83a 	sub	r21,r21,r16
  10e1fc:	a80c90fa 	slli	r6,r21,3
  10e200:	1009883a 	mov	r4,r2
  10e204:	180b883a 	mov	r5,r3
  10e208:	8985883a 	add	r2,r17,r6
  10e20c:	11800017 	ldw	r6,0(r2)
  10e210:	11c00117 	ldw	r7,4(r2)
  10e214:	01170f40 	call	1170f4 <__muldf3>
  10e218:	d8800815 	stw	r2,32(sp)
  10e21c:	1839883a 	mov	fp,r3
  10e220:	003c9806 	br	10d484 <__alt_data_end+0xfffcd484>
  10e224:	da000d17 	ldw	r8,52(sp)
  10e228:	003f1606 	br	10de84 <__alt_data_end+0xfffcde84>
  10e22c:	014ffc34 	movhi	r5,16368
  10e230:	d8001015 	stw	zero,64(sp)
  10e234:	d9400d15 	stw	r5,52(sp)
  10e238:	003f0f06 	br	10de78 <__alt_data_end+0xfffcde78>
  10e23c:	b03f001e 	bne	r22,zero,10de40 <__alt_data_end+0xfffcde40>
  10e240:	9011883a 	mov	r8,r18
  10e244:	00800884 	movi	r2,34
  10e248:	88800015 	stw	r2,0(r17)
  10e24c:	d8000815 	stw	zero,32(sp)
  10e250:	d8800517 	ldw	r2,20(sp)
  10e254:	0039883a 	mov	fp,zero
  10e258:	003f1906 	br	10dec0 <__alt_data_end+0xfffcdec0>
  10e25c:	d9800517 	ldw	r6,20(sp)
  10e260:	30000826 	beq	r6,zero,10e284 <_strtod_r+0x10a4>
  10e264:	01400d44 	movi	r5,53
  10e268:	d9000204 	addi	r4,sp,8
  10e26c:	d8801315 	stw	r2,76(sp)
  10e270:	010c9140 	call	10c914 <__copybits>
  10e274:	d9400517 	ldw	r5,20(sp)
  10e278:	8809883a 	mov	r4,r17
  10e27c:	010ba080 	call	10ba08 <_Bfree>
  10e280:	d8801317 	ldw	r2,76(sp)
  10e284:	00c00184 	movi	r3,6
  10e288:	1c800f36 	bltu	r3,r18,10e2c8 <_strtod_r+0x10e8>
  10e28c:	902490ba 	slli	r18,r18,2
  10e290:	00c00474 	movhi	r3,17
  10e294:	18f8a904 	addi	r3,r3,-7516
  10e298:	90e5883a 	add	r18,r18,r3
  10e29c:	90c00017 	ldw	r3,0(r18)
  10e2a0:	1800683a 	jmp	r3
  10e2a4:	0010e320 	cmpeqi	zero,zero,17292
  10e2a8:	0010e2f8 	rdprs	zero,zero,17291
  10e2ac:	0010e2dc 	xori	zero,zero,17291
  10e2b0:	0010e2c0 	call	10e2c <OSCtxSw_SWITCH_PC+0x10dec>
  10e2b4:	0010e2e8 	cmpgeui	zero,zero,17291
  10e2b8:	0010e2f8 	rdprs	zero,zero,17291
  10e2bc:	0010e320 	cmpeqi	zero,zero,17292
  10e2c0:	059ffc34 	movhi	r22,32752
  10e2c4:	002f883a 	mov	r23,zero
  10e2c8:	1080020c 	andi	r2,r2,8
  10e2cc:	ddc00815 	stw	r23,32(sp)
  10e2d0:	103cc426 	beq	r2,zero,10d5e4 <__alt_data_end+0xfffcd5e4>
  10e2d4:	b7200034 	orhi	fp,r22,32768
  10e2d8:	003c6a06 	br	10d484 <__alt_data_end+0xfffcd484>
  10e2dc:	ddc00217 	ldw	r23,8(sp)
  10e2e0:	dd800317 	ldw	r22,12(sp)
  10e2e4:	003ff806 	br	10e2c8 <__alt_data_end+0xfffce2c8>
  10e2e8:	05a00034 	movhi	r22,32768
  10e2ec:	b5bfffc4 	addi	r22,r22,-1
  10e2f0:	05ffffc4 	movi	r23,-1
  10e2f4:	003ff406 	br	10e2c8 <__alt_data_end+0xfffce2c8>
  10e2f8:	d8c00417 	ldw	r3,16(sp)
  10e2fc:	dd800317 	ldw	r22,12(sp)
  10e300:	013ffc34 	movhi	r4,65520
  10e304:	18c10cc4 	addi	r3,r3,1075
  10e308:	1806953a 	slli	r3,r3,20
  10e30c:	213fffc4 	addi	r4,r4,-1
  10e310:	b12c703a 	and	r22,r22,r4
  10e314:	ddc00217 	ldw	r23,8(sp)
  10e318:	b0ecb03a 	or	r22,r22,r3
  10e31c:	003fea06 	br	10e2c8 <__alt_data_end+0xfffce2c8>
  10e320:	002d883a 	mov	r22,zero
  10e324:	002f883a 	mov	r23,zero
  10e328:	003fe706 	br	10e2c8 <__alt_data_end+0xfffce2c8>
  10e32c:	d8c00b17 	ldw	r3,44(sp)
  10e330:	b72d883a 	add	r22,r22,fp
  10e334:	1887883a 	add	r3,r3,r2
  10e338:	d8c00b15 	stw	r3,44(sp)
  10e33c:	00c00044 	movi	r3,1
  10e340:	10c11126 	beq	r2,r3,10e788 <_strtod_r+0x15a8>
  10e344:	05c00204 	movi	r23,8
  10e348:	04800404 	movi	r18,16
  10e34c:	e7000044 	addi	fp,fp,1
  10e350:	e0bfffc4 	addi	r2,fp,-1
  10e354:	b8802016 	blt	r23,r2,10e3d8 <_strtod_r+0x11f8>
  10e358:	9809883a 	mov	r4,r19
  10e35c:	01400284 	movi	r5,10
  10e360:	01159fc0 	call	1159fc <__mulsi3>
  10e364:	1027883a 	mov	r19,r2
  10e368:	e5bff81e 	bne	fp,r22,10e34c <__alt_data_end+0xfffce34c>
  10e36c:	ddc00617 	ldw	r23,24(sp)
  10e370:	e7000044 	addi	fp,fp,1
  10e374:	00800204 	movi	r2,8
  10e378:	1580100e 	bge	r2,r22,10e3bc <_strtod_r+0x11dc>
  10e37c:	00800404 	movi	r2,16
  10e380:	002d883a 	mov	r22,zero
  10e384:	173e7b16 	blt	r2,fp,10dd74 <__alt_data_end+0xfffcdd74>
  10e388:	a009883a 	mov	r4,r20
  10e38c:	01400284 	movi	r5,10
  10e390:	01159fc0 	call	1159fc <__mulsi3>
  10e394:	a8a9883a 	add	r20,r21,r2
  10e398:	003e7606 	br	10dd74 <__alt_data_end+0xfffcdd74>
  10e39c:	d9000617 	ldw	r4,24(sp)
  10e3a0:	bdfff404 	addi	r23,r23,-48
  10e3a4:	b5800044 	addi	r22,r22,1
  10e3a8:	ddc00e15 	stw	r23,56(sp)
  10e3ac:	d9000815 	stw	r4,32(sp)
  10e3b0:	dd800b15 	stw	r22,44(sp)
  10e3b4:	202f883a 	mov	r23,r4
  10e3b8:	07000044 	movi	fp,1
  10e3bc:	9809883a 	mov	r4,r19
  10e3c0:	01400284 	movi	r5,10
  10e3c4:	01159fc0 	call	1159fc <__mulsi3>
  10e3c8:	d8c00e17 	ldw	r3,56(sp)
  10e3cc:	002d883a 	mov	r22,zero
  10e3d0:	18a7883a 	add	r19,r3,r2
  10e3d4:	003e6706 	br	10dd74 <__alt_data_end+0xfffcdd74>
  10e3d8:	973fe316 	blt	r18,fp,10e368 <__alt_data_end+0xfffce368>
  10e3dc:	a009883a 	mov	r4,r20
  10e3e0:	01400284 	movi	r5,10
  10e3e4:	01159fc0 	call	1159fc <__mulsi3>
  10e3e8:	1029883a 	mov	r20,r2
  10e3ec:	003fde06 	br	10e368 <__alt_data_end+0xfffce368>
  10e3f0:	00bffa84 	movi	r2,-22
  10e3f4:	a8bcf416 	blt	r21,r2,10d7c8 <__alt_data_end+0xfffcd7c8>
  10e3f8:	a82a90fa 	slli	r21,r21,3
  10e3fc:	008004b4 	movhi	r2,18
  10e400:	108d7204 	addi	r2,r2,13768
  10e404:	1545c83a 	sub	r2,r2,r21
  10e408:	11800017 	ldw	r6,0(r2)
  10e40c:	11c00117 	ldw	r7,4(r2)
  10e410:	b809883a 	mov	r4,r23
  10e414:	b00b883a 	mov	r5,r22
  10e418:	01164cc0 	call	1164cc <__divdf3>
  10e41c:	d8800815 	stw	r2,32(sp)
  10e420:	1839883a 	mov	fp,r3
  10e424:	003c1706 	br	10d484 <__alt_data_end+0xfffcd484>
  10e428:	9011883a 	mov	r8,r18
  10e42c:	003ea006 	br	10deb0 <__alt_data_end+0xfffcdeb0>
  10e430:	014004b4 	movhi	r5,18
  10e434:	d9000617 	ldw	r4,24(sp)
  10e438:	294da404 	addi	r5,r5,13968
  10e43c:	01c00644 	movi	r7,25
  10e440:	00000b06 	br	10e470 <_strtod_r+0x1290>
  10e444:	21000044 	addi	r4,r4,1
  10e448:	20800003 	ldbu	r2,0(r4)
  10e44c:	10ffefc4 	addi	r3,r2,-65
  10e450:	10803fcc 	andi	r2,r2,255
  10e454:	1080201c 	xori	r2,r2,128
  10e458:	18c03fcc 	andi	r3,r3,255
  10e45c:	10bfe004 	addi	r2,r2,-128
  10e460:	38c00136 	bltu	r7,r3,10e468 <_strtod_r+0x1288>
  10e464:	10800804 	addi	r2,r2,32
  10e468:	29400044 	addi	r5,r5,1
  10e46c:	11bba91e 	bne	r2,r6,10d314 <__alt_data_end+0xfffcd314>
  10e470:	29800007 	ldb	r6,0(r5)
  10e474:	303ff31e 	bne	r6,zero,10e444 <__alt_data_end+0xfffce444>
  10e478:	018004b4 	movhi	r6,18
  10e47c:	d9000615 	stw	r4,24(sp)
  10e480:	318da504 	addi	r6,r6,13972
  10e484:	200b883a 	mov	r5,r4
  10e488:	02000644 	movi	r8,25
  10e48c:	00000a06 	br	10e4b8 <_strtod_r+0x12d8>
  10e490:	28800003 	ldbu	r2,0(r5)
  10e494:	10ffefc4 	addi	r3,r2,-65
  10e498:	10803fcc 	andi	r2,r2,255
  10e49c:	1080201c 	xori	r2,r2,128
  10e4a0:	18c03fcc 	andi	r3,r3,255
  10e4a4:	10bfe004 	addi	r2,r2,-128
  10e4a8:	40c00136 	bltu	r8,r3,10e4b0 <_strtod_r+0x12d0>
  10e4ac:	10800804 	addi	r2,r2,32
  10e4b0:	31800044 	addi	r6,r6,1
  10e4b4:	11c0691e 	bne	r2,r7,10e65c <_strtod_r+0x147c>
  10e4b8:	31c00007 	ldb	r7,0(r6)
  10e4bc:	29400044 	addi	r5,r5,1
  10e4c0:	383ff31e 	bne	r7,zero,10e490 <__alt_data_end+0xfffce490>
  10e4c4:	d9400615 	stw	r5,24(sp)
  10e4c8:	059ffc34 	movhi	r22,32752
  10e4cc:	002f883a 	mov	r23,zero
  10e4d0:	003c4306 	br	10d5e0 <__alt_data_end+0xfffcd5e0>
  10e4d4:	002d883a 	mov	r22,zero
  10e4d8:	003cad06 	br	10d790 <__alt_data_end+0xfffcd790>
  10e4dc:	9011883a 	mov	r8,r18
  10e4e0:	df001217 	ldw	fp,72(sp)
  10e4e4:	a800461e 	bne	r21,zero,10e600 <_strtod_r+0x1420>
  10e4e8:	b800451e 	bne	r23,zero,10e600 <_strtod_r+0x1420>
  10e4ec:	00800434 	movhi	r2,16
  10e4f0:	10bfffc4 	addi	r2,r2,-1
  10e4f4:	b084703a 	and	r2,r22,r2
  10e4f8:	1000411e 	bne	r2,zero,10e600 <_strtod_r+0x1420>
  10e4fc:	b49ffc2c 	andhi	r18,r22,32752
  10e500:	0081ac34 	movhi	r2,1712
  10e504:	14803e2e 	bgeu	r2,r18,10e600 <_strtod_r+0x1420>
  10e508:	40800517 	ldw	r2,20(r8)
  10e50c:	1000031e 	bne	r2,zero,10e51c <_strtod_r+0x133c>
  10e510:	40800417 	ldw	r2,16(r8)
  10e514:	00c00044 	movi	r3,1
  10e518:	1880390e 	bge	r3,r2,10e600 <_strtod_r+0x1420>
  10e51c:	400b883a 	mov	r5,r8
  10e520:	01800044 	movi	r6,1
  10e524:	8809883a 	mov	r4,r17
  10e528:	010c19c0 	call	10c19c <__lshift>
  10e52c:	800b883a 	mov	r5,r16
  10e530:	1009883a 	mov	r4,r2
  10e534:	d8801315 	stw	r2,76(sp)
  10e538:	010c2e40 	call	10c2e4 <__mcmp>
  10e53c:	da001317 	ldw	r8,76(sp)
  10e540:	00802f0e 	bge	zero,r2,10e600 <_strtod_r+0x1420>
  10e544:	d9000717 	ldw	r4,28(sp)
  10e548:	20008026 	beq	r4,zero,10e74c <_strtod_r+0x156c>
  10e54c:	0081ac34 	movhi	r2,1712
  10e550:	14807e16 	blt	r2,r18,10e74c <_strtod_r+0x156c>
  10e554:	0080dc34 	movhi	r2,880
  10e558:	14bf3a0e 	bge	r2,r18,10e244 <__alt_data_end+0xfffce244>
  10e55c:	d9000817 	ldw	r4,32(sp)
  10e560:	e00b883a 	mov	r5,fp
  10e564:	000d883a 	mov	r6,zero
  10e568:	01ce5434 	movhi	r7,14672
  10e56c:	da001315 	stw	r8,76(sp)
  10e570:	01170f40 	call	1170f4 <__muldf3>
  10e574:	d8800815 	stw	r2,32(sp)
  10e578:	1839883a 	mov	fp,r3
  10e57c:	da001317 	ldw	r8,76(sp)
  10e580:	1800211e 	bne	r3,zero,10e608 <_strtod_r+0x1428>
  10e584:	d8c00817 	ldw	r3,32(sp)
  10e588:	d8800517 	ldw	r2,20(sp)
  10e58c:	183e4c1e 	bne	r3,zero,10dec0 <__alt_data_end+0xfffcdec0>
  10e590:	00c00884 	movi	r3,34
  10e594:	88c00015 	stw	r3,0(r17)
  10e598:	003e4906 	br	10dec0 <__alt_data_end+0xfffcdec0>
  10e59c:	00800434 	movhi	r2,16
  10e5a0:	9011883a 	mov	r8,r18
  10e5a4:	df001217 	ldw	fp,72(sp)
  10e5a8:	10bfffc4 	addi	r2,r2,-1
  10e5ac:	a8002226 	beq	r21,zero,10e638 <_strtod_r+0x1458>
  10e5b0:	b086703a 	and	r3,r22,r2
  10e5b4:	18804126 	beq	r3,r2,10e6bc <_strtod_r+0x14dc>
  10e5b8:	d8c00d17 	ldw	r3,52(sp)
  10e5bc:	18002326 	beq	r3,zero,10e64c <_strtod_r+0x146c>
  10e5c0:	1da4703a 	and	r18,r3,r22
  10e5c4:	90000e26 	beq	r18,zero,10e600 <_strtod_r+0x1420>
  10e5c8:	da001315 	stw	r8,76(sp)
  10e5cc:	d9800717 	ldw	r6,28(sp)
  10e5d0:	b809883a 	mov	r4,r23
  10e5d4:	b00b883a 	mov	r5,r22
  10e5d8:	a8002826 	beq	r21,zero,10e67c <_strtod_r+0x149c>
  10e5dc:	010d17c0 	call	10d17c <sulp>
  10e5e0:	100d883a 	mov	r6,r2
  10e5e4:	180f883a 	mov	r7,r3
  10e5e8:	b809883a 	mov	r4,r23
  10e5ec:	b00b883a 	mov	r5,r22
  10e5f0:	0115c200 	call	115c20 <__adddf3>
  10e5f4:	da001317 	ldw	r8,76(sp)
  10e5f8:	d8800815 	stw	r2,32(sp)
  10e5fc:	1839883a 	mov	fp,r3
  10e600:	d8800717 	ldw	r2,28(sp)
  10e604:	103fd51e 	bne	r2,zero,10e55c <__alt_data_end+0xfffce55c>
  10e608:	d8800517 	ldw	r2,20(sp)
  10e60c:	003e2c06 	br	10dec0 <__alt_data_end+0xfffcdec0>
  10e610:	0580d434 	movhi	r22,848
  10e614:	1dad883a 	add	r22,r3,r22
  10e618:	d8000715 	stw	zero,28(sp)
  10e61c:	003cb606 	br	10d8f8 <__alt_data_end+0xfffcd8f8>
  10e620:	008ff834 	movhi	r2,16352
  10e624:	0029883a 	mov	r20,zero
  10e628:	022ff834 	movhi	r8,49120
  10e62c:	d8001015 	stw	zero,64(sp)
  10e630:	d8800d15 	stw	r2,52(sp)
  10e634:	003dc106 	br	10dd3c <__alt_data_end+0xfffcdd3c>
  10e638:	b084703a 	and	r2,r22,r2
  10e63c:	103fde1e 	bne	r2,zero,10e5b8 <__alt_data_end+0xfffce5b8>
  10e640:	b83fdd1e 	bne	r23,zero,10e5b8 <__alt_data_end+0xfffce5b8>
  10e644:	b49ffc2c 	andhi	r18,r22,32752
  10e648:	003fbe06 	br	10e544 <__alt_data_end+0xfffce544>
  10e64c:	d8c00f17 	ldw	r3,60(sp)
  10e650:	1de8703a 	and	r20,r3,r23
  10e654:	a03fea26 	beq	r20,zero,10e600 <__alt_data_end+0xfffce600>
  10e658:	003fdb06 	br	10e5c8 <__alt_data_end+0xfffce5c8>
  10e65c:	21000044 	addi	r4,r4,1
  10e660:	d9000615 	stw	r4,24(sp)
  10e664:	003f9806 	br	10e4c8 <__alt_data_end+0xfffce4c8>
  10e668:	014004b4 	movhi	r5,18
  10e66c:	294d6804 	addi	r5,r5,13728
  10e670:	d9400715 	stw	r5,28(sp)
  10e674:	0025883a 	mov	r18,zero
  10e678:	003c8c06 	br	10d8ac <__alt_data_end+0xfffcd8ac>
  10e67c:	010d17c0 	call	10d17c <sulp>
  10e680:	100d883a 	mov	r6,r2
  10e684:	180f883a 	mov	r7,r3
  10e688:	b809883a 	mov	r4,r23
  10e68c:	b00b883a 	mov	r5,r22
  10e690:	01179600 	call	117960 <__subdf3>
  10e694:	000d883a 	mov	r6,zero
  10e698:	000f883a 	mov	r7,zero
  10e69c:	1009883a 	mov	r4,r2
  10e6a0:	180b883a 	mov	r5,r3
  10e6a4:	d8800815 	stw	r2,32(sp)
  10e6a8:	1839883a 	mov	fp,r3
  10e6ac:	0116e9c0 	call	116e9c <__eqdf2>
  10e6b0:	da001317 	ldw	r8,76(sp)
  10e6b4:	103ee326 	beq	r2,zero,10e244 <__alt_data_end+0xfffce244>
  10e6b8:	003fd106 	br	10e600 <__alt_data_end+0xfffce600>
  10e6bc:	d8c00717 	ldw	r3,28(sp)
  10e6c0:	18002026 	beq	r3,zero,10e744 <_strtod_r+0x1564>
  10e6c4:	b09ffc2c 	andhi	r2,r22,32752
  10e6c8:	00c1a834 	movhi	r3,1696
  10e6cc:	18801d36 	bltu	r3,r2,10e744 <_strtod_r+0x1564>
  10e6d0:	1004d53a 	srli	r2,r2,20
  10e6d4:	00c01ac4 	movi	r3,107
  10e6d8:	1887c83a 	sub	r3,r3,r2
  10e6dc:	00bfffc4 	movi	r2,-1
  10e6e0:	10c4983a 	sll	r2,r2,r3
  10e6e4:	15ffb41e 	bne	r2,r23,10e5b8 <__alt_data_end+0xfffce5b8>
  10e6e8:	00dffc34 	movhi	r3,32752
  10e6ec:	18ffffc4 	addi	r3,r3,-1
  10e6f0:	b0c03126 	beq	r22,r3,10e7b8 <_strtod_r+0x15d8>
  10e6f4:	b59ffc2c 	andhi	r22,r22,32752
  10e6f8:	00800434 	movhi	r2,16
  10e6fc:	d8000815 	stw	zero,32(sp)
  10e700:	b0b9883a 	add	fp,r22,r2
  10e704:	003fbe06 	br	10e600 <__alt_data_end+0xfffce600>
  10e708:	b49ffc2c 	andhi	r18,r22,32752
  10e70c:	9024d53a 	srli	r18,r18,20
  10e710:	00801ac4 	movi	r2,107
  10e714:	14a5c83a 	sub	r18,r2,r18
  10e718:	04be910e 	bge	zero,r18,10e160 <__alt_data_end+0xfffce160>
  10e71c:	008007c4 	movi	r2,31
  10e720:	1480120e 	bge	r2,r18,10e76c <_strtod_r+0x158c>
  10e724:	00800d04 	movi	r2,52
  10e728:	002f883a 	mov	r23,zero
  10e72c:	14801a0e 	bge	r2,r18,10e798 <_strtod_r+0x15b8>
  10e730:	0580dc34 	movhi	r22,880
  10e734:	003e8a06 	br	10e160 <__alt_data_end+0xfffce160>
  10e738:	d8000715 	stw	zero,28(sp)
  10e73c:	04be7416 	blt	zero,r18,10e110 <__alt_data_end+0xfffce110>
  10e740:	003e8706 	br	10e160 <__alt_data_end+0xfffce160>
  10e744:	00bfffc4 	movi	r2,-1
  10e748:	003fe606 	br	10e6e4 <__alt_data_end+0xfffce6e4>
  10e74c:	073ffc34 	movhi	fp,65520
  10e750:	9725883a 	add	r18,r18,fp
  10e754:	017fffc4 	movi	r5,-1
  10e758:	07000434 	movhi	fp,16
  10e75c:	e179883a 	add	fp,fp,r5
  10e760:	d9400815 	stw	r5,32(sp)
  10e764:	9738b03a 	or	fp,r18,fp
  10e768:	003fa506 	br	10e600 <__alt_data_end+0xfffce600>
  10e76c:	00bfffc4 	movi	r2,-1
  10e770:	14a4983a 	sll	r18,r2,r18
  10e774:	95ee703a 	and	r23,r18,r23
  10e778:	003e7906 	br	10e160 <__alt_data_end+0xfffce160>
  10e77c:	102f883a 	mov	r23,r2
  10e780:	182d883a 	mov	r22,r3
  10e784:	003e7406 	br	10e158 <__alt_data_end+0xfffce158>
  10e788:	e02d883a 	mov	r22,fp
  10e78c:	ddc00617 	ldw	r23,24(sp)
  10e790:	e0f9883a 	add	fp,fp,r3
  10e794:	003ef706 	br	10e374 <__alt_data_end+0xfffce374>
  10e798:	94bff804 	addi	r18,r18,-32
  10e79c:	00bfffc4 	movi	r2,-1
  10e7a0:	14a4983a 	sll	r18,r2,r18
  10e7a4:	95ac703a 	and	r22,r18,r22
  10e7a8:	003e6d06 	br	10e160 <__alt_data_end+0xfffce160>
  10e7ac:	102f883a 	mov	r23,r2
  10e7b0:	182d883a 	mov	r22,r3
  10e7b4:	003c3d06 	br	10d8ac <__alt_data_end+0xfffcd8ac>
  10e7b8:	00ffffc4 	movi	r3,-1
  10e7bc:	10ffcd1e 	bne	r2,r3,10e6f4 <__alt_data_end+0xfffce6f4>
  10e7c0:	003dba06 	br	10deac <__alt_data_end+0xfffcdeac>

0010e7c4 <strtod>:
  10e7c4:	008004b4 	movhi	r2,18
  10e7c8:	10957404 	addi	r2,r2,21968
  10e7cc:	280d883a 	mov	r6,r5
  10e7d0:	200b883a 	mov	r5,r4
  10e7d4:	11000017 	ldw	r4,0(r2)
  10e7d8:	010d1e01 	jmpi	10d1e0 <_strtod_r>

0010e7dc <strtof>:
  10e7dc:	defffb04 	addi	sp,sp,-20
  10e7e0:	dcc00315 	stw	r19,12(sp)
  10e7e4:	04c004b4 	movhi	r19,18
  10e7e8:	9cd57404 	addi	r19,r19,21968
  10e7ec:	280d883a 	mov	r6,r5
  10e7f0:	200b883a 	mov	r5,r4
  10e7f4:	99000017 	ldw	r4,0(r19)
  10e7f8:	dfc00415 	stw	ra,16(sp)
  10e7fc:	dc800215 	stw	r18,8(sp)
  10e800:	dc400115 	stw	r17,4(sp)
  10e804:	dc000015 	stw	r16,0(sp)
  10e808:	010d1e00 	call	10d1e0 <_strtod_r>
  10e80c:	1009883a 	mov	r4,r2
  10e810:	180b883a 	mov	r5,r3
  10e814:	1025883a 	mov	r18,r2
  10e818:	1823883a 	mov	r17,r3
  10e81c:	01184600 	call	118460 <__truncdfsf2>
  10e820:	000b883a 	mov	r5,zero
  10e824:	1009883a 	mov	r4,r2
  10e828:	1021883a 	mov	r16,r2
  10e82c:	0115a240 	call	115a24 <__eqsf2>
  10e830:	1000111e 	bne	r2,zero,10e878 <strtof+0x9c>
  10e834:	000d883a 	mov	r6,zero
  10e838:	000f883a 	mov	r7,zero
  10e83c:	9009883a 	mov	r4,r18
  10e840:	880b883a 	mov	r5,r17
  10e844:	0116e9c0 	call	116e9c <__eqdf2>
  10e848:	10000b26 	beq	r2,zero,10e878 <strtof+0x9c>
  10e84c:	98800017 	ldw	r2,0(r19)
  10e850:	00c00884 	movi	r3,34
  10e854:	10c00015 	stw	r3,0(r2)
  10e858:	8005883a 	mov	r2,r16
  10e85c:	dfc00417 	ldw	ra,16(sp)
  10e860:	dcc00317 	ldw	r19,12(sp)
  10e864:	dc800217 	ldw	r18,8(sp)
  10e868:	dc400117 	ldw	r17,4(sp)
  10e86c:	dc000017 	ldw	r16,0(sp)
  10e870:	dec00504 	addi	sp,sp,20
  10e874:	f800283a 	ret
  10e878:	015fe034 	movhi	r5,32640
  10e87c:	297fffc4 	addi	r5,r5,-1
  10e880:	8009883a 	mov	r4,r16
  10e884:	0115a9c0 	call	115a9c <__gesf2>
  10e888:	0080070e 	bge	zero,r2,10e8a8 <strtof+0xcc>
  10e88c:	01dffc34 	movhi	r7,32752
  10e890:	39ffffc4 	addi	r7,r7,-1
  10e894:	01bfffc4 	movi	r6,-1
  10e898:	9009883a 	mov	r4,r18
  10e89c:	880b883a 	mov	r5,r17
  10e8a0:	0116f240 	call	116f24 <__gedf2>
  10e8a4:	00bfe90e 	bge	zero,r2,10e84c <__alt_data_end+0xfffce84c>
  10e8a8:	017fe034 	movhi	r5,65408
  10e8ac:	297fffc4 	addi	r5,r5,-1
  10e8b0:	8009883a 	mov	r4,r16
  10e8b4:	0115b580 	call	115b58 <__lesf2>
  10e8b8:	103fe70e 	bge	r2,zero,10e858 <__alt_data_end+0xfffce858>
  10e8bc:	01fffc34 	movhi	r7,65520
  10e8c0:	39ffffc4 	addi	r7,r7,-1
  10e8c4:	01bfffc4 	movi	r6,-1
  10e8c8:	9009883a 	mov	r4,r18
  10e8cc:	880b883a 	mov	r5,r17
  10e8d0:	01170000 	call	117000 <__ledf2>
  10e8d4:	103fdd0e 	bge	r2,zero,10e84c <__alt_data_end+0xfffce84c>
  10e8d8:	003fdf06 	br	10e858 <__alt_data_end+0xfffce858>

0010e8dc <_strtol_r>:
  10e8dc:	008004b4 	movhi	r2,18
  10e8e0:	defff204 	addi	sp,sp,-56
  10e8e4:	10957204 	addi	r2,r2,21960
  10e8e8:	dd800a15 	stw	r22,40(sp)
  10e8ec:	15800017 	ldw	r22,0(r2)
  10e8f0:	df000c15 	stw	fp,48(sp)
  10e8f4:	d9000315 	stw	r4,12(sp)
  10e8f8:	dfc00d15 	stw	ra,52(sp)
  10e8fc:	ddc00b15 	stw	r23,44(sp)
  10e900:	dd400915 	stw	r21,36(sp)
  10e904:	dd000815 	stw	r20,32(sp)
  10e908:	dcc00715 	stw	r19,28(sp)
  10e90c:	dc800615 	stw	r18,24(sp)
  10e910:	dc400515 	stw	r17,20(sp)
  10e914:	dc000415 	stw	r16,16(sp)
  10e918:	d9400215 	stw	r5,8(sp)
  10e91c:	d9800015 	stw	r6,0(sp)
  10e920:	3839883a 	mov	fp,r7
  10e924:	2809883a 	mov	r4,r5
  10e928:	24000003 	ldbu	r16,0(r4)
  10e92c:	24400044 	addi	r17,r4,1
  10e930:	2007883a 	mov	r3,r4
  10e934:	b405883a 	add	r2,r22,r16
  10e938:	10800043 	ldbu	r2,1(r2)
  10e93c:	8809883a 	mov	r4,r17
  10e940:	1080020c 	andi	r2,r2,8
  10e944:	103ff81e 	bne	r2,zero,10e928 <__alt_data_end+0xfffce928>
  10e948:	00800b44 	movi	r2,45
  10e94c:	80805526 	beq	r16,r2,10eaa4 <_strtol_r+0x1c8>
  10e950:	00800ac4 	movi	r2,43
  10e954:	80806026 	beq	r16,r2,10ead8 <_strtol_r+0x1fc>
  10e958:	0029883a 	mov	r20,zero
  10e95c:	e0004726 	beq	fp,zero,10ea7c <_strtol_r+0x1a0>
  10e960:	00800404 	movi	r2,16
  10e964:	e0806626 	beq	fp,r2,10eb00 <_strtol_r+0x224>
  10e968:	e027883a 	mov	r19,fp
  10e96c:	00a00034 	movhi	r2,32768
  10e970:	a025003a 	cmpeq	r18,r20,zero
  10e974:	14a5c83a 	sub	r18,r2,r18
  10e978:	9009883a 	mov	r4,r18
  10e97c:	980b883a 	mov	r5,r19
  10e980:	01159a40 	call	1159a4 <__umodsi3>
  10e984:	9009883a 	mov	r4,r18
  10e988:	980b883a 	mov	r5,r19
  10e98c:	d8800115 	stw	r2,4(sp)
  10e990:	01159400 	call	115940 <__udivsi3>
  10e994:	b407883a 	add	r3,r22,r16
  10e998:	18c00043 	ldbu	r3,1(r3)
  10e99c:	102b883a 	mov	r21,r2
  10e9a0:	0009883a 	mov	r4,zero
  10e9a4:	1940010c 	andi	r5,r3,4
  10e9a8:	0005883a 	mov	r2,zero
  10e9ac:	04800044 	movi	r18,1
  10e9b0:	05ffffc4 	movi	r23,-1
  10e9b4:	28000f26 	beq	r5,zero,10e9f4 <_strtol_r+0x118>
  10e9b8:	843ff404 	addi	r16,r16,-48
  10e9bc:	8700130e 	bge	r16,fp,10ea0c <_strtol_r+0x130>
  10e9c0:	15c00626 	beq	r2,r23,10e9dc <_strtol_r+0x100>
  10e9c4:	a9002936 	bltu	r21,r4,10ea6c <_strtol_r+0x190>
  10e9c8:	25402626 	beq	r4,r21,10ea64 <_strtol_r+0x188>
  10e9cc:	980b883a 	mov	r5,r19
  10e9d0:	01159fc0 	call	1159fc <__mulsi3>
  10e9d4:	8089883a 	add	r4,r16,r2
  10e9d8:	00800044 	movi	r2,1
  10e9dc:	8c000003 	ldbu	r16,0(r17)
  10e9e0:	8c400044 	addi	r17,r17,1
  10e9e4:	b407883a 	add	r3,r22,r16
  10e9e8:	18c00043 	ldbu	r3,1(r3)
  10e9ec:	1940010c 	andi	r5,r3,4
  10e9f0:	283ff11e 	bne	r5,zero,10e9b8 <__alt_data_end+0xfffce9b8>
  10e9f4:	18c000cc 	andi	r3,r3,3
  10e9f8:	18000426 	beq	r3,zero,10ea0c <_strtol_r+0x130>
  10e9fc:	1c801d26 	beq	r3,r18,10ea74 <_strtol_r+0x198>
  10ea00:	00c015c4 	movi	r3,87
  10ea04:	80e1c83a 	sub	r16,r16,r3
  10ea08:	873fed16 	blt	r16,fp,10e9c0 <__alt_data_end+0xfffce9c0>
  10ea0c:	00ffffc4 	movi	r3,-1
  10ea10:	10c02826 	beq	r2,r3,10eab4 <_strtol_r+0x1d8>
  10ea14:	a0001e1e 	bne	r20,zero,10ea90 <_strtol_r+0x1b4>
  10ea18:	d8c00017 	ldw	r3,0(sp)
  10ea1c:	18004326 	beq	r3,zero,10eb2c <_strtol_r+0x250>
  10ea20:	10001d1e 	bne	r2,zero,10ea98 <_strtol_r+0x1bc>
  10ea24:	dd800217 	ldw	r22,8(sp)
  10ea28:	2005883a 	mov	r2,r4
  10ea2c:	d8c00017 	ldw	r3,0(sp)
  10ea30:	1d800015 	stw	r22,0(r3)
  10ea34:	dfc00d17 	ldw	ra,52(sp)
  10ea38:	df000c17 	ldw	fp,48(sp)
  10ea3c:	ddc00b17 	ldw	r23,44(sp)
  10ea40:	dd800a17 	ldw	r22,40(sp)
  10ea44:	dd400917 	ldw	r21,36(sp)
  10ea48:	dd000817 	ldw	r20,32(sp)
  10ea4c:	dcc00717 	ldw	r19,28(sp)
  10ea50:	dc800617 	ldw	r18,24(sp)
  10ea54:	dc400517 	ldw	r17,20(sp)
  10ea58:	dc000417 	ldw	r16,16(sp)
  10ea5c:	dec00e04 	addi	sp,sp,56
  10ea60:	f800283a 	ret
  10ea64:	d8c00117 	ldw	r3,4(sp)
  10ea68:	1c3fd80e 	bge	r3,r16,10e9cc <__alt_data_end+0xfffce9cc>
  10ea6c:	00bfffc4 	movi	r2,-1
  10ea70:	003fda06 	br	10e9dc <__alt_data_end+0xfffce9dc>
  10ea74:	00c00dc4 	movi	r3,55
  10ea78:	003fe206 	br	10ea04 <__alt_data_end+0xfffcea04>
  10ea7c:	00800c04 	movi	r2,48
  10ea80:	80801926 	beq	r16,r2,10eae8 <_strtol_r+0x20c>
  10ea84:	07000284 	movi	fp,10
  10ea88:	e027883a 	mov	r19,fp
  10ea8c:	003fb706 	br	10e96c <__alt_data_end+0xfffce96c>
  10ea90:	0109c83a 	sub	r4,zero,r4
  10ea94:	003fe006 	br	10ea18 <__alt_data_end+0xfffcea18>
  10ea98:	2005883a 	mov	r2,r4
  10ea9c:	8dbfffc4 	addi	r22,r17,-1
  10eaa0:	003fe206 	br	10ea2c <__alt_data_end+0xfffcea2c>
  10eaa4:	1c400084 	addi	r17,r3,2
  10eaa8:	1c000043 	ldbu	r16,1(r3)
  10eaac:	05000044 	movi	r20,1
  10eab0:	003faa06 	br	10e95c <__alt_data_end+0xfffce95c>
  10eab4:	d9000317 	ldw	r4,12(sp)
  10eab8:	00c00884 	movi	r3,34
  10eabc:	a005003a 	cmpeq	r2,r20,zero
  10eac0:	20c00015 	stw	r3,0(r4)
  10eac4:	00e00034 	movhi	r3,32768
  10eac8:	1885c83a 	sub	r2,r3,r2
  10eacc:	d8c00017 	ldw	r3,0(sp)
  10ead0:	183ff21e 	bne	r3,zero,10ea9c <__alt_data_end+0xfffcea9c>
  10ead4:	003fd706 	br	10ea34 <__alt_data_end+0xfffcea34>
  10ead8:	1c400084 	addi	r17,r3,2
  10eadc:	1c000043 	ldbu	r16,1(r3)
  10eae0:	0029883a 	mov	r20,zero
  10eae4:	003f9d06 	br	10e95c <__alt_data_end+0xfffce95c>
  10eae8:	88800003 	ldbu	r2,0(r17)
  10eaec:	00c01604 	movi	r3,88
  10eaf0:	108037cc 	andi	r2,r2,223
  10eaf4:	10c00826 	beq	r2,r3,10eb18 <_strtol_r+0x23c>
  10eaf8:	07000204 	movi	fp,8
  10eafc:	003f9a06 	br	10e968 <__alt_data_end+0xfffce968>
  10eb00:	00800c04 	movi	r2,48
  10eb04:	80bf981e 	bne	r16,r2,10e968 <__alt_data_end+0xfffce968>
  10eb08:	88800003 	ldbu	r2,0(r17)
  10eb0c:	00c01604 	movi	r3,88
  10eb10:	108037cc 	andi	r2,r2,223
  10eb14:	10ff941e 	bne	r2,r3,10e968 <__alt_data_end+0xfffce968>
  10eb18:	04c00404 	movi	r19,16
  10eb1c:	8c000043 	ldbu	r16,1(r17)
  10eb20:	9839883a 	mov	fp,r19
  10eb24:	8c400084 	addi	r17,r17,2
  10eb28:	003f9006 	br	10e96c <__alt_data_end+0xfffce96c>
  10eb2c:	2005883a 	mov	r2,r4
  10eb30:	003fc006 	br	10ea34 <__alt_data_end+0xfffcea34>

0010eb34 <strtol>:
  10eb34:	008004b4 	movhi	r2,18
  10eb38:	10957404 	addi	r2,r2,21968
  10eb3c:	300f883a 	mov	r7,r6
  10eb40:	280d883a 	mov	r6,r5
  10eb44:	200b883a 	mov	r5,r4
  10eb48:	11000017 	ldw	r4,0(r2)
  10eb4c:	010e8dc1 	jmpi	10e8dc <_strtol_r>

0010eb50 <_strtoll_r>:
  10eb50:	008004b4 	movhi	r2,18
  10eb54:	deffef04 	addi	sp,sp,-68
  10eb58:	10957204 	addi	r2,r2,21960
  10eb5c:	dd800d15 	stw	r22,52(sp)
  10eb60:	15800017 	ldw	r22,0(r2)
  10eb64:	df000f15 	stw	fp,60(sp)
  10eb68:	d9000515 	stw	r4,20(sp)
  10eb6c:	dfc01015 	stw	ra,64(sp)
  10eb70:	ddc00e15 	stw	r23,56(sp)
  10eb74:	dd400c15 	stw	r21,48(sp)
  10eb78:	dd000b15 	stw	r20,44(sp)
  10eb7c:	dcc00a15 	stw	r19,40(sp)
  10eb80:	dc800915 	stw	r18,36(sp)
  10eb84:	dc400815 	stw	r17,32(sp)
  10eb88:	dc000715 	stw	r16,28(sp)
  10eb8c:	d9400415 	stw	r5,16(sp)
  10eb90:	d9800215 	stw	r6,8(sp)
  10eb94:	3839883a 	mov	fp,r7
  10eb98:	2809883a 	mov	r4,r5
  10eb9c:	22000003 	ldbu	r8,0(r4)
  10eba0:	24400044 	addi	r17,r4,1
  10eba4:	2007883a 	mov	r3,r4
  10eba8:	b205883a 	add	r2,r22,r8
  10ebac:	10800043 	ldbu	r2,1(r2)
  10ebb0:	8809883a 	mov	r4,r17
  10ebb4:	1080020c 	andi	r2,r2,8
  10ebb8:	103ff81e 	bne	r2,zero,10eb9c <__alt_data_end+0xfffceb9c>
  10ebbc:	00800b44 	movi	r2,45
  10ebc0:	40807e26 	beq	r8,r2,10edbc <_strtoll_r+0x26c>
  10ebc4:	00800ac4 	movi	r2,43
  10ebc8:	40808126 	beq	r8,r2,10edd0 <_strtoll_r+0x280>
  10ebcc:	d8000115 	stw	zero,4(sp)
  10ebd0:	e0000b26 	beq	fp,zero,10ec00 <_strtoll_r+0xb0>
  10ebd4:	00800404 	movi	r2,16
  10ebd8:	e0808926 	beq	fp,r2,10ee00 <_strtoll_r+0x2b0>
  10ebdc:	e00bd7fa 	srai	r5,fp,31
  10ebe0:	d9000117 	ldw	r4,4(sp)
  10ebe4:	e025883a 	mov	r18,fp
  10ebe8:	d9400015 	stw	r5,0(sp)
  10ebec:	20000b1e 	bne	r4,zero,10ec1c <_strtoll_r+0xcc>
  10ebf0:	04200034 	movhi	r16,32768
  10ebf4:	843fffc4 	addi	r16,r16,-1
  10ebf8:	053fffc4 	movi	r20,-1
  10ebfc:	00000906 	br	10ec24 <_strtoll_r+0xd4>
  10ec00:	00800c04 	movi	r2,48
  10ec04:	40807626 	beq	r8,r2,10ede0 <_strtoll_r+0x290>
  10ec08:	04800284 	movi	r18,10
  10ec0c:	d8000015 	stw	zero,0(sp)
  10ec10:	9039883a 	mov	fp,r18
  10ec14:	d9000117 	ldw	r4,4(sp)
  10ec18:	203ff526 	beq	r4,zero,10ebf0 <__alt_data_end+0xfffcebf0>
  10ec1c:	0029883a 	mov	r20,zero
  10ec20:	04200034 	movhi	r16,32768
  10ec24:	d9c00017 	ldw	r7,0(sp)
  10ec28:	a009883a 	mov	r4,r20
  10ec2c:	800b883a 	mov	r5,r16
  10ec30:	900d883a 	mov	r6,r18
  10ec34:	da000615 	stw	r8,24(sp)
  10ec38:	01152840 	call	115284 <__umoddi3>
  10ec3c:	d9c00017 	ldw	r7,0(sp)
  10ec40:	a009883a 	mov	r4,r20
  10ec44:	800b883a 	mov	r5,r16
  10ec48:	900d883a 	mov	r6,r18
  10ec4c:	d8800315 	stw	r2,12(sp)
  10ec50:	0114c880 	call	114c88 <__udivdi3>
  10ec54:	da000617 	ldw	r8,24(sp)
  10ec58:	1829883a 	mov	r20,r3
  10ec5c:	882f883a 	mov	r23,r17
  10ec60:	b207883a 	add	r3,r22,r8
  10ec64:	19800043 	ldbu	r6,1(r3)
  10ec68:	1021883a 	mov	r16,r2
  10ec6c:	000f883a 	mov	r7,zero
  10ec70:	30c0010c 	andi	r3,r6,4
  10ec74:	0009883a 	mov	r4,zero
  10ec78:	000b883a 	mov	r5,zero
  10ec7c:	04400044 	movi	r17,1
  10ec80:	057fffc4 	movi	r21,-1
  10ec84:	18000d26 	beq	r3,zero,10ecbc <_strtoll_r+0x16c>
  10ec88:	44fff404 	addi	r19,r8,-48
  10ec8c:	9f00110e 	bge	r19,fp,10ecd4 <_strtoll_r+0x184>
  10ec90:	3d400426 	beq	r7,r21,10eca4 <_strtoll_r+0x154>
  10ec94:	a1400236 	bltu	r20,r5,10eca0 <_strtoll_r+0x150>
  10ec98:	2d002a1e 	bne	r5,r20,10ed44 <_strtoll_r+0x1f4>
  10ec9c:	8100292e 	bgeu	r16,r4,10ed44 <_strtoll_r+0x1f4>
  10eca0:	01ffffc4 	movi	r7,-1
  10eca4:	ba000003 	ldbu	r8,0(r23)
  10eca8:	bdc00044 	addi	r23,r23,1
  10ecac:	b207883a 	add	r3,r22,r8
  10ecb0:	19800043 	ldbu	r6,1(r3)
  10ecb4:	30c0010c 	andi	r3,r6,4
  10ecb8:	183ff31e 	bne	r3,zero,10ec88 <__alt_data_end+0xfffcec88>
  10ecbc:	318000cc 	andi	r6,r6,3
  10ecc0:	30000426 	beq	r6,zero,10ecd4 <_strtoll_r+0x184>
  10ecc4:	34402b26 	beq	r6,r17,10ed74 <_strtoll_r+0x224>
  10ecc8:	00c015c4 	movi	r3,87
  10eccc:	40e7c83a 	sub	r19,r8,r3
  10ecd0:	9f3fef16 	blt	r19,fp,10ec90 <__alt_data_end+0xfffcec90>
  10ecd4:	00bfffc4 	movi	r2,-1
  10ecd8:	38802c26 	beq	r7,r2,10ed8c <_strtoll_r+0x23c>
  10ecdc:	d8800117 	ldw	r2,4(sp)
  10ece0:	10000426 	beq	r2,zero,10ecf4 <_strtoll_r+0x1a4>
  10ece4:	0109c83a 	sub	r4,zero,r4
  10ece8:	2004c03a 	cmpne	r2,r4,zero
  10ecec:	0151c83a 	sub	r8,zero,r5
  10ecf0:	408bc83a 	sub	r5,r8,r2
  10ecf4:	d8800217 	ldw	r2,8(sp)
  10ecf8:	10005026 	beq	r2,zero,10ee3c <_strtoll_r+0x2ec>
  10ecfc:	2005883a 	mov	r2,r4
  10ed00:	2807883a 	mov	r3,r5
  10ed04:	38002b1e 	bne	r7,zero,10edb4 <_strtoll_r+0x264>
  10ed08:	dd800417 	ldw	r22,16(sp)
  10ed0c:	d9000217 	ldw	r4,8(sp)
  10ed10:	25800015 	stw	r22,0(r4)
  10ed14:	dfc01017 	ldw	ra,64(sp)
  10ed18:	df000f17 	ldw	fp,60(sp)
  10ed1c:	ddc00e17 	ldw	r23,56(sp)
  10ed20:	dd800d17 	ldw	r22,52(sp)
  10ed24:	dd400c17 	ldw	r21,48(sp)
  10ed28:	dd000b17 	ldw	r20,44(sp)
  10ed2c:	dcc00a17 	ldw	r19,40(sp)
  10ed30:	dc800917 	ldw	r18,36(sp)
  10ed34:	dc400817 	ldw	r17,32(sp)
  10ed38:	dc000717 	ldw	r16,28(sp)
  10ed3c:	dec01104 	addi	sp,sp,68
  10ed40:	f800283a 	ret
  10ed44:	24000d26 	beq	r4,r16,10ed7c <_strtoll_r+0x22c>
  10ed48:	d9c00017 	ldw	r7,0(sp)
  10ed4c:	900d883a 	mov	r6,r18
  10ed50:	0114b080 	call	114b08 <__muldi3>
  10ed54:	980bd7fa 	srai	r5,r19,31
  10ed58:	9885883a 	add	r2,r19,r2
  10ed5c:	14d1803a 	cmpltu	r8,r2,r19
  10ed60:	28c7883a 	add	r3,r5,r3
  10ed64:	1009883a 	mov	r4,r2
  10ed68:	40cb883a 	add	r5,r8,r3
  10ed6c:	01c00044 	movi	r7,1
  10ed70:	003fcc06 	br	10eca4 <__alt_data_end+0xfffceca4>
  10ed74:	00c00dc4 	movi	r3,55
  10ed78:	003fd406 	br	10eccc <__alt_data_end+0xfffceccc>
  10ed7c:	2d3ff21e 	bne	r5,r20,10ed48 <__alt_data_end+0xfffced48>
  10ed80:	d8800317 	ldw	r2,12(sp)
  10ed84:	14ffc616 	blt	r2,r19,10eca0 <__alt_data_end+0xfffceca0>
  10ed88:	003fef06 	br	10ed48 <__alt_data_end+0xfffced48>
  10ed8c:	d9000117 	ldw	r4,4(sp)
  10ed90:	2000271e 	bne	r4,zero,10ee30 <_strtoll_r+0x2e0>
  10ed94:	00e00034 	movhi	r3,32768
  10ed98:	18ffffc4 	addi	r3,r3,-1
  10ed9c:	3805883a 	mov	r2,r7
  10eda0:	d9400517 	ldw	r5,20(sp)
  10eda4:	01000884 	movi	r4,34
  10eda8:	29000015 	stw	r4,0(r5)
  10edac:	d9000217 	ldw	r4,8(sp)
  10edb0:	203fd826 	beq	r4,zero,10ed14 <__alt_data_end+0xfffced14>
  10edb4:	bdbfffc4 	addi	r22,r23,-1
  10edb8:	003fd406 	br	10ed0c <__alt_data_end+0xfffced0c>
  10edbc:	00800044 	movi	r2,1
  10edc0:	1c400084 	addi	r17,r3,2
  10edc4:	1a000043 	ldbu	r8,1(r3)
  10edc8:	d8800115 	stw	r2,4(sp)
  10edcc:	003f8006 	br	10ebd0 <__alt_data_end+0xfffcebd0>
  10edd0:	1c400084 	addi	r17,r3,2
  10edd4:	1a000043 	ldbu	r8,1(r3)
  10edd8:	d8000115 	stw	zero,4(sp)
  10eddc:	003f7c06 	br	10ebd0 <__alt_data_end+0xfffcebd0>
  10ede0:	88800003 	ldbu	r2,0(r17)
  10ede4:	00c01604 	movi	r3,88
  10ede8:	108037cc 	andi	r2,r2,223
  10edec:	10c00a26 	beq	r2,r3,10ee18 <_strtoll_r+0x2c8>
  10edf0:	04800204 	movi	r18,8
  10edf4:	d8000015 	stw	zero,0(sp)
  10edf8:	9039883a 	mov	fp,r18
  10edfc:	003f8506 	br	10ec14 <__alt_data_end+0xfffcec14>
  10ee00:	00800c04 	movi	r2,48
  10ee04:	4080101e 	bne	r8,r2,10ee48 <_strtoll_r+0x2f8>
  10ee08:	88800003 	ldbu	r2,0(r17)
  10ee0c:	00c01604 	movi	r3,88
  10ee10:	108037cc 	andi	r2,r2,223
  10ee14:	10c00c1e 	bne	r2,r3,10ee48 <_strtoll_r+0x2f8>
  10ee18:	04800404 	movi	r18,16
  10ee1c:	8a000043 	ldbu	r8,1(r17)
  10ee20:	d8000015 	stw	zero,0(sp)
  10ee24:	8c400084 	addi	r17,r17,2
  10ee28:	9039883a 	mov	fp,r18
  10ee2c:	003f7906 	br	10ec14 <__alt_data_end+0xfffcec14>
  10ee30:	0005883a 	mov	r2,zero
  10ee34:	00e00034 	movhi	r3,32768
  10ee38:	003fd906 	br	10eda0 <__alt_data_end+0xfffceda0>
  10ee3c:	2005883a 	mov	r2,r4
  10ee40:	2807883a 	mov	r3,r5
  10ee44:	003fb306 	br	10ed14 <__alt_data_end+0xfffced14>
  10ee48:	e025883a 	mov	r18,fp
  10ee4c:	d8000015 	stw	zero,0(sp)
  10ee50:	003f7006 	br	10ec14 <__alt_data_end+0xfffcec14>

0010ee54 <_strtoul_r>:
  10ee54:	008004b4 	movhi	r2,18
  10ee58:	defff204 	addi	sp,sp,-56
  10ee5c:	10957204 	addi	r2,r2,21960
  10ee60:	dd800a15 	stw	r22,40(sp)
  10ee64:	15800017 	ldw	r22,0(r2)
  10ee68:	df000c15 	stw	fp,48(sp)
  10ee6c:	dd400915 	stw	r21,36(sp)
  10ee70:	d9000315 	stw	r4,12(sp)
  10ee74:	dfc00d15 	stw	ra,52(sp)
  10ee78:	ddc00b15 	stw	r23,44(sp)
  10ee7c:	dd000815 	stw	r20,32(sp)
  10ee80:	dcc00715 	stw	r19,28(sp)
  10ee84:	dc800615 	stw	r18,24(sp)
  10ee88:	dc400515 	stw	r17,20(sp)
  10ee8c:	dc000415 	stw	r16,16(sp)
  10ee90:	d9400015 	stw	r5,0(sp)
  10ee94:	302b883a 	mov	r21,r6
  10ee98:	3839883a 	mov	fp,r7
  10ee9c:	2809883a 	mov	r4,r5
  10eea0:	24000003 	ldbu	r16,0(r4)
  10eea4:	24400044 	addi	r17,r4,1
  10eea8:	2007883a 	mov	r3,r4
  10eeac:	b405883a 	add	r2,r22,r16
  10eeb0:	10800043 	ldbu	r2,1(r2)
  10eeb4:	8809883a 	mov	r4,r17
  10eeb8:	1080020c 	andi	r2,r2,8
  10eebc:	103ff81e 	bne	r2,zero,10eea0 <__alt_data_end+0xfffceea0>
  10eec0:	00800b44 	movi	r2,45
  10eec4:	80805826 	beq	r16,r2,10f028 <_strtoul_r+0x1d4>
  10eec8:	00800ac4 	movi	r2,43
  10eecc:	80805b26 	beq	r16,r2,10f03c <_strtoul_r+0x1e8>
  10eed0:	d8000215 	stw	zero,8(sp)
  10eed4:	e0000d26 	beq	fp,zero,10ef0c <_strtoul_r+0xb8>
  10eed8:	00800404 	movi	r2,16
  10eedc:	e0806626 	beq	fp,r2,10f078 <_strtoul_r+0x224>
  10eee0:	013fffc4 	movi	r4,-1
  10eee4:	e00b883a 	mov	r5,fp
  10eee8:	01159400 	call	115940 <__udivsi3>
  10eeec:	e00b883a 	mov	r5,fp
  10eef0:	013fffc4 	movi	r4,-1
  10eef4:	1025883a 	mov	r18,r2
  10eef8:	01159a40 	call	1159a4 <__umodsi3>
  10eefc:	d8800115 	stw	r2,4(sp)
  10ef00:	e027883a 	mov	r19,fp
  10ef04:	902f883a 	mov	r23,r18
  10ef08:	00000806 	br	10ef2c <_strtoul_r+0xd8>
  10ef0c:	00800c04 	movi	r2,48
  10ef10:	80804e26 	beq	r16,r2,10f04c <_strtoul_r+0x1f8>
  10ef14:	07000284 	movi	fp,10
  10ef18:	00c00144 	movi	r3,5
  10ef1c:	05c666b4 	movhi	r23,6554
  10ef20:	d8c00115 	stw	r3,4(sp)
  10ef24:	bde66644 	addi	r23,r23,-26215
  10ef28:	e027883a 	mov	r19,fp
  10ef2c:	b407883a 	add	r3,r22,r16
  10ef30:	18c00043 	ldbu	r3,1(r3)
  10ef34:	0005883a 	mov	r2,zero
  10ef38:	0009883a 	mov	r4,zero
  10ef3c:	1940010c 	andi	r5,r3,4
  10ef40:	04800044 	movi	r18,1
  10ef44:	053fffc4 	movi	r20,-1
  10ef48:	28000f26 	beq	r5,zero,10ef88 <_strtoul_r+0x134>
  10ef4c:	843ff404 	addi	r16,r16,-48
  10ef50:	8700130e 	bge	r16,fp,10efa0 <_strtoul_r+0x14c>
  10ef54:	15000626 	beq	r2,r20,10ef70 <_strtoul_r+0x11c>
  10ef58:	b9002836 	bltu	r23,r4,10effc <_strtoul_r+0x1a8>
  10ef5c:	25c02526 	beq	r4,r23,10eff4 <_strtoul_r+0x1a0>
  10ef60:	980b883a 	mov	r5,r19
  10ef64:	01159fc0 	call	1159fc <__mulsi3>
  10ef68:	8089883a 	add	r4,r16,r2
  10ef6c:	00800044 	movi	r2,1
  10ef70:	8c000003 	ldbu	r16,0(r17)
  10ef74:	8c400044 	addi	r17,r17,1
  10ef78:	b407883a 	add	r3,r22,r16
  10ef7c:	18c00043 	ldbu	r3,1(r3)
  10ef80:	1940010c 	andi	r5,r3,4
  10ef84:	283ff11e 	bne	r5,zero,10ef4c <__alt_data_end+0xfffcef4c>
  10ef88:	18c000cc 	andi	r3,r3,3
  10ef8c:	18000426 	beq	r3,zero,10efa0 <_strtoul_r+0x14c>
  10ef90:	1c801c26 	beq	r3,r18,10f004 <_strtoul_r+0x1b0>
  10ef94:	00c015c4 	movi	r3,87
  10ef98:	80e1c83a 	sub	r16,r16,r3
  10ef9c:	873fed16 	blt	r16,fp,10ef54 <__alt_data_end+0xfffcef54>
  10efa0:	10001a16 	blt	r2,zero,10f00c <_strtoul_r+0x1b8>
  10efa4:	d8c00217 	ldw	r3,8(sp)
  10efa8:	18000126 	beq	r3,zero,10efb0 <_strtoul_r+0x15c>
  10efac:	0109c83a 	sub	r4,zero,r4
  10efb0:	a8000326 	beq	r21,zero,10efc0 <_strtoul_r+0x16c>
  10efb4:	dd000017 	ldw	r20,0(sp)
  10efb8:	1000191e 	bne	r2,zero,10f020 <_strtoul_r+0x1cc>
  10efbc:	ad000015 	stw	r20,0(r21)
  10efc0:	2005883a 	mov	r2,r4
  10efc4:	dfc00d17 	ldw	ra,52(sp)
  10efc8:	df000c17 	ldw	fp,48(sp)
  10efcc:	ddc00b17 	ldw	r23,44(sp)
  10efd0:	dd800a17 	ldw	r22,40(sp)
  10efd4:	dd400917 	ldw	r21,36(sp)
  10efd8:	dd000817 	ldw	r20,32(sp)
  10efdc:	dcc00717 	ldw	r19,28(sp)
  10efe0:	dc800617 	ldw	r18,24(sp)
  10efe4:	dc400517 	ldw	r17,20(sp)
  10efe8:	dc000417 	ldw	r16,16(sp)
  10efec:	dec00e04 	addi	sp,sp,56
  10eff0:	f800283a 	ret
  10eff4:	d8c00117 	ldw	r3,4(sp)
  10eff8:	1c3fd90e 	bge	r3,r16,10ef60 <__alt_data_end+0xfffcef60>
  10effc:	00bfffc4 	movi	r2,-1
  10f000:	003fdb06 	br	10ef70 <__alt_data_end+0xfffcef70>
  10f004:	00c00dc4 	movi	r3,55
  10f008:	003fe306 	br	10ef98 <__alt_data_end+0xfffcef98>
  10f00c:	d8c00317 	ldw	r3,12(sp)
  10f010:	00800884 	movi	r2,34
  10f014:	013fffc4 	movi	r4,-1
  10f018:	18800015 	stw	r2,0(r3)
  10f01c:	a83fe826 	beq	r21,zero,10efc0 <__alt_data_end+0xfffcefc0>
  10f020:	8d3fffc4 	addi	r20,r17,-1
  10f024:	003fe506 	br	10efbc <__alt_data_end+0xfffcefbc>
  10f028:	1c400084 	addi	r17,r3,2
  10f02c:	1c000043 	ldbu	r16,1(r3)
  10f030:	00c00044 	movi	r3,1
  10f034:	d8c00215 	stw	r3,8(sp)
  10f038:	003fa606 	br	10eed4 <__alt_data_end+0xfffceed4>
  10f03c:	1c400084 	addi	r17,r3,2
  10f040:	1c000043 	ldbu	r16,1(r3)
  10f044:	d8000215 	stw	zero,8(sp)
  10f048:	003fa206 	br	10eed4 <__alt_data_end+0xfffceed4>
  10f04c:	88800003 	ldbu	r2,0(r17)
  10f050:	00c01604 	movi	r3,88
  10f054:	108037cc 	andi	r2,r2,223
  10f058:	10c00d26 	beq	r2,r3,10f090 <_strtoul_r+0x23c>
  10f05c:	07000204 	movi	fp,8
  10f060:	00c001c4 	movi	r3,7
  10f064:	05c80034 	movhi	r23,8192
  10f068:	d8c00115 	stw	r3,4(sp)
  10f06c:	bdffffc4 	addi	r23,r23,-1
  10f070:	e027883a 	mov	r19,fp
  10f074:	003fad06 	br	10ef2c <__alt_data_end+0xfffcef2c>
  10f078:	00800c04 	movi	r2,48
  10f07c:	80800d1e 	bne	r16,r2,10f0b4 <_strtoul_r+0x260>
  10f080:	88800003 	ldbu	r2,0(r17)
  10f084:	00c01604 	movi	r3,88
  10f088:	108037cc 	andi	r2,r2,223
  10f08c:	10c0091e 	bne	r2,r3,10f0b4 <_strtoul_r+0x260>
  10f090:	04c00404 	movi	r19,16
  10f094:	00c003c4 	movi	r3,15
  10f098:	04840034 	movhi	r18,4096
  10f09c:	8c000043 	ldbu	r16,1(r17)
  10f0a0:	d8c00115 	stw	r3,4(sp)
  10f0a4:	8c400084 	addi	r17,r17,2
  10f0a8:	94bfffc4 	addi	r18,r18,-1
  10f0ac:	9839883a 	mov	fp,r19
  10f0b0:	003f9406 	br	10ef04 <__alt_data_end+0xfffcef04>
  10f0b4:	00c003c4 	movi	r3,15
  10f0b8:	05c40034 	movhi	r23,4096
  10f0bc:	d8c00115 	stw	r3,4(sp)
  10f0c0:	bdffffc4 	addi	r23,r23,-1
  10f0c4:	e027883a 	mov	r19,fp
  10f0c8:	003f9806 	br	10ef2c <__alt_data_end+0xfffcef2c>

0010f0cc <strtoul>:
  10f0cc:	008004b4 	movhi	r2,18
  10f0d0:	10957404 	addi	r2,r2,21968
  10f0d4:	300f883a 	mov	r7,r6
  10f0d8:	280d883a 	mov	r6,r5
  10f0dc:	200b883a 	mov	r5,r4
  10f0e0:	11000017 	ldw	r4,0(r2)
  10f0e4:	010ee541 	jmpi	10ee54 <_strtoul_r>

0010f0e8 <_strtoull_r>:
  10f0e8:	008004b4 	movhi	r2,18
  10f0ec:	deffef04 	addi	sp,sp,-68
  10f0f0:	10957204 	addi	r2,r2,21960
  10f0f4:	dd800d15 	stw	r22,52(sp)
  10f0f8:	15800017 	ldw	r22,0(r2)
  10f0fc:	df000f15 	stw	fp,60(sp)
  10f100:	d9000515 	stw	r4,20(sp)
  10f104:	dfc01015 	stw	ra,64(sp)
  10f108:	ddc00e15 	stw	r23,56(sp)
  10f10c:	dd400c15 	stw	r21,48(sp)
  10f110:	dd000b15 	stw	r20,44(sp)
  10f114:	dcc00a15 	stw	r19,40(sp)
  10f118:	dc800915 	stw	r18,36(sp)
  10f11c:	dc400815 	stw	r17,32(sp)
  10f120:	dc000715 	stw	r16,28(sp)
  10f124:	d9400215 	stw	r5,8(sp)
  10f128:	d9800115 	stw	r6,4(sp)
  10f12c:	3839883a 	mov	fp,r7
  10f130:	2809883a 	mov	r4,r5
  10f134:	22000003 	ldbu	r8,0(r4)
  10f138:	24400044 	addi	r17,r4,1
  10f13c:	2007883a 	mov	r3,r4
  10f140:	b205883a 	add	r2,r22,r8
  10f144:	10800043 	ldbu	r2,1(r2)
  10f148:	8809883a 	mov	r4,r17
  10f14c:	1080020c 	andi	r2,r2,8
  10f150:	103ff81e 	bne	r2,zero,10f134 <__alt_data_end+0xfffcf134>
  10f154:	00800b44 	movi	r2,45
  10f158:	40807726 	beq	r8,r2,10f338 <_strtoull_r+0x250>
  10f15c:	00800ac4 	movi	r2,43
  10f160:	40807a26 	beq	r8,r2,10f34c <_strtoull_r+0x264>
  10f164:	d8000415 	stw	zero,16(sp)
  10f168:	e0001426 	beq	fp,zero,10f1bc <_strtoull_r+0xd4>
  10f16c:	00800404 	movi	r2,16
  10f170:	e0808826 	beq	fp,r2,10f394 <_strtoull_r+0x2ac>
  10f174:	e025d7fa 	srai	r18,fp,31
  10f178:	013fffc4 	movi	r4,-1
  10f17c:	200b883a 	mov	r5,r4
  10f180:	e00d883a 	mov	r6,fp
  10f184:	900f883a 	mov	r7,r18
  10f188:	da000615 	stw	r8,24(sp)
  10f18c:	0114c880 	call	114c88 <__udivdi3>
  10f190:	013fffc4 	movi	r4,-1
  10f194:	e00d883a 	mov	r6,fp
  10f198:	900f883a 	mov	r7,r18
  10f19c:	200b883a 	mov	r5,r4
  10f1a0:	1021883a 	mov	r16,r2
  10f1a4:	182f883a 	mov	r23,r3
  10f1a8:	01152840 	call	115284 <__umoddi3>
  10f1ac:	d8800315 	stw	r2,12(sp)
  10f1b0:	df000015 	stw	fp,0(sp)
  10f1b4:	da000617 	ldw	r8,24(sp)
  10f1b8:	00000c06 	br	10f1ec <_strtoull_r+0x104>
  10f1bc:	00800c04 	movi	r2,48
  10f1c0:	40806626 	beq	r8,r2,10f35c <_strtoull_r+0x274>
  10f1c4:	00800284 	movi	r2,10
  10f1c8:	00c00144 	movi	r3,5
  10f1cc:	042666b4 	movhi	r16,39322
  10f1d0:	05c666b4 	movhi	r23,6554
  10f1d4:	d8800015 	stw	r2,0(sp)
  10f1d8:	d8c00315 	stw	r3,12(sp)
  10f1dc:	84266644 	addi	r16,r16,-26215
  10f1e0:	bde66644 	addi	r23,r23,-26215
  10f1e4:	0025883a 	mov	r18,zero
  10f1e8:	1039883a 	mov	fp,r2
  10f1ec:	b205883a 	add	r2,r22,r8
  10f1f0:	11800043 	ldbu	r6,1(r2)
  10f1f4:	882b883a 	mov	r21,r17
  10f1f8:	000f883a 	mov	r7,zero
  10f1fc:	3080010c 	andi	r2,r6,4
  10f200:	0009883a 	mov	r4,zero
  10f204:	000b883a 	mov	r5,zero
  10f208:	04400044 	movi	r17,1
  10f20c:	053fffc4 	movi	r20,-1
  10f210:	10000d26 	beq	r2,zero,10f248 <_strtoull_r+0x160>
  10f214:	44fff404 	addi	r19,r8,-48
  10f218:	9f00110e 	bge	r19,fp,10f260 <_strtoull_r+0x178>
  10f21c:	3d000426 	beq	r7,r20,10f230 <_strtoull_r+0x148>
  10f220:	b9400236 	bltu	r23,r5,10f22c <_strtoull_r+0x144>
  10f224:	2dc0291e 	bne	r5,r23,10f2cc <_strtoull_r+0x1e4>
  10f228:	8100282e 	bgeu	r16,r4,10f2cc <_strtoull_r+0x1e4>
  10f22c:	01ffffc4 	movi	r7,-1
  10f230:	aa000003 	ldbu	r8,0(r21)
  10f234:	ad400044 	addi	r21,r21,1
  10f238:	b205883a 	add	r2,r22,r8
  10f23c:	11800043 	ldbu	r6,1(r2)
  10f240:	3080010c 	andi	r2,r6,4
  10f244:	103ff31e 	bne	r2,zero,10f214 <__alt_data_end+0xfffcf214>
  10f248:	318000cc 	andi	r6,r6,3
  10f24c:	30000426 	beq	r6,zero,10f260 <_strtoull_r+0x178>
  10f250:	34402a26 	beq	r6,r17,10f2fc <_strtoull_r+0x214>
  10f254:	00c015c4 	movi	r3,87
  10f258:	40e7c83a 	sub	r19,r8,r3
  10f25c:	9f3fef16 	blt	r19,fp,10f21c <__alt_data_end+0xfffcf21c>
  10f260:	38002c16 	blt	r7,zero,10f314 <_strtoull_r+0x22c>
  10f264:	d8c00417 	ldw	r3,16(sp)
  10f268:	18000426 	beq	r3,zero,10f27c <_strtoull_r+0x194>
  10f26c:	0109c83a 	sub	r4,zero,r4
  10f270:	2004c03a 	cmpne	r2,r4,zero
  10f274:	0151c83a 	sub	r8,zero,r5
  10f278:	408bc83a 	sub	r5,r8,r2
  10f27c:	d8800117 	ldw	r2,4(sp)
  10f280:	10000426 	beq	r2,zero,10f294 <_strtoull_r+0x1ac>
  10f284:	dd000217 	ldw	r20,8(sp)
  10f288:	3800291e 	bne	r7,zero,10f330 <_strtoull_r+0x248>
  10f28c:	d8c00117 	ldw	r3,4(sp)
  10f290:	1d000015 	stw	r20,0(r3)
  10f294:	2005883a 	mov	r2,r4
  10f298:	2807883a 	mov	r3,r5
  10f29c:	dfc01017 	ldw	ra,64(sp)
  10f2a0:	df000f17 	ldw	fp,60(sp)
  10f2a4:	ddc00e17 	ldw	r23,56(sp)
  10f2a8:	dd800d17 	ldw	r22,52(sp)
  10f2ac:	dd400c17 	ldw	r21,48(sp)
  10f2b0:	dd000b17 	ldw	r20,44(sp)
  10f2b4:	dcc00a17 	ldw	r19,40(sp)
  10f2b8:	dc800917 	ldw	r18,36(sp)
  10f2bc:	dc400817 	ldw	r17,32(sp)
  10f2c0:	dc000717 	ldw	r16,28(sp)
  10f2c4:	dec01104 	addi	sp,sp,68
  10f2c8:	f800283a 	ret
  10f2cc:	24000d26 	beq	r4,r16,10f304 <_strtoull_r+0x21c>
  10f2d0:	d9800017 	ldw	r6,0(sp)
  10f2d4:	900f883a 	mov	r7,r18
  10f2d8:	0114b080 	call	114b08 <__muldi3>
  10f2dc:	980bd7fa 	srai	r5,r19,31
  10f2e0:	9885883a 	add	r2,r19,r2
  10f2e4:	14d1803a 	cmpltu	r8,r2,r19
  10f2e8:	28c7883a 	add	r3,r5,r3
  10f2ec:	1009883a 	mov	r4,r2
  10f2f0:	40cb883a 	add	r5,r8,r3
  10f2f4:	01c00044 	movi	r7,1
  10f2f8:	003fcd06 	br	10f230 <__alt_data_end+0xfffcf230>
  10f2fc:	00c00dc4 	movi	r3,55
  10f300:	003fd506 	br	10f258 <__alt_data_end+0xfffcf258>
  10f304:	2dfff21e 	bne	r5,r23,10f2d0 <__alt_data_end+0xfffcf2d0>
  10f308:	d8c00317 	ldw	r3,12(sp)
  10f30c:	1cffc716 	blt	r3,r19,10f22c <__alt_data_end+0xfffcf22c>
  10f310:	003fef06 	br	10f2d0 <__alt_data_end+0xfffcf2d0>
  10f314:	d8c00517 	ldw	r3,20(sp)
  10f318:	00800884 	movi	r2,34
  10f31c:	013fffc4 	movi	r4,-1
  10f320:	18800015 	stw	r2,0(r3)
  10f324:	d8800117 	ldw	r2,4(sp)
  10f328:	200b883a 	mov	r5,r4
  10f32c:	103fd926 	beq	r2,zero,10f294 <__alt_data_end+0xfffcf294>
  10f330:	ad3fffc4 	addi	r20,r21,-1
  10f334:	003fd506 	br	10f28c <__alt_data_end+0xfffcf28c>
  10f338:	00800044 	movi	r2,1
  10f33c:	1c400084 	addi	r17,r3,2
  10f340:	1a000043 	ldbu	r8,1(r3)
  10f344:	d8800415 	stw	r2,16(sp)
  10f348:	003f8706 	br	10f168 <__alt_data_end+0xfffcf168>
  10f34c:	1c400084 	addi	r17,r3,2
  10f350:	1a000043 	ldbu	r8,1(r3)
  10f354:	d8000415 	stw	zero,16(sp)
  10f358:	003f8306 	br	10f168 <__alt_data_end+0xfffcf168>
  10f35c:	88800003 	ldbu	r2,0(r17)
  10f360:	00c01604 	movi	r3,88
  10f364:	108037cc 	andi	r2,r2,223
  10f368:	10c01026 	beq	r2,r3,10f3ac <_strtoull_r+0x2c4>
  10f36c:	00c00204 	movi	r3,8
  10f370:	008001c4 	movi	r2,7
  10f374:	043fffc4 	movi	r16,-1
  10f378:	05c80034 	movhi	r23,8192
  10f37c:	d8c00015 	stw	r3,0(sp)
  10f380:	d8800315 	stw	r2,12(sp)
  10f384:	bc2f883a 	add	r23,r23,r16
  10f388:	0025883a 	mov	r18,zero
  10f38c:	1839883a 	mov	fp,r3
  10f390:	003f9606 	br	10f1ec <__alt_data_end+0xfffcf1ec>
  10f394:	00800c04 	movi	r2,48
  10f398:	4080101e 	bne	r8,r2,10f3dc <_strtoull_r+0x2f4>
  10f39c:	88800003 	ldbu	r2,0(r17)
  10f3a0:	00c01604 	movi	r3,88
  10f3a4:	108037cc 	andi	r2,r2,223
  10f3a8:	10c0141e 	bne	r2,r3,10f3fc <_strtoull_r+0x314>
  10f3ac:	00c00404 	movi	r3,16
  10f3b0:	008003c4 	movi	r2,15
  10f3b4:	043fffc4 	movi	r16,-1
  10f3b8:	05c40034 	movhi	r23,4096
  10f3bc:	8a000043 	ldbu	r8,1(r17)
  10f3c0:	d8c00015 	stw	r3,0(sp)
  10f3c4:	d8800315 	stw	r2,12(sp)
  10f3c8:	8c400084 	addi	r17,r17,2
  10f3cc:	bc2f883a 	add	r23,r23,r16
  10f3d0:	0025883a 	mov	r18,zero
  10f3d4:	1839883a 	mov	fp,r3
  10f3d8:	003f8406 	br	10f1ec <__alt_data_end+0xfffcf1ec>
  10f3dc:	008003c4 	movi	r2,15
  10f3e0:	d8800315 	stw	r2,12(sp)
  10f3e4:	043fffc4 	movi	r16,-1
  10f3e8:	05c40034 	movhi	r23,4096
  10f3ec:	bc2f883a 	add	r23,r23,r16
  10f3f0:	df000015 	stw	fp,0(sp)
  10f3f4:	0025883a 	mov	r18,zero
  10f3f8:	003f7c06 	br	10f1ec <__alt_data_end+0xfffcf1ec>
  10f3fc:	00c003c4 	movi	r3,15
  10f400:	d8c00315 	stw	r3,12(sp)
  10f404:	003ff706 	br	10f3e4 <__alt_data_end+0xfffcf3e4>

0010f408 <__ssprint_r>:
  10f408:	30800217 	ldw	r2,8(r6)
  10f40c:	defff604 	addi	sp,sp,-40
  10f410:	dc800215 	stw	r18,8(sp)
  10f414:	dfc00915 	stw	ra,36(sp)
  10f418:	df000815 	stw	fp,32(sp)
  10f41c:	ddc00715 	stw	r23,28(sp)
  10f420:	dd800615 	stw	r22,24(sp)
  10f424:	dd400515 	stw	r21,20(sp)
  10f428:	dd000415 	stw	r20,16(sp)
  10f42c:	dcc00315 	stw	r19,12(sp)
  10f430:	dc400115 	stw	r17,4(sp)
  10f434:	dc000015 	stw	r16,0(sp)
  10f438:	3025883a 	mov	r18,r6
  10f43c:	10005826 	beq	r2,zero,10f5a0 <__ssprint_r+0x198>
  10f440:	2027883a 	mov	r19,r4
  10f444:	35c00017 	ldw	r23,0(r6)
  10f448:	29000017 	ldw	r4,0(r5)
  10f44c:	28800217 	ldw	r2,8(r5)
  10f450:	2823883a 	mov	r17,r5
  10f454:	0039883a 	mov	fp,zero
  10f458:	0021883a 	mov	r16,zero
  10f45c:	80003926 	beq	r16,zero,10f544 <__ssprint_r+0x13c>
  10f460:	102b883a 	mov	r21,r2
  10f464:	102d883a 	mov	r22,r2
  10f468:	80803a36 	bltu	r16,r2,10f554 <__ssprint_r+0x14c>
  10f46c:	88c0030b 	ldhu	r3,12(r17)
  10f470:	1881200c 	andi	r2,r3,1152
  10f474:	10002626 	beq	r2,zero,10f510 <__ssprint_r+0x108>
  10f478:	88800517 	ldw	r2,20(r17)
  10f47c:	89400417 	ldw	r5,16(r17)
  10f480:	81800044 	addi	r6,r16,1
  10f484:	108f883a 	add	r7,r2,r2
  10f488:	3885883a 	add	r2,r7,r2
  10f48c:	100ed7fa 	srli	r7,r2,31
  10f490:	216dc83a 	sub	r22,r4,r5
  10f494:	3589883a 	add	r4,r6,r22
  10f498:	3885883a 	add	r2,r7,r2
  10f49c:	102bd07a 	srai	r21,r2,1
  10f4a0:	a80d883a 	mov	r6,r21
  10f4a4:	a900022e 	bgeu	r21,r4,10f4b0 <__ssprint_r+0xa8>
  10f4a8:	202b883a 	mov	r21,r4
  10f4ac:	200d883a 	mov	r6,r4
  10f4b0:	18c1000c 	andi	r3,r3,1024
  10f4b4:	18002a26 	beq	r3,zero,10f560 <__ssprint_r+0x158>
  10f4b8:	300b883a 	mov	r5,r6
  10f4bc:	9809883a 	mov	r4,r19
  10f4c0:	010acf00 	call	10acf0 <_malloc_r>
  10f4c4:	1029883a 	mov	r20,r2
  10f4c8:	10002c26 	beq	r2,zero,10f57c <__ssprint_r+0x174>
  10f4cc:	89400417 	ldw	r5,16(r17)
  10f4d0:	b00d883a 	mov	r6,r22
  10f4d4:	1009883a 	mov	r4,r2
  10f4d8:	010157c0 	call	10157c <memcpy>
  10f4dc:	8880030b 	ldhu	r2,12(r17)
  10f4e0:	00fedfc4 	movi	r3,-1153
  10f4e4:	10c4703a 	and	r2,r2,r3
  10f4e8:	10802014 	ori	r2,r2,128
  10f4ec:	8880030d 	sth	r2,12(r17)
  10f4f0:	a589883a 	add	r4,r20,r22
  10f4f4:	adadc83a 	sub	r22,r21,r22
  10f4f8:	8d400515 	stw	r21,20(r17)
  10f4fc:	8d800215 	stw	r22,8(r17)
  10f500:	8d000415 	stw	r20,16(r17)
  10f504:	89000015 	stw	r4,0(r17)
  10f508:	802b883a 	mov	r21,r16
  10f50c:	802d883a 	mov	r22,r16
  10f510:	b00d883a 	mov	r6,r22
  10f514:	e00b883a 	mov	r5,fp
  10f518:	010b8040 	call	10b804 <memmove>
  10f51c:	88800217 	ldw	r2,8(r17)
  10f520:	89000017 	ldw	r4,0(r17)
  10f524:	90c00217 	ldw	r3,8(r18)
  10f528:	1545c83a 	sub	r2,r2,r21
  10f52c:	2589883a 	add	r4,r4,r22
  10f530:	88800215 	stw	r2,8(r17)
  10f534:	89000015 	stw	r4,0(r17)
  10f538:	1c21c83a 	sub	r16,r3,r16
  10f53c:	94000215 	stw	r16,8(r18)
  10f540:	80001726 	beq	r16,zero,10f5a0 <__ssprint_r+0x198>
  10f544:	bf000017 	ldw	fp,0(r23)
  10f548:	bc000117 	ldw	r16,4(r23)
  10f54c:	bdc00204 	addi	r23,r23,8
  10f550:	003fc206 	br	10f45c <__alt_data_end+0xfffcf45c>
  10f554:	802b883a 	mov	r21,r16
  10f558:	802d883a 	mov	r22,r16
  10f55c:	003fec06 	br	10f510 <__alt_data_end+0xfffcf510>
  10f560:	9809883a 	mov	r4,r19
  10f564:	010ca780 	call	10ca78 <_realloc_r>
  10f568:	1029883a 	mov	r20,r2
  10f56c:	103fe01e 	bne	r2,zero,10f4f0 <__alt_data_end+0xfffcf4f0>
  10f570:	89400417 	ldw	r5,16(r17)
  10f574:	9809883a 	mov	r4,r19
  10f578:	010a0680 	call	10a068 <_free_r>
  10f57c:	88c0030b 	ldhu	r3,12(r17)
  10f580:	00800304 	movi	r2,12
  10f584:	98800015 	stw	r2,0(r19)
  10f588:	18c01014 	ori	r3,r3,64
  10f58c:	88c0030d 	sth	r3,12(r17)
  10f590:	00bfffc4 	movi	r2,-1
  10f594:	90000215 	stw	zero,8(r18)
  10f598:	90000115 	stw	zero,4(r18)
  10f59c:	00000206 	br	10f5a8 <__ssprint_r+0x1a0>
  10f5a0:	90000115 	stw	zero,4(r18)
  10f5a4:	0005883a 	mov	r2,zero
  10f5a8:	dfc00917 	ldw	ra,36(sp)
  10f5ac:	df000817 	ldw	fp,32(sp)
  10f5b0:	ddc00717 	ldw	r23,28(sp)
  10f5b4:	dd800617 	ldw	r22,24(sp)
  10f5b8:	dd400517 	ldw	r21,20(sp)
  10f5bc:	dd000417 	ldw	r20,16(sp)
  10f5c0:	dcc00317 	ldw	r19,12(sp)
  10f5c4:	dc800217 	ldw	r18,8(sp)
  10f5c8:	dc400117 	ldw	r17,4(sp)
  10f5cc:	dc000017 	ldw	r16,0(sp)
  10f5d0:	dec00a04 	addi	sp,sp,40
  10f5d4:	f800283a 	ret

0010f5d8 <___svfiprintf_internal_r>:
  10f5d8:	2880030b 	ldhu	r2,12(r5)
  10f5dc:	deffc804 	addi	sp,sp,-224
  10f5e0:	dcc03115 	stw	r19,196(sp)
  10f5e4:	dfc03715 	stw	ra,220(sp)
  10f5e8:	df003615 	stw	fp,216(sp)
  10f5ec:	ddc03515 	stw	r23,212(sp)
  10f5f0:	dd803415 	stw	r22,208(sp)
  10f5f4:	dd403315 	stw	r21,204(sp)
  10f5f8:	dd003215 	stw	r20,200(sp)
  10f5fc:	dc803015 	stw	r18,192(sp)
  10f600:	dc402f15 	stw	r17,188(sp)
  10f604:	dc002e15 	stw	r16,184(sp)
  10f608:	d9402315 	stw	r5,140(sp)
  10f60c:	d9002715 	stw	r4,156(sp)
  10f610:	1080200c 	andi	r2,r2,128
  10f614:	d9c02415 	stw	r7,144(sp)
  10f618:	3027883a 	mov	r19,r6
  10f61c:	10000226 	beq	r2,zero,10f628 <___svfiprintf_internal_r+0x50>
  10f620:	28800417 	ldw	r2,16(r5)
  10f624:	10046d26 	beq	r2,zero,1107dc <___svfiprintf_internal_r+0x1204>
  10f628:	d8801a04 	addi	r2,sp,104
  10f62c:	d8c019c4 	addi	r3,sp,103
  10f630:	058004b4 	movhi	r22,18
  10f634:	10c9c83a 	sub	r4,r2,r3
  10f638:	b58dbc04 	addi	r22,r22,14064
  10f63c:	d8801e15 	stw	r2,120(sp)
  10f640:	d8c01f15 	stw	r3,124(sp)
  10f644:	dec01a15 	stw	sp,104(sp)
  10f648:	d8001c15 	stw	zero,112(sp)
  10f64c:	d8001b15 	stw	zero,108(sp)
  10f650:	d811883a 	mov	r8,sp
  10f654:	d8002915 	stw	zero,164(sp)
  10f658:	d8002615 	stw	zero,152(sp)
  10f65c:	d9002c15 	stw	r4,176(sp)
  10f660:	98800007 	ldb	r2,0(r19)
  10f664:	10031426 	beq	r2,zero,1102b8 <___svfiprintf_internal_r+0xce0>
  10f668:	00c00944 	movi	r3,37
  10f66c:	9825883a 	mov	r18,r19
  10f670:	10c0021e 	bne	r2,r3,10f67c <___svfiprintf_internal_r+0xa4>
  10f674:	00001406 	br	10f6c8 <___svfiprintf_internal_r+0xf0>
  10f678:	10c00326 	beq	r2,r3,10f688 <___svfiprintf_internal_r+0xb0>
  10f67c:	94800044 	addi	r18,r18,1
  10f680:	90800007 	ldb	r2,0(r18)
  10f684:	103ffc1e 	bne	r2,zero,10f678 <__alt_data_end+0xfffcf678>
  10f688:	94e1c83a 	sub	r16,r18,r19
  10f68c:	80000e26 	beq	r16,zero,10f6c8 <___svfiprintf_internal_r+0xf0>
  10f690:	d8c01c17 	ldw	r3,112(sp)
  10f694:	d8801b17 	ldw	r2,108(sp)
  10f698:	44c00015 	stw	r19,0(r8)
  10f69c:	1c07883a 	add	r3,r3,r16
  10f6a0:	10800044 	addi	r2,r2,1
  10f6a4:	d8c01c15 	stw	r3,112(sp)
  10f6a8:	44000115 	stw	r16,4(r8)
  10f6ac:	d8801b15 	stw	r2,108(sp)
  10f6b0:	00c001c4 	movi	r3,7
  10f6b4:	18835c16 	blt	r3,r2,110428 <___svfiprintf_internal_r+0xe50>
  10f6b8:	42000204 	addi	r8,r8,8
  10f6bc:	d9402617 	ldw	r5,152(sp)
  10f6c0:	2c0b883a 	add	r5,r5,r16
  10f6c4:	d9402615 	stw	r5,152(sp)
  10f6c8:	90800007 	ldb	r2,0(r18)
  10f6cc:	1002fc26 	beq	r2,zero,1102c0 <___svfiprintf_internal_r+0xce8>
  10f6d0:	0023883a 	mov	r17,zero
  10f6d4:	00bfffc4 	movi	r2,-1
  10f6d8:	0021883a 	mov	r16,zero
  10f6dc:	94c00044 	addi	r19,r18,1
  10f6e0:	90c00047 	ldb	r3,1(r18)
  10f6e4:	dc402105 	stb	r17,132(sp)
  10f6e8:	d8001d85 	stb	zero,118(sp)
  10f6ec:	002b883a 	mov	r21,zero
  10f6f0:	d8802015 	stw	r2,128(sp)
  10f6f4:	d8002515 	stw	zero,148(sp)
  10f6f8:	04801604 	movi	r18,88
  10f6fc:	05000244 	movi	r20,9
  10f700:	402f883a 	mov	r23,r8
  10f704:	8023883a 	mov	r17,r16
  10f708:	9cc00044 	addi	r19,r19,1
  10f70c:	18bff804 	addi	r2,r3,-32
  10f710:	9081fb36 	bltu	r18,r2,10ff00 <___svfiprintf_internal_r+0x928>
  10f714:	100490ba 	slli	r2,r2,2
  10f718:	01000474 	movhi	r4,17
  10f71c:	213dcb04 	addi	r4,r4,-2260
  10f720:	1105883a 	add	r2,r2,r4
  10f724:	10800017 	ldw	r2,0(r2)
  10f728:	1000683a 	jmp	r2
  10f72c:	0010f92c 	andhi	zero,zero,17380
  10f730:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f734:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f738:	0010f920 	cmpeqi	zero,zero,17380
  10f73c:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f740:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f744:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f748:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f74c:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f750:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f754:	0010f890 	cmplti	zero,zero,17378
  10f758:	0010fa8c 	andi	zero,zero,17386
  10f75c:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f760:	0010f8b8 	rdprs	zero,zero,17378
  10f764:	0010ff3c 	xorhi	zero,zero,17404
  10f768:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f76c:	0010ff30 	cmpltui	zero,zero,17404
  10f770:	0010fec4 	movi	zero,17403
  10f774:	0010fec4 	movi	zero,17403
  10f778:	0010fec4 	movi	zero,17403
  10f77c:	0010fec4 	movi	zero,17403
  10f780:	0010fec4 	movi	zero,17403
  10f784:	0010fec4 	movi	zero,17403
  10f788:	0010fec4 	movi	zero,17403
  10f78c:	0010fec4 	movi	zero,17403
  10f790:	0010fec4 	movi	zero,17403
  10f794:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f798:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f79c:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f7a0:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f7a4:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f7a8:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f7ac:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f7b0:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f7b4:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f7b8:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f7bc:	0010fe48 	cmpgei	zero,zero,17401
  10f7c0:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f7c4:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f7c8:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f7cc:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f7d0:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f7d4:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f7d8:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f7dc:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f7e0:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f7e4:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f7e8:	0010fff8 	rdprs	zero,zero,17407
  10f7ec:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f7f0:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f7f4:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f7f8:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f7fc:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f800:	0010ff84 	movi	zero,17406
  10f804:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f808:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f80c:	0010fc84 	movi	zero,17394
  10f810:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f814:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f818:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f81c:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f820:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f824:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f828:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f82c:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f830:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f834:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f838:	0010fb50 	cmplti	zero,zero,17389
  10f83c:	0010fd34 	movhi	zero,17396
  10f840:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f844:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f848:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f84c:	0010fd28 	cmpgeui	zero,zero,17396
  10f850:	0010fd34 	movhi	zero,17396
  10f854:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f858:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f85c:	0010fd14 	movui	zero,17396
  10f860:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f864:	0010fcd4 	movui	zero,17395
  10f868:	0010faa0 	cmpeqi	zero,zero,17386
  10f86c:	0010f8c4 	movi	zero,17379
  10f870:	0010fe3c 	xorhi	zero,zero,17400
  10f874:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f878:	0010fde8 	cmpgeui	zero,zero,17399
  10f87c:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f880:	0010fa04 	movi	zero,17384
  10f884:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f888:	0010ff00 	call	10ff0 <OSCtxSw_SWITCH_PC+0x10fb0>
  10f88c:	0010f950 	cmplti	zero,zero,17381
  10f890:	d9002417 	ldw	r4,144(sp)
  10f894:	d9402417 	ldw	r5,144(sp)
  10f898:	21000017 	ldw	r4,0(r4)
  10f89c:	28800104 	addi	r2,r5,4
  10f8a0:	d9002515 	stw	r4,148(sp)
  10f8a4:	20032b0e 	bge	r4,zero,110554 <___svfiprintf_internal_r+0xf7c>
  10f8a8:	d8c02517 	ldw	r3,148(sp)
  10f8ac:	d8802415 	stw	r2,144(sp)
  10f8b0:	00c7c83a 	sub	r3,zero,r3
  10f8b4:	d8c02515 	stw	r3,148(sp)
  10f8b8:	8c400114 	ori	r17,r17,4
  10f8bc:	98c00007 	ldb	r3,0(r19)
  10f8c0:	003f9106 	br	10f708 <__alt_data_end+0xfffcf708>
  10f8c4:	00800c04 	movi	r2,48
  10f8c8:	d9402417 	ldw	r5,144(sp)
  10f8cc:	d9002017 	ldw	r4,128(sp)
  10f8d0:	d8801d05 	stb	r2,116(sp)
  10f8d4:	00801e04 	movi	r2,120
  10f8d8:	d8801d45 	stb	r2,117(sp)
  10f8dc:	d8001d85 	stb	zero,118(sp)
  10f8e0:	b811883a 	mov	r8,r23
  10f8e4:	28c00104 	addi	r3,r5,4
  10f8e8:	2c800017 	ldw	r18,0(r5)
  10f8ec:	0029883a 	mov	r20,zero
  10f8f0:	88800094 	ori	r2,r17,2
  10f8f4:	20036316 	blt	r4,zero,110684 <___svfiprintf_internal_r+0x10ac>
  10f8f8:	00bfdfc4 	movi	r2,-129
  10f8fc:	88a0703a 	and	r16,r17,r2
  10f900:	d8c02415 	stw	r3,144(sp)
  10f904:	84000094 	ori	r16,r16,2
  10f908:	90031c26 	beq	r18,zero,11057c <___svfiprintf_internal_r+0xfa4>
  10f90c:	014004b4 	movhi	r5,18
  10f910:	294c9004 	addi	r5,r5,12864
  10f914:	002b883a 	mov	r21,zero
  10f918:	d9402915 	stw	r5,164(sp)
  10f91c:	00002906 	br	10f9c4 <___svfiprintf_internal_r+0x3ec>
  10f920:	8c400054 	ori	r17,r17,1
  10f924:	98c00007 	ldb	r3,0(r19)
  10f928:	003f7706 	br	10f708 <__alt_data_end+0xfffcf708>
  10f92c:	a8803fcc 	andi	r2,r21,255
  10f930:	1080201c 	xori	r2,r2,128
  10f934:	10bfe004 	addi	r2,r2,-128
  10f938:	10032a1e 	bne	r2,zero,1105e4 <___svfiprintf_internal_r+0x100c>
  10f93c:	00c00044 	movi	r3,1
  10f940:	d8c02105 	stb	r3,132(sp)
  10f944:	05400804 	movi	r21,32
  10f948:	98c00007 	ldb	r3,0(r19)
  10f94c:	003f6e06 	br	10f708 <__alt_data_end+0xfffcf708>
  10f950:	8821883a 	mov	r16,r17
  10f954:	dc402103 	ldbu	r17,132(sp)
  10f958:	b811883a 	mov	r8,r23
  10f95c:	8c403fcc 	andi	r17,r17,255
  10f960:	8803f01e 	bne	r17,zero,110924 <___svfiprintf_internal_r+0x134c>
  10f964:	008004b4 	movhi	r2,18
  10f968:	108c9004 	addi	r2,r2,12864
  10f96c:	d8802915 	stw	r2,164(sp)
  10f970:	8080080c 	andi	r2,r16,32
  10f974:	1000cd26 	beq	r2,zero,10fcac <___svfiprintf_internal_r+0x6d4>
  10f978:	d9002417 	ldw	r4,144(sp)
  10f97c:	24800017 	ldw	r18,0(r4)
  10f980:	25000117 	ldw	r20,4(r4)
  10f984:	21000204 	addi	r4,r4,8
  10f988:	d9002415 	stw	r4,144(sp)
  10f98c:	8080004c 	andi	r2,r16,1
  10f990:	1002c726 	beq	r2,zero,1104b0 <___svfiprintf_internal_r+0xed8>
  10f994:	9504b03a 	or	r2,r18,r20
  10f998:	1003061e 	bne	r2,zero,1105b4 <___svfiprintf_internal_r+0xfdc>
  10f99c:	d9002017 	ldw	r4,128(sp)
  10f9a0:	d8001d85 	stb	zero,118(sp)
  10f9a4:	20033e16 	blt	r4,zero,1106a0 <___svfiprintf_internal_r+0x10c8>
  10f9a8:	00bfdfc4 	movi	r2,-129
  10f9ac:	80a0703a 	and	r16,r16,r2
  10f9b0:	d9402017 	ldw	r5,128(sp)
  10f9b4:	002b883a 	mov	r21,zero
  10f9b8:	28002826 	beq	r5,zero,10fa5c <___svfiprintf_internal_r+0x484>
  10f9bc:	0025883a 	mov	r18,zero
  10f9c0:	0029883a 	mov	r20,zero
  10f9c4:	d9002917 	ldw	r4,164(sp)
  10f9c8:	dc401a04 	addi	r17,sp,104
  10f9cc:	908003cc 	andi	r2,r18,15
  10f9d0:	a006973a 	slli	r3,r20,28
  10f9d4:	2085883a 	add	r2,r4,r2
  10f9d8:	9024d13a 	srli	r18,r18,4
  10f9dc:	10800003 	ldbu	r2,0(r2)
  10f9e0:	a028d13a 	srli	r20,r20,4
  10f9e4:	8c7fffc4 	addi	r17,r17,-1
  10f9e8:	1ca4b03a 	or	r18,r3,r18
  10f9ec:	88800005 	stb	r2,0(r17)
  10f9f0:	9504b03a 	or	r2,r18,r20
  10f9f4:	103ff51e 	bne	r2,zero,10f9cc <__alt_data_end+0xfffcf9cc>
  10f9f8:	d8801e17 	ldw	r2,120(sp)
  10f9fc:	1469c83a 	sub	r20,r2,r17
  10fa00:	00001906 	br	10fa68 <___svfiprintf_internal_r+0x490>
  10fa04:	8821883a 	mov	r16,r17
  10fa08:	dc402103 	ldbu	r17,132(sp)
  10fa0c:	b811883a 	mov	r8,r23
  10fa10:	8c403fcc 	andi	r17,r17,255
  10fa14:	8803d01e 	bne	r17,zero,110958 <___svfiprintf_internal_r+0x1380>
  10fa18:	8080080c 	andi	r2,r16,32
  10fa1c:	10016126 	beq	r2,zero,10ffa4 <___svfiprintf_internal_r+0x9cc>
  10fa20:	d9002417 	ldw	r4,144(sp)
  10fa24:	d9402017 	ldw	r5,128(sp)
  10fa28:	d8001d85 	stb	zero,118(sp)
  10fa2c:	20c00204 	addi	r3,r4,8
  10fa30:	24800017 	ldw	r18,0(r4)
  10fa34:	25000117 	ldw	r20,4(r4)
  10fa38:	28030f16 	blt	r5,zero,110678 <___svfiprintf_internal_r+0x10a0>
  10fa3c:	013fdfc4 	movi	r4,-129
  10fa40:	9504b03a 	or	r2,r18,r20
  10fa44:	d8c02415 	stw	r3,144(sp)
  10fa48:	8120703a 	and	r16,r16,r4
  10fa4c:	002b883a 	mov	r21,zero
  10fa50:	1000cd1e 	bne	r2,zero,10fd88 <___svfiprintf_internal_r+0x7b0>
  10fa54:	d8c02017 	ldw	r3,128(sp)
  10fa58:	1803141e 	bne	r3,zero,1106ac <___svfiprintf_internal_r+0x10d4>
  10fa5c:	d8002015 	stw	zero,128(sp)
  10fa60:	0029883a 	mov	r20,zero
  10fa64:	dc401a04 	addi	r17,sp,104
  10fa68:	dc802017 	ldw	r18,128(sp)
  10fa6c:	9500010e 	bge	r18,r20,10fa74 <___svfiprintf_internal_r+0x49c>
  10fa70:	a025883a 	mov	r18,r20
  10fa74:	ad403fcc 	andi	r21,r21,255
  10fa78:	ad40201c 	xori	r21,r21,128
  10fa7c:	ad7fe004 	addi	r21,r21,-128
  10fa80:	a8003f26 	beq	r21,zero,10fb80 <___svfiprintf_internal_r+0x5a8>
  10fa84:	94800044 	addi	r18,r18,1
  10fa88:	00003d06 	br	10fb80 <___svfiprintf_internal_r+0x5a8>
  10fa8c:	00c00044 	movi	r3,1
  10fa90:	d8c02105 	stb	r3,132(sp)
  10fa94:	05400ac4 	movi	r21,43
  10fa98:	98c00007 	ldb	r3,0(r19)
  10fa9c:	003f1a06 	br	10f708 <__alt_data_end+0xfffcf708>
  10faa0:	8821883a 	mov	r16,r17
  10faa4:	dc402103 	ldbu	r17,132(sp)
  10faa8:	b811883a 	mov	r8,r23
  10faac:	8c403fcc 	andi	r17,r17,255
  10fab0:	8803a71e 	bne	r17,zero,110950 <___svfiprintf_internal_r+0x1378>
  10fab4:	8080080c 	andi	r2,r16,32
  10fab8:	10015726 	beq	r2,zero,110018 <___svfiprintf_internal_r+0xa40>
  10fabc:	d8c02417 	ldw	r3,144(sp)
  10fac0:	d9002017 	ldw	r4,128(sp)
  10fac4:	d8001d85 	stb	zero,118(sp)
  10fac8:	18800204 	addi	r2,r3,8
  10facc:	1c800017 	ldw	r18,0(r3)
  10fad0:	1d000117 	ldw	r20,4(r3)
  10fad4:	2002db16 	blt	r4,zero,110644 <___svfiprintf_internal_r+0x106c>
  10fad8:	013fdfc4 	movi	r4,-129
  10fadc:	9506b03a 	or	r3,r18,r20
  10fae0:	d8802415 	stw	r2,144(sp)
  10fae4:	8120703a 	and	r16,r16,r4
  10fae8:	18015826 	beq	r3,zero,11004c <___svfiprintf_internal_r+0xa74>
  10faec:	002b883a 	mov	r21,zero
  10faf0:	dc401a04 	addi	r17,sp,104
  10faf4:	9006d0fa 	srli	r3,r18,3
  10faf8:	a008977a 	slli	r4,r20,29
  10fafc:	a028d0fa 	srli	r20,r20,3
  10fb00:	948001cc 	andi	r18,r18,7
  10fb04:	90800c04 	addi	r2,r18,48
  10fb08:	8c7fffc4 	addi	r17,r17,-1
  10fb0c:	20e4b03a 	or	r18,r4,r3
  10fb10:	88800005 	stb	r2,0(r17)
  10fb14:	9506b03a 	or	r3,r18,r20
  10fb18:	183ff61e 	bne	r3,zero,10faf4 <__alt_data_end+0xfffcfaf4>
  10fb1c:	80c0004c 	andi	r3,r16,1
  10fb20:	18028926 	beq	r3,zero,110548 <___svfiprintf_internal_r+0xf70>
  10fb24:	10803fcc 	andi	r2,r2,255
  10fb28:	1080201c 	xori	r2,r2,128
  10fb2c:	10bfe004 	addi	r2,r2,-128
  10fb30:	00c00c04 	movi	r3,48
  10fb34:	10ffb026 	beq	r2,r3,10f9f8 <__alt_data_end+0xfffcf9f8>
  10fb38:	88ffffc5 	stb	r3,-1(r17)
  10fb3c:	d8c01e17 	ldw	r3,120(sp)
  10fb40:	88bfffc4 	addi	r2,r17,-1
  10fb44:	1023883a 	mov	r17,r2
  10fb48:	18a9c83a 	sub	r20,r3,r2
  10fb4c:	003fc606 	br	10fa68 <__alt_data_end+0xfffcfa68>
  10fb50:	d8c02417 	ldw	r3,144(sp)
  10fb54:	04800044 	movi	r18,1
  10fb58:	8821883a 	mov	r16,r17
  10fb5c:	18800017 	ldw	r2,0(r3)
  10fb60:	18c00104 	addi	r3,r3,4
  10fb64:	b811883a 	mov	r8,r23
  10fb68:	d8001d85 	stb	zero,118(sp)
  10fb6c:	d8801005 	stb	r2,64(sp)
  10fb70:	d8c02415 	stw	r3,144(sp)
  10fb74:	9029883a 	mov	r20,r18
  10fb78:	dc401004 	addi	r17,sp,64
  10fb7c:	d8002015 	stw	zero,128(sp)
  10fb80:	80c0008c 	andi	r3,r16,2
  10fb84:	d8c02115 	stw	r3,132(sp)
  10fb88:	18000126 	beq	r3,zero,10fb90 <___svfiprintf_internal_r+0x5b8>
  10fb8c:	94800084 	addi	r18,r18,2
  10fb90:	80c0210c 	andi	r3,r16,132
  10fb94:	d8c02215 	stw	r3,136(sp)
  10fb98:	1801321e 	bne	r3,zero,110064 <___svfiprintf_internal_r+0xa8c>
  10fb9c:	d9002517 	ldw	r4,148(sp)
  10fba0:	24b9c83a 	sub	fp,r4,r18
  10fba4:	07012f0e 	bge	zero,fp,110064 <___svfiprintf_internal_r+0xa8c>
  10fba8:	02400404 	movi	r9,16
  10fbac:	d8c01c17 	ldw	r3,112(sp)
  10fbb0:	d8801b17 	ldw	r2,108(sp)
  10fbb4:	4f03250e 	bge	r9,fp,11084c <___svfiprintf_internal_r+0x1274>
  10fbb8:	010004b4 	movhi	r4,18
  10fbbc:	210dc004 	addi	r4,r4,14080
  10fbc0:	dc002a15 	stw	r16,168(sp)
  10fbc4:	dc402b15 	stw	r17,172(sp)
  10fbc8:	d9002815 	stw	r4,160(sp)
  10fbcc:	e023883a 	mov	r17,fp
  10fbd0:	482f883a 	mov	r23,r9
  10fbd4:	9839883a 	mov	fp,r19
  10fbd8:	054001c4 	movi	r21,7
  10fbdc:	9027883a 	mov	r19,r18
  10fbe0:	dc002717 	ldw	r16,156(sp)
  10fbe4:	dc802317 	ldw	r18,140(sp)
  10fbe8:	00000306 	br	10fbf8 <___svfiprintf_internal_r+0x620>
  10fbec:	8c7ffc04 	addi	r17,r17,-16
  10fbf0:	42000204 	addi	r8,r8,8
  10fbf4:	bc40130e 	bge	r23,r17,10fc44 <___svfiprintf_internal_r+0x66c>
  10fbf8:	014004b4 	movhi	r5,18
  10fbfc:	18c00404 	addi	r3,r3,16
  10fc00:	10800044 	addi	r2,r2,1
  10fc04:	294dc004 	addi	r5,r5,14080
  10fc08:	41400015 	stw	r5,0(r8)
  10fc0c:	45c00115 	stw	r23,4(r8)
  10fc10:	d8c01c15 	stw	r3,112(sp)
  10fc14:	d8801b15 	stw	r2,108(sp)
  10fc18:	a8bff40e 	bge	r21,r2,10fbec <__alt_data_end+0xfffcfbec>
  10fc1c:	d9801a04 	addi	r6,sp,104
  10fc20:	900b883a 	mov	r5,r18
  10fc24:	8009883a 	mov	r4,r16
  10fc28:	010f4080 	call	10f408 <__ssprint_r>
  10fc2c:	1001aa1e 	bne	r2,zero,1102d8 <___svfiprintf_internal_r+0xd00>
  10fc30:	8c7ffc04 	addi	r17,r17,-16
  10fc34:	d8c01c17 	ldw	r3,112(sp)
  10fc38:	d8801b17 	ldw	r2,108(sp)
  10fc3c:	d811883a 	mov	r8,sp
  10fc40:	bc7fed16 	blt	r23,r17,10fbf8 <__alt_data_end+0xfffcfbf8>
  10fc44:	9825883a 	mov	r18,r19
  10fc48:	dc002a17 	ldw	r16,168(sp)
  10fc4c:	e027883a 	mov	r19,fp
  10fc50:	8839883a 	mov	fp,r17
  10fc54:	dc402b17 	ldw	r17,172(sp)
  10fc58:	d9002817 	ldw	r4,160(sp)
  10fc5c:	e0c7883a 	add	r3,fp,r3
  10fc60:	10800044 	addi	r2,r2,1
  10fc64:	41000015 	stw	r4,0(r8)
  10fc68:	47000115 	stw	fp,4(r8)
  10fc6c:	d8c01c15 	stw	r3,112(sp)
  10fc70:	d8801b15 	stw	r2,108(sp)
  10fc74:	010001c4 	movi	r4,7
  10fc78:	20821616 	blt	r4,r2,1104d4 <___svfiprintf_internal_r+0xefc>
  10fc7c:	42000204 	addi	r8,r8,8
  10fc80:	0000fa06 	br	11006c <___svfiprintf_internal_r+0xa94>
  10fc84:	8821883a 	mov	r16,r17
  10fc88:	dc402103 	ldbu	r17,132(sp)
  10fc8c:	b811883a 	mov	r8,r23
  10fc90:	8c403fcc 	andi	r17,r17,255
  10fc94:	8803361e 	bne	r17,zero,110970 <___svfiprintf_internal_r+0x1398>
  10fc98:	014004b4 	movhi	r5,18
  10fc9c:	294c8b04 	addi	r5,r5,12844
  10fca0:	d9402915 	stw	r5,164(sp)
  10fca4:	8080080c 	andi	r2,r16,32
  10fca8:	103f331e 	bne	r2,zero,10f978 <__alt_data_end+0xfffcf978>
  10fcac:	8080040c 	andi	r2,r16,16
  10fcb0:	1002551e 	bne	r2,zero,110608 <___svfiprintf_internal_r+0x1030>
  10fcb4:	8080100c 	andi	r2,r16,64
  10fcb8:	1002a626 	beq	r2,zero,110754 <___svfiprintf_internal_r+0x117c>
  10fcbc:	d8802417 	ldw	r2,144(sp)
  10fcc0:	0029883a 	mov	r20,zero
  10fcc4:	1480000b 	ldhu	r18,0(r2)
  10fcc8:	10800104 	addi	r2,r2,4
  10fccc:	d8802415 	stw	r2,144(sp)
  10fcd0:	003f2e06 	br	10f98c <__alt_data_end+0xfffcf98c>
  10fcd4:	8821883a 	mov	r16,r17
  10fcd8:	dc402103 	ldbu	r17,132(sp)
  10fcdc:	b811883a 	mov	r8,r23
  10fce0:	8c403fcc 	andi	r17,r17,255
  10fce4:	88030b1e 	bne	r17,zero,110914 <___svfiprintf_internal_r+0x133c>
  10fce8:	8080080c 	andi	r2,r16,32
  10fcec:	1002271e 	bne	r2,zero,11058c <___svfiprintf_internal_r+0xfb4>
  10fcf0:	8080040c 	andi	r2,r16,16
  10fcf4:	10028e26 	beq	r2,zero,110730 <___svfiprintf_internal_r+0x1158>
  10fcf8:	d8c02417 	ldw	r3,144(sp)
  10fcfc:	d9002617 	ldw	r4,152(sp)
  10fd00:	18800017 	ldw	r2,0(r3)
  10fd04:	18c00104 	addi	r3,r3,4
  10fd08:	d8c02415 	stw	r3,144(sp)
  10fd0c:	11000015 	stw	r4,0(r2)
  10fd10:	003e5306 	br	10f660 <__alt_data_end+0xfffcf660>
  10fd14:	98c00007 	ldb	r3,0(r19)
  10fd18:	01401b04 	movi	r5,108
  10fd1c:	19424f26 	beq	r3,r5,11065c <___svfiprintf_internal_r+0x1084>
  10fd20:	8c400414 	ori	r17,r17,16
  10fd24:	003e7806 	br	10f708 <__alt_data_end+0xfffcf708>
  10fd28:	8c401014 	ori	r17,r17,64
  10fd2c:	98c00007 	ldb	r3,0(r19)
  10fd30:	003e7506 	br	10f708 <__alt_data_end+0xfffcf708>
  10fd34:	8821883a 	mov	r16,r17
  10fd38:	dc402103 	ldbu	r17,132(sp)
  10fd3c:	b811883a 	mov	r8,r23
  10fd40:	8c403fcc 	andi	r17,r17,255
  10fd44:	8802fe1e 	bne	r17,zero,110940 <___svfiprintf_internal_r+0x1368>
  10fd48:	8080080c 	andi	r2,r16,32
  10fd4c:	10004626 	beq	r2,zero,10fe68 <___svfiprintf_internal_r+0x890>
  10fd50:	d9002417 	ldw	r4,144(sp)
  10fd54:	20800117 	ldw	r2,4(r4)
  10fd58:	24800017 	ldw	r18,0(r4)
  10fd5c:	21000204 	addi	r4,r4,8
  10fd60:	d9002415 	stw	r4,144(sp)
  10fd64:	1029883a 	mov	r20,r2
  10fd68:	10004a16 	blt	r2,zero,10fe94 <___svfiprintf_internal_r+0x8bc>
  10fd6c:	d9002017 	ldw	r4,128(sp)
  10fd70:	dd401d83 	ldbu	r21,118(sp)
  10fd74:	2001eb16 	blt	r4,zero,110524 <___svfiprintf_internal_r+0xf4c>
  10fd78:	00ffdfc4 	movi	r3,-129
  10fd7c:	9504b03a 	or	r2,r18,r20
  10fd80:	80e0703a 	and	r16,r16,r3
  10fd84:	103f3326 	beq	r2,zero,10fa54 <__alt_data_end+0xfffcfa54>
  10fd88:	a0009426 	beq	r20,zero,10ffdc <___svfiprintf_internal_r+0xa04>
  10fd8c:	dc401a04 	addi	r17,sp,104
  10fd90:	402f883a 	mov	r23,r8
  10fd94:	9009883a 	mov	r4,r18
  10fd98:	a00b883a 	mov	r5,r20
  10fd9c:	01800284 	movi	r6,10
  10fda0:	000f883a 	mov	r7,zero
  10fda4:	01152840 	call	115284 <__umoddi3>
  10fda8:	10800c04 	addi	r2,r2,48
  10fdac:	8c7fffc4 	addi	r17,r17,-1
  10fdb0:	9009883a 	mov	r4,r18
  10fdb4:	a00b883a 	mov	r5,r20
  10fdb8:	88800005 	stb	r2,0(r17)
  10fdbc:	01800284 	movi	r6,10
  10fdc0:	000f883a 	mov	r7,zero
  10fdc4:	0114c880 	call	114c88 <__udivdi3>
  10fdc8:	1025883a 	mov	r18,r2
  10fdcc:	10c4b03a 	or	r2,r2,r3
  10fdd0:	1829883a 	mov	r20,r3
  10fdd4:	103fef1e 	bne	r2,zero,10fd94 <__alt_data_end+0xfffcfd94>
  10fdd8:	d9001e17 	ldw	r4,120(sp)
  10fddc:	b811883a 	mov	r8,r23
  10fde0:	2469c83a 	sub	r20,r4,r17
  10fde4:	003f2006 	br	10fa68 <__alt_data_end+0xfffcfa68>
  10fde8:	d8802417 	ldw	r2,144(sp)
  10fdec:	8821883a 	mov	r16,r17
  10fdf0:	d8001d85 	stb	zero,118(sp)
  10fdf4:	14400017 	ldw	r17,0(r2)
  10fdf8:	b811883a 	mov	r8,r23
  10fdfc:	15c00104 	addi	r23,r2,4
  10fe00:	88026c26 	beq	r17,zero,1107b4 <___svfiprintf_internal_r+0x11dc>
  10fe04:	d8c02017 	ldw	r3,128(sp)
  10fe08:	18025f16 	blt	r3,zero,110788 <___svfiprintf_internal_r+0x11b0>
  10fe0c:	180d883a 	mov	r6,r3
  10fe10:	000b883a 	mov	r5,zero
  10fe14:	8809883a 	mov	r4,r17
  10fe18:	da002d15 	stw	r8,180(sp)
  10fe1c:	010b7200 	call	10b720 <memchr>
  10fe20:	da002d17 	ldw	r8,180(sp)
  10fe24:	1002a526 	beq	r2,zero,1108bc <___svfiprintf_internal_r+0x12e4>
  10fe28:	1469c83a 	sub	r20,r2,r17
  10fe2c:	dd401d83 	ldbu	r21,118(sp)
  10fe30:	ddc02415 	stw	r23,144(sp)
  10fe34:	d8002015 	stw	zero,128(sp)
  10fe38:	003f0b06 	br	10fa68 <__alt_data_end+0xfffcfa68>
  10fe3c:	8c400814 	ori	r17,r17,32
  10fe40:	98c00007 	ldb	r3,0(r19)
  10fe44:	003e3006 	br	10f708 <__alt_data_end+0xfffcf708>
  10fe48:	8821883a 	mov	r16,r17
  10fe4c:	dc402103 	ldbu	r17,132(sp)
  10fe50:	b811883a 	mov	r8,r23
  10fe54:	8c403fcc 	andi	r17,r17,255
  10fe58:	8802b01e 	bne	r17,zero,11091c <___svfiprintf_internal_r+0x1344>
  10fe5c:	84000414 	ori	r16,r16,16
  10fe60:	8080080c 	andi	r2,r16,32
  10fe64:	103fba1e 	bne	r2,zero,10fd50 <__alt_data_end+0xfffcfd50>
  10fe68:	8080040c 	andi	r2,r16,16
  10fe6c:	1001df1e 	bne	r2,zero,1105ec <___svfiprintf_internal_r+0x1014>
  10fe70:	8080100c 	andi	r2,r16,64
  10fe74:	10023d26 	beq	r2,zero,11076c <___svfiprintf_internal_r+0x1194>
  10fe78:	d8802417 	ldw	r2,144(sp)
  10fe7c:	1480000f 	ldh	r18,0(r2)
  10fe80:	10800104 	addi	r2,r2,4
  10fe84:	d8802415 	stw	r2,144(sp)
  10fe88:	9029d7fa 	srai	r20,r18,31
  10fe8c:	a005883a 	mov	r2,r20
  10fe90:	103fb60e 	bge	r2,zero,10fd6c <__alt_data_end+0xfffcfd6c>
  10fe94:	d9402017 	ldw	r5,128(sp)
  10fe98:	04a5c83a 	sub	r18,zero,r18
  10fe9c:	05400b44 	movi	r21,45
  10fea0:	9004c03a 	cmpne	r2,r18,zero
  10fea4:	0529c83a 	sub	r20,zero,r20
  10fea8:	dd401d85 	stb	r21,118(sp)
  10feac:	a0a9c83a 	sub	r20,r20,r2
  10feb0:	28026c16 	blt	r5,zero,110864 <___svfiprintf_internal_r+0x128c>
  10feb4:	00bfdfc4 	movi	r2,-129
  10feb8:	80a0703a 	and	r16,r16,r2
  10febc:	a03fb31e 	bne	r20,zero,10fd8c <__alt_data_end+0xfffcfd8c>
  10fec0:	00004606 	br	10ffdc <___svfiprintf_internal_r+0xa04>
  10fec4:	9839883a 	mov	fp,r19
  10fec8:	d8002515 	stw	zero,148(sp)
  10fecc:	1c3ff404 	addi	r16,r3,-48
  10fed0:	0009883a 	mov	r4,zero
  10fed4:	01400284 	movi	r5,10
  10fed8:	01159fc0 	call	1159fc <__mulsi3>
  10fedc:	e0c00007 	ldb	r3,0(fp)
  10fee0:	8089883a 	add	r4,r16,r2
  10fee4:	9cc00044 	addi	r19,r19,1
  10fee8:	1c3ff404 	addi	r16,r3,-48
  10feec:	9839883a 	mov	fp,r19
  10fef0:	a43ff82e 	bgeu	r20,r16,10fed4 <__alt_data_end+0xfffcfed4>
  10fef4:	d9002515 	stw	r4,148(sp)
  10fef8:	18bff804 	addi	r2,r3,-32
  10fefc:	90be052e 	bgeu	r18,r2,10f714 <__alt_data_end+0xfffcf714>
  10ff00:	8821883a 	mov	r16,r17
  10ff04:	dc402103 	ldbu	r17,132(sp)
  10ff08:	b811883a 	mov	r8,r23
  10ff0c:	8c403fcc 	andi	r17,r17,255
  10ff10:	88028d1e 	bne	r17,zero,110948 <___svfiprintf_internal_r+0x1370>
  10ff14:	1800ea26 	beq	r3,zero,1102c0 <___svfiprintf_internal_r+0xce8>
  10ff18:	04800044 	movi	r18,1
  10ff1c:	d8c01005 	stb	r3,64(sp)
  10ff20:	d8001d85 	stb	zero,118(sp)
  10ff24:	9029883a 	mov	r20,r18
  10ff28:	dc401004 	addi	r17,sp,64
  10ff2c:	003f1306 	br	10fb7c <__alt_data_end+0xfffcfb7c>
  10ff30:	8c402014 	ori	r17,r17,128
  10ff34:	98c00007 	ldb	r3,0(r19)
  10ff38:	003df306 	br	10f708 <__alt_data_end+0xfffcf708>
  10ff3c:	98c00007 	ldb	r3,0(r19)
  10ff40:	01000a84 	movi	r4,42
  10ff44:	9f000044 	addi	fp,r19,1
  10ff48:	19026326 	beq	r3,r4,1108d8 <___svfiprintf_internal_r+0x1300>
  10ff4c:	1c3ff404 	addi	r16,r3,-48
  10ff50:	0009883a 	mov	r4,zero
  10ff54:	a4025636 	bltu	r20,r16,1108b0 <___svfiprintf_internal_r+0x12d8>
  10ff58:	01400284 	movi	r5,10
  10ff5c:	01159fc0 	call	1159fc <__mulsi3>
  10ff60:	e0c00007 	ldb	r3,0(fp)
  10ff64:	1409883a 	add	r4,r2,r16
  10ff68:	e4c00044 	addi	r19,fp,1
  10ff6c:	1c3ff404 	addi	r16,r3,-48
  10ff70:	9839883a 	mov	fp,r19
  10ff74:	a43ff82e 	bgeu	r20,r16,10ff58 <__alt_data_end+0xfffcff58>
  10ff78:	20020c16 	blt	r4,zero,1107ac <___svfiprintf_internal_r+0x11d4>
  10ff7c:	d9002015 	stw	r4,128(sp)
  10ff80:	003de206 	br	10f70c <__alt_data_end+0xfffcf70c>
  10ff84:	8821883a 	mov	r16,r17
  10ff88:	dc402103 	ldbu	r17,132(sp)
  10ff8c:	b811883a 	mov	r8,r23
  10ff90:	8c403fcc 	andi	r17,r17,255
  10ff94:	8802721e 	bne	r17,zero,110960 <___svfiprintf_internal_r+0x1388>
  10ff98:	84000414 	ori	r16,r16,16
  10ff9c:	8080080c 	andi	r2,r16,32
  10ffa0:	103e9f1e 	bne	r2,zero,10fa20 <__alt_data_end+0xfffcfa20>
  10ffa4:	8080040c 	andi	r2,r16,16
  10ffa8:	10015326 	beq	r2,zero,1104f8 <___svfiprintf_internal_r+0xf20>
  10ffac:	d8c02417 	ldw	r3,144(sp)
  10ffb0:	d9002017 	ldw	r4,128(sp)
  10ffb4:	d8001d85 	stb	zero,118(sp)
  10ffb8:	18800104 	addi	r2,r3,4
  10ffbc:	1c800017 	ldw	r18,0(r3)
  10ffc0:	0029883a 	mov	r20,zero
  10ffc4:	20015516 	blt	r4,zero,11051c <___svfiprintf_internal_r+0xf44>
  10ffc8:	00ffdfc4 	movi	r3,-129
  10ffcc:	d8802415 	stw	r2,144(sp)
  10ffd0:	80e0703a 	and	r16,r16,r3
  10ffd4:	002b883a 	mov	r21,zero
  10ffd8:	903e9e26 	beq	r18,zero,10fa54 <__alt_data_end+0xfffcfa54>
  10ffdc:	00800244 	movi	r2,9
  10ffe0:	14bf6a36 	bltu	r2,r18,10fd8c <__alt_data_end+0xfffcfd8c>
  10ffe4:	94800c04 	addi	r18,r18,48
  10ffe8:	dc8019c5 	stb	r18,103(sp)
  10ffec:	dd002c17 	ldw	r20,176(sp)
  10fff0:	dc4019c4 	addi	r17,sp,103
  10fff4:	003e9c06 	br	10fa68 <__alt_data_end+0xfffcfa68>
  10fff8:	8821883a 	mov	r16,r17
  10fffc:	dc402103 	ldbu	r17,132(sp)
  110000:	b811883a 	mov	r8,r23
  110004:	8c403fcc 	andi	r17,r17,255
  110008:	8802571e 	bne	r17,zero,110968 <___svfiprintf_internal_r+0x1390>
  11000c:	84000414 	ori	r16,r16,16
  110010:	8080080c 	andi	r2,r16,32
  110014:	103ea91e 	bne	r2,zero,10fabc <__alt_data_end+0xfffcfabc>
  110018:	8080040c 	andi	r2,r16,16
  11001c:	10018026 	beq	r2,zero,110620 <___svfiprintf_internal_r+0x1048>
  110020:	d9402417 	ldw	r5,144(sp)
  110024:	d8c02017 	ldw	r3,128(sp)
  110028:	d8001d85 	stb	zero,118(sp)
  11002c:	28800104 	addi	r2,r5,4
  110030:	2c800017 	ldw	r18,0(r5)
  110034:	0029883a 	mov	r20,zero
  110038:	18018216 	blt	r3,zero,110644 <___svfiprintf_internal_r+0x106c>
  11003c:	00ffdfc4 	movi	r3,-129
  110040:	d8802415 	stw	r2,144(sp)
  110044:	80e0703a 	and	r16,r16,r3
  110048:	903ea81e 	bne	r18,zero,10faec <__alt_data_end+0xfffcfaec>
  11004c:	d8802017 	ldw	r2,128(sp)
  110050:	002b883a 	mov	r21,zero
  110054:	1001f226 	beq	r2,zero,110820 <___svfiprintf_internal_r+0x1248>
  110058:	0025883a 	mov	r18,zero
  11005c:	0029883a 	mov	r20,zero
  110060:	003ea306 	br	10faf0 <__alt_data_end+0xfffcfaf0>
  110064:	d8c01c17 	ldw	r3,112(sp)
  110068:	d8801b17 	ldw	r2,108(sp)
  11006c:	d9001d87 	ldb	r4,118(sp)
  110070:	20000b26 	beq	r4,zero,1100a0 <___svfiprintf_internal_r+0xac8>
  110074:	d9001d84 	addi	r4,sp,118
  110078:	18c00044 	addi	r3,r3,1
  11007c:	10800044 	addi	r2,r2,1
  110080:	41000015 	stw	r4,0(r8)
  110084:	01000044 	movi	r4,1
  110088:	41000115 	stw	r4,4(r8)
  11008c:	d8c01c15 	stw	r3,112(sp)
  110090:	d8801b15 	stw	r2,108(sp)
  110094:	010001c4 	movi	r4,7
  110098:	2080f316 	blt	r4,r2,110468 <___svfiprintf_internal_r+0xe90>
  11009c:	42000204 	addi	r8,r8,8
  1100a0:	d9402117 	ldw	r5,132(sp)
  1100a4:	28000b26 	beq	r5,zero,1100d4 <___svfiprintf_internal_r+0xafc>
  1100a8:	d9001d04 	addi	r4,sp,116
  1100ac:	18c00084 	addi	r3,r3,2
  1100b0:	10800044 	addi	r2,r2,1
  1100b4:	41000015 	stw	r4,0(r8)
  1100b8:	01000084 	movi	r4,2
  1100bc:	41000115 	stw	r4,4(r8)
  1100c0:	d8c01c15 	stw	r3,112(sp)
  1100c4:	d8801b15 	stw	r2,108(sp)
  1100c8:	010001c4 	movi	r4,7
  1100cc:	2080ef16 	blt	r4,r2,11048c <___svfiprintf_internal_r+0xeb4>
  1100d0:	42000204 	addi	r8,r8,8
  1100d4:	d9402217 	ldw	r5,136(sp)
  1100d8:	01002004 	movi	r4,128
  1100dc:	29008f26 	beq	r5,r4,11031c <___svfiprintf_internal_r+0xd44>
  1100e0:	d9002017 	ldw	r4,128(sp)
  1100e4:	252fc83a 	sub	r23,r4,r20
  1100e8:	05c0310e 	bge	zero,r23,1101b0 <___svfiprintf_internal_r+0xbd8>
  1100ec:	07000404 	movi	fp,16
  1100f0:	e5c17d0e 	bge	fp,r23,1106e8 <___svfiprintf_internal_r+0x1110>
  1100f4:	010004b4 	movhi	r4,18
  1100f8:	210dbc04 	addi	r4,r4,14064
  1100fc:	dc002015 	stw	r16,128(sp)
  110100:	dc402215 	stw	r17,136(sp)
  110104:	d9002115 	stw	r4,132(sp)
  110108:	b823883a 	mov	r17,r23
  11010c:	054001c4 	movi	r21,7
  110110:	982f883a 	mov	r23,r19
  110114:	dc002717 	ldw	r16,156(sp)
  110118:	9027883a 	mov	r19,r18
  11011c:	dc802317 	ldw	r18,140(sp)
  110120:	00000306 	br	110130 <___svfiprintf_internal_r+0xb58>
  110124:	8c7ffc04 	addi	r17,r17,-16
  110128:	42000204 	addi	r8,r8,8
  11012c:	e440110e 	bge	fp,r17,110174 <___svfiprintf_internal_r+0xb9c>
  110130:	18c00404 	addi	r3,r3,16
  110134:	10800044 	addi	r2,r2,1
  110138:	45800015 	stw	r22,0(r8)
  11013c:	47000115 	stw	fp,4(r8)
  110140:	d8c01c15 	stw	r3,112(sp)
  110144:	d8801b15 	stw	r2,108(sp)
  110148:	a8bff60e 	bge	r21,r2,110124 <__alt_data_end+0xfffd0124>
  11014c:	d9801a04 	addi	r6,sp,104
  110150:	900b883a 	mov	r5,r18
  110154:	8009883a 	mov	r4,r16
  110158:	010f4080 	call	10f408 <__ssprint_r>
  11015c:	10005e1e 	bne	r2,zero,1102d8 <___svfiprintf_internal_r+0xd00>
  110160:	8c7ffc04 	addi	r17,r17,-16
  110164:	d8c01c17 	ldw	r3,112(sp)
  110168:	d8801b17 	ldw	r2,108(sp)
  11016c:	d811883a 	mov	r8,sp
  110170:	e47fef16 	blt	fp,r17,110130 <__alt_data_end+0xfffd0130>
  110174:	9825883a 	mov	r18,r19
  110178:	dc002017 	ldw	r16,128(sp)
  11017c:	b827883a 	mov	r19,r23
  110180:	882f883a 	mov	r23,r17
  110184:	dc402217 	ldw	r17,136(sp)
  110188:	d9402117 	ldw	r5,132(sp)
  11018c:	1dc7883a 	add	r3,r3,r23
  110190:	10800044 	addi	r2,r2,1
  110194:	41400015 	stw	r5,0(r8)
  110198:	45c00115 	stw	r23,4(r8)
  11019c:	d8c01c15 	stw	r3,112(sp)
  1101a0:	d8801b15 	stw	r2,108(sp)
  1101a4:	010001c4 	movi	r4,7
  1101a8:	2080a616 	blt	r4,r2,110444 <___svfiprintf_internal_r+0xe6c>
  1101ac:	42000204 	addi	r8,r8,8
  1101b0:	a0c7883a 	add	r3,r20,r3
  1101b4:	10800044 	addi	r2,r2,1
  1101b8:	44400015 	stw	r17,0(r8)
  1101bc:	45000115 	stw	r20,4(r8)
  1101c0:	d8c01c15 	stw	r3,112(sp)
  1101c4:	d8801b15 	stw	r2,108(sp)
  1101c8:	010001c4 	movi	r4,7
  1101cc:	20808816 	blt	r4,r2,1103f0 <___svfiprintf_internal_r+0xe18>
  1101d0:	42000204 	addi	r8,r8,8
  1101d4:	8400010c 	andi	r16,r16,4
  1101d8:	80002c26 	beq	r16,zero,11028c <___svfiprintf_internal_r+0xcb4>
  1101dc:	d8802517 	ldw	r2,148(sp)
  1101e0:	14a1c83a 	sub	r16,r2,r18
  1101e4:	0400290e 	bge	zero,r16,11028c <___svfiprintf_internal_r+0xcb4>
  1101e8:	04400404 	movi	r17,16
  1101ec:	d8801b17 	ldw	r2,108(sp)
  1101f0:	8c01a70e 	bge	r17,r16,110890 <___svfiprintf_internal_r+0x12b8>
  1101f4:	014004b4 	movhi	r5,18
  1101f8:	294dc004 	addi	r5,r5,14080
  1101fc:	d9402815 	stw	r5,160(sp)
  110200:	050001c4 	movi	r20,7
  110204:	dd402717 	ldw	r21,156(sp)
  110208:	ddc02317 	ldw	r23,140(sp)
  11020c:	00000306 	br	11021c <___svfiprintf_internal_r+0xc44>
  110210:	843ffc04 	addi	r16,r16,-16
  110214:	42000204 	addi	r8,r8,8
  110218:	8c00130e 	bge	r17,r16,110268 <___svfiprintf_internal_r+0xc90>
  11021c:	010004b4 	movhi	r4,18
  110220:	18c00404 	addi	r3,r3,16
  110224:	10800044 	addi	r2,r2,1
  110228:	210dc004 	addi	r4,r4,14080
  11022c:	41000015 	stw	r4,0(r8)
  110230:	44400115 	stw	r17,4(r8)
  110234:	d8c01c15 	stw	r3,112(sp)
  110238:	d8801b15 	stw	r2,108(sp)
  11023c:	a0bff40e 	bge	r20,r2,110210 <__alt_data_end+0xfffd0210>
  110240:	d9801a04 	addi	r6,sp,104
  110244:	b80b883a 	mov	r5,r23
  110248:	a809883a 	mov	r4,r21
  11024c:	010f4080 	call	10f408 <__ssprint_r>
  110250:	1000211e 	bne	r2,zero,1102d8 <___svfiprintf_internal_r+0xd00>
  110254:	843ffc04 	addi	r16,r16,-16
  110258:	d8c01c17 	ldw	r3,112(sp)
  11025c:	d8801b17 	ldw	r2,108(sp)
  110260:	d811883a 	mov	r8,sp
  110264:	8c3fed16 	blt	r17,r16,11021c <__alt_data_end+0xfffd021c>
  110268:	d9402817 	ldw	r5,160(sp)
  11026c:	1c07883a 	add	r3,r3,r16
  110270:	10800044 	addi	r2,r2,1
  110274:	41400015 	stw	r5,0(r8)
  110278:	44000115 	stw	r16,4(r8)
  11027c:	d8c01c15 	stw	r3,112(sp)
  110280:	d8801b15 	stw	r2,108(sp)
  110284:	010001c4 	movi	r4,7
  110288:	2080b516 	blt	r4,r2,110560 <___svfiprintf_internal_r+0xf88>
  11028c:	d8802517 	ldw	r2,148(sp)
  110290:	1480010e 	bge	r2,r18,110298 <___svfiprintf_internal_r+0xcc0>
  110294:	9005883a 	mov	r2,r18
  110298:	d9002617 	ldw	r4,152(sp)
  11029c:	2089883a 	add	r4,r4,r2
  1102a0:	d9002615 	stw	r4,152(sp)
  1102a4:	18005a1e 	bne	r3,zero,110410 <___svfiprintf_internal_r+0xe38>
  1102a8:	98800007 	ldb	r2,0(r19)
  1102ac:	d8001b15 	stw	zero,108(sp)
  1102b0:	d811883a 	mov	r8,sp
  1102b4:	103cec1e 	bne	r2,zero,10f668 <__alt_data_end+0xfffcf668>
  1102b8:	9825883a 	mov	r18,r19
  1102bc:	003d0206 	br	10f6c8 <__alt_data_end+0xfffcf6c8>
  1102c0:	d8801c17 	ldw	r2,112(sp)
  1102c4:	10000426 	beq	r2,zero,1102d8 <___svfiprintf_internal_r+0xd00>
  1102c8:	d9402317 	ldw	r5,140(sp)
  1102cc:	d9002717 	ldw	r4,156(sp)
  1102d0:	d9801a04 	addi	r6,sp,104
  1102d4:	010f4080 	call	10f408 <__ssprint_r>
  1102d8:	d9402317 	ldw	r5,140(sp)
  1102dc:	d8802617 	ldw	r2,152(sp)
  1102e0:	28c0030b 	ldhu	r3,12(r5)
  1102e4:	18c0100c 	andi	r3,r3,64
  1102e8:	18015c1e 	bne	r3,zero,11085c <___svfiprintf_internal_r+0x1284>
  1102ec:	dfc03717 	ldw	ra,220(sp)
  1102f0:	df003617 	ldw	fp,216(sp)
  1102f4:	ddc03517 	ldw	r23,212(sp)
  1102f8:	dd803417 	ldw	r22,208(sp)
  1102fc:	dd403317 	ldw	r21,204(sp)
  110300:	dd003217 	ldw	r20,200(sp)
  110304:	dcc03117 	ldw	r19,196(sp)
  110308:	dc803017 	ldw	r18,192(sp)
  11030c:	dc402f17 	ldw	r17,188(sp)
  110310:	dc002e17 	ldw	r16,184(sp)
  110314:	dec03804 	addi	sp,sp,224
  110318:	f800283a 	ret
  11031c:	d9002517 	ldw	r4,148(sp)
  110320:	24afc83a 	sub	r23,r4,r18
  110324:	05ff6e0e 	bge	zero,r23,1100e0 <__alt_data_end+0xfffd00e0>
  110328:	07000404 	movi	fp,16
  11032c:	e5c15c0e 	bge	fp,r23,1108a0 <___svfiprintf_internal_r+0x12c8>
  110330:	010004b4 	movhi	r4,18
  110334:	210dbc04 	addi	r4,r4,14064
  110338:	dc002215 	stw	r16,136(sp)
  11033c:	dc402815 	stw	r17,160(sp)
  110340:	d9002115 	stw	r4,132(sp)
  110344:	b823883a 	mov	r17,r23
  110348:	054001c4 	movi	r21,7
  11034c:	982f883a 	mov	r23,r19
  110350:	dc002717 	ldw	r16,156(sp)
  110354:	9027883a 	mov	r19,r18
  110358:	dc802317 	ldw	r18,140(sp)
  11035c:	00000306 	br	11036c <___svfiprintf_internal_r+0xd94>
  110360:	8c7ffc04 	addi	r17,r17,-16
  110364:	42000204 	addi	r8,r8,8
  110368:	e440110e 	bge	fp,r17,1103b0 <___svfiprintf_internal_r+0xdd8>
  11036c:	18c00404 	addi	r3,r3,16
  110370:	10800044 	addi	r2,r2,1
  110374:	45800015 	stw	r22,0(r8)
  110378:	47000115 	stw	fp,4(r8)
  11037c:	d8c01c15 	stw	r3,112(sp)
  110380:	d8801b15 	stw	r2,108(sp)
  110384:	a8bff60e 	bge	r21,r2,110360 <__alt_data_end+0xfffd0360>
  110388:	d9801a04 	addi	r6,sp,104
  11038c:	900b883a 	mov	r5,r18
  110390:	8009883a 	mov	r4,r16
  110394:	010f4080 	call	10f408 <__ssprint_r>
  110398:	103fcf1e 	bne	r2,zero,1102d8 <__alt_data_end+0xfffd02d8>
  11039c:	8c7ffc04 	addi	r17,r17,-16
  1103a0:	d8c01c17 	ldw	r3,112(sp)
  1103a4:	d8801b17 	ldw	r2,108(sp)
  1103a8:	d811883a 	mov	r8,sp
  1103ac:	e47fef16 	blt	fp,r17,11036c <__alt_data_end+0xfffd036c>
  1103b0:	9825883a 	mov	r18,r19
  1103b4:	dc002217 	ldw	r16,136(sp)
  1103b8:	b827883a 	mov	r19,r23
  1103bc:	882f883a 	mov	r23,r17
  1103c0:	dc402817 	ldw	r17,160(sp)
  1103c4:	d9402117 	ldw	r5,132(sp)
  1103c8:	1dc7883a 	add	r3,r3,r23
  1103cc:	10800044 	addi	r2,r2,1
  1103d0:	41400015 	stw	r5,0(r8)
  1103d4:	45c00115 	stw	r23,4(r8)
  1103d8:	d8c01c15 	stw	r3,112(sp)
  1103dc:	d8801b15 	stw	r2,108(sp)
  1103e0:	010001c4 	movi	r4,7
  1103e4:	2080b716 	blt	r4,r2,1106c4 <___svfiprintf_internal_r+0x10ec>
  1103e8:	42000204 	addi	r8,r8,8
  1103ec:	003f3c06 	br	1100e0 <__alt_data_end+0xfffd00e0>
  1103f0:	d9402317 	ldw	r5,140(sp)
  1103f4:	d9002717 	ldw	r4,156(sp)
  1103f8:	d9801a04 	addi	r6,sp,104
  1103fc:	010f4080 	call	10f408 <__ssprint_r>
  110400:	103fb51e 	bne	r2,zero,1102d8 <__alt_data_end+0xfffd02d8>
  110404:	d8c01c17 	ldw	r3,112(sp)
  110408:	d811883a 	mov	r8,sp
  11040c:	003f7106 	br	1101d4 <__alt_data_end+0xfffd01d4>
  110410:	d9402317 	ldw	r5,140(sp)
  110414:	d9002717 	ldw	r4,156(sp)
  110418:	d9801a04 	addi	r6,sp,104
  11041c:	010f4080 	call	10f408 <__ssprint_r>
  110420:	103fa126 	beq	r2,zero,1102a8 <__alt_data_end+0xfffd02a8>
  110424:	003fac06 	br	1102d8 <__alt_data_end+0xfffd02d8>
  110428:	d9402317 	ldw	r5,140(sp)
  11042c:	d9002717 	ldw	r4,156(sp)
  110430:	d9801a04 	addi	r6,sp,104
  110434:	010f4080 	call	10f408 <__ssprint_r>
  110438:	103fa71e 	bne	r2,zero,1102d8 <__alt_data_end+0xfffd02d8>
  11043c:	d811883a 	mov	r8,sp
  110440:	003c9e06 	br	10f6bc <__alt_data_end+0xfffcf6bc>
  110444:	d9402317 	ldw	r5,140(sp)
  110448:	d9002717 	ldw	r4,156(sp)
  11044c:	d9801a04 	addi	r6,sp,104
  110450:	010f4080 	call	10f408 <__ssprint_r>
  110454:	103fa01e 	bne	r2,zero,1102d8 <__alt_data_end+0xfffd02d8>
  110458:	d8c01c17 	ldw	r3,112(sp)
  11045c:	d8801b17 	ldw	r2,108(sp)
  110460:	d811883a 	mov	r8,sp
  110464:	003f5206 	br	1101b0 <__alt_data_end+0xfffd01b0>
  110468:	d9402317 	ldw	r5,140(sp)
  11046c:	d9002717 	ldw	r4,156(sp)
  110470:	d9801a04 	addi	r6,sp,104
  110474:	010f4080 	call	10f408 <__ssprint_r>
  110478:	103f971e 	bne	r2,zero,1102d8 <__alt_data_end+0xfffd02d8>
  11047c:	d8c01c17 	ldw	r3,112(sp)
  110480:	d8801b17 	ldw	r2,108(sp)
  110484:	d811883a 	mov	r8,sp
  110488:	003f0506 	br	1100a0 <__alt_data_end+0xfffd00a0>
  11048c:	d9402317 	ldw	r5,140(sp)
  110490:	d9002717 	ldw	r4,156(sp)
  110494:	d9801a04 	addi	r6,sp,104
  110498:	010f4080 	call	10f408 <__ssprint_r>
  11049c:	103f8e1e 	bne	r2,zero,1102d8 <__alt_data_end+0xfffd02d8>
  1104a0:	d8c01c17 	ldw	r3,112(sp)
  1104a4:	d8801b17 	ldw	r2,108(sp)
  1104a8:	d811883a 	mov	r8,sp
  1104ac:	003f0906 	br	1100d4 <__alt_data_end+0xfffd00d4>
  1104b0:	d9402017 	ldw	r5,128(sp)
  1104b4:	d8001d85 	stb	zero,118(sp)
  1104b8:	28007716 	blt	r5,zero,110698 <___svfiprintf_internal_r+0x10c0>
  1104bc:	00ffdfc4 	movi	r3,-129
  1104c0:	9504b03a 	or	r2,r18,r20
  1104c4:	80e0703a 	and	r16,r16,r3
  1104c8:	103d3926 	beq	r2,zero,10f9b0 <__alt_data_end+0xfffcf9b0>
  1104cc:	002b883a 	mov	r21,zero
  1104d0:	003d3c06 	br	10f9c4 <__alt_data_end+0xfffcf9c4>
  1104d4:	d9402317 	ldw	r5,140(sp)
  1104d8:	d9002717 	ldw	r4,156(sp)
  1104dc:	d9801a04 	addi	r6,sp,104
  1104e0:	010f4080 	call	10f408 <__ssprint_r>
  1104e4:	103f7c1e 	bne	r2,zero,1102d8 <__alt_data_end+0xfffd02d8>
  1104e8:	d8c01c17 	ldw	r3,112(sp)
  1104ec:	d8801b17 	ldw	r2,108(sp)
  1104f0:	d811883a 	mov	r8,sp
  1104f4:	003edd06 	br	11006c <__alt_data_end+0xfffd006c>
  1104f8:	8080100c 	andi	r2,r16,64
  1104fc:	d8001d85 	stb	zero,118(sp)
  110500:	10008426 	beq	r2,zero,110714 <___svfiprintf_internal_r+0x113c>
  110504:	d9402417 	ldw	r5,144(sp)
  110508:	d8c02017 	ldw	r3,128(sp)
  11050c:	0029883a 	mov	r20,zero
  110510:	28800104 	addi	r2,r5,4
  110514:	2c80000b 	ldhu	r18,0(r5)
  110518:	183eab0e 	bge	r3,zero,10ffc8 <__alt_data_end+0xfffcffc8>
  11051c:	d8802415 	stw	r2,144(sp)
  110520:	002b883a 	mov	r21,zero
  110524:	9504b03a 	or	r2,r18,r20
  110528:	103e171e 	bne	r2,zero,10fd88 <__alt_data_end+0xfffcfd88>
  11052c:	00800044 	movi	r2,1
  110530:	10803fcc 	andi	r2,r2,255
  110534:	00c00044 	movi	r3,1
  110538:	10c05c26 	beq	r2,r3,1106ac <___svfiprintf_internal_r+0x10d4>
  11053c:	00c00084 	movi	r3,2
  110540:	10fd1e26 	beq	r2,r3,10f9bc <__alt_data_end+0xfffcf9bc>
  110544:	003ec406 	br	110058 <__alt_data_end+0xfffd0058>
  110548:	d9401e17 	ldw	r5,120(sp)
  11054c:	2c69c83a 	sub	r20,r5,r17
  110550:	003d4506 	br	10fa68 <__alt_data_end+0xfffcfa68>
  110554:	d8802415 	stw	r2,144(sp)
  110558:	98c00007 	ldb	r3,0(r19)
  11055c:	003c6a06 	br	10f708 <__alt_data_end+0xfffcf708>
  110560:	d9402317 	ldw	r5,140(sp)
  110564:	d9002717 	ldw	r4,156(sp)
  110568:	d9801a04 	addi	r6,sp,104
  11056c:	010f4080 	call	10f408 <__ssprint_r>
  110570:	103f591e 	bne	r2,zero,1102d8 <__alt_data_end+0xfffd02d8>
  110574:	d8c01c17 	ldw	r3,112(sp)
  110578:	003f4406 	br	11028c <__alt_data_end+0xfffd028c>
  11057c:	014004b4 	movhi	r5,18
  110580:	294c9004 	addi	r5,r5,12864
  110584:	d9402915 	stw	r5,164(sp)
  110588:	003d0906 	br	10f9b0 <__alt_data_end+0xfffcf9b0>
  11058c:	d8c02417 	ldw	r3,144(sp)
  110590:	d9002617 	ldw	r4,152(sp)
  110594:	d9402417 	ldw	r5,144(sp)
  110598:	18800017 	ldw	r2,0(r3)
  11059c:	2007d7fa 	srai	r3,r4,31
  1105a0:	29400104 	addi	r5,r5,4
  1105a4:	d9402415 	stw	r5,144(sp)
  1105a8:	11000015 	stw	r4,0(r2)
  1105ac:	10c00115 	stw	r3,4(r2)
  1105b0:	003c2b06 	br	10f660 <__alt_data_end+0xfffcf660>
  1105b4:	d8c01d45 	stb	r3,117(sp)
  1105b8:	d8c02017 	ldw	r3,128(sp)
  1105bc:	00800c04 	movi	r2,48
  1105c0:	d8801d05 	stb	r2,116(sp)
  1105c4:	d8001d85 	stb	zero,118(sp)
  1105c8:	80800094 	ori	r2,r16,2
  1105cc:	1800ac16 	blt	r3,zero,110880 <___svfiprintf_internal_r+0x12a8>
  1105d0:	00bfdfc4 	movi	r2,-129
  1105d4:	80a0703a 	and	r16,r16,r2
  1105d8:	84000094 	ori	r16,r16,2
  1105dc:	002b883a 	mov	r21,zero
  1105e0:	003cf806 	br	10f9c4 <__alt_data_end+0xfffcf9c4>
  1105e4:	98c00007 	ldb	r3,0(r19)
  1105e8:	003c4706 	br	10f708 <__alt_data_end+0xfffcf708>
  1105ec:	d9402417 	ldw	r5,144(sp)
  1105f0:	2c800017 	ldw	r18,0(r5)
  1105f4:	29400104 	addi	r5,r5,4
  1105f8:	d9402415 	stw	r5,144(sp)
  1105fc:	9029d7fa 	srai	r20,r18,31
  110600:	a005883a 	mov	r2,r20
  110604:	003dd806 	br	10fd68 <__alt_data_end+0xfffcfd68>
  110608:	d9402417 	ldw	r5,144(sp)
  11060c:	0029883a 	mov	r20,zero
  110610:	2c800017 	ldw	r18,0(r5)
  110614:	29400104 	addi	r5,r5,4
  110618:	d9402415 	stw	r5,144(sp)
  11061c:	003cdb06 	br	10f98c <__alt_data_end+0xfffcf98c>
  110620:	8080100c 	andi	r2,r16,64
  110624:	d8001d85 	stb	zero,118(sp)
  110628:	10003326 	beq	r2,zero,1106f8 <___svfiprintf_internal_r+0x1120>
  11062c:	d9002417 	ldw	r4,144(sp)
  110630:	d9402017 	ldw	r5,128(sp)
  110634:	0029883a 	mov	r20,zero
  110638:	20800104 	addi	r2,r4,4
  11063c:	2480000b 	ldhu	r18,0(r4)
  110640:	283e7e0e 	bge	r5,zero,11003c <__alt_data_end+0xfffd003c>
  110644:	9506b03a 	or	r3,r18,r20
  110648:	d8802415 	stw	r2,144(sp)
  11064c:	183d271e 	bne	r3,zero,10faec <__alt_data_end+0xfffcfaec>
  110650:	002b883a 	mov	r21,zero
  110654:	0005883a 	mov	r2,zero
  110658:	003fb506 	br	110530 <__alt_data_end+0xfffd0530>
  11065c:	98c00043 	ldbu	r3,1(r19)
  110660:	8c400814 	ori	r17,r17,32
  110664:	9cc00044 	addi	r19,r19,1
  110668:	18c03fcc 	andi	r3,r3,255
  11066c:	18c0201c 	xori	r3,r3,128
  110670:	18ffe004 	addi	r3,r3,-128
  110674:	003c2406 	br	10f708 <__alt_data_end+0xfffcf708>
  110678:	d8c02415 	stw	r3,144(sp)
  11067c:	002b883a 	mov	r21,zero
  110680:	003fa806 	br	110524 <__alt_data_end+0xfffd0524>
  110684:	010004b4 	movhi	r4,18
  110688:	210c9004 	addi	r4,r4,12864
  11068c:	d9002915 	stw	r4,164(sp)
  110690:	d8c02415 	stw	r3,144(sp)
  110694:	1021883a 	mov	r16,r2
  110698:	9504b03a 	or	r2,r18,r20
  11069c:	103f8b1e 	bne	r2,zero,1104cc <__alt_data_end+0xfffd04cc>
  1106a0:	002b883a 	mov	r21,zero
  1106a4:	00800084 	movi	r2,2
  1106a8:	003fa106 	br	110530 <__alt_data_end+0xfffd0530>
  1106ac:	0025883a 	mov	r18,zero
  1106b0:	94800c04 	addi	r18,r18,48
  1106b4:	dc8019c5 	stb	r18,103(sp)
  1106b8:	dd002c17 	ldw	r20,176(sp)
  1106bc:	dc4019c4 	addi	r17,sp,103
  1106c0:	003ce906 	br	10fa68 <__alt_data_end+0xfffcfa68>
  1106c4:	d9402317 	ldw	r5,140(sp)
  1106c8:	d9002717 	ldw	r4,156(sp)
  1106cc:	d9801a04 	addi	r6,sp,104
  1106d0:	010f4080 	call	10f408 <__ssprint_r>
  1106d4:	103f001e 	bne	r2,zero,1102d8 <__alt_data_end+0xfffd02d8>
  1106d8:	d8c01c17 	ldw	r3,112(sp)
  1106dc:	d8801b17 	ldw	r2,108(sp)
  1106e0:	d811883a 	mov	r8,sp
  1106e4:	003e7e06 	br	1100e0 <__alt_data_end+0xfffd00e0>
  1106e8:	014004b4 	movhi	r5,18
  1106ec:	294dbc04 	addi	r5,r5,14064
  1106f0:	d9402115 	stw	r5,132(sp)
  1106f4:	003ea406 	br	110188 <__alt_data_end+0xfffd0188>
  1106f8:	d8c02417 	ldw	r3,144(sp)
  1106fc:	d9002017 	ldw	r4,128(sp)
  110700:	0029883a 	mov	r20,zero
  110704:	18800104 	addi	r2,r3,4
  110708:	1c800017 	ldw	r18,0(r3)
  11070c:	203e4b0e 	bge	r4,zero,11003c <__alt_data_end+0xfffd003c>
  110710:	003fcc06 	br	110644 <__alt_data_end+0xfffd0644>
  110714:	d9002417 	ldw	r4,144(sp)
  110718:	d9402017 	ldw	r5,128(sp)
  11071c:	0029883a 	mov	r20,zero
  110720:	20800104 	addi	r2,r4,4
  110724:	24800017 	ldw	r18,0(r4)
  110728:	283e270e 	bge	r5,zero,10ffc8 <__alt_data_end+0xfffcffc8>
  11072c:	003f7b06 	br	11051c <__alt_data_end+0xfffd051c>
  110730:	8400100c 	andi	r16,r16,64
  110734:	80003326 	beq	r16,zero,110804 <___svfiprintf_internal_r+0x122c>
  110738:	d9402417 	ldw	r5,144(sp)
  11073c:	d8c02617 	ldw	r3,152(sp)
  110740:	28800017 	ldw	r2,0(r5)
  110744:	29400104 	addi	r5,r5,4
  110748:	d9402415 	stw	r5,144(sp)
  11074c:	10c0000d 	sth	r3,0(r2)
  110750:	003bc306 	br	10f660 <__alt_data_end+0xfffcf660>
  110754:	d9002417 	ldw	r4,144(sp)
  110758:	0029883a 	mov	r20,zero
  11075c:	24800017 	ldw	r18,0(r4)
  110760:	21000104 	addi	r4,r4,4
  110764:	d9002415 	stw	r4,144(sp)
  110768:	003c8806 	br	10f98c <__alt_data_end+0xfffcf98c>
  11076c:	d8c02417 	ldw	r3,144(sp)
  110770:	1c800017 	ldw	r18,0(r3)
  110774:	18c00104 	addi	r3,r3,4
  110778:	d8c02415 	stw	r3,144(sp)
  11077c:	9029d7fa 	srai	r20,r18,31
  110780:	a005883a 	mov	r2,r20
  110784:	003d7806 	br	10fd68 <__alt_data_end+0xfffcfd68>
  110788:	8809883a 	mov	r4,r17
  11078c:	da002d15 	stw	r8,180(sp)
  110790:	0101cfc0 	call	101cfc <strlen>
  110794:	1029883a 	mov	r20,r2
  110798:	dd401d83 	ldbu	r21,118(sp)
  11079c:	ddc02415 	stw	r23,144(sp)
  1107a0:	d8002015 	stw	zero,128(sp)
  1107a4:	da002d17 	ldw	r8,180(sp)
  1107a8:	003caf06 	br	10fa68 <__alt_data_end+0xfffcfa68>
  1107ac:	013fffc4 	movi	r4,-1
  1107b0:	003df206 	br	10ff7c <__alt_data_end+0xfffcff7c>
  1107b4:	dd002017 	ldw	r20,128(sp)
  1107b8:	00800184 	movi	r2,6
  1107bc:	1500012e 	bgeu	r2,r20,1107c4 <___svfiprintf_internal_r+0x11ec>
  1107c0:	1029883a 	mov	r20,r2
  1107c4:	a025883a 	mov	r18,r20
  1107c8:	a0004116 	blt	r20,zero,1108d0 <___svfiprintf_internal_r+0x12f8>
  1107cc:	044004b4 	movhi	r17,18
  1107d0:	ddc02415 	stw	r23,144(sp)
  1107d4:	8c4c9504 	addi	r17,r17,12884
  1107d8:	003ce806 	br	10fb7c <__alt_data_end+0xfffcfb7c>
  1107dc:	04001004 	movi	r16,64
  1107e0:	800b883a 	mov	r5,r16
  1107e4:	010acf00 	call	10acf0 <_malloc_r>
  1107e8:	d8c02317 	ldw	r3,140(sp)
  1107ec:	18800015 	stw	r2,0(r3)
  1107f0:	18800415 	stw	r2,16(r3)
  1107f4:	10004d26 	beq	r2,zero,11092c <___svfiprintf_internal_r+0x1354>
  1107f8:	d9402317 	ldw	r5,140(sp)
  1107fc:	2c000515 	stw	r16,20(r5)
  110800:	003b8906 	br	10f628 <__alt_data_end+0xfffcf628>
  110804:	d9002417 	ldw	r4,144(sp)
  110808:	d9402617 	ldw	r5,152(sp)
  11080c:	20800017 	ldw	r2,0(r4)
  110810:	21000104 	addi	r4,r4,4
  110814:	d9002415 	stw	r4,144(sp)
  110818:	11400015 	stw	r5,0(r2)
  11081c:	003b9006 	br	10f660 <__alt_data_end+0xfffcf660>
  110820:	8080004c 	andi	r2,r16,1
  110824:	002b883a 	mov	r21,zero
  110828:	10000526 	beq	r2,zero,110840 <___svfiprintf_internal_r+0x1268>
  11082c:	00800c04 	movi	r2,48
  110830:	d88019c5 	stb	r2,103(sp)
  110834:	dd002c17 	ldw	r20,176(sp)
  110838:	dc4019c4 	addi	r17,sp,103
  11083c:	003c8a06 	br	10fa68 <__alt_data_end+0xfffcfa68>
  110840:	0029883a 	mov	r20,zero
  110844:	dc401a04 	addi	r17,sp,104
  110848:	003c8706 	br	10fa68 <__alt_data_end+0xfffcfa68>
  11084c:	014004b4 	movhi	r5,18
  110850:	294dc004 	addi	r5,r5,14080
  110854:	d9402815 	stw	r5,160(sp)
  110858:	003cff06 	br	10fc58 <__alt_data_end+0xfffcfc58>
  11085c:	00bfffc4 	movi	r2,-1
  110860:	003ea206 	br	1102ec <__alt_data_end+0xfffd02ec>
  110864:	00800044 	movi	r2,1
  110868:	10803fcc 	andi	r2,r2,255
  11086c:	00c00044 	movi	r3,1
  110870:	10fd4526 	beq	r2,r3,10fd88 <__alt_data_end+0xfffcfd88>
  110874:	00c00084 	movi	r3,2
  110878:	10fc5226 	beq	r2,r3,10f9c4 <__alt_data_end+0xfffcf9c4>
  11087c:	003c9c06 	br	10faf0 <__alt_data_end+0xfffcfaf0>
  110880:	1021883a 	mov	r16,r2
  110884:	002b883a 	mov	r21,zero
  110888:	00800084 	movi	r2,2
  11088c:	003ff606 	br	110868 <__alt_data_end+0xfffd0868>
  110890:	010004b4 	movhi	r4,18
  110894:	210dc004 	addi	r4,r4,14080
  110898:	d9002815 	stw	r4,160(sp)
  11089c:	003e7206 	br	110268 <__alt_data_end+0xfffd0268>
  1108a0:	014004b4 	movhi	r5,18
  1108a4:	294dbc04 	addi	r5,r5,14064
  1108a8:	d9402115 	stw	r5,132(sp)
  1108ac:	003ec506 	br	1103c4 <__alt_data_end+0xfffd03c4>
  1108b0:	e027883a 	mov	r19,fp
  1108b4:	d8002015 	stw	zero,128(sp)
  1108b8:	003b9406 	br	10f70c <__alt_data_end+0xfffcf70c>
  1108bc:	dd002017 	ldw	r20,128(sp)
  1108c0:	dd401d83 	ldbu	r21,118(sp)
  1108c4:	ddc02415 	stw	r23,144(sp)
  1108c8:	d8002015 	stw	zero,128(sp)
  1108cc:	003c6606 	br	10fa68 <__alt_data_end+0xfffcfa68>
  1108d0:	0025883a 	mov	r18,zero
  1108d4:	003fbd06 	br	1107cc <__alt_data_end+0xfffd07cc>
  1108d8:	d9402417 	ldw	r5,144(sp)
  1108dc:	d8c02417 	ldw	r3,144(sp)
  1108e0:	29400017 	ldw	r5,0(r5)
  1108e4:	19000104 	addi	r4,r3,4
  1108e8:	d9002415 	stw	r4,144(sp)
  1108ec:	d9402015 	stw	r5,128(sp)
  1108f0:	98c00043 	ldbu	r3,1(r19)
  1108f4:	e027883a 	mov	r19,fp
  1108f8:	283f5b0e 	bge	r5,zero,110668 <__alt_data_end+0xfffd0668>
  1108fc:	18c03fcc 	andi	r3,r3,255
  110900:	013fffc4 	movi	r4,-1
  110904:	18c0201c 	xori	r3,r3,128
  110908:	d9002015 	stw	r4,128(sp)
  11090c:	18ffe004 	addi	r3,r3,-128
  110910:	003b7d06 	br	10f708 <__alt_data_end+0xfffcf708>
  110914:	dd401d85 	stb	r21,118(sp)
  110918:	003cf306 	br	10fce8 <__alt_data_end+0xfffcfce8>
  11091c:	dd401d85 	stb	r21,118(sp)
  110920:	003d4e06 	br	10fe5c <__alt_data_end+0xfffcfe5c>
  110924:	dd401d85 	stb	r21,118(sp)
  110928:	003c0e06 	br	10f964 <__alt_data_end+0xfffcf964>
  11092c:	d9002717 	ldw	r4,156(sp)
  110930:	00800304 	movi	r2,12
  110934:	20800015 	stw	r2,0(r4)
  110938:	00bfffc4 	movi	r2,-1
  11093c:	003e6b06 	br	1102ec <__alt_data_end+0xfffd02ec>
  110940:	dd401d85 	stb	r21,118(sp)
  110944:	003d0006 	br	10fd48 <__alt_data_end+0xfffcfd48>
  110948:	dd401d85 	stb	r21,118(sp)
  11094c:	003d7106 	br	10ff14 <__alt_data_end+0xfffcff14>
  110950:	dd401d85 	stb	r21,118(sp)
  110954:	003c5706 	br	10fab4 <__alt_data_end+0xfffcfab4>
  110958:	dd401d85 	stb	r21,118(sp)
  11095c:	003c2e06 	br	10fa18 <__alt_data_end+0xfffcfa18>
  110960:	dd401d85 	stb	r21,118(sp)
  110964:	003d8c06 	br	10ff98 <__alt_data_end+0xfffcff98>
  110968:	dd401d85 	stb	r21,118(sp)
  11096c:	003da706 	br	11000c <__alt_data_end+0xfffd000c>
  110970:	dd401d85 	stb	r21,118(sp)
  110974:	003cc806 	br	10fc98 <__alt_data_end+0xfffcfc98>

00110978 <_sungetc_r>:
  110978:	00bfffc4 	movi	r2,-1
  11097c:	28803726 	beq	r5,r2,110a5c <_sungetc_r+0xe4>
  110980:	3080030b 	ldhu	r2,12(r6)
  110984:	30c00c17 	ldw	r3,48(r6)
  110988:	defffc04 	addi	sp,sp,-16
  11098c:	10bff7cc 	andi	r2,r2,65503
  110990:	dc800215 	stw	r18,8(sp)
  110994:	dfc00315 	stw	ra,12(sp)
  110998:	dc400115 	stw	r17,4(sp)
  11099c:	dc000015 	stw	r16,0(sp)
  1109a0:	3080030d 	sth	r2,12(r6)
  1109a4:	2c803fcc 	andi	r18,r5,255
  1109a8:	18001826 	beq	r3,zero,110a0c <_sungetc_r+0x94>
  1109ac:	30c00117 	ldw	r3,4(r6)
  1109b0:	30800d17 	ldw	r2,52(r6)
  1109b4:	3021883a 	mov	r16,r6
  1109b8:	2823883a 	mov	r17,r5
  1109bc:	18800e0e 	bge	r3,r2,1109f8 <_sungetc_r+0x80>
  1109c0:	80c00017 	ldw	r3,0(r16)
  1109c4:	9005883a 	mov	r2,r18
  1109c8:	193fffc4 	addi	r4,r3,-1
  1109cc:	81000015 	stw	r4,0(r16)
  1109d0:	1c7fffc5 	stb	r17,-1(r3)
  1109d4:	80c00117 	ldw	r3,4(r16)
  1109d8:	18c00044 	addi	r3,r3,1
  1109dc:	80c00115 	stw	r3,4(r16)
  1109e0:	dfc00317 	ldw	ra,12(sp)
  1109e4:	dc800217 	ldw	r18,8(sp)
  1109e8:	dc400117 	ldw	r17,4(sp)
  1109ec:	dc000017 	ldw	r16,0(sp)
  1109f0:	dec00404 	addi	sp,sp,16
  1109f4:	f800283a 	ret
  1109f8:	300b883a 	mov	r5,r6
  1109fc:	0111d3c0 	call	111d3c <__submore>
  110a00:	103fef26 	beq	r2,zero,1109c0 <__alt_data_end+0xfffd09c0>
  110a04:	00bfffc4 	movi	r2,-1
  110a08:	003ff506 	br	1109e0 <__alt_data_end+0xfffd09e0>
  110a0c:	30c00417 	ldw	r3,16(r6)
  110a10:	30800017 	ldw	r2,0(r6)
  110a14:	18000326 	beq	r3,zero,110a24 <_sungetc_r+0xac>
  110a18:	1880022e 	bgeu	r3,r2,110a24 <_sungetc_r+0xac>
  110a1c:	10ffffc3 	ldbu	r3,-1(r2)
  110a20:	90c01026 	beq	r18,r3,110a64 <_sungetc_r+0xec>
  110a24:	31c00117 	ldw	r7,4(r6)
  110a28:	30800e15 	stw	r2,56(r6)
  110a2c:	008000c4 	movi	r2,3
  110a30:	31001004 	addi	r4,r6,64
  110a34:	30c01084 	addi	r3,r6,66
  110a38:	30800d15 	stw	r2,52(r6)
  110a3c:	00800044 	movi	r2,1
  110a40:	30800115 	stw	r2,4(r6)
  110a44:	31c00f15 	stw	r7,60(r6)
  110a48:	31000c15 	stw	r4,48(r6)
  110a4c:	31401085 	stb	r5,66(r6)
  110a50:	30c00015 	stw	r3,0(r6)
  110a54:	9005883a 	mov	r2,r18
  110a58:	003fe106 	br	1109e0 <__alt_data_end+0xfffd09e0>
  110a5c:	00bfffc4 	movi	r2,-1
  110a60:	f800283a 	ret
  110a64:	30c00117 	ldw	r3,4(r6)
  110a68:	10bfffc4 	addi	r2,r2,-1
  110a6c:	30800015 	stw	r2,0(r6)
  110a70:	18800044 	addi	r2,r3,1
  110a74:	30800115 	stw	r2,4(r6)
  110a78:	9005883a 	mov	r2,r18
  110a7c:	003fd806 	br	1109e0 <__alt_data_end+0xfffd09e0>

00110a80 <__ssrefill_r>:
  110a80:	defffe04 	addi	sp,sp,-8
  110a84:	dc000015 	stw	r16,0(sp)
  110a88:	2821883a 	mov	r16,r5
  110a8c:	29400c17 	ldw	r5,48(r5)
  110a90:	dfc00115 	stw	ra,4(sp)
  110a94:	28000e26 	beq	r5,zero,110ad0 <__ssrefill_r+0x50>
  110a98:	80801004 	addi	r2,r16,64
  110a9c:	28800126 	beq	r5,r2,110aa4 <__ssrefill_r+0x24>
  110aa0:	010a0680 	call	10a068 <_free_r>
  110aa4:	80800f17 	ldw	r2,60(r16)
  110aa8:	80000c15 	stw	zero,48(r16)
  110aac:	80800115 	stw	r2,4(r16)
  110ab0:	10000726 	beq	r2,zero,110ad0 <__ssrefill_r+0x50>
  110ab4:	80c00e17 	ldw	r3,56(r16)
  110ab8:	0005883a 	mov	r2,zero
  110abc:	80c00015 	stw	r3,0(r16)
  110ac0:	dfc00117 	ldw	ra,4(sp)
  110ac4:	dc000017 	ldw	r16,0(sp)
  110ac8:	dec00204 	addi	sp,sp,8
  110acc:	f800283a 	ret
  110ad0:	8080030b 	ldhu	r2,12(r16)
  110ad4:	80c00417 	ldw	r3,16(r16)
  110ad8:	80000115 	stw	zero,4(r16)
  110adc:	10800814 	ori	r2,r2,32
  110ae0:	8080030d 	sth	r2,12(r16)
  110ae4:	80c00015 	stw	r3,0(r16)
  110ae8:	00bfffc4 	movi	r2,-1
  110aec:	003ff406 	br	110ac0 <__alt_data_end+0xfffd0ac0>

00110af0 <_sfread_r>:
  110af0:	defff704 	addi	sp,sp,-36
  110af4:	dd000415 	stw	r20,16(sp)
  110af8:	dcc00315 	stw	r19,12(sp)
  110afc:	2029883a 	mov	r20,r4
  110b00:	2827883a 	mov	r19,r5
  110b04:	3809883a 	mov	r4,r7
  110b08:	300b883a 	mov	r5,r6
  110b0c:	ddc00715 	stw	r23,28(sp)
  110b10:	dd400515 	stw	r21,20(sp)
  110b14:	dc400115 	stw	r17,4(sp)
  110b18:	dfc00815 	stw	ra,32(sp)
  110b1c:	dd800615 	stw	r22,24(sp)
  110b20:	dc800215 	stw	r18,8(sp)
  110b24:	dc000015 	stw	r16,0(sp)
  110b28:	302f883a 	mov	r23,r6
  110b2c:	382b883a 	mov	r21,r7
  110b30:	01159fc0 	call	1159fc <__mulsi3>
  110b34:	dc400917 	ldw	r17,36(sp)
  110b38:	10002726 	beq	r2,zero,110bd8 <_sfread_r+0xe8>
  110b3c:	102d883a 	mov	r22,r2
  110b40:	1025883a 	mov	r18,r2
  110b44:	00000b06 	br	110b74 <_sfread_r+0x84>
  110b48:	010157c0 	call	10157c <memcpy>
  110b4c:	88800017 	ldw	r2,0(r17)
  110b50:	9c27883a 	add	r19,r19,r16
  110b54:	9425c83a 	sub	r18,r18,r16
  110b58:	1421883a 	add	r16,r2,r16
  110b5c:	88000115 	stw	zero,4(r17)
  110b60:	880b883a 	mov	r5,r17
  110b64:	8c000015 	stw	r16,0(r17)
  110b68:	a009883a 	mov	r4,r20
  110b6c:	0110a800 	call	110a80 <__ssrefill_r>
  110b70:	10001b1e 	bne	r2,zero,110be0 <_sfread_r+0xf0>
  110b74:	8c000117 	ldw	r16,4(r17)
  110b78:	9809883a 	mov	r4,r19
  110b7c:	89400017 	ldw	r5,0(r17)
  110b80:	800d883a 	mov	r6,r16
  110b84:	84bff036 	bltu	r16,r18,110b48 <__alt_data_end+0xfffd0b48>
  110b88:	900d883a 	mov	r6,r18
  110b8c:	010157c0 	call	10157c <memcpy>
  110b90:	88c00117 	ldw	r3,4(r17)
  110b94:	89000017 	ldw	r4,0(r17)
  110b98:	a805883a 	mov	r2,r21
  110b9c:	1c87c83a 	sub	r3,r3,r18
  110ba0:	24a5883a 	add	r18,r4,r18
  110ba4:	88c00115 	stw	r3,4(r17)
  110ba8:	8c800015 	stw	r18,0(r17)
  110bac:	dfc00817 	ldw	ra,32(sp)
  110bb0:	ddc00717 	ldw	r23,28(sp)
  110bb4:	dd800617 	ldw	r22,24(sp)
  110bb8:	dd400517 	ldw	r21,20(sp)
  110bbc:	dd000417 	ldw	r20,16(sp)
  110bc0:	dcc00317 	ldw	r19,12(sp)
  110bc4:	dc800217 	ldw	r18,8(sp)
  110bc8:	dc400117 	ldw	r17,4(sp)
  110bcc:	dc000017 	ldw	r16,0(sp)
  110bd0:	dec00904 	addi	sp,sp,36
  110bd4:	f800283a 	ret
  110bd8:	0005883a 	mov	r2,zero
  110bdc:	003ff306 	br	110bac <__alt_data_end+0xfffd0bac>
  110be0:	b80b883a 	mov	r5,r23
  110be4:	b489c83a 	sub	r4,r22,r18
  110be8:	01159400 	call	115940 <__udivsi3>
  110bec:	003fef06 	br	110bac <__alt_data_end+0xfffd0bac>

00110bf0 <__ssvfiscanf_r>:
  110bf0:	2880030b 	ldhu	r2,12(r5)
  110bf4:	deff9b04 	addi	sp,sp,-404
  110bf8:	dd005f15 	stw	r20,380(sp)
  110bfc:	dc405c15 	stw	r17,368(sp)
  110c00:	dfc06415 	stw	ra,400(sp)
  110c04:	df006315 	stw	fp,396(sp)
  110c08:	ddc06215 	stw	r23,392(sp)
  110c0c:	dd806115 	stw	r22,388(sp)
  110c10:	dd406015 	stw	r21,384(sp)
  110c14:	dcc05e15 	stw	r19,376(sp)
  110c18:	dc805d15 	stw	r18,372(sp)
  110c1c:	dc005b15 	stw	r16,364(sp)
  110c20:	10c8000c 	andi	r3,r2,8192
  110c24:	d9c04f15 	stw	r7,316(sp)
  110c28:	2829883a 	mov	r20,r5
  110c2c:	2023883a 	mov	r17,r4
  110c30:	1800061e 	bne	r3,zero,110c4c <__ssvfiscanf_r+0x5c>
  110c34:	29001917 	ldw	r4,100(r5)
  110c38:	00f7ffc4 	movi	r3,-8193
  110c3c:	10880014 	ori	r2,r2,8192
  110c40:	20c6703a 	and	r3,r4,r3
  110c44:	2880030d 	sth	r2,12(r5)
  110c48:	28c01915 	stw	r3,100(r5)
  110c4c:	30800003 	ldbu	r2,0(r6)
  110c50:	dac04104 	addi	r11,sp,260
  110c54:	0039883a 	mov	fp,zero
  110c58:	048004b4 	movhi	r18,18
  110c5c:	d8005215 	stw	zero,328(sp)
  110c60:	d8005015 	stw	zero,320(sp)
  110c64:	d8005115 	stw	zero,324(sp)
  110c68:	dac04e15 	stw	r11,312(sp)
  110c6c:	d8804d15 	stw	r2,308(sp)
  110c70:	e027883a 	mov	r19,fp
  110c74:	94957204 	addi	r18,r18,21960
  110c78:	a039883a 	mov	fp,r20
  110c7c:	35000044 	addi	r20,r6,1
  110c80:	10001e26 	beq	r2,zero,110cfc <__ssvfiscanf_r+0x10c>
  110c84:	95800017 	ldw	r22,0(r18)
  110c88:	b087883a 	add	r3,r22,r2
  110c8c:	18c00043 	ldbu	r3,1(r3)
  110c90:	18c0020c 	andi	r3,r3,8
  110c94:	18001b26 	beq	r3,zero,110d04 <__ssvfiscanf_r+0x114>
  110c98:	e0800117 	ldw	r2,4(fp)
  110c9c:	00800e0e 	bge	zero,r2,110cd8 <__ssvfiscanf_r+0xe8>
  110ca0:	e0c00017 	ldw	r3,0(fp)
  110ca4:	91000017 	ldw	r4,0(r18)
  110ca8:	18800003 	ldbu	r2,0(r3)
  110cac:	2085883a 	add	r2,r4,r2
  110cb0:	10800043 	ldbu	r2,1(r2)
  110cb4:	1080020c 	andi	r2,r2,8
  110cb8:	10000b26 	beq	r2,zero,110ce8 <__ssvfiscanf_r+0xf8>
  110cbc:	e0800117 	ldw	r2,4(fp)
  110cc0:	18c00044 	addi	r3,r3,1
  110cc4:	e0c00015 	stw	r3,0(fp)
  110cc8:	10bfffc4 	addi	r2,r2,-1
  110ccc:	e0800115 	stw	r2,4(fp)
  110cd0:	9cc00044 	addi	r19,r19,1
  110cd4:	00bff216 	blt	zero,r2,110ca0 <__alt_data_end+0xfffd0ca0>
  110cd8:	e00b883a 	mov	r5,fp
  110cdc:	8809883a 	mov	r4,r17
  110ce0:	0110a800 	call	110a80 <__ssrefill_r>
  110ce4:	103fee26 	beq	r2,zero,110ca0 <__alt_data_end+0xfffd0ca0>
  110ce8:	a00d883a 	mov	r6,r20
  110cec:	30800003 	ldbu	r2,0(r6)
  110cf0:	35000044 	addi	r20,r6,1
  110cf4:	d8804d15 	stw	r2,308(sp)
  110cf8:	103fe21e 	bne	r2,zero,110c84 <__alt_data_end+0xfffd0c84>
  110cfc:	d8805117 	ldw	r2,324(sp)
  110d00:	00009a06 	br	110f6c <__ssvfiscanf_r+0x37c>
  110d04:	00c00944 	movi	r3,37
  110d08:	10c0891e 	bne	r2,r3,110f30 <__ssvfiscanf_r+0x340>
  110d0c:	31800043 	ldbu	r6,1(r6)
  110d10:	002f883a 	mov	r23,zero
  110d14:	b809883a 	mov	r4,r23
  110d18:	0021883a 	mov	r16,zero
  110d1c:	01c01e04 	movi	r7,120
  110d20:	00c01b04 	movi	r3,108
  110d24:	302f883a 	mov	r23,r6
  110d28:	a5400044 	addi	r21,r20,1
  110d2c:	3dc0e436 	bltu	r7,r23,1110c0 <__ssvfiscanf_r+0x4d0>
  110d30:	b80490ba 	slli	r2,r23,2
  110d34:	01400474 	movhi	r5,17
  110d38:	29435204 	addi	r5,r5,3400
  110d3c:	1145883a 	add	r2,r2,r5
  110d40:	10800017 	ldw	r2,0(r2)
  110d44:	1000683a 	jmp	r2
  110d48:	00110f68 	cmpgeui	zero,zero,17469
  110d4c:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110d50:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110d54:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110d58:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110d5c:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110d60:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110d64:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110d68:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110d6c:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110d70:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110d74:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110d78:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110d7c:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110d80:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110d84:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110d88:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110d8c:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110d90:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110d94:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110d98:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110d9c:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110da0:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110da4:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110da8:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110dac:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110db0:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110db4:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110db8:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110dbc:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110dc0:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110dc4:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110dc8:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110dcc:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110dd0:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110dd4:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110dd8:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110ddc:	00110f2c 	andhi	zero,zero,17468
  110de0:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110de4:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110de8:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110dec:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110df0:	00111304 	movi	zero,17484
  110df4:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110df8:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110dfc:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110e00:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110e04:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110e08:	00111270 	cmpltui	zero,zero,17481
  110e0c:	00111270 	cmpltui	zero,zero,17481
  110e10:	00111270 	cmpltui	zero,zero,17481
  110e14:	00111270 	cmpltui	zero,zero,17481
  110e18:	00111270 	cmpltui	zero,zero,17481
  110e1c:	00111270 	cmpltui	zero,zero,17481
  110e20:	00111270 	cmpltui	zero,zero,17481
  110e24:	00111270 	cmpltui	zero,zero,17481
  110e28:	00111270 	cmpltui	zero,zero,17481
  110e2c:	00111270 	cmpltui	zero,zero,17481
  110e30:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110e34:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110e38:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110e3c:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110e40:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110e44:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110e48:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110e4c:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110e50:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110e54:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110e58:	00111244 	movi	zero,17481
  110e5c:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110e60:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110e64:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110e68:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110e6c:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110e70:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110e74:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110e78:	001112c8 	cmpgei	zero,zero,17483
  110e7c:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110e80:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110e84:	001112a0 	cmpeqi	zero,zero,17482
  110e88:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110e8c:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110e90:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110e94:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110e98:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110e9c:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110ea0:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110ea4:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110ea8:	001112dc 	xori	zero,zero,17483
  110eac:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110eb0:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110eb4:	001111b8 	rdprs	zero,zero,17478
  110eb8:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110ebc:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110ec0:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110ec4:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110ec8:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110ecc:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110ed0:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110ed4:	0011113c 	xorhi	zero,zero,17476
  110ed8:	00111114 	movui	zero,17476
  110edc:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110ee0:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110ee4:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110ee8:	00111100 	call	11110 <OSCtxSw_SWITCH_PC+0x110d0>
  110eec:	00111318 	cmpnei	zero,zero,17484
  110ef0:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110ef4:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110ef8:	001110a8 	cmpgeui	zero,zero,17474
  110efc:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110f00:	0011107c 	xorhi	zero,zero,17473
  110f04:	00111054 	movui	zero,17473
  110f08:	00111028 	cmpgeui	zero,zero,17472
  110f0c:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110f10:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110f14:	00111014 	movui	zero,17472
  110f18:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110f1c:	00110f9c 	xori	zero,zero,17470
  110f20:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110f24:	001110c0 	call	1110c <OSCtxSw_SWITCH_PC+0x110cc>
  110f28:	001112dc 	xori	zero,zero,17483
  110f2c:	a829883a 	mov	r20,r21
  110f30:	e0800117 	ldw	r2,4(fp)
  110f34:	0081e40e 	bge	zero,r2,1116c8 <__ssvfiscanf_r+0xad8>
  110f38:	e0800017 	ldw	r2,0(fp)
  110f3c:	a0ffffc3 	ldbu	r3,-1(r20)
  110f40:	11000003 	ldbu	r4,0(r2)
  110f44:	20ff6d1e 	bne	r4,r3,110cfc <__alt_data_end+0xfffd0cfc>
  110f48:	e0c00117 	ldw	r3,4(fp)
  110f4c:	10800044 	addi	r2,r2,1
  110f50:	e0800015 	stw	r2,0(fp)
  110f54:	18bfffc4 	addi	r2,r3,-1
  110f58:	e0800115 	stw	r2,4(fp)
  110f5c:	9cc00044 	addi	r19,r19,1
  110f60:	a00d883a 	mov	r6,r20
  110f64:	003f6106 	br	110cec <__alt_data_end+0xfffd0cec>
  110f68:	00bfffc4 	movi	r2,-1
  110f6c:	dfc06417 	ldw	ra,400(sp)
  110f70:	df006317 	ldw	fp,396(sp)
  110f74:	ddc06217 	ldw	r23,392(sp)
  110f78:	dd806117 	ldw	r22,388(sp)
  110f7c:	dd406017 	ldw	r21,384(sp)
  110f80:	dd005f17 	ldw	r20,380(sp)
  110f84:	dcc05e17 	ldw	r19,376(sp)
  110f88:	dc805d17 	ldw	r18,372(sp)
  110f8c:	dc405c17 	ldw	r17,368(sp)
  110f90:	dc005b17 	ldw	r16,364(sp)
  110f94:	dec06504 	addi	sp,sp,404
  110f98:	f800283a 	ret
  110f9c:	e0800117 	ldw	r2,4(fp)
  110fa0:	202f883a 	mov	r23,r4
  110fa4:	0081f20e 	bge	zero,r2,111770 <__ssvfiscanf_r+0xb80>
  110fa8:	00800474 	movhi	r2,17
  110fac:	10bb9504 	addi	r2,r2,-4524
  110fb0:	02c00284 	movi	r11,10
  110fb4:	d8805215 	stw	r2,328(sp)
  110fb8:	dac05015 	stw	r11,320(sp)
  110fbc:	050000c4 	movi	r20,3
  110fc0:	e0800017 	ldw	r2,0(fp)
  110fc4:	00000206 	br	110fd0 <__ssvfiscanf_r+0x3e0>
  110fc8:	10800044 	addi	r2,r2,1
  110fcc:	e0800015 	stw	r2,0(fp)
  110fd0:	11000003 	ldbu	r4,0(r2)
  110fd4:	20c03fcc 	andi	r3,r4,255
  110fd8:	b0c7883a 	add	r3,r22,r3
  110fdc:	18c00043 	ldbu	r3,1(r3)
  110fe0:	1940020c 	andi	r5,r3,8
  110fe4:	2801ee26 	beq	r5,zero,1117a0 <__ssvfiscanf_r+0xbb0>
  110fe8:	e0c00117 	ldw	r3,4(fp)
  110fec:	9cc00044 	addi	r19,r19,1
  110ff0:	18ffffc4 	addi	r3,r3,-1
  110ff4:	e0c00115 	stw	r3,4(fp)
  110ff8:	00fff316 	blt	zero,r3,110fc8 <__alt_data_end+0xfffd0fc8>
  110ffc:	e00b883a 	mov	r5,fp
  111000:	8809883a 	mov	r4,r17
  111004:	0110a800 	call	110a80 <__ssrefill_r>
  111008:	10016a1e 	bne	r2,zero,1115b4 <__ssvfiscanf_r+0x9c4>
  11100c:	95800017 	ldw	r22,0(r18)
  111010:	003feb06 	br	110fc0 <__alt_data_end+0xfffd0fc0>
  111014:	e0800117 	ldw	r2,4(fp)
  111018:	202f883a 	mov	r23,r4
  11101c:	0081c80e 	bge	zero,r2,111740 <__ssvfiscanf_r+0xb50>
  111020:	05000084 	movi	r20,2
  111024:	003fe606 	br	110fc0 <__alt_data_end+0xfffd0fc0>
  111028:	e0800117 	ldw	r2,4(fp)
  11102c:	202f883a 	mov	r23,r4
  111030:	84008814 	ori	r16,r16,544
  111034:	0080ad0e 	bge	zero,r2,1112ec <__ssvfiscanf_r+0x6fc>
  111038:	00800474 	movhi	r2,17
  11103c:	10bb9504 	addi	r2,r2,-4524
  111040:	02c00404 	movi	r11,16
  111044:	d8805215 	stw	r2,328(sp)
  111048:	dac05015 	stw	r11,320(sp)
  11104c:	050000c4 	movi	r20,3
  111050:	003fdb06 	br	110fc0 <__alt_data_end+0xfffd0fc0>
  111054:	e0800117 	ldw	r2,4(fp)
  111058:	202f883a 	mov	r23,r4
  11105c:	0080940e 	bge	zero,r2,1112b0 <__ssvfiscanf_r+0x6c0>
  111060:	00800474 	movhi	r2,17
  111064:	10bb9504 	addi	r2,r2,-4524
  111068:	02c00204 	movi	r11,8
  11106c:	d8805215 	stw	r2,328(sp)
  111070:	dac05015 	stw	r11,320(sp)
  111074:	050000c4 	movi	r20,3
  111078:	003fd106 	br	110fc0 <__alt_data_end+0xfffd0fc0>
  11107c:	8080040c 	andi	r2,r16,16
  111080:	1000e41e 	bne	r2,zero,111414 <__ssvfiscanf_r+0x824>
  111084:	8080010c 	andi	r2,r16,4
  111088:	10019926 	beq	r2,zero,1116f0 <__ssvfiscanf_r+0xb00>
  11108c:	dac04f17 	ldw	r11,316(sp)
  111090:	a829883a 	mov	r20,r21
  111094:	58800017 	ldw	r2,0(r11)
  111098:	5ac00104 	addi	r11,r11,4
  11109c:	dac04f15 	stw	r11,316(sp)
  1110a0:	14c0000d 	sth	r19,0(r2)
  1110a4:	003f1006 	br	110ce8 <__alt_data_end+0xfffd0ce8>
  1110a8:	a5c00043 	ldbu	r23,1(r20)
  1110ac:	b8c18b26 	beq	r23,r3,1116dc <__ssvfiscanf_r+0xaec>
  1110b0:	a829883a 	mov	r20,r21
  1110b4:	84000054 	ori	r16,r16,1
  1110b8:	a5400044 	addi	r21,r20,1
  1110bc:	3dff1c2e 	bgeu	r7,r23,110d30 <__alt_data_end+0xfffd0d30>
  1110c0:	b80d883a 	mov	r6,r23
  1110c4:	b185883a 	add	r2,r22,r6
  1110c8:	10800043 	ldbu	r2,1(r2)
  1110cc:	00c00044 	movi	r3,1
  1110d0:	202f883a 	mov	r23,r4
  1110d4:	108000cc 	andi	r2,r2,3
  1110d8:	10c17226 	beq	r2,r3,1116a4 <__ssvfiscanf_r+0xab4>
  1110dc:	e0800117 	ldw	r2,4(fp)
  1110e0:	0081730e 	bge	zero,r2,1116b0 <__ssvfiscanf_r+0xac0>
  1110e4:	00800474 	movhi	r2,17
  1110e8:	10ba3704 	addi	r2,r2,-5924
  1110ec:	02c00284 	movi	r11,10
  1110f0:	d8805215 	stw	r2,328(sp)
  1110f4:	dac05015 	stw	r11,320(sp)
  1110f8:	050000c4 	movi	r20,3
  1110fc:	003fb006 	br	110fc0 <__alt_data_end+0xfffd0fc0>
  111100:	a1400043 	ldbu	r5,1(r20)
  111104:	84000114 	ori	r16,r16,4
  111108:	a829883a 	mov	r20,r21
  11110c:	2dc03fcc 	andi	r23,r5,255
  111110:	003f0506 	br	110d28 <__alt_data_end+0xfffd0d28>
  111114:	e0800117 	ldw	r2,4(fp)
  111118:	202f883a 	mov	r23,r4
  11111c:	0081640e 	bge	zero,r2,1116b0 <__ssvfiscanf_r+0xac0>
  111120:	02c00474 	movhi	r11,17
  111124:	5afa3704 	addi	r11,r11,-5924
  111128:	dac05215 	stw	r11,328(sp)
  11112c:	02c00284 	movi	r11,10
  111130:	dac05015 	stw	r11,320(sp)
  111134:	050000c4 	movi	r20,3
  111138:	003fa106 	br	110fc0 <__alt_data_end+0xfffd0fc0>
  11113c:	e0800117 	ldw	r2,4(fp)
  111140:	202f883a 	mov	r23,r4
  111144:	00812c0e 	bge	zero,r2,1115f8 <__ssvfiscanf_r+0xa08>
  111148:	b800011e 	bne	r23,zero,111150 <__ssvfiscanf_r+0x560>
  11114c:	05c00044 	movi	r23,1
  111150:	8080004c 	andi	r2,r16,1
  111154:	1000791e 	bne	r2,zero,11133c <__ssvfiscanf_r+0x74c>
  111158:	8400040c 	andi	r16,r16,16
  11115c:	80013f26 	beq	r16,zero,11165c <__ssvfiscanf_r+0xa6c>
  111160:	0021883a 	mov	r16,zero
  111164:	00000806 	br	111188 <__ssvfiscanf_r+0x598>
  111168:	1887883a 	add	r3,r3,r2
  11116c:	e00b883a 	mov	r5,fp
  111170:	8809883a 	mov	r4,r17
  111174:	e0c00015 	stw	r3,0(fp)
  111178:	80a1883a 	add	r16,r16,r2
  11117c:	b8afc83a 	sub	r23,r23,r2
  111180:	0110a800 	call	110a80 <__ssrefill_r>
  111184:	1001331e 	bne	r2,zero,111654 <__ssvfiscanf_r+0xa64>
  111188:	e0800117 	ldw	r2,4(fp)
  11118c:	e0c00017 	ldw	r3,0(fp)
  111190:	15fff516 	blt	r2,r23,111168 <__alt_data_end+0xfffd1168>
  111194:	15c5c83a 	sub	r2,r2,r23
  111198:	1dd5883a 	add	r10,r3,r23
  11119c:	85e1883a 	add	r16,r16,r23
  1111a0:	e0800115 	stw	r2,4(fp)
  1111a4:	e2800015 	stw	r10,0(fp)
  1111a8:	a829883a 	mov	r20,r21
  1111ac:	9c27883a 	add	r19,r19,r16
  1111b0:	a00d883a 	mov	r6,r20
  1111b4:	003ecd06 	br	110cec <__alt_data_end+0xfffd0cec>
  1111b8:	202f883a 	mov	r23,r4
  1111bc:	a80b883a 	mov	r5,r21
  1111c0:	d9000104 	addi	r4,sp,4
  1111c4:	010d0a40 	call	10d0a4 <__sccl>
  1111c8:	1029883a 	mov	r20,r2
  1111cc:	e0800117 	ldw	r2,4(fp)
  1111d0:	0081620e 	bge	zero,r2,11175c <__ssvfiscanf_r+0xb6c>
  1111d4:	e1000017 	ldw	r4,0(fp)
  1111d8:	20800003 	ldbu	r2,0(r4)
  1111dc:	b8009026 	beq	r23,zero,111420 <__ssvfiscanf_r+0x830>
  1111e0:	8400040c 	andi	r16,r16,16
  1111e4:	80009126 	beq	r16,zero,11142c <__ssvfiscanf_r+0x83c>
  1111e8:	b821883a 	mov	r16,r23
  1111ec:	002b883a 	mov	r21,zero
  1111f0:	00000106 	br	1111f8 <__ssvfiscanf_r+0x608>
  1111f4:	20800003 	ldbu	r2,0(r4)
  1111f8:	10803fcc 	andi	r2,r2,255
  1111fc:	d8c00104 	addi	r3,sp,4
  111200:	1885883a 	add	r2,r3,r2
  111204:	10800007 	ldb	r2,0(r2)
  111208:	10011026 	beq	r2,zero,11164c <__ssvfiscanf_r+0xa5c>
  11120c:	e0800117 	ldw	r2,4(fp)
  111210:	21000044 	addi	r4,r4,1
  111214:	ad400044 	addi	r21,r21,1
  111218:	10bfffc4 	addi	r2,r2,-1
  11121c:	e0800115 	stw	r2,4(fp)
  111220:	e1000015 	stw	r4,0(fp)
  111224:	adc0eb26 	beq	r21,r23,1115d4 <__ssvfiscanf_r+0x9e4>
  111228:	00bff216 	blt	zero,r2,1111f4 <__alt_data_end+0xfffd11f4>
  11122c:	e00b883a 	mov	r5,fp
  111230:	8809883a 	mov	r4,r17
  111234:	0110a800 	call	110a80 <__ssrefill_r>
  111238:	1000e51e 	bne	r2,zero,1115d0 <__ssvfiscanf_r+0x9e0>
  11123c:	e1000017 	ldw	r4,0(fp)
  111240:	003fec06 	br	1111f4 <__alt_data_end+0xfffd11f4>
  111244:	e0800117 	ldw	r2,4(fp)
  111248:	202f883a 	mov	r23,r4
  11124c:	84000054 	ori	r16,r16,1
  111250:	0081170e 	bge	zero,r2,1116b0 <__ssvfiscanf_r+0xac0>
  111254:	00c00474 	movhi	r3,17
  111258:	18fa3704 	addi	r3,r3,-5924
  11125c:	02c00284 	movi	r11,10
  111260:	d8c05215 	stw	r3,328(sp)
  111264:	dac05015 	stw	r11,320(sp)
  111268:	050000c4 	movi	r20,3
  11126c:	003f5406 	br	110fc0 <__alt_data_end+0xfffd0fc0>
  111270:	01400284 	movi	r5,10
  111274:	d8c05a15 	stw	r3,360(sp)
  111278:	d9c05915 	stw	r7,356(sp)
  11127c:	01159fc0 	call	1159fc <__mulsi3>
  111280:	a1400043 	ldbu	r5,1(r20)
  111284:	15c5883a 	add	r2,r2,r23
  111288:	113ff404 	addi	r4,r2,-48
  11128c:	a829883a 	mov	r20,r21
  111290:	2dc03fcc 	andi	r23,r5,255
  111294:	d8c05a17 	ldw	r3,360(sp)
  111298:	d9c05917 	ldw	r7,356(sp)
  11129c:	003ea206 	br	110d28 <__alt_data_end+0xfffd0d28>
  1112a0:	e0800117 	ldw	r2,4(fp)
  1112a4:	202f883a 	mov	r23,r4
  1112a8:	84000054 	ori	r16,r16,1
  1112ac:	00bf6c16 	blt	zero,r2,111060 <__alt_data_end+0xfffd1060>
  1112b0:	e00b883a 	mov	r5,fp
  1112b4:	8809883a 	mov	r4,r17
  1112b8:	0110a800 	call	110a80 <__ssrefill_r>
  1112bc:	1000bd1e 	bne	r2,zero,1115b4 <__ssvfiscanf_r+0x9c4>
  1112c0:	95800017 	ldw	r22,0(r18)
  1112c4:	003f6606 	br	111060 <__alt_data_end+0xfffd1060>
  1112c8:	a1400043 	ldbu	r5,1(r20)
  1112cc:	84000094 	ori	r16,r16,2
  1112d0:	a829883a 	mov	r20,r21
  1112d4:	2dc03fcc 	andi	r23,r5,255
  1112d8:	003e9306 	br	110d28 <__alt_data_end+0xfffd0d28>
  1112dc:	e0800117 	ldw	r2,4(fp)
  1112e0:	202f883a 	mov	r23,r4
  1112e4:	84008014 	ori	r16,r16,512
  1112e8:	00bf5316 	blt	zero,r2,111038 <__alt_data_end+0xfffd1038>
  1112ec:	e00b883a 	mov	r5,fp
  1112f0:	8809883a 	mov	r4,r17
  1112f4:	0110a800 	call	110a80 <__ssrefill_r>
  1112f8:	1000ae1e 	bne	r2,zero,1115b4 <__ssvfiscanf_r+0x9c4>
  1112fc:	95800017 	ldw	r22,0(r18)
  111300:	003f4d06 	br	111038 <__alt_data_end+0xfffd1038>
  111304:	a1400043 	ldbu	r5,1(r20)
  111308:	84000414 	ori	r16,r16,16
  11130c:	a829883a 	mov	r20,r21
  111310:	2dc03fcc 	andi	r23,r5,255
  111314:	003e8406 	br	110d28 <__alt_data_end+0xfffd0d28>
  111318:	e0800117 	ldw	r2,4(fp)
  11131c:	202f883a 	mov	r23,r4
  111320:	0081190e 	bge	zero,r2,111788 <__ssvfiscanf_r+0xb98>
  111324:	00800474 	movhi	r2,17
  111328:	10ba3704 	addi	r2,r2,-5924
  11132c:	d8805215 	stw	r2,328(sp)
  111330:	d8005015 	stw	zero,320(sp)
  111334:	050000c4 	movi	r20,3
  111338:	003f2106 	br	110fc0 <__alt_data_end+0xfffd0fc0>
  11133c:	d8c04b04 	addi	r3,sp,300
  111340:	8400040c 	andi	r16,r16,16
  111344:	01800204 	movi	r6,8
  111348:	000b883a 	mov	r5,zero
  11134c:	1809883a 	mov	r4,r3
  111350:	dc005415 	stw	r16,336(sp)
  111354:	d8c05315 	stw	r3,332(sp)
  111358:	01016c40 	call	1016c4 <memset>
  11135c:	dc005417 	ldw	r16,336(sp)
  111360:	8000a026 	beq	r16,zero,1115e4 <__ssvfiscanf_r+0x9f4>
  111364:	002d883a 	mov	r22,zero
  111368:	0021883a 	mov	r16,zero
  11136c:	010aa800 	call	10aa80 <__locale_mb_cur_max>
  111370:	14009026 	beq	r2,r16,1115b4 <__ssvfiscanf_r+0x9c4>
  111374:	e0800017 	ldw	r2,0(fp)
  111378:	e0c00117 	ldw	r3,4(fp)
  11137c:	dac05317 	ldw	r11,332(sp)
  111380:	12000003 	ldbu	r8,0(r2)
  111384:	18ffffc4 	addi	r3,r3,-1
  111388:	10800044 	addi	r2,r2,1
  11138c:	d9004104 	addi	r4,sp,260
  111390:	e0c00115 	stw	r3,4(fp)
  111394:	e0800015 	stw	r2,0(fp)
  111398:	85000044 	addi	r20,r16,1
  11139c:	dac00015 	stw	r11,0(sp)
  1113a0:	2421883a 	add	r16,r4,r16
  1113a4:	200d883a 	mov	r6,r4
  1113a8:	a00f883a 	mov	r7,r20
  1113ac:	b00b883a 	mov	r5,r22
  1113b0:	8809883a 	mov	r4,r17
  1113b4:	82000005 	stb	r8,0(r16)
  1113b8:	010b4fc0 	call	10b4fc <_mbrtowc_r>
  1113bc:	00ffffc4 	movi	r3,-1
  1113c0:	10c07c26 	beq	r2,r3,1115b4 <__ssvfiscanf_r+0x9c4>
  1113c4:	1000911e 	bne	r2,zero,11160c <__ssvfiscanf_r+0xa1c>
  1113c8:	dac05417 	ldw	r11,336(sp)
  1113cc:	5800951e 	bne	r11,zero,111624 <__ssvfiscanf_r+0xa34>
  1113d0:	b0000015 	stw	zero,0(r22)
  1113d4:	9d27883a 	add	r19,r19,r20
  1113d8:	b8ef883a 	add	r23,r23,r3
  1113dc:	b5800104 	addi	r22,r22,4
  1113e0:	e0800117 	ldw	r2,4(fp)
  1113e4:	0021883a 	mov	r16,zero
  1113e8:	00807c16 	blt	zero,r2,1115dc <__ssvfiscanf_r+0x9ec>
  1113ec:	e00b883a 	mov	r5,fp
  1113f0:	8809883a 	mov	r4,r17
  1113f4:	0110a800 	call	110a80 <__ssrefill_r>
  1113f8:	10007826 	beq	r2,zero,1115dc <__ssvfiscanf_r+0x9ec>
  1113fc:	80006d1e 	bne	r16,zero,1115b4 <__ssvfiscanf_r+0x9c4>
  111400:	d8c05417 	ldw	r3,336(sp)
  111404:	1800031e 	bne	r3,zero,111414 <__ssvfiscanf_r+0x824>
  111408:	dac05117 	ldw	r11,324(sp)
  11140c:	5ac00044 	addi	r11,r11,1
  111410:	dac05115 	stw	r11,324(sp)
  111414:	a829883a 	mov	r20,r21
  111418:	a00d883a 	mov	r6,r20
  11141c:	003e3306 	br	110cec <__alt_data_end+0xfffd0cec>
  111420:	8400040c 	andi	r16,r16,16
  111424:	05ffffc4 	movi	r23,-1
  111428:	803f6f1e 	bne	r16,zero,1111e8 <__alt_data_end+0xfffd11e8>
  11142c:	dac04f17 	ldw	r11,316(sp)
  111430:	babfffc4 	addi	r10,r23,-1
  111434:	5d400017 	ldw	r21,0(r11)
  111438:	5c000104 	addi	r16,r11,4
  11143c:	a807883a 	mov	r3,r21
  111440:	aaaf883a 	add	r23,r21,r10
  111444:	00000306 	br	111454 <__ssvfiscanf_r+0x864>
  111448:	e1000017 	ldw	r4,0(fp)
  11144c:	b007883a 	mov	r3,r22
  111450:	20800003 	ldbu	r2,0(r4)
  111454:	10803fcc 	andi	r2,r2,255
  111458:	d9400104 	addi	r5,sp,4
  11145c:	2885883a 	add	r2,r5,r2
  111460:	10800007 	ldb	r2,0(r2)
  111464:	10007726 	beq	r2,zero,111644 <__ssvfiscanf_r+0xa54>
  111468:	e0800117 	ldw	r2,4(fp)
  11146c:	21400044 	addi	r5,r4,1
  111470:	e1400015 	stw	r5,0(fp)
  111474:	10bfffc4 	addi	r2,r2,-1
  111478:	e0800115 	stw	r2,4(fp)
  11147c:	20800003 	ldbu	r2,0(r4)
  111480:	1d800044 	addi	r22,r3,1
  111484:	18800005 	stb	r2,0(r3)
  111488:	1dc00726 	beq	r3,r23,1114a8 <__ssvfiscanf_r+0x8b8>
  11148c:	e0800117 	ldw	r2,4(fp)
  111490:	00bfed16 	blt	zero,r2,111448 <__alt_data_end+0xfffd1448>
  111494:	e00b883a 	mov	r5,fp
  111498:	8809883a 	mov	r4,r17
  11149c:	0110a800 	call	110a80 <__ssrefill_r>
  1114a0:	103fe926 	beq	r2,zero,111448 <__alt_data_end+0xfffd1448>
  1114a4:	ad804326 	beq	r21,r22,1115b4 <__ssvfiscanf_r+0x9c4>
  1114a8:	b56bc83a 	sub	r21,r22,r21
  1114ac:	a83e1326 	beq	r21,zero,110cfc <__alt_data_end+0xfffd0cfc>
  1114b0:	dac05117 	ldw	r11,324(sp)
  1114b4:	b0000005 	stb	zero,0(r22)
  1114b8:	dc004f15 	stw	r16,316(sp)
  1114bc:	5ac00044 	addi	r11,r11,1
  1114c0:	dac05115 	stw	r11,324(sp)
  1114c4:	9d67883a 	add	r19,r19,r21
  1114c8:	a00d883a 	mov	r6,r20
  1114cc:	003e0706 	br	110cec <__alt_data_end+0xfffd0cec>
  1114d0:	d8c04b04 	addi	r3,sp,300
  1114d4:	8400040c 	andi	r16,r16,16
  1114d8:	01800204 	movi	r6,8
  1114dc:	000b883a 	mov	r5,zero
  1114e0:	1809883a 	mov	r4,r3
  1114e4:	d8c05315 	stw	r3,332(sp)
  1114e8:	01016c40 	call	1016c4 <memset>
  1114ec:	8001eb1e 	bne	r16,zero,111c9c <__ssvfiscanf_r+0x10ac>
  1114f0:	dac04f17 	ldw	r11,316(sp)
  1114f4:	5d800017 	ldw	r22,0(r11)
  1114f8:	5ac00104 	addi	r11,r11,4
  1114fc:	dac04f15 	stw	r11,316(sp)
  111500:	000d883a 	mov	r6,zero
  111504:	3029883a 	mov	r20,r6
  111508:	e0800017 	ldw	r2,0(fp)
  11150c:	90c00017 	ldw	r3,0(r18)
  111510:	10800003 	ldbu	r2,0(r2)
  111514:	1885883a 	add	r2,r3,r2
  111518:	10800043 	ldbu	r2,1(r2)
  11151c:	1080020c 	andi	r2,r2,8
  111520:	1001ce1e 	bne	r2,zero,111c5c <__ssvfiscanf_r+0x106c>
  111524:	b801cd26 	beq	r23,zero,111c5c <__ssvfiscanf_r+0x106c>
  111528:	010aa800 	call	10aa80 <__locale_mb_cur_max>
  11152c:	a0802126 	beq	r20,r2,1115b4 <__ssvfiscanf_r+0x9c4>
  111530:	e0800017 	ldw	r2,0(fp)
  111534:	e1000117 	ldw	r4,4(fp)
  111538:	dac05317 	ldw	r11,332(sp)
  11153c:	12000003 	ldbu	r8,0(r2)
  111540:	213fffc4 	addi	r4,r4,-1
  111544:	10800044 	addi	r2,r2,1
  111548:	e1000115 	stw	r4,4(fp)
  11154c:	d9404104 	addi	r5,sp,260
  111550:	e0800015 	stw	r2,0(fp)
  111554:	a0c00044 	addi	r3,r20,1
  111558:	dac00015 	stw	r11,0(sp)
  11155c:	2d29883a 	add	r20,r5,r20
  111560:	180f883a 	mov	r7,r3
  111564:	280d883a 	mov	r6,r5
  111568:	8809883a 	mov	r4,r17
  11156c:	a2000005 	stb	r8,0(r20)
  111570:	b00b883a 	mov	r5,r22
  111574:	d8c05a15 	stw	r3,360(sp)
  111578:	010b4fc0 	call	10b4fc <_mbrtowc_r>
  11157c:	013fffc4 	movi	r4,-1
  111580:	d8c05a17 	ldw	r3,360(sp)
  111584:	11000b26 	beq	r2,r4,1115b4 <__ssvfiscanf_r+0x9c4>
  111588:	1001a226 	beq	r2,zero,111c14 <__ssvfiscanf_r+0x1024>
  11158c:	017fff84 	movi	r5,-2
  111590:	1829883a 	mov	r20,r3
  111594:	1141e51e 	bne	r2,r5,111d2c <__ssvfiscanf_r+0x113c>
  111598:	e0800117 	ldw	r2,4(fp)
  11159c:	00bfda16 	blt	zero,r2,111508 <__alt_data_end+0xfffd1508>
  1115a0:	e00b883a 	mov	r5,fp
  1115a4:	8809883a 	mov	r4,r17
  1115a8:	0110a800 	call	110a80 <__ssrefill_r>
  1115ac:	103fd626 	beq	r2,zero,111508 <__alt_data_end+0xfffd1508>
  1115b0:	a001aa26 	beq	r20,zero,111c5c <__ssvfiscanf_r+0x106c>
  1115b4:	dac05117 	ldw	r11,324(sp)
  1115b8:	583e6b26 	beq	r11,zero,110f68 <__alt_data_end+0xfffd0f68>
  1115bc:	e080030b 	ldhu	r2,12(fp)
  1115c0:	1080100c 	andi	r2,r2,64
  1115c4:	103e681e 	bne	r2,zero,110f68 <__alt_data_end+0xfffd0f68>
  1115c8:	5805883a 	mov	r2,r11
  1115cc:	003e6706 	br	110f6c <__alt_data_end+0xfffd0f6c>
  1115d0:	a821883a 	mov	r16,r21
  1115d4:	802b883a 	mov	r21,r16
  1115d8:	003fba06 	br	1114c4 <__alt_data_end+0xfffd14c4>
  1115dc:	b83f631e 	bne	r23,zero,11136c <__alt_data_end+0xfffd136c>
  1115e0:	003f8706 	br	111400 <__alt_data_end+0xfffd1400>
  1115e4:	dac04f17 	ldw	r11,316(sp)
  1115e8:	5d800017 	ldw	r22,0(r11)
  1115ec:	5ac00104 	addi	r11,r11,4
  1115f0:	dac04f15 	stw	r11,316(sp)
  1115f4:	003f5c06 	br	111368 <__alt_data_end+0xfffd1368>
  1115f8:	e00b883a 	mov	r5,fp
  1115fc:	8809883a 	mov	r4,r17
  111600:	0110a800 	call	110a80 <__ssrefill_r>
  111604:	103ed026 	beq	r2,zero,111148 <__alt_data_end+0xfffd1148>
  111608:	003fea06 	br	1115b4 <__alt_data_end+0xfffd15b4>
  11160c:	00ffff84 	movi	r3,-2
  111610:	10c0071e 	bne	r2,r3,111630 <__ssvfiscanf_r+0xa40>
  111614:	e0800117 	ldw	r2,4(fp)
  111618:	a021883a 	mov	r16,r20
  11161c:	00bf5316 	blt	zero,r2,11136c <__alt_data_end+0xfffd136c>
  111620:	003f7206 	br	1113ec <__alt_data_end+0xfffd13ec>
  111624:	9d27883a 	add	r19,r19,r20
  111628:	bdffffc4 	addi	r23,r23,-1
  11162c:	003f6c06 	br	1113e0 <__alt_data_end+0xfffd13e0>
  111630:	dac05417 	ldw	r11,336(sp)
  111634:	9d27883a 	add	r19,r19,r20
  111638:	bdffffc4 	addi	r23,r23,-1
  11163c:	583f6726 	beq	r11,zero,1113dc <__alt_data_end+0xfffd13dc>
  111640:	003f6706 	br	1113e0 <__alt_data_end+0xfffd13e0>
  111644:	182d883a 	mov	r22,r3
  111648:	003f9706 	br	1114a8 <__alt_data_end+0xfffd14a8>
  11164c:	a83f9d1e 	bne	r21,zero,1114c4 <__alt_data_end+0xfffd14c4>
  111650:	003daa06 	br	110cfc <__alt_data_end+0xfffd0cfc>
  111654:	803ed41e 	bne	r16,zero,1111a8 <__alt_data_end+0xfffd11a8>
  111658:	003fd606 	br	1115b4 <__alt_data_end+0xfffd15b4>
  11165c:	dac04f17 	ldw	r11,316(sp)
  111660:	df000015 	stw	fp,0(sp)
  111664:	b80f883a 	mov	r7,r23
  111668:	59400017 	ldw	r5,0(r11)
  11166c:	01800044 	movi	r6,1
  111670:	8809883a 	mov	r4,r17
  111674:	0110af00 	call	110af0 <_sfread_r>
  111678:	dac04f17 	ldw	r11,316(sp)
  11167c:	58c00104 	addi	r3,r11,4
  111680:	103fcc26 	beq	r2,zero,1115b4 <__alt_data_end+0xfffd15b4>
  111684:	dac05117 	ldw	r11,324(sp)
  111688:	a829883a 	mov	r20,r21
  11168c:	98a7883a 	add	r19,r19,r2
  111690:	5ac00044 	addi	r11,r11,1
  111694:	dac05115 	stw	r11,324(sp)
  111698:	d8c04f15 	stw	r3,316(sp)
  11169c:	a00d883a 	mov	r6,r20
  1116a0:	003d9206 	br	110cec <__alt_data_end+0xfffd0cec>
  1116a4:	e0800117 	ldw	r2,4(fp)
  1116a8:	80e0b03a 	or	r16,r16,r3
  1116ac:	00be8d16 	blt	zero,r2,1110e4 <__alt_data_end+0xfffd10e4>
  1116b0:	e00b883a 	mov	r5,fp
  1116b4:	8809883a 	mov	r4,r17
  1116b8:	0110a800 	call	110a80 <__ssrefill_r>
  1116bc:	103fbd1e 	bne	r2,zero,1115b4 <__alt_data_end+0xfffd15b4>
  1116c0:	95800017 	ldw	r22,0(r18)
  1116c4:	003e8706 	br	1110e4 <__alt_data_end+0xfffd10e4>
  1116c8:	e00b883a 	mov	r5,fp
  1116cc:	8809883a 	mov	r4,r17
  1116d0:	0110a800 	call	110a80 <__ssrefill_r>
  1116d4:	103e1826 	beq	r2,zero,110f38 <__alt_data_end+0xfffd0f38>
  1116d8:	003fb606 	br	1115b4 <__alt_data_end+0xfffd15b4>
  1116dc:	a1400083 	ldbu	r5,2(r20)
  1116e0:	84000094 	ori	r16,r16,2
  1116e4:	a5000084 	addi	r20,r20,2
  1116e8:	2dc03fcc 	andi	r23,r5,255
  1116ec:	003d8e06 	br	110d28 <__alt_data_end+0xfffd0d28>
  1116f0:	8080004c 	andi	r2,r16,1
  1116f4:	10000b1e 	bne	r2,zero,111724 <__ssvfiscanf_r+0xb34>
  1116f8:	8400008c 	andi	r16,r16,2
  1116fc:	80000926 	beq	r16,zero,111724 <__ssvfiscanf_r+0xb34>
  111700:	dac04f17 	ldw	r11,316(sp)
  111704:	9807d7fa 	srai	r3,r19,31
  111708:	a829883a 	mov	r20,r21
  11170c:	58800017 	ldw	r2,0(r11)
  111710:	5ac00104 	addi	r11,r11,4
  111714:	dac04f15 	stw	r11,316(sp)
  111718:	14c00015 	stw	r19,0(r2)
  11171c:	10c00115 	stw	r3,4(r2)
  111720:	003d7106 	br	110ce8 <__alt_data_end+0xfffd0ce8>
  111724:	dac04f17 	ldw	r11,316(sp)
  111728:	a829883a 	mov	r20,r21
  11172c:	58800017 	ldw	r2,0(r11)
  111730:	5ac00104 	addi	r11,r11,4
  111734:	dac04f15 	stw	r11,316(sp)
  111738:	14c00015 	stw	r19,0(r2)
  11173c:	003d6a06 	br	110ce8 <__alt_data_end+0xfffd0ce8>
  111740:	e00b883a 	mov	r5,fp
  111744:	8809883a 	mov	r4,r17
  111748:	0110a800 	call	110a80 <__ssrefill_r>
  11174c:	103f991e 	bne	r2,zero,1115b4 <__alt_data_end+0xfffd15b4>
  111750:	95800017 	ldw	r22,0(r18)
  111754:	05000084 	movi	r20,2
  111758:	003e1906 	br	110fc0 <__alt_data_end+0xfffd0fc0>
  11175c:	e00b883a 	mov	r5,fp
  111760:	8809883a 	mov	r4,r17
  111764:	0110a800 	call	110a80 <__ssrefill_r>
  111768:	103e9a26 	beq	r2,zero,1111d4 <__alt_data_end+0xfffd11d4>
  11176c:	003f9106 	br	1115b4 <__alt_data_end+0xfffd15b4>
  111770:	e00b883a 	mov	r5,fp
  111774:	8809883a 	mov	r4,r17
  111778:	0110a800 	call	110a80 <__ssrefill_r>
  11177c:	103f8d1e 	bne	r2,zero,1115b4 <__alt_data_end+0xfffd15b4>
  111780:	95800017 	ldw	r22,0(r18)
  111784:	003e0806 	br	110fa8 <__alt_data_end+0xfffd0fa8>
  111788:	e00b883a 	mov	r5,fp
  11178c:	8809883a 	mov	r4,r17
  111790:	0110a800 	call	110a80 <__ssrefill_r>
  111794:	103f871e 	bne	r2,zero,1115b4 <__alt_data_end+0xfffd15b4>
  111798:	95800017 	ldw	r22,0(r18)
  11179c:	003ee106 	br	111324 <__alt_data_end+0xfffd1324>
  1117a0:	014000c4 	movi	r5,3
  1117a4:	a140ae1e 	bne	r20,r5,111a60 <__ssvfiscanf_r+0xe70>
  1117a8:	b8ffffc4 	addi	r3,r23,-1
  1117ac:	01400984 	movi	r5,38
  1117b0:	28c0d82e 	bgeu	r5,r3,111b14 <__ssvfiscanf_r+0xf24>
  1117b4:	b9bff644 	addi	r6,r23,-39
  1117b8:	05c009c4 	movi	r23,39
  1117bc:	85836014 	ori	r22,r16,3456
  1117c0:	0021883a 	mov	r16,zero
  1117c4:	a815883a 	mov	r10,r21
  1117c8:	982b883a 	mov	r21,r19
  1117cc:	8027883a 	mov	r19,r16
  1117d0:	dc005017 	ldw	r16,320(sp)
  1117d4:	dd004104 	addi	r20,sp,260
  1117d8:	02401344 	movi	r9,77
  1117dc:	01c08004 	movi	r7,512
  1117e0:	00ff7fc4 	movi	r3,-513
  1117e4:	023fdfc4 	movi	r8,-129
  1117e8:	217ff544 	addi	r5,r4,-43
  1117ec:	29403fcc 	andi	r5,r5,255
  1117f0:	49408836 	bltu	r9,r5,111a14 <__ssvfiscanf_r+0xe24>
  1117f4:	280a90ba 	slli	r5,r5,2
  1117f8:	02c00474 	movhi	r11,17
  1117fc:	5ac60304 	addi	r11,r11,6156
  111800:	2acb883a 	add	r5,r5,r11
  111804:	29400017 	ldw	r5,0(r5)
  111808:	2800683a 	jmp	r5
  11180c:	001119a0 	cmpeqi	zero,zero,17510
  111810:	00111a14 	movui	zero,17512
  111814:	001119a0 	cmpeqi	zero,zero,17510
  111818:	00111a14 	movui	zero,17512
  11181c:	00111a14 	movui	zero,17512
  111820:	001119d0 	cmplti	zero,zero,17511
  111824:	001119b0 	cmpltui	zero,zero,17510
  111828:	001119b0 	cmpltui	zero,zero,17510
  11182c:	001119b0 	cmpltui	zero,zero,17510
  111830:	001119b0 	cmpltui	zero,zero,17510
  111834:	001119b0 	cmpltui	zero,zero,17510
  111838:	001119b0 	cmpltui	zero,zero,17510
  11183c:	001119b0 	cmpltui	zero,zero,17510
  111840:	001119f8 	rdprs	zero,zero,17511
  111844:	001119f8 	rdprs	zero,zero,17511
  111848:	00111a14 	movui	zero,17512
  11184c:	00111a14 	movui	zero,17512
  111850:	00111a14 	movui	zero,17512
  111854:	00111a14 	movui	zero,17512
  111858:	00111a14 	movui	zero,17512
  11185c:	00111a14 	movui	zero,17512
  111860:	00111a14 	movui	zero,17512
  111864:	0011198c 	andi	zero,zero,17510
  111868:	0011198c 	andi	zero,zero,17510
  11186c:	0011198c 	andi	zero,zero,17510
  111870:	0011198c 	andi	zero,zero,17510
  111874:	0011198c 	andi	zero,zero,17510
  111878:	0011198c 	andi	zero,zero,17510
  11187c:	00111a14 	movui	zero,17512
  111880:	00111a14 	movui	zero,17512
  111884:	00111a14 	movui	zero,17512
  111888:	00111a14 	movui	zero,17512
  11188c:	00111a14 	movui	zero,17512
  111890:	00111a14 	movui	zero,17512
  111894:	00111a14 	movui	zero,17512
  111898:	00111a14 	movui	zero,17512
  11189c:	00111a14 	movui	zero,17512
  1118a0:	00111a14 	movui	zero,17512
  1118a4:	00111a14 	movui	zero,17512
  1118a8:	00111a14 	movui	zero,17512
  1118ac:	00111a14 	movui	zero,17512
  1118b0:	00111a14 	movui	zero,17512
  1118b4:	00111a14 	movui	zero,17512
  1118b8:	00111a14 	movui	zero,17512
  1118bc:	00111a14 	movui	zero,17512
  1118c0:	00111944 	movi	zero,17509
  1118c4:	00111a14 	movui	zero,17512
  1118c8:	00111a14 	movui	zero,17512
  1118cc:	00111a14 	movui	zero,17512
  1118d0:	00111a14 	movui	zero,17512
  1118d4:	00111a14 	movui	zero,17512
  1118d8:	00111a14 	movui	zero,17512
  1118dc:	00111a14 	movui	zero,17512
  1118e0:	00111a14 	movui	zero,17512
  1118e4:	0011198c 	andi	zero,zero,17510
  1118e8:	0011198c 	andi	zero,zero,17510
  1118ec:	0011198c 	andi	zero,zero,17510
  1118f0:	0011198c 	andi	zero,zero,17510
  1118f4:	0011198c 	andi	zero,zero,17510
  1118f8:	0011198c 	andi	zero,zero,17510
  1118fc:	00111a14 	movui	zero,17512
  111900:	00111a14 	movui	zero,17512
  111904:	00111a14 	movui	zero,17512
  111908:	00111a14 	movui	zero,17512
  11190c:	00111a14 	movui	zero,17512
  111910:	00111a14 	movui	zero,17512
  111914:	00111a14 	movui	zero,17512
  111918:	00111a14 	movui	zero,17512
  11191c:	00111a14 	movui	zero,17512
  111920:	00111a14 	movui	zero,17512
  111924:	00111a14 	movui	zero,17512
  111928:	00111a14 	movui	zero,17512
  11192c:	00111a14 	movui	zero,17512
  111930:	00111a14 	movui	zero,17512
  111934:	00111a14 	movui	zero,17512
  111938:	00111a14 	movui	zero,17512
  11193c:	00111a14 	movui	zero,17512
  111940:	00111944 	movi	zero,17509
  111944:	b141800c 	andi	r5,r22,1536
  111948:	29c0321e 	bne	r5,r7,111a14 <__ssvfiscanf_r+0xe24>
  11194c:	b0ec703a 	and	r22,r22,r3
  111950:	b5814014 	ori	r22,r22,1280
  111954:	04000404 	movi	r16,16
  111958:	a1000005 	stb	r4,0(r20)
  11195c:	a5000044 	addi	r20,r20,1
  111960:	e1000117 	ldw	r4,4(fp)
  111964:	213fffc4 	addi	r4,r4,-1
  111968:	e1000115 	stw	r4,4(fp)
  11196c:	0100580e 	bge	zero,r4,111ad0 <__ssvfiscanf_r+0xee0>
  111970:	10800044 	addi	r2,r2,1
  111974:	e0800015 	stw	r2,0(fp)
  111978:	bdffffc4 	addi	r23,r23,-1
  11197c:	b8002526 	beq	r23,zero,111a14 <__ssvfiscanf_r+0xe24>
  111980:	e0800017 	ldw	r2,0(fp)
  111984:	11000003 	ldbu	r4,0(r2)
  111988:	003f9706 	br	1117e8 <__alt_data_end+0xfffd17e8>
  11198c:	01400284 	movi	r5,10
  111990:	2c00200e 	bge	r5,r16,111a14 <__ssvfiscanf_r+0xe24>
  111994:	017d1fc4 	movi	r5,-2945
  111998:	b16c703a 	and	r22,r22,r5
  11199c:	003fee06 	br	111958 <__alt_data_end+0xfffd1958>
  1119a0:	b140200c 	andi	r5,r22,128
  1119a4:	28001b26 	beq	r5,zero,111a14 <__ssvfiscanf_r+0xe24>
  1119a8:	b22c703a 	and	r22,r22,r8
  1119ac:	003fea06 	br	111958 <__alt_data_end+0xfffd1958>
  1119b0:	02c004b4 	movhi	r11,18
  1119b4:	8421883a 	add	r16,r16,r16
  1119b8:	5acdc404 	addi	r11,r11,14096
  1119bc:	5c0b883a 	add	r5,r11,r16
  1119c0:	2c00000f 	ldh	r16,0(r5)
  1119c4:	017d1fc4 	movi	r5,-2945
  1119c8:	b16c703a 	and	r22,r22,r5
  1119cc:	003fe206 	br	111958 <__alt_data_end+0xfffd1958>
  1119d0:	b142000c 	andi	r5,r22,2048
  1119d4:	283fe026 	beq	r5,zero,111958 <__alt_data_end+0xfffd1958>
  1119d8:	8000021e 	bne	r16,zero,1119e4 <__ssvfiscanf_r+0xdf4>
  1119dc:	b5808014 	ori	r22,r22,512
  1119e0:	04000204 	movi	r16,8
  1119e4:	b141000c 	andi	r5,r22,1024
  1119e8:	28009f26 	beq	r5,zero,111c68 <__ssvfiscanf_r+0x1078>
  1119ec:	017e9fc4 	movi	r5,-1409
  1119f0:	b16c703a 	and	r22,r22,r5
  1119f4:	003fd806 	br	111958 <__alt_data_end+0xfffd1958>
  1119f8:	02c004b4 	movhi	r11,18
  1119fc:	8421883a 	add	r16,r16,r16
  111a00:	5acdc404 	addi	r11,r11,14096
  111a04:	5c0b883a 	add	r5,r11,r16
  111a08:	2c00000f 	ldh	r16,0(r5)
  111a0c:	01400204 	movi	r5,8
  111a10:	2c3fe016 	blt	r5,r16,111994 <__alt_data_end+0xfffd1994>
  111a14:	dc005015 	stw	r16,320(sp)
  111a18:	b080400c 	andi	r2,r22,256
  111a1c:	9821883a 	mov	r16,r19
  111a20:	a827883a 	mov	r19,r21
  111a24:	502b883a 	mov	r21,r10
  111a28:	10000426 	beq	r2,zero,111a3c <__ssvfiscanf_r+0xe4c>
  111a2c:	dac04e17 	ldw	r11,312(sp)
  111a30:	5d009c36 	bltu	r11,r20,111ca4 <__ssvfiscanf_r+0x10b4>
  111a34:	dac04e17 	ldw	r11,312(sp)
  111a38:	a2fcb026 	beq	r20,r11,110cfc <__alt_data_end+0xfffd0cfc>
  111a3c:	b080040c 	andi	r2,r22,16
  111a40:	10006026 	beq	r2,zero,111bc4 <__ssvfiscanf_r+0xfd4>
  111a44:	dac04e17 	ldw	r11,312(sp)
  111a48:	a2e9c83a 	sub	r20,r20,r11
  111a4c:	a429883a 	add	r20,r20,r16
  111a50:	9d27883a 	add	r19,r19,r20
  111a54:	a829883a 	mov	r20,r21
  111a58:	a00d883a 	mov	r6,r20
  111a5c:	003ca306 	br	110cec <__alt_data_end+0xfffd0cec>
  111a60:	b800011e 	bne	r23,zero,111a68 <__ssvfiscanf_r+0xe78>
  111a64:	05ffffc4 	movi	r23,-1
  111a68:	8100004c 	andi	r4,r16,1
  111a6c:	203e981e 	bne	r4,zero,1114d0 <__alt_data_end+0xfffd14d0>
  111a70:	8400040c 	andi	r16,r16,16
  111a74:	80002926 	beq	r16,zero,111b1c <__ssvfiscanf_r+0xf2c>
  111a78:	0021883a 	mov	r16,zero
  111a7c:	00000306 	br	111a8c <__ssvfiscanf_r+0xe9c>
  111a80:	10c00003 	ldbu	r3,0(r2)
  111a84:	b0c7883a 	add	r3,r22,r3
  111a88:	18c00043 	ldbu	r3,1(r3)
  111a8c:	18c0020c 	andi	r3,r3,8
  111a90:	183dc51e 	bne	r3,zero,1111a8 <__alt_data_end+0xfffd11a8>
  111a94:	e0c00117 	ldw	r3,4(fp)
  111a98:	10800044 	addi	r2,r2,1
  111a9c:	84000044 	addi	r16,r16,1
  111aa0:	18ffffc4 	addi	r3,r3,-1
  111aa4:	e0c00115 	stw	r3,4(fp)
  111aa8:	e0800015 	stw	r2,0(fp)
  111aac:	85fdbe26 	beq	r16,r23,1111a8 <__alt_data_end+0xfffd11a8>
  111ab0:	00fff316 	blt	zero,r3,111a80 <__alt_data_end+0xfffd1a80>
  111ab4:	e00b883a 	mov	r5,fp
  111ab8:	8809883a 	mov	r4,r17
  111abc:	0110a800 	call	110a80 <__ssrefill_r>
  111ac0:	103db91e 	bne	r2,zero,1111a8 <__alt_data_end+0xfffd11a8>
  111ac4:	95800017 	ldw	r22,0(r18)
  111ac8:	e0800017 	ldw	r2,0(fp)
  111acc:	003fec06 	br	111a80 <__alt_data_end+0xfffd1a80>
  111ad0:	e00b883a 	mov	r5,fp
  111ad4:	8809883a 	mov	r4,r17
  111ad8:	d8c05a15 	stw	r3,360(sp)
  111adc:	d9805715 	stw	r6,348(sp)
  111ae0:	d9c05915 	stw	r7,356(sp)
  111ae4:	da005615 	stw	r8,344(sp)
  111ae8:	da405515 	stw	r9,340(sp)
  111aec:	da805815 	stw	r10,352(sp)
  111af0:	0110a800 	call	110a80 <__ssrefill_r>
  111af4:	d8c05a17 	ldw	r3,360(sp)
  111af8:	d9805717 	ldw	r6,348(sp)
  111afc:	d9c05917 	ldw	r7,356(sp)
  111b00:	da005617 	ldw	r8,344(sp)
  111b04:	da405517 	ldw	r9,340(sp)
  111b08:	da805817 	ldw	r10,352(sp)
  111b0c:	103f9a26 	beq	r2,zero,111978 <__alt_data_end+0xfffd1978>
  111b10:	003fc006 	br	111a14 <__alt_data_end+0xfffd1a14>
  111b14:	000d883a 	mov	r6,zero
  111b18:	003f2806 	br	1117bc <__alt_data_end+0xfffd17bc>
  111b1c:	dac04f17 	ldw	r11,316(sp)
  111b20:	babfffc4 	addi	r10,r23,-1
  111b24:	5d000017 	ldw	r20,0(r11)
  111b28:	5c000104 	addi	r16,r11,4
  111b2c:	a00b883a 	mov	r5,r20
  111b30:	a2ad883a 	add	r22,r20,r10
  111b34:	00000606 	br	111b50 <__ssvfiscanf_r+0xf60>
  111b38:	e0800017 	ldw	r2,0(fp)
  111b3c:	91000017 	ldw	r4,0(r18)
  111b40:	b80b883a 	mov	r5,r23
  111b44:	10c00003 	ldbu	r3,0(r2)
  111b48:	20c7883a 	add	r3,r4,r3
  111b4c:	18c00043 	ldbu	r3,1(r3)
  111b50:	18c0020c 	andi	r3,r3,8
  111b54:	2809883a 	mov	r4,r5
  111b58:	1800101e 	bne	r3,zero,111b9c <__ssvfiscanf_r+0xfac>
  111b5c:	e0c00117 	ldw	r3,4(fp)
  111b60:	11800044 	addi	r6,r2,1
  111b64:	e1800015 	stw	r6,0(fp)
  111b68:	18ffffc4 	addi	r3,r3,-1
  111b6c:	e0c00115 	stw	r3,4(fp)
  111b70:	10800003 	ldbu	r2,0(r2)
  111b74:	25c00044 	addi	r23,r4,1
  111b78:	28800005 	stb	r2,0(r5)
  111b7c:	25800626 	beq	r4,r22,111b98 <__ssvfiscanf_r+0xfa8>
  111b80:	e0800117 	ldw	r2,4(fp)
  111b84:	00bfec16 	blt	zero,r2,111b38 <__alt_data_end+0xfffd1b38>
  111b88:	e00b883a 	mov	r5,fp
  111b8c:	8809883a 	mov	r4,r17
  111b90:	0110a800 	call	110a80 <__ssrefill_r>
  111b94:	103fe826 	beq	r2,zero,111b38 <__alt_data_end+0xfffd1b38>
  111b98:	b809883a 	mov	r4,r23
  111b9c:	dac05117 	ldw	r11,324(sp)
  111ba0:	2529c83a 	sub	r20,r4,r20
  111ba4:	9d27883a 	add	r19,r19,r20
  111ba8:	5ac00044 	addi	r11,r11,1
  111bac:	a829883a 	mov	r20,r21
  111bb0:	20000005 	stb	zero,0(r4)
  111bb4:	dac05115 	stw	r11,324(sp)
  111bb8:	dc004f15 	stw	r16,316(sp)
  111bbc:	a00d883a 	mov	r6,r20
  111bc0:	003c4a06 	br	110cec <__alt_data_end+0xfffd0cec>
  111bc4:	d9c05017 	ldw	r7,320(sp)
  111bc8:	dac05217 	ldw	r11,328(sp)
  111bcc:	000d883a 	mov	r6,zero
  111bd0:	d9404104 	addi	r5,sp,260
  111bd4:	8809883a 	mov	r4,r17
  111bd8:	a0000005 	stb	zero,0(r20)
  111bdc:	583ee83a 	callr	r11
  111be0:	b0c0080c 	andi	r3,r22,32
  111be4:	1800271e 	bne	r3,zero,111c84 <__ssvfiscanf_r+0x1094>
  111be8:	b0c0010c 	andi	r3,r22,4
  111bec:	18003326 	beq	r3,zero,111cbc <__ssvfiscanf_r+0x10cc>
  111bf0:	dac04f17 	ldw	r11,316(sp)
  111bf4:	58c00017 	ldw	r3,0(r11)
  111bf8:	5ac00104 	addi	r11,r11,4
  111bfc:	dac04f15 	stw	r11,316(sp)
  111c00:	1880000d 	sth	r2,0(r3)
  111c04:	dac05117 	ldw	r11,324(sp)
  111c08:	5ac00044 	addi	r11,r11,1
  111c0c:	dac05115 	stw	r11,324(sp)
  111c10:	003f8c06 	br	111a44 <__alt_data_end+0xfffd1a44>
  111c14:	b0000015 	stw	zero,0(r22)
  111c18:	0009883a 	mov	r4,zero
  111c1c:	d8c05a15 	stw	r3,360(sp)
  111c20:	010a9c80 	call	10a9c8 <iswspace>
  111c24:	d8c05a17 	ldw	r3,360(sp)
  111c28:	10003826 	beq	r2,zero,111d0c <__ssvfiscanf_r+0x111c>
  111c2c:	18000b26 	beq	r3,zero,111c5c <__ssvfiscanf_r+0x106c>
  111c30:	1d3fffc4 	addi	r20,r3,-1
  111c34:	dac04104 	addi	r11,sp,260
  111c38:	5d2f883a 	add	r23,r11,r20
  111c3c:	00000106 	br	111c44 <__ssvfiscanf_r+0x1054>
  111c40:	a53fffc4 	addi	r20,r20,-1
  111c44:	b9400003 	ldbu	r5,0(r23)
  111c48:	e00d883a 	mov	r6,fp
  111c4c:	8809883a 	mov	r4,r17
  111c50:	01109780 	call	110978 <_sungetc_r>
  111c54:	bdffffc4 	addi	r23,r23,-1
  111c58:	a03ff91e 	bne	r20,zero,111c40 <__alt_data_end+0xfffd1c40>
  111c5c:	803ded1e 	bne	r16,zero,111414 <__alt_data_end+0xfffd1414>
  111c60:	b0000015 	stw	zero,0(r22)
  111c64:	003de806 	br	111408 <__alt_data_end+0xfffd1408>
  111c68:	013f1fc4 	movi	r4,-897
  111c6c:	b12c703a 	and	r22,r22,r4
  111c70:	30000226 	beq	r6,zero,111c7c <__ssvfiscanf_r+0x108c>
  111c74:	31bfffc4 	addi	r6,r6,-1
  111c78:	bdc00044 	addi	r23,r23,1
  111c7c:	9cc00044 	addi	r19,r19,1
  111c80:	003f3706 	br	111960 <__alt_data_end+0xfffd1960>
  111c84:	dac04f17 	ldw	r11,316(sp)
  111c88:	58c00017 	ldw	r3,0(r11)
  111c8c:	5ac00104 	addi	r11,r11,4
  111c90:	dac04f15 	stw	r11,316(sp)
  111c94:	18800015 	stw	r2,0(r3)
  111c98:	003fda06 	br	111c04 <__alt_data_end+0xfffd1c04>
  111c9c:	dd804d04 	addi	r22,sp,308
  111ca0:	003e1706 	br	111500 <__alt_data_end+0xfffd1500>
  111ca4:	a17fffc7 	ldb	r5,-1(r20)
  111ca8:	e00d883a 	mov	r6,fp
  111cac:	8809883a 	mov	r4,r17
  111cb0:	a53fffc4 	addi	r20,r20,-1
  111cb4:	01109780 	call	110978 <_sungetc_r>
  111cb8:	003f5e06 	br	111a34 <__alt_data_end+0xfffd1a34>
  111cbc:	b0c0004c 	andi	r3,r22,1
  111cc0:	183ff01e 	bne	r3,zero,111c84 <__alt_data_end+0xfffd1c84>
  111cc4:	b580008c 	andi	r22,r22,2
  111cc8:	b03fee26 	beq	r22,zero,111c84 <__alt_data_end+0xfffd1c84>
  111ccc:	dac05217 	ldw	r11,328(sp)
  111cd0:	00800474 	movhi	r2,17
  111cd4:	10bb9504 	addi	r2,r2,-4524
  111cd8:	d9c05017 	ldw	r7,320(sp)
  111cdc:	000d883a 	mov	r6,zero
  111ce0:	d9404104 	addi	r5,sp,260
  111ce4:	8809883a 	mov	r4,r17
  111ce8:	58801226 	beq	r11,r2,111d34 <__ssvfiscanf_r+0x1144>
  111cec:	010eb500 	call	10eb50 <_strtoll_r>
  111cf0:	dac04f17 	ldw	r11,316(sp)
  111cf4:	59000017 	ldw	r4,0(r11)
  111cf8:	5ac00104 	addi	r11,r11,4
  111cfc:	dac04f15 	stw	r11,316(sp)
  111d00:	20800015 	stw	r2,0(r4)
  111d04:	20c00115 	stw	r3,4(r4)
  111d08:	003fbe06 	br	111c04 <__alt_data_end+0xfffd1c04>
  111d0c:	98e7883a 	add	r19,r19,r3
  111d10:	bdffffc4 	addi	r23,r23,-1
  111d14:	8000031e 	bne	r16,zero,111d24 <__ssvfiscanf_r+0x1134>
  111d18:	b5800104 	addi	r22,r22,4
  111d1c:	0029883a 	mov	r20,zero
  111d20:	003e1d06 	br	111598 <__alt_data_end+0xfffd1598>
  111d24:	0029883a 	mov	r20,zero
  111d28:	003e1b06 	br	111598 <__alt_data_end+0xfffd1598>
  111d2c:	b1000017 	ldw	r4,0(r22)
  111d30:	003fba06 	br	111c1c <__alt_data_end+0xfffd1c1c>
  111d34:	010f0e80 	call	10f0e8 <_strtoull_r>
  111d38:	003fed06 	br	111cf0 <__alt_data_end+0xfffd1cf0>

00111d3c <__submore>:
  111d3c:	defffa04 	addi	sp,sp,-24
  111d40:	dc000015 	stw	r16,0(sp)
  111d44:	2821883a 	mov	r16,r5
  111d48:	29400c17 	ldw	r5,48(r5)
  111d4c:	dfc00515 	stw	ra,20(sp)
  111d50:	dd000415 	stw	r20,16(sp)
  111d54:	dcc00315 	stw	r19,12(sp)
  111d58:	dc800215 	stw	r18,8(sp)
  111d5c:	dc400115 	stw	r17,4(sp)
  111d60:	80801004 	addi	r2,r16,64
  111d64:	28801726 	beq	r5,r2,111dc4 <__submore+0x88>
  111d68:	84400d17 	ldw	r17,52(r16)
  111d6c:	8c67883a 	add	r19,r17,r17
  111d70:	980d883a 	mov	r6,r19
  111d74:	010ca780 	call	10ca78 <_realloc_r>
  111d78:	1025883a 	mov	r18,r2
  111d7c:	10002226 	beq	r2,zero,111e08 <__submore+0xcc>
  111d80:	1469883a 	add	r20,r2,r17
  111d84:	880d883a 	mov	r6,r17
  111d88:	100b883a 	mov	r5,r2
  111d8c:	a009883a 	mov	r4,r20
  111d90:	010157c0 	call	10157c <memcpy>
  111d94:	0005883a 	mov	r2,zero
  111d98:	85000015 	stw	r20,0(r16)
  111d9c:	84800c15 	stw	r18,48(r16)
  111da0:	84c00d15 	stw	r19,52(r16)
  111da4:	dfc00517 	ldw	ra,20(sp)
  111da8:	dd000417 	ldw	r20,16(sp)
  111dac:	dcc00317 	ldw	r19,12(sp)
  111db0:	dc800217 	ldw	r18,8(sp)
  111db4:	dc400117 	ldw	r17,4(sp)
  111db8:	dc000017 	ldw	r16,0(sp)
  111dbc:	dec00604 	addi	sp,sp,24
  111dc0:	f800283a 	ret
  111dc4:	04410004 	movi	r17,1024
  111dc8:	880b883a 	mov	r5,r17
  111dcc:	010acf00 	call	10acf0 <_malloc_r>
  111dd0:	1007883a 	mov	r3,r2
  111dd4:	10000c26 	beq	r2,zero,111e08 <__submore+0xcc>
  111dd8:	80801083 	ldbu	r2,66(r16)
  111ddc:	80c00c15 	stw	r3,48(r16)
  111de0:	84400d15 	stw	r17,52(r16)
  111de4:	1880ffc5 	stb	r2,1023(r3)
  111de8:	81401043 	ldbu	r5,65(r16)
  111dec:	1900ff44 	addi	r4,r3,1021
  111df0:	0005883a 	mov	r2,zero
  111df4:	1940ff85 	stb	r5,1022(r3)
  111df8:	81401003 	ldbu	r5,64(r16)
  111dfc:	1940ff45 	stb	r5,1021(r3)
  111e00:	81000015 	stw	r4,0(r16)
  111e04:	003fe706 	br	111da4 <__alt_data_end+0xfffd1da4>
  111e08:	00bfffc4 	movi	r2,-1
  111e0c:	003fe506 	br	111da4 <__alt_data_end+0xfffd1da4>

00111e10 <_ungetc_r>:
  111e10:	00bfffc4 	movi	r2,-1
  111e14:	28806126 	beq	r5,r2,111f9c <_ungetc_r+0x18c>
  111e18:	defffb04 	addi	sp,sp,-20
  111e1c:	dcc00315 	stw	r19,12(sp)
  111e20:	dc400115 	stw	r17,4(sp)
  111e24:	dc000015 	stw	r16,0(sp)
  111e28:	dfc00415 	stw	ra,16(sp)
  111e2c:	dc800215 	stw	r18,8(sp)
  111e30:	2023883a 	mov	r17,r4
  111e34:	3021883a 	mov	r16,r6
  111e38:	2827883a 	mov	r19,r5
  111e3c:	20000226 	beq	r4,zero,111e48 <_ungetc_r+0x38>
  111e40:	20800e17 	ldw	r2,56(r4)
  111e44:	10002e26 	beq	r2,zero,111f00 <_ungetc_r+0xf0>
  111e48:	80c0030b 	ldhu	r3,12(r16)
  111e4c:	1888000c 	andi	r2,r3,8192
  111e50:	1000051e 	bne	r2,zero,111e68 <_ungetc_r+0x58>
  111e54:	81001917 	ldw	r4,100(r16)
  111e58:	00b7ffc4 	movi	r2,-8193
  111e5c:	18c80014 	ori	r3,r3,8192
  111e60:	2084703a 	and	r2,r4,r2
  111e64:	80801915 	stw	r2,100(r16)
  111e68:	00bff7c4 	movi	r2,-33
  111e6c:	1884703a 	and	r2,r3,r2
  111e70:	8080030d 	sth	r2,12(r16)
  111e74:	1900010c 	andi	r4,r3,4
  111e78:	2000061e 	bne	r4,zero,111e94 <_ungetc_r+0x84>
  111e7c:	1900040c 	andi	r4,r3,16
  111e80:	20001d26 	beq	r4,zero,111ef8 <_ungetc_r+0xe8>
  111e84:	18c0020c 	andi	r3,r3,8
  111e88:	1800331e 	bne	r3,zero,111f58 <_ungetc_r+0x148>
  111e8c:	10800114 	ori	r2,r2,4
  111e90:	8080030d 	sth	r2,12(r16)
  111e94:	80800c17 	ldw	r2,48(r16)
  111e98:	9c803fcc 	andi	r18,r19,255
  111e9c:	10001a26 	beq	r2,zero,111f08 <_ungetc_r+0xf8>
  111ea0:	80c00117 	ldw	r3,4(r16)
  111ea4:	80800d17 	ldw	r2,52(r16)
  111ea8:	18800f0e 	bge	r3,r2,111ee8 <_ungetc_r+0xd8>
  111eac:	80c00017 	ldw	r3,0(r16)
  111eb0:	9005883a 	mov	r2,r18
  111eb4:	193fffc4 	addi	r4,r3,-1
  111eb8:	81000015 	stw	r4,0(r16)
  111ebc:	1cffffc5 	stb	r19,-1(r3)
  111ec0:	80c00117 	ldw	r3,4(r16)
  111ec4:	18c00044 	addi	r3,r3,1
  111ec8:	80c00115 	stw	r3,4(r16)
  111ecc:	dfc00417 	ldw	ra,16(sp)
  111ed0:	dcc00317 	ldw	r19,12(sp)
  111ed4:	dc800217 	ldw	r18,8(sp)
  111ed8:	dc400117 	ldw	r17,4(sp)
  111edc:	dc000017 	ldw	r16,0(sp)
  111ee0:	dec00504 	addi	sp,sp,20
  111ee4:	f800283a 	ret
  111ee8:	800b883a 	mov	r5,r16
  111eec:	8809883a 	mov	r4,r17
  111ef0:	0111d3c0 	call	111d3c <__submore>
  111ef4:	103fed26 	beq	r2,zero,111eac <__alt_data_end+0xfffd1eac>
  111ef8:	00bfffc4 	movi	r2,-1
  111efc:	003ff306 	br	111ecc <__alt_data_end+0xfffd1ecc>
  111f00:	0109ef40 	call	109ef4 <__sinit>
  111f04:	003fd006 	br	111e48 <__alt_data_end+0xfffd1e48>
  111f08:	80c00417 	ldw	r3,16(r16)
  111f0c:	80800017 	ldw	r2,0(r16)
  111f10:	18000326 	beq	r3,zero,111f20 <_ungetc_r+0x110>
  111f14:	1880022e 	bgeu	r3,r2,111f20 <_ungetc_r+0x110>
  111f18:	10ffffc3 	ldbu	r3,-1(r2)
  111f1c:	90c01826 	beq	r18,r3,111f80 <_ungetc_r+0x170>
  111f20:	81400117 	ldw	r5,4(r16)
  111f24:	80800e15 	stw	r2,56(r16)
  111f28:	008000c4 	movi	r2,3
  111f2c:	81001004 	addi	r4,r16,64
  111f30:	80c01084 	addi	r3,r16,66
  111f34:	80800d15 	stw	r2,52(r16)
  111f38:	00800044 	movi	r2,1
  111f3c:	80800115 	stw	r2,4(r16)
  111f40:	81400f15 	stw	r5,60(r16)
  111f44:	81000c15 	stw	r4,48(r16)
  111f48:	84c01085 	stb	r19,66(r16)
  111f4c:	80c00015 	stw	r3,0(r16)
  111f50:	9005883a 	mov	r2,r18
  111f54:	003fdd06 	br	111ecc <__alt_data_end+0xfffd1ecc>
  111f58:	800b883a 	mov	r5,r16
  111f5c:	8809883a 	mov	r4,r17
  111f60:	0109b080 	call	109b08 <_fflush_r>
  111f64:	103fe41e 	bne	r2,zero,111ef8 <__alt_data_end+0xfffd1ef8>
  111f68:	8080030b 	ldhu	r2,12(r16)
  111f6c:	00fffdc4 	movi	r3,-9
  111f70:	80000215 	stw	zero,8(r16)
  111f74:	1884703a 	and	r2,r3,r2
  111f78:	80000615 	stw	zero,24(r16)
  111f7c:	003fc306 	br	111e8c <__alt_data_end+0xfffd1e8c>
  111f80:	80c00117 	ldw	r3,4(r16)
  111f84:	10bfffc4 	addi	r2,r2,-1
  111f88:	80800015 	stw	r2,0(r16)
  111f8c:	18800044 	addi	r2,r3,1
  111f90:	80800115 	stw	r2,4(r16)
  111f94:	9005883a 	mov	r2,r18
  111f98:	003fcc06 	br	111ecc <__alt_data_end+0xfffd1ecc>
  111f9c:	00bfffc4 	movi	r2,-1
  111fa0:	f800283a 	ret

00111fa4 <ungetc>:
  111fa4:	008004b4 	movhi	r2,18
  111fa8:	10957404 	addi	r2,r2,21968
  111fac:	280d883a 	mov	r6,r5
  111fb0:	200b883a 	mov	r5,r4
  111fb4:	11000017 	ldw	r4,0(r2)
  111fb8:	0111e101 	jmpi	111e10 <_ungetc_r>

00111fbc <__sprint_r.part.0>:
  111fbc:	28801917 	ldw	r2,100(r5)
  111fc0:	defff604 	addi	sp,sp,-40
  111fc4:	dd400515 	stw	r21,20(sp)
  111fc8:	dfc00915 	stw	ra,36(sp)
  111fcc:	df000815 	stw	fp,32(sp)
  111fd0:	ddc00715 	stw	r23,28(sp)
  111fd4:	dd800615 	stw	r22,24(sp)
  111fd8:	dd000415 	stw	r20,16(sp)
  111fdc:	dcc00315 	stw	r19,12(sp)
  111fe0:	dc800215 	stw	r18,8(sp)
  111fe4:	dc400115 	stw	r17,4(sp)
  111fe8:	dc000015 	stw	r16,0(sp)
  111fec:	1088000c 	andi	r2,r2,8192
  111ff0:	302b883a 	mov	r21,r6
  111ff4:	10002e26 	beq	r2,zero,1120b0 <__sprint_r.part.0+0xf4>
  111ff8:	30800217 	ldw	r2,8(r6)
  111ffc:	35800017 	ldw	r22,0(r6)
  112000:	10002926 	beq	r2,zero,1120a8 <__sprint_r.part.0+0xec>
  112004:	2827883a 	mov	r19,r5
  112008:	2029883a 	mov	r20,r4
  11200c:	b5c00104 	addi	r23,r22,4
  112010:	04bfffc4 	movi	r18,-1
  112014:	bc400017 	ldw	r17,0(r23)
  112018:	b4000017 	ldw	r16,0(r22)
  11201c:	0039883a 	mov	fp,zero
  112020:	8822d0ba 	srli	r17,r17,2
  112024:	8800031e 	bne	r17,zero,112034 <__sprint_r.part.0+0x78>
  112028:	00001806 	br	11208c <__sprint_r.part.0+0xd0>
  11202c:	84000104 	addi	r16,r16,4
  112030:	8f001526 	beq	r17,fp,112088 <__sprint_r.part.0+0xcc>
  112034:	81400017 	ldw	r5,0(r16)
  112038:	980d883a 	mov	r6,r19
  11203c:	a009883a 	mov	r4,r20
  112040:	01139f80 	call	1139f8 <_fputwc_r>
  112044:	e7000044 	addi	fp,fp,1
  112048:	14bff81e 	bne	r2,r18,11202c <__alt_data_end+0xfffd202c>
  11204c:	9005883a 	mov	r2,r18
  112050:	a8000215 	stw	zero,8(r21)
  112054:	a8000115 	stw	zero,4(r21)
  112058:	dfc00917 	ldw	ra,36(sp)
  11205c:	df000817 	ldw	fp,32(sp)
  112060:	ddc00717 	ldw	r23,28(sp)
  112064:	dd800617 	ldw	r22,24(sp)
  112068:	dd400517 	ldw	r21,20(sp)
  11206c:	dd000417 	ldw	r20,16(sp)
  112070:	dcc00317 	ldw	r19,12(sp)
  112074:	dc800217 	ldw	r18,8(sp)
  112078:	dc400117 	ldw	r17,4(sp)
  11207c:	dc000017 	ldw	r16,0(sp)
  112080:	dec00a04 	addi	sp,sp,40
  112084:	f800283a 	ret
  112088:	a8800217 	ldw	r2,8(r21)
  11208c:	8c63883a 	add	r17,r17,r17
  112090:	8c63883a 	add	r17,r17,r17
  112094:	1445c83a 	sub	r2,r2,r17
  112098:	a8800215 	stw	r2,8(r21)
  11209c:	b5800204 	addi	r22,r22,8
  1120a0:	bdc00204 	addi	r23,r23,8
  1120a4:	103fdb1e 	bne	r2,zero,112014 <__alt_data_end+0xfffd2014>
  1120a8:	0005883a 	mov	r2,zero
  1120ac:	003fe806 	br	112050 <__alt_data_end+0xfffd2050>
  1120b0:	010a3780 	call	10a378 <__sfvwrite_r>
  1120b4:	003fe606 	br	112050 <__alt_data_end+0xfffd2050>

001120b8 <__sprint_r>:
  1120b8:	30c00217 	ldw	r3,8(r6)
  1120bc:	18000126 	beq	r3,zero,1120c4 <__sprint_r+0xc>
  1120c0:	0111fbc1 	jmpi	111fbc <__sprint_r.part.0>
  1120c4:	30000115 	stw	zero,4(r6)
  1120c8:	0005883a 	mov	r2,zero
  1120cc:	f800283a 	ret

001120d0 <___vfiprintf_internal_r>:
  1120d0:	deffca04 	addi	sp,sp,-216
  1120d4:	dd403115 	stw	r21,196(sp)
  1120d8:	dfc03515 	stw	ra,212(sp)
  1120dc:	df003415 	stw	fp,208(sp)
  1120e0:	ddc03315 	stw	r23,204(sp)
  1120e4:	dd803215 	stw	r22,200(sp)
  1120e8:	dd003015 	stw	r20,192(sp)
  1120ec:	dcc02f15 	stw	r19,188(sp)
  1120f0:	dc802e15 	stw	r18,184(sp)
  1120f4:	dc402d15 	stw	r17,180(sp)
  1120f8:	dc002c15 	stw	r16,176(sp)
  1120fc:	d9002115 	stw	r4,132(sp)
  112100:	d9402015 	stw	r5,128(sp)
  112104:	d9c02215 	stw	r7,136(sp)
  112108:	302b883a 	mov	r21,r6
  11210c:	20000226 	beq	r4,zero,112118 <___vfiprintf_internal_r+0x48>
  112110:	20800e17 	ldw	r2,56(r4)
  112114:	1000cf26 	beq	r2,zero,112454 <___vfiprintf_internal_r+0x384>
  112118:	d8c02017 	ldw	r3,128(sp)
  11211c:	1880030b 	ldhu	r2,12(r3)
  112120:	10c8000c 	andi	r3,r2,8192
  112124:	1800071e 	bne	r3,zero,112144 <___vfiprintf_internal_r+0x74>
  112128:	d9402017 	ldw	r5,128(sp)
  11212c:	00f7ffc4 	movi	r3,-8193
  112130:	10880014 	ori	r2,r2,8192
  112134:	29001917 	ldw	r4,100(r5)
  112138:	2880030d 	sth	r2,12(r5)
  11213c:	20c6703a 	and	r3,r4,r3
  112140:	28c01915 	stw	r3,100(r5)
  112144:	10c0020c 	andi	r3,r2,8
  112148:	1800a526 	beq	r3,zero,1123e0 <___vfiprintf_internal_r+0x310>
  11214c:	d9002017 	ldw	r4,128(sp)
  112150:	20c00417 	ldw	r3,16(r4)
  112154:	1800a226 	beq	r3,zero,1123e0 <___vfiprintf_internal_r+0x310>
  112158:	1080068c 	andi	r2,r2,26
  11215c:	00c00284 	movi	r3,10
  112160:	10c0a826 	beq	r2,r3,112404 <___vfiprintf_internal_r+0x334>
  112164:	d9001a04 	addi	r4,sp,104
  112168:	d94019c4 	addi	r5,sp,103
  11216c:	048004b4 	movhi	r18,18
  112170:	2145c83a 	sub	r2,r4,r5
  112174:	948dcc84 	addi	r18,r18,14130
  112178:	d9001e15 	stw	r4,120(sp)
  11217c:	d9401f15 	stw	r5,124(sp)
  112180:	dec01a15 	stw	sp,104(sp)
  112184:	d8001c15 	stw	zero,112(sp)
  112188:	d8001b15 	stw	zero,108(sp)
  11218c:	d811883a 	mov	r8,sp
  112190:	d8002615 	stw	zero,152(sp)
  112194:	d8002415 	stw	zero,144(sp)
  112198:	d8802815 	stw	r2,160(sp)
  11219c:	a82d883a 	mov	r22,r21
  1121a0:	b0800007 	ldb	r2,0(r22)
  1121a4:	10040d26 	beq	r2,zero,1131dc <___vfiprintf_internal_r+0x110c>
  1121a8:	00c00944 	movi	r3,37
  1121ac:	b029883a 	mov	r20,r22
  1121b0:	10c0021e 	bne	r2,r3,1121bc <___vfiprintf_internal_r+0xec>
  1121b4:	00001606 	br	112210 <___vfiprintf_internal_r+0x140>
  1121b8:	10c00326 	beq	r2,r3,1121c8 <___vfiprintf_internal_r+0xf8>
  1121bc:	a5000044 	addi	r20,r20,1
  1121c0:	a0800007 	ldb	r2,0(r20)
  1121c4:	103ffc1e 	bne	r2,zero,1121b8 <__alt_data_end+0xfffd21b8>
  1121c8:	a5a1c83a 	sub	r16,r20,r22
  1121cc:	80001026 	beq	r16,zero,112210 <___vfiprintf_internal_r+0x140>
  1121d0:	d8c01c17 	ldw	r3,112(sp)
  1121d4:	d8801b17 	ldw	r2,108(sp)
  1121d8:	45800015 	stw	r22,0(r8)
  1121dc:	80c7883a 	add	r3,r16,r3
  1121e0:	10800044 	addi	r2,r2,1
  1121e4:	44000115 	stw	r16,4(r8)
  1121e8:	d8c01c15 	stw	r3,112(sp)
  1121ec:	d8801b15 	stw	r2,108(sp)
  1121f0:	010001c4 	movi	r4,7
  1121f4:	2080750e 	bge	r4,r2,1123cc <___vfiprintf_internal_r+0x2fc>
  1121f8:	1803951e 	bne	r3,zero,113050 <___vfiprintf_internal_r+0xf80>
  1121fc:	d8c02417 	ldw	r3,144(sp)
  112200:	d8001b15 	stw	zero,108(sp)
  112204:	d811883a 	mov	r8,sp
  112208:	1c07883a 	add	r3,r3,r16
  11220c:	d8c02415 	stw	r3,144(sp)
  112210:	a0800007 	ldb	r2,0(r20)
  112214:	1002e026 	beq	r2,zero,112d98 <___vfiprintf_internal_r+0xcc8>
  112218:	a5800044 	addi	r22,r20,1
  11221c:	a0c00047 	ldb	r3,1(r20)
  112220:	d8001d85 	stb	zero,118(sp)
  112224:	0027883a 	mov	r19,zero
  112228:	d8002305 	stb	zero,140(sp)
  11222c:	043fffc4 	movi	r16,-1
  112230:	d8002515 	stw	zero,148(sp)
  112234:	0023883a 	mov	r17,zero
  112238:	05001604 	movi	r20,88
  11223c:	05400244 	movi	r21,9
  112240:	402f883a 	mov	r23,r8
  112244:	b5800044 	addi	r22,r22,1
  112248:	18bff804 	addi	r2,r3,-32
  11224c:	a0827736 	bltu	r20,r2,112c2c <___vfiprintf_internal_r+0xb5c>
  112250:	100490ba 	slli	r2,r2,2
  112254:	01000474 	movhi	r4,17
  112258:	21089a04 	addi	r4,r4,8808
  11225c:	1105883a 	add	r2,r2,r4
  112260:	10800017 	ldw	r2,0(r2)
  112264:	1000683a 	jmp	r2
  112268:	0011292c 	andhi	zero,zero,17572
  11226c:	00112c2c 	andhi	zero,zero,17584
  112270:	00112c2c 	andhi	zero,zero,17584
  112274:	00112948 	cmpgei	zero,zero,17573
  112278:	00112c2c 	andhi	zero,zero,17584
  11227c:	00112c2c 	andhi	zero,zero,17584
  112280:	00112c2c 	andhi	zero,zero,17584
  112284:	00112c2c 	andhi	zero,zero,17584
  112288:	00112c2c 	andhi	zero,zero,17584
  11228c:	00112c2c 	andhi	zero,zero,17584
  112290:	00112b50 	cmplti	zero,zero,17581
  112294:	00112b74 	movhi	zero,17581
  112298:	00112c2c 	andhi	zero,zero,17584
  11229c:	0011246c 	andhi	zero,zero,17553
  1122a0:	00112b88 	cmpgei	zero,zero,17582
  1122a4:	00112c2c 	andhi	zero,zero,17584
  1122a8:	00112954 	movui	zero,17573
  1122ac:	00112960 	cmpeqi	zero,zero,17573
  1122b0:	00112960 	cmpeqi	zero,zero,17573
  1122b4:	00112960 	cmpeqi	zero,zero,17573
  1122b8:	00112960 	cmpeqi	zero,zero,17573
  1122bc:	00112960 	cmpeqi	zero,zero,17573
  1122c0:	00112960 	cmpeqi	zero,zero,17573
  1122c4:	00112960 	cmpeqi	zero,zero,17573
  1122c8:	00112960 	cmpeqi	zero,zero,17573
  1122cc:	00112960 	cmpeqi	zero,zero,17573
  1122d0:	00112c2c 	andhi	zero,zero,17584
  1122d4:	00112c2c 	andhi	zero,zero,17584
  1122d8:	00112c2c 	andhi	zero,zero,17584
  1122dc:	00112c2c 	andhi	zero,zero,17584
  1122e0:	00112c2c 	andhi	zero,zero,17584
  1122e4:	00112c2c 	andhi	zero,zero,17584
  1122e8:	00112c2c 	andhi	zero,zero,17584
  1122ec:	00112c2c 	andhi	zero,zero,17584
  1122f0:	00112c2c 	andhi	zero,zero,17584
  1122f4:	00112c2c 	andhi	zero,zero,17584
  1122f8:	001129a0 	cmpeqi	zero,zero,17574
  1122fc:	00112c2c 	andhi	zero,zero,17584
  112300:	00112c2c 	andhi	zero,zero,17584
  112304:	00112c2c 	andhi	zero,zero,17584
  112308:	00112c2c 	andhi	zero,zero,17584
  11230c:	00112c2c 	andhi	zero,zero,17584
  112310:	00112c2c 	andhi	zero,zero,17584
  112314:	00112c2c 	andhi	zero,zero,17584
  112318:	00112c2c 	andhi	zero,zero,17584
  11231c:	00112c2c 	andhi	zero,zero,17584
  112320:	00112c2c 	andhi	zero,zero,17584
  112324:	001129dc 	xori	zero,zero,17575
  112328:	00112c2c 	andhi	zero,zero,17584
  11232c:	00112c2c 	andhi	zero,zero,17584
  112330:	00112c2c 	andhi	zero,zero,17584
  112334:	00112c2c 	andhi	zero,zero,17584
  112338:	00112c2c 	andhi	zero,zero,17584
  11233c:	00112a38 	rdprs	zero,zero,17576
  112340:	00112c2c 	andhi	zero,zero,17584
  112344:	00112c2c 	andhi	zero,zero,17584
  112348:	00112aac 	andhi	zero,zero,17578
  11234c:	00112c2c 	andhi	zero,zero,17584
  112350:	00112c2c 	andhi	zero,zero,17584
  112354:	00112c2c 	andhi	zero,zero,17584
  112358:	00112c2c 	andhi	zero,zero,17584
  11235c:	00112c2c 	andhi	zero,zero,17584
  112360:	00112c2c 	andhi	zero,zero,17584
  112364:	00112c2c 	andhi	zero,zero,17584
  112368:	00112c2c 	andhi	zero,zero,17584
  11236c:	00112c2c 	andhi	zero,zero,17584
  112370:	00112c2c 	andhi	zero,zero,17584
  112374:	00112854 	movui	zero,17569
  112378:	00112884 	movi	zero,17570
  11237c:	00112c2c 	andhi	zero,zero,17584
  112380:	00112c2c 	andhi	zero,zero,17584
  112384:	00112c2c 	andhi	zero,zero,17584
  112388:	00112bd4 	movui	zero,17583
  11238c:	00112884 	movi	zero,17570
  112390:	00112c2c 	andhi	zero,zero,17584
  112394:	00112c2c 	andhi	zero,zero,17584
  112398:	0011272c 	andhi	zero,zero,17564
  11239c:	00112c2c 	andhi	zero,zero,17584
  1123a0:	00112740 	call	11274 <OSCtxSw_SWITCH_PC+0x11234>
  1123a4:	00112778 	rdprs	zero,zero,17565
  1123a8:	00112478 	rdprs	zero,zero,17553
  1123ac:	00112720 	cmpeqi	zero,zero,17564
  1123b0:	00112c2c 	andhi	zero,zero,17584
  1123b4:	00112aec 	andhi	zero,zero,17579
  1123b8:	00112c2c 	andhi	zero,zero,17584
  1123bc:	00112b38 	rdprs	zero,zero,17580
  1123c0:	00112c2c 	andhi	zero,zero,17584
  1123c4:	00112c2c 	andhi	zero,zero,17584
  1123c8:	001127fc 	xorhi	zero,zero,17567
  1123cc:	42000204 	addi	r8,r8,8
  1123d0:	d8c02417 	ldw	r3,144(sp)
  1123d4:	1c07883a 	add	r3,r3,r16
  1123d8:	d8c02415 	stw	r3,144(sp)
  1123dc:	003f8c06 	br	112210 <__alt_data_end+0xfffd2210>
  1123e0:	d9402017 	ldw	r5,128(sp)
  1123e4:	d9002117 	ldw	r4,132(sp)
  1123e8:	0107e940 	call	107e94 <__swsetup_r>
  1123ec:	1003c11e 	bne	r2,zero,1132f4 <___vfiprintf_internal_r+0x1224>
  1123f0:	d9402017 	ldw	r5,128(sp)
  1123f4:	00c00284 	movi	r3,10
  1123f8:	2880030b 	ldhu	r2,12(r5)
  1123fc:	1080068c 	andi	r2,r2,26
  112400:	10ff581e 	bne	r2,r3,112164 <__alt_data_end+0xfffd2164>
  112404:	d8c02017 	ldw	r3,128(sp)
  112408:	1880038f 	ldh	r2,14(r3)
  11240c:	103f5516 	blt	r2,zero,112164 <__alt_data_end+0xfffd2164>
  112410:	d9c02217 	ldw	r7,136(sp)
  112414:	d9002117 	ldw	r4,132(sp)
  112418:	a80d883a 	mov	r6,r21
  11241c:	180b883a 	mov	r5,r3
  112420:	01135f80 	call	1135f8 <__sbprintf>
  112424:	dfc03517 	ldw	ra,212(sp)
  112428:	df003417 	ldw	fp,208(sp)
  11242c:	ddc03317 	ldw	r23,204(sp)
  112430:	dd803217 	ldw	r22,200(sp)
  112434:	dd403117 	ldw	r21,196(sp)
  112438:	dd003017 	ldw	r20,192(sp)
  11243c:	dcc02f17 	ldw	r19,188(sp)
  112440:	dc802e17 	ldw	r18,184(sp)
  112444:	dc402d17 	ldw	r17,180(sp)
  112448:	dc002c17 	ldw	r16,176(sp)
  11244c:	dec03604 	addi	sp,sp,216
  112450:	f800283a 	ret
  112454:	0109ef40 	call	109ef4 <__sinit>
  112458:	003f2f06 	br	112118 <__alt_data_end+0xfffd2118>
  11245c:	d8c02517 	ldw	r3,148(sp)
  112460:	d8802215 	stw	r2,136(sp)
  112464:	00c7c83a 	sub	r3,zero,r3
  112468:	d8c02515 	stw	r3,148(sp)
  11246c:	8c400114 	ori	r17,r17,4
  112470:	b0c00007 	ldb	r3,0(r22)
  112474:	003f7306 	br	112244 <__alt_data_end+0xfffd2244>
  112478:	00800c04 	movi	r2,48
  11247c:	d9402217 	ldw	r5,136(sp)
  112480:	d8801d05 	stb	r2,116(sp)
  112484:	00801e04 	movi	r2,120
  112488:	d8801d45 	stb	r2,117(sp)
  11248c:	d8001d85 	stb	zero,118(sp)
  112490:	b811883a 	mov	r8,r23
  112494:	28c00104 	addi	r3,r5,4
  112498:	2cc00017 	ldw	r19,0(r5)
  11249c:	0029883a 	mov	r20,zero
  1124a0:	88800094 	ori	r2,r17,2
  1124a4:	80032516 	blt	r16,zero,11313c <___vfiprintf_internal_r+0x106c>
  1124a8:	00bfdfc4 	movi	r2,-129
  1124ac:	88a2703a 	and	r17,r17,r2
  1124b0:	d8c02215 	stw	r3,136(sp)
  1124b4:	8c400094 	ori	r17,r17,2
  1124b8:	98032a1e 	bne	r19,zero,113164 <___vfiprintf_internal_r+0x1094>
  1124bc:	008004b4 	movhi	r2,18
  1124c0:	108c9004 	addi	r2,r2,12864
  1124c4:	d8802615 	stw	r2,152(sp)
  1124c8:	002b883a 	mov	r21,zero
  1124cc:	8001741e 	bne	r16,zero,112aa0 <___vfiprintf_internal_r+0x9d0>
  1124d0:	0021883a 	mov	r16,zero
  1124d4:	0029883a 	mov	r20,zero
  1124d8:	ddc01a04 	addi	r23,sp,104
  1124dc:	8027883a 	mov	r19,r16
  1124e0:	8500010e 	bge	r16,r20,1124e8 <___vfiprintf_internal_r+0x418>
  1124e4:	a027883a 	mov	r19,r20
  1124e8:	ad403fcc 	andi	r21,r21,255
  1124ec:	ad40201c 	xori	r21,r21,128
  1124f0:	ad7fe004 	addi	r21,r21,-128
  1124f4:	a8000126 	beq	r21,zero,1124fc <___vfiprintf_internal_r+0x42c>
  1124f8:	9cc00044 	addi	r19,r19,1
  1124fc:	89c0008c 	andi	r7,r17,2
  112500:	38000126 	beq	r7,zero,112508 <___vfiprintf_internal_r+0x438>
  112504:	9cc00084 	addi	r19,r19,2
  112508:	88c0210c 	andi	r3,r17,132
  11250c:	1801dd1e 	bne	r3,zero,112c84 <___vfiprintf_internal_r+0xbb4>
  112510:	d9402517 	ldw	r5,148(sp)
  112514:	2cebc83a 	sub	r21,r5,r19
  112518:	0541da0e 	bge	zero,r21,112c84 <___vfiprintf_internal_r+0xbb4>
  11251c:	07000404 	movi	fp,16
  112520:	d8801c17 	ldw	r2,112(sp)
  112524:	e543be0e 	bge	fp,r21,113420 <___vfiprintf_internal_r+0x1350>
  112528:	014004b4 	movhi	r5,18
  11252c:	294dd084 	addi	r5,r5,14146
  112530:	dc002715 	stw	r16,156(sp)
  112534:	d9801b17 	ldw	r6,108(sp)
  112538:	a821883a 	mov	r16,r21
  11253c:	d9402315 	stw	r5,140(sp)
  112540:	028001c4 	movi	r10,7
  112544:	d9c02915 	stw	r7,164(sp)
  112548:	182b883a 	mov	r21,r3
  11254c:	00000506 	br	112564 <___vfiprintf_internal_r+0x494>
  112550:	31000084 	addi	r4,r6,2
  112554:	42000204 	addi	r8,r8,8
  112558:	180d883a 	mov	r6,r3
  11255c:	843ffc04 	addi	r16,r16,-16
  112560:	e4000f0e 	bge	fp,r16,1125a0 <___vfiprintf_internal_r+0x4d0>
  112564:	010004b4 	movhi	r4,18
  112568:	10800404 	addi	r2,r2,16
  11256c:	30c00044 	addi	r3,r6,1
  112570:	210dd084 	addi	r4,r4,14146
  112574:	41000015 	stw	r4,0(r8)
  112578:	47000115 	stw	fp,4(r8)
  11257c:	d8801c15 	stw	r2,112(sp)
  112580:	d8c01b15 	stw	r3,108(sp)
  112584:	50fff20e 	bge	r10,r3,112550 <__alt_data_end+0xfffd2550>
  112588:	1001b21e 	bne	r2,zero,112c54 <___vfiprintf_internal_r+0xb84>
  11258c:	843ffc04 	addi	r16,r16,-16
  112590:	000d883a 	mov	r6,zero
  112594:	01000044 	movi	r4,1
  112598:	d811883a 	mov	r8,sp
  11259c:	e43ff116 	blt	fp,r16,112564 <__alt_data_end+0xfffd2564>
  1125a0:	a807883a 	mov	r3,r21
  1125a4:	d9c02917 	ldw	r7,164(sp)
  1125a8:	802b883a 	mov	r21,r16
  1125ac:	dc002717 	ldw	r16,156(sp)
  1125b0:	d9402317 	ldw	r5,140(sp)
  1125b4:	a885883a 	add	r2,r21,r2
  1125b8:	45400115 	stw	r21,4(r8)
  1125bc:	41400015 	stw	r5,0(r8)
  1125c0:	d8801c15 	stw	r2,112(sp)
  1125c4:	d9001b15 	stw	r4,108(sp)
  1125c8:	014001c4 	movi	r5,7
  1125cc:	29026216 	blt	r5,r4,112f58 <___vfiprintf_internal_r+0xe88>
  1125d0:	d9801d87 	ldb	r6,118(sp)
  1125d4:	42000204 	addi	r8,r8,8
  1125d8:	21400044 	addi	r5,r4,1
  1125dc:	3001ae1e 	bne	r6,zero,112c98 <___vfiprintf_internal_r+0xbc8>
  1125e0:	3801bb26 	beq	r7,zero,112cd0 <___vfiprintf_internal_r+0xc00>
  1125e4:	d9001d04 	addi	r4,sp,116
  1125e8:	10800084 	addi	r2,r2,2
  1125ec:	41000015 	stw	r4,0(r8)
  1125f0:	01000084 	movi	r4,2
  1125f4:	41000115 	stw	r4,4(r8)
  1125f8:	d8801c15 	stw	r2,112(sp)
  1125fc:	d9401b15 	stw	r5,108(sp)
  112600:	010001c4 	movi	r4,7
  112604:	2142680e 	bge	r4,r5,112fa8 <___vfiprintf_internal_r+0xed8>
  112608:	1002b11e 	bne	r2,zero,1130d0 <___vfiprintf_internal_r+0x1000>
  11260c:	01802004 	movi	r6,128
  112610:	01400044 	movi	r5,1
  112614:	0009883a 	mov	r4,zero
  112618:	d811883a 	mov	r8,sp
  11261c:	1981ae1e 	bne	r3,r6,112cd8 <___vfiprintf_internal_r+0xc08>
  112620:	d8c02517 	ldw	r3,148(sp)
  112624:	1cf9c83a 	sub	fp,r3,r19
  112628:	0701ab0e 	bge	zero,fp,112cd8 <___vfiprintf_internal_r+0xc08>
  11262c:	05400404 	movi	r21,16
  112630:	af03a90e 	bge	r21,fp,1134d8 <___vfiprintf_internal_r+0x1408>
  112634:	014004b4 	movhi	r5,18
  112638:	294dcc84 	addi	r5,r5,14130
  11263c:	d9402315 	stw	r5,140(sp)
  112640:	01c001c4 	movi	r7,7
  112644:	00000506 	br	11265c <___vfiprintf_internal_r+0x58c>
  112648:	21800084 	addi	r6,r4,2
  11264c:	42000204 	addi	r8,r8,8
  112650:	1809883a 	mov	r4,r3
  112654:	e73ffc04 	addi	fp,fp,-16
  112658:	af000d0e 	bge	r21,fp,112690 <___vfiprintf_internal_r+0x5c0>
  11265c:	10800404 	addi	r2,r2,16
  112660:	20c00044 	addi	r3,r4,1
  112664:	44800015 	stw	r18,0(r8)
  112668:	45400115 	stw	r21,4(r8)
  11266c:	d8801c15 	stw	r2,112(sp)
  112670:	d8c01b15 	stw	r3,108(sp)
  112674:	38fff40e 	bge	r7,r3,112648 <__alt_data_end+0xfffd2648>
  112678:	10022b1e 	bne	r2,zero,112f28 <___vfiprintf_internal_r+0xe58>
  11267c:	e73ffc04 	addi	fp,fp,-16
  112680:	01800044 	movi	r6,1
  112684:	0009883a 	mov	r4,zero
  112688:	d811883a 	mov	r8,sp
  11268c:	af3ff316 	blt	r21,fp,11265c <__alt_data_end+0xfffd265c>
  112690:	d8c02317 	ldw	r3,140(sp)
  112694:	1705883a 	add	r2,r2,fp
  112698:	47000115 	stw	fp,4(r8)
  11269c:	40c00015 	stw	r3,0(r8)
  1126a0:	d8801c15 	stw	r2,112(sp)
  1126a4:	d9801b15 	stw	r6,108(sp)
  1126a8:	00c001c4 	movi	r3,7
  1126ac:	19829416 	blt	r3,r6,113100 <___vfiprintf_internal_r+0x1030>
  1126b0:	8521c83a 	sub	r16,r16,r20
  1126b4:	42000204 	addi	r8,r8,8
  1126b8:	31400044 	addi	r5,r6,1
  1126bc:	3009883a 	mov	r4,r6
  1126c0:	04018716 	blt	zero,r16,112ce0 <___vfiprintf_internal_r+0xc10>
  1126c4:	a085883a 	add	r2,r20,r2
  1126c8:	45c00015 	stw	r23,0(r8)
  1126cc:	45000115 	stw	r20,4(r8)
  1126d0:	d8801c15 	stw	r2,112(sp)
  1126d4:	d9401b15 	stw	r5,108(sp)
  1126d8:	00c001c4 	movi	r3,7
  1126dc:	1941c20e 	bge	r3,r5,112de8 <___vfiprintf_internal_r+0xd18>
  1126e0:	1002531e 	bne	r2,zero,113030 <___vfiprintf_internal_r+0xf60>
  1126e4:	d8001b15 	stw	zero,108(sp)
  1126e8:	8c40010c 	andi	r17,r17,4
  1126ec:	88023226 	beq	r17,zero,112fb8 <___vfiprintf_internal_r+0xee8>
  1126f0:	d9002517 	ldw	r4,148(sp)
  1126f4:	24e3c83a 	sub	r17,r4,r19
  1126f8:	04432916 	blt	zero,r17,1133a0 <___vfiprintf_internal_r+0x12d0>
  1126fc:	d8802517 	ldw	r2,148(sp)
  112700:	14c0010e 	bge	r2,r19,112708 <___vfiprintf_internal_r+0x638>
  112704:	9805883a 	mov	r2,r19
  112708:	d8c02417 	ldw	r3,144(sp)
  11270c:	1887883a 	add	r3,r3,r2
  112710:	d8c02415 	stw	r3,144(sp)
  112714:	d8001b15 	stw	zero,108(sp)
  112718:	d811883a 	mov	r8,sp
  11271c:	003ea006 	br	1121a0 <__alt_data_end+0xfffd21a0>
  112720:	8c400814 	ori	r17,r17,32
  112724:	b0c00007 	ldb	r3,0(r22)
  112728:	003ec606 	br	112244 <__alt_data_end+0xfffd2244>
  11272c:	b0c00007 	ldb	r3,0(r22)
  112730:	00801b04 	movi	r2,108
  112734:	18832026 	beq	r3,r2,1133b8 <___vfiprintf_internal_r+0x12e8>
  112738:	8c400414 	ori	r17,r17,16
  11273c:	003ec106 	br	112244 <__alt_data_end+0xfffd2244>
  112740:	9cc03fcc 	andi	r19,r19,255
  112744:	b811883a 	mov	r8,r23
  112748:	9803981e 	bne	r19,zero,1135ac <___vfiprintf_internal_r+0x14dc>
  11274c:	8880080c 	andi	r2,r17,32
  112750:	1002be26 	beq	r2,zero,11324c <___vfiprintf_internal_r+0x117c>
  112754:	d9002217 	ldw	r4,136(sp)
  112758:	d9402417 	ldw	r5,144(sp)
  11275c:	20800017 	ldw	r2,0(r4)
  112760:	2807d7fa 	srai	r3,r5,31
  112764:	21000104 	addi	r4,r4,4
  112768:	d9002215 	stw	r4,136(sp)
  11276c:	11400015 	stw	r5,0(r2)
  112770:	10c00115 	stw	r3,4(r2)
  112774:	003e8a06 	br	1121a0 <__alt_data_end+0xfffd21a0>
  112778:	9cc03fcc 	andi	r19,r19,255
  11277c:	b811883a 	mov	r8,r23
  112780:	9803871e 	bne	r19,zero,1135a0 <___vfiprintf_internal_r+0x14d0>
  112784:	8880080c 	andi	r2,r17,32
  112788:	10009a26 	beq	r2,zero,1129f4 <___vfiprintf_internal_r+0x924>
  11278c:	d9002217 	ldw	r4,136(sp)
  112790:	d8001d85 	stb	zero,118(sp)
  112794:	20800204 	addi	r2,r4,8
  112798:	24c00017 	ldw	r19,0(r4)
  11279c:	25000117 	ldw	r20,4(r4)
  1127a0:	8002a416 	blt	r16,zero,113234 <___vfiprintf_internal_r+0x1164>
  1127a4:	013fdfc4 	movi	r4,-129
  1127a8:	9d06b03a 	or	r3,r19,r20
  1127ac:	d8802215 	stw	r2,136(sp)
  1127b0:	8922703a 	and	r17,r17,r4
  1127b4:	18009b26 	beq	r3,zero,112a24 <___vfiprintf_internal_r+0x954>
  1127b8:	002b883a 	mov	r21,zero
  1127bc:	ddc01a04 	addi	r23,sp,104
  1127c0:	9806d0fa 	srli	r3,r19,3
  1127c4:	a008977a 	slli	r4,r20,29
  1127c8:	a028d0fa 	srli	r20,r20,3
  1127cc:	9cc001cc 	andi	r19,r19,7
  1127d0:	98800c04 	addi	r2,r19,48
  1127d4:	bdffffc4 	addi	r23,r23,-1
  1127d8:	20e6b03a 	or	r19,r4,r3
  1127dc:	b8800005 	stb	r2,0(r23)
  1127e0:	9d06b03a 	or	r3,r19,r20
  1127e4:	183ff61e 	bne	r3,zero,1127c0 <__alt_data_end+0xfffd27c0>
  1127e8:	88c0004c 	andi	r3,r17,1
  1127ec:	18021f1e 	bne	r3,zero,11306c <___vfiprintf_internal_r+0xf9c>
  1127f0:	d9401e17 	ldw	r5,120(sp)
  1127f4:	2de9c83a 	sub	r20,r5,r23
  1127f8:	003f3806 	br	1124dc <__alt_data_end+0xfffd24dc>
  1127fc:	9cc03fcc 	andi	r19,r19,255
  112800:	b811883a 	mov	r8,r23
  112804:	98034f1e 	bne	r19,zero,113544 <___vfiprintf_internal_r+0x1474>
  112808:	008004b4 	movhi	r2,18
  11280c:	108c9004 	addi	r2,r2,12864
  112810:	d8802615 	stw	r2,152(sp)
  112814:	8880080c 	andi	r2,r17,32
  112818:	1000ac26 	beq	r2,zero,112acc <___vfiprintf_internal_r+0x9fc>
  11281c:	d9002217 	ldw	r4,136(sp)
  112820:	24c00017 	ldw	r19,0(r4)
  112824:	25000117 	ldw	r20,4(r4)
  112828:	21000204 	addi	r4,r4,8
  11282c:	d9002215 	stw	r4,136(sp)
  112830:	8880004c 	andi	r2,r17,1
  112834:	1001e726 	beq	r2,zero,112fd4 <___vfiprintf_internal_r+0xf04>
  112838:	9d04b03a 	or	r2,r19,r20
  11283c:	10025c1e 	bne	r2,zero,1131b0 <___vfiprintf_internal_r+0x10e0>
  112840:	d8001d85 	stb	zero,118(sp)
  112844:	80024416 	blt	r16,zero,113158 <___vfiprintf_internal_r+0x1088>
  112848:	00bfdfc4 	movi	r2,-129
  11284c:	88a2703a 	and	r17,r17,r2
  112850:	003f1d06 	br	1124c8 <__alt_data_end+0xfffd24c8>
  112854:	d8c02217 	ldw	r3,136(sp)
  112858:	04c00044 	movi	r19,1
  11285c:	b811883a 	mov	r8,r23
  112860:	18800017 	ldw	r2,0(r3)
  112864:	18c00104 	addi	r3,r3,4
  112868:	d8001d85 	stb	zero,118(sp)
  11286c:	d8801005 	stb	r2,64(sp)
  112870:	d8c02215 	stw	r3,136(sp)
  112874:	9829883a 	mov	r20,r19
  112878:	ddc01004 	addi	r23,sp,64
  11287c:	0021883a 	mov	r16,zero
  112880:	003f1e06 	br	1124fc <__alt_data_end+0xfffd24fc>
  112884:	9cc03fcc 	andi	r19,r19,255
  112888:	b811883a 	mov	r8,r23
  11288c:	9803331e 	bne	r19,zero,11355c <___vfiprintf_internal_r+0x148c>
  112890:	8880080c 	andi	r2,r17,32
  112894:	10004826 	beq	r2,zero,1129b8 <___vfiprintf_internal_r+0x8e8>
  112898:	d9002217 	ldw	r4,136(sp)
  11289c:	20800117 	ldw	r2,4(r4)
  1128a0:	24c00017 	ldw	r19,0(r4)
  1128a4:	21000204 	addi	r4,r4,8
  1128a8:	d9002215 	stw	r4,136(sp)
  1128ac:	1029883a 	mov	r20,r2
  1128b0:	10024c16 	blt	r2,zero,1131e4 <___vfiprintf_internal_r+0x1114>
  1128b4:	dd401d83 	ldbu	r21,118(sp)
  1128b8:	80007116 	blt	r16,zero,112a80 <___vfiprintf_internal_r+0x9b0>
  1128bc:	00ffdfc4 	movi	r3,-129
  1128c0:	9d04b03a 	or	r2,r19,r20
  1128c4:	88e2703a 	and	r17,r17,r3
  1128c8:	1000d126 	beq	r2,zero,112c10 <___vfiprintf_internal_r+0xb40>
  1128cc:	a0023526 	beq	r20,zero,1131a4 <___vfiprintf_internal_r+0x10d4>
  1128d0:	ddc01a04 	addi	r23,sp,104
  1128d4:	4039883a 	mov	fp,r8
  1128d8:	9809883a 	mov	r4,r19
  1128dc:	a00b883a 	mov	r5,r20
  1128e0:	01800284 	movi	r6,10
  1128e4:	000f883a 	mov	r7,zero
  1128e8:	01152840 	call	115284 <__umoddi3>
  1128ec:	10800c04 	addi	r2,r2,48
  1128f0:	bdffffc4 	addi	r23,r23,-1
  1128f4:	9809883a 	mov	r4,r19
  1128f8:	a00b883a 	mov	r5,r20
  1128fc:	b8800005 	stb	r2,0(r23)
  112900:	01800284 	movi	r6,10
  112904:	000f883a 	mov	r7,zero
  112908:	0114c880 	call	114c88 <__udivdi3>
  11290c:	1027883a 	mov	r19,r2
  112910:	10c4b03a 	or	r2,r2,r3
  112914:	1829883a 	mov	r20,r3
  112918:	103fef1e 	bne	r2,zero,1128d8 <__alt_data_end+0xfffd28d8>
  11291c:	d9001e17 	ldw	r4,120(sp)
  112920:	e011883a 	mov	r8,fp
  112924:	25e9c83a 	sub	r20,r4,r23
  112928:	003eec06 	br	1124dc <__alt_data_end+0xfffd24dc>
  11292c:	d8802307 	ldb	r2,140(sp)
  112930:	1002361e 	bne	r2,zero,11320c <___vfiprintf_internal_r+0x113c>
  112934:	00c00804 	movi	r3,32
  112938:	d8c02305 	stb	r3,140(sp)
  11293c:	04c00044 	movi	r19,1
  112940:	b0c00007 	ldb	r3,0(r22)
  112944:	003e3f06 	br	112244 <__alt_data_end+0xfffd2244>
  112948:	8c400054 	ori	r17,r17,1
  11294c:	b0c00007 	ldb	r3,0(r22)
  112950:	003e3c06 	br	112244 <__alt_data_end+0xfffd2244>
  112954:	8c402014 	ori	r17,r17,128
  112958:	b0c00007 	ldb	r3,0(r22)
  11295c:	003e3906 	br	112244 <__alt_data_end+0xfffd2244>
  112960:	dc002715 	stw	r16,156(sp)
  112964:	d8002515 	stw	zero,148(sp)
  112968:	1f3ff404 	addi	fp,r3,-48
  11296c:	0009883a 	mov	r4,zero
  112970:	b021883a 	mov	r16,r22
  112974:	01400284 	movi	r5,10
  112978:	01159fc0 	call	1159fc <__mulsi3>
  11297c:	80c00007 	ldb	r3,0(r16)
  112980:	e089883a 	add	r4,fp,r2
  112984:	b5800044 	addi	r22,r22,1
  112988:	1f3ff404 	addi	fp,r3,-48
  11298c:	b021883a 	mov	r16,r22
  112990:	af3ff82e 	bgeu	r21,fp,112974 <__alt_data_end+0xfffd2974>
  112994:	d9002515 	stw	r4,148(sp)
  112998:	dc002717 	ldw	r16,156(sp)
  11299c:	003e2a06 	br	112248 <__alt_data_end+0xfffd2248>
  1129a0:	9cc03fcc 	andi	r19,r19,255
  1129a4:	b811883a 	mov	r8,r23
  1129a8:	9802e91e 	bne	r19,zero,113550 <___vfiprintf_internal_r+0x1480>
  1129ac:	8c400414 	ori	r17,r17,16
  1129b0:	8880080c 	andi	r2,r17,32
  1129b4:	103fb81e 	bne	r2,zero,112898 <__alt_data_end+0xfffd2898>
  1129b8:	8880040c 	andi	r2,r17,16
  1129bc:	10022e26 	beq	r2,zero,113278 <___vfiprintf_internal_r+0x11a8>
  1129c0:	d9402217 	ldw	r5,136(sp)
  1129c4:	2cc00017 	ldw	r19,0(r5)
  1129c8:	29400104 	addi	r5,r5,4
  1129cc:	d9402215 	stw	r5,136(sp)
  1129d0:	9829d7fa 	srai	r20,r19,31
  1129d4:	a005883a 	mov	r2,r20
  1129d8:	003fb506 	br	1128b0 <__alt_data_end+0xfffd28b0>
  1129dc:	9cc03fcc 	andi	r19,r19,255
  1129e0:	b811883a 	mov	r8,r23
  1129e4:	9802fa1e 	bne	r19,zero,1135d0 <___vfiprintf_internal_r+0x1500>
  1129e8:	8c400414 	ori	r17,r17,16
  1129ec:	8880080c 	andi	r2,r17,32
  1129f0:	103f661e 	bne	r2,zero,11278c <__alt_data_end+0xfffd278c>
  1129f4:	8880040c 	andi	r2,r17,16
  1129f8:	10020626 	beq	r2,zero,113214 <___vfiprintf_internal_r+0x1144>
  1129fc:	d9402217 	ldw	r5,136(sp)
  112a00:	d8001d85 	stb	zero,118(sp)
  112a04:	0029883a 	mov	r20,zero
  112a08:	28800104 	addi	r2,r5,4
  112a0c:	2cc00017 	ldw	r19,0(r5)
  112a10:	80020816 	blt	r16,zero,113234 <___vfiprintf_internal_r+0x1164>
  112a14:	00ffdfc4 	movi	r3,-129
  112a18:	d8802215 	stw	r2,136(sp)
  112a1c:	88e2703a 	and	r17,r17,r3
  112a20:	983f651e 	bne	r19,zero,1127b8 <__alt_data_end+0xfffd27b8>
  112a24:	002b883a 	mov	r21,zero
  112a28:	8002cf26 	beq	r16,zero,113568 <___vfiprintf_internal_r+0x1498>
  112a2c:	0027883a 	mov	r19,zero
  112a30:	0029883a 	mov	r20,zero
  112a34:	003f6106 	br	1127bc <__alt_data_end+0xfffd27bc>
  112a38:	9cc03fcc 	andi	r19,r19,255
  112a3c:	b811883a 	mov	r8,r23
  112a40:	9802e01e 	bne	r19,zero,1135c4 <___vfiprintf_internal_r+0x14f4>
  112a44:	8c400414 	ori	r17,r17,16
  112a48:	8880080c 	andi	r2,r17,32
  112a4c:	1000641e 	bne	r2,zero,112be0 <___vfiprintf_internal_r+0xb10>
  112a50:	8880040c 	andi	r2,r17,16
  112a54:	1001c81e 	bne	r2,zero,113178 <___vfiprintf_internal_r+0x10a8>
  112a58:	8880100c 	andi	r2,r17,64
  112a5c:	d8001d85 	stb	zero,118(sp)
  112a60:	1002281e 	bne	r2,zero,113304 <___vfiprintf_internal_r+0x1234>
  112a64:	d9002217 	ldw	r4,136(sp)
  112a68:	0029883a 	mov	r20,zero
  112a6c:	20800104 	addi	r2,r4,4
  112a70:	24c00017 	ldw	r19,0(r4)
  112a74:	8001c60e 	bge	r16,zero,113190 <___vfiprintf_internal_r+0x10c0>
  112a78:	d8802215 	stw	r2,136(sp)
  112a7c:	002b883a 	mov	r21,zero
  112a80:	9d04b03a 	or	r2,r19,r20
  112a84:	103f911e 	bne	r2,zero,1128cc <__alt_data_end+0xfffd28cc>
  112a88:	00800044 	movi	r2,1
  112a8c:	10803fcc 	andi	r2,r2,255
  112a90:	00c00044 	movi	r3,1
  112a94:	10c05f26 	beq	r2,r3,112c14 <___vfiprintf_internal_r+0xb44>
  112a98:	00c00084 	movi	r3,2
  112a9c:	10ffe31e 	bne	r2,r3,112a2c <__alt_data_end+0xfffd2a2c>
  112aa0:	0027883a 	mov	r19,zero
  112aa4:	0029883a 	mov	r20,zero
  112aa8:	00015106 	br	112ff0 <___vfiprintf_internal_r+0xf20>
  112aac:	9cc03fcc 	andi	r19,r19,255
  112ab0:	b811883a 	mov	r8,r23
  112ab4:	9802c01e 	bne	r19,zero,1135b8 <___vfiprintf_internal_r+0x14e8>
  112ab8:	014004b4 	movhi	r5,18
  112abc:	294c8b04 	addi	r5,r5,12844
  112ac0:	d9402615 	stw	r5,152(sp)
  112ac4:	8880080c 	andi	r2,r17,32
  112ac8:	103f541e 	bne	r2,zero,11281c <__alt_data_end+0xfffd281c>
  112acc:	8880040c 	andi	r2,r17,16
  112ad0:	1001f226 	beq	r2,zero,11329c <___vfiprintf_internal_r+0x11cc>
  112ad4:	d9402217 	ldw	r5,136(sp)
  112ad8:	0029883a 	mov	r20,zero
  112adc:	2cc00017 	ldw	r19,0(r5)
  112ae0:	29400104 	addi	r5,r5,4
  112ae4:	d9402215 	stw	r5,136(sp)
  112ae8:	003f5106 	br	112830 <__alt_data_end+0xfffd2830>
  112aec:	d8c02217 	ldw	r3,136(sp)
  112af0:	b811883a 	mov	r8,r23
  112af4:	d8001d85 	stb	zero,118(sp)
  112af8:	1dc00017 	ldw	r23,0(r3)
  112afc:	1f000104 	addi	fp,r3,4
  112b00:	b8025926 	beq	r23,zero,113468 <___vfiprintf_internal_r+0x1398>
  112b04:	80023316 	blt	r16,zero,1133d4 <___vfiprintf_internal_r+0x1304>
  112b08:	800d883a 	mov	r6,r16
  112b0c:	000b883a 	mov	r5,zero
  112b10:	b809883a 	mov	r4,r23
  112b14:	da002a15 	stw	r8,168(sp)
  112b18:	010b7200 	call	10b720 <memchr>
  112b1c:	da002a17 	ldw	r8,168(sp)
  112b20:	10026826 	beq	r2,zero,1134c4 <___vfiprintf_internal_r+0x13f4>
  112b24:	15e9c83a 	sub	r20,r2,r23
  112b28:	dd401d83 	ldbu	r21,118(sp)
  112b2c:	df002215 	stw	fp,136(sp)
  112b30:	0021883a 	mov	r16,zero
  112b34:	003e6906 	br	1124dc <__alt_data_end+0xfffd24dc>
  112b38:	9cc03fcc 	andi	r19,r19,255
  112b3c:	b811883a 	mov	r8,r23
  112b40:	983fc126 	beq	r19,zero,112a48 <__alt_data_end+0xfffd2a48>
  112b44:	d8c02303 	ldbu	r3,140(sp)
  112b48:	d8c01d85 	stb	r3,118(sp)
  112b4c:	003fbe06 	br	112a48 <__alt_data_end+0xfffd2a48>
  112b50:	d9002217 	ldw	r4,136(sp)
  112b54:	d9402217 	ldw	r5,136(sp)
  112b58:	21000017 	ldw	r4,0(r4)
  112b5c:	28800104 	addi	r2,r5,4
  112b60:	d9002515 	stw	r4,148(sp)
  112b64:	203e3d16 	blt	r4,zero,11245c <__alt_data_end+0xfffd245c>
  112b68:	d8802215 	stw	r2,136(sp)
  112b6c:	b0c00007 	ldb	r3,0(r22)
  112b70:	003db406 	br	112244 <__alt_data_end+0xfffd2244>
  112b74:	00c00ac4 	movi	r3,43
  112b78:	d8c02305 	stb	r3,140(sp)
  112b7c:	04c00044 	movi	r19,1
  112b80:	b0c00007 	ldb	r3,0(r22)
  112b84:	003daf06 	br	112244 <__alt_data_end+0xfffd2244>
  112b88:	b0c00007 	ldb	r3,0(r22)
  112b8c:	01000a84 	movi	r4,42
  112b90:	b4000044 	addi	r16,r22,1
  112b94:	19025e26 	beq	r3,r4,113510 <___vfiprintf_internal_r+0x1440>
  112b98:	1f3ff404 	addi	fp,r3,-48
  112b9c:	0009883a 	mov	r4,zero
  112ba0:	af025236 	bltu	r21,fp,1134ec <___vfiprintf_internal_r+0x141c>
  112ba4:	01400284 	movi	r5,10
  112ba8:	01159fc0 	call	1159fc <__mulsi3>
  112bac:	80c00007 	ldb	r3,0(r16)
  112bb0:	1709883a 	add	r4,r2,fp
  112bb4:	85800044 	addi	r22,r16,1
  112bb8:	1f3ff404 	addi	fp,r3,-48
  112bbc:	b021883a 	mov	r16,r22
  112bc0:	af3ff82e 	bgeu	r21,fp,112ba4 <__alt_data_end+0xfffd2ba4>
  112bc4:	2021883a 	mov	r16,r4
  112bc8:	203d9f0e 	bge	r4,zero,112248 <__alt_data_end+0xfffd2248>
  112bcc:	043fffc4 	movi	r16,-1
  112bd0:	003d9d06 	br	112248 <__alt_data_end+0xfffd2248>
  112bd4:	8c401014 	ori	r17,r17,64
  112bd8:	b0c00007 	ldb	r3,0(r22)
  112bdc:	003d9906 	br	112244 <__alt_data_end+0xfffd2244>
  112be0:	d9002217 	ldw	r4,136(sp)
  112be4:	d8001d85 	stb	zero,118(sp)
  112be8:	20c00204 	addi	r3,r4,8
  112bec:	24c00017 	ldw	r19,0(r4)
  112bf0:	25000117 	ldw	r20,4(r4)
  112bf4:	8001e716 	blt	r16,zero,113394 <___vfiprintf_internal_r+0x12c4>
  112bf8:	013fdfc4 	movi	r4,-129
  112bfc:	9d04b03a 	or	r2,r19,r20
  112c00:	d8c02215 	stw	r3,136(sp)
  112c04:	8922703a 	and	r17,r17,r4
  112c08:	002b883a 	mov	r21,zero
  112c0c:	103f2f1e 	bne	r2,zero,1128cc <__alt_data_end+0xfffd28cc>
  112c10:	803e2f26 	beq	r16,zero,1124d0 <__alt_data_end+0xfffd24d0>
  112c14:	0027883a 	mov	r19,zero
  112c18:	9cc00c04 	addi	r19,r19,48
  112c1c:	dcc019c5 	stb	r19,103(sp)
  112c20:	dd002817 	ldw	r20,160(sp)
  112c24:	ddc019c4 	addi	r23,sp,103
  112c28:	003e2c06 	br	1124dc <__alt_data_end+0xfffd24dc>
  112c2c:	9cc03fcc 	andi	r19,r19,255
  112c30:	b811883a 	mov	r8,r23
  112c34:	9802571e 	bne	r19,zero,113594 <___vfiprintf_internal_r+0x14c4>
  112c38:	18005726 	beq	r3,zero,112d98 <___vfiprintf_internal_r+0xcc8>
  112c3c:	04c00044 	movi	r19,1
  112c40:	d8c01005 	stb	r3,64(sp)
  112c44:	d8001d85 	stb	zero,118(sp)
  112c48:	9829883a 	mov	r20,r19
  112c4c:	ddc01004 	addi	r23,sp,64
  112c50:	003f0a06 	br	11287c <__alt_data_end+0xfffd287c>
  112c54:	d9402017 	ldw	r5,128(sp)
  112c58:	d9002117 	ldw	r4,132(sp)
  112c5c:	d9801a04 	addi	r6,sp,104
  112c60:	da802a15 	stw	r10,168(sp)
  112c64:	0111fbc0 	call	111fbc <__sprint_r.part.0>
  112c68:	da802a17 	ldw	r10,168(sp)
  112c6c:	1000501e 	bne	r2,zero,112db0 <___vfiprintf_internal_r+0xce0>
  112c70:	d9801b17 	ldw	r6,108(sp)
  112c74:	d8801c17 	ldw	r2,112(sp)
  112c78:	d811883a 	mov	r8,sp
  112c7c:	31000044 	addi	r4,r6,1
  112c80:	003e3606 	br	11255c <__alt_data_end+0xfffd255c>
  112c84:	d9001b17 	ldw	r4,108(sp)
  112c88:	d8801c17 	ldw	r2,112(sp)
  112c8c:	21400044 	addi	r5,r4,1
  112c90:	d9801d87 	ldb	r6,118(sp)
  112c94:	303e5226 	beq	r6,zero,1125e0 <__alt_data_end+0xfffd25e0>
  112c98:	01800044 	movi	r6,1
  112c9c:	d9001d84 	addi	r4,sp,118
  112ca0:	1185883a 	add	r2,r2,r6
  112ca4:	41000015 	stw	r4,0(r8)
  112ca8:	41800115 	stw	r6,4(r8)
  112cac:	d8801c15 	stw	r2,112(sp)
  112cb0:	d9401b15 	stw	r5,108(sp)
  112cb4:	010001c4 	movi	r4,7
  112cb8:	2140b00e 	bge	r4,r5,112f7c <___vfiprintf_internal_r+0xeac>
  112cbc:	1000f61e 	bne	r2,zero,113098 <___vfiprintf_internal_r+0xfc8>
  112cc0:	3800b31e 	bne	r7,zero,112f90 <___vfiprintf_internal_r+0xec0>
  112cc4:	0009883a 	mov	r4,zero
  112cc8:	300b883a 	mov	r5,r6
  112ccc:	d811883a 	mov	r8,sp
  112cd0:	01802004 	movi	r6,128
  112cd4:	19be5226 	beq	r3,r6,112620 <__alt_data_end+0xfffd2620>
  112cd8:	8521c83a 	sub	r16,r16,r20
  112cdc:	043e790e 	bge	zero,r16,1126c4 <__alt_data_end+0xfffd26c4>
  112ce0:	05400404 	movi	r21,16
  112ce4:	ac01b00e 	bge	r21,r16,1133a8 <___vfiprintf_internal_r+0x12d8>
  112ce8:	014004b4 	movhi	r5,18
  112cec:	294dcc84 	addi	r5,r5,14130
  112cf0:	d9402315 	stw	r5,140(sp)
  112cf4:	070001c4 	movi	fp,7
  112cf8:	00000506 	br	112d10 <___vfiprintf_internal_r+0xc40>
  112cfc:	21400084 	addi	r5,r4,2
  112d00:	42000204 	addi	r8,r8,8
  112d04:	1809883a 	mov	r4,r3
  112d08:	843ffc04 	addi	r16,r16,-16
  112d0c:	ac000d0e 	bge	r21,r16,112d44 <___vfiprintf_internal_r+0xc74>
  112d10:	10800404 	addi	r2,r2,16
  112d14:	20c00044 	addi	r3,r4,1
  112d18:	44800015 	stw	r18,0(r8)
  112d1c:	45400115 	stw	r21,4(r8)
  112d20:	d8801c15 	stw	r2,112(sp)
  112d24:	d8c01b15 	stw	r3,108(sp)
  112d28:	e0fff40e 	bge	fp,r3,112cfc <__alt_data_end+0xfffd2cfc>
  112d2c:	1000101e 	bne	r2,zero,112d70 <___vfiprintf_internal_r+0xca0>
  112d30:	843ffc04 	addi	r16,r16,-16
  112d34:	01400044 	movi	r5,1
  112d38:	0009883a 	mov	r4,zero
  112d3c:	d811883a 	mov	r8,sp
  112d40:	ac3ff316 	blt	r21,r16,112d10 <__alt_data_end+0xfffd2d10>
  112d44:	d8c02317 	ldw	r3,140(sp)
  112d48:	1405883a 	add	r2,r2,r16
  112d4c:	44000115 	stw	r16,4(r8)
  112d50:	40c00015 	stw	r3,0(r8)
  112d54:	d8801c15 	stw	r2,112(sp)
  112d58:	d9401b15 	stw	r5,108(sp)
  112d5c:	00c001c4 	movi	r3,7
  112d60:	19401916 	blt	r3,r5,112dc8 <___vfiprintf_internal_r+0xcf8>
  112d64:	42000204 	addi	r8,r8,8
  112d68:	29400044 	addi	r5,r5,1
  112d6c:	003e5506 	br	1126c4 <__alt_data_end+0xfffd26c4>
  112d70:	d9402017 	ldw	r5,128(sp)
  112d74:	d9002117 	ldw	r4,132(sp)
  112d78:	d9801a04 	addi	r6,sp,104
  112d7c:	0111fbc0 	call	111fbc <__sprint_r.part.0>
  112d80:	10000b1e 	bne	r2,zero,112db0 <___vfiprintf_internal_r+0xce0>
  112d84:	d9001b17 	ldw	r4,108(sp)
  112d88:	d8801c17 	ldw	r2,112(sp)
  112d8c:	d811883a 	mov	r8,sp
  112d90:	21400044 	addi	r5,r4,1
  112d94:	003fdc06 	br	112d08 <__alt_data_end+0xfffd2d08>
  112d98:	d8801c17 	ldw	r2,112(sp)
  112d9c:	10000426 	beq	r2,zero,112db0 <___vfiprintf_internal_r+0xce0>
  112da0:	d9402017 	ldw	r5,128(sp)
  112da4:	d9002117 	ldw	r4,132(sp)
  112da8:	d9801a04 	addi	r6,sp,104
  112dac:	0111fbc0 	call	111fbc <__sprint_r.part.0>
  112db0:	d9402017 	ldw	r5,128(sp)
  112db4:	2880030b 	ldhu	r2,12(r5)
  112db8:	1080100c 	andi	r2,r2,64
  112dbc:	10014d1e 	bne	r2,zero,1132f4 <___vfiprintf_internal_r+0x1224>
  112dc0:	d8802417 	ldw	r2,144(sp)
  112dc4:	003d9706 	br	112424 <__alt_data_end+0xfffd2424>
  112dc8:	1000d21e 	bne	r2,zero,113114 <___vfiprintf_internal_r+0x1044>
  112dcc:	00c00044 	movi	r3,1
  112dd0:	a005883a 	mov	r2,r20
  112dd4:	ddc00015 	stw	r23,0(sp)
  112dd8:	dd000115 	stw	r20,4(sp)
  112ddc:	dd001c15 	stw	r20,112(sp)
  112de0:	d8c01b15 	stw	r3,108(sp)
  112de4:	d811883a 	mov	r8,sp
  112de8:	42000204 	addi	r8,r8,8
  112dec:	8c40010c 	andi	r17,r17,4
  112df0:	88004026 	beq	r17,zero,112ef4 <___vfiprintf_internal_r+0xe24>
  112df4:	d9002517 	ldw	r4,148(sp)
  112df8:	24e3c83a 	sub	r17,r4,r19
  112dfc:	04403d0e 	bge	zero,r17,112ef4 <___vfiprintf_internal_r+0xe24>
  112e00:	04000404 	movi	r16,16
  112e04:	8441a90e 	bge	r16,r17,1134ac <___vfiprintf_internal_r+0x13dc>
  112e08:	00c004b4 	movhi	r3,18
  112e0c:	18cdd084 	addi	r3,r3,14146
  112e10:	d9001b17 	ldw	r4,108(sp)
  112e14:	d8c02315 	stw	r3,140(sp)
  112e18:	050001c4 	movi	r20,7
  112e1c:	dd402117 	ldw	r21,132(sp)
  112e20:	ddc02017 	ldw	r23,128(sp)
  112e24:	00000506 	br	112e3c <___vfiprintf_internal_r+0xd6c>
  112e28:	21400084 	addi	r5,r4,2
  112e2c:	42000204 	addi	r8,r8,8
  112e30:	1809883a 	mov	r4,r3
  112e34:	8c7ffc04 	addi	r17,r17,-16
  112e38:	84400f0e 	bge	r16,r17,112e78 <___vfiprintf_internal_r+0xda8>
  112e3c:	014004b4 	movhi	r5,18
  112e40:	10800404 	addi	r2,r2,16
  112e44:	20c00044 	addi	r3,r4,1
  112e48:	294dd084 	addi	r5,r5,14146
  112e4c:	41400015 	stw	r5,0(r8)
  112e50:	44000115 	stw	r16,4(r8)
  112e54:	d8801c15 	stw	r2,112(sp)
  112e58:	d8c01b15 	stw	r3,108(sp)
  112e5c:	a0fff20e 	bge	r20,r3,112e28 <__alt_data_end+0xfffd2e28>
  112e60:	1000141e 	bne	r2,zero,112eb4 <___vfiprintf_internal_r+0xde4>
  112e64:	8c7ffc04 	addi	r17,r17,-16
  112e68:	01400044 	movi	r5,1
  112e6c:	0009883a 	mov	r4,zero
  112e70:	d811883a 	mov	r8,sp
  112e74:	847ff116 	blt	r16,r17,112e3c <__alt_data_end+0xfffd2e3c>
  112e78:	d8c02317 	ldw	r3,140(sp)
  112e7c:	1445883a 	add	r2,r2,r17
  112e80:	44400115 	stw	r17,4(r8)
  112e84:	40c00015 	stw	r3,0(r8)
  112e88:	d8801c15 	stw	r2,112(sp)
  112e8c:	d9401b15 	stw	r5,108(sp)
  112e90:	00c001c4 	movi	r3,7
  112e94:	1940170e 	bge	r3,r5,112ef4 <___vfiprintf_internal_r+0xe24>
  112e98:	1000101e 	bne	r2,zero,112edc <___vfiprintf_internal_r+0xe0c>
  112e9c:	d8802517 	ldw	r2,148(sp)
  112ea0:	14c11616 	blt	r2,r19,1132fc <___vfiprintf_internal_r+0x122c>
  112ea4:	d9002417 	ldw	r4,144(sp)
  112ea8:	2089883a 	add	r4,r4,r2
  112eac:	d9002415 	stw	r4,144(sp)
  112eb0:	003e1806 	br	112714 <__alt_data_end+0xfffd2714>
  112eb4:	d9801a04 	addi	r6,sp,104
  112eb8:	b80b883a 	mov	r5,r23
  112ebc:	a809883a 	mov	r4,r21
  112ec0:	0111fbc0 	call	111fbc <__sprint_r.part.0>
  112ec4:	103fba1e 	bne	r2,zero,112db0 <__alt_data_end+0xfffd2db0>
  112ec8:	d9001b17 	ldw	r4,108(sp)
  112ecc:	d8801c17 	ldw	r2,112(sp)
  112ed0:	d811883a 	mov	r8,sp
  112ed4:	21400044 	addi	r5,r4,1
  112ed8:	003fd606 	br	112e34 <__alt_data_end+0xfffd2e34>
  112edc:	d9402017 	ldw	r5,128(sp)
  112ee0:	d9002117 	ldw	r4,132(sp)
  112ee4:	d9801a04 	addi	r6,sp,104
  112ee8:	0111fbc0 	call	111fbc <__sprint_r.part.0>
  112eec:	103fb01e 	bne	r2,zero,112db0 <__alt_data_end+0xfffd2db0>
  112ef0:	d8801c17 	ldw	r2,112(sp)
  112ef4:	d8c02517 	ldw	r3,148(sp)
  112ef8:	1cc0010e 	bge	r3,r19,112f00 <___vfiprintf_internal_r+0xe30>
  112efc:	9807883a 	mov	r3,r19
  112f00:	d9002417 	ldw	r4,144(sp)
  112f04:	20c9883a 	add	r4,r4,r3
  112f08:	d9002415 	stw	r4,144(sp)
  112f0c:	103e0126 	beq	r2,zero,112714 <__alt_data_end+0xfffd2714>
  112f10:	d9402017 	ldw	r5,128(sp)
  112f14:	d9002117 	ldw	r4,132(sp)
  112f18:	d9801a04 	addi	r6,sp,104
  112f1c:	0111fbc0 	call	111fbc <__sprint_r.part.0>
  112f20:	103dfc26 	beq	r2,zero,112714 <__alt_data_end+0xfffd2714>
  112f24:	003fa206 	br	112db0 <__alt_data_end+0xfffd2db0>
  112f28:	d9402017 	ldw	r5,128(sp)
  112f2c:	d9002117 	ldw	r4,132(sp)
  112f30:	d9801a04 	addi	r6,sp,104
  112f34:	d9c02b15 	stw	r7,172(sp)
  112f38:	0111fbc0 	call	111fbc <__sprint_r.part.0>
  112f3c:	d9c02b17 	ldw	r7,172(sp)
  112f40:	103f9b1e 	bne	r2,zero,112db0 <__alt_data_end+0xfffd2db0>
  112f44:	d9001b17 	ldw	r4,108(sp)
  112f48:	d8801c17 	ldw	r2,112(sp)
  112f4c:	d811883a 	mov	r8,sp
  112f50:	21800044 	addi	r6,r4,1
  112f54:	003dbf06 	br	112654 <__alt_data_end+0xfffd2654>
  112f58:	1000d81e 	bne	r2,zero,1132bc <___vfiprintf_internal_r+0x11ec>
  112f5c:	d9001d87 	ldb	r4,118(sp)
  112f60:	20000a26 	beq	r4,zero,112f8c <___vfiprintf_internal_r+0xebc>
  112f64:	00800044 	movi	r2,1
  112f68:	d9001d84 	addi	r4,sp,118
  112f6c:	100b883a 	mov	r5,r2
  112f70:	d9000015 	stw	r4,0(sp)
  112f74:	d8800115 	stw	r2,4(sp)
  112f78:	d811883a 	mov	r8,sp
  112f7c:	2809883a 	mov	r4,r5
  112f80:	42000204 	addi	r8,r8,8
  112f84:	29400044 	addi	r5,r5,1
  112f88:	003d9506 	br	1125e0 <__alt_data_end+0xfffd25e0>
  112f8c:	3800fd26 	beq	r7,zero,113384 <___vfiprintf_internal_r+0x12b4>
  112f90:	00800084 	movi	r2,2
  112f94:	d9001d04 	addi	r4,sp,116
  112f98:	d9000015 	stw	r4,0(sp)
  112f9c:	d8800115 	stw	r2,4(sp)
  112fa0:	01400044 	movi	r5,1
  112fa4:	d811883a 	mov	r8,sp
  112fa8:	2809883a 	mov	r4,r5
  112fac:	42000204 	addi	r8,r8,8
  112fb0:	29400044 	addi	r5,r5,1
  112fb4:	003f4606 	br	112cd0 <__alt_data_end+0xfffd2cd0>
  112fb8:	d8802517 	ldw	r2,148(sp)
  112fbc:	14c0010e 	bge	r2,r19,112fc4 <___vfiprintf_internal_r+0xef4>
  112fc0:	9805883a 	mov	r2,r19
  112fc4:	d9402417 	ldw	r5,144(sp)
  112fc8:	288b883a 	add	r5,r5,r2
  112fcc:	d9402415 	stw	r5,144(sp)
  112fd0:	003dd006 	br	112714 <__alt_data_end+0xfffd2714>
  112fd4:	d8001d85 	stb	zero,118(sp)
  112fd8:	80005d16 	blt	r16,zero,113150 <___vfiprintf_internal_r+0x1080>
  112fdc:	00ffdfc4 	movi	r3,-129
  112fe0:	9d04b03a 	or	r2,r19,r20
  112fe4:	88e2703a 	and	r17,r17,r3
  112fe8:	103d3726 	beq	r2,zero,1124c8 <__alt_data_end+0xfffd24c8>
  112fec:	002b883a 	mov	r21,zero
  112ff0:	d9002617 	ldw	r4,152(sp)
  112ff4:	ddc01a04 	addi	r23,sp,104
  112ff8:	988003cc 	andi	r2,r19,15
  112ffc:	a006973a 	slli	r3,r20,28
  113000:	2085883a 	add	r2,r4,r2
  113004:	9826d13a 	srli	r19,r19,4
  113008:	10800003 	ldbu	r2,0(r2)
  11300c:	a028d13a 	srli	r20,r20,4
  113010:	bdffffc4 	addi	r23,r23,-1
  113014:	1ce6b03a 	or	r19,r3,r19
  113018:	b8800005 	stb	r2,0(r23)
  11301c:	9d04b03a 	or	r2,r19,r20
  113020:	103ff51e 	bne	r2,zero,112ff8 <__alt_data_end+0xfffd2ff8>
  113024:	d8801e17 	ldw	r2,120(sp)
  113028:	15e9c83a 	sub	r20,r2,r23
  11302c:	003d2b06 	br	1124dc <__alt_data_end+0xfffd24dc>
  113030:	d9402017 	ldw	r5,128(sp)
  113034:	d9002117 	ldw	r4,132(sp)
  113038:	d9801a04 	addi	r6,sp,104
  11303c:	0111fbc0 	call	111fbc <__sprint_r.part.0>
  113040:	103f5b1e 	bne	r2,zero,112db0 <__alt_data_end+0xfffd2db0>
  113044:	d8801c17 	ldw	r2,112(sp)
  113048:	d811883a 	mov	r8,sp
  11304c:	003f6706 	br	112dec <__alt_data_end+0xfffd2dec>
  113050:	d9402017 	ldw	r5,128(sp)
  113054:	d9002117 	ldw	r4,132(sp)
  113058:	d9801a04 	addi	r6,sp,104
  11305c:	0111fbc0 	call	111fbc <__sprint_r.part.0>
  113060:	103f531e 	bne	r2,zero,112db0 <__alt_data_end+0xfffd2db0>
  113064:	d811883a 	mov	r8,sp
  113068:	003cd906 	br	1123d0 <__alt_data_end+0xfffd23d0>
  11306c:	10803fcc 	andi	r2,r2,255
  113070:	1080201c 	xori	r2,r2,128
  113074:	10bfe004 	addi	r2,r2,-128
  113078:	00c00c04 	movi	r3,48
  11307c:	10ffe926 	beq	r2,r3,113024 <__alt_data_end+0xfffd3024>
  113080:	b8ffffc5 	stb	r3,-1(r23)
  113084:	d8c01e17 	ldw	r3,120(sp)
  113088:	b8bfffc4 	addi	r2,r23,-1
  11308c:	102f883a 	mov	r23,r2
  113090:	18a9c83a 	sub	r20,r3,r2
  113094:	003d1106 	br	1124dc <__alt_data_end+0xfffd24dc>
  113098:	d9402017 	ldw	r5,128(sp)
  11309c:	d9002117 	ldw	r4,132(sp)
  1130a0:	d9801a04 	addi	r6,sp,104
  1130a4:	d8c02a15 	stw	r3,168(sp)
  1130a8:	d9c02b15 	stw	r7,172(sp)
  1130ac:	0111fbc0 	call	111fbc <__sprint_r.part.0>
  1130b0:	d8c02a17 	ldw	r3,168(sp)
  1130b4:	d9c02b17 	ldw	r7,172(sp)
  1130b8:	103f3d1e 	bne	r2,zero,112db0 <__alt_data_end+0xfffd2db0>
  1130bc:	d9001b17 	ldw	r4,108(sp)
  1130c0:	d8801c17 	ldw	r2,112(sp)
  1130c4:	d811883a 	mov	r8,sp
  1130c8:	21400044 	addi	r5,r4,1
  1130cc:	003d4406 	br	1125e0 <__alt_data_end+0xfffd25e0>
  1130d0:	d9402017 	ldw	r5,128(sp)
  1130d4:	d9002117 	ldw	r4,132(sp)
  1130d8:	d9801a04 	addi	r6,sp,104
  1130dc:	d8c02a15 	stw	r3,168(sp)
  1130e0:	0111fbc0 	call	111fbc <__sprint_r.part.0>
  1130e4:	d8c02a17 	ldw	r3,168(sp)
  1130e8:	103f311e 	bne	r2,zero,112db0 <__alt_data_end+0xfffd2db0>
  1130ec:	d9001b17 	ldw	r4,108(sp)
  1130f0:	d8801c17 	ldw	r2,112(sp)
  1130f4:	d811883a 	mov	r8,sp
  1130f8:	21400044 	addi	r5,r4,1
  1130fc:	003ef406 	br	112cd0 <__alt_data_end+0xfffd2cd0>
  113100:	1000bd1e 	bne	r2,zero,1133f8 <___vfiprintf_internal_r+0x1328>
  113104:	01400044 	movi	r5,1
  113108:	0009883a 	mov	r4,zero
  11310c:	d811883a 	mov	r8,sp
  113110:	003ef106 	br	112cd8 <__alt_data_end+0xfffd2cd8>
  113114:	d9402017 	ldw	r5,128(sp)
  113118:	d9002117 	ldw	r4,132(sp)
  11311c:	d9801a04 	addi	r6,sp,104
  113120:	0111fbc0 	call	111fbc <__sprint_r.part.0>
  113124:	103f221e 	bne	r2,zero,112db0 <__alt_data_end+0xfffd2db0>
  113128:	d9401b17 	ldw	r5,108(sp)
  11312c:	d8801c17 	ldw	r2,112(sp)
  113130:	d811883a 	mov	r8,sp
  113134:	29400044 	addi	r5,r5,1
  113138:	003d6206 	br	1126c4 <__alt_data_end+0xfffd26c4>
  11313c:	014004b4 	movhi	r5,18
  113140:	294c9004 	addi	r5,r5,12864
  113144:	d9402615 	stw	r5,152(sp)
  113148:	d8c02215 	stw	r3,136(sp)
  11314c:	1023883a 	mov	r17,r2
  113150:	9d04b03a 	or	r2,r19,r20
  113154:	103fa51e 	bne	r2,zero,112fec <__alt_data_end+0xfffd2fec>
  113158:	002b883a 	mov	r21,zero
  11315c:	00800084 	movi	r2,2
  113160:	003e4a06 	br	112a8c <__alt_data_end+0xfffd2a8c>
  113164:	014004b4 	movhi	r5,18
  113168:	294c9004 	addi	r5,r5,12864
  11316c:	002b883a 	mov	r21,zero
  113170:	d9402615 	stw	r5,152(sp)
  113174:	003f9e06 	br	112ff0 <__alt_data_end+0xfffd2ff0>
  113178:	d9402217 	ldw	r5,136(sp)
  11317c:	d8001d85 	stb	zero,118(sp)
  113180:	0029883a 	mov	r20,zero
  113184:	28800104 	addi	r2,r5,4
  113188:	2cc00017 	ldw	r19,0(r5)
  11318c:	803e3a16 	blt	r16,zero,112a78 <__alt_data_end+0xfffd2a78>
  113190:	00ffdfc4 	movi	r3,-129
  113194:	d8802215 	stw	r2,136(sp)
  113198:	88e2703a 	and	r17,r17,r3
  11319c:	002b883a 	mov	r21,zero
  1131a0:	983e9b26 	beq	r19,zero,112c10 <__alt_data_end+0xfffd2c10>
  1131a4:	00800244 	movi	r2,9
  1131a8:	14fdc936 	bltu	r2,r19,1128d0 <__alt_data_end+0xfffd28d0>
  1131ac:	003e9a06 	br	112c18 <__alt_data_end+0xfffd2c18>
  1131b0:	00800c04 	movi	r2,48
  1131b4:	d8c01d45 	stb	r3,117(sp)
  1131b8:	d8801d05 	stb	r2,116(sp)
  1131bc:	d8001d85 	stb	zero,118(sp)
  1131c0:	88c00094 	ori	r3,r17,2
  1131c4:	80009c16 	blt	r16,zero,113438 <___vfiprintf_internal_r+0x1368>
  1131c8:	00bfdfc4 	movi	r2,-129
  1131cc:	88a2703a 	and	r17,r17,r2
  1131d0:	8c400094 	ori	r17,r17,2
  1131d4:	002b883a 	mov	r21,zero
  1131d8:	003f8506 	br	112ff0 <__alt_data_end+0xfffd2ff0>
  1131dc:	b029883a 	mov	r20,r22
  1131e0:	003c0b06 	br	112210 <__alt_data_end+0xfffd2210>
  1131e4:	04e7c83a 	sub	r19,zero,r19
  1131e8:	05400b44 	movi	r21,45
  1131ec:	9804c03a 	cmpne	r2,r19,zero
  1131f0:	0529c83a 	sub	r20,zero,r20
  1131f4:	dd401d85 	stb	r21,118(sp)
  1131f8:	a0a9c83a 	sub	r20,r20,r2
  1131fc:	80009716 	blt	r16,zero,11345c <___vfiprintf_internal_r+0x138c>
  113200:	00bfdfc4 	movi	r2,-129
  113204:	88a2703a 	and	r17,r17,r2
  113208:	003db006 	br	1128cc <__alt_data_end+0xfffd28cc>
  11320c:	b0c00007 	ldb	r3,0(r22)
  113210:	003c0c06 	br	112244 <__alt_data_end+0xfffd2244>
  113214:	8880100c 	andi	r2,r17,64
  113218:	d8001d85 	stb	zero,118(sp)
  11321c:	1000461e 	bne	r2,zero,113338 <___vfiprintf_internal_r+0x1268>
  113220:	d9002217 	ldw	r4,136(sp)
  113224:	0029883a 	mov	r20,zero
  113228:	20800104 	addi	r2,r4,4
  11322c:	24c00017 	ldw	r19,0(r4)
  113230:	803df80e 	bge	r16,zero,112a14 <__alt_data_end+0xfffd2a14>
  113234:	9d06b03a 	or	r3,r19,r20
  113238:	d8802215 	stw	r2,136(sp)
  11323c:	183d5e1e 	bne	r3,zero,1127b8 <__alt_data_end+0xfffd27b8>
  113240:	002b883a 	mov	r21,zero
  113244:	0005883a 	mov	r2,zero
  113248:	003e1006 	br	112a8c <__alt_data_end+0xfffd2a8c>
  11324c:	8880040c 	andi	r2,r17,16
  113250:	1000321e 	bne	r2,zero,11331c <___vfiprintf_internal_r+0x124c>
  113254:	8c40100c 	andi	r17,r17,64
  113258:	88008d26 	beq	r17,zero,113490 <___vfiprintf_internal_r+0x13c0>
  11325c:	d9402217 	ldw	r5,136(sp)
  113260:	d8c02417 	ldw	r3,144(sp)
  113264:	28800017 	ldw	r2,0(r5)
  113268:	29400104 	addi	r5,r5,4
  11326c:	d9402215 	stw	r5,136(sp)
  113270:	10c0000d 	sth	r3,0(r2)
  113274:	003bca06 	br	1121a0 <__alt_data_end+0xfffd21a0>
  113278:	8880100c 	andi	r2,r17,64
  11327c:	10003a26 	beq	r2,zero,113368 <___vfiprintf_internal_r+0x1298>
  113280:	d8802217 	ldw	r2,136(sp)
  113284:	14c0000f 	ldh	r19,0(r2)
  113288:	10800104 	addi	r2,r2,4
  11328c:	d8802215 	stw	r2,136(sp)
  113290:	9829d7fa 	srai	r20,r19,31
  113294:	a005883a 	mov	r2,r20
  113298:	003d8506 	br	1128b0 <__alt_data_end+0xfffd28b0>
  11329c:	8880100c 	andi	r2,r17,64
  1132a0:	10002b26 	beq	r2,zero,113350 <___vfiprintf_internal_r+0x1280>
  1132a4:	d8802217 	ldw	r2,136(sp)
  1132a8:	0029883a 	mov	r20,zero
  1132ac:	14c0000b 	ldhu	r19,0(r2)
  1132b0:	10800104 	addi	r2,r2,4
  1132b4:	d8802215 	stw	r2,136(sp)
  1132b8:	003d5d06 	br	112830 <__alt_data_end+0xfffd2830>
  1132bc:	d9402017 	ldw	r5,128(sp)
  1132c0:	d9002117 	ldw	r4,132(sp)
  1132c4:	d9801a04 	addi	r6,sp,104
  1132c8:	d8c02a15 	stw	r3,168(sp)
  1132cc:	d9c02b15 	stw	r7,172(sp)
  1132d0:	0111fbc0 	call	111fbc <__sprint_r.part.0>
  1132d4:	d8c02a17 	ldw	r3,168(sp)
  1132d8:	d9c02b17 	ldw	r7,172(sp)
  1132dc:	103eb41e 	bne	r2,zero,112db0 <__alt_data_end+0xfffd2db0>
  1132e0:	d9001b17 	ldw	r4,108(sp)
  1132e4:	d8801c17 	ldw	r2,112(sp)
  1132e8:	d811883a 	mov	r8,sp
  1132ec:	21400044 	addi	r5,r4,1
  1132f0:	003e6706 	br	112c90 <__alt_data_end+0xfffd2c90>
  1132f4:	00bfffc4 	movi	r2,-1
  1132f8:	003c4a06 	br	112424 <__alt_data_end+0xfffd2424>
  1132fc:	9805883a 	mov	r2,r19
  113300:	003ee806 	br	112ea4 <__alt_data_end+0xfffd2ea4>
  113304:	d8c02217 	ldw	r3,136(sp)
  113308:	0029883a 	mov	r20,zero
  11330c:	18800104 	addi	r2,r3,4
  113310:	1cc0000b 	ldhu	r19,0(r3)
  113314:	803f9e0e 	bge	r16,zero,113190 <__alt_data_end+0xfffd3190>
  113318:	003dd706 	br	112a78 <__alt_data_end+0xfffd2a78>
  11331c:	d8c02217 	ldw	r3,136(sp)
  113320:	d9002417 	ldw	r4,144(sp)
  113324:	18800017 	ldw	r2,0(r3)
  113328:	18c00104 	addi	r3,r3,4
  11332c:	d8c02215 	stw	r3,136(sp)
  113330:	11000015 	stw	r4,0(r2)
  113334:	003b9a06 	br	1121a0 <__alt_data_end+0xfffd21a0>
  113338:	d8c02217 	ldw	r3,136(sp)
  11333c:	0029883a 	mov	r20,zero
  113340:	18800104 	addi	r2,r3,4
  113344:	1cc0000b 	ldhu	r19,0(r3)
  113348:	803db20e 	bge	r16,zero,112a14 <__alt_data_end+0xfffd2a14>
  11334c:	003fb906 	br	113234 <__alt_data_end+0xfffd3234>
  113350:	d9002217 	ldw	r4,136(sp)
  113354:	0029883a 	mov	r20,zero
  113358:	24c00017 	ldw	r19,0(r4)
  11335c:	21000104 	addi	r4,r4,4
  113360:	d9002215 	stw	r4,136(sp)
  113364:	003d3206 	br	112830 <__alt_data_end+0xfffd2830>
  113368:	d8c02217 	ldw	r3,136(sp)
  11336c:	1cc00017 	ldw	r19,0(r3)
  113370:	18c00104 	addi	r3,r3,4
  113374:	d8c02215 	stw	r3,136(sp)
  113378:	9829d7fa 	srai	r20,r19,31
  11337c:	a005883a 	mov	r2,r20
  113380:	003d4b06 	br	1128b0 <__alt_data_end+0xfffd28b0>
  113384:	0009883a 	mov	r4,zero
  113388:	01400044 	movi	r5,1
  11338c:	d811883a 	mov	r8,sp
  113390:	003e4f06 	br	112cd0 <__alt_data_end+0xfffd2cd0>
  113394:	d8c02215 	stw	r3,136(sp)
  113398:	002b883a 	mov	r21,zero
  11339c:	003db806 	br	112a80 <__alt_data_end+0xfffd2a80>
  1133a0:	d811883a 	mov	r8,sp
  1133a4:	003e9606 	br	112e00 <__alt_data_end+0xfffd2e00>
  1133a8:	010004b4 	movhi	r4,18
  1133ac:	210dcc84 	addi	r4,r4,14130
  1133b0:	d9002315 	stw	r4,140(sp)
  1133b4:	003e6306 	br	112d44 <__alt_data_end+0xfffd2d44>
  1133b8:	b0c00043 	ldbu	r3,1(r22)
  1133bc:	8c400814 	ori	r17,r17,32
  1133c0:	b5800044 	addi	r22,r22,1
  1133c4:	18c03fcc 	andi	r3,r3,255
  1133c8:	18c0201c 	xori	r3,r3,128
  1133cc:	18ffe004 	addi	r3,r3,-128
  1133d0:	003b9c06 	br	112244 <__alt_data_end+0xfffd2244>
  1133d4:	b809883a 	mov	r4,r23
  1133d8:	da002a15 	stw	r8,168(sp)
  1133dc:	0101cfc0 	call	101cfc <strlen>
  1133e0:	1029883a 	mov	r20,r2
  1133e4:	dd401d83 	ldbu	r21,118(sp)
  1133e8:	df002215 	stw	fp,136(sp)
  1133ec:	0021883a 	mov	r16,zero
  1133f0:	da002a17 	ldw	r8,168(sp)
  1133f4:	003c3906 	br	1124dc <__alt_data_end+0xfffd24dc>
  1133f8:	d9402017 	ldw	r5,128(sp)
  1133fc:	d9002117 	ldw	r4,132(sp)
  113400:	d9801a04 	addi	r6,sp,104
  113404:	0111fbc0 	call	111fbc <__sprint_r.part.0>
  113408:	103e691e 	bne	r2,zero,112db0 <__alt_data_end+0xfffd2db0>
  11340c:	d9001b17 	ldw	r4,108(sp)
  113410:	d8801c17 	ldw	r2,112(sp)
  113414:	d811883a 	mov	r8,sp
  113418:	21400044 	addi	r5,r4,1
  11341c:	003e2e06 	br	112cd8 <__alt_data_end+0xfffd2cd8>
  113420:	010004b4 	movhi	r4,18
  113424:	210dd084 	addi	r4,r4,14146
  113428:	d9002315 	stw	r4,140(sp)
  11342c:	d9001b17 	ldw	r4,108(sp)
  113430:	21000044 	addi	r4,r4,1
  113434:	003c5e06 	br	1125b0 <__alt_data_end+0xfffd25b0>
  113438:	002b883a 	mov	r21,zero
  11343c:	00800084 	movi	r2,2
  113440:	10803fcc 	andi	r2,r2,255
  113444:	01000044 	movi	r4,1
  113448:	11002b26 	beq	r2,r4,1134f8 <___vfiprintf_internal_r+0x1428>
  11344c:	01000084 	movi	r4,2
  113450:	11002b1e 	bne	r2,r4,113500 <___vfiprintf_internal_r+0x1430>
  113454:	1823883a 	mov	r17,r3
  113458:	003ee506 	br	112ff0 <__alt_data_end+0xfffd2ff0>
  11345c:	8807883a 	mov	r3,r17
  113460:	00800044 	movi	r2,1
  113464:	003ff606 	br	113440 <__alt_data_end+0xfffd3440>
  113468:	00800184 	movi	r2,6
  11346c:	1400012e 	bgeu	r2,r16,113474 <___vfiprintf_internal_r+0x13a4>
  113470:	1021883a 	mov	r16,r2
  113474:	8029883a 	mov	r20,r16
  113478:	8027883a 	mov	r19,r16
  11347c:	80002216 	blt	r16,zero,113508 <___vfiprintf_internal_r+0x1438>
  113480:	05c004b4 	movhi	r23,18
  113484:	df002215 	stw	fp,136(sp)
  113488:	bdcc9504 	addi	r23,r23,12884
  11348c:	003cfb06 	br	11287c <__alt_data_end+0xfffd287c>
  113490:	d9002217 	ldw	r4,136(sp)
  113494:	d9402417 	ldw	r5,144(sp)
  113498:	20800017 	ldw	r2,0(r4)
  11349c:	21000104 	addi	r4,r4,4
  1134a0:	d9002215 	stw	r4,136(sp)
  1134a4:	11400015 	stw	r5,0(r2)
  1134a8:	003b3d06 	br	1121a0 <__alt_data_end+0xfffd21a0>
  1134ac:	014004b4 	movhi	r5,18
  1134b0:	294dd084 	addi	r5,r5,14146
  1134b4:	d9402315 	stw	r5,140(sp)
  1134b8:	d9401b17 	ldw	r5,108(sp)
  1134bc:	29400044 	addi	r5,r5,1
  1134c0:	003e6d06 	br	112e78 <__alt_data_end+0xfffd2e78>
  1134c4:	8029883a 	mov	r20,r16
  1134c8:	dd401d83 	ldbu	r21,118(sp)
  1134cc:	df002215 	stw	fp,136(sp)
  1134d0:	0021883a 	mov	r16,zero
  1134d4:	003c0106 	br	1124dc <__alt_data_end+0xfffd24dc>
  1134d8:	00c004b4 	movhi	r3,18
  1134dc:	18cdcc84 	addi	r3,r3,14130
  1134e0:	d8c02315 	stw	r3,140(sp)
  1134e4:	280d883a 	mov	r6,r5
  1134e8:	003c6906 	br	112690 <__alt_data_end+0xfffd2690>
  1134ec:	802d883a 	mov	r22,r16
  1134f0:	0021883a 	mov	r16,zero
  1134f4:	003b5406 	br	112248 <__alt_data_end+0xfffd2248>
  1134f8:	1823883a 	mov	r17,r3
  1134fc:	003cf306 	br	1128cc <__alt_data_end+0xfffd28cc>
  113500:	1823883a 	mov	r17,r3
  113504:	003cad06 	br	1127bc <__alt_data_end+0xfffd27bc>
  113508:	0027883a 	mov	r19,zero
  11350c:	003fdc06 	br	113480 <__alt_data_end+0xfffd3480>
  113510:	d9402217 	ldw	r5,136(sp)
  113514:	8005883a 	mov	r2,r16
  113518:	b0c00043 	ldbu	r3,1(r22)
  11351c:	2c000017 	ldw	r16,0(r5)
  113520:	29000104 	addi	r4,r5,4
  113524:	d9002215 	stw	r4,136(sp)
  113528:	102d883a 	mov	r22,r2
  11352c:	803fa50e 	bge	r16,zero,1133c4 <__alt_data_end+0xfffd33c4>
  113530:	18c03fcc 	andi	r3,r3,255
  113534:	18c0201c 	xori	r3,r3,128
  113538:	043fffc4 	movi	r16,-1
  11353c:	18ffe004 	addi	r3,r3,-128
  113540:	003b4006 	br	112244 <__alt_data_end+0xfffd2244>
  113544:	d9402303 	ldbu	r5,140(sp)
  113548:	d9401d85 	stb	r5,118(sp)
  11354c:	003cae06 	br	112808 <__alt_data_end+0xfffd2808>
  113550:	d8c02303 	ldbu	r3,140(sp)
  113554:	d8c01d85 	stb	r3,118(sp)
  113558:	003d1406 	br	1129ac <__alt_data_end+0xfffd29ac>
  11355c:	d8c02303 	ldbu	r3,140(sp)
  113560:	d8c01d85 	stb	r3,118(sp)
  113564:	003cca06 	br	112890 <__alt_data_end+0xfffd2890>
  113568:	8880004c 	andi	r2,r17,1
  11356c:	002b883a 	mov	r21,zero
  113570:	10000526 	beq	r2,zero,113588 <___vfiprintf_internal_r+0x14b8>
  113574:	00800c04 	movi	r2,48
  113578:	d88019c5 	stb	r2,103(sp)
  11357c:	dd002817 	ldw	r20,160(sp)
  113580:	ddc019c4 	addi	r23,sp,103
  113584:	003bd506 	br	1124dc <__alt_data_end+0xfffd24dc>
  113588:	0029883a 	mov	r20,zero
  11358c:	ddc01a04 	addi	r23,sp,104
  113590:	003bd206 	br	1124dc <__alt_data_end+0xfffd24dc>
  113594:	d9002303 	ldbu	r4,140(sp)
  113598:	d9001d85 	stb	r4,118(sp)
  11359c:	003da606 	br	112c38 <__alt_data_end+0xfffd2c38>
  1135a0:	d8c02303 	ldbu	r3,140(sp)
  1135a4:	d8c01d85 	stb	r3,118(sp)
  1135a8:	003c7606 	br	112784 <__alt_data_end+0xfffd2784>
  1135ac:	d8c02303 	ldbu	r3,140(sp)
  1135b0:	d8c01d85 	stb	r3,118(sp)
  1135b4:	003c6506 	br	11274c <__alt_data_end+0xfffd274c>
  1135b8:	d9002303 	ldbu	r4,140(sp)
  1135bc:	d9001d85 	stb	r4,118(sp)
  1135c0:	003d3d06 	br	112ab8 <__alt_data_end+0xfffd2ab8>
  1135c4:	d8c02303 	ldbu	r3,140(sp)
  1135c8:	d8c01d85 	stb	r3,118(sp)
  1135cc:	003d1d06 	br	112a44 <__alt_data_end+0xfffd2a44>
  1135d0:	d8c02303 	ldbu	r3,140(sp)
  1135d4:	d8c01d85 	stb	r3,118(sp)
  1135d8:	003d0306 	br	1129e8 <__alt_data_end+0xfffd29e8>

001135dc <__vfiprintf_internal>:
  1135dc:	008004b4 	movhi	r2,18
  1135e0:	10957404 	addi	r2,r2,21968
  1135e4:	300f883a 	mov	r7,r6
  1135e8:	280d883a 	mov	r6,r5
  1135ec:	200b883a 	mov	r5,r4
  1135f0:	11000017 	ldw	r4,0(r2)
  1135f4:	01120d01 	jmpi	1120d0 <___vfiprintf_internal_r>

001135f8 <__sbprintf>:
  1135f8:	2880030b 	ldhu	r2,12(r5)
  1135fc:	2ac01917 	ldw	r11,100(r5)
  113600:	2a80038b 	ldhu	r10,14(r5)
  113604:	2a400717 	ldw	r9,28(r5)
  113608:	2a000917 	ldw	r8,36(r5)
  11360c:	defee204 	addi	sp,sp,-1144
  113610:	00c10004 	movi	r3,1024
  113614:	dc011a15 	stw	r16,1128(sp)
  113618:	10bfff4c 	andi	r2,r2,65533
  11361c:	2821883a 	mov	r16,r5
  113620:	d8cb883a 	add	r5,sp,r3
  113624:	dc811c15 	stw	r18,1136(sp)
  113628:	dc411b15 	stw	r17,1132(sp)
  11362c:	dfc11d15 	stw	ra,1140(sp)
  113630:	2025883a 	mov	r18,r4
  113634:	d881030d 	sth	r2,1036(sp)
  113638:	dac11915 	stw	r11,1124(sp)
  11363c:	da81038d 	sth	r10,1038(sp)
  113640:	da410715 	stw	r9,1052(sp)
  113644:	da010915 	stw	r8,1060(sp)
  113648:	dec10015 	stw	sp,1024(sp)
  11364c:	dec10415 	stw	sp,1040(sp)
  113650:	d8c10215 	stw	r3,1032(sp)
  113654:	d8c10515 	stw	r3,1044(sp)
  113658:	d8010615 	stw	zero,1048(sp)
  11365c:	01120d00 	call	1120d0 <___vfiprintf_internal_r>
  113660:	1023883a 	mov	r17,r2
  113664:	10000416 	blt	r2,zero,113678 <__sbprintf+0x80>
  113668:	d9410004 	addi	r5,sp,1024
  11366c:	9009883a 	mov	r4,r18
  113670:	0109b080 	call	109b08 <_fflush_r>
  113674:	10000d1e 	bne	r2,zero,1136ac <__sbprintf+0xb4>
  113678:	d881030b 	ldhu	r2,1036(sp)
  11367c:	1080100c 	andi	r2,r2,64
  113680:	10000326 	beq	r2,zero,113690 <__sbprintf+0x98>
  113684:	8080030b 	ldhu	r2,12(r16)
  113688:	10801014 	ori	r2,r2,64
  11368c:	8080030d 	sth	r2,12(r16)
  113690:	8805883a 	mov	r2,r17
  113694:	dfc11d17 	ldw	ra,1140(sp)
  113698:	dc811c17 	ldw	r18,1136(sp)
  11369c:	dc411b17 	ldw	r17,1132(sp)
  1136a0:	dc011a17 	ldw	r16,1128(sp)
  1136a4:	dec11e04 	addi	sp,sp,1144
  1136a8:	f800283a 	ret
  1136ac:	047fffc4 	movi	r17,-1
  1136b0:	003ff106 	br	113678 <__alt_data_end+0xfffd3678>

001136b4 <_calloc_r>:
  1136b4:	defffe04 	addi	sp,sp,-8
  1136b8:	2805883a 	mov	r2,r5
  1136bc:	dc000015 	stw	r16,0(sp)
  1136c0:	300b883a 	mov	r5,r6
  1136c4:	2021883a 	mov	r16,r4
  1136c8:	1009883a 	mov	r4,r2
  1136cc:	dfc00115 	stw	ra,4(sp)
  1136d0:	01159fc0 	call	1159fc <__mulsi3>
  1136d4:	100b883a 	mov	r5,r2
  1136d8:	8009883a 	mov	r4,r16
  1136dc:	010acf00 	call	10acf0 <_malloc_r>
  1136e0:	10002926 	beq	r2,zero,113788 <_calloc_r+0xd4>
  1136e4:	11bfff17 	ldw	r6,-4(r2)
  1136e8:	1021883a 	mov	r16,r2
  1136ec:	00bfff04 	movi	r2,-4
  1136f0:	308c703a 	and	r6,r6,r2
  1136f4:	00c00904 	movi	r3,36
  1136f8:	308d883a 	add	r6,r6,r2
  1136fc:	19801636 	bltu	r3,r6,113758 <_calloc_r+0xa4>
  113700:	008004c4 	movi	r2,19
  113704:	11800b2e 	bgeu	r2,r6,113734 <_calloc_r+0x80>
  113708:	80000015 	stw	zero,0(r16)
  11370c:	80000115 	stw	zero,4(r16)
  113710:	008006c4 	movi	r2,27
  113714:	11801a2e 	bgeu	r2,r6,113780 <_calloc_r+0xcc>
  113718:	80000215 	stw	zero,8(r16)
  11371c:	80000315 	stw	zero,12(r16)
  113720:	30c0151e 	bne	r6,r3,113778 <_calloc_r+0xc4>
  113724:	80000415 	stw	zero,16(r16)
  113728:	80800604 	addi	r2,r16,24
  11372c:	80000515 	stw	zero,20(r16)
  113730:	00000106 	br	113738 <_calloc_r+0x84>
  113734:	8005883a 	mov	r2,r16
  113738:	10000015 	stw	zero,0(r2)
  11373c:	10000115 	stw	zero,4(r2)
  113740:	10000215 	stw	zero,8(r2)
  113744:	8005883a 	mov	r2,r16
  113748:	dfc00117 	ldw	ra,4(sp)
  11374c:	dc000017 	ldw	r16,0(sp)
  113750:	dec00204 	addi	sp,sp,8
  113754:	f800283a 	ret
  113758:	000b883a 	mov	r5,zero
  11375c:	8009883a 	mov	r4,r16
  113760:	01016c40 	call	1016c4 <memset>
  113764:	8005883a 	mov	r2,r16
  113768:	dfc00117 	ldw	ra,4(sp)
  11376c:	dc000017 	ldw	r16,0(sp)
  113770:	dec00204 	addi	sp,sp,8
  113774:	f800283a 	ret
  113778:	80800404 	addi	r2,r16,16
  11377c:	003fee06 	br	113738 <__alt_data_end+0xfffd3738>
  113780:	80800204 	addi	r2,r16,8
  113784:	003fec06 	br	113738 <__alt_data_end+0xfffd3738>
  113788:	0005883a 	mov	r2,zero
  11378c:	003fee06 	br	113748 <__alt_data_end+0xfffd3748>

00113790 <_fclose_r>:
  113790:	28003926 	beq	r5,zero,113878 <_fclose_r+0xe8>
  113794:	defffc04 	addi	sp,sp,-16
  113798:	dc400115 	stw	r17,4(sp)
  11379c:	dc000015 	stw	r16,0(sp)
  1137a0:	dfc00315 	stw	ra,12(sp)
  1137a4:	dc800215 	stw	r18,8(sp)
  1137a8:	2023883a 	mov	r17,r4
  1137ac:	2821883a 	mov	r16,r5
  1137b0:	20000226 	beq	r4,zero,1137bc <_fclose_r+0x2c>
  1137b4:	20800e17 	ldw	r2,56(r4)
  1137b8:	10002726 	beq	r2,zero,113858 <_fclose_r+0xc8>
  1137bc:	8080030f 	ldh	r2,12(r16)
  1137c0:	1000071e 	bne	r2,zero,1137e0 <_fclose_r+0x50>
  1137c4:	0005883a 	mov	r2,zero
  1137c8:	dfc00317 	ldw	ra,12(sp)
  1137cc:	dc800217 	ldw	r18,8(sp)
  1137d0:	dc400117 	ldw	r17,4(sp)
  1137d4:	dc000017 	ldw	r16,0(sp)
  1137d8:	dec00404 	addi	sp,sp,16
  1137dc:	f800283a 	ret
  1137e0:	800b883a 	mov	r5,r16
  1137e4:	8809883a 	mov	r4,r17
  1137e8:	01098ec0 	call	1098ec <__sflush_r>
  1137ec:	1025883a 	mov	r18,r2
  1137f0:	80800b17 	ldw	r2,44(r16)
  1137f4:	10000426 	beq	r2,zero,113808 <_fclose_r+0x78>
  1137f8:	81400717 	ldw	r5,28(r16)
  1137fc:	8809883a 	mov	r4,r17
  113800:	103ee83a 	callr	r2
  113804:	10001616 	blt	r2,zero,113860 <_fclose_r+0xd0>
  113808:	8080030b 	ldhu	r2,12(r16)
  11380c:	1080200c 	andi	r2,r2,128
  113810:	1000151e 	bne	r2,zero,113868 <_fclose_r+0xd8>
  113814:	81400c17 	ldw	r5,48(r16)
  113818:	28000526 	beq	r5,zero,113830 <_fclose_r+0xa0>
  11381c:	80801004 	addi	r2,r16,64
  113820:	28800226 	beq	r5,r2,11382c <_fclose_r+0x9c>
  113824:	8809883a 	mov	r4,r17
  113828:	010a0680 	call	10a068 <_free_r>
  11382c:	80000c15 	stw	zero,48(r16)
  113830:	81401117 	ldw	r5,68(r16)
  113834:	28000326 	beq	r5,zero,113844 <_fclose_r+0xb4>
  113838:	8809883a 	mov	r4,r17
  11383c:	010a0680 	call	10a068 <_free_r>
  113840:	80001115 	stw	zero,68(r16)
  113844:	0109f040 	call	109f04 <__sfp_lock_acquire>
  113848:	8000030d 	sth	zero,12(r16)
  11384c:	0109f080 	call	109f08 <__sfp_lock_release>
  113850:	9005883a 	mov	r2,r18
  113854:	003fdc06 	br	1137c8 <__alt_data_end+0xfffd37c8>
  113858:	0109ef40 	call	109ef4 <__sinit>
  11385c:	003fd706 	br	1137bc <__alt_data_end+0xfffd37bc>
  113860:	04bfffc4 	movi	r18,-1
  113864:	003fe806 	br	113808 <__alt_data_end+0xfffd3808>
  113868:	81400417 	ldw	r5,16(r16)
  11386c:	8809883a 	mov	r4,r17
  113870:	010a0680 	call	10a068 <_free_r>
  113874:	003fe706 	br	113814 <__alt_data_end+0xfffd3814>
  113878:	0005883a 	mov	r2,zero
  11387c:	f800283a 	ret

00113880 <fclose>:
  113880:	008004b4 	movhi	r2,18
  113884:	10957404 	addi	r2,r2,21968
  113888:	200b883a 	mov	r5,r4
  11388c:	11000017 	ldw	r4,0(r2)
  113890:	01137901 	jmpi	113790 <_fclose_r>

00113894 <__fputwc>:
  113894:	defff804 	addi	sp,sp,-32
  113898:	dcc00415 	stw	r19,16(sp)
  11389c:	dc800315 	stw	r18,12(sp)
  1138a0:	dc000115 	stw	r16,4(sp)
  1138a4:	dfc00715 	stw	ra,28(sp)
  1138a8:	dd400615 	stw	r21,24(sp)
  1138ac:	dd000515 	stw	r20,20(sp)
  1138b0:	dc400215 	stw	r17,8(sp)
  1138b4:	2027883a 	mov	r19,r4
  1138b8:	2825883a 	mov	r18,r5
  1138bc:	3021883a 	mov	r16,r6
  1138c0:	010aa800 	call	10aa80 <__locale_mb_cur_max>
  1138c4:	00c00044 	movi	r3,1
  1138c8:	10c03e26 	beq	r2,r3,1139c4 <__fputwc+0x130>
  1138cc:	81c01704 	addi	r7,r16,92
  1138d0:	900d883a 	mov	r6,r18
  1138d4:	d80b883a 	mov	r5,sp
  1138d8:	9809883a 	mov	r4,r19
  1138dc:	01149200 	call	114920 <_wcrtomb_r>
  1138e0:	1029883a 	mov	r20,r2
  1138e4:	00bfffc4 	movi	r2,-1
  1138e8:	a0802026 	beq	r20,r2,11396c <__fputwc+0xd8>
  1138ec:	d9400003 	ldbu	r5,0(sp)
  1138f0:	a0001c26 	beq	r20,zero,113964 <__fputwc+0xd0>
  1138f4:	0023883a 	mov	r17,zero
  1138f8:	05400284 	movi	r21,10
  1138fc:	00000906 	br	113924 <__fputwc+0x90>
  113900:	80800017 	ldw	r2,0(r16)
  113904:	11400005 	stb	r5,0(r2)
  113908:	80c00017 	ldw	r3,0(r16)
  11390c:	18c00044 	addi	r3,r3,1
  113910:	80c00015 	stw	r3,0(r16)
  113914:	8c400044 	addi	r17,r17,1
  113918:	dc45883a 	add	r2,sp,r17
  11391c:	8d00112e 	bgeu	r17,r20,113964 <__fputwc+0xd0>
  113920:	11400003 	ldbu	r5,0(r2)
  113924:	80c00217 	ldw	r3,8(r16)
  113928:	18ffffc4 	addi	r3,r3,-1
  11392c:	80c00215 	stw	r3,8(r16)
  113930:	183ff30e 	bge	r3,zero,113900 <__alt_data_end+0xfffd3900>
  113934:	80800617 	ldw	r2,24(r16)
  113938:	18801916 	blt	r3,r2,1139a0 <__fputwc+0x10c>
  11393c:	80800017 	ldw	r2,0(r16)
  113940:	11400005 	stb	r5,0(r2)
  113944:	80800017 	ldw	r2,0(r16)
  113948:	10c00003 	ldbu	r3,0(r2)
  11394c:	10800044 	addi	r2,r2,1
  113950:	1d402326 	beq	r3,r21,1139e0 <__fputwc+0x14c>
  113954:	80800015 	stw	r2,0(r16)
  113958:	8c400044 	addi	r17,r17,1
  11395c:	dc45883a 	add	r2,sp,r17
  113960:	8d3fef36 	bltu	r17,r20,113920 <__alt_data_end+0xfffd3920>
  113964:	9005883a 	mov	r2,r18
  113968:	00000406 	br	11397c <__fputwc+0xe8>
  11396c:	80c0030b 	ldhu	r3,12(r16)
  113970:	a005883a 	mov	r2,r20
  113974:	18c01014 	ori	r3,r3,64
  113978:	80c0030d 	sth	r3,12(r16)
  11397c:	dfc00717 	ldw	ra,28(sp)
  113980:	dd400617 	ldw	r21,24(sp)
  113984:	dd000517 	ldw	r20,20(sp)
  113988:	dcc00417 	ldw	r19,16(sp)
  11398c:	dc800317 	ldw	r18,12(sp)
  113990:	dc400217 	ldw	r17,8(sp)
  113994:	dc000117 	ldw	r16,4(sp)
  113998:	dec00804 	addi	sp,sp,32
  11399c:	f800283a 	ret
  1139a0:	800d883a 	mov	r6,r16
  1139a4:	29403fcc 	andi	r5,r5,255
  1139a8:	9809883a 	mov	r4,r19
  1139ac:	01147c80 	call	1147c8 <__swbuf_r>
  1139b0:	10bfffe0 	cmpeqi	r2,r2,-1
  1139b4:	10803fcc 	andi	r2,r2,255
  1139b8:	103fd626 	beq	r2,zero,113914 <__alt_data_end+0xfffd3914>
  1139bc:	00bfffc4 	movi	r2,-1
  1139c0:	003fee06 	br	11397c <__alt_data_end+0xfffd397c>
  1139c4:	90ffffc4 	addi	r3,r18,-1
  1139c8:	01003f84 	movi	r4,254
  1139cc:	20ffbf36 	bltu	r4,r3,1138cc <__alt_data_end+0xfffd38cc>
  1139d0:	900b883a 	mov	r5,r18
  1139d4:	dc800005 	stb	r18,0(sp)
  1139d8:	1029883a 	mov	r20,r2
  1139dc:	003fc506 	br	1138f4 <__alt_data_end+0xfffd38f4>
  1139e0:	800d883a 	mov	r6,r16
  1139e4:	a80b883a 	mov	r5,r21
  1139e8:	9809883a 	mov	r4,r19
  1139ec:	01147c80 	call	1147c8 <__swbuf_r>
  1139f0:	10bfffe0 	cmpeqi	r2,r2,-1
  1139f4:	003fef06 	br	1139b4 <__alt_data_end+0xfffd39b4>

001139f8 <_fputwc_r>:
  1139f8:	3080030b 	ldhu	r2,12(r6)
  1139fc:	10c8000c 	andi	r3,r2,8192
  113a00:	1800051e 	bne	r3,zero,113a18 <_fputwc_r+0x20>
  113a04:	30c01917 	ldw	r3,100(r6)
  113a08:	10880014 	ori	r2,r2,8192
  113a0c:	3080030d 	sth	r2,12(r6)
  113a10:	18880014 	ori	r2,r3,8192
  113a14:	30801915 	stw	r2,100(r6)
  113a18:	01138941 	jmpi	113894 <__fputwc>

00113a1c <fputwc>:
  113a1c:	008004b4 	movhi	r2,18
  113a20:	defffc04 	addi	sp,sp,-16
  113a24:	10957404 	addi	r2,r2,21968
  113a28:	dc000115 	stw	r16,4(sp)
  113a2c:	14000017 	ldw	r16,0(r2)
  113a30:	dc400215 	stw	r17,8(sp)
  113a34:	dfc00315 	stw	ra,12(sp)
  113a38:	2023883a 	mov	r17,r4
  113a3c:	80000226 	beq	r16,zero,113a48 <fputwc+0x2c>
  113a40:	80800e17 	ldw	r2,56(r16)
  113a44:	10001026 	beq	r2,zero,113a88 <fputwc+0x6c>
  113a48:	2880030b 	ldhu	r2,12(r5)
  113a4c:	10c8000c 	andi	r3,r2,8192
  113a50:	1800051e 	bne	r3,zero,113a68 <fputwc+0x4c>
  113a54:	28c01917 	ldw	r3,100(r5)
  113a58:	10880014 	ori	r2,r2,8192
  113a5c:	2880030d 	sth	r2,12(r5)
  113a60:	18880014 	ori	r2,r3,8192
  113a64:	28801915 	stw	r2,100(r5)
  113a68:	280d883a 	mov	r6,r5
  113a6c:	8009883a 	mov	r4,r16
  113a70:	880b883a 	mov	r5,r17
  113a74:	dfc00317 	ldw	ra,12(sp)
  113a78:	dc400217 	ldw	r17,8(sp)
  113a7c:	dc000117 	ldw	r16,4(sp)
  113a80:	dec00404 	addi	sp,sp,16
  113a84:	01138941 	jmpi	113894 <__fputwc>
  113a88:	8009883a 	mov	r4,r16
  113a8c:	d9400015 	stw	r5,0(sp)
  113a90:	0109ef40 	call	109ef4 <__sinit>
  113a94:	d9400017 	ldw	r5,0(sp)
  113a98:	003feb06 	br	113a48 <__alt_data_end+0xfffd3a48>

00113a9c <_fstat_r>:
  113a9c:	defffd04 	addi	sp,sp,-12
  113aa0:	2805883a 	mov	r2,r5
  113aa4:	dc000015 	stw	r16,0(sp)
  113aa8:	040004b4 	movhi	r16,18
  113aac:	dc400115 	stw	r17,4(sp)
  113ab0:	841c9c04 	addi	r16,r16,29296
  113ab4:	2023883a 	mov	r17,r4
  113ab8:	300b883a 	mov	r5,r6
  113abc:	1009883a 	mov	r4,r2
  113ac0:	dfc00215 	stw	ra,8(sp)
  113ac4:	80000015 	stw	zero,0(r16)
  113ac8:	01187e80 	call	1187e8 <fstat>
  113acc:	00ffffc4 	movi	r3,-1
  113ad0:	10c00526 	beq	r2,r3,113ae8 <_fstat_r+0x4c>
  113ad4:	dfc00217 	ldw	ra,8(sp)
  113ad8:	dc400117 	ldw	r17,4(sp)
  113adc:	dc000017 	ldw	r16,0(sp)
  113ae0:	dec00304 	addi	sp,sp,12
  113ae4:	f800283a 	ret
  113ae8:	80c00017 	ldw	r3,0(r16)
  113aec:	183ff926 	beq	r3,zero,113ad4 <__alt_data_end+0xfffd3ad4>
  113af0:	88c00015 	stw	r3,0(r17)
  113af4:	003ff706 	br	113ad4 <__alt_data_end+0xfffd3ad4>

00113af8 <rshift>:
  113af8:	2807d17a 	srai	r3,r5,5
  113afc:	20800417 	ldw	r2,16(r4)
  113b00:	22000504 	addi	r8,r4,20
  113b04:	1880250e 	bge	r3,r2,113b9c <rshift+0xa4>
  113b08:	1085883a 	add	r2,r2,r2
  113b0c:	18c7883a 	add	r3,r3,r3
  113b10:	1085883a 	add	r2,r2,r2
  113b14:	18c7883a 	add	r3,r3,r3
  113b18:	294007cc 	andi	r5,r5,31
  113b1c:	4085883a 	add	r2,r8,r2
  113b20:	40c7883a 	add	r3,r8,r3
  113b24:	28002026 	beq	r5,zero,113ba8 <rshift+0xb0>
  113b28:	19800017 	ldw	r6,0(r3)
  113b2c:	02c00804 	movi	r11,32
  113b30:	19c00104 	addi	r7,r3,4
  113b34:	5957c83a 	sub	r11,r11,r5
  113b38:	314cd83a 	srl	r6,r6,r5
  113b3c:	38802c2e 	bgeu	r7,r2,113bf0 <rshift+0xf8>
  113b40:	4015883a 	mov	r10,r8
  113b44:	3a400017 	ldw	r9,0(r7)
  113b48:	52800104 	addi	r10,r10,4
  113b4c:	39c00104 	addi	r7,r7,4
  113b50:	4ad2983a 	sll	r9,r9,r11
  113b54:	498cb03a 	or	r6,r9,r6
  113b58:	51bfff15 	stw	r6,-4(r10)
  113b5c:	39bfff17 	ldw	r6,-4(r7)
  113b60:	314cd83a 	srl	r6,r6,r5
  113b64:	38bff736 	bltu	r7,r2,113b44 <__alt_data_end+0xfffd3b44>
  113b68:	10c7c83a 	sub	r3,r2,r3
  113b6c:	18fffec4 	addi	r3,r3,-5
  113b70:	1806d0ba 	srli	r3,r3,2
  113b74:	18c00044 	addi	r3,r3,1
  113b78:	18c7883a 	add	r3,r3,r3
  113b7c:	18c7883a 	add	r3,r3,r3
  113b80:	40c7883a 	add	r3,r8,r3
  113b84:	19800015 	stw	r6,0(r3)
  113b88:	30000126 	beq	r6,zero,113b90 <rshift+0x98>
  113b8c:	18c00104 	addi	r3,r3,4
  113b90:	1a05c83a 	sub	r2,r3,r8
  113b94:	1005d0ba 	srai	r2,r2,2
  113b98:	00001206 	br	113be4 <rshift+0xec>
  113b9c:	20000415 	stw	zero,16(r4)
  113ba0:	20000515 	stw	zero,20(r4)
  113ba4:	f800283a 	ret
  113ba8:	18bffc2e 	bgeu	r3,r2,113b9c <__alt_data_end+0xfffd3b9c>
  113bac:	180d883a 	mov	r6,r3
  113bb0:	400b883a 	mov	r5,r8
  113bb4:	31c00017 	ldw	r7,0(r6)
  113bb8:	29400104 	addi	r5,r5,4
  113bbc:	31800104 	addi	r6,r6,4
  113bc0:	29ffff15 	stw	r7,-4(r5)
  113bc4:	30bffb36 	bltu	r6,r2,113bb4 <__alt_data_end+0xfffd3bb4>
  113bc8:	00c6303a 	nor	r3,zero,r3
  113bcc:	1885883a 	add	r2,r3,r2
  113bd0:	1004d0ba 	srli	r2,r2,2
  113bd4:	10800044 	addi	r2,r2,1
  113bd8:	1085883a 	add	r2,r2,r2
  113bdc:	1085883a 	add	r2,r2,r2
  113be0:	1005d0ba 	srai	r2,r2,2
  113be4:	20800415 	stw	r2,16(r4)
  113be8:	103fed26 	beq	r2,zero,113ba0 <__alt_data_end+0xfffd3ba0>
  113bec:	f800283a 	ret
  113bf0:	4007883a 	mov	r3,r8
  113bf4:	003fe306 	br	113b84 <__alt_data_end+0xfffd3b84>

00113bf8 <__gethex>:
  113bf8:	deffea04 	addi	sp,sp,-88
  113bfc:	d9c00415 	stw	r7,16(sp)
  113c00:	dfc01515 	stw	ra,84(sp)
  113c04:	dd001015 	stw	r20,64(sp)
  113c08:	dcc00f15 	stw	r19,60(sp)
  113c0c:	2829883a 	mov	r20,r5
  113c10:	dc800e15 	stw	r18,56(sp)
  113c14:	d9000215 	stw	r4,8(sp)
  113c18:	d9800115 	stw	r6,4(sp)
  113c1c:	df001415 	stw	fp,80(sp)
  113c20:	ddc01315 	stw	r23,76(sp)
  113c24:	dd801215 	stw	r22,72(sp)
  113c28:	dd401115 	stw	r21,68(sp)
  113c2c:	dc400d15 	stw	r17,52(sp)
  113c30:	dc000c15 	stw	r16,48(sp)
  113c34:	010aaa40 	call	10aaa4 <_localeconv_r>
  113c38:	14800017 	ldw	r18,0(r2)
  113c3c:	9009883a 	mov	r4,r18
  113c40:	0101cfc0 	call	101cfc <strlen>
  113c44:	a1c00017 	ldw	r7,0(r20)
  113c48:	1027883a 	mov	r19,r2
  113c4c:	9085883a 	add	r2,r18,r2
  113c50:	10bfffc3 	ldbu	r2,-1(r2)
  113c54:	38c00083 	ldbu	r3,2(r7)
  113c58:	d8800305 	stb	r2,12(sp)
  113c5c:	00800c04 	movi	r2,48
  113c60:	18815a1e 	bne	r3,r2,1141cc <__gethex+0x5d4>
  113c64:	013fff84 	movi	r4,-2
  113c68:	388000c4 	addi	r2,r7,3
  113c6c:	21c9c83a 	sub	r4,r4,r7
  113c70:	180b883a 	mov	r5,r3
  113c74:	20b9883a 	add	fp,r4,r2
  113c78:	102f883a 	mov	r23,r2
  113c7c:	10800044 	addi	r2,r2,1
  113c80:	10ffffc3 	ldbu	r3,-1(r2)
  113c84:	197ffb26 	beq	r3,r5,113c74 <__alt_data_end+0xfffd3c74>
  113c88:	058004b4 	movhi	r22,18
  113c8c:	b58dd484 	addi	r22,r22,14162
  113c90:	b0c7883a 	add	r3,r22,r3
  113c94:	18800003 	ldbu	r2,0(r3)
  113c98:	10008726 	beq	r2,zero,113eb8 <__gethex+0x2c0>
  113c9c:	b8800003 	ldbu	r2,0(r23)
  113ca0:	d8000015 	stw	zero,0(sp)
  113ca4:	0021883a 	mov	r16,zero
  113ca8:	b085883a 	add	r2,r22,r2
  113cac:	10800003 	ldbu	r2,0(r2)
  113cb0:	b823883a 	mov	r17,r23
  113cb4:	10000526 	beq	r2,zero,113ccc <__gethex+0xd4>
  113cb8:	8c400044 	addi	r17,r17,1
  113cbc:	88800003 	ldbu	r2,0(r17)
  113cc0:	b085883a 	add	r2,r22,r2
  113cc4:	10800003 	ldbu	r2,0(r2)
  113cc8:	103ffb1e 	bne	r2,zero,113cb8 <__alt_data_end+0xfffd3cb8>
  113ccc:	980d883a 	mov	r6,r19
  113cd0:	900b883a 	mov	r5,r18
  113cd4:	8809883a 	mov	r4,r17
  113cd8:	01146f80 	call	1146f8 <strncmp>
  113cdc:	1000031e 	bne	r2,zero,113cec <__gethex+0xf4>
  113ce0:	80015c26 	beq	r16,zero,114254 <__gethex+0x65c>
  113ce4:	88800003 	ldbu	r2,0(r17)
  113ce8:	00000206 	br	113cf4 <__gethex+0xfc>
  113cec:	88800003 	ldbu	r2,0(r17)
  113cf0:	80012926 	beq	r16,zero,114198 <__gethex+0x5a0>
  113cf4:	8c21c83a 	sub	r16,r17,r16
  113cf8:	8421883a 	add	r16,r16,r16
  113cfc:	8421883a 	add	r16,r16,r16
  113d00:	0421c83a 	sub	r16,zero,r16
  113d04:	10803fcc 	andi	r2,r2,255
  113d08:	01001404 	movi	r4,80
  113d0c:	11008826 	beq	r2,r4,113f30 <__gethex+0x338>
  113d10:	01001c04 	movi	r4,112
  113d14:	11008626 	beq	r2,r4,113f30 <__gethex+0x338>
  113d18:	882b883a 	mov	r21,r17
  113d1c:	d8c00017 	ldw	r3,0(sp)
  113d20:	a4400015 	stw	r17,0(r20)
  113d24:	1800711e 	bne	r3,zero,113eec <__gethex+0x2f4>
  113d28:	adc5c83a 	sub	r2,r21,r23
  113d2c:	10bfffc4 	addi	r2,r2,-1
  113d30:	00c001c4 	movi	r3,7
  113d34:	000b883a 	mov	r5,zero
  113d38:	1880030e 	bge	r3,r2,113d48 <__gethex+0x150>
  113d3c:	1005d07a 	srai	r2,r2,1
  113d40:	29400044 	addi	r5,r5,1
  113d44:	18bffd16 	blt	r3,r2,113d3c <__alt_data_end+0xfffd3d3c>
  113d48:	d9000217 	ldw	r4,8(sp)
  113d4c:	010b9600 	call	10b960 <_Balloc>
  113d50:	10c00504 	addi	r3,r2,20
  113d54:	d8c00015 	stw	r3,0(sp)
  113d58:	1029883a 	mov	r20,r2
  113d5c:	bd417c2e 	bgeu	r23,r21,114350 <__gethex+0x758>
  113d60:	dc400303 	ldbu	r17,12(sp)
  113d64:	03000044 	movi	r12,1
  113d68:	1813883a 	mov	r9,r3
  113d6c:	0039883a 	mov	fp,zero
  113d70:	0007883a 	mov	r3,zero
  113d74:	64d9c83a 	sub	r12,r12,r19
  113d78:	02800804 	movi	r10,32
  113d7c:	a8bfffc3 	ldbu	r2,-1(r21)
  113d80:	ab7fffc4 	addi	r13,r21,-1
  113d84:	88803026 	beq	r17,r2,113e48 <__gethex+0x250>
  113d88:	e2804526 	beq	fp,r10,113ea0 <__gethex+0x2a8>
  113d8c:	e00b883a 	mov	r5,fp
  113d90:	e7000104 	addi	fp,fp,4
  113d94:	a93fffc3 	ldbu	r4,-1(r21)
  113d98:	682b883a 	mov	r21,r13
  113d9c:	b109883a 	add	r4,r22,r4
  113da0:	20800003 	ldbu	r2,0(r4)
  113da4:	108003cc 	andi	r2,r2,15
  113da8:	1144983a 	sll	r2,r2,r5
  113dac:	1886b03a 	or	r3,r3,r2
  113db0:	bd7ff236 	bltu	r23,r21,113d7c <__alt_data_end+0xfffd3d7c>
  113db4:	d9000017 	ldw	r4,0(sp)
  113db8:	48800104 	addi	r2,r9,4
  113dbc:	48c00015 	stw	r3,0(r9)
  113dc0:	1105c83a 	sub	r2,r2,r4
  113dc4:	1005d0ba 	srai	r2,r2,2
  113dc8:	1809883a 	mov	r4,r3
  113dcc:	a0800415 	stw	r2,16(r20)
  113dd0:	1022917a 	slli	r17,r2,5
  113dd4:	010bc7c0 	call	10bc7c <__hi0bits>
  113dd8:	d8c00117 	ldw	r3,4(sp)
  113ddc:	8885c83a 	sub	r2,r17,r2
  113de0:	1c800017 	ldw	r18,0(r3)
  113de4:	9080d016 	blt	r18,r2,114128 <__gethex+0x530>
  113de8:	1480ed16 	blt	r2,r18,1141a0 <__gethex+0x5a8>
  113dec:	0027883a 	mov	r19,zero
  113df0:	d8c00117 	ldw	r3,4(sp)
  113df4:	18800217 	ldw	r2,8(r3)
  113df8:	14009416 	blt	r2,r16,11404c <__gethex+0x454>
  113dfc:	d8c00117 	ldw	r3,4(sp)
  113e00:	18800117 	ldw	r2,4(r3)
  113e04:	8080b30e 	bge	r16,r2,1140d4 <__gethex+0x4dc>
  113e08:	1421c83a 	sub	r16,r2,r16
  113e0c:	8480f616 	blt	r16,r18,1141e8 <__gethex+0x5f0>
  113e10:	18c00317 	ldw	r3,12(r3)
  113e14:	01000084 	movi	r4,2
  113e18:	19015226 	beq	r3,r4,114364 <__gethex+0x76c>
  113e1c:	010000c4 	movi	r4,3
  113e20:	19013726 	beq	r3,r4,114300 <__gethex+0x708>
  113e24:	01000044 	movi	r4,1
  113e28:	19015126 	beq	r3,r4,114370 <__gethex+0x778>
  113e2c:	d9000217 	ldw	r4,8(sp)
  113e30:	a00b883a 	mov	r5,r20
  113e34:	010ba080 	call	10ba08 <_Bfree>
  113e38:	d8801617 	ldw	r2,88(sp)
  113e3c:	10000015 	stw	zero,0(r2)
  113e40:	00801404 	movi	r2,80
  113e44:	00002b06 	br	113ef4 <__gethex+0x2fc>
  113e48:	6b1d883a 	add	r14,r13,r12
  113e4c:	75ffce36 	bltu	r14,r23,113d88 <__alt_data_end+0xfffd3d88>
  113e50:	7009883a 	mov	r4,r14
  113e54:	980d883a 	mov	r6,r19
  113e58:	900b883a 	mov	r5,r18
  113e5c:	d8c00715 	stw	r3,28(sp)
  113e60:	da400615 	stw	r9,24(sp)
  113e64:	da800b15 	stw	r10,44(sp)
  113e68:	db000a15 	stw	r12,40(sp)
  113e6c:	db400815 	stw	r13,32(sp)
  113e70:	db800915 	stw	r14,36(sp)
  113e74:	01146f80 	call	1146f8 <strncmp>
  113e78:	d8c00717 	ldw	r3,28(sp)
  113e7c:	da400617 	ldw	r9,24(sp)
  113e80:	da800b17 	ldw	r10,44(sp)
  113e84:	db000a17 	ldw	r12,40(sp)
  113e88:	db400817 	ldw	r13,32(sp)
  113e8c:	db800917 	ldw	r14,36(sp)
  113e90:	103fbd1e 	bne	r2,zero,113d88 <__alt_data_end+0xfffd3d88>
  113e94:	702b883a 	mov	r21,r14
  113e98:	bd7fb836 	bltu	r23,r21,113d7c <__alt_data_end+0xfffd3d7c>
  113e9c:	003fc506 	br	113db4 <__alt_data_end+0xfffd3db4>
  113ea0:	07000104 	movi	fp,4
  113ea4:	48c00015 	stw	r3,0(r9)
  113ea8:	000b883a 	mov	r5,zero
  113eac:	4f13883a 	add	r9,r9,fp
  113eb0:	0007883a 	mov	r3,zero
  113eb4:	003fb706 	br	113d94 <__alt_data_end+0xfffd3d94>
  113eb8:	980d883a 	mov	r6,r19
  113ebc:	900b883a 	mov	r5,r18
  113ec0:	b809883a 	mov	r4,r23
  113ec4:	01146f80 	call	1146f8 <strncmp>
  113ec8:	10006c26 	beq	r2,zero,11407c <__gethex+0x484>
  113ecc:	b8800003 	ldbu	r2,0(r23)
  113ed0:	b823883a 	mov	r17,r23
  113ed4:	10803fcc 	andi	r2,r2,255
  113ed8:	01001404 	movi	r4,80
  113edc:	11001126 	beq	r2,r4,113f24 <__gethex+0x32c>
  113ee0:	01001c04 	movi	r4,112
  113ee4:	11000f26 	beq	r2,r4,113f24 <__gethex+0x32c>
  113ee8:	a4400015 	stw	r17,0(r20)
  113eec:	e0008c1e 	bne	fp,zero,114120 <__gethex+0x528>
  113ef0:	00800184 	movi	r2,6
  113ef4:	dfc01517 	ldw	ra,84(sp)
  113ef8:	df001417 	ldw	fp,80(sp)
  113efc:	ddc01317 	ldw	r23,76(sp)
  113f00:	dd801217 	ldw	r22,72(sp)
  113f04:	dd401117 	ldw	r21,68(sp)
  113f08:	dd001017 	ldw	r20,64(sp)
  113f0c:	dcc00f17 	ldw	r19,60(sp)
  113f10:	dc800e17 	ldw	r18,56(sp)
  113f14:	dc400d17 	ldw	r17,52(sp)
  113f18:	dc000c17 	ldw	r16,48(sp)
  113f1c:	dec01604 	addi	sp,sp,88
  113f20:	f800283a 	ret
  113f24:	00c00044 	movi	r3,1
  113f28:	0021883a 	mov	r16,zero
  113f2c:	d8c00015 	stw	r3,0(sp)
  113f30:	88800043 	ldbu	r2,1(r17)
  113f34:	01400ac4 	movi	r5,43
  113f38:	11003fcc 	andi	r4,r2,255
  113f3c:	21407626 	beq	r4,r5,114118 <__gethex+0x520>
  113f40:	01400b44 	movi	r5,45
  113f44:	21404826 	beq	r4,r5,114068 <__gethex+0x470>
  113f48:	8ac00044 	addi	r11,r17,1
  113f4c:	d8000515 	stw	zero,20(sp)
  113f50:	10803fcc 	andi	r2,r2,255
  113f54:	b085883a 	add	r2,r22,r2
  113f58:	11000003 	ldbu	r4,0(r2)
  113f5c:	05400604 	movi	r21,24
  113f60:	20bfffc4 	addi	r2,r4,-1
  113f64:	10803fcc 	andi	r2,r2,255
  113f68:	a8bf6b36 	bltu	r21,r2,113d18 <__alt_data_end+0xfffd3d18>
  113f6c:	58800043 	ldbu	r2,1(r11)
  113f70:	014004b4 	movhi	r5,18
  113f74:	294dd484 	addi	r5,r5,14162
  113f78:	2885883a 	add	r2,r5,r2
  113f7c:	12800003 	ldbu	r10,0(r2)
  113f80:	21003fcc 	andi	r4,r4,255
  113f84:	213ffc04 	addi	r4,r4,-16
  113f88:	50bfffc4 	addi	r2,r10,-1
  113f8c:	10803fcc 	andi	r2,r2,255
  113f90:	5ac00044 	addi	r11,r11,1
  113f94:	51803fcc 	andi	r6,r10,255
  113f98:	a8801036 	bltu	r21,r2,113fdc <__gethex+0x3e4>
  113f9c:	5ac00044 	addi	r11,r11,1
  113fa0:	01400284 	movi	r5,10
  113fa4:	d9800715 	stw	r6,28(sp)
  113fa8:	dac00615 	stw	r11,24(sp)
  113fac:	01159fc0 	call	1159fc <__mulsi3>
  113fb0:	dac00617 	ldw	r11,24(sp)
  113fb4:	d9800717 	ldw	r6,28(sp)
  113fb8:	5a800003 	ldbu	r10,0(r11)
  113fbc:	1185883a 	add	r2,r2,r6
  113fc0:	113ffc04 	addi	r4,r2,-16
  113fc4:	b295883a 	add	r10,r22,r10
  113fc8:	51400003 	ldbu	r5,0(r10)
  113fcc:	2abfffc4 	addi	r10,r5,-1
  113fd0:	52803fcc 	andi	r10,r10,255
  113fd4:	29803fcc 	andi	r6,r5,255
  113fd8:	aabff02e 	bgeu	r21,r10,113f9c <__alt_data_end+0xfffd3f9c>
  113fdc:	d8c00517 	ldw	r3,20(sp)
  113fe0:	18000126 	beq	r3,zero,113fe8 <__gethex+0x3f0>
  113fe4:	0109c83a 	sub	r4,zero,r4
  113fe8:	882b883a 	mov	r21,r17
  113fec:	8121883a 	add	r16,r16,r4
  113ff0:	5823883a 	mov	r17,r11
  113ff4:	003f4906 	br	113d1c <__alt_data_end+0xfffd3d1c>
  113ff8:	a0800217 	ldw	r2,8(r20)
  113ffc:	a880f20e 	bge	r21,r2,1143c8 <__gethex+0x7d0>
  114000:	a807883a 	mov	r3,r21
  114004:	18800144 	addi	r2,r3,5
  114008:	1085883a 	add	r2,r2,r2
  11400c:	18c00044 	addi	r3,r3,1
  114010:	1085883a 	add	r2,r2,r2
  114014:	a085883a 	add	r2,r20,r2
  114018:	a0c00415 	stw	r3,16(r20)
  11401c:	01000044 	movi	r4,1
  114020:	11000015 	stw	r4,0(r2)
  114024:	00800084 	movi	r2,2
  114028:	8880da26 	beq	r17,r2,114394 <__gethex+0x79c>
  11402c:	a8c0ae0e 	bge	r21,r3,1142e8 <__gethex+0x6f0>
  114030:	01400044 	movi	r5,1
  114034:	a009883a 	mov	r4,r20
  114038:	0113af80 	call	113af8 <rshift>
  11403c:	d8c00117 	ldw	r3,4(sp)
  114040:	84000044 	addi	r16,r16,1
  114044:	18800217 	ldw	r2,8(r3)
  114048:	1400a90e 	bge	r2,r16,1142f0 <__gethex+0x6f8>
  11404c:	d9000217 	ldw	r4,8(sp)
  114050:	a00b883a 	mov	r5,r20
  114054:	010ba080 	call	10ba08 <_Bfree>
  114058:	d9001617 	ldw	r4,88(sp)
  11405c:	008028c4 	movi	r2,163
  114060:	20000015 	stw	zero,0(r4)
  114064:	003fa306 	br	113ef4 <__alt_data_end+0xfffd3ef4>
  114068:	00c00044 	movi	r3,1
  11406c:	d8c00515 	stw	r3,20(sp)
  114070:	88800083 	ldbu	r2,2(r17)
  114074:	8ac00084 	addi	r11,r17,2
  114078:	003fb506 	br	113f50 <__alt_data_end+0xfffd3f50>
  11407c:	bce3883a 	add	r17,r23,r19
  114080:	89000003 	ldbu	r4,0(r17)
  114084:	21403fcc 	andi	r5,r4,255
  114088:	b145883a 	add	r2,r22,r5
  11408c:	10800003 	ldbu	r2,0(r2)
  114090:	11803fcc 	andi	r6,r2,255
  114094:	30005026 	beq	r6,zero,1141d8 <__gethex+0x5e0>
  114098:	01000c04 	movi	r4,48
  11409c:	882f883a 	mov	r23,r17
  1140a0:	2900061e 	bne	r5,r4,1140bc <__gethex+0x4c4>
  1140a4:	2809883a 	mov	r4,r5
  1140a8:	bdc00044 	addi	r23,r23,1
  1140ac:	b8800003 	ldbu	r2,0(r23)
  1140b0:	113ffd26 	beq	r2,r4,1140a8 <__alt_data_end+0xfffd40a8>
  1140b4:	b085883a 	add	r2,r22,r2
  1140b8:	10800003 	ldbu	r2,0(r2)
  1140bc:	10803fcc 	andi	r2,r2,255
  1140c0:	1007003a 	cmpeq	r3,r2,zero
  1140c4:	d8c00015 	stw	r3,0(sp)
  1140c8:	8821883a 	mov	r16,r17
  1140cc:	07000044 	movi	fp,1
  1140d0:	003ef706 	br	113cb0 <__alt_data_end+0xfffd3cb0>
  1140d4:	04400044 	movi	r17,1
  1140d8:	98000926 	beq	r19,zero,114100 <__gethex+0x508>
  1140dc:	d8c00117 	ldw	r3,4(sp)
  1140e0:	18800317 	ldw	r2,12(r3)
  1140e4:	00c00084 	movi	r3,2
  1140e8:	10c06826 	beq	r2,r3,11428c <__gethex+0x694>
  1140ec:	00c000c4 	movi	r3,3
  1140f0:	10c06a26 	beq	r2,r3,11429c <__gethex+0x6a4>
  1140f4:	00c00044 	movi	r3,1
  1140f8:	10c08d26 	beq	r2,r3,114330 <__gethex+0x738>
  1140fc:	8c400414 	ori	r17,r17,16
  114100:	d9001617 	ldw	r4,88(sp)
  114104:	d8c00417 	ldw	r3,16(sp)
  114108:	8805883a 	mov	r2,r17
  11410c:	25000015 	stw	r20,0(r4)
  114110:	1c000015 	stw	r16,0(r3)
  114114:	003f7706 	br	113ef4 <__alt_data_end+0xfffd3ef4>
  114118:	d8000515 	stw	zero,20(sp)
  11411c:	003fd406 	br	114070 <__alt_data_end+0xfffd4070>
  114120:	0005883a 	mov	r2,zero
  114124:	003f7306 	br	113ef4 <__alt_data_end+0xfffd3ef4>
  114128:	14a3c83a 	sub	r17,r2,r18
  11412c:	880b883a 	mov	r5,r17
  114130:	a009883a 	mov	r4,r20
  114134:	010c98c0 	call	10c98c <__any_on>
  114138:	10002926 	beq	r2,zero,1141e0 <__gethex+0x5e8>
  11413c:	897fffc4 	addi	r5,r17,-1
  114140:	2807d17a 	srai	r3,r5,5
  114144:	d8800017 	ldw	r2,0(sp)
  114148:	290007cc 	andi	r4,r5,31
  11414c:	18c7883a 	add	r3,r3,r3
  114150:	18c7883a 	add	r3,r3,r3
  114154:	04c00044 	movi	r19,1
  114158:	10c7883a 	add	r3,r2,r3
  11415c:	9908983a 	sll	r4,r19,r4
  114160:	18c00017 	ldw	r3,0(r3)
  114164:	20c6703a 	and	r3,r4,r3
  114168:	18000626 	beq	r3,zero,114184 <__gethex+0x58c>
  11416c:	99407b0e 	bge	r19,r5,11435c <__gethex+0x764>
  114170:	897fff84 	addi	r5,r17,-2
  114174:	a009883a 	mov	r4,r20
  114178:	010c98c0 	call	10c98c <__any_on>
  11417c:	10007726 	beq	r2,zero,11435c <__gethex+0x764>
  114180:	04c000c4 	movi	r19,3
  114184:	880b883a 	mov	r5,r17
  114188:	a009883a 	mov	r4,r20
  11418c:	0113af80 	call	113af8 <rshift>
  114190:	8461883a 	add	r16,r16,r17
  114194:	003f1606 	br	113df0 <__alt_data_end+0xfffd3df0>
  114198:	0021883a 	mov	r16,zero
  11419c:	003ed906 	br	113d04 <__alt_data_end+0xfffd3d04>
  1141a0:	d9000217 	ldw	r4,8(sp)
  1141a4:	90a3c83a 	sub	r17,r18,r2
  1141a8:	a00b883a 	mov	r5,r20
  1141ac:	880d883a 	mov	r6,r17
  1141b0:	010c19c0 	call	10c19c <__lshift>
  1141b4:	10c00504 	addi	r3,r2,20
  1141b8:	1029883a 	mov	r20,r2
  1141bc:	8461c83a 	sub	r16,r16,r17
  1141c0:	d8c00015 	stw	r3,0(sp)
  1141c4:	0027883a 	mov	r19,zero
  1141c8:	003f0906 	br	113df0 <__alt_data_end+0xfffd3df0>
  1141cc:	3dc00084 	addi	r23,r7,2
  1141d0:	0039883a 	mov	fp,zero
  1141d4:	003eac06 	br	113c88 <__alt_data_end+0xfffd3c88>
  1141d8:	2005883a 	mov	r2,r4
  1141dc:	003f3d06 	br	113ed4 <__alt_data_end+0xfffd3ed4>
  1141e0:	0027883a 	mov	r19,zero
  1141e4:	003fe706 	br	114184 <__alt_data_end+0xfffd4184>
  1141e8:	847fffc4 	addi	r17,r16,-1
  1141ec:	9800421e 	bne	r19,zero,1142f8 <__gethex+0x700>
  1141f0:	88000426 	beq	r17,zero,114204 <__gethex+0x60c>
  1141f4:	880b883a 	mov	r5,r17
  1141f8:	a009883a 	mov	r4,r20
  1141fc:	010c98c0 	call	10c98c <__any_on>
  114200:	1027883a 	mov	r19,r2
  114204:	8805d17a 	srai	r2,r17,5
  114208:	d8c00017 	ldw	r3,0(sp)
  11420c:	8c4007cc 	andi	r17,r17,31
  114210:	1085883a 	add	r2,r2,r2
  114214:	1085883a 	add	r2,r2,r2
  114218:	1885883a 	add	r2,r3,r2
  11421c:	00c00044 	movi	r3,1
  114220:	1c62983a 	sll	r17,r3,r17
  114224:	10800017 	ldw	r2,0(r2)
  114228:	8884703a 	and	r2,r17,r2
  11422c:	10000126 	beq	r2,zero,114234 <__gethex+0x63c>
  114230:	9cc00094 	ori	r19,r19,2
  114234:	800b883a 	mov	r5,r16
  114238:	a009883a 	mov	r4,r20
  11423c:	0113af80 	call	113af8 <rshift>
  114240:	d8c00117 	ldw	r3,4(sp)
  114244:	9425c83a 	sub	r18,r18,r16
  114248:	04400084 	movi	r17,2
  11424c:	1c000117 	ldw	r16,4(r3)
  114250:	003fa106 	br	1140d8 <__alt_data_end+0xfffd40d8>
  114254:	8ce1883a 	add	r16,r17,r19
  114258:	80800003 	ldbu	r2,0(r16)
  11425c:	8023883a 	mov	r17,r16
  114260:	10c03fcc 	andi	r3,r2,255
  114264:	b0c7883a 	add	r3,r22,r3
  114268:	18c00003 	ldbu	r3,0(r3)
  11426c:	183ea026 	beq	r3,zero,113cf0 <__alt_data_end+0xfffd3cf0>
  114270:	8c400044 	addi	r17,r17,1
  114274:	88800003 	ldbu	r2,0(r17)
  114278:	11003fcc 	andi	r4,r2,255
  11427c:	b109883a 	add	r4,r22,r4
  114280:	21000003 	ldbu	r4,0(r4)
  114284:	203ffa1e 	bne	r4,zero,114270 <__alt_data_end+0xfffd4270>
  114288:	003e9906 	br	113cf0 <__alt_data_end+0xfffd3cf0>
  11428c:	d9001717 	ldw	r4,92(sp)
  114290:	00800044 	movi	r2,1
  114294:	1109c83a 	sub	r4,r2,r4
  114298:	d9001715 	stw	r4,92(sp)
  11429c:	d8801717 	ldw	r2,92(sp)
  1142a0:	103f9626 	beq	r2,zero,1140fc <__alt_data_end+0xfffd40fc>
  1142a4:	a5400417 	ldw	r21,16(r20)
  1142a8:	d9800017 	ldw	r6,0(sp)
  1142ac:	013fffc4 	movi	r4,-1
  1142b0:	ad67883a 	add	r19,r21,r21
  1142b4:	9ce7883a 	add	r19,r19,r19
  1142b8:	3005883a 	mov	r2,r6
  1142bc:	34cb883a 	add	r5,r6,r19
  1142c0:	00000306 	br	1142d0 <__gethex+0x6d8>
  1142c4:	10000015 	stw	zero,0(r2)
  1142c8:	10800104 	addi	r2,r2,4
  1142cc:	117f4a2e 	bgeu	r2,r5,113ff8 <__alt_data_end+0xfffd3ff8>
  1142d0:	10c00017 	ldw	r3,0(r2)
  1142d4:	193ffb26 	beq	r3,r4,1142c4 <__alt_data_end+0xfffd42c4>
  1142d8:	18c00044 	addi	r3,r3,1
  1142dc:	10c00015 	stw	r3,0(r2)
  1142e0:	00800084 	movi	r2,2
  1142e4:	88802b26 	beq	r17,r2,114394 <__gethex+0x79c>
  1142e8:	948007cc 	andi	r18,r18,31
  1142ec:	90002f1e 	bne	r18,zero,1143ac <__gethex+0x7b4>
  1142f0:	04400844 	movi	r17,33
  1142f4:	003f8206 	br	114100 <__alt_data_end+0xfffd4100>
  1142f8:	04c00044 	movi	r19,1
  1142fc:	003fc106 	br	114204 <__alt_data_end+0xfffd4204>
  114300:	d8c01717 	ldw	r3,92(sp)
  114304:	183ec926 	beq	r3,zero,113e2c <__alt_data_end+0xfffd3e2c>
  114308:	d8c00417 	ldw	r3,16(sp)
  11430c:	d9001617 	ldw	r4,88(sp)
  114310:	18800015 	stw	r2,0(r3)
  114314:	d8c00017 	ldw	r3,0(sp)
  114318:	00800044 	movi	r2,1
  11431c:	a0800415 	stw	r2,16(r20)
  114320:	18800015 	stw	r2,0(r3)
  114324:	25000015 	stw	r20,0(r4)
  114328:	00801884 	movi	r2,98
  11432c:	003ef106 	br	113ef4 <__alt_data_end+0xfffd3ef4>
  114330:	9880008c 	andi	r2,r19,2
  114334:	103f7126 	beq	r2,zero,1140fc <__alt_data_end+0xfffd40fc>
  114338:	d8c00017 	ldw	r3,0(sp)
  11433c:	18800017 	ldw	r2,0(r3)
  114340:	9884b03a 	or	r2,r19,r2
  114344:	1080004c 	andi	r2,r2,1
  114348:	103fd61e 	bne	r2,zero,1142a4 <__alt_data_end+0xfffd42a4>
  11434c:	003f6b06 	br	1140fc <__alt_data_end+0xfffd40fc>
  114350:	da400017 	ldw	r9,0(sp)
  114354:	0007883a 	mov	r3,zero
  114358:	003e9606 	br	113db4 <__alt_data_end+0xfffd3db4>
  11435c:	04c00084 	movi	r19,2
  114360:	003f8806 	br	114184 <__alt_data_end+0xfffd4184>
  114364:	d9001717 	ldw	r4,92(sp)
  114368:	203fe726 	beq	r4,zero,114308 <__alt_data_end+0xfffd4308>
  11436c:	003eaf06 	br	113e2c <__alt_data_end+0xfffd3e2c>
  114370:	943eae1e 	bne	r18,r16,113e2c <__alt_data_end+0xfffd3e2c>
  114374:	1cbfe40e 	bge	r3,r18,114308 <__alt_data_end+0xfffd4308>
  114378:	917fffc4 	addi	r5,r18,-1
  11437c:	a009883a 	mov	r4,r20
  114380:	010c98c0 	call	10c98c <__any_on>
  114384:	103ea926 	beq	r2,zero,113e2c <__alt_data_end+0xfffd3e2c>
  114388:	d8c00117 	ldw	r3,4(sp)
  11438c:	18800117 	ldw	r2,4(r3)
  114390:	003fdd06 	br	114308 <__alt_data_end+0xfffd4308>
  114394:	d8c00117 	ldw	r3,4(sp)
  114398:	18800017 	ldw	r2,0(r3)
  11439c:	10bfffc4 	addi	r2,r2,-1
  1143a0:	90801c26 	beq	r18,r2,114414 <__gethex+0x81c>
  1143a4:	04400884 	movi	r17,34
  1143a8:	003f5506 	br	114100 <__alt_data_end+0xfffd4100>
  1143ac:	34c5883a 	add	r2,r6,r19
  1143b0:	113fff17 	ldw	r4,-4(r2)
  1143b4:	010bc7c0 	call	10bc7c <__hi0bits>
  1143b8:	00c00804 	movi	r3,32
  1143bc:	1ca5c83a 	sub	r18,r3,r18
  1143c0:	14bfcb0e 	bge	r2,r18,1142f0 <__alt_data_end+0xfffd42f0>
  1143c4:	003f1a06 	br	114030 <__alt_data_end+0xfffd4030>
  1143c8:	a1400117 	ldw	r5,4(r20)
  1143cc:	d9000217 	ldw	r4,8(sp)
  1143d0:	29400044 	addi	r5,r5,1
  1143d4:	010b9600 	call	10b960 <_Balloc>
  1143d8:	a1800417 	ldw	r6,16(r20)
  1143dc:	a1400304 	addi	r5,r20,12
  1143e0:	11000304 	addi	r4,r2,12
  1143e4:	31800084 	addi	r6,r6,2
  1143e8:	318d883a 	add	r6,r6,r6
  1143ec:	318d883a 	add	r6,r6,r6
  1143f0:	102d883a 	mov	r22,r2
  1143f4:	010157c0 	call	10157c <memcpy>
  1143f8:	d9000217 	ldw	r4,8(sp)
  1143fc:	a00b883a 	mov	r5,r20
  114400:	b029883a 	mov	r20,r22
  114404:	010ba080 	call	10ba08 <_Bfree>
  114408:	b0c00417 	ldw	r3,16(r22)
  11440c:	b1800504 	addi	r6,r22,20
  114410:	003efc06 	br	114004 <__alt_data_end+0xfffd4004>
  114414:	9005d17a 	srai	r2,r18,5
  114418:	944007cc 	andi	r17,r18,31
  11441c:	1085883a 	add	r2,r2,r2
  114420:	1085883a 	add	r2,r2,r2
  114424:	3087883a 	add	r3,r6,r2
  114428:	00800044 	movi	r2,1
  11442c:	1462983a 	sll	r17,r2,r17
  114430:	18800017 	ldw	r2,0(r3)
  114434:	8884703a 	and	r2,r17,r2
  114438:	1022c03a 	cmpne	r17,r2,zero
  11443c:	00800884 	movi	r2,34
  114440:	1463c83a 	sub	r17,r2,r17
  114444:	003f2e06 	br	114100 <__alt_data_end+0xfffd4100>

00114448 <__hexnan>:
  114448:	defff904 	addi	sp,sp,-28
  11444c:	dc800215 	stw	r18,8(sp)
  114450:	2c800017 	ldw	r18,0(r5)
  114454:	dfc00615 	stw	ra,24(sp)
  114458:	dd400515 	stw	r21,20(sp)
  11445c:	901fd17a 	srai	r15,r18,5
  114460:	dd000415 	stw	r20,16(sp)
  114464:	dcc00315 	stw	r19,12(sp)
  114468:	7bdf883a 	add	r15,r15,r15
  11446c:	7bdf883a 	add	r15,r15,r15
  114470:	dc400115 	stw	r17,4(sp)
  114474:	dc000015 	stw	r16,0(sp)
  114478:	948007cc 	andi	r18,r18,31
  11447c:	33df883a 	add	r15,r6,r15
  114480:	90000126 	beq	r18,zero,114488 <__hexnan+0x40>
  114484:	7bc00104 	addi	r15,r15,4
  114488:	22000017 	ldw	r8,0(r4)
  11448c:	7affff04 	addi	r11,r15,-4
  114490:	038004b4 	movhi	r14,18
  114494:	783fff15 	stw	zero,-4(r15)
  114498:	581b883a 	mov	r13,r11
  11449c:	580b883a 	mov	r5,r11
  1144a0:	000f883a 	mov	r7,zero
  1144a4:	003f883a 	mov	ra,zero
  1144a8:	0019883a 	mov	r12,zero
  1144ac:	738dd484 	addi	r14,r14,14162
  1144b0:	04400204 	movi	r17,8
  1144b4:	04000804 	movi	r16,32
  1144b8:	04c001c4 	movi	r19,7
  1144bc:	42000044 	addi	r8,r8,1
  1144c0:	40c00003 	ldbu	r3,0(r8)
  1144c4:	18001d26 	beq	r3,zero,11453c <__hexnan+0xf4>
  1144c8:	70c5883a 	add	r2,r14,r3
  1144cc:	10800003 	ldbu	r2,0(r2)
  1144d0:	12403fcc 	andi	r9,r2,255
  1144d4:	4800301e 	bne	r9,zero,114598 <__hexnan+0x150>
  1144d8:	80c04236 	bltu	r16,r3,1145e4 <__hexnan+0x19c>
  1144dc:	fb3ff70e 	bge	ra,r12,1144bc <__alt_data_end+0xfffd44bc>
  1144e0:	2b40112e 	bgeu	r5,r13,114528 <__hexnan+0xe0>
  1144e4:	99c01016 	blt	r19,r7,114528 <__hexnan+0xe0>
  1144e8:	89e9c83a 	sub	r20,r17,r7
  1144ec:	a529883a 	add	r20,r20,r20
  1144f0:	2a800017 	ldw	r10,0(r5)
  1144f4:	a529883a 	add	r20,r20,r20
  1144f8:	852bc83a 	sub	r21,r16,r20
  1144fc:	28c00104 	addi	r3,r5,4
  114500:	2805883a 	mov	r2,r5
  114504:	19c00017 	ldw	r7,0(r3)
  114508:	10800104 	addi	r2,r2,4
  11450c:	18c00104 	addi	r3,r3,4
  114510:	3d52983a 	sll	r9,r7,r21
  114514:	4a92b03a 	or	r9,r9,r10
  114518:	3d14d83a 	srl	r10,r7,r20
  11451c:	127fff15 	stw	r9,-4(r2)
  114520:	1abfff15 	stw	r10,-4(r3)
  114524:	137ff736 	bltu	r2,r13,114504 <__alt_data_end+0xfffd4504>
  114528:	31402836 	bltu	r6,r5,1145cc <__hexnan+0x184>
  11452c:	42000044 	addi	r8,r8,1
  114530:	40c00003 	ldbu	r3,0(r8)
  114534:	01c00204 	movi	r7,8
  114538:	183fe31e 	bne	r3,zero,1144c8 <__alt_data_end+0xfffd44c8>
  11453c:	60002b26 	beq	r12,zero,1145ec <__hexnan+0x1a4>
  114540:	2b40022e 	bgeu	r5,r13,11454c <__hexnan+0x104>
  114544:	008001c4 	movi	r2,7
  114548:	11c0430e 	bge	r2,r7,114658 <__hexnan+0x210>
  11454c:	3140312e 	bgeu	r6,r5,114614 <__hexnan+0x1cc>
  114550:	3007883a 	mov	r3,r6
  114554:	29000017 	ldw	r4,0(r5)
  114558:	18800104 	addi	r2,r3,4
  11455c:	29400104 	addi	r5,r5,4
  114560:	19000015 	stw	r4,0(r3)
  114564:	1007883a 	mov	r3,r2
  114568:	597ffa2e 	bgeu	r11,r5,114554 <__alt_data_end+0xfffd4554>
  11456c:	10000015 	stw	zero,0(r2)
  114570:	10800104 	addi	r2,r2,4
  114574:	58bffd2e 	bgeu	r11,r2,11456c <__alt_data_end+0xfffd456c>
  114578:	78bfff17 	ldw	r2,-4(r15)
  11457c:	1000041e 	bne	r2,zero,114590 <__hexnan+0x148>
  114580:	32c02d26 	beq	r6,r11,114638 <__hexnan+0x1f0>
  114584:	5affff04 	addi	r11,r11,-4
  114588:	58800017 	ldw	r2,0(r11)
  11458c:	103ffc26 	beq	r2,zero,114580 <__alt_data_end+0xfffd4580>
  114590:	00800144 	movi	r2,5
  114594:	00001606 	br	1145f0 <__hexnan+0x1a8>
  114598:	39c00044 	addi	r7,r7,1
  11459c:	63000044 	addi	r12,r12,1
  1145a0:	89c0040e 	bge	r17,r7,1145b4 <__hexnan+0x16c>
  1145a4:	317fc52e 	bgeu	r6,r5,1144bc <__alt_data_end+0xfffd44bc>
  1145a8:	283fff15 	stw	zero,-4(r5)
  1145ac:	01c00044 	movi	r7,1
  1145b0:	297fff04 	addi	r5,r5,-4
  1145b4:	28c00017 	ldw	r3,0(r5)
  1145b8:	108003cc 	andi	r2,r2,15
  1145bc:	1806913a 	slli	r3,r3,4
  1145c0:	1884b03a 	or	r2,r3,r2
  1145c4:	28800015 	stw	r2,0(r5)
  1145c8:	003fbc06 	br	1144bc <__alt_data_end+0xfffd44bc>
  1145cc:	2b7fff04 	addi	r13,r5,-4
  1145d0:	283fff15 	stw	zero,-4(r5)
  1145d4:	603f883a 	mov	ra,r12
  1145d8:	680b883a 	mov	r5,r13
  1145dc:	000f883a 	mov	r7,zero
  1145e0:	003fb606 	br	1144bc <__alt_data_end+0xfffd44bc>
  1145e4:	00800a44 	movi	r2,41
  1145e8:	18801726 	beq	r3,r2,114648 <__hexnan+0x200>
  1145ec:	00800104 	movi	r2,4
  1145f0:	dfc00617 	ldw	ra,24(sp)
  1145f4:	dd400517 	ldw	r21,20(sp)
  1145f8:	dd000417 	ldw	r20,16(sp)
  1145fc:	dcc00317 	ldw	r19,12(sp)
  114600:	dc800217 	ldw	r18,8(sp)
  114604:	dc400117 	ldw	r17,4(sp)
  114608:	dc000017 	ldw	r16,0(sp)
  11460c:	dec00704 	addi	sp,sp,28
  114610:	f800283a 	ret
  114614:	903fd826 	beq	r18,zero,114578 <__alt_data_end+0xfffd4578>
  114618:	00c00804 	movi	r3,32
  11461c:	1ca5c83a 	sub	r18,r3,r18
  114620:	00ffffc4 	movi	r3,-1
  114624:	78bfff17 	ldw	r2,-4(r15)
  114628:	1c86d83a 	srl	r3,r3,r18
  11462c:	1884703a 	and	r2,r3,r2
  114630:	78bfff15 	stw	r2,-4(r15)
  114634:	003fd106 	br	11457c <__alt_data_end+0xfffd457c>
  114638:	00800044 	movi	r2,1
  11463c:	58800015 	stw	r2,0(r11)
  114640:	00800144 	movi	r2,5
  114644:	003fea06 	br	1145f0 <__alt_data_end+0xfffd45f0>
  114648:	42000044 	addi	r8,r8,1
  11464c:	22000015 	stw	r8,0(r4)
  114650:	603fbb1e 	bne	r12,zero,114540 <__alt_data_end+0xfffd4540>
  114654:	003fe506 	br	1145ec <__alt_data_end+0xfffd45ec>
  114658:	02400204 	movi	r9,8
  11465c:	49d3c83a 	sub	r9,r9,r7
  114660:	4a53883a 	add	r9,r9,r9
  114664:	2a000017 	ldw	r8,0(r5)
  114668:	4a53883a 	add	r9,r9,r9
  11466c:	02800804 	movi	r10,32
  114670:	5255c83a 	sub	r10,r10,r9
  114674:	28c00104 	addi	r3,r5,4
  114678:	2805883a 	mov	r2,r5
  11467c:	19c00017 	ldw	r7,0(r3)
  114680:	10800104 	addi	r2,r2,4
  114684:	18c00104 	addi	r3,r3,4
  114688:	3a88983a 	sll	r4,r7,r10
  11468c:	2208b03a 	or	r4,r4,r8
  114690:	3a50d83a 	srl	r8,r7,r9
  114694:	113fff15 	stw	r4,-4(r2)
  114698:	1a3fff15 	stw	r8,-4(r3)
  11469c:	137ff736 	bltu	r2,r13,11467c <__alt_data_end+0xfffd467c>
  1146a0:	003faa06 	br	11454c <__alt_data_end+0xfffd454c>

001146a4 <_isatty_r>:
  1146a4:	defffd04 	addi	sp,sp,-12
  1146a8:	dc000015 	stw	r16,0(sp)
  1146ac:	040004b4 	movhi	r16,18
  1146b0:	dc400115 	stw	r17,4(sp)
  1146b4:	841c9c04 	addi	r16,r16,29296
  1146b8:	2023883a 	mov	r17,r4
  1146bc:	2809883a 	mov	r4,r5
  1146c0:	dfc00215 	stw	ra,8(sp)
  1146c4:	80000015 	stw	zero,0(r16)
  1146c8:	01188dc0 	call	1188dc <isatty>
  1146cc:	00ffffc4 	movi	r3,-1
  1146d0:	10c00526 	beq	r2,r3,1146e8 <_isatty_r+0x44>
  1146d4:	dfc00217 	ldw	ra,8(sp)
  1146d8:	dc400117 	ldw	r17,4(sp)
  1146dc:	dc000017 	ldw	r16,0(sp)
  1146e0:	dec00304 	addi	sp,sp,12
  1146e4:	f800283a 	ret
  1146e8:	80c00017 	ldw	r3,0(r16)
  1146ec:	183ff926 	beq	r3,zero,1146d4 <__alt_data_end+0xfffd46d4>
  1146f0:	88c00015 	stw	r3,0(r17)
  1146f4:	003ff706 	br	1146d4 <__alt_data_end+0xfffd46d4>

001146f8 <strncmp>:
  1146f8:	30003126 	beq	r6,zero,1147c0 <strncmp+0xc8>
  1146fc:	2144b03a 	or	r2,r4,r5
  114700:	108000cc 	andi	r2,r2,3
  114704:	10001e1e 	bne	r2,zero,114780 <strncmp+0x88>
  114708:	024000c4 	movi	r9,3
  11470c:	49801c2e 	bgeu	r9,r6,114780 <strncmp+0x88>
  114710:	20800017 	ldw	r2,0(r4)
  114714:	28c00017 	ldw	r3,0(r5)
  114718:	10c0191e 	bne	r2,r3,114780 <strncmp+0x88>
  11471c:	31bfff04 	addi	r6,r6,-4
  114720:	30002726 	beq	r6,zero,1147c0 <strncmp+0xc8>
  114724:	02ffbff4 	movhi	r11,65279
  114728:	5affbfc4 	addi	r11,r11,-257
  11472c:	0086303a 	nor	r3,zero,r2
  114730:	02a02074 	movhi	r10,32897
  114734:	12c5883a 	add	r2,r2,r11
  114738:	52a02004 	addi	r10,r10,-32640
  11473c:	10c4703a 	and	r2,r2,r3
  114740:	1284703a 	and	r2,r2,r10
  114744:	10000b26 	beq	r2,zero,114774 <strncmp+0x7c>
  114748:	00001d06 	br	1147c0 <strncmp+0xc8>
  11474c:	20c00017 	ldw	r3,0(r4)
  114750:	29c00017 	ldw	r7,0(r5)
  114754:	1ad1883a 	add	r8,r3,r11
  114758:	00c4303a 	nor	r2,zero,r3
  11475c:	4084703a 	and	r2,r8,r2
  114760:	1284703a 	and	r2,r2,r10
  114764:	19c0061e 	bne	r3,r7,114780 <strncmp+0x88>
  114768:	31bfff04 	addi	r6,r6,-4
  11476c:	30001426 	beq	r6,zero,1147c0 <strncmp+0xc8>
  114770:	1000131e 	bne	r2,zero,1147c0 <strncmp+0xc8>
  114774:	21000104 	addi	r4,r4,4
  114778:	29400104 	addi	r5,r5,4
  11477c:	49bff336 	bltu	r9,r6,11474c <__alt_data_end+0xfffd474c>
  114780:	28800007 	ldb	r2,0(r5)
  114784:	20c00007 	ldb	r3,0(r4)
  114788:	31bfffc4 	addi	r6,r6,-1
  11478c:	10c0081e 	bne	r2,r3,1147b0 <strncmp+0xb8>
  114790:	30000b26 	beq	r6,zero,1147c0 <strncmp+0xc8>
  114794:	10000a26 	beq	r2,zero,1147c0 <strncmp+0xc8>
  114798:	21000044 	addi	r4,r4,1
  11479c:	29400044 	addi	r5,r5,1
  1147a0:	20800007 	ldb	r2,0(r4)
  1147a4:	28c00007 	ldb	r3,0(r5)
  1147a8:	31bfffc4 	addi	r6,r6,-1
  1147ac:	10fff826 	beq	r2,r3,114790 <__alt_data_end+0xfffd4790>
  1147b0:	20800003 	ldbu	r2,0(r4)
  1147b4:	28c00003 	ldbu	r3,0(r5)
  1147b8:	10c5c83a 	sub	r2,r2,r3
  1147bc:	f800283a 	ret
  1147c0:	0005883a 	mov	r2,zero
  1147c4:	f800283a 	ret

001147c8 <__swbuf_r>:
  1147c8:	defffb04 	addi	sp,sp,-20
  1147cc:	dcc00315 	stw	r19,12(sp)
  1147d0:	dc800215 	stw	r18,8(sp)
  1147d4:	dc000015 	stw	r16,0(sp)
  1147d8:	dfc00415 	stw	ra,16(sp)
  1147dc:	dc400115 	stw	r17,4(sp)
  1147e0:	2025883a 	mov	r18,r4
  1147e4:	2827883a 	mov	r19,r5
  1147e8:	3021883a 	mov	r16,r6
  1147ec:	20000226 	beq	r4,zero,1147f8 <__swbuf_r+0x30>
  1147f0:	20800e17 	ldw	r2,56(r4)
  1147f4:	10004226 	beq	r2,zero,114900 <__swbuf_r+0x138>
  1147f8:	80800617 	ldw	r2,24(r16)
  1147fc:	8100030b 	ldhu	r4,12(r16)
  114800:	80800215 	stw	r2,8(r16)
  114804:	2080020c 	andi	r2,r4,8
  114808:	10003626 	beq	r2,zero,1148e4 <__swbuf_r+0x11c>
  11480c:	80c00417 	ldw	r3,16(r16)
  114810:	18003426 	beq	r3,zero,1148e4 <__swbuf_r+0x11c>
  114814:	2088000c 	andi	r2,r4,8192
  114818:	9c403fcc 	andi	r17,r19,255
  11481c:	10001a26 	beq	r2,zero,114888 <__swbuf_r+0xc0>
  114820:	80800017 	ldw	r2,0(r16)
  114824:	81000517 	ldw	r4,20(r16)
  114828:	10c7c83a 	sub	r3,r2,r3
  11482c:	1900200e 	bge	r3,r4,1148b0 <__swbuf_r+0xe8>
  114830:	18c00044 	addi	r3,r3,1
  114834:	81000217 	ldw	r4,8(r16)
  114838:	11400044 	addi	r5,r2,1
  11483c:	81400015 	stw	r5,0(r16)
  114840:	213fffc4 	addi	r4,r4,-1
  114844:	81000215 	stw	r4,8(r16)
  114848:	14c00005 	stb	r19,0(r2)
  11484c:	80800517 	ldw	r2,20(r16)
  114850:	10c01e26 	beq	r2,r3,1148cc <__swbuf_r+0x104>
  114854:	8080030b 	ldhu	r2,12(r16)
  114858:	1080004c 	andi	r2,r2,1
  11485c:	10000226 	beq	r2,zero,114868 <__swbuf_r+0xa0>
  114860:	00800284 	movi	r2,10
  114864:	88801926 	beq	r17,r2,1148cc <__swbuf_r+0x104>
  114868:	8805883a 	mov	r2,r17
  11486c:	dfc00417 	ldw	ra,16(sp)
  114870:	dcc00317 	ldw	r19,12(sp)
  114874:	dc800217 	ldw	r18,8(sp)
  114878:	dc400117 	ldw	r17,4(sp)
  11487c:	dc000017 	ldw	r16,0(sp)
  114880:	dec00504 	addi	sp,sp,20
  114884:	f800283a 	ret
  114888:	81401917 	ldw	r5,100(r16)
  11488c:	00b7ffc4 	movi	r2,-8193
  114890:	21080014 	ori	r4,r4,8192
  114894:	2884703a 	and	r2,r5,r2
  114898:	80801915 	stw	r2,100(r16)
  11489c:	80800017 	ldw	r2,0(r16)
  1148a0:	8100030d 	sth	r4,12(r16)
  1148a4:	81000517 	ldw	r4,20(r16)
  1148a8:	10c7c83a 	sub	r3,r2,r3
  1148ac:	193fe016 	blt	r3,r4,114830 <__alt_data_end+0xfffd4830>
  1148b0:	800b883a 	mov	r5,r16
  1148b4:	9009883a 	mov	r4,r18
  1148b8:	0109b080 	call	109b08 <_fflush_r>
  1148bc:	1000071e 	bne	r2,zero,1148dc <__swbuf_r+0x114>
  1148c0:	80800017 	ldw	r2,0(r16)
  1148c4:	00c00044 	movi	r3,1
  1148c8:	003fda06 	br	114834 <__alt_data_end+0xfffd4834>
  1148cc:	800b883a 	mov	r5,r16
  1148d0:	9009883a 	mov	r4,r18
  1148d4:	0109b080 	call	109b08 <_fflush_r>
  1148d8:	103fe326 	beq	r2,zero,114868 <__alt_data_end+0xfffd4868>
  1148dc:	00bfffc4 	movi	r2,-1
  1148e0:	003fe206 	br	11486c <__alt_data_end+0xfffd486c>
  1148e4:	800b883a 	mov	r5,r16
  1148e8:	9009883a 	mov	r4,r18
  1148ec:	0107e940 	call	107e94 <__swsetup_r>
  1148f0:	103ffa1e 	bne	r2,zero,1148dc <__alt_data_end+0xfffd48dc>
  1148f4:	8100030b 	ldhu	r4,12(r16)
  1148f8:	80c00417 	ldw	r3,16(r16)
  1148fc:	003fc506 	br	114814 <__alt_data_end+0xfffd4814>
  114900:	0109ef40 	call	109ef4 <__sinit>
  114904:	003fbc06 	br	1147f8 <__alt_data_end+0xfffd47f8>

00114908 <__swbuf>:
  114908:	008004b4 	movhi	r2,18
  11490c:	10957404 	addi	r2,r2,21968
  114910:	280d883a 	mov	r6,r5
  114914:	200b883a 	mov	r5,r4
  114918:	11000017 	ldw	r4,0(r2)
  11491c:	01147c81 	jmpi	1147c8 <__swbuf_r>

00114920 <_wcrtomb_r>:
  114920:	defff604 	addi	sp,sp,-40
  114924:	008004b4 	movhi	r2,18
  114928:	dc800815 	stw	r18,32(sp)
  11492c:	dc400715 	stw	r17,28(sp)
  114930:	dc000615 	stw	r16,24(sp)
  114934:	10957904 	addi	r2,r2,21988
  114938:	dfc00915 	stw	ra,36(sp)
  11493c:	2021883a 	mov	r16,r4
  114940:	3823883a 	mov	r17,r7
  114944:	14800017 	ldw	r18,0(r2)
  114948:	28001426 	beq	r5,zero,11499c <_wcrtomb_r+0x7c>
  11494c:	d9400415 	stw	r5,16(sp)
  114950:	d9800515 	stw	r6,20(sp)
  114954:	010aa740 	call	10aa74 <__locale_charset>
  114958:	d9800517 	ldw	r6,20(sp)
  11495c:	d9400417 	ldw	r5,16(sp)
  114960:	100f883a 	mov	r7,r2
  114964:	dc400015 	stw	r17,0(sp)
  114968:	8009883a 	mov	r4,r16
  11496c:	903ee83a 	callr	r18
  114970:	00ffffc4 	movi	r3,-1
  114974:	10c0031e 	bne	r2,r3,114984 <_wcrtomb_r+0x64>
  114978:	88000015 	stw	zero,0(r17)
  11497c:	00c02284 	movi	r3,138
  114980:	80c00015 	stw	r3,0(r16)
  114984:	dfc00917 	ldw	ra,36(sp)
  114988:	dc800817 	ldw	r18,32(sp)
  11498c:	dc400717 	ldw	r17,28(sp)
  114990:	dc000617 	ldw	r16,24(sp)
  114994:	dec00a04 	addi	sp,sp,40
  114998:	f800283a 	ret
  11499c:	010aa740 	call	10aa74 <__locale_charset>
  1149a0:	100f883a 	mov	r7,r2
  1149a4:	dc400015 	stw	r17,0(sp)
  1149a8:	000d883a 	mov	r6,zero
  1149ac:	d9400104 	addi	r5,sp,4
  1149b0:	8009883a 	mov	r4,r16
  1149b4:	903ee83a 	callr	r18
  1149b8:	003fed06 	br	114970 <__alt_data_end+0xfffd4970>

001149bc <wcrtomb>:
  1149bc:	defff604 	addi	sp,sp,-40
  1149c0:	008004b4 	movhi	r2,18
  1149c4:	dc800615 	stw	r18,24(sp)
  1149c8:	dc400515 	stw	r17,20(sp)
  1149cc:	10957404 	addi	r2,r2,21968
  1149d0:	dfc00915 	stw	ra,36(sp)
  1149d4:	dd000815 	stw	r20,32(sp)
  1149d8:	dcc00715 	stw	r19,28(sp)
  1149dc:	dc000415 	stw	r16,16(sp)
  1149e0:	3025883a 	mov	r18,r6
  1149e4:	14400017 	ldw	r17,0(r2)
  1149e8:	20001926 	beq	r4,zero,114a50 <wcrtomb+0x94>
  1149ec:	008004b4 	movhi	r2,18
  1149f0:	10957904 	addi	r2,r2,21988
  1149f4:	15000017 	ldw	r20,0(r2)
  1149f8:	2021883a 	mov	r16,r4
  1149fc:	2827883a 	mov	r19,r5
  114a00:	010aa740 	call	10aa74 <__locale_charset>
  114a04:	100f883a 	mov	r7,r2
  114a08:	dc800015 	stw	r18,0(sp)
  114a0c:	980d883a 	mov	r6,r19
  114a10:	800b883a 	mov	r5,r16
  114a14:	8809883a 	mov	r4,r17
  114a18:	a03ee83a 	callr	r20
  114a1c:	00ffffc4 	movi	r3,-1
  114a20:	10c0031e 	bne	r2,r3,114a30 <wcrtomb+0x74>
  114a24:	90000015 	stw	zero,0(r18)
  114a28:	00c02284 	movi	r3,138
  114a2c:	88c00015 	stw	r3,0(r17)
  114a30:	dfc00917 	ldw	ra,36(sp)
  114a34:	dd000817 	ldw	r20,32(sp)
  114a38:	dcc00717 	ldw	r19,28(sp)
  114a3c:	dc800617 	ldw	r18,24(sp)
  114a40:	dc400517 	ldw	r17,20(sp)
  114a44:	dc000417 	ldw	r16,16(sp)
  114a48:	dec00a04 	addi	sp,sp,40
  114a4c:	f800283a 	ret
  114a50:	008004b4 	movhi	r2,18
  114a54:	10957904 	addi	r2,r2,21988
  114a58:	14000017 	ldw	r16,0(r2)
  114a5c:	010aa740 	call	10aa74 <__locale_charset>
  114a60:	100f883a 	mov	r7,r2
  114a64:	dc800015 	stw	r18,0(sp)
  114a68:	000d883a 	mov	r6,zero
  114a6c:	d9400104 	addi	r5,sp,4
  114a70:	8809883a 	mov	r4,r17
  114a74:	803ee83a 	callr	r16
  114a78:	003fe806 	br	114a1c <__alt_data_end+0xfffd4a1c>

00114a7c <__ascii_wctomb>:
  114a7c:	28000526 	beq	r5,zero,114a94 <__ascii_wctomb+0x18>
  114a80:	00803fc4 	movi	r2,255
  114a84:	11800536 	bltu	r2,r6,114a9c <__ascii_wctomb+0x20>
  114a88:	29800005 	stb	r6,0(r5)
  114a8c:	00800044 	movi	r2,1
  114a90:	f800283a 	ret
  114a94:	0005883a 	mov	r2,zero
  114a98:	f800283a 	ret
  114a9c:	00802284 	movi	r2,138
  114aa0:	20800015 	stw	r2,0(r4)
  114aa4:	00bfffc4 	movi	r2,-1
  114aa8:	f800283a 	ret

00114aac <_wctomb_r>:
  114aac:	008004b4 	movhi	r2,18
  114ab0:	defff904 	addi	sp,sp,-28
  114ab4:	10957904 	addi	r2,r2,21988
  114ab8:	dfc00615 	stw	ra,24(sp)
  114abc:	dc400515 	stw	r17,20(sp)
  114ac0:	dc000415 	stw	r16,16(sp)
  114ac4:	3823883a 	mov	r17,r7
  114ac8:	14000017 	ldw	r16,0(r2)
  114acc:	d9000115 	stw	r4,4(sp)
  114ad0:	d9400215 	stw	r5,8(sp)
  114ad4:	d9800315 	stw	r6,12(sp)
  114ad8:	010aa740 	call	10aa74 <__locale_charset>
  114adc:	d9800317 	ldw	r6,12(sp)
  114ae0:	d9400217 	ldw	r5,8(sp)
  114ae4:	d9000117 	ldw	r4,4(sp)
  114ae8:	100f883a 	mov	r7,r2
  114aec:	dc400015 	stw	r17,0(sp)
  114af0:	803ee83a 	callr	r16
  114af4:	dfc00617 	ldw	ra,24(sp)
  114af8:	dc400517 	ldw	r17,20(sp)
  114afc:	dc000417 	ldw	r16,16(sp)
  114b00:	dec00704 	addi	sp,sp,28
  114b04:	f800283a 	ret

00114b08 <__muldi3>:
  114b08:	defff604 	addi	sp,sp,-40
  114b0c:	dd800615 	stw	r22,24(sp)
  114b10:	dd400515 	stw	r21,20(sp)
  114b14:	dc400115 	stw	r17,4(sp)
  114b18:	357fffcc 	andi	r21,r6,65535
  114b1c:	2022d43a 	srli	r17,r4,16
  114b20:	25bfffcc 	andi	r22,r4,65535
  114b24:	dcc00315 	stw	r19,12(sp)
  114b28:	dc800215 	stw	r18,8(sp)
  114b2c:	2027883a 	mov	r19,r4
  114b30:	2825883a 	mov	r18,r5
  114b34:	b009883a 	mov	r4,r22
  114b38:	a80b883a 	mov	r5,r21
  114b3c:	dfc00915 	stw	ra,36(sp)
  114b40:	df000815 	stw	fp,32(sp)
  114b44:	ddc00715 	stw	r23,28(sp)
  114b48:	3839883a 	mov	fp,r7
  114b4c:	302ed43a 	srli	r23,r6,16
  114b50:	dd000415 	stw	r20,16(sp)
  114b54:	dc000015 	stw	r16,0(sp)
  114b58:	3029883a 	mov	r20,r6
  114b5c:	01159fc0 	call	1159fc <__mulsi3>
  114b60:	a80b883a 	mov	r5,r21
  114b64:	8809883a 	mov	r4,r17
  114b68:	1021883a 	mov	r16,r2
  114b6c:	01159fc0 	call	1159fc <__mulsi3>
  114b70:	8809883a 	mov	r4,r17
  114b74:	b80b883a 	mov	r5,r23
  114b78:	102b883a 	mov	r21,r2
  114b7c:	01159fc0 	call	1159fc <__mulsi3>
  114b80:	b80b883a 	mov	r5,r23
  114b84:	b009883a 	mov	r4,r22
  114b88:	1023883a 	mov	r17,r2
  114b8c:	01159fc0 	call	1159fc <__mulsi3>
  114b90:	8006d43a 	srli	r3,r16,16
  114b94:	1545883a 	add	r2,r2,r21
  114b98:	1885883a 	add	r2,r3,r2
  114b9c:	1540022e 	bgeu	r2,r21,114ba8 <__muldi3+0xa0>
  114ba0:	00c00074 	movhi	r3,1
  114ba4:	88e3883a 	add	r17,r17,r3
  114ba8:	1006d43a 	srli	r3,r2,16
  114bac:	1004943a 	slli	r2,r2,16
  114bb0:	e00b883a 	mov	r5,fp
  114bb4:	9809883a 	mov	r4,r19
  114bb8:	843fffcc 	andi	r16,r16,65535
  114bbc:	1c63883a 	add	r17,r3,r17
  114bc0:	1421883a 	add	r16,r2,r16
  114bc4:	01159fc0 	call	1159fc <__mulsi3>
  114bc8:	900b883a 	mov	r5,r18
  114bcc:	a009883a 	mov	r4,r20
  114bd0:	1027883a 	mov	r19,r2
  114bd4:	01159fc0 	call	1159fc <__mulsi3>
  114bd8:	9885883a 	add	r2,r19,r2
  114bdc:	1447883a 	add	r3,r2,r17
  114be0:	8005883a 	mov	r2,r16
  114be4:	dfc00917 	ldw	ra,36(sp)
  114be8:	df000817 	ldw	fp,32(sp)
  114bec:	ddc00717 	ldw	r23,28(sp)
  114bf0:	dd800617 	ldw	r22,24(sp)
  114bf4:	dd400517 	ldw	r21,20(sp)
  114bf8:	dd000417 	ldw	r20,16(sp)
  114bfc:	dcc00317 	ldw	r19,12(sp)
  114c00:	dc800217 	ldw	r18,8(sp)
  114c04:	dc400117 	ldw	r17,4(sp)
  114c08:	dc000017 	ldw	r16,0(sp)
  114c0c:	dec00a04 	addi	sp,sp,40
  114c10:	f800283a 	ret

00114c14 <__fixunsdfsi>:
  114c14:	defffd04 	addi	sp,sp,-12
  114c18:	000d883a 	mov	r6,zero
  114c1c:	01d07834 	movhi	r7,16864
  114c20:	dc400115 	stw	r17,4(sp)
  114c24:	dc000015 	stw	r16,0(sp)
  114c28:	dfc00215 	stw	ra,8(sp)
  114c2c:	2023883a 	mov	r17,r4
  114c30:	2821883a 	mov	r16,r5
  114c34:	0116f240 	call	116f24 <__gedf2>
  114c38:	1000080e 	bge	r2,zero,114c5c <__fixunsdfsi+0x48>
  114c3c:	8809883a 	mov	r4,r17
  114c40:	800b883a 	mov	r5,r16
  114c44:	011825c0 	call	11825c <__fixdfsi>
  114c48:	dfc00217 	ldw	ra,8(sp)
  114c4c:	dc400117 	ldw	r17,4(sp)
  114c50:	dc000017 	ldw	r16,0(sp)
  114c54:	dec00304 	addi	sp,sp,12
  114c58:	f800283a 	ret
  114c5c:	000d883a 	mov	r6,zero
  114c60:	01d07834 	movhi	r7,16864
  114c64:	8809883a 	mov	r4,r17
  114c68:	800b883a 	mov	r5,r16
  114c6c:	01179600 	call	117960 <__subdf3>
  114c70:	180b883a 	mov	r5,r3
  114c74:	1009883a 	mov	r4,r2
  114c78:	011825c0 	call	11825c <__fixdfsi>
  114c7c:	00e00034 	movhi	r3,32768
  114c80:	10c5883a 	add	r2,r2,r3
  114c84:	003ff006 	br	114c48 <__alt_data_end+0xfffd4c48>

00114c88 <__udivdi3>:
  114c88:	defff404 	addi	sp,sp,-48
  114c8c:	dcc00515 	stw	r19,20(sp)
  114c90:	dc000215 	stw	r16,8(sp)
  114c94:	dfc00b15 	stw	ra,44(sp)
  114c98:	df000a15 	stw	fp,40(sp)
  114c9c:	ddc00915 	stw	r23,36(sp)
  114ca0:	dd800815 	stw	r22,32(sp)
  114ca4:	dd400715 	stw	r21,28(sp)
  114ca8:	dd000615 	stw	r20,24(sp)
  114cac:	dc800415 	stw	r18,16(sp)
  114cb0:	dc400315 	stw	r17,12(sp)
  114cb4:	2027883a 	mov	r19,r4
  114cb8:	2821883a 	mov	r16,r5
  114cbc:	3800461e 	bne	r7,zero,114dd8 <__udivdi3+0x150>
  114cc0:	3023883a 	mov	r17,r6
  114cc4:	2025883a 	mov	r18,r4
  114cc8:	2980572e 	bgeu	r5,r6,114e28 <__udivdi3+0x1a0>
  114ccc:	00bfffd4 	movui	r2,65535
  114cd0:	282d883a 	mov	r22,r5
  114cd4:	1180b236 	bltu	r2,r6,114fa0 <__udivdi3+0x318>
  114cd8:	00803fc4 	movi	r2,255
  114cdc:	1185803a 	cmpltu	r2,r2,r6
  114ce0:	100490fa 	slli	r2,r2,3
  114ce4:	3086d83a 	srl	r3,r6,r2
  114ce8:	010004b4 	movhi	r4,18
  114cec:	210e1484 	addi	r4,r4,14418
  114cf0:	20c7883a 	add	r3,r4,r3
  114cf4:	18c00003 	ldbu	r3,0(r3)
  114cf8:	1885883a 	add	r2,r3,r2
  114cfc:	00c00804 	movi	r3,32
  114d00:	1887c83a 	sub	r3,r3,r2
  114d04:	18000526 	beq	r3,zero,114d1c <__udivdi3+0x94>
  114d08:	80e0983a 	sll	r16,r16,r3
  114d0c:	9884d83a 	srl	r2,r19,r2
  114d10:	30e2983a 	sll	r17,r6,r3
  114d14:	98e4983a 	sll	r18,r19,r3
  114d18:	142cb03a 	or	r22,r2,r16
  114d1c:	882ad43a 	srli	r21,r17,16
  114d20:	b009883a 	mov	r4,r22
  114d24:	8d3fffcc 	andi	r20,r17,65535
  114d28:	a80b883a 	mov	r5,r21
  114d2c:	01159a40 	call	1159a4 <__umodsi3>
  114d30:	b009883a 	mov	r4,r22
  114d34:	a80b883a 	mov	r5,r21
  114d38:	1027883a 	mov	r19,r2
  114d3c:	01159400 	call	115940 <__udivsi3>
  114d40:	100b883a 	mov	r5,r2
  114d44:	a009883a 	mov	r4,r20
  114d48:	102d883a 	mov	r22,r2
  114d4c:	01159fc0 	call	1159fc <__mulsi3>
  114d50:	9826943a 	slli	r19,r19,16
  114d54:	9006d43a 	srli	r3,r18,16
  114d58:	1cc6b03a 	or	r3,r3,r19
  114d5c:	1880052e 	bgeu	r3,r2,114d74 <__udivdi3+0xec>
  114d60:	1c47883a 	add	r3,r3,r17
  114d64:	b13fffc4 	addi	r4,r22,-1
  114d68:	1c400136 	bltu	r3,r17,114d70 <__udivdi3+0xe8>
  114d6c:	18814236 	bltu	r3,r2,115278 <__udivdi3+0x5f0>
  114d70:	202d883a 	mov	r22,r4
  114d74:	18a1c83a 	sub	r16,r3,r2
  114d78:	8009883a 	mov	r4,r16
  114d7c:	a80b883a 	mov	r5,r21
  114d80:	01159a40 	call	1159a4 <__umodsi3>
  114d84:	1027883a 	mov	r19,r2
  114d88:	8009883a 	mov	r4,r16
  114d8c:	a80b883a 	mov	r5,r21
  114d90:	9826943a 	slli	r19,r19,16
  114d94:	01159400 	call	115940 <__udivsi3>
  114d98:	100b883a 	mov	r5,r2
  114d9c:	a009883a 	mov	r4,r20
  114da0:	94bfffcc 	andi	r18,r18,65535
  114da4:	1021883a 	mov	r16,r2
  114da8:	94e4b03a 	or	r18,r18,r19
  114dac:	01159fc0 	call	1159fc <__mulsi3>
  114db0:	9080052e 	bgeu	r18,r2,114dc8 <__udivdi3+0x140>
  114db4:	8ca5883a 	add	r18,r17,r18
  114db8:	80ffffc4 	addi	r3,r16,-1
  114dbc:	94410c36 	bltu	r18,r17,1151f0 <__udivdi3+0x568>
  114dc0:	90810b2e 	bgeu	r18,r2,1151f0 <__udivdi3+0x568>
  114dc4:	843fff84 	addi	r16,r16,-2
  114dc8:	b004943a 	slli	r2,r22,16
  114dcc:	0007883a 	mov	r3,zero
  114dd0:	1404b03a 	or	r2,r2,r16
  114dd4:	00005e06 	br	114f50 <__udivdi3+0x2c8>
  114dd8:	29c05b36 	bltu	r5,r7,114f48 <__udivdi3+0x2c0>
  114ddc:	00bfffd4 	movui	r2,65535
  114de0:	11c0672e 	bgeu	r2,r7,114f80 <__udivdi3+0x2f8>
  114de4:	00804034 	movhi	r2,256
  114de8:	10bfffc4 	addi	r2,r2,-1
  114dec:	11c10a36 	bltu	r2,r7,115218 <__udivdi3+0x590>
  114df0:	00800404 	movi	r2,16
  114df4:	3886d83a 	srl	r3,r7,r2
  114df8:	010004b4 	movhi	r4,18
  114dfc:	210e1484 	addi	r4,r4,14418
  114e00:	20c7883a 	add	r3,r4,r3
  114e04:	18c00003 	ldbu	r3,0(r3)
  114e08:	05c00804 	movi	r23,32
  114e0c:	1885883a 	add	r2,r3,r2
  114e10:	b8afc83a 	sub	r23,r23,r2
  114e14:	b800671e 	bne	r23,zero,114fb4 <__udivdi3+0x32c>
  114e18:	3c010536 	bltu	r7,r16,115230 <__udivdi3+0x5a8>
  114e1c:	9985403a 	cmpgeu	r2,r19,r6
  114e20:	0007883a 	mov	r3,zero
  114e24:	00004a06 	br	114f50 <__udivdi3+0x2c8>
  114e28:	3000041e 	bne	r6,zero,114e3c <__udivdi3+0x1b4>
  114e2c:	000b883a 	mov	r5,zero
  114e30:	01000044 	movi	r4,1
  114e34:	01159400 	call	115940 <__udivsi3>
  114e38:	1023883a 	mov	r17,r2
  114e3c:	00bfffd4 	movui	r2,65535
  114e40:	1440532e 	bgeu	r2,r17,114f90 <__udivdi3+0x308>
  114e44:	00804034 	movhi	r2,256
  114e48:	10bfffc4 	addi	r2,r2,-1
  114e4c:	1440f436 	bltu	r2,r17,115220 <__udivdi3+0x598>
  114e50:	00800404 	movi	r2,16
  114e54:	8886d83a 	srl	r3,r17,r2
  114e58:	010004b4 	movhi	r4,18
  114e5c:	210e1484 	addi	r4,r4,14418
  114e60:	20c7883a 	add	r3,r4,r3
  114e64:	18c00003 	ldbu	r3,0(r3)
  114e68:	1885883a 	add	r2,r3,r2
  114e6c:	00c00804 	movi	r3,32
  114e70:	1887c83a 	sub	r3,r3,r2
  114e74:	1800a51e 	bne	r3,zero,11510c <__udivdi3+0x484>
  114e78:	882ad43a 	srli	r21,r17,16
  114e7c:	8461c83a 	sub	r16,r16,r17
  114e80:	8d3fffcc 	andi	r20,r17,65535
  114e84:	00c00044 	movi	r3,1
  114e88:	a80b883a 	mov	r5,r21
  114e8c:	8009883a 	mov	r4,r16
  114e90:	d8c00115 	stw	r3,4(sp)
  114e94:	01159a40 	call	1159a4 <__umodsi3>
  114e98:	a80b883a 	mov	r5,r21
  114e9c:	8009883a 	mov	r4,r16
  114ea0:	1027883a 	mov	r19,r2
  114ea4:	01159400 	call	115940 <__udivsi3>
  114ea8:	a00b883a 	mov	r5,r20
  114eac:	1009883a 	mov	r4,r2
  114eb0:	102d883a 	mov	r22,r2
  114eb4:	01159fc0 	call	1159fc <__mulsi3>
  114eb8:	9826943a 	slli	r19,r19,16
  114ebc:	900ed43a 	srli	r7,r18,16
  114ec0:	d8c00117 	ldw	r3,4(sp)
  114ec4:	3cceb03a 	or	r7,r7,r19
  114ec8:	3880052e 	bgeu	r7,r2,114ee0 <__udivdi3+0x258>
  114ecc:	3c4f883a 	add	r7,r7,r17
  114ed0:	b13fffc4 	addi	r4,r22,-1
  114ed4:	3c400136 	bltu	r7,r17,114edc <__udivdi3+0x254>
  114ed8:	3880e436 	bltu	r7,r2,11526c <__udivdi3+0x5e4>
  114edc:	202d883a 	mov	r22,r4
  114ee0:	38a1c83a 	sub	r16,r7,r2
  114ee4:	8009883a 	mov	r4,r16
  114ee8:	a80b883a 	mov	r5,r21
  114eec:	d8c00115 	stw	r3,4(sp)
  114ef0:	01159a40 	call	1159a4 <__umodsi3>
  114ef4:	1027883a 	mov	r19,r2
  114ef8:	8009883a 	mov	r4,r16
  114efc:	a80b883a 	mov	r5,r21
  114f00:	9826943a 	slli	r19,r19,16
  114f04:	01159400 	call	115940 <__udivsi3>
  114f08:	a00b883a 	mov	r5,r20
  114f0c:	1009883a 	mov	r4,r2
  114f10:	94bfffcc 	andi	r18,r18,65535
  114f14:	1021883a 	mov	r16,r2
  114f18:	94e4b03a 	or	r18,r18,r19
  114f1c:	01159fc0 	call	1159fc <__mulsi3>
  114f20:	d8c00117 	ldw	r3,4(sp)
  114f24:	9080052e 	bgeu	r18,r2,114f3c <__udivdi3+0x2b4>
  114f28:	8ca5883a 	add	r18,r17,r18
  114f2c:	813fffc4 	addi	r4,r16,-1
  114f30:	9440ad36 	bltu	r18,r17,1151e8 <__udivdi3+0x560>
  114f34:	9080ac2e 	bgeu	r18,r2,1151e8 <__udivdi3+0x560>
  114f38:	843fff84 	addi	r16,r16,-2
  114f3c:	b004943a 	slli	r2,r22,16
  114f40:	1404b03a 	or	r2,r2,r16
  114f44:	00000206 	br	114f50 <__udivdi3+0x2c8>
  114f48:	0007883a 	mov	r3,zero
  114f4c:	0005883a 	mov	r2,zero
  114f50:	dfc00b17 	ldw	ra,44(sp)
  114f54:	df000a17 	ldw	fp,40(sp)
  114f58:	ddc00917 	ldw	r23,36(sp)
  114f5c:	dd800817 	ldw	r22,32(sp)
  114f60:	dd400717 	ldw	r21,28(sp)
  114f64:	dd000617 	ldw	r20,24(sp)
  114f68:	dcc00517 	ldw	r19,20(sp)
  114f6c:	dc800417 	ldw	r18,16(sp)
  114f70:	dc400317 	ldw	r17,12(sp)
  114f74:	dc000217 	ldw	r16,8(sp)
  114f78:	dec00c04 	addi	sp,sp,48
  114f7c:	f800283a 	ret
  114f80:	00803fc4 	movi	r2,255
  114f84:	11c5803a 	cmpltu	r2,r2,r7
  114f88:	100490fa 	slli	r2,r2,3
  114f8c:	003f9906 	br	114df4 <__alt_data_end+0xfffd4df4>
  114f90:	00803fc4 	movi	r2,255
  114f94:	1445803a 	cmpltu	r2,r2,r17
  114f98:	100490fa 	slli	r2,r2,3
  114f9c:	003fad06 	br	114e54 <__alt_data_end+0xfffd4e54>
  114fa0:	00804034 	movhi	r2,256
  114fa4:	10bfffc4 	addi	r2,r2,-1
  114fa8:	11809f36 	bltu	r2,r6,115228 <__udivdi3+0x5a0>
  114fac:	00800404 	movi	r2,16
  114fb0:	003f4c06 	br	114ce4 <__alt_data_end+0xfffd4ce4>
  114fb4:	3dce983a 	sll	r7,r7,r23
  114fb8:	30b8d83a 	srl	fp,r6,r2
  114fbc:	80a2d83a 	srl	r17,r16,r2
  114fc0:	35cc983a 	sll	r6,r6,r23
  114fc4:	3f38b03a 	or	fp,r7,fp
  114fc8:	e024d43a 	srli	r18,fp,16
  114fcc:	9884d83a 	srl	r2,r19,r2
  114fd0:	85e0983a 	sll	r16,r16,r23
  114fd4:	8809883a 	mov	r4,r17
  114fd8:	900b883a 	mov	r5,r18
  114fdc:	d9800015 	stw	r6,0(sp)
  114fe0:	1420b03a 	or	r16,r2,r16
  114fe4:	01159a40 	call	1159a4 <__umodsi3>
  114fe8:	900b883a 	mov	r5,r18
  114fec:	8809883a 	mov	r4,r17
  114ff0:	1029883a 	mov	r20,r2
  114ff4:	e5bfffcc 	andi	r22,fp,65535
  114ff8:	01159400 	call	115940 <__udivsi3>
  114ffc:	100b883a 	mov	r5,r2
  115000:	b009883a 	mov	r4,r22
  115004:	102b883a 	mov	r21,r2
  115008:	01159fc0 	call	1159fc <__mulsi3>
  11500c:	a028943a 	slli	r20,r20,16
  115010:	8006d43a 	srli	r3,r16,16
  115014:	1d06b03a 	or	r3,r3,r20
  115018:	1880042e 	bgeu	r3,r2,11502c <__udivdi3+0x3a4>
  11501c:	1f07883a 	add	r3,r3,fp
  115020:	a93fffc4 	addi	r4,r21,-1
  115024:	1f00892e 	bgeu	r3,fp,11524c <__udivdi3+0x5c4>
  115028:	202b883a 	mov	r21,r4
  11502c:	18a3c83a 	sub	r17,r3,r2
  115030:	8809883a 	mov	r4,r17
  115034:	900b883a 	mov	r5,r18
  115038:	01159a40 	call	1159a4 <__umodsi3>
  11503c:	1029883a 	mov	r20,r2
  115040:	8809883a 	mov	r4,r17
  115044:	900b883a 	mov	r5,r18
  115048:	a028943a 	slli	r20,r20,16
  11504c:	01159400 	call	115940 <__udivsi3>
  115050:	100b883a 	mov	r5,r2
  115054:	b009883a 	mov	r4,r22
  115058:	843fffcc 	andi	r16,r16,65535
  11505c:	1023883a 	mov	r17,r2
  115060:	8520b03a 	or	r16,r16,r20
  115064:	01159fc0 	call	1159fc <__mulsi3>
  115068:	8080042e 	bgeu	r16,r2,11507c <__udivdi3+0x3f4>
  11506c:	8721883a 	add	r16,r16,fp
  115070:	88ffffc4 	addi	r3,r17,-1
  115074:	8700712e 	bgeu	r16,fp,11523c <__udivdi3+0x5b4>
  115078:	1823883a 	mov	r17,r3
  11507c:	a80e943a 	slli	r7,r21,16
  115080:	d8c00017 	ldw	r3,0(sp)
  115084:	80a1c83a 	sub	r16,r16,r2
  115088:	3c64b03a 	or	r18,r7,r17
  11508c:	1d3fffcc 	andi	r20,r3,65535
  115090:	9022d43a 	srli	r17,r18,16
  115094:	95bfffcc 	andi	r22,r18,65535
  115098:	a00b883a 	mov	r5,r20
  11509c:	b009883a 	mov	r4,r22
  1150a0:	182ad43a 	srli	r21,r3,16
  1150a4:	01159fc0 	call	1159fc <__mulsi3>
  1150a8:	a00b883a 	mov	r5,r20
  1150ac:	8809883a 	mov	r4,r17
  1150b0:	1039883a 	mov	fp,r2
  1150b4:	01159fc0 	call	1159fc <__mulsi3>
  1150b8:	8809883a 	mov	r4,r17
  1150bc:	a80b883a 	mov	r5,r21
  1150c0:	1029883a 	mov	r20,r2
  1150c4:	01159fc0 	call	1159fc <__mulsi3>
  1150c8:	a80b883a 	mov	r5,r21
  1150cc:	b009883a 	mov	r4,r22
  1150d0:	1023883a 	mov	r17,r2
  1150d4:	01159fc0 	call	1159fc <__mulsi3>
  1150d8:	e006d43a 	srli	r3,fp,16
  1150dc:	1505883a 	add	r2,r2,r20
  1150e0:	1887883a 	add	r3,r3,r2
  1150e4:	1d00022e 	bgeu	r3,r20,1150f0 <__udivdi3+0x468>
  1150e8:	00800074 	movhi	r2,1
  1150ec:	88a3883a 	add	r17,r17,r2
  1150f0:	1804d43a 	srli	r2,r3,16
  1150f4:	1463883a 	add	r17,r2,r17
  1150f8:	84404436 	bltu	r16,r17,11520c <__udivdi3+0x584>
  1150fc:	84403e26 	beq	r16,r17,1151f8 <__udivdi3+0x570>
  115100:	9005883a 	mov	r2,r18
  115104:	0007883a 	mov	r3,zero
  115108:	003f9106 	br	114f50 <__alt_data_end+0xfffd4f50>
  11510c:	88e2983a 	sll	r17,r17,r3
  115110:	80aed83a 	srl	r23,r16,r2
  115114:	80e0983a 	sll	r16,r16,r3
  115118:	882ad43a 	srli	r21,r17,16
  11511c:	9884d83a 	srl	r2,r19,r2
  115120:	b809883a 	mov	r4,r23
  115124:	a80b883a 	mov	r5,r21
  115128:	98e4983a 	sll	r18,r19,r3
  11512c:	142cb03a 	or	r22,r2,r16
  115130:	01159a40 	call	1159a4 <__umodsi3>
  115134:	b809883a 	mov	r4,r23
  115138:	a80b883a 	mov	r5,r21
  11513c:	1027883a 	mov	r19,r2
  115140:	8d3fffcc 	andi	r20,r17,65535
  115144:	01159400 	call	115940 <__udivsi3>
  115148:	a009883a 	mov	r4,r20
  11514c:	100b883a 	mov	r5,r2
  115150:	102f883a 	mov	r23,r2
  115154:	01159fc0 	call	1159fc <__mulsi3>
  115158:	9826943a 	slli	r19,r19,16
  11515c:	b008d43a 	srli	r4,r22,16
  115160:	24c8b03a 	or	r4,r4,r19
  115164:	2080062e 	bgeu	r4,r2,115180 <__udivdi3+0x4f8>
  115168:	2449883a 	add	r4,r4,r17
  11516c:	b8ffffc4 	addi	r3,r23,-1
  115170:	24403c36 	bltu	r4,r17,115264 <__udivdi3+0x5dc>
  115174:	20803b2e 	bgeu	r4,r2,115264 <__udivdi3+0x5dc>
  115178:	bdffff84 	addi	r23,r23,-2
  11517c:	2449883a 	add	r4,r4,r17
  115180:	20a1c83a 	sub	r16,r4,r2
  115184:	a80b883a 	mov	r5,r21
  115188:	8009883a 	mov	r4,r16
  11518c:	01159a40 	call	1159a4 <__umodsi3>
  115190:	a80b883a 	mov	r5,r21
  115194:	8009883a 	mov	r4,r16
  115198:	1027883a 	mov	r19,r2
  11519c:	01159400 	call	115940 <__udivsi3>
  1151a0:	a009883a 	mov	r4,r20
  1151a4:	100b883a 	mov	r5,r2
  1151a8:	9826943a 	slli	r19,r19,16
  1151ac:	1039883a 	mov	fp,r2
  1151b0:	01159fc0 	call	1159fc <__mulsi3>
  1151b4:	b13fffcc 	andi	r4,r22,65535
  1151b8:	24c8b03a 	or	r4,r4,r19
  1151bc:	2080062e 	bgeu	r4,r2,1151d8 <__udivdi3+0x550>
  1151c0:	2449883a 	add	r4,r4,r17
  1151c4:	e0ffffc4 	addi	r3,fp,-1
  1151c8:	24402436 	bltu	r4,r17,11525c <__udivdi3+0x5d4>
  1151cc:	2080232e 	bgeu	r4,r2,11525c <__udivdi3+0x5d4>
  1151d0:	e73fff84 	addi	fp,fp,-2
  1151d4:	2449883a 	add	r4,r4,r17
  1151d8:	b82e943a 	slli	r23,r23,16
  1151dc:	20a1c83a 	sub	r16,r4,r2
  1151e0:	bf06b03a 	or	r3,r23,fp
  1151e4:	003f2806 	br	114e88 <__alt_data_end+0xfffd4e88>
  1151e8:	2021883a 	mov	r16,r4
  1151ec:	003f5306 	br	114f3c <__alt_data_end+0xfffd4f3c>
  1151f0:	1821883a 	mov	r16,r3
  1151f4:	003ef406 	br	114dc8 <__alt_data_end+0xfffd4dc8>
  1151f8:	1806943a 	slli	r3,r3,16
  1151fc:	9de6983a 	sll	r19,r19,r23
  115200:	e73fffcc 	andi	fp,fp,65535
  115204:	1f07883a 	add	r3,r3,fp
  115208:	98ffbd2e 	bgeu	r19,r3,115100 <__alt_data_end+0xfffd5100>
  11520c:	90bfffc4 	addi	r2,r18,-1
  115210:	0007883a 	mov	r3,zero
  115214:	003f4e06 	br	114f50 <__alt_data_end+0xfffd4f50>
  115218:	00800604 	movi	r2,24
  11521c:	003ef506 	br	114df4 <__alt_data_end+0xfffd4df4>
  115220:	00800604 	movi	r2,24
  115224:	003f0b06 	br	114e54 <__alt_data_end+0xfffd4e54>
  115228:	00800604 	movi	r2,24
  11522c:	003ead06 	br	114ce4 <__alt_data_end+0xfffd4ce4>
  115230:	0007883a 	mov	r3,zero
  115234:	00800044 	movi	r2,1
  115238:	003f4506 	br	114f50 <__alt_data_end+0xfffd4f50>
  11523c:	80bf8e2e 	bgeu	r16,r2,115078 <__alt_data_end+0xfffd5078>
  115240:	8c7fff84 	addi	r17,r17,-2
  115244:	8721883a 	add	r16,r16,fp
  115248:	003f8c06 	br	11507c <__alt_data_end+0xfffd507c>
  11524c:	18bf762e 	bgeu	r3,r2,115028 <__alt_data_end+0xfffd5028>
  115250:	ad7fff84 	addi	r21,r21,-2
  115254:	1f07883a 	add	r3,r3,fp
  115258:	003f7406 	br	11502c <__alt_data_end+0xfffd502c>
  11525c:	1839883a 	mov	fp,r3
  115260:	003fdd06 	br	1151d8 <__alt_data_end+0xfffd51d8>
  115264:	182f883a 	mov	r23,r3
  115268:	003fc506 	br	115180 <__alt_data_end+0xfffd5180>
  11526c:	b5bfff84 	addi	r22,r22,-2
  115270:	3c4f883a 	add	r7,r7,r17
  115274:	003f1a06 	br	114ee0 <__alt_data_end+0xfffd4ee0>
  115278:	b5bfff84 	addi	r22,r22,-2
  11527c:	1c47883a 	add	r3,r3,r17
  115280:	003ebc06 	br	114d74 <__alt_data_end+0xfffd4d74>

00115284 <__umoddi3>:
  115284:	defff304 	addi	sp,sp,-52
  115288:	df000b15 	stw	fp,44(sp)
  11528c:	dc400415 	stw	r17,16(sp)
  115290:	dc000315 	stw	r16,12(sp)
  115294:	dfc00c15 	stw	ra,48(sp)
  115298:	ddc00a15 	stw	r23,40(sp)
  11529c:	dd800915 	stw	r22,36(sp)
  1152a0:	dd400815 	stw	r21,32(sp)
  1152a4:	dd000715 	stw	r20,28(sp)
  1152a8:	dcc00615 	stw	r19,24(sp)
  1152ac:	dc800515 	stw	r18,20(sp)
  1152b0:	2021883a 	mov	r16,r4
  1152b4:	2823883a 	mov	r17,r5
  1152b8:	2839883a 	mov	fp,r5
  1152bc:	3800401e 	bne	r7,zero,1153c0 <__umoddi3+0x13c>
  1152c0:	3027883a 	mov	r19,r6
  1152c4:	2029883a 	mov	r20,r4
  1152c8:	2980552e 	bgeu	r5,r6,115420 <__umoddi3+0x19c>
  1152cc:	00bfffd4 	movui	r2,65535
  1152d0:	1180a236 	bltu	r2,r6,11555c <__umoddi3+0x2d8>
  1152d4:	01003fc4 	movi	r4,255
  1152d8:	2189803a 	cmpltu	r4,r4,r6
  1152dc:	200890fa 	slli	r4,r4,3
  1152e0:	3104d83a 	srl	r2,r6,r4
  1152e4:	00c004b4 	movhi	r3,18
  1152e8:	18ce1484 	addi	r3,r3,14418
  1152ec:	1885883a 	add	r2,r3,r2
  1152f0:	10c00003 	ldbu	r3,0(r2)
  1152f4:	00800804 	movi	r2,32
  1152f8:	1909883a 	add	r4,r3,r4
  1152fc:	1125c83a 	sub	r18,r2,r4
  115300:	90000526 	beq	r18,zero,115318 <__umoddi3+0x94>
  115304:	8ca2983a 	sll	r17,r17,r18
  115308:	8108d83a 	srl	r4,r16,r4
  11530c:	34a6983a 	sll	r19,r6,r18
  115310:	84a8983a 	sll	r20,r16,r18
  115314:	2478b03a 	or	fp,r4,r17
  115318:	982cd43a 	srli	r22,r19,16
  11531c:	e009883a 	mov	r4,fp
  115320:	9dffffcc 	andi	r23,r19,65535
  115324:	b00b883a 	mov	r5,r22
  115328:	01159a40 	call	1159a4 <__umodsi3>
  11532c:	b00b883a 	mov	r5,r22
  115330:	e009883a 	mov	r4,fp
  115334:	102b883a 	mov	r21,r2
  115338:	01159400 	call	115940 <__udivsi3>
  11533c:	100b883a 	mov	r5,r2
  115340:	b809883a 	mov	r4,r23
  115344:	01159fc0 	call	1159fc <__mulsi3>
  115348:	a82a943a 	slli	r21,r21,16
  11534c:	a006d43a 	srli	r3,r20,16
  115350:	1d46b03a 	or	r3,r3,r21
  115354:	1880032e 	bgeu	r3,r2,115364 <__umoddi3+0xe0>
  115358:	1cc7883a 	add	r3,r3,r19
  11535c:	1cc00136 	bltu	r3,r19,115364 <__umoddi3+0xe0>
  115360:	18813136 	bltu	r3,r2,115828 <__umoddi3+0x5a4>
  115364:	18a1c83a 	sub	r16,r3,r2
  115368:	b00b883a 	mov	r5,r22
  11536c:	8009883a 	mov	r4,r16
  115370:	01159a40 	call	1159a4 <__umodsi3>
  115374:	b00b883a 	mov	r5,r22
  115378:	8009883a 	mov	r4,r16
  11537c:	1023883a 	mov	r17,r2
  115380:	01159400 	call	115940 <__udivsi3>
  115384:	100b883a 	mov	r5,r2
  115388:	b809883a 	mov	r4,r23
  11538c:	8822943a 	slli	r17,r17,16
  115390:	01159fc0 	call	1159fc <__mulsi3>
  115394:	a0ffffcc 	andi	r3,r20,65535
  115398:	1c46b03a 	or	r3,r3,r17
  11539c:	1880042e 	bgeu	r3,r2,1153b0 <__umoddi3+0x12c>
  1153a0:	1cc7883a 	add	r3,r3,r19
  1153a4:	1cc00236 	bltu	r3,r19,1153b0 <__umoddi3+0x12c>
  1153a8:	1880012e 	bgeu	r3,r2,1153b0 <__umoddi3+0x12c>
  1153ac:	1cc7883a 	add	r3,r3,r19
  1153b0:	1885c83a 	sub	r2,r3,r2
  1153b4:	1484d83a 	srl	r2,r2,r18
  1153b8:	0007883a 	mov	r3,zero
  1153bc:	00005306 	br	11550c <__umoddi3+0x288>
  1153c0:	29c05036 	bltu	r5,r7,115504 <__umoddi3+0x280>
  1153c4:	00bfffd4 	movui	r2,65535
  1153c8:	11c05c2e 	bgeu	r2,r7,11553c <__umoddi3+0x2b8>
  1153cc:	00804034 	movhi	r2,256
  1153d0:	10bfffc4 	addi	r2,r2,-1
  1153d4:	11c10636 	bltu	r2,r7,1157f0 <__umoddi3+0x56c>
  1153d8:	01000404 	movi	r4,16
  1153dc:	3904d83a 	srl	r2,r7,r4
  1153e0:	00c004b4 	movhi	r3,18
  1153e4:	18ce1484 	addi	r3,r3,14418
  1153e8:	1885883a 	add	r2,r3,r2
  1153ec:	14c00003 	ldbu	r19,0(r2)
  1153f0:	00c00804 	movi	r3,32
  1153f4:	9927883a 	add	r19,r19,r4
  1153f8:	1ce9c83a 	sub	r20,r3,r19
  1153fc:	a0005c1e 	bne	r20,zero,115570 <__umoddi3+0x2ec>
  115400:	3c400136 	bltu	r7,r17,115408 <__umoddi3+0x184>
  115404:	81810a36 	bltu	r16,r6,115830 <__umoddi3+0x5ac>
  115408:	8185c83a 	sub	r2,r16,r6
  11540c:	89e3c83a 	sub	r17,r17,r7
  115410:	8089803a 	cmpltu	r4,r16,r2
  115414:	8939c83a 	sub	fp,r17,r4
  115418:	e007883a 	mov	r3,fp
  11541c:	00003b06 	br	11550c <__umoddi3+0x288>
  115420:	3000041e 	bne	r6,zero,115434 <__umoddi3+0x1b0>
  115424:	000b883a 	mov	r5,zero
  115428:	01000044 	movi	r4,1
  11542c:	01159400 	call	115940 <__udivsi3>
  115430:	1027883a 	mov	r19,r2
  115434:	00bfffd4 	movui	r2,65535
  115438:	14c0442e 	bgeu	r2,r19,11554c <__umoddi3+0x2c8>
  11543c:	00804034 	movhi	r2,256
  115440:	10bfffc4 	addi	r2,r2,-1
  115444:	14c0ec36 	bltu	r2,r19,1157f8 <__umoddi3+0x574>
  115448:	00800404 	movi	r2,16
  11544c:	9886d83a 	srl	r3,r19,r2
  115450:	010004b4 	movhi	r4,18
  115454:	210e1484 	addi	r4,r4,14418
  115458:	20c7883a 	add	r3,r4,r3
  11545c:	18c00003 	ldbu	r3,0(r3)
  115460:	1887883a 	add	r3,r3,r2
  115464:	00800804 	movi	r2,32
  115468:	10e5c83a 	sub	r18,r2,r3
  11546c:	9000ab1e 	bne	r18,zero,11571c <__umoddi3+0x498>
  115470:	982cd43a 	srli	r22,r19,16
  115474:	8ce3c83a 	sub	r17,r17,r19
  115478:	9dffffcc 	andi	r23,r19,65535
  11547c:	b00b883a 	mov	r5,r22
  115480:	8809883a 	mov	r4,r17
  115484:	01159a40 	call	1159a4 <__umodsi3>
  115488:	b00b883a 	mov	r5,r22
  11548c:	8809883a 	mov	r4,r17
  115490:	102b883a 	mov	r21,r2
  115494:	01159400 	call	115940 <__udivsi3>
  115498:	b80b883a 	mov	r5,r23
  11549c:	1009883a 	mov	r4,r2
  1154a0:	01159fc0 	call	1159fc <__mulsi3>
  1154a4:	a82a943a 	slli	r21,r21,16
  1154a8:	a006d43a 	srli	r3,r20,16
  1154ac:	1d46b03a 	or	r3,r3,r21
  1154b0:	1880042e 	bgeu	r3,r2,1154c4 <__umoddi3+0x240>
  1154b4:	1cc7883a 	add	r3,r3,r19
  1154b8:	1cc00236 	bltu	r3,r19,1154c4 <__umoddi3+0x240>
  1154bc:	1880012e 	bgeu	r3,r2,1154c4 <__umoddi3+0x240>
  1154c0:	1cc7883a 	add	r3,r3,r19
  1154c4:	18a1c83a 	sub	r16,r3,r2
  1154c8:	b00b883a 	mov	r5,r22
  1154cc:	8009883a 	mov	r4,r16
  1154d0:	01159a40 	call	1159a4 <__umodsi3>
  1154d4:	1023883a 	mov	r17,r2
  1154d8:	b00b883a 	mov	r5,r22
  1154dc:	8009883a 	mov	r4,r16
  1154e0:	01159400 	call	115940 <__udivsi3>
  1154e4:	8822943a 	slli	r17,r17,16
  1154e8:	b80b883a 	mov	r5,r23
  1154ec:	1009883a 	mov	r4,r2
  1154f0:	01159fc0 	call	1159fc <__mulsi3>
  1154f4:	a53fffcc 	andi	r20,r20,65535
  1154f8:	a446b03a 	or	r3,r20,r17
  1154fc:	18bfac2e 	bgeu	r3,r2,1153b0 <__alt_data_end+0xfffd53b0>
  115500:	003fa706 	br	1153a0 <__alt_data_end+0xfffd53a0>
  115504:	2005883a 	mov	r2,r4
  115508:	2807883a 	mov	r3,r5
  11550c:	dfc00c17 	ldw	ra,48(sp)
  115510:	df000b17 	ldw	fp,44(sp)
  115514:	ddc00a17 	ldw	r23,40(sp)
  115518:	dd800917 	ldw	r22,36(sp)
  11551c:	dd400817 	ldw	r21,32(sp)
  115520:	dd000717 	ldw	r20,28(sp)
  115524:	dcc00617 	ldw	r19,24(sp)
  115528:	dc800517 	ldw	r18,20(sp)
  11552c:	dc400417 	ldw	r17,16(sp)
  115530:	dc000317 	ldw	r16,12(sp)
  115534:	dec00d04 	addi	sp,sp,52
  115538:	f800283a 	ret
  11553c:	04c03fc4 	movi	r19,255
  115540:	99c9803a 	cmpltu	r4,r19,r7
  115544:	200890fa 	slli	r4,r4,3
  115548:	003fa406 	br	1153dc <__alt_data_end+0xfffd53dc>
  11554c:	00803fc4 	movi	r2,255
  115550:	14c5803a 	cmpltu	r2,r2,r19
  115554:	100490fa 	slli	r2,r2,3
  115558:	003fbc06 	br	11544c <__alt_data_end+0xfffd544c>
  11555c:	00804034 	movhi	r2,256
  115560:	10bfffc4 	addi	r2,r2,-1
  115564:	1180a636 	bltu	r2,r6,115800 <__umoddi3+0x57c>
  115568:	01000404 	movi	r4,16
  11556c:	003f5c06 	br	1152e0 <__alt_data_end+0xfffd52e0>
  115570:	3d0e983a 	sll	r7,r7,r20
  115574:	34ead83a 	srl	r21,r6,r19
  115578:	8cc6d83a 	srl	r3,r17,r19
  11557c:	8d10983a 	sll	r8,r17,r20
  115580:	3d6ab03a 	or	r21,r7,r21
  115584:	a82cd43a 	srli	r22,r21,16
  115588:	84e2d83a 	srl	r17,r16,r19
  11558c:	1809883a 	mov	r4,r3
  115590:	b00b883a 	mov	r5,r22
  115594:	8a22b03a 	or	r17,r17,r8
  115598:	3524983a 	sll	r18,r6,r20
  11559c:	dc400015 	stw	r17,0(sp)
  1155a0:	d8c00115 	stw	r3,4(sp)
  1155a4:	01159a40 	call	1159a4 <__umodsi3>
  1155a8:	d8c00117 	ldw	r3,4(sp)
  1155ac:	b00b883a 	mov	r5,r22
  1155b0:	1039883a 	mov	fp,r2
  1155b4:	1809883a 	mov	r4,r3
  1155b8:	01159400 	call	115940 <__udivsi3>
  1155bc:	adffffcc 	andi	r23,r21,65535
  1155c0:	100b883a 	mov	r5,r2
  1155c4:	b809883a 	mov	r4,r23
  1155c8:	1023883a 	mov	r17,r2
  1155cc:	01159fc0 	call	1159fc <__mulsi3>
  1155d0:	d9400017 	ldw	r5,0(sp)
  1155d4:	e008943a 	slli	r4,fp,16
  1155d8:	8520983a 	sll	r16,r16,r20
  1155dc:	2806d43a 	srli	r3,r5,16
  1155e0:	1906b03a 	or	r3,r3,r4
  1155e4:	1880042e 	bgeu	r3,r2,1155f8 <__umoddi3+0x374>
  1155e8:	1d47883a 	add	r3,r3,r21
  1155ec:	893fffc4 	addi	r4,r17,-1
  1155f0:	1d40892e 	bgeu	r3,r21,115818 <__umoddi3+0x594>
  1155f4:	2023883a 	mov	r17,r4
  1155f8:	18b9c83a 	sub	fp,r3,r2
  1155fc:	b00b883a 	mov	r5,r22
  115600:	e009883a 	mov	r4,fp
  115604:	01159a40 	call	1159a4 <__umodsi3>
  115608:	b00b883a 	mov	r5,r22
  11560c:	e009883a 	mov	r4,fp
  115610:	d8800215 	stw	r2,8(sp)
  115614:	01159400 	call	115940 <__udivsi3>
  115618:	100b883a 	mov	r5,r2
  11561c:	b809883a 	mov	r4,r23
  115620:	102d883a 	mov	r22,r2
  115624:	01159fc0 	call	1159fc <__mulsi3>
  115628:	d9800217 	ldw	r6,8(sp)
  11562c:	d8c00017 	ldw	r3,0(sp)
  115630:	300c943a 	slli	r6,r6,16
  115634:	1a3fffcc 	andi	r8,r3,65535
  115638:	4190b03a 	or	r8,r8,r6
  11563c:	4080042e 	bgeu	r8,r2,115650 <__umoddi3+0x3cc>
  115640:	4551883a 	add	r8,r8,r21
  115644:	b0ffffc4 	addi	r3,r22,-1
  115648:	45406f2e 	bgeu	r8,r21,115808 <__umoddi3+0x584>
  11564c:	182d883a 	mov	r22,r3
  115650:	880e943a 	slli	r7,r17,16
  115654:	9006d43a 	srli	r3,r18,16
  115658:	91bfffcc 	andi	r6,r18,65535
  11565c:	3dacb03a 	or	r22,r7,r22
  115660:	b02ed43a 	srli	r23,r22,16
  115664:	b5bfffcc 	andi	r22,r22,65535
  115668:	300b883a 	mov	r5,r6
  11566c:	b009883a 	mov	r4,r22
  115670:	40a3c83a 	sub	r17,r8,r2
  115674:	d8c00115 	stw	r3,4(sp)
  115678:	d9800215 	stw	r6,8(sp)
  11567c:	01159fc0 	call	1159fc <__mulsi3>
  115680:	d9800217 	ldw	r6,8(sp)
  115684:	b809883a 	mov	r4,r23
  115688:	1039883a 	mov	fp,r2
  11568c:	300b883a 	mov	r5,r6
  115690:	01159fc0 	call	1159fc <__mulsi3>
  115694:	d8c00117 	ldw	r3,4(sp)
  115698:	b809883a 	mov	r4,r23
  11569c:	d8800215 	stw	r2,8(sp)
  1156a0:	180b883a 	mov	r5,r3
  1156a4:	01159fc0 	call	1159fc <__mulsi3>
  1156a8:	d8c00117 	ldw	r3,4(sp)
  1156ac:	b009883a 	mov	r4,r22
  1156b0:	102f883a 	mov	r23,r2
  1156b4:	180b883a 	mov	r5,r3
  1156b8:	01159fc0 	call	1159fc <__mulsi3>
  1156bc:	d9800217 	ldw	r6,8(sp)
  1156c0:	e006d43a 	srli	r3,fp,16
  1156c4:	1185883a 	add	r2,r2,r6
  1156c8:	1885883a 	add	r2,r3,r2
  1156cc:	1180022e 	bgeu	r2,r6,1156d8 <__umoddi3+0x454>
  1156d0:	00c00074 	movhi	r3,1
  1156d4:	b8ef883a 	add	r23,r23,r3
  1156d8:	1006d43a 	srli	r3,r2,16
  1156dc:	1004943a 	slli	r2,r2,16
  1156e0:	e73fffcc 	andi	fp,fp,65535
  1156e4:	1dc7883a 	add	r3,r3,r23
  1156e8:	1739883a 	add	fp,r2,fp
  1156ec:	88c03a36 	bltu	r17,r3,1157d8 <__umoddi3+0x554>
  1156f0:	88c05126 	beq	r17,r3,115838 <__umoddi3+0x5b4>
  1156f4:	88c9c83a 	sub	r4,r17,r3
  1156f8:	e00f883a 	mov	r7,fp
  1156fc:	81cfc83a 	sub	r7,r16,r7
  115700:	81c7803a 	cmpltu	r3,r16,r7
  115704:	20c7c83a 	sub	r3,r4,r3
  115708:	1cc4983a 	sll	r2,r3,r19
  11570c:	3d0ed83a 	srl	r7,r7,r20
  115710:	1d06d83a 	srl	r3,r3,r20
  115714:	11c4b03a 	or	r2,r2,r7
  115718:	003f7c06 	br	11550c <__alt_data_end+0xfffd550c>
  11571c:	9ca6983a 	sll	r19,r19,r18
  115720:	88f8d83a 	srl	fp,r17,r3
  115724:	80c4d83a 	srl	r2,r16,r3
  115728:	982cd43a 	srli	r22,r19,16
  11572c:	8ca2983a 	sll	r17,r17,r18
  115730:	e009883a 	mov	r4,fp
  115734:	b00b883a 	mov	r5,r22
  115738:	146ab03a 	or	r21,r2,r17
  11573c:	01159a40 	call	1159a4 <__umodsi3>
  115740:	b00b883a 	mov	r5,r22
  115744:	e009883a 	mov	r4,fp
  115748:	1029883a 	mov	r20,r2
  11574c:	9dffffcc 	andi	r23,r19,65535
  115750:	01159400 	call	115940 <__udivsi3>
  115754:	b809883a 	mov	r4,r23
  115758:	100b883a 	mov	r5,r2
  11575c:	01159fc0 	call	1159fc <__mulsi3>
  115760:	a008943a 	slli	r4,r20,16
  115764:	a806d43a 	srli	r3,r21,16
  115768:	84a8983a 	sll	r20,r16,r18
  11576c:	1906b03a 	or	r3,r3,r4
  115770:	1880042e 	bgeu	r3,r2,115784 <__umoddi3+0x500>
  115774:	1cc7883a 	add	r3,r3,r19
  115778:	1cc00236 	bltu	r3,r19,115784 <__umoddi3+0x500>
  11577c:	1880012e 	bgeu	r3,r2,115784 <__umoddi3+0x500>
  115780:	1cc7883a 	add	r3,r3,r19
  115784:	18a3c83a 	sub	r17,r3,r2
  115788:	b00b883a 	mov	r5,r22
  11578c:	8809883a 	mov	r4,r17
  115790:	01159a40 	call	1159a4 <__umodsi3>
  115794:	b00b883a 	mov	r5,r22
  115798:	8809883a 	mov	r4,r17
  11579c:	1021883a 	mov	r16,r2
  1157a0:	01159400 	call	115940 <__udivsi3>
  1157a4:	100b883a 	mov	r5,r2
  1157a8:	b809883a 	mov	r4,r23
  1157ac:	8020943a 	slli	r16,r16,16
  1157b0:	01159fc0 	call	1159fc <__mulsi3>
  1157b4:	a8ffffcc 	andi	r3,r21,65535
  1157b8:	1c06b03a 	or	r3,r3,r16
  1157bc:	1880042e 	bgeu	r3,r2,1157d0 <__umoddi3+0x54c>
  1157c0:	1cc7883a 	add	r3,r3,r19
  1157c4:	1cc00236 	bltu	r3,r19,1157d0 <__umoddi3+0x54c>
  1157c8:	1880012e 	bgeu	r3,r2,1157d0 <__umoddi3+0x54c>
  1157cc:	1cc7883a 	add	r3,r3,r19
  1157d0:	18a3c83a 	sub	r17,r3,r2
  1157d4:	003f2906 	br	11547c <__alt_data_end+0xfffd547c>
  1157d8:	e48fc83a 	sub	r7,fp,r18
  1157dc:	1d49c83a 	sub	r4,r3,r21
  1157e0:	e1f9803a 	cmpltu	fp,fp,r7
  1157e4:	2739c83a 	sub	fp,r4,fp
  1157e8:	8f09c83a 	sub	r4,r17,fp
  1157ec:	003fc306 	br	1156fc <__alt_data_end+0xfffd56fc>
  1157f0:	01000604 	movi	r4,24
  1157f4:	003ef906 	br	1153dc <__alt_data_end+0xfffd53dc>
  1157f8:	00800604 	movi	r2,24
  1157fc:	003f1306 	br	11544c <__alt_data_end+0xfffd544c>
  115800:	01000604 	movi	r4,24
  115804:	003eb606 	br	1152e0 <__alt_data_end+0xfffd52e0>
  115808:	40bf902e 	bgeu	r8,r2,11564c <__alt_data_end+0xfffd564c>
  11580c:	b5bfff84 	addi	r22,r22,-2
  115810:	4551883a 	add	r8,r8,r21
  115814:	003f8e06 	br	115650 <__alt_data_end+0xfffd5650>
  115818:	18bf762e 	bgeu	r3,r2,1155f4 <__alt_data_end+0xfffd55f4>
  11581c:	8c7fff84 	addi	r17,r17,-2
  115820:	1d47883a 	add	r3,r3,r21
  115824:	003f7406 	br	1155f8 <__alt_data_end+0xfffd55f8>
  115828:	1cc7883a 	add	r3,r3,r19
  11582c:	003ecd06 	br	115364 <__alt_data_end+0xfffd5364>
  115830:	8005883a 	mov	r2,r16
  115834:	003ef806 	br	115418 <__alt_data_end+0xfffd5418>
  115838:	873fe736 	bltu	r16,fp,1157d8 <__alt_data_end+0xfffd57d8>
  11583c:	e00f883a 	mov	r7,fp
  115840:	0009883a 	mov	r4,zero
  115844:	003fad06 	br	1156fc <__alt_data_end+0xfffd56fc>

00115848 <__divsi3>:
  115848:	20001b16 	blt	r4,zero,1158b8 <__divsi3+0x70>
  11584c:	000f883a 	mov	r7,zero
  115850:	28001616 	blt	r5,zero,1158ac <__divsi3+0x64>
  115854:	200d883a 	mov	r6,r4
  115858:	29001a2e 	bgeu	r5,r4,1158c4 <__divsi3+0x7c>
  11585c:	00800804 	movi	r2,32
  115860:	00c00044 	movi	r3,1
  115864:	00000106 	br	11586c <__divsi3+0x24>
  115868:	10000d26 	beq	r2,zero,1158a0 <__divsi3+0x58>
  11586c:	294b883a 	add	r5,r5,r5
  115870:	10bfffc4 	addi	r2,r2,-1
  115874:	18c7883a 	add	r3,r3,r3
  115878:	293ffb36 	bltu	r5,r4,115868 <__alt_data_end+0xfffd5868>
  11587c:	0005883a 	mov	r2,zero
  115880:	18000726 	beq	r3,zero,1158a0 <__divsi3+0x58>
  115884:	0005883a 	mov	r2,zero
  115888:	31400236 	bltu	r6,r5,115894 <__divsi3+0x4c>
  11588c:	314dc83a 	sub	r6,r6,r5
  115890:	10c4b03a 	or	r2,r2,r3
  115894:	1806d07a 	srli	r3,r3,1
  115898:	280ad07a 	srli	r5,r5,1
  11589c:	183ffa1e 	bne	r3,zero,115888 <__alt_data_end+0xfffd5888>
  1158a0:	38000126 	beq	r7,zero,1158a8 <__divsi3+0x60>
  1158a4:	0085c83a 	sub	r2,zero,r2
  1158a8:	f800283a 	ret
  1158ac:	014bc83a 	sub	r5,zero,r5
  1158b0:	39c0005c 	xori	r7,r7,1
  1158b4:	003fe706 	br	115854 <__alt_data_end+0xfffd5854>
  1158b8:	0109c83a 	sub	r4,zero,r4
  1158bc:	01c00044 	movi	r7,1
  1158c0:	003fe306 	br	115850 <__alt_data_end+0xfffd5850>
  1158c4:	00c00044 	movi	r3,1
  1158c8:	003fee06 	br	115884 <__alt_data_end+0xfffd5884>

001158cc <__modsi3>:
  1158cc:	20001716 	blt	r4,zero,11592c <__modsi3+0x60>
  1158d0:	000f883a 	mov	r7,zero
  1158d4:	2005883a 	mov	r2,r4
  1158d8:	28001216 	blt	r5,zero,115924 <__modsi3+0x58>
  1158dc:	2900162e 	bgeu	r5,r4,115938 <__modsi3+0x6c>
  1158e0:	01800804 	movi	r6,32
  1158e4:	00c00044 	movi	r3,1
  1158e8:	00000106 	br	1158f0 <__modsi3+0x24>
  1158ec:	30000a26 	beq	r6,zero,115918 <__modsi3+0x4c>
  1158f0:	294b883a 	add	r5,r5,r5
  1158f4:	31bfffc4 	addi	r6,r6,-1
  1158f8:	18c7883a 	add	r3,r3,r3
  1158fc:	293ffb36 	bltu	r5,r4,1158ec <__alt_data_end+0xfffd58ec>
  115900:	18000526 	beq	r3,zero,115918 <__modsi3+0x4c>
  115904:	1806d07a 	srli	r3,r3,1
  115908:	11400136 	bltu	r2,r5,115910 <__modsi3+0x44>
  11590c:	1145c83a 	sub	r2,r2,r5
  115910:	280ad07a 	srli	r5,r5,1
  115914:	183ffb1e 	bne	r3,zero,115904 <__alt_data_end+0xfffd5904>
  115918:	38000126 	beq	r7,zero,115920 <__modsi3+0x54>
  11591c:	0085c83a 	sub	r2,zero,r2
  115920:	f800283a 	ret
  115924:	014bc83a 	sub	r5,zero,r5
  115928:	003fec06 	br	1158dc <__alt_data_end+0xfffd58dc>
  11592c:	0109c83a 	sub	r4,zero,r4
  115930:	01c00044 	movi	r7,1
  115934:	003fe706 	br	1158d4 <__alt_data_end+0xfffd58d4>
  115938:	00c00044 	movi	r3,1
  11593c:	003ff106 	br	115904 <__alt_data_end+0xfffd5904>

00115940 <__udivsi3>:
  115940:	200d883a 	mov	r6,r4
  115944:	2900152e 	bgeu	r5,r4,11599c <__udivsi3+0x5c>
  115948:	28001416 	blt	r5,zero,11599c <__udivsi3+0x5c>
  11594c:	00800804 	movi	r2,32
  115950:	00c00044 	movi	r3,1
  115954:	00000206 	br	115960 <__udivsi3+0x20>
  115958:	10000e26 	beq	r2,zero,115994 <__udivsi3+0x54>
  11595c:	28000516 	blt	r5,zero,115974 <__udivsi3+0x34>
  115960:	294b883a 	add	r5,r5,r5
  115964:	10bfffc4 	addi	r2,r2,-1
  115968:	18c7883a 	add	r3,r3,r3
  11596c:	293ffa36 	bltu	r5,r4,115958 <__alt_data_end+0xfffd5958>
  115970:	18000826 	beq	r3,zero,115994 <__udivsi3+0x54>
  115974:	0005883a 	mov	r2,zero
  115978:	31400236 	bltu	r6,r5,115984 <__udivsi3+0x44>
  11597c:	314dc83a 	sub	r6,r6,r5
  115980:	10c4b03a 	or	r2,r2,r3
  115984:	1806d07a 	srli	r3,r3,1
  115988:	280ad07a 	srli	r5,r5,1
  11598c:	183ffa1e 	bne	r3,zero,115978 <__alt_data_end+0xfffd5978>
  115990:	f800283a 	ret
  115994:	0005883a 	mov	r2,zero
  115998:	f800283a 	ret
  11599c:	00c00044 	movi	r3,1
  1159a0:	003ff406 	br	115974 <__alt_data_end+0xfffd5974>

001159a4 <__umodsi3>:
  1159a4:	2005883a 	mov	r2,r4
  1159a8:	2900122e 	bgeu	r5,r4,1159f4 <__umodsi3+0x50>
  1159ac:	28001116 	blt	r5,zero,1159f4 <__umodsi3+0x50>
  1159b0:	01800804 	movi	r6,32
  1159b4:	00c00044 	movi	r3,1
  1159b8:	00000206 	br	1159c4 <__umodsi3+0x20>
  1159bc:	30000c26 	beq	r6,zero,1159f0 <__umodsi3+0x4c>
  1159c0:	28000516 	blt	r5,zero,1159d8 <__umodsi3+0x34>
  1159c4:	294b883a 	add	r5,r5,r5
  1159c8:	31bfffc4 	addi	r6,r6,-1
  1159cc:	18c7883a 	add	r3,r3,r3
  1159d0:	293ffa36 	bltu	r5,r4,1159bc <__alt_data_end+0xfffd59bc>
  1159d4:	18000626 	beq	r3,zero,1159f0 <__umodsi3+0x4c>
  1159d8:	1806d07a 	srli	r3,r3,1
  1159dc:	11400136 	bltu	r2,r5,1159e4 <__umodsi3+0x40>
  1159e0:	1145c83a 	sub	r2,r2,r5
  1159e4:	280ad07a 	srli	r5,r5,1
  1159e8:	183ffb1e 	bne	r3,zero,1159d8 <__alt_data_end+0xfffd59d8>
  1159ec:	f800283a 	ret
  1159f0:	f800283a 	ret
  1159f4:	00c00044 	movi	r3,1
  1159f8:	003ff706 	br	1159d8 <__alt_data_end+0xfffd59d8>

001159fc <__mulsi3>:
  1159fc:	0005883a 	mov	r2,zero
  115a00:	20000726 	beq	r4,zero,115a20 <__mulsi3+0x24>
  115a04:	20c0004c 	andi	r3,r4,1
  115a08:	2008d07a 	srli	r4,r4,1
  115a0c:	18000126 	beq	r3,zero,115a14 <__mulsi3+0x18>
  115a10:	1145883a 	add	r2,r2,r5
  115a14:	294b883a 	add	r5,r5,r5
  115a18:	203ffa1e 	bne	r4,zero,115a04 <__alt_data_end+0xfffd5a04>
  115a1c:	f800283a 	ret
  115a20:	f800283a 	ret

00115a24 <__eqsf2>:
  115a24:	2006d5fa 	srli	r3,r4,23
  115a28:	280cd5fa 	srli	r6,r5,23
  115a2c:	01c02034 	movhi	r7,128
  115a30:	39ffffc4 	addi	r7,r7,-1
  115a34:	18c03fcc 	andi	r3,r3,255
  115a38:	02003fc4 	movi	r8,255
  115a3c:	3904703a 	and	r2,r7,r4
  115a40:	31803fcc 	andi	r6,r6,255
  115a44:	394e703a 	and	r7,r7,r5
  115a48:	2008d7fa 	srli	r4,r4,31
  115a4c:	280ad7fa 	srli	r5,r5,31
  115a50:	1a000d26 	beq	r3,r8,115a88 <__eqsf2+0x64>
  115a54:	02003fc4 	movi	r8,255
  115a58:	32000826 	beq	r6,r8,115a7c <__eqsf2+0x58>
  115a5c:	19800226 	beq	r3,r6,115a68 <__eqsf2+0x44>
  115a60:	00800044 	movi	r2,1
  115a64:	f800283a 	ret
  115a68:	11fffd1e 	bne	r2,r7,115a60 <__alt_data_end+0xfffd5a60>
  115a6c:	21400926 	beq	r4,r5,115a94 <__eqsf2+0x70>
  115a70:	183ffb1e 	bne	r3,zero,115a60 <__alt_data_end+0xfffd5a60>
  115a74:	1004c03a 	cmpne	r2,r2,zero
  115a78:	f800283a 	ret
  115a7c:	383ff726 	beq	r7,zero,115a5c <__alt_data_end+0xfffd5a5c>
  115a80:	00800044 	movi	r2,1
  115a84:	f800283a 	ret
  115a88:	103ff226 	beq	r2,zero,115a54 <__alt_data_end+0xfffd5a54>
  115a8c:	00800044 	movi	r2,1
  115a90:	f800283a 	ret
  115a94:	0005883a 	mov	r2,zero
  115a98:	f800283a 	ret

00115a9c <__gesf2>:
  115a9c:	2004d5fa 	srli	r2,r4,23
  115aa0:	2806d5fa 	srli	r3,r5,23
  115aa4:	01802034 	movhi	r6,128
  115aa8:	31bfffc4 	addi	r6,r6,-1
  115aac:	10803fcc 	andi	r2,r2,255
  115ab0:	01c03fc4 	movi	r7,255
  115ab4:	3110703a 	and	r8,r6,r4
  115ab8:	18c03fcc 	andi	r3,r3,255
  115abc:	314c703a 	and	r6,r6,r5
  115ac0:	2008d7fa 	srli	r4,r4,31
  115ac4:	280ad7fa 	srli	r5,r5,31
  115ac8:	11c01926 	beq	r2,r7,115b30 <__gesf2+0x94>
  115acc:	01c03fc4 	movi	r7,255
  115ad0:	19c00f26 	beq	r3,r7,115b10 <__gesf2+0x74>
  115ad4:	1000061e 	bne	r2,zero,115af0 <__gesf2+0x54>
  115ad8:	400f003a 	cmpeq	r7,r8,zero
  115adc:	1800071e 	bne	r3,zero,115afc <__gesf2+0x60>
  115ae0:	3000061e 	bne	r6,zero,115afc <__gesf2+0x60>
  115ae4:	0005883a 	mov	r2,zero
  115ae8:	40000e1e 	bne	r8,zero,115b24 <__gesf2+0x88>
  115aec:	f800283a 	ret
  115af0:	18000a1e 	bne	r3,zero,115b1c <__gesf2+0x80>
  115af4:	30000b26 	beq	r6,zero,115b24 <__gesf2+0x88>
  115af8:	000f883a 	mov	r7,zero
  115afc:	29403fcc 	andi	r5,r5,255
  115b00:	38000726 	beq	r7,zero,115b20 <__gesf2+0x84>
  115b04:	28000826 	beq	r5,zero,115b28 <__gesf2+0x8c>
  115b08:	00800044 	movi	r2,1
  115b0c:	f800283a 	ret
  115b10:	303ff026 	beq	r6,zero,115ad4 <__alt_data_end+0xfffd5ad4>
  115b14:	00bfff84 	movi	r2,-2
  115b18:	f800283a 	ret
  115b1c:	29403fcc 	andi	r5,r5,255
  115b20:	21400526 	beq	r4,r5,115b38 <__gesf2+0x9c>
  115b24:	203ff826 	beq	r4,zero,115b08 <__alt_data_end+0xfffd5b08>
  115b28:	00bfffc4 	movi	r2,-1
  115b2c:	f800283a 	ret
  115b30:	403fe626 	beq	r8,zero,115acc <__alt_data_end+0xfffd5acc>
  115b34:	003ff706 	br	115b14 <__alt_data_end+0xfffd5b14>
  115b38:	18bffa16 	blt	r3,r2,115b24 <__alt_data_end+0xfffd5b24>
  115b3c:	10c00216 	blt	r2,r3,115b48 <__gesf2+0xac>
  115b40:	323ff836 	bltu	r6,r8,115b24 <__alt_data_end+0xfffd5b24>
  115b44:	4180022e 	bgeu	r8,r6,115b50 <__gesf2+0xb4>
  115b48:	203fef1e 	bne	r4,zero,115b08 <__alt_data_end+0xfffd5b08>
  115b4c:	003ff606 	br	115b28 <__alt_data_end+0xfffd5b28>
  115b50:	0005883a 	mov	r2,zero
  115b54:	f800283a 	ret

00115b58 <__lesf2>:
  115b58:	2004d5fa 	srli	r2,r4,23
  115b5c:	280cd5fa 	srli	r6,r5,23
  115b60:	00c02034 	movhi	r3,128
  115b64:	18ffffc4 	addi	r3,r3,-1
  115b68:	10803fcc 	andi	r2,r2,255
  115b6c:	01c03fc4 	movi	r7,255
  115b70:	1910703a 	and	r8,r3,r4
  115b74:	31803fcc 	andi	r6,r6,255
  115b78:	1946703a 	and	r3,r3,r5
  115b7c:	2008d7fa 	srli	r4,r4,31
  115b80:	280ad7fa 	srli	r5,r5,31
  115b84:	11c01b26 	beq	r2,r7,115bf4 <__lesf2+0x9c>
  115b88:	01c03fc4 	movi	r7,255
  115b8c:	31c01126 	beq	r6,r7,115bd4 <__lesf2+0x7c>
  115b90:	1000071e 	bne	r2,zero,115bb0 <__lesf2+0x58>
  115b94:	400f003a 	cmpeq	r7,r8,zero
  115b98:	21003fcc 	andi	r4,r4,255
  115b9c:	3000081e 	bne	r6,zero,115bc0 <__lesf2+0x68>
  115ba0:	1800071e 	bne	r3,zero,115bc0 <__lesf2+0x68>
  115ba4:	0005883a 	mov	r2,zero
  115ba8:	40000f1e 	bne	r8,zero,115be8 <__lesf2+0x90>
  115bac:	f800283a 	ret
  115bb0:	21003fcc 	andi	r4,r4,255
  115bb4:	30000a1e 	bne	r6,zero,115be0 <__lesf2+0x88>
  115bb8:	18000b26 	beq	r3,zero,115be8 <__lesf2+0x90>
  115bbc:	000f883a 	mov	r7,zero
  115bc0:	29403fcc 	andi	r5,r5,255
  115bc4:	38000726 	beq	r7,zero,115be4 <__lesf2+0x8c>
  115bc8:	28000826 	beq	r5,zero,115bec <__lesf2+0x94>
  115bcc:	00800044 	movi	r2,1
  115bd0:	f800283a 	ret
  115bd4:	183fee26 	beq	r3,zero,115b90 <__alt_data_end+0xfffd5b90>
  115bd8:	00800084 	movi	r2,2
  115bdc:	f800283a 	ret
  115be0:	29403fcc 	andi	r5,r5,255
  115be4:	21400626 	beq	r4,r5,115c00 <__lesf2+0xa8>
  115be8:	203ff826 	beq	r4,zero,115bcc <__alt_data_end+0xfffd5bcc>
  115bec:	00bfffc4 	movi	r2,-1
  115bf0:	f800283a 	ret
  115bf4:	403fe426 	beq	r8,zero,115b88 <__alt_data_end+0xfffd5b88>
  115bf8:	00800084 	movi	r2,2
  115bfc:	f800283a 	ret
  115c00:	30bff916 	blt	r6,r2,115be8 <__alt_data_end+0xfffd5be8>
  115c04:	11800216 	blt	r2,r6,115c10 <__lesf2+0xb8>
  115c08:	1a3ff736 	bltu	r3,r8,115be8 <__alt_data_end+0xfffd5be8>
  115c0c:	40c0022e 	bgeu	r8,r3,115c18 <__lesf2+0xc0>
  115c10:	203fee1e 	bne	r4,zero,115bcc <__alt_data_end+0xfffd5bcc>
  115c14:	003ff506 	br	115bec <__alt_data_end+0xfffd5bec>
  115c18:	0005883a 	mov	r2,zero
  115c1c:	f800283a 	ret

00115c20 <__adddf3>:
  115c20:	02c00434 	movhi	r11,16
  115c24:	5affffc4 	addi	r11,r11,-1
  115c28:	2806d7fa 	srli	r3,r5,31
  115c2c:	2ad4703a 	and	r10,r5,r11
  115c30:	3ad2703a 	and	r9,r7,r11
  115c34:	3804d53a 	srli	r2,r7,20
  115c38:	3018d77a 	srli	r12,r6,29
  115c3c:	280ad53a 	srli	r5,r5,20
  115c40:	501490fa 	slli	r10,r10,3
  115c44:	2010d77a 	srli	r8,r4,29
  115c48:	481290fa 	slli	r9,r9,3
  115c4c:	380ed7fa 	srli	r7,r7,31
  115c50:	defffb04 	addi	sp,sp,-20
  115c54:	dc800215 	stw	r18,8(sp)
  115c58:	dc400115 	stw	r17,4(sp)
  115c5c:	dc000015 	stw	r16,0(sp)
  115c60:	dfc00415 	stw	ra,16(sp)
  115c64:	dcc00315 	stw	r19,12(sp)
  115c68:	1c803fcc 	andi	r18,r3,255
  115c6c:	2c01ffcc 	andi	r16,r5,2047
  115c70:	5210b03a 	or	r8,r10,r8
  115c74:	202290fa 	slli	r17,r4,3
  115c78:	1081ffcc 	andi	r2,r2,2047
  115c7c:	4b12b03a 	or	r9,r9,r12
  115c80:	300c90fa 	slli	r6,r6,3
  115c84:	91c07526 	beq	r18,r7,115e5c <__adddf3+0x23c>
  115c88:	8087c83a 	sub	r3,r16,r2
  115c8c:	00c0ab0e 	bge	zero,r3,115f3c <__adddf3+0x31c>
  115c90:	10002a1e 	bne	r2,zero,115d3c <__adddf3+0x11c>
  115c94:	4984b03a 	or	r2,r9,r6
  115c98:	1000961e 	bne	r2,zero,115ef4 <__adddf3+0x2d4>
  115c9c:	888001cc 	andi	r2,r17,7
  115ca0:	10000726 	beq	r2,zero,115cc0 <__adddf3+0xa0>
  115ca4:	888003cc 	andi	r2,r17,15
  115ca8:	00c00104 	movi	r3,4
  115cac:	10c00426 	beq	r2,r3,115cc0 <__adddf3+0xa0>
  115cb0:	88c7883a 	add	r3,r17,r3
  115cb4:	1c63803a 	cmpltu	r17,r3,r17
  115cb8:	4451883a 	add	r8,r8,r17
  115cbc:	1823883a 	mov	r17,r3
  115cc0:	4080202c 	andhi	r2,r8,128
  115cc4:	10005926 	beq	r2,zero,115e2c <__adddf3+0x20c>
  115cc8:	84000044 	addi	r16,r16,1
  115ccc:	0081ffc4 	movi	r2,2047
  115cd0:	8080ba26 	beq	r16,r2,115fbc <__adddf3+0x39c>
  115cd4:	00bfe034 	movhi	r2,65408
  115cd8:	10bfffc4 	addi	r2,r2,-1
  115cdc:	4090703a 	and	r8,r8,r2
  115ce0:	4004977a 	slli	r2,r8,29
  115ce4:	4010927a 	slli	r8,r8,9
  115ce8:	8822d0fa 	srli	r17,r17,3
  115cec:	8401ffcc 	andi	r16,r16,2047
  115cf0:	4010d33a 	srli	r8,r8,12
  115cf4:	9007883a 	mov	r3,r18
  115cf8:	1444b03a 	or	r2,r2,r17
  115cfc:	8401ffcc 	andi	r16,r16,2047
  115d00:	8020953a 	slli	r16,r16,20
  115d04:	18c03fcc 	andi	r3,r3,255
  115d08:	01000434 	movhi	r4,16
  115d0c:	213fffc4 	addi	r4,r4,-1
  115d10:	180697fa 	slli	r3,r3,31
  115d14:	4110703a 	and	r8,r8,r4
  115d18:	4410b03a 	or	r8,r8,r16
  115d1c:	40c6b03a 	or	r3,r8,r3
  115d20:	dfc00417 	ldw	ra,16(sp)
  115d24:	dcc00317 	ldw	r19,12(sp)
  115d28:	dc800217 	ldw	r18,8(sp)
  115d2c:	dc400117 	ldw	r17,4(sp)
  115d30:	dc000017 	ldw	r16,0(sp)
  115d34:	dec00504 	addi	sp,sp,20
  115d38:	f800283a 	ret
  115d3c:	0081ffc4 	movi	r2,2047
  115d40:	80bfd626 	beq	r16,r2,115c9c <__alt_data_end+0xfffd5c9c>
  115d44:	4a402034 	orhi	r9,r9,128
  115d48:	00800e04 	movi	r2,56
  115d4c:	10c09f16 	blt	r2,r3,115fcc <__adddf3+0x3ac>
  115d50:	008007c4 	movi	r2,31
  115d54:	10c0c216 	blt	r2,r3,116060 <__adddf3+0x440>
  115d58:	00800804 	movi	r2,32
  115d5c:	10c5c83a 	sub	r2,r2,r3
  115d60:	488a983a 	sll	r5,r9,r2
  115d64:	30c8d83a 	srl	r4,r6,r3
  115d68:	3084983a 	sll	r2,r6,r2
  115d6c:	48c6d83a 	srl	r3,r9,r3
  115d70:	290cb03a 	or	r6,r5,r4
  115d74:	1004c03a 	cmpne	r2,r2,zero
  115d78:	308cb03a 	or	r6,r6,r2
  115d7c:	898dc83a 	sub	r6,r17,r6
  115d80:	89a3803a 	cmpltu	r17,r17,r6
  115d84:	40d1c83a 	sub	r8,r8,r3
  115d88:	4451c83a 	sub	r8,r8,r17
  115d8c:	3023883a 	mov	r17,r6
  115d90:	4080202c 	andhi	r2,r8,128
  115d94:	10002326 	beq	r2,zero,115e24 <__adddf3+0x204>
  115d98:	04c02034 	movhi	r19,128
  115d9c:	9cffffc4 	addi	r19,r19,-1
  115da0:	44e6703a 	and	r19,r8,r19
  115da4:	98007626 	beq	r19,zero,115f80 <__adddf3+0x360>
  115da8:	9809883a 	mov	r4,r19
  115dac:	01186080 	call	118608 <__clzsi2>
  115db0:	10fffe04 	addi	r3,r2,-8
  115db4:	010007c4 	movi	r4,31
  115db8:	20c07716 	blt	r4,r3,115f98 <__adddf3+0x378>
  115dbc:	00800804 	movi	r2,32
  115dc0:	10c5c83a 	sub	r2,r2,r3
  115dc4:	8884d83a 	srl	r2,r17,r2
  115dc8:	98d0983a 	sll	r8,r19,r3
  115dcc:	88e2983a 	sll	r17,r17,r3
  115dd0:	1204b03a 	or	r2,r2,r8
  115dd4:	1c007416 	blt	r3,r16,115fa8 <__adddf3+0x388>
  115dd8:	1c21c83a 	sub	r16,r3,r16
  115ddc:	82000044 	addi	r8,r16,1
  115de0:	00c007c4 	movi	r3,31
  115de4:	1a009116 	blt	r3,r8,11602c <__adddf3+0x40c>
  115de8:	00c00804 	movi	r3,32
  115dec:	1a07c83a 	sub	r3,r3,r8
  115df0:	8a08d83a 	srl	r4,r17,r8
  115df4:	88e2983a 	sll	r17,r17,r3
  115df8:	10c6983a 	sll	r3,r2,r3
  115dfc:	1210d83a 	srl	r8,r2,r8
  115e00:	8804c03a 	cmpne	r2,r17,zero
  115e04:	1906b03a 	or	r3,r3,r4
  115e08:	18a2b03a 	or	r17,r3,r2
  115e0c:	0021883a 	mov	r16,zero
  115e10:	003fa206 	br	115c9c <__alt_data_end+0xfffd5c9c>
  115e14:	1890b03a 	or	r8,r3,r2
  115e18:	40017d26 	beq	r8,zero,116410 <__adddf3+0x7f0>
  115e1c:	1011883a 	mov	r8,r2
  115e20:	1823883a 	mov	r17,r3
  115e24:	888001cc 	andi	r2,r17,7
  115e28:	103f9e1e 	bne	r2,zero,115ca4 <__alt_data_end+0xfffd5ca4>
  115e2c:	4004977a 	slli	r2,r8,29
  115e30:	8822d0fa 	srli	r17,r17,3
  115e34:	4010d0fa 	srli	r8,r8,3
  115e38:	9007883a 	mov	r3,r18
  115e3c:	1444b03a 	or	r2,r2,r17
  115e40:	0101ffc4 	movi	r4,2047
  115e44:	81002426 	beq	r16,r4,115ed8 <__adddf3+0x2b8>
  115e48:	8120703a 	and	r16,r16,r4
  115e4c:	01000434 	movhi	r4,16
  115e50:	213fffc4 	addi	r4,r4,-1
  115e54:	4110703a 	and	r8,r8,r4
  115e58:	003fa806 	br	115cfc <__alt_data_end+0xfffd5cfc>
  115e5c:	8089c83a 	sub	r4,r16,r2
  115e60:	01005e0e 	bge	zero,r4,115fdc <__adddf3+0x3bc>
  115e64:	10002b26 	beq	r2,zero,115f14 <__adddf3+0x2f4>
  115e68:	0081ffc4 	movi	r2,2047
  115e6c:	80bf8b26 	beq	r16,r2,115c9c <__alt_data_end+0xfffd5c9c>
  115e70:	4a402034 	orhi	r9,r9,128
  115e74:	00800e04 	movi	r2,56
  115e78:	1100a40e 	bge	r2,r4,11610c <__adddf3+0x4ec>
  115e7c:	498cb03a 	or	r6,r9,r6
  115e80:	300ac03a 	cmpne	r5,r6,zero
  115e84:	0013883a 	mov	r9,zero
  115e88:	2c4b883a 	add	r5,r5,r17
  115e8c:	2c63803a 	cmpltu	r17,r5,r17
  115e90:	4a11883a 	add	r8,r9,r8
  115e94:	8a11883a 	add	r8,r17,r8
  115e98:	2823883a 	mov	r17,r5
  115e9c:	4080202c 	andhi	r2,r8,128
  115ea0:	103fe026 	beq	r2,zero,115e24 <__alt_data_end+0xfffd5e24>
  115ea4:	84000044 	addi	r16,r16,1
  115ea8:	0081ffc4 	movi	r2,2047
  115eac:	8080d226 	beq	r16,r2,1161f8 <__adddf3+0x5d8>
  115eb0:	00bfe034 	movhi	r2,65408
  115eb4:	10bfffc4 	addi	r2,r2,-1
  115eb8:	4090703a 	and	r8,r8,r2
  115ebc:	880ad07a 	srli	r5,r17,1
  115ec0:	400897fa 	slli	r4,r8,31
  115ec4:	88c0004c 	andi	r3,r17,1
  115ec8:	28e2b03a 	or	r17,r5,r3
  115ecc:	4010d07a 	srli	r8,r8,1
  115ed0:	2462b03a 	or	r17,r4,r17
  115ed4:	003f7106 	br	115c9c <__alt_data_end+0xfffd5c9c>
  115ed8:	4088b03a 	or	r4,r8,r2
  115edc:	20014526 	beq	r4,zero,1163f4 <__adddf3+0x7d4>
  115ee0:	01000434 	movhi	r4,16
  115ee4:	42000234 	orhi	r8,r8,8
  115ee8:	213fffc4 	addi	r4,r4,-1
  115eec:	4110703a 	and	r8,r8,r4
  115ef0:	003f8206 	br	115cfc <__alt_data_end+0xfffd5cfc>
  115ef4:	18ffffc4 	addi	r3,r3,-1
  115ef8:	1800491e 	bne	r3,zero,116020 <__adddf3+0x400>
  115efc:	898bc83a 	sub	r5,r17,r6
  115f00:	8963803a 	cmpltu	r17,r17,r5
  115f04:	4251c83a 	sub	r8,r8,r9
  115f08:	4451c83a 	sub	r8,r8,r17
  115f0c:	2823883a 	mov	r17,r5
  115f10:	003f9f06 	br	115d90 <__alt_data_end+0xfffd5d90>
  115f14:	4984b03a 	or	r2,r9,r6
  115f18:	103f6026 	beq	r2,zero,115c9c <__alt_data_end+0xfffd5c9c>
  115f1c:	213fffc4 	addi	r4,r4,-1
  115f20:	2000931e 	bne	r4,zero,116170 <__adddf3+0x550>
  115f24:	898d883a 	add	r6,r17,r6
  115f28:	3463803a 	cmpltu	r17,r6,r17
  115f2c:	4251883a 	add	r8,r8,r9
  115f30:	8a11883a 	add	r8,r17,r8
  115f34:	3023883a 	mov	r17,r6
  115f38:	003fd806 	br	115e9c <__alt_data_end+0xfffd5e9c>
  115f3c:	1800541e 	bne	r3,zero,116090 <__adddf3+0x470>
  115f40:	80800044 	addi	r2,r16,1
  115f44:	1081ffcc 	andi	r2,r2,2047
  115f48:	00c00044 	movi	r3,1
  115f4c:	1880a00e 	bge	r3,r2,1161d0 <__adddf3+0x5b0>
  115f50:	8989c83a 	sub	r4,r17,r6
  115f54:	8905803a 	cmpltu	r2,r17,r4
  115f58:	4267c83a 	sub	r19,r8,r9
  115f5c:	98a7c83a 	sub	r19,r19,r2
  115f60:	9880202c 	andhi	r2,r19,128
  115f64:	10006326 	beq	r2,zero,1160f4 <__adddf3+0x4d4>
  115f68:	3463c83a 	sub	r17,r6,r17
  115f6c:	4a07c83a 	sub	r3,r9,r8
  115f70:	344d803a 	cmpltu	r6,r6,r17
  115f74:	19a7c83a 	sub	r19,r3,r6
  115f78:	3825883a 	mov	r18,r7
  115f7c:	983f8a1e 	bne	r19,zero,115da8 <__alt_data_end+0xfffd5da8>
  115f80:	8809883a 	mov	r4,r17
  115f84:	01186080 	call	118608 <__clzsi2>
  115f88:	10800804 	addi	r2,r2,32
  115f8c:	10fffe04 	addi	r3,r2,-8
  115f90:	010007c4 	movi	r4,31
  115f94:	20ff890e 	bge	r4,r3,115dbc <__alt_data_end+0xfffd5dbc>
  115f98:	10bff604 	addi	r2,r2,-40
  115f9c:	8884983a 	sll	r2,r17,r2
  115fa0:	0023883a 	mov	r17,zero
  115fa4:	1c3f8c0e 	bge	r3,r16,115dd8 <__alt_data_end+0xfffd5dd8>
  115fa8:	023fe034 	movhi	r8,65408
  115fac:	423fffc4 	addi	r8,r8,-1
  115fb0:	80e1c83a 	sub	r16,r16,r3
  115fb4:	1210703a 	and	r8,r2,r8
  115fb8:	003f3806 	br	115c9c <__alt_data_end+0xfffd5c9c>
  115fbc:	9007883a 	mov	r3,r18
  115fc0:	0011883a 	mov	r8,zero
  115fc4:	0005883a 	mov	r2,zero
  115fc8:	003f4c06 	br	115cfc <__alt_data_end+0xfffd5cfc>
  115fcc:	498cb03a 	or	r6,r9,r6
  115fd0:	300cc03a 	cmpne	r6,r6,zero
  115fd4:	0007883a 	mov	r3,zero
  115fd8:	003f6806 	br	115d7c <__alt_data_end+0xfffd5d7c>
  115fdc:	20009c1e 	bne	r4,zero,116250 <__adddf3+0x630>
  115fe0:	80800044 	addi	r2,r16,1
  115fe4:	1141ffcc 	andi	r5,r2,2047
  115fe8:	01000044 	movi	r4,1
  115fec:	2140670e 	bge	r4,r5,11618c <__adddf3+0x56c>
  115ff0:	0101ffc4 	movi	r4,2047
  115ff4:	11007f26 	beq	r2,r4,1161f4 <__adddf3+0x5d4>
  115ff8:	898d883a 	add	r6,r17,r6
  115ffc:	4247883a 	add	r3,r8,r9
  116000:	3451803a 	cmpltu	r8,r6,r17
  116004:	40d1883a 	add	r8,r8,r3
  116008:	402297fa 	slli	r17,r8,31
  11600c:	300cd07a 	srli	r6,r6,1
  116010:	4010d07a 	srli	r8,r8,1
  116014:	1021883a 	mov	r16,r2
  116018:	89a2b03a 	or	r17,r17,r6
  11601c:	003f1f06 	br	115c9c <__alt_data_end+0xfffd5c9c>
  116020:	0081ffc4 	movi	r2,2047
  116024:	80bf481e 	bne	r16,r2,115d48 <__alt_data_end+0xfffd5d48>
  116028:	003f1c06 	br	115c9c <__alt_data_end+0xfffd5c9c>
  11602c:	843ff844 	addi	r16,r16,-31
  116030:	01000804 	movi	r4,32
  116034:	1406d83a 	srl	r3,r2,r16
  116038:	41005026 	beq	r8,r4,11617c <__adddf3+0x55c>
  11603c:	01001004 	movi	r4,64
  116040:	2211c83a 	sub	r8,r4,r8
  116044:	1204983a 	sll	r2,r2,r8
  116048:	88a2b03a 	or	r17,r17,r2
  11604c:	8822c03a 	cmpne	r17,r17,zero
  116050:	1c62b03a 	or	r17,r3,r17
  116054:	0011883a 	mov	r8,zero
  116058:	0021883a 	mov	r16,zero
  11605c:	003f7106 	br	115e24 <__alt_data_end+0xfffd5e24>
  116060:	193ff804 	addi	r4,r3,-32
  116064:	00800804 	movi	r2,32
  116068:	4908d83a 	srl	r4,r9,r4
  11606c:	18804526 	beq	r3,r2,116184 <__adddf3+0x564>
  116070:	00801004 	movi	r2,64
  116074:	10c5c83a 	sub	r2,r2,r3
  116078:	4886983a 	sll	r3,r9,r2
  11607c:	198cb03a 	or	r6,r3,r6
  116080:	300cc03a 	cmpne	r6,r6,zero
  116084:	218cb03a 	or	r6,r4,r6
  116088:	0007883a 	mov	r3,zero
  11608c:	003f3b06 	br	115d7c <__alt_data_end+0xfffd5d7c>
  116090:	80002a26 	beq	r16,zero,11613c <__adddf3+0x51c>
  116094:	0101ffc4 	movi	r4,2047
  116098:	11006826 	beq	r2,r4,11623c <__adddf3+0x61c>
  11609c:	00c7c83a 	sub	r3,zero,r3
  1160a0:	42002034 	orhi	r8,r8,128
  1160a4:	01000e04 	movi	r4,56
  1160a8:	20c07c16 	blt	r4,r3,11629c <__adddf3+0x67c>
  1160ac:	010007c4 	movi	r4,31
  1160b0:	20c0da16 	blt	r4,r3,11641c <__adddf3+0x7fc>
  1160b4:	01000804 	movi	r4,32
  1160b8:	20c9c83a 	sub	r4,r4,r3
  1160bc:	4114983a 	sll	r10,r8,r4
  1160c0:	88cad83a 	srl	r5,r17,r3
  1160c4:	8908983a 	sll	r4,r17,r4
  1160c8:	40c6d83a 	srl	r3,r8,r3
  1160cc:	5162b03a 	or	r17,r10,r5
  1160d0:	2008c03a 	cmpne	r4,r4,zero
  1160d4:	8922b03a 	or	r17,r17,r4
  1160d8:	3463c83a 	sub	r17,r6,r17
  1160dc:	48c7c83a 	sub	r3,r9,r3
  1160e0:	344d803a 	cmpltu	r6,r6,r17
  1160e4:	1991c83a 	sub	r8,r3,r6
  1160e8:	1021883a 	mov	r16,r2
  1160ec:	3825883a 	mov	r18,r7
  1160f0:	003f2706 	br	115d90 <__alt_data_end+0xfffd5d90>
  1160f4:	24d0b03a 	or	r8,r4,r19
  1160f8:	40001b1e 	bne	r8,zero,116168 <__adddf3+0x548>
  1160fc:	0005883a 	mov	r2,zero
  116100:	0007883a 	mov	r3,zero
  116104:	0021883a 	mov	r16,zero
  116108:	003f4d06 	br	115e40 <__alt_data_end+0xfffd5e40>
  11610c:	008007c4 	movi	r2,31
  116110:	11003c16 	blt	r2,r4,116204 <__adddf3+0x5e4>
  116114:	00800804 	movi	r2,32
  116118:	1105c83a 	sub	r2,r2,r4
  11611c:	488e983a 	sll	r7,r9,r2
  116120:	310ad83a 	srl	r5,r6,r4
  116124:	3084983a 	sll	r2,r6,r2
  116128:	4912d83a 	srl	r9,r9,r4
  11612c:	394ab03a 	or	r5,r7,r5
  116130:	1004c03a 	cmpne	r2,r2,zero
  116134:	288ab03a 	or	r5,r5,r2
  116138:	003f5306 	br	115e88 <__alt_data_end+0xfffd5e88>
  11613c:	4448b03a 	or	r4,r8,r17
  116140:	20003e26 	beq	r4,zero,11623c <__adddf3+0x61c>
  116144:	00c6303a 	nor	r3,zero,r3
  116148:	18003a1e 	bne	r3,zero,116234 <__adddf3+0x614>
  11614c:	3463c83a 	sub	r17,r6,r17
  116150:	4a07c83a 	sub	r3,r9,r8
  116154:	344d803a 	cmpltu	r6,r6,r17
  116158:	1991c83a 	sub	r8,r3,r6
  11615c:	1021883a 	mov	r16,r2
  116160:	3825883a 	mov	r18,r7
  116164:	003f0a06 	br	115d90 <__alt_data_end+0xfffd5d90>
  116168:	2023883a 	mov	r17,r4
  11616c:	003f0d06 	br	115da4 <__alt_data_end+0xfffd5da4>
  116170:	0081ffc4 	movi	r2,2047
  116174:	80bf3f1e 	bne	r16,r2,115e74 <__alt_data_end+0xfffd5e74>
  116178:	003ec806 	br	115c9c <__alt_data_end+0xfffd5c9c>
  11617c:	0005883a 	mov	r2,zero
  116180:	003fb106 	br	116048 <__alt_data_end+0xfffd6048>
  116184:	0007883a 	mov	r3,zero
  116188:	003fbc06 	br	11607c <__alt_data_end+0xfffd607c>
  11618c:	4444b03a 	or	r2,r8,r17
  116190:	8000871e 	bne	r16,zero,1163b0 <__adddf3+0x790>
  116194:	1000ba26 	beq	r2,zero,116480 <__adddf3+0x860>
  116198:	4984b03a 	or	r2,r9,r6
  11619c:	103ebf26 	beq	r2,zero,115c9c <__alt_data_end+0xfffd5c9c>
  1161a0:	8985883a 	add	r2,r17,r6
  1161a4:	4247883a 	add	r3,r8,r9
  1161a8:	1451803a 	cmpltu	r8,r2,r17
  1161ac:	40d1883a 	add	r8,r8,r3
  1161b0:	40c0202c 	andhi	r3,r8,128
  1161b4:	1023883a 	mov	r17,r2
  1161b8:	183f1a26 	beq	r3,zero,115e24 <__alt_data_end+0xfffd5e24>
  1161bc:	00bfe034 	movhi	r2,65408
  1161c0:	10bfffc4 	addi	r2,r2,-1
  1161c4:	2021883a 	mov	r16,r4
  1161c8:	4090703a 	and	r8,r8,r2
  1161cc:	003eb306 	br	115c9c <__alt_data_end+0xfffd5c9c>
  1161d0:	4444b03a 	or	r2,r8,r17
  1161d4:	8000291e 	bne	r16,zero,11627c <__adddf3+0x65c>
  1161d8:	10004b1e 	bne	r2,zero,116308 <__adddf3+0x6e8>
  1161dc:	4990b03a 	or	r8,r9,r6
  1161e0:	40008b26 	beq	r8,zero,116410 <__adddf3+0x7f0>
  1161e4:	4811883a 	mov	r8,r9
  1161e8:	3023883a 	mov	r17,r6
  1161ec:	3825883a 	mov	r18,r7
  1161f0:	003eaa06 	br	115c9c <__alt_data_end+0xfffd5c9c>
  1161f4:	1021883a 	mov	r16,r2
  1161f8:	0011883a 	mov	r8,zero
  1161fc:	0005883a 	mov	r2,zero
  116200:	003f0f06 	br	115e40 <__alt_data_end+0xfffd5e40>
  116204:	217ff804 	addi	r5,r4,-32
  116208:	00800804 	movi	r2,32
  11620c:	494ad83a 	srl	r5,r9,r5
  116210:	20807d26 	beq	r4,r2,116408 <__adddf3+0x7e8>
  116214:	00801004 	movi	r2,64
  116218:	1109c83a 	sub	r4,r2,r4
  11621c:	4912983a 	sll	r9,r9,r4
  116220:	498cb03a 	or	r6,r9,r6
  116224:	300cc03a 	cmpne	r6,r6,zero
  116228:	298ab03a 	or	r5,r5,r6
  11622c:	0013883a 	mov	r9,zero
  116230:	003f1506 	br	115e88 <__alt_data_end+0xfffd5e88>
  116234:	0101ffc4 	movi	r4,2047
  116238:	113f9a1e 	bne	r2,r4,1160a4 <__alt_data_end+0xfffd60a4>
  11623c:	4811883a 	mov	r8,r9
  116240:	3023883a 	mov	r17,r6
  116244:	1021883a 	mov	r16,r2
  116248:	3825883a 	mov	r18,r7
  11624c:	003e9306 	br	115c9c <__alt_data_end+0xfffd5c9c>
  116250:	8000161e 	bne	r16,zero,1162ac <__adddf3+0x68c>
  116254:	444ab03a 	or	r5,r8,r17
  116258:	28005126 	beq	r5,zero,1163a0 <__adddf3+0x780>
  11625c:	0108303a 	nor	r4,zero,r4
  116260:	20004d1e 	bne	r4,zero,116398 <__adddf3+0x778>
  116264:	89a3883a 	add	r17,r17,r6
  116268:	4253883a 	add	r9,r8,r9
  11626c:	898d803a 	cmpltu	r6,r17,r6
  116270:	3251883a 	add	r8,r6,r9
  116274:	1021883a 	mov	r16,r2
  116278:	003f0806 	br	115e9c <__alt_data_end+0xfffd5e9c>
  11627c:	1000301e 	bne	r2,zero,116340 <__adddf3+0x720>
  116280:	4984b03a 	or	r2,r9,r6
  116284:	10007126 	beq	r2,zero,11644c <__adddf3+0x82c>
  116288:	4811883a 	mov	r8,r9
  11628c:	3023883a 	mov	r17,r6
  116290:	3825883a 	mov	r18,r7
  116294:	0401ffc4 	movi	r16,2047
  116298:	003e8006 	br	115c9c <__alt_data_end+0xfffd5c9c>
  11629c:	4462b03a 	or	r17,r8,r17
  1162a0:	8822c03a 	cmpne	r17,r17,zero
  1162a4:	0007883a 	mov	r3,zero
  1162a8:	003f8b06 	br	1160d8 <__alt_data_end+0xfffd60d8>
  1162ac:	0141ffc4 	movi	r5,2047
  1162b0:	11403b26 	beq	r2,r5,1163a0 <__adddf3+0x780>
  1162b4:	0109c83a 	sub	r4,zero,r4
  1162b8:	42002034 	orhi	r8,r8,128
  1162bc:	01400e04 	movi	r5,56
  1162c0:	29006716 	blt	r5,r4,116460 <__adddf3+0x840>
  1162c4:	014007c4 	movi	r5,31
  1162c8:	29007016 	blt	r5,r4,11648c <__adddf3+0x86c>
  1162cc:	01400804 	movi	r5,32
  1162d0:	290bc83a 	sub	r5,r5,r4
  1162d4:	4154983a 	sll	r10,r8,r5
  1162d8:	890ed83a 	srl	r7,r17,r4
  1162dc:	894a983a 	sll	r5,r17,r5
  1162e0:	4108d83a 	srl	r4,r8,r4
  1162e4:	51e2b03a 	or	r17,r10,r7
  1162e8:	280ac03a 	cmpne	r5,r5,zero
  1162ec:	8962b03a 	or	r17,r17,r5
  1162f0:	89a3883a 	add	r17,r17,r6
  1162f4:	2253883a 	add	r9,r4,r9
  1162f8:	898d803a 	cmpltu	r6,r17,r6
  1162fc:	3251883a 	add	r8,r6,r9
  116300:	1021883a 	mov	r16,r2
  116304:	003ee506 	br	115e9c <__alt_data_end+0xfffd5e9c>
  116308:	4984b03a 	or	r2,r9,r6
  11630c:	103e6326 	beq	r2,zero,115c9c <__alt_data_end+0xfffd5c9c>
  116310:	8987c83a 	sub	r3,r17,r6
  116314:	88c9803a 	cmpltu	r4,r17,r3
  116318:	4245c83a 	sub	r2,r8,r9
  11631c:	1105c83a 	sub	r2,r2,r4
  116320:	1100202c 	andhi	r4,r2,128
  116324:	203ebb26 	beq	r4,zero,115e14 <__alt_data_end+0xfffd5e14>
  116328:	3463c83a 	sub	r17,r6,r17
  11632c:	4a07c83a 	sub	r3,r9,r8
  116330:	344d803a 	cmpltu	r6,r6,r17
  116334:	1991c83a 	sub	r8,r3,r6
  116338:	3825883a 	mov	r18,r7
  11633c:	003e5706 	br	115c9c <__alt_data_end+0xfffd5c9c>
  116340:	4984b03a 	or	r2,r9,r6
  116344:	10002e26 	beq	r2,zero,116400 <__adddf3+0x7e0>
  116348:	4004d0fa 	srli	r2,r8,3
  11634c:	8822d0fa 	srli	r17,r17,3
  116350:	4010977a 	slli	r8,r8,29
  116354:	10c0022c 	andhi	r3,r2,8
  116358:	4462b03a 	or	r17,r8,r17
  11635c:	18000826 	beq	r3,zero,116380 <__adddf3+0x760>
  116360:	4808d0fa 	srli	r4,r9,3
  116364:	20c0022c 	andhi	r3,r4,8
  116368:	1800051e 	bne	r3,zero,116380 <__adddf3+0x760>
  11636c:	300cd0fa 	srli	r6,r6,3
  116370:	4806977a 	slli	r3,r9,29
  116374:	2005883a 	mov	r2,r4
  116378:	3825883a 	mov	r18,r7
  11637c:	19a2b03a 	or	r17,r3,r6
  116380:	8810d77a 	srli	r8,r17,29
  116384:	100490fa 	slli	r2,r2,3
  116388:	882290fa 	slli	r17,r17,3
  11638c:	0401ffc4 	movi	r16,2047
  116390:	4090b03a 	or	r8,r8,r2
  116394:	003e4106 	br	115c9c <__alt_data_end+0xfffd5c9c>
  116398:	0141ffc4 	movi	r5,2047
  11639c:	117fc71e 	bne	r2,r5,1162bc <__alt_data_end+0xfffd62bc>
  1163a0:	4811883a 	mov	r8,r9
  1163a4:	3023883a 	mov	r17,r6
  1163a8:	1021883a 	mov	r16,r2
  1163ac:	003e3b06 	br	115c9c <__alt_data_end+0xfffd5c9c>
  1163b0:	10002f26 	beq	r2,zero,116470 <__adddf3+0x850>
  1163b4:	4984b03a 	or	r2,r9,r6
  1163b8:	10001126 	beq	r2,zero,116400 <__adddf3+0x7e0>
  1163bc:	4004d0fa 	srli	r2,r8,3
  1163c0:	8822d0fa 	srli	r17,r17,3
  1163c4:	4010977a 	slli	r8,r8,29
  1163c8:	10c0022c 	andhi	r3,r2,8
  1163cc:	4462b03a 	or	r17,r8,r17
  1163d0:	183feb26 	beq	r3,zero,116380 <__alt_data_end+0xfffd6380>
  1163d4:	4808d0fa 	srli	r4,r9,3
  1163d8:	20c0022c 	andhi	r3,r4,8
  1163dc:	183fe81e 	bne	r3,zero,116380 <__alt_data_end+0xfffd6380>
  1163e0:	300cd0fa 	srli	r6,r6,3
  1163e4:	4806977a 	slli	r3,r9,29
  1163e8:	2005883a 	mov	r2,r4
  1163ec:	19a2b03a 	or	r17,r3,r6
  1163f0:	003fe306 	br	116380 <__alt_data_end+0xfffd6380>
  1163f4:	0011883a 	mov	r8,zero
  1163f8:	0005883a 	mov	r2,zero
  1163fc:	003e3f06 	br	115cfc <__alt_data_end+0xfffd5cfc>
  116400:	0401ffc4 	movi	r16,2047
  116404:	003e2506 	br	115c9c <__alt_data_end+0xfffd5c9c>
  116408:	0013883a 	mov	r9,zero
  11640c:	003f8406 	br	116220 <__alt_data_end+0xfffd6220>
  116410:	0005883a 	mov	r2,zero
  116414:	0007883a 	mov	r3,zero
  116418:	003e8906 	br	115e40 <__alt_data_end+0xfffd5e40>
  11641c:	197ff804 	addi	r5,r3,-32
  116420:	01000804 	movi	r4,32
  116424:	414ad83a 	srl	r5,r8,r5
  116428:	19002426 	beq	r3,r4,1164bc <__adddf3+0x89c>
  11642c:	01001004 	movi	r4,64
  116430:	20c7c83a 	sub	r3,r4,r3
  116434:	40c6983a 	sll	r3,r8,r3
  116438:	1c46b03a 	or	r3,r3,r17
  11643c:	1806c03a 	cmpne	r3,r3,zero
  116440:	28e2b03a 	or	r17,r5,r3
  116444:	0007883a 	mov	r3,zero
  116448:	003f2306 	br	1160d8 <__alt_data_end+0xfffd60d8>
  11644c:	0007883a 	mov	r3,zero
  116450:	5811883a 	mov	r8,r11
  116454:	00bfffc4 	movi	r2,-1
  116458:	0401ffc4 	movi	r16,2047
  11645c:	003e7806 	br	115e40 <__alt_data_end+0xfffd5e40>
  116460:	4462b03a 	or	r17,r8,r17
  116464:	8822c03a 	cmpne	r17,r17,zero
  116468:	0009883a 	mov	r4,zero
  11646c:	003fa006 	br	1162f0 <__alt_data_end+0xfffd62f0>
  116470:	4811883a 	mov	r8,r9
  116474:	3023883a 	mov	r17,r6
  116478:	0401ffc4 	movi	r16,2047
  11647c:	003e0706 	br	115c9c <__alt_data_end+0xfffd5c9c>
  116480:	4811883a 	mov	r8,r9
  116484:	3023883a 	mov	r17,r6
  116488:	003e0406 	br	115c9c <__alt_data_end+0xfffd5c9c>
  11648c:	21fff804 	addi	r7,r4,-32
  116490:	01400804 	movi	r5,32
  116494:	41ced83a 	srl	r7,r8,r7
  116498:	21400a26 	beq	r4,r5,1164c4 <__adddf3+0x8a4>
  11649c:	01401004 	movi	r5,64
  1164a0:	2909c83a 	sub	r4,r5,r4
  1164a4:	4108983a 	sll	r4,r8,r4
  1164a8:	2448b03a 	or	r4,r4,r17
  1164ac:	2008c03a 	cmpne	r4,r4,zero
  1164b0:	3922b03a 	or	r17,r7,r4
  1164b4:	0009883a 	mov	r4,zero
  1164b8:	003f8d06 	br	1162f0 <__alt_data_end+0xfffd62f0>
  1164bc:	0007883a 	mov	r3,zero
  1164c0:	003fdd06 	br	116438 <__alt_data_end+0xfffd6438>
  1164c4:	0009883a 	mov	r4,zero
  1164c8:	003ff706 	br	1164a8 <__alt_data_end+0xfffd64a8>

001164cc <__divdf3>:
  1164cc:	defff004 	addi	sp,sp,-64
  1164d0:	dc800815 	stw	r18,32(sp)
  1164d4:	2824d53a 	srli	r18,r5,20
  1164d8:	dd800c15 	stw	r22,48(sp)
  1164dc:	282cd7fa 	srli	r22,r5,31
  1164e0:	dc000615 	stw	r16,24(sp)
  1164e4:	04000434 	movhi	r16,16
  1164e8:	843fffc4 	addi	r16,r16,-1
  1164ec:	dfc00f15 	stw	ra,60(sp)
  1164f0:	df000e15 	stw	fp,56(sp)
  1164f4:	ddc00d15 	stw	r23,52(sp)
  1164f8:	dd400b15 	stw	r21,44(sp)
  1164fc:	dd000a15 	stw	r20,40(sp)
  116500:	dcc00915 	stw	r19,36(sp)
  116504:	dc400715 	stw	r17,28(sp)
  116508:	9481ffcc 	andi	r18,r18,2047
  11650c:	2c20703a 	and	r16,r5,r16
  116510:	b2003fcc 	andi	r8,r22,255
  116514:	90006126 	beq	r18,zero,11669c <__divdf3+0x1d0>
  116518:	0081ffc4 	movi	r2,2047
  11651c:	202b883a 	mov	r21,r4
  116520:	90803726 	beq	r18,r2,116600 <__divdf3+0x134>
  116524:	80800434 	orhi	r2,r16,16
  116528:	100490fa 	slli	r2,r2,3
  11652c:	2020d77a 	srli	r16,r4,29
  116530:	202a90fa 	slli	r21,r4,3
  116534:	94bf0044 	addi	r18,r18,-1023
  116538:	80a0b03a 	or	r16,r16,r2
  11653c:	0013883a 	mov	r9,zero
  116540:	000b883a 	mov	r5,zero
  116544:	3806d53a 	srli	r3,r7,20
  116548:	382ed7fa 	srli	r23,r7,31
  11654c:	04400434 	movhi	r17,16
  116550:	8c7fffc4 	addi	r17,r17,-1
  116554:	18c1ffcc 	andi	r3,r3,2047
  116558:	3029883a 	mov	r20,r6
  11655c:	3c62703a 	and	r17,r7,r17
  116560:	bf003fcc 	andi	fp,r23,255
  116564:	18006e26 	beq	r3,zero,116720 <__divdf3+0x254>
  116568:	0081ffc4 	movi	r2,2047
  11656c:	18806626 	beq	r3,r2,116708 <__divdf3+0x23c>
  116570:	88800434 	orhi	r2,r17,16
  116574:	100490fa 	slli	r2,r2,3
  116578:	3022d77a 	srli	r17,r6,29
  11657c:	302890fa 	slli	r20,r6,3
  116580:	18ff0044 	addi	r3,r3,-1023
  116584:	88a2b03a 	or	r17,r17,r2
  116588:	000f883a 	mov	r7,zero
  11658c:	b5e6f03a 	xor	r19,r22,r23
  116590:	3a4cb03a 	or	r6,r7,r9
  116594:	008003c4 	movi	r2,15
  116598:	9809883a 	mov	r4,r19
  11659c:	90c7c83a 	sub	r3,r18,r3
  1165a0:	9cc03fcc 	andi	r19,r19,255
  1165a4:	11809636 	bltu	r2,r6,116800 <__divdf3+0x334>
  1165a8:	300c90ba 	slli	r6,r6,2
  1165ac:	00800474 	movhi	r2,17
  1165b0:	10997004 	addi	r2,r2,26048
  1165b4:	308d883a 	add	r6,r6,r2
  1165b8:	30800017 	ldw	r2,0(r6)
  1165bc:	1000683a 	jmp	r2
  1165c0:	00116800 	call	11680 <OSCtxSw_SWITCH_PC+0x11640>
  1165c4:	00116638 	rdprs	zero,zero,17816
  1165c8:	001167f0 	cmpltui	zero,zero,17823
  1165cc:	0011662c 	andhi	zero,zero,17816
  1165d0:	001167f0 	cmpltui	zero,zero,17823
  1165d4:	001167c4 	movi	zero,17823
  1165d8:	001167f0 	cmpltui	zero,zero,17823
  1165dc:	0011662c 	andhi	zero,zero,17816
  1165e0:	00116638 	rdprs	zero,zero,17816
  1165e4:	00116638 	rdprs	zero,zero,17816
  1165e8:	001167c4 	movi	zero,17823
  1165ec:	0011662c 	andhi	zero,zero,17816
  1165f0:	0011661c 	xori	zero,zero,17816
  1165f4:	0011661c 	xori	zero,zero,17816
  1165f8:	0011661c 	xori	zero,zero,17816
  1165fc:	00116b88 	cmpgei	zero,zero,17838
  116600:	2404b03a 	or	r2,r4,r16
  116604:	10006c1e 	bne	r2,zero,1167b8 <__divdf3+0x2ec>
  116608:	02400204 	movi	r9,8
  11660c:	0021883a 	mov	r16,zero
  116610:	002b883a 	mov	r21,zero
  116614:	01400084 	movi	r5,2
  116618:	003fca06 	br	116544 <__alt_data_end+0xfffd6544>
  11661c:	8023883a 	mov	r17,r16
  116620:	a829883a 	mov	r20,r21
  116624:	4039883a 	mov	fp,r8
  116628:	280f883a 	mov	r7,r5
  11662c:	00800084 	movi	r2,2
  116630:	3881601e 	bne	r7,r2,116bb4 <__divdf3+0x6e8>
  116634:	e027883a 	mov	r19,fp
  116638:	9900004c 	andi	r4,r19,1
  11663c:	0081ffc4 	movi	r2,2047
  116640:	0021883a 	mov	r16,zero
  116644:	002b883a 	mov	r21,zero
  116648:	1004953a 	slli	r2,r2,20
  11664c:	20c03fcc 	andi	r3,r4,255
  116650:	01400434 	movhi	r5,16
  116654:	297fffc4 	addi	r5,r5,-1
  116658:	180697fa 	slli	r3,r3,31
  11665c:	8160703a 	and	r16,r16,r5
  116660:	80a0b03a 	or	r16,r16,r2
  116664:	80c6b03a 	or	r3,r16,r3
  116668:	a805883a 	mov	r2,r21
  11666c:	dfc00f17 	ldw	ra,60(sp)
  116670:	df000e17 	ldw	fp,56(sp)
  116674:	ddc00d17 	ldw	r23,52(sp)
  116678:	dd800c17 	ldw	r22,48(sp)
  11667c:	dd400b17 	ldw	r21,44(sp)
  116680:	dd000a17 	ldw	r20,40(sp)
  116684:	dcc00917 	ldw	r19,36(sp)
  116688:	dc800817 	ldw	r18,32(sp)
  11668c:	dc400717 	ldw	r17,28(sp)
  116690:	dc000617 	ldw	r16,24(sp)
  116694:	dec01004 	addi	sp,sp,64
  116698:	f800283a 	ret
  11669c:	2404b03a 	or	r2,r4,r16
  1166a0:	2023883a 	mov	r17,r4
  1166a4:	10003f26 	beq	r2,zero,1167a4 <__divdf3+0x2d8>
  1166a8:	80015e26 	beq	r16,zero,116c24 <__divdf3+0x758>
  1166ac:	8009883a 	mov	r4,r16
  1166b0:	d9800215 	stw	r6,8(sp)
  1166b4:	d9c00515 	stw	r7,20(sp)
  1166b8:	da000415 	stw	r8,16(sp)
  1166bc:	01186080 	call	118608 <__clzsi2>
  1166c0:	d9800217 	ldw	r6,8(sp)
  1166c4:	d9c00517 	ldw	r7,20(sp)
  1166c8:	da000417 	ldw	r8,16(sp)
  1166cc:	113ffd44 	addi	r4,r2,-11
  1166d0:	00c00704 	movi	r3,28
  1166d4:	19014f16 	blt	r3,r4,116c14 <__divdf3+0x748>
  1166d8:	00c00744 	movi	r3,29
  1166dc:	157ffe04 	addi	r21,r2,-8
  1166e0:	1907c83a 	sub	r3,r3,r4
  1166e4:	8560983a 	sll	r16,r16,r21
  1166e8:	88c6d83a 	srl	r3,r17,r3
  1166ec:	8d6a983a 	sll	r21,r17,r21
  1166f0:	1c20b03a 	or	r16,r3,r16
  1166f4:	1080fcc4 	addi	r2,r2,1011
  1166f8:	00a5c83a 	sub	r18,zero,r2
  1166fc:	0013883a 	mov	r9,zero
  116700:	000b883a 	mov	r5,zero
  116704:	003f8f06 	br	116544 <__alt_data_end+0xfffd6544>
  116708:	3444b03a 	or	r2,r6,r17
  11670c:	1000231e 	bne	r2,zero,11679c <__divdf3+0x2d0>
  116710:	0023883a 	mov	r17,zero
  116714:	0029883a 	mov	r20,zero
  116718:	01c00084 	movi	r7,2
  11671c:	003f9b06 	br	11658c <__alt_data_end+0xfffd658c>
  116720:	3444b03a 	or	r2,r6,r17
  116724:	10001926 	beq	r2,zero,11678c <__divdf3+0x2c0>
  116728:	88014b26 	beq	r17,zero,116c58 <__divdf3+0x78c>
  11672c:	8809883a 	mov	r4,r17
  116730:	d9400115 	stw	r5,4(sp)
  116734:	d9800215 	stw	r6,8(sp)
  116738:	da000415 	stw	r8,16(sp)
  11673c:	da400315 	stw	r9,12(sp)
  116740:	01186080 	call	118608 <__clzsi2>
  116744:	d9400117 	ldw	r5,4(sp)
  116748:	d9800217 	ldw	r6,8(sp)
  11674c:	da000417 	ldw	r8,16(sp)
  116750:	da400317 	ldw	r9,12(sp)
  116754:	113ffd44 	addi	r4,r2,-11
  116758:	00c00704 	movi	r3,28
  11675c:	19013a16 	blt	r3,r4,116c48 <__divdf3+0x77c>
  116760:	00c00744 	movi	r3,29
  116764:	153ffe04 	addi	r20,r2,-8
  116768:	1907c83a 	sub	r3,r3,r4
  11676c:	8d22983a 	sll	r17,r17,r20
  116770:	30c6d83a 	srl	r3,r6,r3
  116774:	3528983a 	sll	r20,r6,r20
  116778:	1c62b03a 	or	r17,r3,r17
  11677c:	1080fcc4 	addi	r2,r2,1011
  116780:	0087c83a 	sub	r3,zero,r2
  116784:	000f883a 	mov	r7,zero
  116788:	003f8006 	br	11658c <__alt_data_end+0xfffd658c>
  11678c:	0023883a 	mov	r17,zero
  116790:	0029883a 	mov	r20,zero
  116794:	01c00044 	movi	r7,1
  116798:	003f7c06 	br	11658c <__alt_data_end+0xfffd658c>
  11679c:	01c000c4 	movi	r7,3
  1167a0:	003f7a06 	br	11658c <__alt_data_end+0xfffd658c>
  1167a4:	02400104 	movi	r9,4
  1167a8:	0021883a 	mov	r16,zero
  1167ac:	002b883a 	mov	r21,zero
  1167b0:	01400044 	movi	r5,1
  1167b4:	003f6306 	br	116544 <__alt_data_end+0xfffd6544>
  1167b8:	02400304 	movi	r9,12
  1167bc:	014000c4 	movi	r5,3
  1167c0:	003f6006 	br	116544 <__alt_data_end+0xfffd6544>
  1167c4:	04000434 	movhi	r16,16
  1167c8:	0009883a 	mov	r4,zero
  1167cc:	843fffc4 	addi	r16,r16,-1
  1167d0:	057fffc4 	movi	r21,-1
  1167d4:	0081ffc4 	movi	r2,2047
  1167d8:	003f9b06 	br	116648 <__alt_data_end+0xfffd6648>
  1167dc:	00c00044 	movi	r3,1
  1167e0:	1887c83a 	sub	r3,r3,r2
  1167e4:	01000e04 	movi	r4,56
  1167e8:	20c1530e 	bge	r4,r3,116d38 <__divdf3+0x86c>
  1167ec:	9900004c 	andi	r4,r19,1
  1167f0:	0005883a 	mov	r2,zero
  1167f4:	0021883a 	mov	r16,zero
  1167f8:	002b883a 	mov	r21,zero
  1167fc:	003f9206 	br	116648 <__alt_data_end+0xfffd6648>
  116800:	8c012e36 	bltu	r17,r16,116cbc <__divdf3+0x7f0>
  116804:	84412c26 	beq	r16,r17,116cb8 <__divdf3+0x7ec>
  116808:	a82f883a 	mov	r23,r21
  11680c:	18ffffc4 	addi	r3,r3,-1
  116810:	002b883a 	mov	r21,zero
  116814:	a004d63a 	srli	r2,r20,24
  116818:	8822923a 	slli	r17,r17,8
  11681c:	a028923a 	slli	r20,r20,8
  116820:	8009883a 	mov	r4,r16
  116824:	88acb03a 	or	r22,r17,r2
  116828:	dd000015 	stw	r20,0(sp)
  11682c:	b028d43a 	srli	r20,r22,16
  116830:	d8c00215 	stw	r3,8(sp)
  116834:	b4bfffcc 	andi	r18,r22,65535
  116838:	a00b883a 	mov	r5,r20
  11683c:	01159400 	call	115940 <__udivsi3>
  116840:	100b883a 	mov	r5,r2
  116844:	9009883a 	mov	r4,r18
  116848:	1023883a 	mov	r17,r2
  11684c:	01159fc0 	call	1159fc <__mulsi3>
  116850:	8009883a 	mov	r4,r16
  116854:	a00b883a 	mov	r5,r20
  116858:	1039883a 	mov	fp,r2
  11685c:	01159a40 	call	1159a4 <__umodsi3>
  116860:	1004943a 	slli	r2,r2,16
  116864:	b808d43a 	srli	r4,r23,16
  116868:	d8c00217 	ldw	r3,8(sp)
  11686c:	2084b03a 	or	r2,r4,r2
  116870:	1700062e 	bgeu	r2,fp,11688c <__divdf3+0x3c0>
  116874:	1585883a 	add	r2,r2,r22
  116878:	893fffc4 	addi	r4,r17,-1
  11687c:	15811d36 	bltu	r2,r22,116cf4 <__divdf3+0x828>
  116880:	17011c2e 	bgeu	r2,fp,116cf4 <__divdf3+0x828>
  116884:	8c7fff84 	addi	r17,r17,-2
  116888:	1585883a 	add	r2,r2,r22
  11688c:	1739c83a 	sub	fp,r2,fp
  116890:	a00b883a 	mov	r5,r20
  116894:	e009883a 	mov	r4,fp
  116898:	d8c00215 	stw	r3,8(sp)
  11689c:	01159400 	call	115940 <__udivsi3>
  1168a0:	100b883a 	mov	r5,r2
  1168a4:	9009883a 	mov	r4,r18
  1168a8:	1021883a 	mov	r16,r2
  1168ac:	01159fc0 	call	1159fc <__mulsi3>
  1168b0:	a00b883a 	mov	r5,r20
  1168b4:	e009883a 	mov	r4,fp
  1168b8:	d8800415 	stw	r2,16(sp)
  1168bc:	01159a40 	call	1159a4 <__umodsi3>
  1168c0:	1004943a 	slli	r2,r2,16
  1168c4:	da000417 	ldw	r8,16(sp)
  1168c8:	bdffffcc 	andi	r23,r23,65535
  1168cc:	b884b03a 	or	r2,r23,r2
  1168d0:	d8c00217 	ldw	r3,8(sp)
  1168d4:	1200062e 	bgeu	r2,r8,1168f0 <__divdf3+0x424>
  1168d8:	1585883a 	add	r2,r2,r22
  1168dc:	813fffc4 	addi	r4,r16,-1
  1168e0:	15810236 	bltu	r2,r22,116cec <__divdf3+0x820>
  1168e4:	1201012e 	bgeu	r2,r8,116cec <__divdf3+0x820>
  1168e8:	843fff84 	addi	r16,r16,-2
  1168ec:	1585883a 	add	r2,r2,r22
  1168f0:	8822943a 	slli	r17,r17,16
  1168f4:	d9800017 	ldw	r6,0(sp)
  1168f8:	1211c83a 	sub	r8,r2,r8
  1168fc:	8c22b03a 	or	r17,r17,r16
  116900:	373fffcc 	andi	fp,r6,65535
  116904:	8abfffcc 	andi	r10,r17,65535
  116908:	8820d43a 	srli	r16,r17,16
  11690c:	5009883a 	mov	r4,r10
  116910:	e00b883a 	mov	r5,fp
  116914:	302ed43a 	srli	r23,r6,16
  116918:	d8c00215 	stw	r3,8(sp)
  11691c:	da000415 	stw	r8,16(sp)
  116920:	da800115 	stw	r10,4(sp)
  116924:	01159fc0 	call	1159fc <__mulsi3>
  116928:	800b883a 	mov	r5,r16
  11692c:	e009883a 	mov	r4,fp
  116930:	d8800515 	stw	r2,20(sp)
  116934:	01159fc0 	call	1159fc <__mulsi3>
  116938:	8009883a 	mov	r4,r16
  11693c:	b80b883a 	mov	r5,r23
  116940:	d8800315 	stw	r2,12(sp)
  116944:	01159fc0 	call	1159fc <__mulsi3>
  116948:	da800117 	ldw	r10,4(sp)
  11694c:	b80b883a 	mov	r5,r23
  116950:	1021883a 	mov	r16,r2
  116954:	5009883a 	mov	r4,r10
  116958:	01159fc0 	call	1159fc <__mulsi3>
  11695c:	d9c00517 	ldw	r7,20(sp)
  116960:	da400317 	ldw	r9,12(sp)
  116964:	d8c00217 	ldw	r3,8(sp)
  116968:	3808d43a 	srli	r4,r7,16
  11696c:	1245883a 	add	r2,r2,r9
  116970:	da000417 	ldw	r8,16(sp)
  116974:	2085883a 	add	r2,r4,r2
  116978:	1240022e 	bgeu	r2,r9,116984 <__divdf3+0x4b8>
  11697c:	01000074 	movhi	r4,1
  116980:	8121883a 	add	r16,r16,r4
  116984:	1008d43a 	srli	r4,r2,16
  116988:	1004943a 	slli	r2,r2,16
  11698c:	39ffffcc 	andi	r7,r7,65535
  116990:	2409883a 	add	r4,r4,r16
  116994:	11c5883a 	add	r2,r2,r7
  116998:	4100bb36 	bltu	r8,r4,116c88 <__divdf3+0x7bc>
  11699c:	4100d726 	beq	r8,r4,116cfc <__divdf3+0x830>
  1169a0:	4109c83a 	sub	r4,r8,r4
  1169a4:	a8a1c83a 	sub	r16,r21,r2
  1169a8:	ac2b803a 	cmpltu	r21,r21,r16
  1169ac:	256bc83a 	sub	r21,r4,r21
  1169b0:	b540d926 	beq	r22,r21,116d18 <__divdf3+0x84c>
  1169b4:	a00b883a 	mov	r5,r20
  1169b8:	a809883a 	mov	r4,r21
  1169bc:	d8c00215 	stw	r3,8(sp)
  1169c0:	01159400 	call	115940 <__udivsi3>
  1169c4:	100b883a 	mov	r5,r2
  1169c8:	9009883a 	mov	r4,r18
  1169cc:	d8800515 	stw	r2,20(sp)
  1169d0:	01159fc0 	call	1159fc <__mulsi3>
  1169d4:	a809883a 	mov	r4,r21
  1169d8:	a00b883a 	mov	r5,r20
  1169dc:	d8800415 	stw	r2,16(sp)
  1169e0:	01159a40 	call	1159a4 <__umodsi3>
  1169e4:	1004943a 	slli	r2,r2,16
  1169e8:	8008d43a 	srli	r4,r16,16
  1169ec:	da000417 	ldw	r8,16(sp)
  1169f0:	d8c00217 	ldw	r3,8(sp)
  1169f4:	2084b03a 	or	r2,r4,r2
  1169f8:	d9c00517 	ldw	r7,20(sp)
  1169fc:	1200062e 	bgeu	r2,r8,116a18 <__divdf3+0x54c>
  116a00:	1585883a 	add	r2,r2,r22
  116a04:	393fffc4 	addi	r4,r7,-1
  116a08:	1580c536 	bltu	r2,r22,116d20 <__divdf3+0x854>
  116a0c:	1200c42e 	bgeu	r2,r8,116d20 <__divdf3+0x854>
  116a10:	39ffff84 	addi	r7,r7,-2
  116a14:	1585883a 	add	r2,r2,r22
  116a18:	122bc83a 	sub	r21,r2,r8
  116a1c:	a00b883a 	mov	r5,r20
  116a20:	a809883a 	mov	r4,r21
  116a24:	d8c00215 	stw	r3,8(sp)
  116a28:	d9c00515 	stw	r7,20(sp)
  116a2c:	01159400 	call	115940 <__udivsi3>
  116a30:	9009883a 	mov	r4,r18
  116a34:	100b883a 	mov	r5,r2
  116a38:	d8800415 	stw	r2,16(sp)
  116a3c:	01159fc0 	call	1159fc <__mulsi3>
  116a40:	a809883a 	mov	r4,r21
  116a44:	a00b883a 	mov	r5,r20
  116a48:	1025883a 	mov	r18,r2
  116a4c:	01159a40 	call	1159a4 <__umodsi3>
  116a50:	1004943a 	slli	r2,r2,16
  116a54:	813fffcc 	andi	r4,r16,65535
  116a58:	d8c00217 	ldw	r3,8(sp)
  116a5c:	20a0b03a 	or	r16,r4,r2
  116a60:	d9c00517 	ldw	r7,20(sp)
  116a64:	da000417 	ldw	r8,16(sp)
  116a68:	8480062e 	bgeu	r16,r18,116a84 <__divdf3+0x5b8>
  116a6c:	85a1883a 	add	r16,r16,r22
  116a70:	40bfffc4 	addi	r2,r8,-1
  116a74:	8580ac36 	bltu	r16,r22,116d28 <__divdf3+0x85c>
  116a78:	8480ab2e 	bgeu	r16,r18,116d28 <__divdf3+0x85c>
  116a7c:	423fff84 	addi	r8,r8,-2
  116a80:	85a1883a 	add	r16,r16,r22
  116a84:	3804943a 	slli	r2,r7,16
  116a88:	84a1c83a 	sub	r16,r16,r18
  116a8c:	e009883a 	mov	r4,fp
  116a90:	1228b03a 	or	r20,r2,r8
  116a94:	a1ffffcc 	andi	r7,r20,65535
  116a98:	a024d43a 	srli	r18,r20,16
  116a9c:	380b883a 	mov	r5,r7
  116aa0:	d8c00215 	stw	r3,8(sp)
  116aa4:	d9c00515 	stw	r7,20(sp)
  116aa8:	01159fc0 	call	1159fc <__mulsi3>
  116aac:	900b883a 	mov	r5,r18
  116ab0:	e009883a 	mov	r4,fp
  116ab4:	102b883a 	mov	r21,r2
  116ab8:	01159fc0 	call	1159fc <__mulsi3>
  116abc:	900b883a 	mov	r5,r18
  116ac0:	b809883a 	mov	r4,r23
  116ac4:	1039883a 	mov	fp,r2
  116ac8:	01159fc0 	call	1159fc <__mulsi3>
  116acc:	d9c00517 	ldw	r7,20(sp)
  116ad0:	b80b883a 	mov	r5,r23
  116ad4:	1025883a 	mov	r18,r2
  116ad8:	3809883a 	mov	r4,r7
  116adc:	01159fc0 	call	1159fc <__mulsi3>
  116ae0:	a808d43a 	srli	r4,r21,16
  116ae4:	1705883a 	add	r2,r2,fp
  116ae8:	d8c00217 	ldw	r3,8(sp)
  116aec:	2085883a 	add	r2,r4,r2
  116af0:	1700022e 	bgeu	r2,fp,116afc <__divdf3+0x630>
  116af4:	01000074 	movhi	r4,1
  116af8:	9125883a 	add	r18,r18,r4
  116afc:	1008d43a 	srli	r4,r2,16
  116b00:	1004943a 	slli	r2,r2,16
  116b04:	ad7fffcc 	andi	r21,r21,65535
  116b08:	2489883a 	add	r4,r4,r18
  116b0c:	1545883a 	add	r2,r2,r21
  116b10:	81003836 	bltu	r16,r4,116bf4 <__divdf3+0x728>
  116b14:	81003626 	beq	r16,r4,116bf0 <__divdf3+0x724>
  116b18:	a5000054 	ori	r20,r20,1
  116b1c:	1880ffc4 	addi	r2,r3,1023
  116b20:	00bf2e0e 	bge	zero,r2,1167dc <__alt_data_end+0xfffd67dc>
  116b24:	a10001cc 	andi	r4,r20,7
  116b28:	20000726 	beq	r4,zero,116b48 <__divdf3+0x67c>
  116b2c:	a10003cc 	andi	r4,r20,15
  116b30:	01400104 	movi	r5,4
  116b34:	21400426 	beq	r4,r5,116b48 <__divdf3+0x67c>
  116b38:	a149883a 	add	r4,r20,r5
  116b3c:	2529803a 	cmpltu	r20,r4,r20
  116b40:	8d23883a 	add	r17,r17,r20
  116b44:	2029883a 	mov	r20,r4
  116b48:	8900402c 	andhi	r4,r17,256
  116b4c:	20000426 	beq	r4,zero,116b60 <__divdf3+0x694>
  116b50:	18810004 	addi	r2,r3,1024
  116b54:	00ffc034 	movhi	r3,65280
  116b58:	18ffffc4 	addi	r3,r3,-1
  116b5c:	88e2703a 	and	r17,r17,r3
  116b60:	00c1ff84 	movi	r3,2046
  116b64:	18beb416 	blt	r3,r2,116638 <__alt_data_end+0xfffd6638>
  116b68:	a028d0fa 	srli	r20,r20,3
  116b6c:	882a977a 	slli	r21,r17,29
  116b70:	8820927a 	slli	r16,r17,9
  116b74:	1081ffcc 	andi	r2,r2,2047
  116b78:	ad2ab03a 	or	r21,r21,r20
  116b7c:	8020d33a 	srli	r16,r16,12
  116b80:	9900004c 	andi	r4,r19,1
  116b84:	003eb006 	br	116648 <__alt_data_end+0xfffd6648>
  116b88:	8080022c 	andhi	r2,r16,8
  116b8c:	10001226 	beq	r2,zero,116bd8 <__divdf3+0x70c>
  116b90:	8880022c 	andhi	r2,r17,8
  116b94:	1000101e 	bne	r2,zero,116bd8 <__divdf3+0x70c>
  116b98:	00800434 	movhi	r2,16
  116b9c:	8c000234 	orhi	r16,r17,8
  116ba0:	10bfffc4 	addi	r2,r2,-1
  116ba4:	b809883a 	mov	r4,r23
  116ba8:	80a0703a 	and	r16,r16,r2
  116bac:	a02b883a 	mov	r21,r20
  116bb0:	003f0806 	br	1167d4 <__alt_data_end+0xfffd67d4>
  116bb4:	008000c4 	movi	r2,3
  116bb8:	3880b126 	beq	r7,r2,116e80 <__divdf3+0x9b4>
  116bbc:	00800044 	movi	r2,1
  116bc0:	38805b1e 	bne	r7,r2,116d30 <__divdf3+0x864>
  116bc4:	e009883a 	mov	r4,fp
  116bc8:	0005883a 	mov	r2,zero
  116bcc:	0021883a 	mov	r16,zero
  116bd0:	002b883a 	mov	r21,zero
  116bd4:	003e9c06 	br	116648 <__alt_data_end+0xfffd6648>
  116bd8:	00800434 	movhi	r2,16
  116bdc:	84000234 	orhi	r16,r16,8
  116be0:	10bfffc4 	addi	r2,r2,-1
  116be4:	b009883a 	mov	r4,r22
  116be8:	80a0703a 	and	r16,r16,r2
  116bec:	003ef906 	br	1167d4 <__alt_data_end+0xfffd67d4>
  116bf0:	103fca26 	beq	r2,zero,116b1c <__alt_data_end+0xfffd6b1c>
  116bf4:	b421883a 	add	r16,r22,r16
  116bf8:	a17fffc4 	addi	r5,r20,-1
  116bfc:	8580422e 	bgeu	r16,r22,116d08 <__divdf3+0x83c>
  116c00:	2829883a 	mov	r20,r5
  116c04:	813fc41e 	bne	r16,r4,116b18 <__alt_data_end+0xfffd6b18>
  116c08:	d9800017 	ldw	r6,0(sp)
  116c0c:	30bfc21e 	bne	r6,r2,116b18 <__alt_data_end+0xfffd6b18>
  116c10:	003fc206 	br	116b1c <__alt_data_end+0xfffd6b1c>
  116c14:	143ff604 	addi	r16,r2,-40
  116c18:	8c20983a 	sll	r16,r17,r16
  116c1c:	002b883a 	mov	r21,zero
  116c20:	003eb406 	br	1166f4 <__alt_data_end+0xfffd66f4>
  116c24:	d9800215 	stw	r6,8(sp)
  116c28:	d9c00515 	stw	r7,20(sp)
  116c2c:	da000415 	stw	r8,16(sp)
  116c30:	01186080 	call	118608 <__clzsi2>
  116c34:	10800804 	addi	r2,r2,32
  116c38:	da000417 	ldw	r8,16(sp)
  116c3c:	d9c00517 	ldw	r7,20(sp)
  116c40:	d9800217 	ldw	r6,8(sp)
  116c44:	003ea106 	br	1166cc <__alt_data_end+0xfffd66cc>
  116c48:	147ff604 	addi	r17,r2,-40
  116c4c:	3462983a 	sll	r17,r6,r17
  116c50:	0029883a 	mov	r20,zero
  116c54:	003ec906 	br	11677c <__alt_data_end+0xfffd677c>
  116c58:	3009883a 	mov	r4,r6
  116c5c:	d9400115 	stw	r5,4(sp)
  116c60:	d9800215 	stw	r6,8(sp)
  116c64:	da000415 	stw	r8,16(sp)
  116c68:	da400315 	stw	r9,12(sp)
  116c6c:	01186080 	call	118608 <__clzsi2>
  116c70:	10800804 	addi	r2,r2,32
  116c74:	da400317 	ldw	r9,12(sp)
  116c78:	da000417 	ldw	r8,16(sp)
  116c7c:	d9800217 	ldw	r6,8(sp)
  116c80:	d9400117 	ldw	r5,4(sp)
  116c84:	003eb306 	br	116754 <__alt_data_end+0xfffd6754>
  116c88:	d9800017 	ldw	r6,0(sp)
  116c8c:	a9ab883a 	add	r21,r21,r6
  116c90:	a98b803a 	cmpltu	r5,r21,r6
  116c94:	2d8b883a 	add	r5,r5,r22
  116c98:	2a11883a 	add	r8,r5,r8
  116c9c:	897fffc4 	addi	r5,r17,-1
  116ca0:	b2000c2e 	bgeu	r22,r8,116cd4 <__divdf3+0x808>
  116ca4:	41003f36 	bltu	r8,r4,116da4 <__divdf3+0x8d8>
  116ca8:	22006c26 	beq	r4,r8,116e5c <__divdf3+0x990>
  116cac:	4109c83a 	sub	r4,r8,r4
  116cb0:	2823883a 	mov	r17,r5
  116cb4:	003f3b06 	br	1169a4 <__alt_data_end+0xfffd69a4>
  116cb8:	ad3ed336 	bltu	r21,r20,116808 <__alt_data_end+0xfffd6808>
  116cbc:	a804d07a 	srli	r2,r21,1
  116cc0:	802e97fa 	slli	r23,r16,31
  116cc4:	a82a97fa 	slli	r21,r21,31
  116cc8:	8020d07a 	srli	r16,r16,1
  116ccc:	b8aeb03a 	or	r23,r23,r2
  116cd0:	003ed006 	br	116814 <__alt_data_end+0xfffd6814>
  116cd4:	b23ff51e 	bne	r22,r8,116cac <__alt_data_end+0xfffd6cac>
  116cd8:	d9800017 	ldw	r6,0(sp)
  116cdc:	a9bff12e 	bgeu	r21,r6,116ca4 <__alt_data_end+0xfffd6ca4>
  116ce0:	b109c83a 	sub	r4,r22,r4
  116ce4:	2823883a 	mov	r17,r5
  116ce8:	003f2e06 	br	1169a4 <__alt_data_end+0xfffd69a4>
  116cec:	2021883a 	mov	r16,r4
  116cf0:	003eff06 	br	1168f0 <__alt_data_end+0xfffd68f0>
  116cf4:	2023883a 	mov	r17,r4
  116cf8:	003ee406 	br	11688c <__alt_data_end+0xfffd688c>
  116cfc:	a8bfe236 	bltu	r21,r2,116c88 <__alt_data_end+0xfffd6c88>
  116d00:	0009883a 	mov	r4,zero
  116d04:	003f2706 	br	1169a4 <__alt_data_end+0xfffd69a4>
  116d08:	81002d36 	bltu	r16,r4,116dc0 <__divdf3+0x8f4>
  116d0c:	24005626 	beq	r4,r16,116e68 <__divdf3+0x99c>
  116d10:	2829883a 	mov	r20,r5
  116d14:	003f8006 	br	116b18 <__alt_data_end+0xfffd6b18>
  116d18:	053fffc4 	movi	r20,-1
  116d1c:	003f7f06 	br	116b1c <__alt_data_end+0xfffd6b1c>
  116d20:	200f883a 	mov	r7,r4
  116d24:	003f3c06 	br	116a18 <__alt_data_end+0xfffd6a18>
  116d28:	1011883a 	mov	r8,r2
  116d2c:	003f5506 	br	116a84 <__alt_data_end+0xfffd6a84>
  116d30:	e027883a 	mov	r19,fp
  116d34:	003f7906 	br	116b1c <__alt_data_end+0xfffd6b1c>
  116d38:	010007c4 	movi	r4,31
  116d3c:	20c02816 	blt	r4,r3,116de0 <__divdf3+0x914>
  116d40:	00800804 	movi	r2,32
  116d44:	10c5c83a 	sub	r2,r2,r3
  116d48:	888a983a 	sll	r5,r17,r2
  116d4c:	a0c8d83a 	srl	r4,r20,r3
  116d50:	a084983a 	sll	r2,r20,r2
  116d54:	88e2d83a 	srl	r17,r17,r3
  116d58:	2906b03a 	or	r3,r5,r4
  116d5c:	1004c03a 	cmpne	r2,r2,zero
  116d60:	1886b03a 	or	r3,r3,r2
  116d64:	188001cc 	andi	r2,r3,7
  116d68:	10000726 	beq	r2,zero,116d88 <__divdf3+0x8bc>
  116d6c:	188003cc 	andi	r2,r3,15
  116d70:	01000104 	movi	r4,4
  116d74:	11000426 	beq	r2,r4,116d88 <__divdf3+0x8bc>
  116d78:	1805883a 	mov	r2,r3
  116d7c:	10c00104 	addi	r3,r2,4
  116d80:	1885803a 	cmpltu	r2,r3,r2
  116d84:	88a3883a 	add	r17,r17,r2
  116d88:	8880202c 	andhi	r2,r17,128
  116d8c:	10002926 	beq	r2,zero,116e34 <__divdf3+0x968>
  116d90:	9900004c 	andi	r4,r19,1
  116d94:	00800044 	movi	r2,1
  116d98:	0021883a 	mov	r16,zero
  116d9c:	002b883a 	mov	r21,zero
  116da0:	003e2906 	br	116648 <__alt_data_end+0xfffd6648>
  116da4:	d9800017 	ldw	r6,0(sp)
  116da8:	8c7fff84 	addi	r17,r17,-2
  116dac:	a9ab883a 	add	r21,r21,r6
  116db0:	a98b803a 	cmpltu	r5,r21,r6
  116db4:	2d8b883a 	add	r5,r5,r22
  116db8:	2a11883a 	add	r8,r5,r8
  116dbc:	003ef806 	br	1169a0 <__alt_data_end+0xfffd69a0>
  116dc0:	d9800017 	ldw	r6,0(sp)
  116dc4:	318f883a 	add	r7,r6,r6
  116dc8:	398b803a 	cmpltu	r5,r7,r6
  116dcc:	2d8d883a 	add	r6,r5,r22
  116dd0:	81a1883a 	add	r16,r16,r6
  116dd4:	a17fff84 	addi	r5,r20,-2
  116dd8:	d9c00015 	stw	r7,0(sp)
  116ddc:	003f8806 	br	116c00 <__alt_data_end+0xfffd6c00>
  116de0:	013ff844 	movi	r4,-31
  116de4:	2085c83a 	sub	r2,r4,r2
  116de8:	8888d83a 	srl	r4,r17,r2
  116dec:	00800804 	movi	r2,32
  116df0:	18802126 	beq	r3,r2,116e78 <__divdf3+0x9ac>
  116df4:	04001004 	movi	r16,64
  116df8:	80c7c83a 	sub	r3,r16,r3
  116dfc:	88e0983a 	sll	r16,r17,r3
  116e00:	8504b03a 	or	r2,r16,r20
  116e04:	1004c03a 	cmpne	r2,r2,zero
  116e08:	2084b03a 	or	r2,r4,r2
  116e0c:	144001cc 	andi	r17,r2,7
  116e10:	88000d1e 	bne	r17,zero,116e48 <__divdf3+0x97c>
  116e14:	0021883a 	mov	r16,zero
  116e18:	102ad0fa 	srli	r21,r2,3
  116e1c:	9900004c 	andi	r4,r19,1
  116e20:	0005883a 	mov	r2,zero
  116e24:	ac6ab03a 	or	r21,r21,r17
  116e28:	003e0706 	br	116648 <__alt_data_end+0xfffd6648>
  116e2c:	1007883a 	mov	r3,r2
  116e30:	0023883a 	mov	r17,zero
  116e34:	8820927a 	slli	r16,r17,9
  116e38:	1805883a 	mov	r2,r3
  116e3c:	8822977a 	slli	r17,r17,29
  116e40:	8020d33a 	srli	r16,r16,12
  116e44:	003ff406 	br	116e18 <__alt_data_end+0xfffd6e18>
  116e48:	10c003cc 	andi	r3,r2,15
  116e4c:	01000104 	movi	r4,4
  116e50:	193ff626 	beq	r3,r4,116e2c <__alt_data_end+0xfffd6e2c>
  116e54:	0023883a 	mov	r17,zero
  116e58:	003fc806 	br	116d7c <__alt_data_end+0xfffd6d7c>
  116e5c:	a8bfd136 	bltu	r21,r2,116da4 <__alt_data_end+0xfffd6da4>
  116e60:	2823883a 	mov	r17,r5
  116e64:	003fa606 	br	116d00 <__alt_data_end+0xfffd6d00>
  116e68:	d9800017 	ldw	r6,0(sp)
  116e6c:	30bfd436 	bltu	r6,r2,116dc0 <__alt_data_end+0xfffd6dc0>
  116e70:	2829883a 	mov	r20,r5
  116e74:	003f6406 	br	116c08 <__alt_data_end+0xfffd6c08>
  116e78:	0021883a 	mov	r16,zero
  116e7c:	003fe006 	br	116e00 <__alt_data_end+0xfffd6e00>
  116e80:	00800434 	movhi	r2,16
  116e84:	8c000234 	orhi	r16,r17,8
  116e88:	10bfffc4 	addi	r2,r2,-1
  116e8c:	e009883a 	mov	r4,fp
  116e90:	80a0703a 	and	r16,r16,r2
  116e94:	a02b883a 	mov	r21,r20
  116e98:	003e4e06 	br	1167d4 <__alt_data_end+0xfffd67d4>

00116e9c <__eqdf2>:
  116e9c:	2804d53a 	srli	r2,r5,20
  116ea0:	3806d53a 	srli	r3,r7,20
  116ea4:	02000434 	movhi	r8,16
  116ea8:	423fffc4 	addi	r8,r8,-1
  116eac:	1081ffcc 	andi	r2,r2,2047
  116eb0:	0281ffc4 	movi	r10,2047
  116eb4:	2a12703a 	and	r9,r5,r8
  116eb8:	18c1ffcc 	andi	r3,r3,2047
  116ebc:	3a10703a 	and	r8,r7,r8
  116ec0:	280ad7fa 	srli	r5,r5,31
  116ec4:	380ed7fa 	srli	r7,r7,31
  116ec8:	12801026 	beq	r2,r10,116f0c <__eqdf2+0x70>
  116ecc:	0281ffc4 	movi	r10,2047
  116ed0:	1a800a26 	beq	r3,r10,116efc <__eqdf2+0x60>
  116ed4:	10c00226 	beq	r2,r3,116ee0 <__eqdf2+0x44>
  116ed8:	00800044 	movi	r2,1
  116edc:	f800283a 	ret
  116ee0:	4a3ffd1e 	bne	r9,r8,116ed8 <__alt_data_end+0xfffd6ed8>
  116ee4:	21bffc1e 	bne	r4,r6,116ed8 <__alt_data_end+0xfffd6ed8>
  116ee8:	29c00c26 	beq	r5,r7,116f1c <__eqdf2+0x80>
  116eec:	103ffa1e 	bne	r2,zero,116ed8 <__alt_data_end+0xfffd6ed8>
  116ef0:	2244b03a 	or	r2,r4,r9
  116ef4:	1004c03a 	cmpne	r2,r2,zero
  116ef8:	f800283a 	ret
  116efc:	3214b03a 	or	r10,r6,r8
  116f00:	503ff426 	beq	r10,zero,116ed4 <__alt_data_end+0xfffd6ed4>
  116f04:	00800044 	movi	r2,1
  116f08:	f800283a 	ret
  116f0c:	2254b03a 	or	r10,r4,r9
  116f10:	503fee26 	beq	r10,zero,116ecc <__alt_data_end+0xfffd6ecc>
  116f14:	00800044 	movi	r2,1
  116f18:	f800283a 	ret
  116f1c:	0005883a 	mov	r2,zero
  116f20:	f800283a 	ret

00116f24 <__gedf2>:
  116f24:	2804d53a 	srli	r2,r5,20
  116f28:	3806d53a 	srli	r3,r7,20
  116f2c:	02000434 	movhi	r8,16
  116f30:	423fffc4 	addi	r8,r8,-1
  116f34:	1081ffcc 	andi	r2,r2,2047
  116f38:	0241ffc4 	movi	r9,2047
  116f3c:	2a14703a 	and	r10,r5,r8
  116f40:	18c1ffcc 	andi	r3,r3,2047
  116f44:	3a10703a 	and	r8,r7,r8
  116f48:	280ad7fa 	srli	r5,r5,31
  116f4c:	380ed7fa 	srli	r7,r7,31
  116f50:	12401d26 	beq	r2,r9,116fc8 <__gedf2+0xa4>
  116f54:	0241ffc4 	movi	r9,2047
  116f58:	1a401226 	beq	r3,r9,116fa4 <__gedf2+0x80>
  116f5c:	1000081e 	bne	r2,zero,116f80 <__gedf2+0x5c>
  116f60:	2296b03a 	or	r11,r4,r10
  116f64:	5813003a 	cmpeq	r9,r11,zero
  116f68:	1800091e 	bne	r3,zero,116f90 <__gedf2+0x6c>
  116f6c:	3218b03a 	or	r12,r6,r8
  116f70:	6000071e 	bne	r12,zero,116f90 <__gedf2+0x6c>
  116f74:	0005883a 	mov	r2,zero
  116f78:	5800101e 	bne	r11,zero,116fbc <__gedf2+0x98>
  116f7c:	f800283a 	ret
  116f80:	18000c1e 	bne	r3,zero,116fb4 <__gedf2+0x90>
  116f84:	3212b03a 	or	r9,r6,r8
  116f88:	48000c26 	beq	r9,zero,116fbc <__gedf2+0x98>
  116f8c:	0013883a 	mov	r9,zero
  116f90:	39c03fcc 	andi	r7,r7,255
  116f94:	48000826 	beq	r9,zero,116fb8 <__gedf2+0x94>
  116f98:	38000926 	beq	r7,zero,116fc0 <__gedf2+0x9c>
  116f9c:	00800044 	movi	r2,1
  116fa0:	f800283a 	ret
  116fa4:	3212b03a 	or	r9,r6,r8
  116fa8:	483fec26 	beq	r9,zero,116f5c <__alt_data_end+0xfffd6f5c>
  116fac:	00bfff84 	movi	r2,-2
  116fb0:	f800283a 	ret
  116fb4:	39c03fcc 	andi	r7,r7,255
  116fb8:	29c00626 	beq	r5,r7,116fd4 <__gedf2+0xb0>
  116fbc:	283ff726 	beq	r5,zero,116f9c <__alt_data_end+0xfffd6f9c>
  116fc0:	00bfffc4 	movi	r2,-1
  116fc4:	f800283a 	ret
  116fc8:	2292b03a 	or	r9,r4,r10
  116fcc:	483fe126 	beq	r9,zero,116f54 <__alt_data_end+0xfffd6f54>
  116fd0:	003ff606 	br	116fac <__alt_data_end+0xfffd6fac>
  116fd4:	18bff916 	blt	r3,r2,116fbc <__alt_data_end+0xfffd6fbc>
  116fd8:	10c00316 	blt	r2,r3,116fe8 <__gedf2+0xc4>
  116fdc:	42bff736 	bltu	r8,r10,116fbc <__alt_data_end+0xfffd6fbc>
  116fe0:	52000326 	beq	r10,r8,116ff0 <__gedf2+0xcc>
  116fe4:	5200042e 	bgeu	r10,r8,116ff8 <__gedf2+0xd4>
  116fe8:	283fec1e 	bne	r5,zero,116f9c <__alt_data_end+0xfffd6f9c>
  116fec:	003ff406 	br	116fc0 <__alt_data_end+0xfffd6fc0>
  116ff0:	313ff236 	bltu	r6,r4,116fbc <__alt_data_end+0xfffd6fbc>
  116ff4:	21bffc36 	bltu	r4,r6,116fe8 <__alt_data_end+0xfffd6fe8>
  116ff8:	0005883a 	mov	r2,zero
  116ffc:	f800283a 	ret

00117000 <__ledf2>:
  117000:	2804d53a 	srli	r2,r5,20
  117004:	3810d53a 	srli	r8,r7,20
  117008:	00c00434 	movhi	r3,16
  11700c:	18ffffc4 	addi	r3,r3,-1
  117010:	1081ffcc 	andi	r2,r2,2047
  117014:	0241ffc4 	movi	r9,2047
  117018:	28d4703a 	and	r10,r5,r3
  11701c:	4201ffcc 	andi	r8,r8,2047
  117020:	38c6703a 	and	r3,r7,r3
  117024:	280ad7fa 	srli	r5,r5,31
  117028:	380ed7fa 	srli	r7,r7,31
  11702c:	12401f26 	beq	r2,r9,1170ac <__ledf2+0xac>
  117030:	0241ffc4 	movi	r9,2047
  117034:	42401426 	beq	r8,r9,117088 <__ledf2+0x88>
  117038:	1000091e 	bne	r2,zero,117060 <__ledf2+0x60>
  11703c:	2296b03a 	or	r11,r4,r10
  117040:	5813003a 	cmpeq	r9,r11,zero
  117044:	29403fcc 	andi	r5,r5,255
  117048:	40000a1e 	bne	r8,zero,117074 <__ledf2+0x74>
  11704c:	30d8b03a 	or	r12,r6,r3
  117050:	6000081e 	bne	r12,zero,117074 <__ledf2+0x74>
  117054:	0005883a 	mov	r2,zero
  117058:	5800111e 	bne	r11,zero,1170a0 <__ledf2+0xa0>
  11705c:	f800283a 	ret
  117060:	29403fcc 	andi	r5,r5,255
  117064:	40000c1e 	bne	r8,zero,117098 <__ledf2+0x98>
  117068:	30d2b03a 	or	r9,r6,r3
  11706c:	48000c26 	beq	r9,zero,1170a0 <__ledf2+0xa0>
  117070:	0013883a 	mov	r9,zero
  117074:	39c03fcc 	andi	r7,r7,255
  117078:	48000826 	beq	r9,zero,11709c <__ledf2+0x9c>
  11707c:	38001126 	beq	r7,zero,1170c4 <__ledf2+0xc4>
  117080:	00800044 	movi	r2,1
  117084:	f800283a 	ret
  117088:	30d2b03a 	or	r9,r6,r3
  11708c:	483fea26 	beq	r9,zero,117038 <__alt_data_end+0xfffd7038>
  117090:	00800084 	movi	r2,2
  117094:	f800283a 	ret
  117098:	39c03fcc 	andi	r7,r7,255
  11709c:	39400726 	beq	r7,r5,1170bc <__ledf2+0xbc>
  1170a0:	2800081e 	bne	r5,zero,1170c4 <__ledf2+0xc4>
  1170a4:	00800044 	movi	r2,1
  1170a8:	f800283a 	ret
  1170ac:	2292b03a 	or	r9,r4,r10
  1170b0:	483fdf26 	beq	r9,zero,117030 <__alt_data_end+0xfffd7030>
  1170b4:	00800084 	movi	r2,2
  1170b8:	f800283a 	ret
  1170bc:	4080030e 	bge	r8,r2,1170cc <__ledf2+0xcc>
  1170c0:	383fef26 	beq	r7,zero,117080 <__alt_data_end+0xfffd7080>
  1170c4:	00bfffc4 	movi	r2,-1
  1170c8:	f800283a 	ret
  1170cc:	123feb16 	blt	r2,r8,11707c <__alt_data_end+0xfffd707c>
  1170d0:	1abff336 	bltu	r3,r10,1170a0 <__alt_data_end+0xfffd70a0>
  1170d4:	50c00326 	beq	r10,r3,1170e4 <__ledf2+0xe4>
  1170d8:	50c0042e 	bgeu	r10,r3,1170ec <__ledf2+0xec>
  1170dc:	283fe81e 	bne	r5,zero,117080 <__alt_data_end+0xfffd7080>
  1170e0:	003ff806 	br	1170c4 <__alt_data_end+0xfffd70c4>
  1170e4:	313fee36 	bltu	r6,r4,1170a0 <__alt_data_end+0xfffd70a0>
  1170e8:	21bffc36 	bltu	r4,r6,1170dc <__alt_data_end+0xfffd70dc>
  1170ec:	0005883a 	mov	r2,zero
  1170f0:	f800283a 	ret

001170f4 <__muldf3>:
  1170f4:	deffee04 	addi	sp,sp,-72
  1170f8:	dd000c15 	stw	r20,48(sp)
  1170fc:	2828d53a 	srli	r20,r5,20
  117100:	ddc00f15 	stw	r23,60(sp)
  117104:	282ed7fa 	srli	r23,r5,31
  117108:	dc000815 	stw	r16,32(sp)
  11710c:	04000434 	movhi	r16,16
  117110:	dcc00b15 	stw	r19,44(sp)
  117114:	843fffc4 	addi	r16,r16,-1
  117118:	dfc01115 	stw	ra,68(sp)
  11711c:	df001015 	stw	fp,64(sp)
  117120:	dd800e15 	stw	r22,56(sp)
  117124:	dd400d15 	stw	r21,52(sp)
  117128:	dc800a15 	stw	r18,40(sp)
  11712c:	dc400915 	stw	r17,36(sp)
  117130:	a501ffcc 	andi	r20,r20,2047
  117134:	2c20703a 	and	r16,r5,r16
  117138:	b827883a 	mov	r19,r23
  11713c:	ba403fcc 	andi	r9,r23,255
  117140:	a0006026 	beq	r20,zero,1172c4 <__muldf3+0x1d0>
  117144:	0081ffc4 	movi	r2,2047
  117148:	202d883a 	mov	r22,r4
  11714c:	a0803626 	beq	r20,r2,117228 <__muldf3+0x134>
  117150:	84000434 	orhi	r16,r16,16
  117154:	200ad77a 	srli	r5,r4,29
  117158:	800490fa 	slli	r2,r16,3
  11715c:	202c90fa 	slli	r22,r4,3
  117160:	a53f0044 	addi	r20,r20,-1023
  117164:	28a0b03a 	or	r16,r5,r2
  117168:	002b883a 	mov	r21,zero
  11716c:	000b883a 	mov	r5,zero
  117170:	3804d53a 	srli	r2,r7,20
  117174:	3838d7fa 	srli	fp,r7,31
  117178:	04400434 	movhi	r17,16
  11717c:	8c7fffc4 	addi	r17,r17,-1
  117180:	1081ffcc 	andi	r2,r2,2047
  117184:	3025883a 	mov	r18,r6
  117188:	3c62703a 	and	r17,r7,r17
  11718c:	e2803fcc 	andi	r10,fp,255
  117190:	10006d26 	beq	r2,zero,117348 <__muldf3+0x254>
  117194:	00c1ffc4 	movi	r3,2047
  117198:	10c06526 	beq	r2,r3,117330 <__muldf3+0x23c>
  11719c:	8c400434 	orhi	r17,r17,16
  1171a0:	300ed77a 	srli	r7,r6,29
  1171a4:	880690fa 	slli	r3,r17,3
  1171a8:	302490fa 	slli	r18,r6,3
  1171ac:	10bf0044 	addi	r2,r2,-1023
  1171b0:	38e2b03a 	or	r17,r7,r3
  1171b4:	000f883a 	mov	r7,zero
  1171b8:	a087883a 	add	r3,r20,r2
  1171bc:	010003c4 	movi	r4,15
  1171c0:	3d44b03a 	or	r2,r7,r21
  1171c4:	e5ccf03a 	xor	r6,fp,r23
  1171c8:	1a000044 	addi	r8,r3,1
  1171cc:	20809b36 	bltu	r4,r2,11743c <__muldf3+0x348>
  1171d0:	100490ba 	slli	r2,r2,2
  1171d4:	01000474 	movhi	r4,17
  1171d8:	211c7a04 	addi	r4,r4,29160
  1171dc:	1105883a 	add	r2,r2,r4
  1171e0:	10800017 	ldw	r2,0(r2)
  1171e4:	1000683a 	jmp	r2
  1171e8:	0011743c 	xorhi	zero,zero,17872
  1171ec:	00117248 	cmpgei	zero,zero,17865
  1171f0:	00117248 	cmpgei	zero,zero,17865
  1171f4:	00117244 	movi	zero,17865
  1171f8:	00117418 	cmpnei	zero,zero,17872
  1171fc:	00117418 	cmpnei	zero,zero,17872
  117200:	00117400 	call	11740 <OSCtxSw_SWITCH_PC+0x11700>
  117204:	00117244 	movi	zero,17865
  117208:	00117418 	cmpnei	zero,zero,17872
  11720c:	00117400 	call	11740 <OSCtxSw_SWITCH_PC+0x11700>
  117210:	00117418 	cmpnei	zero,zero,17872
  117214:	00117244 	movi	zero,17865
  117218:	00117428 	cmpgeui	zero,zero,17872
  11721c:	00117428 	cmpgeui	zero,zero,17872
  117220:	00117428 	cmpgeui	zero,zero,17872
  117224:	00117788 	cmpgei	zero,zero,17886
  117228:	2404b03a 	or	r2,r4,r16
  11722c:	1000711e 	bne	r2,zero,1173f4 <__muldf3+0x300>
  117230:	05400204 	movi	r21,8
  117234:	0021883a 	mov	r16,zero
  117238:	002d883a 	mov	r22,zero
  11723c:	01400084 	movi	r5,2
  117240:	003fcb06 	br	117170 <__alt_data_end+0xfffd7170>
  117244:	500d883a 	mov	r6,r10
  117248:	00800084 	movi	r2,2
  11724c:	38805926 	beq	r7,r2,1173b4 <__muldf3+0x2c0>
  117250:	008000c4 	movi	r2,3
  117254:	3881bb26 	beq	r7,r2,117944 <__muldf3+0x850>
  117258:	00800044 	movi	r2,1
  11725c:	3881961e 	bne	r7,r2,1178b8 <__muldf3+0x7c4>
  117260:	3027883a 	mov	r19,r6
  117264:	0005883a 	mov	r2,zero
  117268:	0021883a 	mov	r16,zero
  11726c:	002d883a 	mov	r22,zero
  117270:	1004953a 	slli	r2,r2,20
  117274:	98c03fcc 	andi	r3,r19,255
  117278:	04400434 	movhi	r17,16
  11727c:	8c7fffc4 	addi	r17,r17,-1
  117280:	180697fa 	slli	r3,r3,31
  117284:	8460703a 	and	r16,r16,r17
  117288:	80a0b03a 	or	r16,r16,r2
  11728c:	80c6b03a 	or	r3,r16,r3
  117290:	b005883a 	mov	r2,r22
  117294:	dfc01117 	ldw	ra,68(sp)
  117298:	df001017 	ldw	fp,64(sp)
  11729c:	ddc00f17 	ldw	r23,60(sp)
  1172a0:	dd800e17 	ldw	r22,56(sp)
  1172a4:	dd400d17 	ldw	r21,52(sp)
  1172a8:	dd000c17 	ldw	r20,48(sp)
  1172ac:	dcc00b17 	ldw	r19,44(sp)
  1172b0:	dc800a17 	ldw	r18,40(sp)
  1172b4:	dc400917 	ldw	r17,36(sp)
  1172b8:	dc000817 	ldw	r16,32(sp)
  1172bc:	dec01204 	addi	sp,sp,72
  1172c0:	f800283a 	ret
  1172c4:	2404b03a 	or	r2,r4,r16
  1172c8:	202b883a 	mov	r21,r4
  1172cc:	10004426 	beq	r2,zero,1173e0 <__muldf3+0x2ec>
  1172d0:	80015126 	beq	r16,zero,117818 <__muldf3+0x724>
  1172d4:	8009883a 	mov	r4,r16
  1172d8:	d9800715 	stw	r6,28(sp)
  1172dc:	d9c00215 	stw	r7,8(sp)
  1172e0:	da400415 	stw	r9,16(sp)
  1172e4:	01186080 	call	118608 <__clzsi2>
  1172e8:	d9800717 	ldw	r6,28(sp)
  1172ec:	d9c00217 	ldw	r7,8(sp)
  1172f0:	da400417 	ldw	r9,16(sp)
  1172f4:	113ffd44 	addi	r4,r2,-11
  1172f8:	00c00704 	movi	r3,28
  1172fc:	19014216 	blt	r3,r4,117808 <__muldf3+0x714>
  117300:	00c00744 	movi	r3,29
  117304:	15bffe04 	addi	r22,r2,-8
  117308:	1907c83a 	sub	r3,r3,r4
  11730c:	85a0983a 	sll	r16,r16,r22
  117310:	a8c6d83a 	srl	r3,r21,r3
  117314:	adac983a 	sll	r22,r21,r22
  117318:	1c20b03a 	or	r16,r3,r16
  11731c:	1080fcc4 	addi	r2,r2,1011
  117320:	00a9c83a 	sub	r20,zero,r2
  117324:	002b883a 	mov	r21,zero
  117328:	000b883a 	mov	r5,zero
  11732c:	003f9006 	br	117170 <__alt_data_end+0xfffd7170>
  117330:	3446b03a 	or	r3,r6,r17
  117334:	1800281e 	bne	r3,zero,1173d8 <__muldf3+0x2e4>
  117338:	0023883a 	mov	r17,zero
  11733c:	0025883a 	mov	r18,zero
  117340:	01c00084 	movi	r7,2
  117344:	003f9c06 	br	1171b8 <__alt_data_end+0xfffd71b8>
  117348:	3446b03a 	or	r3,r6,r17
  11734c:	18001e26 	beq	r3,zero,1173c8 <__muldf3+0x2d4>
  117350:	88012126 	beq	r17,zero,1177d8 <__muldf3+0x6e4>
  117354:	8809883a 	mov	r4,r17
  117358:	d9400215 	stw	r5,8(sp)
  11735c:	d9800715 	stw	r6,28(sp)
  117360:	da400415 	stw	r9,16(sp)
  117364:	da800315 	stw	r10,12(sp)
  117368:	01186080 	call	118608 <__clzsi2>
  11736c:	d9400217 	ldw	r5,8(sp)
  117370:	d9800717 	ldw	r6,28(sp)
  117374:	da400417 	ldw	r9,16(sp)
  117378:	da800317 	ldw	r10,12(sp)
  11737c:	113ffd44 	addi	r4,r2,-11
  117380:	00c00704 	movi	r3,28
  117384:	19011016 	blt	r3,r4,1177c8 <__muldf3+0x6d4>
  117388:	00c00744 	movi	r3,29
  11738c:	14bffe04 	addi	r18,r2,-8
  117390:	1907c83a 	sub	r3,r3,r4
  117394:	8ca2983a 	sll	r17,r17,r18
  117398:	30c6d83a 	srl	r3,r6,r3
  11739c:	34a4983a 	sll	r18,r6,r18
  1173a0:	1c62b03a 	or	r17,r3,r17
  1173a4:	1080fcc4 	addi	r2,r2,1011
  1173a8:	0085c83a 	sub	r2,zero,r2
  1173ac:	000f883a 	mov	r7,zero
  1173b0:	003f8106 	br	1171b8 <__alt_data_end+0xfffd71b8>
  1173b4:	3027883a 	mov	r19,r6
  1173b8:	0081ffc4 	movi	r2,2047
  1173bc:	0021883a 	mov	r16,zero
  1173c0:	002d883a 	mov	r22,zero
  1173c4:	003faa06 	br	117270 <__alt_data_end+0xfffd7270>
  1173c8:	0023883a 	mov	r17,zero
  1173cc:	0025883a 	mov	r18,zero
  1173d0:	01c00044 	movi	r7,1
  1173d4:	003f7806 	br	1171b8 <__alt_data_end+0xfffd71b8>
  1173d8:	01c000c4 	movi	r7,3
  1173dc:	003f7606 	br	1171b8 <__alt_data_end+0xfffd71b8>
  1173e0:	05400104 	movi	r21,4
  1173e4:	0021883a 	mov	r16,zero
  1173e8:	002d883a 	mov	r22,zero
  1173ec:	01400044 	movi	r5,1
  1173f0:	003f5f06 	br	117170 <__alt_data_end+0xfffd7170>
  1173f4:	05400304 	movi	r21,12
  1173f8:	014000c4 	movi	r5,3
  1173fc:	003f5c06 	br	117170 <__alt_data_end+0xfffd7170>
  117400:	04000434 	movhi	r16,16
  117404:	0027883a 	mov	r19,zero
  117408:	843fffc4 	addi	r16,r16,-1
  11740c:	05bfffc4 	movi	r22,-1
  117410:	0081ffc4 	movi	r2,2047
  117414:	003f9606 	br	117270 <__alt_data_end+0xfffd7270>
  117418:	8023883a 	mov	r17,r16
  11741c:	b025883a 	mov	r18,r22
  117420:	280f883a 	mov	r7,r5
  117424:	003f8806 	br	117248 <__alt_data_end+0xfffd7248>
  117428:	8023883a 	mov	r17,r16
  11742c:	b025883a 	mov	r18,r22
  117430:	480d883a 	mov	r6,r9
  117434:	280f883a 	mov	r7,r5
  117438:	003f8306 	br	117248 <__alt_data_end+0xfffd7248>
  11743c:	b026d43a 	srli	r19,r22,16
  117440:	902ed43a 	srli	r23,r18,16
  117444:	b5bfffcc 	andi	r22,r22,65535
  117448:	94bfffcc 	andi	r18,r18,65535
  11744c:	b00b883a 	mov	r5,r22
  117450:	9009883a 	mov	r4,r18
  117454:	d8c00515 	stw	r3,20(sp)
  117458:	d9800715 	stw	r6,28(sp)
  11745c:	da000615 	stw	r8,24(sp)
  117460:	01159fc0 	call	1159fc <__mulsi3>
  117464:	980b883a 	mov	r5,r19
  117468:	9009883a 	mov	r4,r18
  11746c:	1029883a 	mov	r20,r2
  117470:	01159fc0 	call	1159fc <__mulsi3>
  117474:	b80b883a 	mov	r5,r23
  117478:	9809883a 	mov	r4,r19
  11747c:	102b883a 	mov	r21,r2
  117480:	01159fc0 	call	1159fc <__mulsi3>
  117484:	b809883a 	mov	r4,r23
  117488:	b00b883a 	mov	r5,r22
  11748c:	1039883a 	mov	fp,r2
  117490:	01159fc0 	call	1159fc <__mulsi3>
  117494:	a008d43a 	srli	r4,r20,16
  117498:	1545883a 	add	r2,r2,r21
  11749c:	d8c00517 	ldw	r3,20(sp)
  1174a0:	2085883a 	add	r2,r4,r2
  1174a4:	d9800717 	ldw	r6,28(sp)
  1174a8:	da000617 	ldw	r8,24(sp)
  1174ac:	1540022e 	bgeu	r2,r21,1174b8 <__muldf3+0x3c4>
  1174b0:	01000074 	movhi	r4,1
  1174b4:	e139883a 	add	fp,fp,r4
  1174b8:	100e943a 	slli	r7,r2,16
  1174bc:	1004d43a 	srli	r2,r2,16
  1174c0:	882ad43a 	srli	r21,r17,16
  1174c4:	a53fffcc 	andi	r20,r20,65535
  1174c8:	8c7fffcc 	andi	r17,r17,65535
  1174cc:	3d29883a 	add	r20,r7,r20
  1174d0:	b00b883a 	mov	r5,r22
  1174d4:	8809883a 	mov	r4,r17
  1174d8:	d8c00515 	stw	r3,20(sp)
  1174dc:	d9800715 	stw	r6,28(sp)
  1174e0:	da000615 	stw	r8,24(sp)
  1174e4:	dd000115 	stw	r20,4(sp)
  1174e8:	d8800015 	stw	r2,0(sp)
  1174ec:	01159fc0 	call	1159fc <__mulsi3>
  1174f0:	980b883a 	mov	r5,r19
  1174f4:	8809883a 	mov	r4,r17
  1174f8:	d8800215 	stw	r2,8(sp)
  1174fc:	01159fc0 	call	1159fc <__mulsi3>
  117500:	9809883a 	mov	r4,r19
  117504:	a80b883a 	mov	r5,r21
  117508:	1029883a 	mov	r20,r2
  11750c:	01159fc0 	call	1159fc <__mulsi3>
  117510:	b00b883a 	mov	r5,r22
  117514:	a809883a 	mov	r4,r21
  117518:	d8800415 	stw	r2,16(sp)
  11751c:	01159fc0 	call	1159fc <__mulsi3>
  117520:	d9c00217 	ldw	r7,8(sp)
  117524:	1505883a 	add	r2,r2,r20
  117528:	d8c00517 	ldw	r3,20(sp)
  11752c:	3826d43a 	srli	r19,r7,16
  117530:	d9800717 	ldw	r6,28(sp)
  117534:	da000617 	ldw	r8,24(sp)
  117538:	9885883a 	add	r2,r19,r2
  11753c:	da400417 	ldw	r9,16(sp)
  117540:	1500022e 	bgeu	r2,r20,11754c <__muldf3+0x458>
  117544:	01000074 	movhi	r4,1
  117548:	4913883a 	add	r9,r9,r4
  11754c:	1028d43a 	srli	r20,r2,16
  117550:	1004943a 	slli	r2,r2,16
  117554:	802cd43a 	srli	r22,r16,16
  117558:	843fffcc 	andi	r16,r16,65535
  11755c:	3cffffcc 	andi	r19,r7,65535
  117560:	9009883a 	mov	r4,r18
  117564:	800b883a 	mov	r5,r16
  117568:	a269883a 	add	r20,r20,r9
  11756c:	d8c00515 	stw	r3,20(sp)
  117570:	d9800715 	stw	r6,28(sp)
  117574:	da000615 	stw	r8,24(sp)
  117578:	14e7883a 	add	r19,r2,r19
  11757c:	01159fc0 	call	1159fc <__mulsi3>
  117580:	9009883a 	mov	r4,r18
  117584:	b00b883a 	mov	r5,r22
  117588:	d8800315 	stw	r2,12(sp)
  11758c:	01159fc0 	call	1159fc <__mulsi3>
  117590:	b809883a 	mov	r4,r23
  117594:	b00b883a 	mov	r5,r22
  117598:	d8800215 	stw	r2,8(sp)
  11759c:	01159fc0 	call	1159fc <__mulsi3>
  1175a0:	b80b883a 	mov	r5,r23
  1175a4:	8009883a 	mov	r4,r16
  1175a8:	d8800415 	stw	r2,16(sp)
  1175ac:	01159fc0 	call	1159fc <__mulsi3>
  1175b0:	da800317 	ldw	r10,12(sp)
  1175b4:	d9c00217 	ldw	r7,8(sp)
  1175b8:	d9000017 	ldw	r4,0(sp)
  1175bc:	502ed43a 	srli	r23,r10,16
  1175c0:	11c5883a 	add	r2,r2,r7
  1175c4:	24e5883a 	add	r18,r4,r19
  1175c8:	b885883a 	add	r2,r23,r2
  1175cc:	d8c00517 	ldw	r3,20(sp)
  1175d0:	d9800717 	ldw	r6,28(sp)
  1175d4:	da000617 	ldw	r8,24(sp)
  1175d8:	da400417 	ldw	r9,16(sp)
  1175dc:	11c0022e 	bgeu	r2,r7,1175e8 <__muldf3+0x4f4>
  1175e0:	01000074 	movhi	r4,1
  1175e4:	4913883a 	add	r9,r9,r4
  1175e8:	100ed43a 	srli	r7,r2,16
  1175ec:	1004943a 	slli	r2,r2,16
  1175f0:	55ffffcc 	andi	r23,r10,65535
  1175f4:	3a53883a 	add	r9,r7,r9
  1175f8:	8809883a 	mov	r4,r17
  1175fc:	800b883a 	mov	r5,r16
  117600:	d8c00515 	stw	r3,20(sp)
  117604:	d9800715 	stw	r6,28(sp)
  117608:	da000615 	stw	r8,24(sp)
  11760c:	da400415 	stw	r9,16(sp)
  117610:	15ef883a 	add	r23,r2,r23
  117614:	01159fc0 	call	1159fc <__mulsi3>
  117618:	8809883a 	mov	r4,r17
  11761c:	b00b883a 	mov	r5,r22
  117620:	d8800215 	stw	r2,8(sp)
  117624:	01159fc0 	call	1159fc <__mulsi3>
  117628:	b00b883a 	mov	r5,r22
  11762c:	a809883a 	mov	r4,r21
  117630:	d8800315 	stw	r2,12(sp)
  117634:	01159fc0 	call	1159fc <__mulsi3>
  117638:	8009883a 	mov	r4,r16
  11763c:	a80b883a 	mov	r5,r21
  117640:	1023883a 	mov	r17,r2
  117644:	01159fc0 	call	1159fc <__mulsi3>
  117648:	d9c00217 	ldw	r7,8(sp)
  11764c:	da800317 	ldw	r10,12(sp)
  117650:	d8c00517 	ldw	r3,20(sp)
  117654:	3808d43a 	srli	r4,r7,16
  117658:	1285883a 	add	r2,r2,r10
  11765c:	d9800717 	ldw	r6,28(sp)
  117660:	2085883a 	add	r2,r4,r2
  117664:	da000617 	ldw	r8,24(sp)
  117668:	da400417 	ldw	r9,16(sp)
  11766c:	1280022e 	bgeu	r2,r10,117678 <__muldf3+0x584>
  117670:	01000074 	movhi	r4,1
  117674:	8923883a 	add	r17,r17,r4
  117678:	1008943a 	slli	r4,r2,16
  11767c:	39ffffcc 	andi	r7,r7,65535
  117680:	e4b9883a 	add	fp,fp,r18
  117684:	21cf883a 	add	r7,r4,r7
  117688:	e4e7803a 	cmpltu	r19,fp,r19
  11768c:	3d0f883a 	add	r7,r7,r20
  117690:	bf39883a 	add	fp,r23,fp
  117694:	99c9883a 	add	r4,r19,r7
  117698:	e5ef803a 	cmpltu	r23,fp,r23
  11769c:	490b883a 	add	r5,r9,r4
  1176a0:	1004d43a 	srli	r2,r2,16
  1176a4:	b965883a 	add	r18,r23,r5
  1176a8:	24c9803a 	cmpltu	r4,r4,r19
  1176ac:	3d29803a 	cmpltu	r20,r7,r20
  1176b0:	a128b03a 	or	r20,r20,r4
  1176b4:	95ef803a 	cmpltu	r23,r18,r23
  1176b8:	2a53803a 	cmpltu	r9,r5,r9
  1176bc:	a0a9883a 	add	r20,r20,r2
  1176c0:	4deeb03a 	or	r23,r9,r23
  1176c4:	a5ef883a 	add	r23,r20,r23
  1176c8:	bc63883a 	add	r17,r23,r17
  1176cc:	e004927a 	slli	r2,fp,9
  1176d0:	d9000117 	ldw	r4,4(sp)
  1176d4:	882e927a 	slli	r23,r17,9
  1176d8:	9022d5fa 	srli	r17,r18,23
  1176dc:	e038d5fa 	srli	fp,fp,23
  1176e0:	1104b03a 	or	r2,r2,r4
  1176e4:	9024927a 	slli	r18,r18,9
  1176e8:	1004c03a 	cmpne	r2,r2,zero
  1176ec:	bc62b03a 	or	r17,r23,r17
  1176f0:	1738b03a 	or	fp,r2,fp
  1176f4:	8880402c 	andhi	r2,r17,256
  1176f8:	e4a4b03a 	or	r18,fp,r18
  1176fc:	10000726 	beq	r2,zero,11771c <__muldf3+0x628>
  117700:	9006d07a 	srli	r3,r18,1
  117704:	880497fa 	slli	r2,r17,31
  117708:	9480004c 	andi	r18,r18,1
  11770c:	8822d07a 	srli	r17,r17,1
  117710:	1ca4b03a 	or	r18,r3,r18
  117714:	14a4b03a 	or	r18,r2,r18
  117718:	4007883a 	mov	r3,r8
  11771c:	1880ffc4 	addi	r2,r3,1023
  117720:	0080460e 	bge	zero,r2,11783c <__muldf3+0x748>
  117724:	910001cc 	andi	r4,r18,7
  117728:	20000726 	beq	r4,zero,117748 <__muldf3+0x654>
  11772c:	910003cc 	andi	r4,r18,15
  117730:	01400104 	movi	r5,4
  117734:	21400426 	beq	r4,r5,117748 <__muldf3+0x654>
  117738:	9149883a 	add	r4,r18,r5
  11773c:	24a5803a 	cmpltu	r18,r4,r18
  117740:	8ca3883a 	add	r17,r17,r18
  117744:	2025883a 	mov	r18,r4
  117748:	8900402c 	andhi	r4,r17,256
  11774c:	20000426 	beq	r4,zero,117760 <__muldf3+0x66c>
  117750:	18810004 	addi	r2,r3,1024
  117754:	00ffc034 	movhi	r3,65280
  117758:	18ffffc4 	addi	r3,r3,-1
  11775c:	88e2703a 	and	r17,r17,r3
  117760:	00c1ff84 	movi	r3,2046
  117764:	18bf1316 	blt	r3,r2,1173b4 <__alt_data_end+0xfffd73b4>
  117768:	882c977a 	slli	r22,r17,29
  11776c:	9024d0fa 	srli	r18,r18,3
  117770:	8822927a 	slli	r17,r17,9
  117774:	1081ffcc 	andi	r2,r2,2047
  117778:	b4acb03a 	or	r22,r22,r18
  11777c:	8820d33a 	srli	r16,r17,12
  117780:	3027883a 	mov	r19,r6
  117784:	003eba06 	br	117270 <__alt_data_end+0xfffd7270>
  117788:	8080022c 	andhi	r2,r16,8
  11778c:	10000926 	beq	r2,zero,1177b4 <__muldf3+0x6c0>
  117790:	8880022c 	andhi	r2,r17,8
  117794:	1000071e 	bne	r2,zero,1177b4 <__muldf3+0x6c0>
  117798:	00800434 	movhi	r2,16
  11779c:	8c000234 	orhi	r16,r17,8
  1177a0:	10bfffc4 	addi	r2,r2,-1
  1177a4:	e027883a 	mov	r19,fp
  1177a8:	80a0703a 	and	r16,r16,r2
  1177ac:	902d883a 	mov	r22,r18
  1177b0:	003f1706 	br	117410 <__alt_data_end+0xfffd7410>
  1177b4:	00800434 	movhi	r2,16
  1177b8:	84000234 	orhi	r16,r16,8
  1177bc:	10bfffc4 	addi	r2,r2,-1
  1177c0:	80a0703a 	and	r16,r16,r2
  1177c4:	003f1206 	br	117410 <__alt_data_end+0xfffd7410>
  1177c8:	147ff604 	addi	r17,r2,-40
  1177cc:	3462983a 	sll	r17,r6,r17
  1177d0:	0025883a 	mov	r18,zero
  1177d4:	003ef306 	br	1173a4 <__alt_data_end+0xfffd73a4>
  1177d8:	3009883a 	mov	r4,r6
  1177dc:	d9400215 	stw	r5,8(sp)
  1177e0:	d9800715 	stw	r6,28(sp)
  1177e4:	da400415 	stw	r9,16(sp)
  1177e8:	da800315 	stw	r10,12(sp)
  1177ec:	01186080 	call	118608 <__clzsi2>
  1177f0:	10800804 	addi	r2,r2,32
  1177f4:	da800317 	ldw	r10,12(sp)
  1177f8:	da400417 	ldw	r9,16(sp)
  1177fc:	d9800717 	ldw	r6,28(sp)
  117800:	d9400217 	ldw	r5,8(sp)
  117804:	003edd06 	br	11737c <__alt_data_end+0xfffd737c>
  117808:	143ff604 	addi	r16,r2,-40
  11780c:	ac20983a 	sll	r16,r21,r16
  117810:	002d883a 	mov	r22,zero
  117814:	003ec106 	br	11731c <__alt_data_end+0xfffd731c>
  117818:	d9800715 	stw	r6,28(sp)
  11781c:	d9c00215 	stw	r7,8(sp)
  117820:	da400415 	stw	r9,16(sp)
  117824:	01186080 	call	118608 <__clzsi2>
  117828:	10800804 	addi	r2,r2,32
  11782c:	da400417 	ldw	r9,16(sp)
  117830:	d9c00217 	ldw	r7,8(sp)
  117834:	d9800717 	ldw	r6,28(sp)
  117838:	003eae06 	br	1172f4 <__alt_data_end+0xfffd72f4>
  11783c:	00c00044 	movi	r3,1
  117840:	1887c83a 	sub	r3,r3,r2
  117844:	01000e04 	movi	r4,56
  117848:	20fe8516 	blt	r4,r3,117260 <__alt_data_end+0xfffd7260>
  11784c:	010007c4 	movi	r4,31
  117850:	20c01b16 	blt	r4,r3,1178c0 <__muldf3+0x7cc>
  117854:	00800804 	movi	r2,32
  117858:	10c5c83a 	sub	r2,r2,r3
  11785c:	888a983a 	sll	r5,r17,r2
  117860:	90c8d83a 	srl	r4,r18,r3
  117864:	9084983a 	sll	r2,r18,r2
  117868:	88e2d83a 	srl	r17,r17,r3
  11786c:	2906b03a 	or	r3,r5,r4
  117870:	1004c03a 	cmpne	r2,r2,zero
  117874:	1886b03a 	or	r3,r3,r2
  117878:	188001cc 	andi	r2,r3,7
  11787c:	10000726 	beq	r2,zero,11789c <__muldf3+0x7a8>
  117880:	188003cc 	andi	r2,r3,15
  117884:	01000104 	movi	r4,4
  117888:	11000426 	beq	r2,r4,11789c <__muldf3+0x7a8>
  11788c:	1805883a 	mov	r2,r3
  117890:	10c00104 	addi	r3,r2,4
  117894:	1885803a 	cmpltu	r2,r3,r2
  117898:	88a3883a 	add	r17,r17,r2
  11789c:	8880202c 	andhi	r2,r17,128
  1178a0:	10001c26 	beq	r2,zero,117914 <__muldf3+0x820>
  1178a4:	3027883a 	mov	r19,r6
  1178a8:	00800044 	movi	r2,1
  1178ac:	0021883a 	mov	r16,zero
  1178b0:	002d883a 	mov	r22,zero
  1178b4:	003e6e06 	br	117270 <__alt_data_end+0xfffd7270>
  1178b8:	4007883a 	mov	r3,r8
  1178bc:	003f9706 	br	11771c <__alt_data_end+0xfffd771c>
  1178c0:	017ff844 	movi	r5,-31
  1178c4:	2885c83a 	sub	r2,r5,r2
  1178c8:	888ad83a 	srl	r5,r17,r2
  1178cc:	00800804 	movi	r2,32
  1178d0:	18801a26 	beq	r3,r2,11793c <__muldf3+0x848>
  1178d4:	01001004 	movi	r4,64
  1178d8:	20c7c83a 	sub	r3,r4,r3
  1178dc:	88e2983a 	sll	r17,r17,r3
  1178e0:	8ca4b03a 	or	r18,r17,r18
  1178e4:	9004c03a 	cmpne	r2,r18,zero
  1178e8:	2884b03a 	or	r2,r5,r2
  1178ec:	144001cc 	andi	r17,r2,7
  1178f0:	88000d1e 	bne	r17,zero,117928 <__muldf3+0x834>
  1178f4:	0021883a 	mov	r16,zero
  1178f8:	102cd0fa 	srli	r22,r2,3
  1178fc:	3027883a 	mov	r19,r6
  117900:	0005883a 	mov	r2,zero
  117904:	b46cb03a 	or	r22,r22,r17
  117908:	003e5906 	br	117270 <__alt_data_end+0xfffd7270>
  11790c:	1007883a 	mov	r3,r2
  117910:	0023883a 	mov	r17,zero
  117914:	8820927a 	slli	r16,r17,9
  117918:	1805883a 	mov	r2,r3
  11791c:	8822977a 	slli	r17,r17,29
  117920:	8020d33a 	srli	r16,r16,12
  117924:	003ff406 	br	1178f8 <__alt_data_end+0xfffd78f8>
  117928:	10c003cc 	andi	r3,r2,15
  11792c:	01000104 	movi	r4,4
  117930:	193ff626 	beq	r3,r4,11790c <__alt_data_end+0xfffd790c>
  117934:	0023883a 	mov	r17,zero
  117938:	003fd506 	br	117890 <__alt_data_end+0xfffd7890>
  11793c:	0023883a 	mov	r17,zero
  117940:	003fe706 	br	1178e0 <__alt_data_end+0xfffd78e0>
  117944:	00800434 	movhi	r2,16
  117948:	8c000234 	orhi	r16,r17,8
  11794c:	10bfffc4 	addi	r2,r2,-1
  117950:	3027883a 	mov	r19,r6
  117954:	80a0703a 	and	r16,r16,r2
  117958:	902d883a 	mov	r22,r18
  11795c:	003eac06 	br	117410 <__alt_data_end+0xfffd7410>

00117960 <__subdf3>:
  117960:	02000434 	movhi	r8,16
  117964:	423fffc4 	addi	r8,r8,-1
  117968:	defffb04 	addi	sp,sp,-20
  11796c:	2a14703a 	and	r10,r5,r8
  117970:	3812d53a 	srli	r9,r7,20
  117974:	3a10703a 	and	r8,r7,r8
  117978:	2006d77a 	srli	r3,r4,29
  11797c:	3004d77a 	srli	r2,r6,29
  117980:	dc000015 	stw	r16,0(sp)
  117984:	501490fa 	slli	r10,r10,3
  117988:	2820d53a 	srli	r16,r5,20
  11798c:	401090fa 	slli	r8,r8,3
  117990:	dc800215 	stw	r18,8(sp)
  117994:	dc400115 	stw	r17,4(sp)
  117998:	dfc00415 	stw	ra,16(sp)
  11799c:	202290fa 	slli	r17,r4,3
  1179a0:	dcc00315 	stw	r19,12(sp)
  1179a4:	4a41ffcc 	andi	r9,r9,2047
  1179a8:	0101ffc4 	movi	r4,2047
  1179ac:	2824d7fa 	srli	r18,r5,31
  1179b0:	8401ffcc 	andi	r16,r16,2047
  1179b4:	50c6b03a 	or	r3,r10,r3
  1179b8:	380ed7fa 	srli	r7,r7,31
  1179bc:	408ab03a 	or	r5,r8,r2
  1179c0:	300c90fa 	slli	r6,r6,3
  1179c4:	49009626 	beq	r9,r4,117c20 <__subdf3+0x2c0>
  1179c8:	39c0005c 	xori	r7,r7,1
  1179cc:	8245c83a 	sub	r2,r16,r9
  1179d0:	3c807426 	beq	r7,r18,117ba4 <__subdf3+0x244>
  1179d4:	0080af0e 	bge	zero,r2,117c94 <__subdf3+0x334>
  1179d8:	48002a1e 	bne	r9,zero,117a84 <__subdf3+0x124>
  1179dc:	2988b03a 	or	r4,r5,r6
  1179e0:	20009a1e 	bne	r4,zero,117c4c <__subdf3+0x2ec>
  1179e4:	888001cc 	andi	r2,r17,7
  1179e8:	10000726 	beq	r2,zero,117a08 <__subdf3+0xa8>
  1179ec:	888003cc 	andi	r2,r17,15
  1179f0:	01000104 	movi	r4,4
  1179f4:	11000426 	beq	r2,r4,117a08 <__subdf3+0xa8>
  1179f8:	890b883a 	add	r5,r17,r4
  1179fc:	2c63803a 	cmpltu	r17,r5,r17
  117a00:	1c47883a 	add	r3,r3,r17
  117a04:	2823883a 	mov	r17,r5
  117a08:	1880202c 	andhi	r2,r3,128
  117a0c:	10005926 	beq	r2,zero,117b74 <__subdf3+0x214>
  117a10:	84000044 	addi	r16,r16,1
  117a14:	0081ffc4 	movi	r2,2047
  117a18:	8080be26 	beq	r16,r2,117d14 <__subdf3+0x3b4>
  117a1c:	017fe034 	movhi	r5,65408
  117a20:	297fffc4 	addi	r5,r5,-1
  117a24:	1946703a 	and	r3,r3,r5
  117a28:	1804977a 	slli	r2,r3,29
  117a2c:	1806927a 	slli	r3,r3,9
  117a30:	8822d0fa 	srli	r17,r17,3
  117a34:	8401ffcc 	andi	r16,r16,2047
  117a38:	180ad33a 	srli	r5,r3,12
  117a3c:	9100004c 	andi	r4,r18,1
  117a40:	1444b03a 	or	r2,r2,r17
  117a44:	80c1ffcc 	andi	r3,r16,2047
  117a48:	1820953a 	slli	r16,r3,20
  117a4c:	20c03fcc 	andi	r3,r4,255
  117a50:	180897fa 	slli	r4,r3,31
  117a54:	00c00434 	movhi	r3,16
  117a58:	18ffffc4 	addi	r3,r3,-1
  117a5c:	28c6703a 	and	r3,r5,r3
  117a60:	1c06b03a 	or	r3,r3,r16
  117a64:	1906b03a 	or	r3,r3,r4
  117a68:	dfc00417 	ldw	ra,16(sp)
  117a6c:	dcc00317 	ldw	r19,12(sp)
  117a70:	dc800217 	ldw	r18,8(sp)
  117a74:	dc400117 	ldw	r17,4(sp)
  117a78:	dc000017 	ldw	r16,0(sp)
  117a7c:	dec00504 	addi	sp,sp,20
  117a80:	f800283a 	ret
  117a84:	0101ffc4 	movi	r4,2047
  117a88:	813fd626 	beq	r16,r4,1179e4 <__alt_data_end+0xfffd79e4>
  117a8c:	29402034 	orhi	r5,r5,128
  117a90:	01000e04 	movi	r4,56
  117a94:	2080a316 	blt	r4,r2,117d24 <__subdf3+0x3c4>
  117a98:	010007c4 	movi	r4,31
  117a9c:	2080c616 	blt	r4,r2,117db8 <__subdf3+0x458>
  117aa0:	01000804 	movi	r4,32
  117aa4:	2089c83a 	sub	r4,r4,r2
  117aa8:	2910983a 	sll	r8,r5,r4
  117aac:	308ed83a 	srl	r7,r6,r2
  117ab0:	3108983a 	sll	r4,r6,r4
  117ab4:	2884d83a 	srl	r2,r5,r2
  117ab8:	41ccb03a 	or	r6,r8,r7
  117abc:	2008c03a 	cmpne	r4,r4,zero
  117ac0:	310cb03a 	or	r6,r6,r4
  117ac4:	898dc83a 	sub	r6,r17,r6
  117ac8:	89a3803a 	cmpltu	r17,r17,r6
  117acc:	1887c83a 	sub	r3,r3,r2
  117ad0:	1c47c83a 	sub	r3,r3,r17
  117ad4:	3023883a 	mov	r17,r6
  117ad8:	1880202c 	andhi	r2,r3,128
  117adc:	10002326 	beq	r2,zero,117b6c <__subdf3+0x20c>
  117ae0:	04c02034 	movhi	r19,128
  117ae4:	9cffffc4 	addi	r19,r19,-1
  117ae8:	1ce6703a 	and	r19,r3,r19
  117aec:	98007a26 	beq	r19,zero,117cd8 <__subdf3+0x378>
  117af0:	9809883a 	mov	r4,r19
  117af4:	01186080 	call	118608 <__clzsi2>
  117af8:	113ffe04 	addi	r4,r2,-8
  117afc:	00c007c4 	movi	r3,31
  117b00:	19007b16 	blt	r3,r4,117cf0 <__subdf3+0x390>
  117b04:	00800804 	movi	r2,32
  117b08:	1105c83a 	sub	r2,r2,r4
  117b0c:	8884d83a 	srl	r2,r17,r2
  117b10:	9906983a 	sll	r3,r19,r4
  117b14:	8922983a 	sll	r17,r17,r4
  117b18:	10c4b03a 	or	r2,r2,r3
  117b1c:	24007816 	blt	r4,r16,117d00 <__subdf3+0x3a0>
  117b20:	2421c83a 	sub	r16,r4,r16
  117b24:	80c00044 	addi	r3,r16,1
  117b28:	010007c4 	movi	r4,31
  117b2c:	20c09516 	blt	r4,r3,117d84 <__subdf3+0x424>
  117b30:	01400804 	movi	r5,32
  117b34:	28cbc83a 	sub	r5,r5,r3
  117b38:	88c8d83a 	srl	r4,r17,r3
  117b3c:	8962983a 	sll	r17,r17,r5
  117b40:	114a983a 	sll	r5,r2,r5
  117b44:	10c6d83a 	srl	r3,r2,r3
  117b48:	8804c03a 	cmpne	r2,r17,zero
  117b4c:	290ab03a 	or	r5,r5,r4
  117b50:	28a2b03a 	or	r17,r5,r2
  117b54:	0021883a 	mov	r16,zero
  117b58:	003fa206 	br	1179e4 <__alt_data_end+0xfffd79e4>
  117b5c:	2090b03a 	or	r8,r4,r2
  117b60:	40018e26 	beq	r8,zero,11819c <__subdf3+0x83c>
  117b64:	1007883a 	mov	r3,r2
  117b68:	2023883a 	mov	r17,r4
  117b6c:	888001cc 	andi	r2,r17,7
  117b70:	103f9e1e 	bne	r2,zero,1179ec <__alt_data_end+0xfffd79ec>
  117b74:	1804977a 	slli	r2,r3,29
  117b78:	8822d0fa 	srli	r17,r17,3
  117b7c:	1810d0fa 	srli	r8,r3,3
  117b80:	9100004c 	andi	r4,r18,1
  117b84:	1444b03a 	or	r2,r2,r17
  117b88:	00c1ffc4 	movi	r3,2047
  117b8c:	80c02826 	beq	r16,r3,117c30 <__subdf3+0x2d0>
  117b90:	01400434 	movhi	r5,16
  117b94:	297fffc4 	addi	r5,r5,-1
  117b98:	80e0703a 	and	r16,r16,r3
  117b9c:	414a703a 	and	r5,r8,r5
  117ba0:	003fa806 	br	117a44 <__alt_data_end+0xfffd7a44>
  117ba4:	0080630e 	bge	zero,r2,117d34 <__subdf3+0x3d4>
  117ba8:	48003026 	beq	r9,zero,117c6c <__subdf3+0x30c>
  117bac:	0101ffc4 	movi	r4,2047
  117bb0:	813f8c26 	beq	r16,r4,1179e4 <__alt_data_end+0xfffd79e4>
  117bb4:	29402034 	orhi	r5,r5,128
  117bb8:	01000e04 	movi	r4,56
  117bbc:	2080a90e 	bge	r4,r2,117e64 <__subdf3+0x504>
  117bc0:	298cb03a 	or	r6,r5,r6
  117bc4:	3012c03a 	cmpne	r9,r6,zero
  117bc8:	0005883a 	mov	r2,zero
  117bcc:	4c53883a 	add	r9,r9,r17
  117bd0:	4c63803a 	cmpltu	r17,r9,r17
  117bd4:	10c7883a 	add	r3,r2,r3
  117bd8:	88c7883a 	add	r3,r17,r3
  117bdc:	4823883a 	mov	r17,r9
  117be0:	1880202c 	andhi	r2,r3,128
  117be4:	1000d026 	beq	r2,zero,117f28 <__subdf3+0x5c8>
  117be8:	84000044 	addi	r16,r16,1
  117bec:	0081ffc4 	movi	r2,2047
  117bf0:	8080fe26 	beq	r16,r2,117fec <__subdf3+0x68c>
  117bf4:	00bfe034 	movhi	r2,65408
  117bf8:	10bfffc4 	addi	r2,r2,-1
  117bfc:	1886703a 	and	r3,r3,r2
  117c00:	880ad07a 	srli	r5,r17,1
  117c04:	180497fa 	slli	r2,r3,31
  117c08:	8900004c 	andi	r4,r17,1
  117c0c:	2922b03a 	or	r17,r5,r4
  117c10:	1806d07a 	srli	r3,r3,1
  117c14:	1462b03a 	or	r17,r2,r17
  117c18:	3825883a 	mov	r18,r7
  117c1c:	003f7106 	br	1179e4 <__alt_data_end+0xfffd79e4>
  117c20:	2984b03a 	or	r2,r5,r6
  117c24:	103f6826 	beq	r2,zero,1179c8 <__alt_data_end+0xfffd79c8>
  117c28:	39c03fcc 	andi	r7,r7,255
  117c2c:	003f6706 	br	1179cc <__alt_data_end+0xfffd79cc>
  117c30:	4086b03a 	or	r3,r8,r2
  117c34:	18015226 	beq	r3,zero,118180 <__subdf3+0x820>
  117c38:	00c00434 	movhi	r3,16
  117c3c:	41400234 	orhi	r5,r8,8
  117c40:	18ffffc4 	addi	r3,r3,-1
  117c44:	28ca703a 	and	r5,r5,r3
  117c48:	003f7e06 	br	117a44 <__alt_data_end+0xfffd7a44>
  117c4c:	10bfffc4 	addi	r2,r2,-1
  117c50:	1000491e 	bne	r2,zero,117d78 <__subdf3+0x418>
  117c54:	898fc83a 	sub	r7,r17,r6
  117c58:	89e3803a 	cmpltu	r17,r17,r7
  117c5c:	1947c83a 	sub	r3,r3,r5
  117c60:	1c47c83a 	sub	r3,r3,r17
  117c64:	3823883a 	mov	r17,r7
  117c68:	003f9b06 	br	117ad8 <__alt_data_end+0xfffd7ad8>
  117c6c:	2988b03a 	or	r4,r5,r6
  117c70:	203f5c26 	beq	r4,zero,1179e4 <__alt_data_end+0xfffd79e4>
  117c74:	10bfffc4 	addi	r2,r2,-1
  117c78:	1000931e 	bne	r2,zero,117ec8 <__subdf3+0x568>
  117c7c:	898d883a 	add	r6,r17,r6
  117c80:	3463803a 	cmpltu	r17,r6,r17
  117c84:	1947883a 	add	r3,r3,r5
  117c88:	88c7883a 	add	r3,r17,r3
  117c8c:	3023883a 	mov	r17,r6
  117c90:	003fd306 	br	117be0 <__alt_data_end+0xfffd7be0>
  117c94:	1000541e 	bne	r2,zero,117de8 <__subdf3+0x488>
  117c98:	80800044 	addi	r2,r16,1
  117c9c:	1081ffcc 	andi	r2,r2,2047
  117ca0:	01000044 	movi	r4,1
  117ca4:	2080a20e 	bge	r4,r2,117f30 <__subdf3+0x5d0>
  117ca8:	8989c83a 	sub	r4,r17,r6
  117cac:	8905803a 	cmpltu	r2,r17,r4
  117cb0:	1967c83a 	sub	r19,r3,r5
  117cb4:	98a7c83a 	sub	r19,r19,r2
  117cb8:	9880202c 	andhi	r2,r19,128
  117cbc:	10006326 	beq	r2,zero,117e4c <__subdf3+0x4ec>
  117cc0:	3463c83a 	sub	r17,r6,r17
  117cc4:	28c7c83a 	sub	r3,r5,r3
  117cc8:	344d803a 	cmpltu	r6,r6,r17
  117ccc:	19a7c83a 	sub	r19,r3,r6
  117cd0:	3825883a 	mov	r18,r7
  117cd4:	983f861e 	bne	r19,zero,117af0 <__alt_data_end+0xfffd7af0>
  117cd8:	8809883a 	mov	r4,r17
  117cdc:	01186080 	call	118608 <__clzsi2>
  117ce0:	10800804 	addi	r2,r2,32
  117ce4:	113ffe04 	addi	r4,r2,-8
  117ce8:	00c007c4 	movi	r3,31
  117cec:	193f850e 	bge	r3,r4,117b04 <__alt_data_end+0xfffd7b04>
  117cf0:	10bff604 	addi	r2,r2,-40
  117cf4:	8884983a 	sll	r2,r17,r2
  117cf8:	0023883a 	mov	r17,zero
  117cfc:	243f880e 	bge	r4,r16,117b20 <__alt_data_end+0xfffd7b20>
  117d00:	00ffe034 	movhi	r3,65408
  117d04:	18ffffc4 	addi	r3,r3,-1
  117d08:	8121c83a 	sub	r16,r16,r4
  117d0c:	10c6703a 	and	r3,r2,r3
  117d10:	003f3406 	br	1179e4 <__alt_data_end+0xfffd79e4>
  117d14:	9100004c 	andi	r4,r18,1
  117d18:	000b883a 	mov	r5,zero
  117d1c:	0005883a 	mov	r2,zero
  117d20:	003f4806 	br	117a44 <__alt_data_end+0xfffd7a44>
  117d24:	298cb03a 	or	r6,r5,r6
  117d28:	300cc03a 	cmpne	r6,r6,zero
  117d2c:	0005883a 	mov	r2,zero
  117d30:	003f6406 	br	117ac4 <__alt_data_end+0xfffd7ac4>
  117d34:	10009a1e 	bne	r2,zero,117fa0 <__subdf3+0x640>
  117d38:	82400044 	addi	r9,r16,1
  117d3c:	4881ffcc 	andi	r2,r9,2047
  117d40:	02800044 	movi	r10,1
  117d44:	5080670e 	bge	r10,r2,117ee4 <__subdf3+0x584>
  117d48:	0081ffc4 	movi	r2,2047
  117d4c:	4880af26 	beq	r9,r2,11800c <__subdf3+0x6ac>
  117d50:	898d883a 	add	r6,r17,r6
  117d54:	1945883a 	add	r2,r3,r5
  117d58:	3447803a 	cmpltu	r3,r6,r17
  117d5c:	1887883a 	add	r3,r3,r2
  117d60:	182297fa 	slli	r17,r3,31
  117d64:	300cd07a 	srli	r6,r6,1
  117d68:	1806d07a 	srli	r3,r3,1
  117d6c:	4821883a 	mov	r16,r9
  117d70:	89a2b03a 	or	r17,r17,r6
  117d74:	003f1b06 	br	1179e4 <__alt_data_end+0xfffd79e4>
  117d78:	0101ffc4 	movi	r4,2047
  117d7c:	813f441e 	bne	r16,r4,117a90 <__alt_data_end+0xfffd7a90>
  117d80:	003f1806 	br	1179e4 <__alt_data_end+0xfffd79e4>
  117d84:	843ff844 	addi	r16,r16,-31
  117d88:	01400804 	movi	r5,32
  117d8c:	1408d83a 	srl	r4,r2,r16
  117d90:	19405026 	beq	r3,r5,117ed4 <__subdf3+0x574>
  117d94:	01401004 	movi	r5,64
  117d98:	28c7c83a 	sub	r3,r5,r3
  117d9c:	10c4983a 	sll	r2,r2,r3
  117da0:	88a2b03a 	or	r17,r17,r2
  117da4:	8822c03a 	cmpne	r17,r17,zero
  117da8:	2462b03a 	or	r17,r4,r17
  117dac:	0007883a 	mov	r3,zero
  117db0:	0021883a 	mov	r16,zero
  117db4:	003f6d06 	br	117b6c <__alt_data_end+0xfffd7b6c>
  117db8:	11fff804 	addi	r7,r2,-32
  117dbc:	01000804 	movi	r4,32
  117dc0:	29ced83a 	srl	r7,r5,r7
  117dc4:	11004526 	beq	r2,r4,117edc <__subdf3+0x57c>
  117dc8:	01001004 	movi	r4,64
  117dcc:	2089c83a 	sub	r4,r4,r2
  117dd0:	2904983a 	sll	r2,r5,r4
  117dd4:	118cb03a 	or	r6,r2,r6
  117dd8:	300cc03a 	cmpne	r6,r6,zero
  117ddc:	398cb03a 	or	r6,r7,r6
  117de0:	0005883a 	mov	r2,zero
  117de4:	003f3706 	br	117ac4 <__alt_data_end+0xfffd7ac4>
  117de8:	80002a26 	beq	r16,zero,117e94 <__subdf3+0x534>
  117dec:	0101ffc4 	movi	r4,2047
  117df0:	49006626 	beq	r9,r4,117f8c <__subdf3+0x62c>
  117df4:	0085c83a 	sub	r2,zero,r2
  117df8:	18c02034 	orhi	r3,r3,128
  117dfc:	01000e04 	movi	r4,56
  117e00:	20807e16 	blt	r4,r2,117ffc <__subdf3+0x69c>
  117e04:	010007c4 	movi	r4,31
  117e08:	2080e716 	blt	r4,r2,1181a8 <__subdf3+0x848>
  117e0c:	01000804 	movi	r4,32
  117e10:	2089c83a 	sub	r4,r4,r2
  117e14:	1914983a 	sll	r10,r3,r4
  117e18:	8890d83a 	srl	r8,r17,r2
  117e1c:	8908983a 	sll	r4,r17,r4
  117e20:	1884d83a 	srl	r2,r3,r2
  117e24:	5222b03a 	or	r17,r10,r8
  117e28:	2006c03a 	cmpne	r3,r4,zero
  117e2c:	88e2b03a 	or	r17,r17,r3
  117e30:	3463c83a 	sub	r17,r6,r17
  117e34:	2885c83a 	sub	r2,r5,r2
  117e38:	344d803a 	cmpltu	r6,r6,r17
  117e3c:	1187c83a 	sub	r3,r2,r6
  117e40:	4821883a 	mov	r16,r9
  117e44:	3825883a 	mov	r18,r7
  117e48:	003f2306 	br	117ad8 <__alt_data_end+0xfffd7ad8>
  117e4c:	24d0b03a 	or	r8,r4,r19
  117e50:	40001b1e 	bne	r8,zero,117ec0 <__subdf3+0x560>
  117e54:	0005883a 	mov	r2,zero
  117e58:	0009883a 	mov	r4,zero
  117e5c:	0021883a 	mov	r16,zero
  117e60:	003f4906 	br	117b88 <__alt_data_end+0xfffd7b88>
  117e64:	010007c4 	movi	r4,31
  117e68:	20803a16 	blt	r4,r2,117f54 <__subdf3+0x5f4>
  117e6c:	01000804 	movi	r4,32
  117e70:	2089c83a 	sub	r4,r4,r2
  117e74:	2912983a 	sll	r9,r5,r4
  117e78:	3090d83a 	srl	r8,r6,r2
  117e7c:	3108983a 	sll	r4,r6,r4
  117e80:	2884d83a 	srl	r2,r5,r2
  117e84:	4a12b03a 	or	r9,r9,r8
  117e88:	2008c03a 	cmpne	r4,r4,zero
  117e8c:	4912b03a 	or	r9,r9,r4
  117e90:	003f4e06 	br	117bcc <__alt_data_end+0xfffd7bcc>
  117e94:	1c48b03a 	or	r4,r3,r17
  117e98:	20003c26 	beq	r4,zero,117f8c <__subdf3+0x62c>
  117e9c:	0084303a 	nor	r2,zero,r2
  117ea0:	1000381e 	bne	r2,zero,117f84 <__subdf3+0x624>
  117ea4:	3463c83a 	sub	r17,r6,r17
  117ea8:	28c5c83a 	sub	r2,r5,r3
  117eac:	344d803a 	cmpltu	r6,r6,r17
  117eb0:	1187c83a 	sub	r3,r2,r6
  117eb4:	4821883a 	mov	r16,r9
  117eb8:	3825883a 	mov	r18,r7
  117ebc:	003f0606 	br	117ad8 <__alt_data_end+0xfffd7ad8>
  117ec0:	2023883a 	mov	r17,r4
  117ec4:	003f0906 	br	117aec <__alt_data_end+0xfffd7aec>
  117ec8:	0101ffc4 	movi	r4,2047
  117ecc:	813f3a1e 	bne	r16,r4,117bb8 <__alt_data_end+0xfffd7bb8>
  117ed0:	003ec406 	br	1179e4 <__alt_data_end+0xfffd79e4>
  117ed4:	0005883a 	mov	r2,zero
  117ed8:	003fb106 	br	117da0 <__alt_data_end+0xfffd7da0>
  117edc:	0005883a 	mov	r2,zero
  117ee0:	003fbc06 	br	117dd4 <__alt_data_end+0xfffd7dd4>
  117ee4:	1c44b03a 	or	r2,r3,r17
  117ee8:	80008e1e 	bne	r16,zero,118124 <__subdf3+0x7c4>
  117eec:	1000c826 	beq	r2,zero,118210 <__subdf3+0x8b0>
  117ef0:	2984b03a 	or	r2,r5,r6
  117ef4:	103ebb26 	beq	r2,zero,1179e4 <__alt_data_end+0xfffd79e4>
  117ef8:	8989883a 	add	r4,r17,r6
  117efc:	1945883a 	add	r2,r3,r5
  117f00:	2447803a 	cmpltu	r3,r4,r17
  117f04:	1887883a 	add	r3,r3,r2
  117f08:	1880202c 	andhi	r2,r3,128
  117f0c:	2023883a 	mov	r17,r4
  117f10:	103f1626 	beq	r2,zero,117b6c <__alt_data_end+0xfffd7b6c>
  117f14:	00bfe034 	movhi	r2,65408
  117f18:	10bfffc4 	addi	r2,r2,-1
  117f1c:	5021883a 	mov	r16,r10
  117f20:	1886703a 	and	r3,r3,r2
  117f24:	003eaf06 	br	1179e4 <__alt_data_end+0xfffd79e4>
  117f28:	3825883a 	mov	r18,r7
  117f2c:	003f0f06 	br	117b6c <__alt_data_end+0xfffd7b6c>
  117f30:	1c44b03a 	or	r2,r3,r17
  117f34:	8000251e 	bne	r16,zero,117fcc <__subdf3+0x66c>
  117f38:	1000661e 	bne	r2,zero,1180d4 <__subdf3+0x774>
  117f3c:	2990b03a 	or	r8,r5,r6
  117f40:	40009626 	beq	r8,zero,11819c <__subdf3+0x83c>
  117f44:	2807883a 	mov	r3,r5
  117f48:	3023883a 	mov	r17,r6
  117f4c:	3825883a 	mov	r18,r7
  117f50:	003ea406 	br	1179e4 <__alt_data_end+0xfffd79e4>
  117f54:	127ff804 	addi	r9,r2,-32
  117f58:	01000804 	movi	r4,32
  117f5c:	2a52d83a 	srl	r9,r5,r9
  117f60:	11008c26 	beq	r2,r4,118194 <__subdf3+0x834>
  117f64:	01001004 	movi	r4,64
  117f68:	2085c83a 	sub	r2,r4,r2
  117f6c:	2884983a 	sll	r2,r5,r2
  117f70:	118cb03a 	or	r6,r2,r6
  117f74:	300cc03a 	cmpne	r6,r6,zero
  117f78:	4992b03a 	or	r9,r9,r6
  117f7c:	0005883a 	mov	r2,zero
  117f80:	003f1206 	br	117bcc <__alt_data_end+0xfffd7bcc>
  117f84:	0101ffc4 	movi	r4,2047
  117f88:	493f9c1e 	bne	r9,r4,117dfc <__alt_data_end+0xfffd7dfc>
  117f8c:	2807883a 	mov	r3,r5
  117f90:	3023883a 	mov	r17,r6
  117f94:	4821883a 	mov	r16,r9
  117f98:	3825883a 	mov	r18,r7
  117f9c:	003e9106 	br	1179e4 <__alt_data_end+0xfffd79e4>
  117fa0:	80001f1e 	bne	r16,zero,118020 <__subdf3+0x6c0>
  117fa4:	1c48b03a 	or	r4,r3,r17
  117fa8:	20005a26 	beq	r4,zero,118114 <__subdf3+0x7b4>
  117fac:	0084303a 	nor	r2,zero,r2
  117fb0:	1000561e 	bne	r2,zero,11810c <__subdf3+0x7ac>
  117fb4:	89a3883a 	add	r17,r17,r6
  117fb8:	1945883a 	add	r2,r3,r5
  117fbc:	898d803a 	cmpltu	r6,r17,r6
  117fc0:	3087883a 	add	r3,r6,r2
  117fc4:	4821883a 	mov	r16,r9
  117fc8:	003f0506 	br	117be0 <__alt_data_end+0xfffd7be0>
  117fcc:	10002b1e 	bne	r2,zero,11807c <__subdf3+0x71c>
  117fd0:	2984b03a 	or	r2,r5,r6
  117fd4:	10008026 	beq	r2,zero,1181d8 <__subdf3+0x878>
  117fd8:	2807883a 	mov	r3,r5
  117fdc:	3023883a 	mov	r17,r6
  117fe0:	3825883a 	mov	r18,r7
  117fe4:	0401ffc4 	movi	r16,2047
  117fe8:	003e7e06 	br	1179e4 <__alt_data_end+0xfffd79e4>
  117fec:	3809883a 	mov	r4,r7
  117ff0:	0011883a 	mov	r8,zero
  117ff4:	0005883a 	mov	r2,zero
  117ff8:	003ee306 	br	117b88 <__alt_data_end+0xfffd7b88>
  117ffc:	1c62b03a 	or	r17,r3,r17
  118000:	8822c03a 	cmpne	r17,r17,zero
  118004:	0005883a 	mov	r2,zero
  118008:	003f8906 	br	117e30 <__alt_data_end+0xfffd7e30>
  11800c:	3809883a 	mov	r4,r7
  118010:	4821883a 	mov	r16,r9
  118014:	0011883a 	mov	r8,zero
  118018:	0005883a 	mov	r2,zero
  11801c:	003eda06 	br	117b88 <__alt_data_end+0xfffd7b88>
  118020:	0101ffc4 	movi	r4,2047
  118024:	49003b26 	beq	r9,r4,118114 <__subdf3+0x7b4>
  118028:	0085c83a 	sub	r2,zero,r2
  11802c:	18c02034 	orhi	r3,r3,128
  118030:	01000e04 	movi	r4,56
  118034:	20806e16 	blt	r4,r2,1181f0 <__subdf3+0x890>
  118038:	010007c4 	movi	r4,31
  11803c:	20807716 	blt	r4,r2,11821c <__subdf3+0x8bc>
  118040:	01000804 	movi	r4,32
  118044:	2089c83a 	sub	r4,r4,r2
  118048:	1914983a 	sll	r10,r3,r4
  11804c:	8890d83a 	srl	r8,r17,r2
  118050:	8908983a 	sll	r4,r17,r4
  118054:	1884d83a 	srl	r2,r3,r2
  118058:	5222b03a 	or	r17,r10,r8
  11805c:	2006c03a 	cmpne	r3,r4,zero
  118060:	88e2b03a 	or	r17,r17,r3
  118064:	89a3883a 	add	r17,r17,r6
  118068:	1145883a 	add	r2,r2,r5
  11806c:	898d803a 	cmpltu	r6,r17,r6
  118070:	3087883a 	add	r3,r6,r2
  118074:	4821883a 	mov	r16,r9
  118078:	003ed906 	br	117be0 <__alt_data_end+0xfffd7be0>
  11807c:	2984b03a 	or	r2,r5,r6
  118080:	10004226 	beq	r2,zero,11818c <__subdf3+0x82c>
  118084:	1808d0fa 	srli	r4,r3,3
  118088:	8822d0fa 	srli	r17,r17,3
  11808c:	1806977a 	slli	r3,r3,29
  118090:	2080022c 	andhi	r2,r4,8
  118094:	1c62b03a 	or	r17,r3,r17
  118098:	10000826 	beq	r2,zero,1180bc <__subdf3+0x75c>
  11809c:	2812d0fa 	srli	r9,r5,3
  1180a0:	4880022c 	andhi	r2,r9,8
  1180a4:	1000051e 	bne	r2,zero,1180bc <__subdf3+0x75c>
  1180a8:	300cd0fa 	srli	r6,r6,3
  1180ac:	2804977a 	slli	r2,r5,29
  1180b0:	4809883a 	mov	r4,r9
  1180b4:	3825883a 	mov	r18,r7
  1180b8:	11a2b03a 	or	r17,r2,r6
  1180bc:	8806d77a 	srli	r3,r17,29
  1180c0:	200890fa 	slli	r4,r4,3
  1180c4:	882290fa 	slli	r17,r17,3
  1180c8:	0401ffc4 	movi	r16,2047
  1180cc:	1906b03a 	or	r3,r3,r4
  1180d0:	003e4406 	br	1179e4 <__alt_data_end+0xfffd79e4>
  1180d4:	2984b03a 	or	r2,r5,r6
  1180d8:	103e4226 	beq	r2,zero,1179e4 <__alt_data_end+0xfffd79e4>
  1180dc:	8989c83a 	sub	r4,r17,r6
  1180e0:	8911803a 	cmpltu	r8,r17,r4
  1180e4:	1945c83a 	sub	r2,r3,r5
  1180e8:	1205c83a 	sub	r2,r2,r8
  1180ec:	1200202c 	andhi	r8,r2,128
  1180f0:	403e9a26 	beq	r8,zero,117b5c <__alt_data_end+0xfffd7b5c>
  1180f4:	3463c83a 	sub	r17,r6,r17
  1180f8:	28c5c83a 	sub	r2,r5,r3
  1180fc:	344d803a 	cmpltu	r6,r6,r17
  118100:	1187c83a 	sub	r3,r2,r6
  118104:	3825883a 	mov	r18,r7
  118108:	003e3606 	br	1179e4 <__alt_data_end+0xfffd79e4>
  11810c:	0101ffc4 	movi	r4,2047
  118110:	493fc71e 	bne	r9,r4,118030 <__alt_data_end+0xfffd8030>
  118114:	2807883a 	mov	r3,r5
  118118:	3023883a 	mov	r17,r6
  11811c:	4821883a 	mov	r16,r9
  118120:	003e3006 	br	1179e4 <__alt_data_end+0xfffd79e4>
  118124:	10003626 	beq	r2,zero,118200 <__subdf3+0x8a0>
  118128:	2984b03a 	or	r2,r5,r6
  11812c:	10001726 	beq	r2,zero,11818c <__subdf3+0x82c>
  118130:	1808d0fa 	srli	r4,r3,3
  118134:	8822d0fa 	srli	r17,r17,3
  118138:	1806977a 	slli	r3,r3,29
  11813c:	2080022c 	andhi	r2,r4,8
  118140:	1c62b03a 	or	r17,r3,r17
  118144:	10000726 	beq	r2,zero,118164 <__subdf3+0x804>
  118148:	2812d0fa 	srli	r9,r5,3
  11814c:	4880022c 	andhi	r2,r9,8
  118150:	1000041e 	bne	r2,zero,118164 <__subdf3+0x804>
  118154:	300cd0fa 	srli	r6,r6,3
  118158:	2804977a 	slli	r2,r5,29
  11815c:	4809883a 	mov	r4,r9
  118160:	11a2b03a 	or	r17,r2,r6
  118164:	8806d77a 	srli	r3,r17,29
  118168:	200890fa 	slli	r4,r4,3
  11816c:	882290fa 	slli	r17,r17,3
  118170:	3825883a 	mov	r18,r7
  118174:	1906b03a 	or	r3,r3,r4
  118178:	0401ffc4 	movi	r16,2047
  11817c:	003e1906 	br	1179e4 <__alt_data_end+0xfffd79e4>
  118180:	000b883a 	mov	r5,zero
  118184:	0005883a 	mov	r2,zero
  118188:	003e2e06 	br	117a44 <__alt_data_end+0xfffd7a44>
  11818c:	0401ffc4 	movi	r16,2047
  118190:	003e1406 	br	1179e4 <__alt_data_end+0xfffd79e4>
  118194:	0005883a 	mov	r2,zero
  118198:	003f7506 	br	117f70 <__alt_data_end+0xfffd7f70>
  11819c:	0005883a 	mov	r2,zero
  1181a0:	0009883a 	mov	r4,zero
  1181a4:	003e7806 	br	117b88 <__alt_data_end+0xfffd7b88>
  1181a8:	123ff804 	addi	r8,r2,-32
  1181ac:	01000804 	movi	r4,32
  1181b0:	1a10d83a 	srl	r8,r3,r8
  1181b4:	11002526 	beq	r2,r4,11824c <__subdf3+0x8ec>
  1181b8:	01001004 	movi	r4,64
  1181bc:	2085c83a 	sub	r2,r4,r2
  1181c0:	1884983a 	sll	r2,r3,r2
  1181c4:	1444b03a 	or	r2,r2,r17
  1181c8:	1004c03a 	cmpne	r2,r2,zero
  1181cc:	40a2b03a 	or	r17,r8,r2
  1181d0:	0005883a 	mov	r2,zero
  1181d4:	003f1606 	br	117e30 <__alt_data_end+0xfffd7e30>
  1181d8:	02000434 	movhi	r8,16
  1181dc:	0009883a 	mov	r4,zero
  1181e0:	423fffc4 	addi	r8,r8,-1
  1181e4:	00bfffc4 	movi	r2,-1
  1181e8:	0401ffc4 	movi	r16,2047
  1181ec:	003e6606 	br	117b88 <__alt_data_end+0xfffd7b88>
  1181f0:	1c62b03a 	or	r17,r3,r17
  1181f4:	8822c03a 	cmpne	r17,r17,zero
  1181f8:	0005883a 	mov	r2,zero
  1181fc:	003f9906 	br	118064 <__alt_data_end+0xfffd8064>
  118200:	2807883a 	mov	r3,r5
  118204:	3023883a 	mov	r17,r6
  118208:	0401ffc4 	movi	r16,2047
  11820c:	003df506 	br	1179e4 <__alt_data_end+0xfffd79e4>
  118210:	2807883a 	mov	r3,r5
  118214:	3023883a 	mov	r17,r6
  118218:	003df206 	br	1179e4 <__alt_data_end+0xfffd79e4>
  11821c:	123ff804 	addi	r8,r2,-32
  118220:	01000804 	movi	r4,32
  118224:	1a10d83a 	srl	r8,r3,r8
  118228:	11000a26 	beq	r2,r4,118254 <__subdf3+0x8f4>
  11822c:	01001004 	movi	r4,64
  118230:	2085c83a 	sub	r2,r4,r2
  118234:	1884983a 	sll	r2,r3,r2
  118238:	1444b03a 	or	r2,r2,r17
  11823c:	1004c03a 	cmpne	r2,r2,zero
  118240:	40a2b03a 	or	r17,r8,r2
  118244:	0005883a 	mov	r2,zero
  118248:	003f8606 	br	118064 <__alt_data_end+0xfffd8064>
  11824c:	0005883a 	mov	r2,zero
  118250:	003fdc06 	br	1181c4 <__alt_data_end+0xfffd81c4>
  118254:	0005883a 	mov	r2,zero
  118258:	003ff706 	br	118238 <__alt_data_end+0xfffd8238>

0011825c <__fixdfsi>:
  11825c:	280cd53a 	srli	r6,r5,20
  118260:	00c00434 	movhi	r3,16
  118264:	18ffffc4 	addi	r3,r3,-1
  118268:	3181ffcc 	andi	r6,r6,2047
  11826c:	01c0ff84 	movi	r7,1022
  118270:	28c6703a 	and	r3,r5,r3
  118274:	280ad7fa 	srli	r5,r5,31
  118278:	3980120e 	bge	r7,r6,1182c4 <__fixdfsi+0x68>
  11827c:	00810744 	movi	r2,1053
  118280:	11800c16 	blt	r2,r6,1182b4 <__fixdfsi+0x58>
  118284:	00810cc4 	movi	r2,1075
  118288:	1185c83a 	sub	r2,r2,r6
  11828c:	01c007c4 	movi	r7,31
  118290:	18c00434 	orhi	r3,r3,16
  118294:	38800d16 	blt	r7,r2,1182cc <__fixdfsi+0x70>
  118298:	31befb44 	addi	r6,r6,-1043
  11829c:	2084d83a 	srl	r2,r4,r2
  1182a0:	1986983a 	sll	r3,r3,r6
  1182a4:	1884b03a 	or	r2,r3,r2
  1182a8:	28000726 	beq	r5,zero,1182c8 <__fixdfsi+0x6c>
  1182ac:	0085c83a 	sub	r2,zero,r2
  1182b0:	f800283a 	ret
  1182b4:	00a00034 	movhi	r2,32768
  1182b8:	10bfffc4 	addi	r2,r2,-1
  1182bc:	2885883a 	add	r2,r5,r2
  1182c0:	f800283a 	ret
  1182c4:	0005883a 	mov	r2,zero
  1182c8:	f800283a 	ret
  1182cc:	008104c4 	movi	r2,1043
  1182d0:	1185c83a 	sub	r2,r2,r6
  1182d4:	1884d83a 	srl	r2,r3,r2
  1182d8:	003ff306 	br	1182a8 <__alt_data_end+0xfffd82a8>

001182dc <__floatsidf>:
  1182dc:	defffd04 	addi	sp,sp,-12
  1182e0:	dfc00215 	stw	ra,8(sp)
  1182e4:	dc400115 	stw	r17,4(sp)
  1182e8:	dc000015 	stw	r16,0(sp)
  1182ec:	20002b26 	beq	r4,zero,11839c <__floatsidf+0xc0>
  1182f0:	2023883a 	mov	r17,r4
  1182f4:	2020d7fa 	srli	r16,r4,31
  1182f8:	20002d16 	blt	r4,zero,1183b0 <__floatsidf+0xd4>
  1182fc:	8809883a 	mov	r4,r17
  118300:	01186080 	call	118608 <__clzsi2>
  118304:	01410784 	movi	r5,1054
  118308:	288bc83a 	sub	r5,r5,r2
  11830c:	01010cc4 	movi	r4,1075
  118310:	2149c83a 	sub	r4,r4,r5
  118314:	00c007c4 	movi	r3,31
  118318:	1900160e 	bge	r3,r4,118374 <__floatsidf+0x98>
  11831c:	00c104c4 	movi	r3,1043
  118320:	1947c83a 	sub	r3,r3,r5
  118324:	88c6983a 	sll	r3,r17,r3
  118328:	00800434 	movhi	r2,16
  11832c:	10bfffc4 	addi	r2,r2,-1
  118330:	1886703a 	and	r3,r3,r2
  118334:	2941ffcc 	andi	r5,r5,2047
  118338:	800d883a 	mov	r6,r16
  11833c:	0005883a 	mov	r2,zero
  118340:	280a953a 	slli	r5,r5,20
  118344:	31803fcc 	andi	r6,r6,255
  118348:	01000434 	movhi	r4,16
  11834c:	300c97fa 	slli	r6,r6,31
  118350:	213fffc4 	addi	r4,r4,-1
  118354:	1906703a 	and	r3,r3,r4
  118358:	1946b03a 	or	r3,r3,r5
  11835c:	1986b03a 	or	r3,r3,r6
  118360:	dfc00217 	ldw	ra,8(sp)
  118364:	dc400117 	ldw	r17,4(sp)
  118368:	dc000017 	ldw	r16,0(sp)
  11836c:	dec00304 	addi	sp,sp,12
  118370:	f800283a 	ret
  118374:	00c002c4 	movi	r3,11
  118378:	1887c83a 	sub	r3,r3,r2
  11837c:	88c6d83a 	srl	r3,r17,r3
  118380:	8904983a 	sll	r2,r17,r4
  118384:	01000434 	movhi	r4,16
  118388:	213fffc4 	addi	r4,r4,-1
  11838c:	2941ffcc 	andi	r5,r5,2047
  118390:	1906703a 	and	r3,r3,r4
  118394:	800d883a 	mov	r6,r16
  118398:	003fe906 	br	118340 <__alt_data_end+0xfffd8340>
  11839c:	000d883a 	mov	r6,zero
  1183a0:	000b883a 	mov	r5,zero
  1183a4:	0007883a 	mov	r3,zero
  1183a8:	0005883a 	mov	r2,zero
  1183ac:	003fe406 	br	118340 <__alt_data_end+0xfffd8340>
  1183b0:	0123c83a 	sub	r17,zero,r4
  1183b4:	003fd106 	br	1182fc <__alt_data_end+0xfffd82fc>

001183b8 <__floatunsidf>:
  1183b8:	defffe04 	addi	sp,sp,-8
  1183bc:	dc000015 	stw	r16,0(sp)
  1183c0:	dfc00115 	stw	ra,4(sp)
  1183c4:	2021883a 	mov	r16,r4
  1183c8:	20002226 	beq	r4,zero,118454 <__floatunsidf+0x9c>
  1183cc:	01186080 	call	118608 <__clzsi2>
  1183d0:	01010784 	movi	r4,1054
  1183d4:	2089c83a 	sub	r4,r4,r2
  1183d8:	01810cc4 	movi	r6,1075
  1183dc:	310dc83a 	sub	r6,r6,r4
  1183e0:	00c007c4 	movi	r3,31
  1183e4:	1980120e 	bge	r3,r6,118430 <__floatunsidf+0x78>
  1183e8:	00c104c4 	movi	r3,1043
  1183ec:	1907c83a 	sub	r3,r3,r4
  1183f0:	80ca983a 	sll	r5,r16,r3
  1183f4:	00800434 	movhi	r2,16
  1183f8:	10bfffc4 	addi	r2,r2,-1
  1183fc:	2101ffcc 	andi	r4,r4,2047
  118400:	0021883a 	mov	r16,zero
  118404:	288a703a 	and	r5,r5,r2
  118408:	2008953a 	slli	r4,r4,20
  11840c:	00c00434 	movhi	r3,16
  118410:	18ffffc4 	addi	r3,r3,-1
  118414:	28c6703a 	and	r3,r5,r3
  118418:	8005883a 	mov	r2,r16
  11841c:	1906b03a 	or	r3,r3,r4
  118420:	dfc00117 	ldw	ra,4(sp)
  118424:	dc000017 	ldw	r16,0(sp)
  118428:	dec00204 	addi	sp,sp,8
  11842c:	f800283a 	ret
  118430:	00c002c4 	movi	r3,11
  118434:	188bc83a 	sub	r5,r3,r2
  118438:	814ad83a 	srl	r5,r16,r5
  11843c:	00c00434 	movhi	r3,16
  118440:	18ffffc4 	addi	r3,r3,-1
  118444:	81a0983a 	sll	r16,r16,r6
  118448:	2101ffcc 	andi	r4,r4,2047
  11844c:	28ca703a 	and	r5,r5,r3
  118450:	003fed06 	br	118408 <__alt_data_end+0xfffd8408>
  118454:	0009883a 	mov	r4,zero
  118458:	000b883a 	mov	r5,zero
  11845c:	003fea06 	br	118408 <__alt_data_end+0xfffd8408>

00118460 <__truncdfsf2>:
  118460:	2810d53a 	srli	r8,r5,20
  118464:	01c00434 	movhi	r7,16
  118468:	39ffffc4 	addi	r7,r7,-1
  11846c:	29ce703a 	and	r7,r5,r7
  118470:	4201ffcc 	andi	r8,r8,2047
  118474:	380e90fa 	slli	r7,r7,3
  118478:	200cd77a 	srli	r6,r4,29
  11847c:	42400044 	addi	r9,r8,1
  118480:	4a41ffcc 	andi	r9,r9,2047
  118484:	00c00044 	movi	r3,1
  118488:	280ad7fa 	srli	r5,r5,31
  11848c:	31ceb03a 	or	r7,r6,r7
  118490:	200490fa 	slli	r2,r4,3
  118494:	1a40230e 	bge	r3,r9,118524 <__truncdfsf2+0xc4>
  118498:	40ff2004 	addi	r3,r8,-896
  11849c:	01803f84 	movi	r6,254
  1184a0:	30c01516 	blt	r6,r3,1184f8 <__truncdfsf2+0x98>
  1184a4:	00c0380e 	bge	zero,r3,118588 <__truncdfsf2+0x128>
  1184a8:	200c91ba 	slli	r6,r4,6
  1184ac:	380e90fa 	slli	r7,r7,3
  1184b0:	1004d77a 	srli	r2,r2,29
  1184b4:	300cc03a 	cmpne	r6,r6,zero
  1184b8:	31ccb03a 	or	r6,r6,r7
  1184bc:	308cb03a 	or	r6,r6,r2
  1184c0:	308001cc 	andi	r2,r6,7
  1184c4:	10000426 	beq	r2,zero,1184d8 <__truncdfsf2+0x78>
  1184c8:	308003cc 	andi	r2,r6,15
  1184cc:	01000104 	movi	r4,4
  1184d0:	11000126 	beq	r2,r4,1184d8 <__truncdfsf2+0x78>
  1184d4:	31800104 	addi	r6,r6,4
  1184d8:	3081002c 	andhi	r2,r6,1024
  1184dc:	10001626 	beq	r2,zero,118538 <__truncdfsf2+0xd8>
  1184e0:	18c00044 	addi	r3,r3,1
  1184e4:	00803fc4 	movi	r2,255
  1184e8:	18800326 	beq	r3,r2,1184f8 <__truncdfsf2+0x98>
  1184ec:	300c91ba 	slli	r6,r6,6
  1184f0:	300cd27a 	srli	r6,r6,9
  1184f4:	00000206 	br	118500 <__truncdfsf2+0xa0>
  1184f8:	00ffffc4 	movi	r3,-1
  1184fc:	000d883a 	mov	r6,zero
  118500:	18c03fcc 	andi	r3,r3,255
  118504:	180895fa 	slli	r4,r3,23
  118508:	00c02034 	movhi	r3,128
  11850c:	280a97fa 	slli	r5,r5,31
  118510:	18ffffc4 	addi	r3,r3,-1
  118514:	30c6703a 	and	r3,r6,r3
  118518:	1906b03a 	or	r3,r3,r4
  11851c:	1944b03a 	or	r2,r3,r5
  118520:	f800283a 	ret
  118524:	40000b1e 	bne	r8,zero,118554 <__truncdfsf2+0xf4>
  118528:	388cb03a 	or	r6,r7,r2
  11852c:	0007883a 	mov	r3,zero
  118530:	30000426 	beq	r6,zero,118544 <__truncdfsf2+0xe4>
  118534:	01800144 	movi	r6,5
  118538:	00803fc4 	movi	r2,255
  11853c:	300cd0fa 	srli	r6,r6,3
  118540:	18800a26 	beq	r3,r2,11856c <__truncdfsf2+0x10c>
  118544:	00802034 	movhi	r2,128
  118548:	10bfffc4 	addi	r2,r2,-1
  11854c:	308c703a 	and	r6,r6,r2
  118550:	003feb06 	br	118500 <__alt_data_end+0xfffd8500>
  118554:	3888b03a 	or	r4,r7,r2
  118558:	203fe726 	beq	r4,zero,1184f8 <__alt_data_end+0xfffd84f8>
  11855c:	380c90fa 	slli	r6,r7,3
  118560:	00c03fc4 	movi	r3,255
  118564:	31808034 	orhi	r6,r6,512
  118568:	003fd506 	br	1184c0 <__alt_data_end+0xfffd84c0>
  11856c:	303fe226 	beq	r6,zero,1184f8 <__alt_data_end+0xfffd84f8>
  118570:	00802034 	movhi	r2,128
  118574:	31801034 	orhi	r6,r6,64
  118578:	10bfffc4 	addi	r2,r2,-1
  11857c:	00ffffc4 	movi	r3,-1
  118580:	308c703a 	and	r6,r6,r2
  118584:	003fde06 	br	118500 <__alt_data_end+0xfffd8500>
  118588:	013ffa44 	movi	r4,-23
  11858c:	19000e16 	blt	r3,r4,1185c8 <__truncdfsf2+0x168>
  118590:	01000784 	movi	r4,30
  118594:	20c9c83a 	sub	r4,r4,r3
  118598:	018007c4 	movi	r6,31
  11859c:	39c02034 	orhi	r7,r7,128
  1185a0:	31000b16 	blt	r6,r4,1185d0 <__truncdfsf2+0x170>
  1185a4:	423f2084 	addi	r8,r8,-894
  1185a8:	120c983a 	sll	r6,r2,r8
  1185ac:	3a0e983a 	sll	r7,r7,r8
  1185b0:	1104d83a 	srl	r2,r2,r4
  1185b4:	300cc03a 	cmpne	r6,r6,zero
  1185b8:	31ceb03a 	or	r7,r6,r7
  1185bc:	388cb03a 	or	r6,r7,r2
  1185c0:	0007883a 	mov	r3,zero
  1185c4:	003fbe06 	br	1184c0 <__alt_data_end+0xfffd84c0>
  1185c8:	0007883a 	mov	r3,zero
  1185cc:	003fd906 	br	118534 <__alt_data_end+0xfffd8534>
  1185d0:	01bfff84 	movi	r6,-2
  1185d4:	30cdc83a 	sub	r6,r6,r3
  1185d8:	00c00804 	movi	r3,32
  1185dc:	398cd83a 	srl	r6,r7,r6
  1185e0:	20c00726 	beq	r4,r3,118600 <__truncdfsf2+0x1a0>
  1185e4:	423f2884 	addi	r8,r8,-862
  1185e8:	3a0e983a 	sll	r7,r7,r8
  1185ec:	3884b03a 	or	r2,r7,r2
  1185f0:	1004c03a 	cmpne	r2,r2,zero
  1185f4:	118cb03a 	or	r6,r2,r6
  1185f8:	0007883a 	mov	r3,zero
  1185fc:	003fb006 	br	1184c0 <__alt_data_end+0xfffd84c0>
  118600:	000f883a 	mov	r7,zero
  118604:	003ff906 	br	1185ec <__alt_data_end+0xfffd85ec>

00118608 <__clzsi2>:
  118608:	00bfffd4 	movui	r2,65535
  11860c:	11000536 	bltu	r2,r4,118624 <__clzsi2+0x1c>
  118610:	00803fc4 	movi	r2,255
  118614:	11000f36 	bltu	r2,r4,118654 <__clzsi2+0x4c>
  118618:	00800804 	movi	r2,32
  11861c:	0007883a 	mov	r3,zero
  118620:	00000506 	br	118638 <__clzsi2+0x30>
  118624:	00804034 	movhi	r2,256
  118628:	10bfffc4 	addi	r2,r2,-1
  11862c:	11000c2e 	bgeu	r2,r4,118660 <__clzsi2+0x58>
  118630:	00800204 	movi	r2,8
  118634:	00c00604 	movi	r3,24
  118638:	20c8d83a 	srl	r4,r4,r3
  11863c:	00c004b4 	movhi	r3,18
  118640:	18ce1484 	addi	r3,r3,14418
  118644:	1909883a 	add	r4,r3,r4
  118648:	20c00003 	ldbu	r3,0(r4)
  11864c:	10c5c83a 	sub	r2,r2,r3
  118650:	f800283a 	ret
  118654:	00800604 	movi	r2,24
  118658:	00c00204 	movi	r3,8
  11865c:	003ff606 	br	118638 <__alt_data_end+0xfffd8638>
  118660:	00800404 	movi	r2,16
  118664:	1007883a 	mov	r3,r2
  118668:	003ff306 	br	118638 <__alt_data_end+0xfffd8638>

0011866c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  11866c:	defffe04 	addi	sp,sp,-8
  118670:	dfc00115 	stw	ra,4(sp)
  118674:	df000015 	stw	fp,0(sp)
  118678:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  11867c:	d0a00d17 	ldw	r2,-32716(gp)
  118680:	10000326 	beq	r2,zero,118690 <alt_get_errno+0x24>
  118684:	d0a00d17 	ldw	r2,-32716(gp)
  118688:	103ee83a 	callr	r2
  11868c:	00000106 	br	118694 <alt_get_errno+0x28>
  118690:	d0a72a04 	addi	r2,gp,-25432
}
  118694:	e037883a 	mov	sp,fp
  118698:	dfc00117 	ldw	ra,4(sp)
  11869c:	df000017 	ldw	fp,0(sp)
  1186a0:	dec00204 	addi	sp,sp,8
  1186a4:	f800283a 	ret

001186a8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  1186a8:	defffb04 	addi	sp,sp,-20
  1186ac:	dfc00415 	stw	ra,16(sp)
  1186b0:	df000315 	stw	fp,12(sp)
  1186b4:	df000304 	addi	fp,sp,12
  1186b8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  1186bc:	e0bfff17 	ldw	r2,-4(fp)
  1186c0:	10000816 	blt	r2,zero,1186e4 <close+0x3c>
  1186c4:	01400304 	movi	r5,12
  1186c8:	e13fff17 	ldw	r4,-4(fp)
  1186cc:	01159fc0 	call	1159fc <__mulsi3>
  1186d0:	1007883a 	mov	r3,r2
  1186d4:	008004b4 	movhi	r2,18
  1186d8:	1090f704 	addi	r2,r2,17372
  1186dc:	1885883a 	add	r2,r3,r2
  1186e0:	00000106 	br	1186e8 <close+0x40>
  1186e4:	0005883a 	mov	r2,zero
  1186e8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  1186ec:	e0bffd17 	ldw	r2,-12(fp)
  1186f0:	10001926 	beq	r2,zero,118758 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  1186f4:	e0bffd17 	ldw	r2,-12(fp)
  1186f8:	10800017 	ldw	r2,0(r2)
  1186fc:	10800417 	ldw	r2,16(r2)
  118700:	10000626 	beq	r2,zero,11871c <close+0x74>
  118704:	e0bffd17 	ldw	r2,-12(fp)
  118708:	10800017 	ldw	r2,0(r2)
  11870c:	10800417 	ldw	r2,16(r2)
  118710:	e13ffd17 	ldw	r4,-12(fp)
  118714:	103ee83a 	callr	r2
  118718:	00000106 	br	118720 <close+0x78>
  11871c:	0005883a 	mov	r2,zero
  118720:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  118724:	e13fff17 	ldw	r4,-4(fp)
  118728:	0118d880 	call	118d88 <alt_release_fd>
    if (rval < 0)
  11872c:	e0bffe17 	ldw	r2,-8(fp)
  118730:	1000070e 	bge	r2,zero,118750 <close+0xa8>
    {
      ALT_ERRNO = -rval;
  118734:	011866c0 	call	11866c <alt_get_errno>
  118738:	1007883a 	mov	r3,r2
  11873c:	e0bffe17 	ldw	r2,-8(fp)
  118740:	0085c83a 	sub	r2,zero,r2
  118744:	18800015 	stw	r2,0(r3)
      return -1;
  118748:	00bfffc4 	movi	r2,-1
  11874c:	00000706 	br	11876c <close+0xc4>
    }
    return 0;
  118750:	0005883a 	mov	r2,zero
  118754:	00000506 	br	11876c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  118758:	011866c0 	call	11866c <alt_get_errno>
  11875c:	1007883a 	mov	r3,r2
  118760:	00801444 	movi	r2,81
  118764:	18800015 	stw	r2,0(r3)
    return -1;
  118768:	00bfffc4 	movi	r2,-1
  }
}
  11876c:	e037883a 	mov	sp,fp
  118770:	dfc00117 	ldw	ra,4(sp)
  118774:	df000017 	ldw	fp,0(sp)
  118778:	dec00204 	addi	sp,sp,8
  11877c:	f800283a 	ret

00118780 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  118780:	defffc04 	addi	sp,sp,-16
  118784:	df000315 	stw	fp,12(sp)
  118788:	df000304 	addi	fp,sp,12
  11878c:	e13ffd15 	stw	r4,-12(fp)
  118790:	e17ffe15 	stw	r5,-8(fp)
  118794:	e1bfff15 	stw	r6,-4(fp)
  return len;
  118798:	e0bfff17 	ldw	r2,-4(fp)
}
  11879c:	e037883a 	mov	sp,fp
  1187a0:	df000017 	ldw	fp,0(sp)
  1187a4:	dec00104 	addi	sp,sp,4
  1187a8:	f800283a 	ret

001187ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  1187ac:	defffe04 	addi	sp,sp,-8
  1187b0:	dfc00115 	stw	ra,4(sp)
  1187b4:	df000015 	stw	fp,0(sp)
  1187b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  1187bc:	d0a00d17 	ldw	r2,-32716(gp)
  1187c0:	10000326 	beq	r2,zero,1187d0 <alt_get_errno+0x24>
  1187c4:	d0a00d17 	ldw	r2,-32716(gp)
  1187c8:	103ee83a 	callr	r2
  1187cc:	00000106 	br	1187d4 <alt_get_errno+0x28>
  1187d0:	d0a72a04 	addi	r2,gp,-25432
}
  1187d4:	e037883a 	mov	sp,fp
  1187d8:	dfc00117 	ldw	ra,4(sp)
  1187dc:	df000017 	ldw	fp,0(sp)
  1187e0:	dec00204 	addi	sp,sp,8
  1187e4:	f800283a 	ret

001187e8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  1187e8:	defffb04 	addi	sp,sp,-20
  1187ec:	dfc00415 	stw	ra,16(sp)
  1187f0:	df000315 	stw	fp,12(sp)
  1187f4:	df000304 	addi	fp,sp,12
  1187f8:	e13ffe15 	stw	r4,-8(fp)
  1187fc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  118800:	e0bffe17 	ldw	r2,-8(fp)
  118804:	10000816 	blt	r2,zero,118828 <fstat+0x40>
  118808:	01400304 	movi	r5,12
  11880c:	e13ffe17 	ldw	r4,-8(fp)
  118810:	01159fc0 	call	1159fc <__mulsi3>
  118814:	1007883a 	mov	r3,r2
  118818:	008004b4 	movhi	r2,18
  11881c:	1090f704 	addi	r2,r2,17372
  118820:	1885883a 	add	r2,r3,r2
  118824:	00000106 	br	11882c <fstat+0x44>
  118828:	0005883a 	mov	r2,zero
  11882c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  118830:	e0bffd17 	ldw	r2,-12(fp)
  118834:	10001026 	beq	r2,zero,118878 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  118838:	e0bffd17 	ldw	r2,-12(fp)
  11883c:	10800017 	ldw	r2,0(r2)
  118840:	10800817 	ldw	r2,32(r2)
  118844:	10000726 	beq	r2,zero,118864 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
  118848:	e0bffd17 	ldw	r2,-12(fp)
  11884c:	10800017 	ldw	r2,0(r2)
  118850:	10800817 	ldw	r2,32(r2)
  118854:	e17fff17 	ldw	r5,-4(fp)
  118858:	e13ffd17 	ldw	r4,-12(fp)
  11885c:	103ee83a 	callr	r2
  118860:	00000a06 	br	11888c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  118864:	e0bfff17 	ldw	r2,-4(fp)
  118868:	00c80004 	movi	r3,8192
  11886c:	10c00115 	stw	r3,4(r2)
      return 0;
  118870:	0005883a 	mov	r2,zero
  118874:	00000506 	br	11888c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  118878:	01187ac0 	call	1187ac <alt_get_errno>
  11887c:	1007883a 	mov	r3,r2
  118880:	00801444 	movi	r2,81
  118884:	18800015 	stw	r2,0(r3)
    return -1;
  118888:	00bfffc4 	movi	r2,-1
  }
}
  11888c:	e037883a 	mov	sp,fp
  118890:	dfc00117 	ldw	ra,4(sp)
  118894:	df000017 	ldw	fp,0(sp)
  118898:	dec00204 	addi	sp,sp,8
  11889c:	f800283a 	ret

001188a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  1188a0:	defffe04 	addi	sp,sp,-8
  1188a4:	dfc00115 	stw	ra,4(sp)
  1188a8:	df000015 	stw	fp,0(sp)
  1188ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  1188b0:	d0a00d17 	ldw	r2,-32716(gp)
  1188b4:	10000326 	beq	r2,zero,1188c4 <alt_get_errno+0x24>
  1188b8:	d0a00d17 	ldw	r2,-32716(gp)
  1188bc:	103ee83a 	callr	r2
  1188c0:	00000106 	br	1188c8 <alt_get_errno+0x28>
  1188c4:	d0a72a04 	addi	r2,gp,-25432
}
  1188c8:	e037883a 	mov	sp,fp
  1188cc:	dfc00117 	ldw	ra,4(sp)
  1188d0:	df000017 	ldw	fp,0(sp)
  1188d4:	dec00204 	addi	sp,sp,8
  1188d8:	f800283a 	ret

001188dc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  1188dc:	deffed04 	addi	sp,sp,-76
  1188e0:	dfc01215 	stw	ra,72(sp)
  1188e4:	df001115 	stw	fp,68(sp)
  1188e8:	df001104 	addi	fp,sp,68
  1188ec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  1188f0:	e0bfff17 	ldw	r2,-4(fp)
  1188f4:	10000816 	blt	r2,zero,118918 <isatty+0x3c>
  1188f8:	01400304 	movi	r5,12
  1188fc:	e13fff17 	ldw	r4,-4(fp)
  118900:	01159fc0 	call	1159fc <__mulsi3>
  118904:	1007883a 	mov	r3,r2
  118908:	008004b4 	movhi	r2,18
  11890c:	1090f704 	addi	r2,r2,17372
  118910:	1885883a 	add	r2,r3,r2
  118914:	00000106 	br	11891c <isatty+0x40>
  118918:	0005883a 	mov	r2,zero
  11891c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  118920:	e0bfef17 	ldw	r2,-68(fp)
  118924:	10000e26 	beq	r2,zero,118960 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  118928:	e0bfef17 	ldw	r2,-68(fp)
  11892c:	10800017 	ldw	r2,0(r2)
  118930:	10800817 	ldw	r2,32(r2)
  118934:	1000021e 	bne	r2,zero,118940 <isatty+0x64>
    {
      return 1;
  118938:	00800044 	movi	r2,1
  11893c:	00000d06 	br	118974 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  118940:	e0bff004 	addi	r2,fp,-64
  118944:	100b883a 	mov	r5,r2
  118948:	e13fff17 	ldw	r4,-4(fp)
  11894c:	01187e80 	call	1187e8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  118950:	e0bff117 	ldw	r2,-60(fp)
  118954:	10880020 	cmpeqi	r2,r2,8192
  118958:	10803fcc 	andi	r2,r2,255
  11895c:	00000506 	br	118974 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  118960:	01188a00 	call	1188a0 <alt_get_errno>
  118964:	1007883a 	mov	r3,r2
  118968:	00801444 	movi	r2,81
  11896c:	18800015 	stw	r2,0(r3)
    return 0;
  118970:	0005883a 	mov	r2,zero
  }
}
  118974:	e037883a 	mov	sp,fp
  118978:	dfc00117 	ldw	ra,4(sp)
  11897c:	df000017 	ldw	fp,0(sp)
  118980:	dec00204 	addi	sp,sp,8
  118984:	f800283a 	ret

00118988 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  118988:	defffc04 	addi	sp,sp,-16
  11898c:	df000315 	stw	fp,12(sp)
  118990:	df000304 	addi	fp,sp,12
  118994:	e13ffd15 	stw	r4,-12(fp)
  118998:	e17ffe15 	stw	r5,-8(fp)
  11899c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  1189a0:	e0fffe17 	ldw	r3,-8(fp)
  1189a4:	e0bffd17 	ldw	r2,-12(fp)
  1189a8:	18800c26 	beq	r3,r2,1189dc <alt_load_section+0x54>
  {
    while( to != end )
  1189ac:	00000806 	br	1189d0 <alt_load_section+0x48>
    {
      *to++ = *from++;
  1189b0:	e0bffe17 	ldw	r2,-8(fp)
  1189b4:	10c00104 	addi	r3,r2,4
  1189b8:	e0fffe15 	stw	r3,-8(fp)
  1189bc:	e0fffd17 	ldw	r3,-12(fp)
  1189c0:	19000104 	addi	r4,r3,4
  1189c4:	e13ffd15 	stw	r4,-12(fp)
  1189c8:	18c00017 	ldw	r3,0(r3)
  1189cc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  1189d0:	e0fffe17 	ldw	r3,-8(fp)
  1189d4:	e0bfff17 	ldw	r2,-4(fp)
  1189d8:	18bff51e 	bne	r3,r2,1189b0 <__alt_data_end+0xfffd89b0>
    {
      *to++ = *from++;
    }
  }
}
  1189dc:	0001883a 	nop
  1189e0:	e037883a 	mov	sp,fp
  1189e4:	df000017 	ldw	fp,0(sp)
  1189e8:	dec00104 	addi	sp,sp,4
  1189ec:	f800283a 	ret

001189f0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  1189f0:	defffe04 	addi	sp,sp,-8
  1189f4:	dfc00115 	stw	ra,4(sp)
  1189f8:	df000015 	stw	fp,0(sp)
  1189fc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  118a00:	018004b4 	movhi	r6,18
  118a04:	3195a304 	addi	r6,r6,22156
  118a08:	014004b4 	movhi	r5,18
  118a0c:	294eab04 	addi	r5,r5,15020
  118a10:	010004b4 	movhi	r4,18
  118a14:	2115a304 	addi	r4,r4,22156
  118a18:	01189880 	call	118988 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  118a1c:	01800434 	movhi	r6,16
  118a20:	31807004 	addi	r6,r6,448
  118a24:	01400434 	movhi	r5,16
  118a28:	29400804 	addi	r5,r5,32
  118a2c:	01000434 	movhi	r4,16
  118a30:	21000804 	addi	r4,r4,32
  118a34:	01189880 	call	118988 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  118a38:	018004b4 	movhi	r6,18
  118a3c:	318eab04 	addi	r6,r6,15020
  118a40:	014004b4 	movhi	r5,18
  118a44:	294bae04 	addi	r5,r5,11960
  118a48:	010004b4 	movhi	r4,18
  118a4c:	210bae04 	addi	r4,r4,11960
  118a50:	01189880 	call	118988 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  118a54:	0121b140 	call	121b14 <alt_dcache_flush_all>
  alt_icache_flush_all();
  118a58:	0121cd40 	call	121cd4 <alt_icache_flush_all>
}
  118a5c:	0001883a 	nop
  118a60:	e037883a 	mov	sp,fp
  118a64:	dfc00117 	ldw	ra,4(sp)
  118a68:	df000017 	ldw	fp,0(sp)
  118a6c:	dec00204 	addi	sp,sp,8
  118a70:	f800283a 	ret

00118a74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  118a74:	defffe04 	addi	sp,sp,-8
  118a78:	dfc00115 	stw	ra,4(sp)
  118a7c:	df000015 	stw	fp,0(sp)
  118a80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  118a84:	d0a00d17 	ldw	r2,-32716(gp)
  118a88:	10000326 	beq	r2,zero,118a98 <alt_get_errno+0x24>
  118a8c:	d0a00d17 	ldw	r2,-32716(gp)
  118a90:	103ee83a 	callr	r2
  118a94:	00000106 	br	118a9c <alt_get_errno+0x28>
  118a98:	d0a72a04 	addi	r2,gp,-25432
}
  118a9c:	e037883a 	mov	sp,fp
  118aa0:	dfc00117 	ldw	ra,4(sp)
  118aa4:	df000017 	ldw	fp,0(sp)
  118aa8:	dec00204 	addi	sp,sp,8
  118aac:	f800283a 	ret

00118ab0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  118ab0:	defff904 	addi	sp,sp,-28
  118ab4:	dfc00615 	stw	ra,24(sp)
  118ab8:	df000515 	stw	fp,20(sp)
  118abc:	df000504 	addi	fp,sp,20
  118ac0:	e13ffd15 	stw	r4,-12(fp)
  118ac4:	e17ffe15 	stw	r5,-8(fp)
  118ac8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  118acc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  118ad0:	e0bffd17 	ldw	r2,-12(fp)
  118ad4:	10000816 	blt	r2,zero,118af8 <lseek+0x48>
  118ad8:	01400304 	movi	r5,12
  118adc:	e13ffd17 	ldw	r4,-12(fp)
  118ae0:	01159fc0 	call	1159fc <__mulsi3>
  118ae4:	1007883a 	mov	r3,r2
  118ae8:	008004b4 	movhi	r2,18
  118aec:	1090f704 	addi	r2,r2,17372
  118af0:	1885883a 	add	r2,r3,r2
  118af4:	00000106 	br	118afc <lseek+0x4c>
  118af8:	0005883a 	mov	r2,zero
  118afc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  118b00:	e0bffc17 	ldw	r2,-16(fp)
  118b04:	10001026 	beq	r2,zero,118b48 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  118b08:	e0bffc17 	ldw	r2,-16(fp)
  118b0c:	10800017 	ldw	r2,0(r2)
  118b10:	10800717 	ldw	r2,28(r2)
  118b14:	10000926 	beq	r2,zero,118b3c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  118b18:	e0bffc17 	ldw	r2,-16(fp)
  118b1c:	10800017 	ldw	r2,0(r2)
  118b20:	10800717 	ldw	r2,28(r2)
  118b24:	e1bfff17 	ldw	r6,-4(fp)
  118b28:	e17ffe17 	ldw	r5,-8(fp)
  118b2c:	e13ffc17 	ldw	r4,-16(fp)
  118b30:	103ee83a 	callr	r2
  118b34:	e0bffb15 	stw	r2,-20(fp)
  118b38:	00000506 	br	118b50 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  118b3c:	00bfde84 	movi	r2,-134
  118b40:	e0bffb15 	stw	r2,-20(fp)
  118b44:	00000206 	br	118b50 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
  118b48:	00bfebc4 	movi	r2,-81
  118b4c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  118b50:	e0bffb17 	ldw	r2,-20(fp)
  118b54:	1000070e 	bge	r2,zero,118b74 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
  118b58:	0118a740 	call	118a74 <alt_get_errno>
  118b5c:	1007883a 	mov	r3,r2
  118b60:	e0bffb17 	ldw	r2,-20(fp)
  118b64:	0085c83a 	sub	r2,zero,r2
  118b68:	18800015 	stw	r2,0(r3)
    rc = -1;
  118b6c:	00bfffc4 	movi	r2,-1
  118b70:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  118b74:	e0bffb17 	ldw	r2,-20(fp)
}
  118b78:	e037883a 	mov	sp,fp
  118b7c:	dfc00117 	ldw	ra,4(sp)
  118b80:	df000017 	ldw	fp,0(sp)
  118b84:	dec00204 	addi	sp,sp,8
  118b88:	f800283a 	ret

00118b8c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  118b8c:	defff904 	addi	sp,sp,-28
  118b90:	dfc00615 	stw	ra,24(sp)
  118b94:	df000515 	stw	fp,20(sp)
  118b98:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  118b9c:	0009883a 	mov	r4,zero
  118ba0:	0120b340 	call	120b34 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  118ba4:	0119b780 	call	119b78 <OSInit>
  118ba8:	01000044 	movi	r4,1
  118bac:	011e4d40 	call	11e4d4 <OSSemCreate>
  118bb0:	d0a73615 	stw	r2,-25384(gp)
  118bb4:	01000044 	movi	r4,1
  118bb8:	011e4d40 	call	11e4d4 <OSSemCreate>
  118bbc:	d0a73815 	stw	r2,-25376(gp)
  118bc0:	d0a73104 	addi	r2,gp,-25404
  118bc4:	e0bffc15 	stw	r2,-16(fp)
  118bc8:	00800044 	movi	r2,1
  118bcc:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  118bd0:	e0bffd0b 	ldhu	r2,-12(fp)
  118bd4:	1009883a 	mov	r4,r2
  118bd8:	011e4d40 	call	11e4d4 <OSSemCreate>
  118bdc:	1007883a 	mov	r3,r2
  118be0:	e0bffc17 	ldw	r2,-16(fp)
  118be4:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  118be8:	0120b6c0 	call	120b6c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  118bec:	018004b4 	movhi	r6,18
  118bf0:	318e5804 	addi	r6,r6,14688
  118bf4:	014004b4 	movhi	r5,18
  118bf8:	294e5804 	addi	r5,r5,14688
  118bfc:	010004b4 	movhi	r4,18
  118c00:	210e5804 	addi	r4,r4,14688
  118c04:	01220780 	call	122078 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  118c08:	0121c140 	call	121c14 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  118c0c:	010004b4 	movhi	r4,18
  118c10:	21071d04 	addi	r4,r4,7284
  118c14:	0122b240 	call	122b24 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  118c18:	d0a73217 	ldw	r2,-25400(gp)
  118c1c:	d0e73317 	ldw	r3,-25396(gp)
  118c20:	d1273417 	ldw	r4,-25392(gp)
  118c24:	200d883a 	mov	r6,r4
  118c28:	180b883a 	mov	r5,r3
  118c2c:	1009883a 	mov	r4,r2
  118c30:	01002d40 	call	1002d4 <main>
  118c34:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
  118c38:	01000044 	movi	r4,1
  118c3c:	01186a80 	call	1186a8 <close>
  exit (result);
  118c40:	e13ffb17 	ldw	r4,-20(fp)
  118c44:	0122b380 	call	122b38 <exit>

00118c48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  118c48:	defffe04 	addi	sp,sp,-8
  118c4c:	dfc00115 	stw	ra,4(sp)
  118c50:	df000015 	stw	fp,0(sp)
  118c54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  118c58:	d0a00d17 	ldw	r2,-32716(gp)
  118c5c:	10000326 	beq	r2,zero,118c6c <alt_get_errno+0x24>
  118c60:	d0a00d17 	ldw	r2,-32716(gp)
  118c64:	103ee83a 	callr	r2
  118c68:	00000106 	br	118c70 <alt_get_errno+0x28>
  118c6c:	d0a72a04 	addi	r2,gp,-25432
}
  118c70:	e037883a 	mov	sp,fp
  118c74:	dfc00117 	ldw	ra,4(sp)
  118c78:	df000017 	ldw	fp,0(sp)
  118c7c:	dec00204 	addi	sp,sp,8
  118c80:	f800283a 	ret

00118c84 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  118c84:	defff904 	addi	sp,sp,-28
  118c88:	dfc00615 	stw	ra,24(sp)
  118c8c:	df000515 	stw	fp,20(sp)
  118c90:	df000504 	addi	fp,sp,20
  118c94:	e13ffd15 	stw	r4,-12(fp)
  118c98:	e17ffe15 	stw	r5,-8(fp)
  118c9c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  118ca0:	e0bffd17 	ldw	r2,-12(fp)
  118ca4:	10000816 	blt	r2,zero,118cc8 <read+0x44>
  118ca8:	01400304 	movi	r5,12
  118cac:	e13ffd17 	ldw	r4,-12(fp)
  118cb0:	01159fc0 	call	1159fc <__mulsi3>
  118cb4:	1007883a 	mov	r3,r2
  118cb8:	008004b4 	movhi	r2,18
  118cbc:	1090f704 	addi	r2,r2,17372
  118cc0:	1885883a 	add	r2,r3,r2
  118cc4:	00000106 	br	118ccc <read+0x48>
  118cc8:	0005883a 	mov	r2,zero
  118ccc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  118cd0:	e0bffb17 	ldw	r2,-20(fp)
  118cd4:	10002226 	beq	r2,zero,118d60 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  118cd8:	e0bffb17 	ldw	r2,-20(fp)
  118cdc:	10800217 	ldw	r2,8(r2)
  118ce0:	108000cc 	andi	r2,r2,3
  118ce4:	10800060 	cmpeqi	r2,r2,1
  118ce8:	1000181e 	bne	r2,zero,118d4c <read+0xc8>
        (fd->dev->read))
  118cec:	e0bffb17 	ldw	r2,-20(fp)
  118cf0:	10800017 	ldw	r2,0(r2)
  118cf4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  118cf8:	10001426 	beq	r2,zero,118d4c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  118cfc:	e0bffb17 	ldw	r2,-20(fp)
  118d00:	10800017 	ldw	r2,0(r2)
  118d04:	10800517 	ldw	r2,20(r2)
  118d08:	e0ffff17 	ldw	r3,-4(fp)
  118d0c:	180d883a 	mov	r6,r3
  118d10:	e17ffe17 	ldw	r5,-8(fp)
  118d14:	e13ffb17 	ldw	r4,-20(fp)
  118d18:	103ee83a 	callr	r2
  118d1c:	e0bffc15 	stw	r2,-16(fp)
  118d20:	e0bffc17 	ldw	r2,-16(fp)
  118d24:	1000070e 	bge	r2,zero,118d44 <read+0xc0>
        {
          ALT_ERRNO = -rval;
  118d28:	0118c480 	call	118c48 <alt_get_errno>
  118d2c:	1007883a 	mov	r3,r2
  118d30:	e0bffc17 	ldw	r2,-16(fp)
  118d34:	0085c83a 	sub	r2,zero,r2
  118d38:	18800015 	stw	r2,0(r3)
          return -1;
  118d3c:	00bfffc4 	movi	r2,-1
  118d40:	00000c06 	br	118d74 <read+0xf0>
        }
        return rval;
  118d44:	e0bffc17 	ldw	r2,-16(fp)
  118d48:	00000a06 	br	118d74 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
  118d4c:	0118c480 	call	118c48 <alt_get_errno>
  118d50:	1007883a 	mov	r3,r2
  118d54:	00800344 	movi	r2,13
  118d58:	18800015 	stw	r2,0(r3)
  118d5c:	00000406 	br	118d70 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  118d60:	0118c480 	call	118c48 <alt_get_errno>
  118d64:	1007883a 	mov	r3,r2
  118d68:	00801444 	movi	r2,81
  118d6c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  118d70:	00bfffc4 	movi	r2,-1
}
  118d74:	e037883a 	mov	sp,fp
  118d78:	dfc00117 	ldw	ra,4(sp)
  118d7c:	df000017 	ldw	fp,0(sp)
  118d80:	dec00204 	addi	sp,sp,8
  118d84:	f800283a 	ret

00118d88 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  118d88:	defffc04 	addi	sp,sp,-16
  118d8c:	dfc00315 	stw	ra,12(sp)
  118d90:	df000215 	stw	fp,8(sp)
  118d94:	dc000115 	stw	r16,4(sp)
  118d98:	df000204 	addi	fp,sp,8
  118d9c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
  118da0:	e0bffe17 	ldw	r2,-8(fp)
  118da4:	108000d0 	cmplti	r2,r2,3
  118da8:	1000111e 	bne	r2,zero,118df0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  118dac:	040004b4 	movhi	r16,18
  118db0:	8410f704 	addi	r16,r16,17372
  118db4:	e0bffe17 	ldw	r2,-8(fp)
  118db8:	01400304 	movi	r5,12
  118dbc:	1009883a 	mov	r4,r2
  118dc0:	01159fc0 	call	1159fc <__mulsi3>
  118dc4:	8085883a 	add	r2,r16,r2
  118dc8:	10800204 	addi	r2,r2,8
  118dcc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  118dd0:	040004b4 	movhi	r16,18
  118dd4:	8410f704 	addi	r16,r16,17372
  118dd8:	e0bffe17 	ldw	r2,-8(fp)
  118ddc:	01400304 	movi	r5,12
  118de0:	1009883a 	mov	r4,r2
  118de4:	01159fc0 	call	1159fc <__mulsi3>
  118de8:	8085883a 	add	r2,r16,r2
  118dec:	10000015 	stw	zero,0(r2)
  }
}
  118df0:	0001883a 	nop
  118df4:	e6ffff04 	addi	sp,fp,-4
  118df8:	dfc00217 	ldw	ra,8(sp)
  118dfc:	df000117 	ldw	fp,4(sp)
  118e00:	dc000017 	ldw	r16,0(sp)
  118e04:	dec00304 	addi	sp,sp,12
  118e08:	f800283a 	ret

00118e0c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  118e0c:	defff904 	addi	sp,sp,-28
  118e10:	df000615 	stw	fp,24(sp)
  118e14:	df000604 	addi	fp,sp,24
  118e18:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  118e1c:	0005303a 	rdctl	r2,status
  118e20:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  118e24:	e0fffe17 	ldw	r3,-8(fp)
  118e28:	00bfff84 	movi	r2,-2
  118e2c:	1884703a 	and	r2,r3,r2
  118e30:	1001703a 	wrctl	status,r2
  
  return context;
  118e34:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  118e38:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  118e3c:	d0a00e17 	ldw	r2,-32712(gp)
  118e40:	10c000c4 	addi	r3,r2,3
  118e44:	00bfff04 	movi	r2,-4
  118e48:	1884703a 	and	r2,r3,r2
  118e4c:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  118e50:	d0e00e17 	ldw	r3,-32712(gp)
  118e54:	e0bfff17 	ldw	r2,-4(fp)
  118e58:	1887883a 	add	r3,r3,r2
  118e5c:	00800534 	movhi	r2,20
  118e60:	10800004 	addi	r2,r2,0
  118e64:	10c0062e 	bgeu	r2,r3,118e80 <sbrk+0x74>
  118e68:	e0bffb17 	ldw	r2,-20(fp)
  118e6c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  118e70:	e0bffa17 	ldw	r2,-24(fp)
  118e74:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  118e78:	00bfffc4 	movi	r2,-1
  118e7c:	00000b06 	br	118eac <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  118e80:	d0a00e17 	ldw	r2,-32712(gp)
  118e84:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  118e88:	d0e00e17 	ldw	r3,-32712(gp)
  118e8c:	e0bfff17 	ldw	r2,-4(fp)
  118e90:	1885883a 	add	r2,r3,r2
  118e94:	d0a00e15 	stw	r2,-32712(gp)
  118e98:	e0bffb17 	ldw	r2,-20(fp)
  118e9c:	e0bffc15 	stw	r2,-16(fp)
  118ea0:	e0bffc17 	ldw	r2,-16(fp)
  118ea4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  118ea8:	e0bffd17 	ldw	r2,-12(fp)
} 
  118eac:	e037883a 	mov	sp,fp
  118eb0:	df000017 	ldw	fp,0(sp)
  118eb4:	dec00104 	addi	sp,sp,4
  118eb8:	f800283a 	ret

00118ebc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  118ebc:	defffe04 	addi	sp,sp,-8
  118ec0:	dfc00115 	stw	ra,4(sp)
  118ec4:	df000015 	stw	fp,0(sp)
  118ec8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  118ecc:	d0a00d17 	ldw	r2,-32716(gp)
  118ed0:	10000326 	beq	r2,zero,118ee0 <alt_get_errno+0x24>
  118ed4:	d0a00d17 	ldw	r2,-32716(gp)
  118ed8:	103ee83a 	callr	r2
  118edc:	00000106 	br	118ee4 <alt_get_errno+0x28>
  118ee0:	d0a72a04 	addi	r2,gp,-25432
}
  118ee4:	e037883a 	mov	sp,fp
  118ee8:	dfc00117 	ldw	ra,4(sp)
  118eec:	df000017 	ldw	fp,0(sp)
  118ef0:	dec00204 	addi	sp,sp,8
  118ef4:	f800283a 	ret

00118ef8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  118ef8:	defff904 	addi	sp,sp,-28
  118efc:	dfc00615 	stw	ra,24(sp)
  118f00:	df000515 	stw	fp,20(sp)
  118f04:	df000504 	addi	fp,sp,20
  118f08:	e13ffd15 	stw	r4,-12(fp)
  118f0c:	e17ffe15 	stw	r5,-8(fp)
  118f10:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  118f14:	e0bffd17 	ldw	r2,-12(fp)
  118f18:	10000816 	blt	r2,zero,118f3c <write+0x44>
  118f1c:	01400304 	movi	r5,12
  118f20:	e13ffd17 	ldw	r4,-12(fp)
  118f24:	01159fc0 	call	1159fc <__mulsi3>
  118f28:	1007883a 	mov	r3,r2
  118f2c:	008004b4 	movhi	r2,18
  118f30:	1090f704 	addi	r2,r2,17372
  118f34:	1885883a 	add	r2,r3,r2
  118f38:	00000106 	br	118f40 <write+0x48>
  118f3c:	0005883a 	mov	r2,zero
  118f40:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  118f44:	e0bffb17 	ldw	r2,-20(fp)
  118f48:	10002126 	beq	r2,zero,118fd0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  118f4c:	e0bffb17 	ldw	r2,-20(fp)
  118f50:	10800217 	ldw	r2,8(r2)
  118f54:	108000cc 	andi	r2,r2,3
  118f58:	10001826 	beq	r2,zero,118fbc <write+0xc4>
  118f5c:	e0bffb17 	ldw	r2,-20(fp)
  118f60:	10800017 	ldw	r2,0(r2)
  118f64:	10800617 	ldw	r2,24(r2)
  118f68:	10001426 	beq	r2,zero,118fbc <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  118f6c:	e0bffb17 	ldw	r2,-20(fp)
  118f70:	10800017 	ldw	r2,0(r2)
  118f74:	10800617 	ldw	r2,24(r2)
  118f78:	e0ffff17 	ldw	r3,-4(fp)
  118f7c:	180d883a 	mov	r6,r3
  118f80:	e17ffe17 	ldw	r5,-8(fp)
  118f84:	e13ffb17 	ldw	r4,-20(fp)
  118f88:	103ee83a 	callr	r2
  118f8c:	e0bffc15 	stw	r2,-16(fp)
  118f90:	e0bffc17 	ldw	r2,-16(fp)
  118f94:	1000070e 	bge	r2,zero,118fb4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
  118f98:	0118ebc0 	call	118ebc <alt_get_errno>
  118f9c:	1007883a 	mov	r3,r2
  118fa0:	e0bffc17 	ldw	r2,-16(fp)
  118fa4:	0085c83a 	sub	r2,zero,r2
  118fa8:	18800015 	stw	r2,0(r3)
        return -1;
  118fac:	00bfffc4 	movi	r2,-1
  118fb0:	00000c06 	br	118fe4 <write+0xec>
      }
      return rval;
  118fb4:	e0bffc17 	ldw	r2,-16(fp)
  118fb8:	00000a06 	br	118fe4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
  118fbc:	0118ebc0 	call	118ebc <alt_get_errno>
  118fc0:	1007883a 	mov	r3,r2
  118fc4:	00800344 	movi	r2,13
  118fc8:	18800015 	stw	r2,0(r3)
  118fcc:	00000406 	br	118fe0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  118fd0:	0118ebc0 	call	118ebc <alt_get_errno>
  118fd4:	1007883a 	mov	r3,r2
  118fd8:	00801444 	movi	r2,81
  118fdc:	18800015 	stw	r2,0(r3)
  }
  return -1;
  118fe0:	00bfffc4 	movi	r2,-1
}
  118fe4:	e037883a 	mov	sp,fp
  118fe8:	dfc00117 	ldw	ra,4(sp)
  118fec:	df000017 	ldw	fp,0(sp)
  118ff0:	dec00204 	addi	sp,sp,8
  118ff4:	f800283a 	ret

00118ff8 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  118ff8:	deffdf04 	addi	sp,sp,-132
  118ffc:	dfc02015 	stw	ra,128(sp)
  119000:	df001f15 	stw	fp,124(sp)
  119004:	df001f04 	addi	fp,sp,124
  119008:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  11900c:	e0bfe204 	addi	r2,fp,-120
  119010:	100b883a 	mov	r5,r2
  119014:	01003fc4 	movi	r4,255
  119018:	012045c0 	call	12045c <OSTaskQuery>
  11901c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  119020:	e0bffe83 	ldbu	r2,-6(fp)
  119024:	10803fcc 	andi	r2,r2,255
  119028:	10001e1e 	bne	r2,zero,1190a4 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
  11902c:	e0bfee83 	ldbu	r2,-70(fp)
  119030:	10803fcc 	andi	r2,r2,255
  119034:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  119038:	d0a73617 	ldw	r2,-25384(gp)
  11903c:	e0fffd04 	addi	r3,fp,-12
  119040:	180b883a 	mov	r5,r3
  119044:	1009883a 	mov	r4,r2
  119048:	011ec740 	call	11ec74 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  11904c:	e0bffe43 	ldbu	r2,-7(fp)
  119050:	10803fcc 	andi	r2,r2,255
  119054:	10000726 	beq	r2,zero,119074 <__env_lock+0x7c>
  119058:	d0a00f17 	ldw	r2,-32708(gp)
  11905c:	e0ffe117 	ldw	r3,-124(fp)
  119060:	1880041e 	bne	r3,r2,119074 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
  119064:	d0a73517 	ldw	r2,-25388(gp)
  119068:	10800044 	addi	r2,r2,1
  11906c:	d0a73515 	stw	r2,-25388(gp)
  119070:	00000a06 	br	11909c <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  119074:	d0a73617 	ldw	r2,-25384(gp)
  119078:	e0fffe84 	addi	r3,fp,-6
  11907c:	180d883a 	mov	r6,r3
  119080:	000b883a 	mov	r5,zero
  119084:	1009883a 	mov	r4,r2
  119088:	011e7ec0 	call	11e7ec <OSSemPend>
    locks  = 1;
  11908c:	00800044 	movi	r2,1
  119090:	d0a73515 	stw	r2,-25388(gp)
    lockid = id;
  119094:	e0bfe117 	ldw	r2,-124(fp)
  119098:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
  11909c:	0001883a 	nop
  1190a0:	00000106 	br	1190a8 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
  1190a4:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  1190a8:	e037883a 	mov	sp,fp
  1190ac:	dfc00117 	ldw	ra,4(sp)
  1190b0:	df000017 	ldw	fp,0(sp)
  1190b4:	dec00204 	addi	sp,sp,8
  1190b8:	f800283a 	ret

001190bc <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  1190bc:	defffd04 	addi	sp,sp,-12
  1190c0:	dfc00215 	stw	ra,8(sp)
  1190c4:	df000115 	stw	fp,4(sp)
  1190c8:	df000104 	addi	fp,sp,4
  1190cc:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  1190d0:	d0a73517 	ldw	r2,-25388(gp)
  1190d4:	10000b26 	beq	r2,zero,119104 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  1190d8:	d0a73517 	ldw	r2,-25388(gp)
  1190dc:	10bfffc4 	addi	r2,r2,-1
  1190e0:	d0a73515 	stw	r2,-25388(gp)
  1190e4:	d0a73517 	ldw	r2,-25388(gp)
  1190e8:	1000071e 	bne	r2,zero,119108 <__env_unlock+0x4c>
  {
    lockid = -1;
  1190ec:	00bfffc4 	movi	r2,-1
  1190f0:	d0a00f15 	stw	r2,-32708(gp)
    OSSemPost( alt_envsem );
  1190f4:	d0a73617 	ldw	r2,-25384(gp)
  1190f8:	1009883a 	mov	r4,r2
  1190fc:	011eb640 	call	11eb64 <OSSemPost>
  119100:	00000106 	br	119108 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
  119104:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  119108:	e037883a 	mov	sp,fp
  11910c:	dfc00117 	ldw	ra,4(sp)
  119110:	df000017 	ldw	fp,0(sp)
  119114:	dec00204 	addi	sp,sp,8
  119118:	f800283a 	ret

0011911c <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  11911c:	deffdb04 	addi	sp,sp,-148
  119120:	dfc02415 	stw	ra,144(sp)
  119124:	df002315 	stw	fp,140(sp)
  119128:	df002304 	addi	fp,sp,140
  11912c:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  119130:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  119134:	d0a73943 	ldbu	r2,-25371(gp)
  119138:	10803fcc 	andi	r2,r2,255
  11913c:	10800060 	cmpeqi	r2,r2,1
  119140:	10003626 	beq	r2,zero,11921c <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  119144:	e0bfe204 	addi	r2,fp,-120
  119148:	100b883a 	mov	r5,r2
  11914c:	01003fc4 	movi	r4,255
  119150:	012045c0 	call	12045c <OSTaskQuery>
  119154:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  119158:	e0bffe83 	ldbu	r2,-6(fp)
  11915c:	10803fcc 	andi	r2,r2,255
  119160:	1000301e 	bne	r2,zero,119224 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
  119164:	e0bfee83 	ldbu	r2,-70(fp)
  119168:	10803fcc 	andi	r2,r2,255
  11916c:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  119170:	d0a73817 	ldw	r2,-25376(gp)
  119174:	e0fffd04 	addi	r3,fp,-12
  119178:	180b883a 	mov	r5,r3
  11917c:	1009883a 	mov	r4,r2
  119180:	011ec740 	call	11ec74 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  119184:	0005303a 	rdctl	r2,status
  119188:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11918c:	e0ffe117 	ldw	r3,-124(fp)
  119190:	00bfff84 	movi	r2,-2
  119194:	1884703a 	and	r2,r3,r2
  119198:	1001703a 	wrctl	status,r2
  
  return context;
  11919c:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
  1191a0:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
  1191a4:	e0bffd0b 	ldhu	r2,-12(fp)
  1191a8:	10bfffcc 	andi	r2,r2,65535
  1191ac:	10000b1e 	bne	r2,zero,1191dc <__malloc_lock+0xc0>
  1191b0:	d0a01017 	ldw	r2,-32704(gp)
  1191b4:	e0ffde17 	ldw	r3,-136(fp)
  1191b8:	1880081e 	bne	r3,r2,1191dc <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
  1191bc:	d0a73717 	ldw	r2,-25380(gp)
  1191c0:	10800044 	addi	r2,r2,1
  1191c4:	d0a73715 	stw	r2,-25380(gp)
  1191c8:	e0bfdd17 	ldw	r2,-140(fp)
  1191cc:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1191d0:	e0bfdf17 	ldw	r2,-132(fp)
  1191d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
  1191d8:	00000e06 	br	119214 <__malloc_lock+0xf8>
  1191dc:	e0bfdd17 	ldw	r2,-140(fp)
  1191e0:	e0bfe015 	stw	r2,-128(fp)
  1191e4:	e0bfe017 	ldw	r2,-128(fp)
  1191e8:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  1191ec:	d0a73817 	ldw	r2,-25376(gp)
  1191f0:	e0fffe84 	addi	r3,fp,-6
  1191f4:	180d883a 	mov	r6,r3
  1191f8:	000b883a 	mov	r5,zero
  1191fc:	1009883a 	mov	r4,r2
  119200:	011e7ec0 	call	11e7ec <OSSemPend>
    locks  = 1;
  119204:	00800044 	movi	r2,1
  119208:	d0a73715 	stw	r2,-25380(gp)
    lockid = id;
  11920c:	e0bfde17 	ldw	r2,-136(fp)
  119210:	d0a01015 	stw	r2,-32704(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
  119214:	0001883a 	nop
  119218:	00000306 	br	119228 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
  11921c:	0001883a 	nop
  119220:	00000106 	br	119228 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
  119224:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  119228:	e037883a 	mov	sp,fp
  11922c:	dfc00117 	ldw	ra,4(sp)
  119230:	df000017 	ldw	fp,0(sp)
  119234:	dec00204 	addi	sp,sp,8
  119238:	f800283a 	ret

0011923c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  11923c:	defff804 	addi	sp,sp,-32
  119240:	dfc00715 	stw	ra,28(sp)
  119244:	df000615 	stw	fp,24(sp)
  119248:	df000604 	addi	fp,sp,24
  11924c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  119250:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
  119254:	d0a73943 	ldbu	r2,-25371(gp)
  119258:	10803fcc 	andi	r2,r2,255
  11925c:	10800060 	cmpeqi	r2,r2,1
  119260:	10002326 	beq	r2,zero,1192f0 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  119264:	0005303a 	rdctl	r2,status
  119268:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11926c:	e0fffe17 	ldw	r3,-8(fp)
  119270:	00bfff84 	movi	r2,-2
  119274:	1884703a 	and	r2,r3,r2
  119278:	1001703a 	wrctl	status,r2
  
  return context;
  11927c:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
  119280:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
  119284:	d0a73717 	ldw	r2,-25380(gp)
  119288:	1000051e 	bne	r2,zero,1192a0 <__malloc_unlock+0x64>
  11928c:	e0bffa17 	ldw	r2,-24(fp)
  119290:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  119294:	e0bffb17 	ldw	r2,-20(fp)
  119298:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  11929c:	00001506 	br	1192f4 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  1192a0:	d0a73717 	ldw	r2,-25380(gp)
  1192a4:	10bfffc4 	addi	r2,r2,-1
  1192a8:	d0a73715 	stw	r2,-25380(gp)
  1192ac:	d0a73717 	ldw	r2,-25380(gp)
  1192b0:	10000a1e 	bne	r2,zero,1192dc <__malloc_unlock+0xa0>
  {
    lockid = -1;
  1192b4:	00bfffc4 	movi	r2,-1
  1192b8:	d0a01015 	stw	r2,-32704(gp)
  1192bc:	e0bffa17 	ldw	r2,-24(fp)
  1192c0:	e0bffc15 	stw	r2,-16(fp)
  1192c4:	e0bffc17 	ldw	r2,-16(fp)
  1192c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  1192cc:	d0a73817 	ldw	r2,-25376(gp)
  1192d0:	1009883a 	mov	r4,r2
  1192d4:	011eb640 	call	11eb64 <OSSemPost>
  1192d8:	00000606 	br	1192f4 <__malloc_unlock+0xb8>
  1192dc:	e0bffa17 	ldw	r2,-24(fp)
  1192e0:	e0bffd15 	stw	r2,-12(fp)
  1192e4:	e0bffd17 	ldw	r2,-12(fp)
  1192e8:	1001703a 	wrctl	status,r2
  1192ec:	00000106 	br	1192f4 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
  1192f0:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  1192f4:	e037883a 	mov	sp,fp
  1192f8:	dfc00117 	ldw	ra,4(sp)
  1192fc:	df000017 	ldw	fp,0(sp)
  119300:	dec00204 	addi	sp,sp,8
  119304:	f800283a 	ret

00119308 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  119308:	defff704 	addi	sp,sp,-36
  11930c:	dfc00815 	stw	ra,32(sp)
  119310:	df000715 	stw	fp,28(sp)
  119314:	df000704 	addi	fp,sp,28
  119318:	e13ffd15 	stw	r4,-12(fp)
  11931c:	e17ffe15 	stw	r5,-8(fp)
  119320:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  119324:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  119328:	e0bfff17 	ldw	r2,-4(fp)
  11932c:	1000021e 	bne	r2,zero,119338 <OSEventNameGet+0x30>
        return (0);
  119330:	0005883a 	mov	r2,zero
  119334:	00003706 	br	119414 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  119338:	e0bffd17 	ldw	r2,-12(fp)
  11933c:	1000051e 	bne	r2,zero,119354 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  119340:	e0bfff17 	ldw	r2,-4(fp)
  119344:	00c00104 	movi	r3,4
  119348:	10c00005 	stb	r3,0(r2)
        return (0);
  11934c:	0005883a 	mov	r2,zero
  119350:	00003006 	br	119414 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  119354:	e0bffe17 	ldw	r2,-8(fp)
  119358:	1000051e 	bne	r2,zero,119370 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  11935c:	e0bfff17 	ldw	r2,-4(fp)
  119360:	00c00304 	movi	r3,12
  119364:	10c00005 	stb	r3,0(r2)
        return (0);
  119368:	0005883a 	mov	r2,zero
  11936c:	00002906 	br	119414 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  119370:	d0a74703 	ldbu	r2,-25316(gp)
  119374:	10803fcc 	andi	r2,r2,255
  119378:	10000526 	beq	r2,zero,119390 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
  11937c:	e0bfff17 	ldw	r2,-4(fp)
  119380:	00c00444 	movi	r3,17
  119384:	10c00005 	stb	r3,0(r2)
        return (0);
  119388:	0005883a 	mov	r2,zero
  11938c:	00002106 	br	119414 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
  119390:	e0bffd17 	ldw	r2,-12(fp)
  119394:	10800003 	ldbu	r2,0(r2)
  119398:	10803fcc 	andi	r2,r2,255
  11939c:	10bfffc4 	addi	r2,r2,-1
  1193a0:	10800128 	cmpgeui	r2,r2,4
  1193a4:	10000526 	beq	r2,zero,1193bc <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  1193a8:	e0bfff17 	ldw	r2,-4(fp)
  1193ac:	00c00044 	movi	r3,1
  1193b0:	10c00005 	stb	r3,0(r2)
             return (0);
  1193b4:	0005883a 	mov	r2,zero
  1193b8:	00001606 	br	119414 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
  1193bc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  1193c0:	0005303a 	rdctl	r2,status
  1193c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1193c8:	e0fffb17 	ldw	r3,-20(fp)
  1193cc:	00bfff84 	movi	r2,-2
  1193d0:	1884703a 	and	r2,r3,r2
  1193d4:	1001703a 	wrctl	status,r2
  
  return context;
  1193d8:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  1193dc:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  1193e0:	e0bffd17 	ldw	r2,-12(fp)
  1193e4:	10800384 	addi	r2,r2,14
  1193e8:	100b883a 	mov	r5,r2
  1193ec:	e13ffe17 	ldw	r4,-8(fp)
  1193f0:	011ad8c0 	call	11ad8c <OS_StrCopy>
  1193f4:	e0bffa05 	stb	r2,-24(fp)
  1193f8:	e0bff917 	ldw	r2,-28(fp)
  1193fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  119400:	e0bffc17 	ldw	r2,-16(fp)
  119404:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  119408:	e0bfff17 	ldw	r2,-4(fp)
  11940c:	10000005 	stb	zero,0(r2)
    return (len);
  119410:	e0bffa03 	ldbu	r2,-24(fp)
}
  119414:	e037883a 	mov	sp,fp
  119418:	dfc00117 	ldw	ra,4(sp)
  11941c:	df000017 	ldw	fp,0(sp)
  119420:	dec00204 	addi	sp,sp,8
  119424:	f800283a 	ret

00119428 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  119428:	defff604 	addi	sp,sp,-40
  11942c:	dfc00915 	stw	ra,36(sp)
  119430:	df000815 	stw	fp,32(sp)
  119434:	df000804 	addi	fp,sp,32
  119438:	e13ffd15 	stw	r4,-12(fp)
  11943c:	e17ffe15 	stw	r5,-8(fp)
  119440:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  119444:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  119448:	e0bfff17 	ldw	r2,-4(fp)
  11944c:	10004026 	beq	r2,zero,119550 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  119450:	e0bffd17 	ldw	r2,-12(fp)
  119454:	1000041e 	bne	r2,zero,119468 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
  119458:	e0bfff17 	ldw	r2,-4(fp)
  11945c:	00c00104 	movi	r3,4
  119460:	10c00005 	stb	r3,0(r2)
        return;
  119464:	00003b06 	br	119554 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  119468:	e0bffe17 	ldw	r2,-8(fp)
  11946c:	1000041e 	bne	r2,zero,119480 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  119470:	e0bfff17 	ldw	r2,-4(fp)
  119474:	00c00304 	movi	r3,12
  119478:	10c00005 	stb	r3,0(r2)
        return;
  11947c:	00003506 	br	119554 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  119480:	d0a74703 	ldbu	r2,-25316(gp)
  119484:	10803fcc 	andi	r2,r2,255
  119488:	10000426 	beq	r2,zero,11949c <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  11948c:	e0bfff17 	ldw	r2,-4(fp)
  119490:	00c00484 	movi	r3,18
  119494:	10c00005 	stb	r3,0(r2)
        return;
  119498:	00002e06 	br	119554 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
  11949c:	e0bffd17 	ldw	r2,-12(fp)
  1194a0:	10800003 	ldbu	r2,0(r2)
  1194a4:	10803fcc 	andi	r2,r2,255
  1194a8:	10bfffc4 	addi	r2,r2,-1
  1194ac:	10800128 	cmpgeui	r2,r2,4
  1194b0:	10000426 	beq	r2,zero,1194c4 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  1194b4:	e0bfff17 	ldw	r2,-4(fp)
  1194b8:	00c00044 	movi	r3,1
  1194bc:	10c00005 	stb	r3,0(r2)
             return;
  1194c0:	00002406 	br	119554 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
  1194c4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  1194c8:	0005303a 	rdctl	r2,status
  1194cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1194d0:	e0fffc17 	ldw	r3,-16(fp)
  1194d4:	00bfff84 	movi	r2,-2
  1194d8:	1884703a 	and	r2,r3,r2
  1194dc:	1001703a 	wrctl	status,r2
  
  return context;
  1194e0:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  1194e4:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  1194e8:	e13ffe17 	ldw	r4,-8(fp)
  1194ec:	011ae000 	call	11ae00 <OS_StrLen>
  1194f0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  1194f4:	e0bffa03 	ldbu	r2,-24(fp)
  1194f8:	10800830 	cmpltui	r2,r2,32
  1194fc:	1000081e 	bne	r2,zero,119520 <OSEventNameSet+0xf8>
  119500:	e0bff817 	ldw	r2,-32(fp)
  119504:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  119508:	e0bff917 	ldw	r2,-28(fp)
  11950c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  119510:	e0bfff17 	ldw	r2,-4(fp)
  119514:	00c002c4 	movi	r3,11
  119518:	10c00005 	stb	r3,0(r2)
        return;
  11951c:	00000d06 	br	119554 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  119520:	e0bffd17 	ldw	r2,-12(fp)
  119524:	10800384 	addi	r2,r2,14
  119528:	e17ffe17 	ldw	r5,-8(fp)
  11952c:	1009883a 	mov	r4,r2
  119530:	011ad8c0 	call	11ad8c <OS_StrCopy>
  119534:	e0bff817 	ldw	r2,-32(fp)
  119538:	e0bffb15 	stw	r2,-20(fp)
  11953c:	e0bffb17 	ldw	r2,-20(fp)
  119540:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  119544:	e0bfff17 	ldw	r2,-4(fp)
  119548:	10000005 	stb	zero,0(r2)
  11954c:	00000106 	br	119554 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  119550:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  119554:	e037883a 	mov	sp,fp
  119558:	dfc00117 	ldw	ra,4(sp)
  11955c:	df000017 	ldw	fp,0(sp)
  119560:	dec00204 	addi	sp,sp,8
  119564:	f800283a 	ret

00119568 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  119568:	deffed04 	addi	sp,sp,-76
  11956c:	dfc01215 	stw	ra,72(sp)
  119570:	df001115 	stw	fp,68(sp)
  119574:	df001104 	addi	fp,sp,68
  119578:	e13ffc15 	stw	r4,-16(fp)
  11957c:	e17ffd15 	stw	r5,-12(fp)
  119580:	e1bffe15 	stw	r6,-8(fp)
  119584:	3805883a 	mov	r2,r7
  119588:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  11958c:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  119590:	e0800217 	ldw	r2,8(fp)
  119594:	1000021e 	bne	r2,zero,1195a0 <OSEventPendMulti+0x38>
        return (0);
  119598:	0005883a 	mov	r2,zero
  11959c:	00017106 	br	119b64 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  1195a0:	e0bffc17 	ldw	r2,-16(fp)
  1195a4:	1000051e 	bne	r2,zero,1195bc <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
  1195a8:	e0800217 	ldw	r2,8(fp)
  1195ac:	00c00104 	movi	r3,4
  1195b0:	10c00005 	stb	r3,0(r2)
        return (0);
  1195b4:	0005883a 	mov	r2,zero
  1195b8:	00016a06 	br	119b64 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  1195bc:	e0bffd17 	ldw	r2,-12(fp)
  1195c0:	1000051e 	bne	r2,zero,1195d8 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
  1195c4:	e0800217 	ldw	r2,8(fp)
  1195c8:	00c00104 	movi	r3,4
  1195cc:	10c00005 	stb	r3,0(r2)
        return (0);
  1195d0:	0005883a 	mov	r2,zero
  1195d4:	00016306 	br	119b64 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  1195d8:	e0bffe17 	ldw	r2,-8(fp)
  1195dc:	1000051e 	bne	r2,zero,1195f4 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
  1195e0:	e0800217 	ldw	r2,8(fp)
  1195e4:	00c00104 	movi	r3,4
  1195e8:	10c00005 	stb	r3,0(r2)
        return (0);
  1195ec:	0005883a 	mov	r2,zero
  1195f0:	00015c06 	br	119b64 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  1195f4:	e0bffd17 	ldw	r2,-12(fp)
  1195f8:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  1195fc:	e0bffc17 	ldw	r2,-16(fp)
  119600:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
  119604:	e0bfef17 	ldw	r2,-68(fp)
  119608:	10800017 	ldw	r2,0(r2)
  11960c:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
  119610:	00001906 	br	119678 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  119614:	e0bff017 	ldw	r2,-64(fp)
  119618:	10800003 	ldbu	r2,0(r2)
  11961c:	10803fcc 	andi	r2,r2,255
  119620:	10c000a0 	cmpeqi	r3,r2,2
  119624:	1800091e 	bne	r3,zero,11964c <OSEventPendMulti+0xe4>
  119628:	10c000e0 	cmpeqi	r3,r2,3
  11962c:	1800091e 	bne	r3,zero,119654 <OSEventPendMulti+0xec>
  119630:	10800060 	cmpeqi	r2,r2,1
  119634:	1000091e 	bne	r2,zero,11965c <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  119638:	e0800217 	ldw	r2,8(fp)
  11963c:	00c00044 	movi	r3,1
  119640:	10c00005 	stb	r3,0(r2)
                 return (0);
  119644:	0005883a 	mov	r2,zero
  119648:	00014606 	br	119b64 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
  11964c:	0001883a 	nop
  119650:	00000306 	br	119660 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
  119654:	0001883a 	nop
  119658:	00000106 	br	119660 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
  11965c:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
  119660:	e0bfef17 	ldw	r2,-68(fp)
  119664:	10800104 	addi	r2,r2,4
  119668:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
  11966c:	e0bfef17 	ldw	r2,-68(fp)
  119670:	10800017 	ldw	r2,0(r2)
  119674:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  119678:	e0bff017 	ldw	r2,-64(fp)
  11967c:	103fe51e 	bne	r2,zero,119614 <__alt_data_end+0xfffd9614>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  119680:	d0a74703 	ldbu	r2,-25316(gp)
  119684:	10803fcc 	andi	r2,r2,255
  119688:	10000526 	beq	r2,zero,1196a0 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  11968c:	e0800217 	ldw	r2,8(fp)
  119690:	00c00084 	movi	r3,2
  119694:	10c00005 	stb	r3,0(r2)
        return (0);
  119698:	0005883a 	mov	r2,zero
  11969c:	00013106 	br	119b64 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  1196a0:	d0a73903 	ldbu	r2,-25372(gp)
  1196a4:	10803fcc 	andi	r2,r2,255
  1196a8:	10000526 	beq	r2,zero,1196c0 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  1196ac:	e0800217 	ldw	r2,8(fp)
  1196b0:	00c00344 	movi	r3,13
  1196b4:	10c00005 	stb	r3,0(r2)
        return (0);
  1196b8:	0005883a 	mov	r2,zero
  1196bc:	00012906 	br	119b64 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  1196c0:	0005303a 	rdctl	r2,status
  1196c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1196c8:	e0fffb17 	ldw	r3,-20(fp)
  1196cc:	00bfff84 	movi	r2,-2
  1196d0:	1884703a 	and	r2,r3,r2
  1196d4:	1001703a 	wrctl	status,r2
  
  return context;
  1196d8:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  1196dc:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
  1196e0:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
  1196e4:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  1196e8:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
  1196ec:	e0bffc17 	ldw	r2,-16(fp)
  1196f0:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
  1196f4:	e0bfef17 	ldw	r2,-68(fp)
  1196f8:	10800017 	ldw	r2,0(r2)
  1196fc:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  119700:	00008106 	br	119908 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
  119704:	e0bff017 	ldw	r2,-64(fp)
  119708:	10800003 	ldbu	r2,0(r2)
  11970c:	10803fcc 	andi	r2,r2,255
  119710:	10c000a0 	cmpeqi	r3,r2,2
  119714:	18003c1e 	bne	r3,zero,119808 <OSEventPendMulti+0x2a0>
  119718:	10c000e0 	cmpeqi	r3,r2,3
  11971c:	1800031e 	bne	r3,zero,11972c <OSEventPendMulti+0x1c4>
  119720:	10800060 	cmpeqi	r2,r2,1
  119724:	10001e1e 	bne	r2,zero,1197a0 <OSEventPendMulti+0x238>
  119728:	00006606 	br	1198c4 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  11972c:	e0bff017 	ldw	r2,-64(fp)
  119730:	1080020b 	ldhu	r2,8(r2)
  119734:	10bfffcc 	andi	r2,r2,65535
  119738:	10001526 	beq	r2,zero,119790 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  11973c:	e0bff017 	ldw	r2,-64(fp)
  119740:	1080020b 	ldhu	r2,8(r2)
  119744:	10bfffc4 	addi	r2,r2,-1
  119748:	1007883a 	mov	r3,r2
  11974c:	e0bff017 	ldw	r2,-64(fp)
  119750:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  119754:	e0bffd17 	ldw	r2,-12(fp)
  119758:	10c00104 	addi	r3,r2,4
  11975c:	e0fffd15 	stw	r3,-12(fp)
  119760:	e0fff017 	ldw	r3,-64(fp)
  119764:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
  119768:	00800044 	movi	r2,1
  11976c:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  119770:	e0bffe17 	ldw	r2,-8(fp)
  119774:	10c00104 	addi	r3,r2,4
  119778:	e0fffe15 	stw	r3,-8(fp)
  11977c:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
  119780:	e0bff18b 	ldhu	r2,-58(fp)
  119784:	10800044 	addi	r2,r2,1
  119788:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
  11978c:	00005806 	br	1198f0 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  119790:	e0bff203 	ldbu	r2,-56(fp)
  119794:	10800054 	ori	r2,r2,1
  119798:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  11979c:	00005406 	br	1198f0 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  1197a0:	e0bff017 	ldw	r2,-64(fp)
  1197a4:	10800117 	ldw	r2,4(r2)
  1197a8:	10001326 	beq	r2,zero,1197f8 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  1197ac:	e0bffe17 	ldw	r2,-8(fp)
  1197b0:	10c00104 	addi	r3,r2,4
  1197b4:	e0fffe15 	stw	r3,-8(fp)
  1197b8:	e0fff017 	ldw	r3,-64(fp)
  1197bc:	18c00117 	ldw	r3,4(r3)
  1197c0:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
  1197c4:	e0bff017 	ldw	r2,-64(fp)
  1197c8:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  1197cc:	e0bffd17 	ldw	r2,-12(fp)
  1197d0:	10c00104 	addi	r3,r2,4
  1197d4:	e0fffd15 	stw	r3,-12(fp)
  1197d8:	e0fff017 	ldw	r3,-64(fp)
  1197dc:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
  1197e0:	00800044 	movi	r2,1
  1197e4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
  1197e8:	e0bff18b 	ldhu	r2,-58(fp)
  1197ec:	10800044 	addi	r2,r2,1
  1197f0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
  1197f4:	00003e06 	br	1198f0 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  1197f8:	e0bff203 	ldbu	r2,-56(fp)
  1197fc:	10800094 	ori	r2,r2,2
  119800:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  119804:	00003a06 	br	1198f0 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  119808:	e0bff017 	ldw	r2,-64(fp)
  11980c:	10800117 	ldw	r2,4(r2)
  119810:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  119814:	e0bff517 	ldw	r2,-44(fp)
  119818:	1080058b 	ldhu	r2,22(r2)
  11981c:	10bfffcc 	andi	r2,r2,65535
  119820:	10002426 	beq	r2,zero,1198b4 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  119824:	e0bffe17 	ldw	r2,-8(fp)
  119828:	10c00104 	addi	r3,r2,4
  11982c:	e0fffe15 	stw	r3,-8(fp)
  119830:	e0fff517 	ldw	r3,-44(fp)
  119834:	18c00417 	ldw	r3,16(r3)
  119838:	19400104 	addi	r5,r3,4
  11983c:	e13ff517 	ldw	r4,-44(fp)
  119840:	21400415 	stw	r5,16(r4)
  119844:	18c00017 	ldw	r3,0(r3)
  119848:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  11984c:	e0bff517 	ldw	r2,-44(fp)
  119850:	10c00417 	ldw	r3,16(r2)
  119854:	e0bff517 	ldw	r2,-44(fp)
  119858:	10800217 	ldw	r2,8(r2)
  11985c:	1880041e 	bne	r3,r2,119870 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  119860:	e0bff517 	ldw	r2,-44(fp)
  119864:	10c00117 	ldw	r3,4(r2)
  119868:	e0bff517 	ldw	r2,-44(fp)
  11986c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  119870:	e0bff517 	ldw	r2,-44(fp)
  119874:	1080058b 	ldhu	r2,22(r2)
  119878:	10bfffc4 	addi	r2,r2,-1
  11987c:	1007883a 	mov	r3,r2
  119880:	e0bff517 	ldw	r2,-44(fp)
  119884:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  119888:	e0bffd17 	ldw	r2,-12(fp)
  11988c:	10c00104 	addi	r3,r2,4
  119890:	e0fffd15 	stw	r3,-12(fp)
  119894:	e0fff017 	ldw	r3,-64(fp)
  119898:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
  11989c:	00800044 	movi	r2,1
  1198a0:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
  1198a4:	e0bff18b 	ldhu	r2,-58(fp)
  1198a8:	10800044 	addi	r2,r2,1
  1198ac:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
  1198b0:	00000f06 	br	1198f0 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  1198b4:	e0bff203 	ldbu	r2,-56(fp)
  1198b8:	10800114 	ori	r2,r2,4
  1198bc:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  1198c0:	00000b06 	br	1198f0 <OSEventPendMulti+0x388>
  1198c4:	e0bff317 	ldw	r2,-52(fp)
  1198c8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1198cc:	e0bff417 	ldw	r2,-48(fp)
  1198d0:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  1198d4:	e0bffd17 	ldw	r2,-12(fp)
  1198d8:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  1198dc:	e0800217 	ldw	r2,8(fp)
  1198e0:	00c00044 	movi	r3,1
  1198e4:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
  1198e8:	e0bff18b 	ldhu	r2,-58(fp)
  1198ec:	00009d06 	br	119b64 <OSEventPendMulti+0x5fc>
        }
        pevents++;
  1198f0:	e0bfef17 	ldw	r2,-68(fp)
  1198f4:	10800104 	addi	r2,r2,4
  1198f8:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
  1198fc:	e0bfef17 	ldw	r2,-68(fp)
  119900:	10800017 	ldw	r2,0(r2)
  119904:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  119908:	e0bff017 	ldw	r2,-64(fp)
  11990c:	103f7d1e 	bne	r2,zero,119704 <__alt_data_end+0xfffd9704>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  119910:	e0bff103 	ldbu	r2,-60(fp)
  119914:	10800058 	cmpnei	r2,r2,1
  119918:	10000a1e 	bne	r2,zero,119944 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  11991c:	e0bffd17 	ldw	r2,-12(fp)
  119920:	10000015 	stw	zero,0(r2)
  119924:	e0bff317 	ldw	r2,-52(fp)
  119928:	e0bff615 	stw	r2,-40(fp)
  11992c:	e0bff617 	ldw	r2,-40(fp)
  119930:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  119934:	e0800217 	ldw	r2,8(fp)
  119938:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  11993c:	e0bff18b 	ldhu	r2,-58(fp)
  119940:	00008806 	br	119b64 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  119944:	d0a74817 	ldw	r2,-25312(gp)
  119948:	d0e74817 	ldw	r3,-25312(gp)
  11994c:	19000c03 	ldbu	r4,48(r3)
  119950:	e0fff203 	ldbu	r3,-56(fp)
  119954:	20c6b03a 	or	r3,r4,r3
  119958:	1809883a 	mov	r4,r3
  11995c:	00ffe004 	movi	r3,-128
  119960:	20c6b03a 	or	r3,r4,r3
  119964:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  119968:	d0a74817 	ldw	r2,-25312(gp)
  11996c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  119970:	d0a74817 	ldw	r2,-25312(gp)
  119974:	e0ffff0b 	ldhu	r3,-4(fp)
  119978:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  11997c:	e13ffc17 	ldw	r4,-16(fp)
  119980:	011a4a40 	call	11a4a4 <OS_EventTaskWaitMulti>
  119984:	e0bff317 	ldw	r2,-52(fp)
  119988:	e0bff915 	stw	r2,-28(fp)
  11998c:	e0bff917 	ldw	r2,-28(fp)
  119990:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  119994:	011ac480 	call	11ac48 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  119998:	0005303a 	rdctl	r2,status
  11999c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1199a0:	e0fff717 	ldw	r3,-36(fp)
  1199a4:	00bfff84 	movi	r2,-2
  1199a8:	1884703a 	and	r2,r3,r2
  1199ac:	1001703a 	wrctl	status,r2
  
  return context;
  1199b0:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  1199b4:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  1199b8:	d0a74817 	ldw	r2,-25312(gp)
  1199bc:	10800c43 	ldbu	r2,49(r2)
  1199c0:	10803fcc 	andi	r2,r2,255
  1199c4:	10000226 	beq	r2,zero,1199d0 <OSEventPendMulti+0x468>
  1199c8:	108000a0 	cmpeqi	r2,r2,2
  1199cc:	10001826 	beq	r2,zero,119a30 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  1199d0:	d0a74817 	ldw	r2,-25312(gp)
  1199d4:	10800717 	ldw	r2,28(r2)
  1199d8:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  1199dc:	e0bff017 	ldw	r2,-64(fp)
  1199e0:	10000b26 	beq	r2,zero,119a10 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  1199e4:	e0bffd17 	ldw	r2,-12(fp)
  1199e8:	10c00104 	addi	r3,r2,4
  1199ec:	e0fffd15 	stw	r3,-12(fp)
  1199f0:	e0fff017 	ldw	r3,-64(fp)
  1199f4:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  1199f8:	e0bffd17 	ldw	r2,-12(fp)
  1199fc:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  119a00:	e0bff18b 	ldhu	r2,-58(fp)
  119a04:	10800044 	addi	r2,r2,1
  119a08:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
  119a0c:	00000d06 	br	119a44 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  119a10:	d0a74817 	ldw	r2,-25312(gp)
  119a14:	00c00044 	movi	r3,1
  119a18:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  119a1c:	d0a74817 	ldw	r2,-25312(gp)
  119a20:	e17ffc17 	ldw	r5,-16(fp)
  119a24:	1009883a 	mov	r4,r2
  119a28:	011a6ac0 	call	11a6ac <OS_EventTaskRemoveMulti>
             }
			 break;
  119a2c:	00000506 	br	119a44 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  119a30:	d0a74817 	ldw	r2,-25312(gp)
  119a34:	e17ffc17 	ldw	r5,-16(fp)
  119a38:	1009883a 	mov	r4,r2
  119a3c:	011a6ac0 	call	11a6ac <OS_EventTaskRemoveMulti>
             break;
  119a40:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
  119a44:	d0a74817 	ldw	r2,-25312(gp)
  119a48:	10800c43 	ldbu	r2,49(r2)
  119a4c:	10803fcc 	andi	r2,r2,255
  119a50:	10000326 	beq	r2,zero,119a60 <OSEventPendMulti+0x4f8>
  119a54:	108000a0 	cmpeqi	r2,r2,2
  119a58:	1000231e 	bne	r2,zero,119ae8 <OSEventPendMulti+0x580>
  119a5c:	00002a06 	br	119b08 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  119a60:	e0bff017 	ldw	r2,-64(fp)
  119a64:	10800003 	ldbu	r2,0(r2)
  119a68:	10803fcc 	andi	r2,r2,255
  119a6c:	0080100e 	bge	zero,r2,119ab0 <OSEventPendMulti+0x548>
  119a70:	10c000d0 	cmplti	r3,r2,3
  119a74:	1800071e 	bne	r3,zero,119a94 <OSEventPendMulti+0x52c>
  119a78:	108000e0 	cmpeqi	r2,r2,3
  119a7c:	10000c26 	beq	r2,zero,119ab0 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  119a80:	e0bffe17 	ldw	r2,-8(fp)
  119a84:	10c00104 	addi	r3,r2,4
  119a88:	e0fffe15 	stw	r3,-8(fp)
  119a8c:	10000015 	stw	zero,0(r2)
                      break;
  119a90:	00001206 	br	119adc <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  119a94:	e0bffe17 	ldw	r2,-8(fp)
  119a98:	10c00104 	addi	r3,r2,4
  119a9c:	e0fffe15 	stw	r3,-8(fp)
  119aa0:	d0e74817 	ldw	r3,-25312(gp)
  119aa4:	18c00917 	ldw	r3,36(r3)
  119aa8:	10c00015 	stw	r3,0(r2)
                      break;
  119aac:	00000b06 	br	119adc <OSEventPendMulti+0x574>
  119ab0:	e0bff317 	ldw	r2,-52(fp)
  119ab4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  119ab8:	e0bff817 	ldw	r2,-32(fp)
  119abc:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  119ac0:	e0bffd17 	ldw	r2,-12(fp)
  119ac4:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  119ac8:	e0800217 	ldw	r2,8(fp)
  119acc:	00c00044 	movi	r3,1
  119ad0:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
  119ad4:	e0bff18b 	ldhu	r2,-58(fp)
  119ad8:	00002206 	br	119b64 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
  119adc:	e0800217 	ldw	r2,8(fp)
  119ae0:	10000005 	stb	zero,0(r2)
             break;
  119ae4:	00001006 	br	119b28 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  119ae8:	e0bffe17 	ldw	r2,-8(fp)
  119aec:	10c00104 	addi	r3,r2,4
  119af0:	e0fffe15 	stw	r3,-8(fp)
  119af4:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  119af8:	e0800217 	ldw	r2,8(fp)
  119afc:	00c00384 	movi	r3,14
  119b00:	10c00005 	stb	r3,0(r2)
             break;
  119b04:	00000806 	br	119b28 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  119b08:	e0bffe17 	ldw	r2,-8(fp)
  119b0c:	10c00104 	addi	r3,r2,4
  119b10:	e0fffe15 	stw	r3,-8(fp)
  119b14:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  119b18:	e0800217 	ldw	r2,8(fp)
  119b1c:	00c00284 	movi	r3,10
  119b20:	10c00005 	stb	r3,0(r2)
             break;
  119b24:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  119b28:	d0a74817 	ldw	r2,-25312(gp)
  119b2c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  119b30:	d0a74817 	ldw	r2,-25312(gp)
  119b34:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  119b38:	d0a74817 	ldw	r2,-25312(gp)
  119b3c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  119b40:	d0a74817 	ldw	r2,-25312(gp)
  119b44:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  119b48:	d0a74817 	ldw	r2,-25312(gp)
  119b4c:	10000915 	stw	zero,36(r2)
  119b50:	e0bff317 	ldw	r2,-52(fp)
  119b54:	e0bffa15 	stw	r2,-24(fp)
  119b58:	e0bffa17 	ldw	r2,-24(fp)
  119b5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  119b60:	e0bff18b 	ldhu	r2,-58(fp)
}
  119b64:	e037883a 	mov	sp,fp
  119b68:	dfc00117 	ldw	ra,4(sp)
  119b6c:	df000017 	ldw	fp,0(sp)
  119b70:	dec00204 	addi	sp,sp,8
  119b74:	f800283a 	ret

00119b78 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  119b78:	defffe04 	addi	sp,sp,-8
  119b7c:	dfc00115 	stw	ra,4(sp)
  119b80:	df000015 	stw	fp,0(sp)
  119b84:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  119b88:	01228140 	call	122814 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  119b8c:	011a8f40 	call	11a8f4 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  119b90:	011a93c0 	call	11a93c <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  119b94:	011aaa80 	call	11aaa8 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  119b98:	011a8140 	call	11a814 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  119b9c:	011c9480 	call	11c948 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  119ba0:	011d2480 	call	11d248 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  119ba4:	011e37c0 	call	11e37c <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  119ba8:	011a9a80 	call	11a9a8 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  119bac:	011aa280 	call	11aa28 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  119bb0:	01228340 	call	122834 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  119bb4:	011b31c0 	call	11b31c <OSDebugInit>
#endif
}
  119bb8:	0001883a 	nop
  119bbc:	e037883a 	mov	sp,fp
  119bc0:	dfc00117 	ldw	ra,4(sp)
  119bc4:	df000017 	ldw	fp,0(sp)
  119bc8:	dec00204 	addi	sp,sp,8
  119bcc:	f800283a 	ret

00119bd0 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  119bd0:	deffff04 	addi	sp,sp,-4
  119bd4:	df000015 	stw	fp,0(sp)
  119bd8:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
  119bdc:	d0a73943 	ldbu	r2,-25371(gp)
  119be0:	10803fcc 	andi	r2,r2,255
  119be4:	10800058 	cmpnei	r2,r2,1
  119be8:	1000071e 	bne	r2,zero,119c08 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
  119bec:	d0a74703 	ldbu	r2,-25316(gp)
  119bf0:	10803fcc 	andi	r2,r2,255
  119bf4:	10803fe0 	cmpeqi	r2,r2,255
  119bf8:	1000031e 	bne	r2,zero,119c08 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  119bfc:	d0a74703 	ldbu	r2,-25316(gp)
  119c00:	10800044 	addi	r2,r2,1
  119c04:	d0a74705 	stb	r2,-25316(gp)
        }
    }
}
  119c08:	0001883a 	nop
  119c0c:	e037883a 	mov	sp,fp
  119c10:	df000017 	ldw	fp,0(sp)
  119c14:	dec00104 	addi	sp,sp,4
  119c18:	f800283a 	ret

00119c1c <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  119c1c:	defffb04 	addi	sp,sp,-20
  119c20:	dfc00415 	stw	ra,16(sp)
  119c24:	df000315 	stw	fp,12(sp)
  119c28:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  119c2c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
  119c30:	d0a73943 	ldbu	r2,-25371(gp)
  119c34:	10803fcc 	andi	r2,r2,255
  119c38:	10800058 	cmpnei	r2,r2,1
  119c3c:	10002f1e 	bne	r2,zero,119cfc <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  119c40:	0005303a 	rdctl	r2,status
  119c44:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  119c48:	e0ffff17 	ldw	r3,-4(fp)
  119c4c:	00bfff84 	movi	r2,-2
  119c50:	1884703a 	and	r2,r3,r2
  119c54:	1001703a 	wrctl	status,r2
  
  return context;
  119c58:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  119c5c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  119c60:	d0a74703 	ldbu	r2,-25316(gp)
  119c64:	10803fcc 	andi	r2,r2,255
  119c68:	10000326 	beq	r2,zero,119c78 <OSIntExit+0x5c>
            OSIntNesting--;
  119c6c:	d0a74703 	ldbu	r2,-25316(gp)
  119c70:	10bfffc4 	addi	r2,r2,-1
  119c74:	d0a74705 	stb	r2,-25316(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  119c78:	d0a74703 	ldbu	r2,-25316(gp)
  119c7c:	10803fcc 	andi	r2,r2,255
  119c80:	10001a1e 	bne	r2,zero,119cec <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  119c84:	d0a73903 	ldbu	r2,-25372(gp)
  119c88:	10803fcc 	andi	r2,r2,255
  119c8c:	1000171e 	bne	r2,zero,119cec <OSIntExit+0xd0>
                OS_SchedNew();
  119c90:	011ad180 	call	11ad18 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  119c94:	d0e73b03 	ldbu	r3,-25364(gp)
  119c98:	d0a73b43 	ldbu	r2,-25363(gp)
  119c9c:	18c03fcc 	andi	r3,r3,255
  119ca0:	10803fcc 	andi	r2,r2,255
  119ca4:	18801126 	beq	r3,r2,119cec <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  119ca8:	d0a73b03 	ldbu	r2,-25364(gp)
  119cac:	10c03fcc 	andi	r3,r2,255
  119cb0:	008004f4 	movhi	r2,19
  119cb4:	10b94804 	addi	r2,r2,-6880
  119cb8:	18c7883a 	add	r3,r3,r3
  119cbc:	18c7883a 	add	r3,r3,r3
  119cc0:	10c5883a 	add	r2,r2,r3
  119cc4:	10800017 	ldw	r2,0(r2)
  119cc8:	d0a74315 	stw	r2,-25332(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  119ccc:	d0a74317 	ldw	r2,-25332(gp)
  119cd0:	10c00e17 	ldw	r3,56(r2)
  119cd4:	18c00044 	addi	r3,r3,1
  119cd8:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  119cdc:	d0a73e17 	ldw	r2,-25352(gp)
  119ce0:	10800044 	addi	r2,r2,1
  119ce4:	d0a73e15 	stw	r2,-25352(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  119ce8:	01225400 	call	122540 <OSCtxSw>
  119cec:	e0bffd17 	ldw	r2,-12(fp)
  119cf0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  119cf4:	e0bffe17 	ldw	r2,-8(fp)
  119cf8:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  119cfc:	0001883a 	nop
  119d00:	e037883a 	mov	sp,fp
  119d04:	dfc00117 	ldw	ra,4(sp)
  119d08:	df000017 	ldw	fp,0(sp)
  119d0c:	dec00204 	addi	sp,sp,8
  119d10:	f800283a 	ret

00119d14 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  119d14:	defffc04 	addi	sp,sp,-16
  119d18:	df000315 	stw	fp,12(sp)
  119d1c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  119d20:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  119d24:	d0a73943 	ldbu	r2,-25371(gp)
  119d28:	10803fcc 	andi	r2,r2,255
  119d2c:	10800058 	cmpnei	r2,r2,1
  119d30:	1000161e 	bne	r2,zero,119d8c <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  119d34:	0005303a 	rdctl	r2,status
  119d38:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  119d3c:	e0ffff17 	ldw	r3,-4(fp)
  119d40:	00bfff84 	movi	r2,-2
  119d44:	1884703a 	and	r2,r3,r2
  119d48:	1001703a 	wrctl	status,r2
  
  return context;
  119d4c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  119d50:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  119d54:	d0a74703 	ldbu	r2,-25316(gp)
  119d58:	10803fcc 	andi	r2,r2,255
  119d5c:	1000071e 	bne	r2,zero,119d7c <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  119d60:	d0a73903 	ldbu	r2,-25372(gp)
  119d64:	10803fcc 	andi	r2,r2,255
  119d68:	10803fe0 	cmpeqi	r2,r2,255
  119d6c:	1000031e 	bne	r2,zero,119d7c <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  119d70:	d0a73903 	ldbu	r2,-25372(gp)
  119d74:	10800044 	addi	r2,r2,1
  119d78:	d0a73905 	stb	r2,-25372(gp)
  119d7c:	e0bffd17 	ldw	r2,-12(fp)
  119d80:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  119d84:	e0bffe17 	ldw	r2,-8(fp)
  119d88:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  119d8c:	0001883a 	nop
  119d90:	e037883a 	mov	sp,fp
  119d94:	df000017 	ldw	fp,0(sp)
  119d98:	dec00104 	addi	sp,sp,4
  119d9c:	f800283a 	ret

00119da0 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  119da0:	defff804 	addi	sp,sp,-32
  119da4:	dfc00715 	stw	ra,28(sp)
  119da8:	df000615 	stw	fp,24(sp)
  119dac:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  119db0:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  119db4:	d0a73943 	ldbu	r2,-25371(gp)
  119db8:	10803fcc 	andi	r2,r2,255
  119dbc:	10800058 	cmpnei	r2,r2,1
  119dc0:	1000281e 	bne	r2,zero,119e64 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  119dc4:	0005303a 	rdctl	r2,status
  119dc8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  119dcc:	e0ffff17 	ldw	r3,-4(fp)
  119dd0:	00bfff84 	movi	r2,-2
  119dd4:	1884703a 	and	r2,r3,r2
  119dd8:	1001703a 	wrctl	status,r2
  
  return context;
  119ddc:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  119de0:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  119de4:	d0a73903 	ldbu	r2,-25372(gp)
  119de8:	10803fcc 	andi	r2,r2,255
  119dec:	10001926 	beq	r2,zero,119e54 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  119df0:	d0a73903 	ldbu	r2,-25372(gp)
  119df4:	10bfffc4 	addi	r2,r2,-1
  119df8:	d0a73905 	stb	r2,-25372(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  119dfc:	d0a73903 	ldbu	r2,-25372(gp)
  119e00:	10803fcc 	andi	r2,r2,255
  119e04:	10000e1e 	bne	r2,zero,119e40 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  119e08:	d0a74703 	ldbu	r2,-25316(gp)
  119e0c:	10803fcc 	andi	r2,r2,255
  119e10:	1000061e 	bne	r2,zero,119e2c <OSSchedUnlock+0x8c>
  119e14:	e0bffa17 	ldw	r2,-24(fp)
  119e18:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  119e1c:	e0bffb17 	ldw	r2,-20(fp)
  119e20:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  119e24:	011ac480 	call	11ac48 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  119e28:	00000e06 	br	119e64 <OSSchedUnlock+0xc4>
  119e2c:	e0bffa17 	ldw	r2,-24(fp)
  119e30:	e0bffc15 	stw	r2,-16(fp)
  119e34:	e0bffc17 	ldw	r2,-16(fp)
  119e38:	1001703a 	wrctl	status,r2
  119e3c:	00000906 	br	119e64 <OSSchedUnlock+0xc4>
  119e40:	e0bffa17 	ldw	r2,-24(fp)
  119e44:	e0bffd15 	stw	r2,-12(fp)
  119e48:	e0bffd17 	ldw	r2,-12(fp)
  119e4c:	1001703a 	wrctl	status,r2
  119e50:	00000406 	br	119e64 <OSSchedUnlock+0xc4>
  119e54:	e0bffa17 	ldw	r2,-24(fp)
  119e58:	e0bffe15 	stw	r2,-8(fp)
  119e5c:	e0bffe17 	ldw	r2,-8(fp)
  119e60:	1001703a 	wrctl	status,r2
  119e64:	0001883a 	nop
  119e68:	e037883a 	mov	sp,fp
  119e6c:	dfc00117 	ldw	ra,4(sp)
  119e70:	df000017 	ldw	fp,0(sp)
  119e74:	dec00204 	addi	sp,sp,8
  119e78:	f800283a 	ret

00119e7c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  119e7c:	defffe04 	addi	sp,sp,-8
  119e80:	dfc00115 	stw	ra,4(sp)
  119e84:	df000015 	stw	fp,0(sp)
  119e88:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  119e8c:	d0a73943 	ldbu	r2,-25371(gp)
  119e90:	10803fcc 	andi	r2,r2,255
  119e94:	10000f1e 	bne	r2,zero,119ed4 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  119e98:	011ad180 	call	11ad18 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  119e9c:	d0a73b03 	ldbu	r2,-25364(gp)
  119ea0:	d0a73b45 	stb	r2,-25363(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  119ea4:	d0a73b03 	ldbu	r2,-25364(gp)
  119ea8:	10c03fcc 	andi	r3,r2,255
  119eac:	008004f4 	movhi	r2,19
  119eb0:	10b94804 	addi	r2,r2,-6880
  119eb4:	18c7883a 	add	r3,r3,r3
  119eb8:	18c7883a 	add	r3,r3,r3
  119ebc:	10c5883a 	add	r2,r2,r3
  119ec0:	10800017 	ldw	r2,0(r2)
  119ec4:	d0a74315 	stw	r2,-25332(gp)
        OSTCBCur      = OSTCBHighRdy;
  119ec8:	d0a74317 	ldw	r2,-25332(gp)
  119ecc:	d0a74815 	stw	r2,-25312(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  119ed0:	01225cc0 	call	1225cc <OSStartHighRdy>
    }
}
  119ed4:	0001883a 	nop
  119ed8:	e037883a 	mov	sp,fp
  119edc:	dfc00117 	ldw	ra,4(sp)
  119ee0:	df000017 	ldw	fp,0(sp)
  119ee4:	dec00204 	addi	sp,sp,8
  119ee8:	f800283a 	ret

00119eec <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  119eec:	defff904 	addi	sp,sp,-28
  119ef0:	dfc00615 	stw	ra,24(sp)
  119ef4:	df000515 	stw	fp,20(sp)
  119ef8:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  119efc:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  119f00:	01000084 	movi	r4,2
  119f04:	01205f00 	call	1205f0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  119f08:	0005303a 	rdctl	r2,status
  119f0c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  119f10:	e0fffc17 	ldw	r3,-16(fp)
  119f14:	00bfff84 	movi	r2,-2
  119f18:	1884703a 	and	r2,r3,r2
  119f1c:	1001703a 	wrctl	status,r2
  
  return context;
  119f20:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  119f24:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  119f28:	d0273a15 	stw	zero,-25368(gp)
  119f2c:	e0bffb17 	ldw	r2,-20(fp)
  119f30:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  119f34:	e0bffd17 	ldw	r2,-12(fp)
  119f38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  119f3c:	01001904 	movi	r4,100
  119f40:	01205f00 	call	1205f0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  119f44:	0005303a 	rdctl	r2,status
  119f48:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  119f4c:	e0fffe17 	ldw	r3,-8(fp)
  119f50:	00bfff84 	movi	r2,-2
  119f54:	1884703a 	and	r2,r3,r2
  119f58:	1001703a 	wrctl	status,r2
  
  return context;
  119f5c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  119f60:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  119f64:	d0a73a17 	ldw	r2,-25368(gp)
  119f68:	d0a73f15 	stw	r2,-25348(gp)
    OSStatRdy    = OS_TRUE;
  119f6c:	00800044 	movi	r2,1
  119f70:	d0a74b05 	stb	r2,-25300(gp)
  119f74:	e0bffb17 	ldw	r2,-20(fp)
  119f78:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  119f7c:	e0bfff17 	ldw	r2,-4(fp)
  119f80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  119f84:	0001883a 	nop
  119f88:	e037883a 	mov	sp,fp
  119f8c:	dfc00117 	ldw	ra,4(sp)
  119f90:	df000017 	ldw	fp,0(sp)
  119f94:	dec00204 	addi	sp,sp,8
  119f98:	f800283a 	ret

00119f9c <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  119f9c:	defff704 	addi	sp,sp,-36
  119fa0:	dfc00815 	stw	ra,32(sp)
  119fa4:	df000715 	stw	fp,28(sp)
  119fa8:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  119fac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  119fb0:	01227f40 	call	1227f4 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  119fb4:	0005303a 	rdctl	r2,status
  119fb8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  119fbc:	e0fffd17 	ldw	r3,-12(fp)
  119fc0:	00bfff84 	movi	r2,-2
  119fc4:	1884703a 	and	r2,r3,r2
  119fc8:	1001703a 	wrctl	status,r2
  
  return context;
  119fcc:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  119fd0:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
  119fd4:	d0a74917 	ldw	r2,-25308(gp)
  119fd8:	10800044 	addi	r2,r2,1
  119fdc:	d0a74915 	stw	r2,-25308(gp)
  119fe0:	e0bffb17 	ldw	r2,-20(fp)
  119fe4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  119fe8:	e0bfff17 	ldw	r2,-4(fp)
  119fec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  119ff0:	d0a73943 	ldbu	r2,-25371(gp)
  119ff4:	10803fcc 	andi	r2,r2,255
  119ff8:	10800058 	cmpnei	r2,r2,1
  119ffc:	10006a1e 	bne	r2,zero,11a1a8 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  11a000:	d0a73d03 	ldbu	r2,-25356(gp)
  11a004:	10803fcc 	andi	r2,r2,255
  11a008:	10c00060 	cmpeqi	r3,r2,1
  11a00c:	1800061e 	bne	r3,zero,11a028 <OSTimeTick+0x8c>
  11a010:	10c000a0 	cmpeqi	r3,r2,2
  11a014:	1800061e 	bne	r3,zero,11a030 <OSTimeTick+0x94>
  11a018:	10000a1e 	bne	r2,zero,11a044 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  11a01c:	00800044 	movi	r2,1
  11a020:	e0bffa05 	stb	r2,-24(fp)
                 break;
  11a024:	00000b06 	br	11a054 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  11a028:	e03ffa05 	stb	zero,-24(fp)
                 break;
  11a02c:	00000906 	br	11a054 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  11a030:	00800044 	movi	r2,1
  11a034:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  11a038:	00800044 	movi	r2,1
  11a03c:	d0a73d05 	stb	r2,-25356(gp)
                 break;
  11a040:	00000406 	br	11a054 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  11a044:	00800044 	movi	r2,1
  11a048:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  11a04c:	d0273d05 	stb	zero,-25356(gp)
                 break;
  11a050:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  11a054:	e0bffa03 	ldbu	r2,-24(fp)
  11a058:	10005226 	beq	r2,zero,11a1a4 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  11a05c:	d0a73c17 	ldw	r2,-25360(gp)
  11a060:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  11a064:	00004906 	br	11a18c <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11a068:	0005303a 	rdctl	r2,status
  11a06c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11a070:	e0fffc17 	ldw	r3,-16(fp)
  11a074:	00bfff84 	movi	r2,-2
  11a078:	1884703a 	and	r2,r3,r2
  11a07c:	1001703a 	wrctl	status,r2
  
  return context;
  11a080:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
  11a084:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  11a088:	e0bff917 	ldw	r2,-28(fp)
  11a08c:	10800b8b 	ldhu	r2,46(r2)
  11a090:	10bfffcc 	andi	r2,r2,65535
  11a094:	10003626 	beq	r2,zero,11a170 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  11a098:	e0bff917 	ldw	r2,-28(fp)
  11a09c:	10800b8b 	ldhu	r2,46(r2)
  11a0a0:	10bfffc4 	addi	r2,r2,-1
  11a0a4:	1007883a 	mov	r3,r2
  11a0a8:	e0bff917 	ldw	r2,-28(fp)
  11a0ac:	10c00b8d 	sth	r3,46(r2)
  11a0b0:	e0bff917 	ldw	r2,-28(fp)
  11a0b4:	10800b8b 	ldhu	r2,46(r2)
  11a0b8:	10bfffcc 	andi	r2,r2,65535
  11a0bc:	10002c1e 	bne	r2,zero,11a170 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  11a0c0:	e0bff917 	ldw	r2,-28(fp)
  11a0c4:	10800c03 	ldbu	r2,48(r2)
  11a0c8:	10803fcc 	andi	r2,r2,255
  11a0cc:	10800dcc 	andi	r2,r2,55
  11a0d0:	10000b26 	beq	r2,zero,11a100 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  11a0d4:	e0bff917 	ldw	r2,-28(fp)
  11a0d8:	10c00c03 	ldbu	r3,48(r2)
  11a0dc:	00bff204 	movi	r2,-56
  11a0e0:	1884703a 	and	r2,r3,r2
  11a0e4:	1007883a 	mov	r3,r2
  11a0e8:	e0bff917 	ldw	r2,-28(fp)
  11a0ec:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  11a0f0:	e0bff917 	ldw	r2,-28(fp)
  11a0f4:	00c00044 	movi	r3,1
  11a0f8:	10c00c45 	stb	r3,49(r2)
  11a0fc:	00000206 	br	11a108 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  11a100:	e0bff917 	ldw	r2,-28(fp)
  11a104:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  11a108:	e0bff917 	ldw	r2,-28(fp)
  11a10c:	10800c03 	ldbu	r2,48(r2)
  11a110:	10803fcc 	andi	r2,r2,255
  11a114:	1080020c 	andi	r2,r2,8
  11a118:	1000151e 	bne	r2,zero,11a170 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  11a11c:	e0bff917 	ldw	r2,-28(fp)
  11a120:	10c00d83 	ldbu	r3,54(r2)
  11a124:	d0a74503 	ldbu	r2,-25324(gp)
  11a128:	1884b03a 	or	r2,r3,r2
  11a12c:	d0a74505 	stb	r2,-25324(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  11a130:	e0bff917 	ldw	r2,-28(fp)
  11a134:	10800d03 	ldbu	r2,52(r2)
  11a138:	10c03fcc 	andi	r3,r2,255
  11a13c:	e0bff917 	ldw	r2,-28(fp)
  11a140:	10800d03 	ldbu	r2,52(r2)
  11a144:	11003fcc 	andi	r4,r2,255
  11a148:	d0a74544 	addi	r2,gp,-25323
  11a14c:	2085883a 	add	r2,r4,r2
  11a150:	11000003 	ldbu	r4,0(r2)
  11a154:	e0bff917 	ldw	r2,-28(fp)
  11a158:	10800d43 	ldbu	r2,53(r2)
  11a15c:	2084b03a 	or	r2,r4,r2
  11a160:	1009883a 	mov	r4,r2
  11a164:	d0a74544 	addi	r2,gp,-25323
  11a168:	1885883a 	add	r2,r3,r2
  11a16c:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  11a170:	e0bff917 	ldw	r2,-28(fp)
  11a174:	10800517 	ldw	r2,20(r2)
  11a178:	e0bff915 	stw	r2,-28(fp)
  11a17c:	e0bffb17 	ldw	r2,-20(fp)
  11a180:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11a184:	e0bffe17 	ldw	r2,-8(fp)
  11a188:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  11a18c:	e0bff917 	ldw	r2,-28(fp)
  11a190:	10800c83 	ldbu	r2,50(r2)
  11a194:	10803fcc 	andi	r2,r2,255
  11a198:	10800518 	cmpnei	r2,r2,20
  11a19c:	103fb21e 	bne	r2,zero,11a068 <__alt_data_end+0xfffda068>
  11a1a0:	00000106 	br	11a1a8 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
  11a1a4:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  11a1a8:	e037883a 	mov	sp,fp
  11a1ac:	dfc00117 	ldw	ra,4(sp)
  11a1b0:	df000017 	ldw	fp,0(sp)
  11a1b4:	dec00204 	addi	sp,sp,8
  11a1b8:	f800283a 	ret

0011a1bc <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  11a1bc:	deffff04 	addi	sp,sp,-4
  11a1c0:	df000015 	stw	fp,0(sp)
  11a1c4:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  11a1c8:	00804784 	movi	r2,286
}
  11a1cc:	e037883a 	mov	sp,fp
  11a1d0:	df000017 	ldw	fp,0(sp)
  11a1d4:	dec00104 	addi	sp,sp,4
  11a1d8:	f800283a 	ret

0011a1dc <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  11a1dc:	deffff04 	addi	sp,sp,-4
  11a1e0:	df000015 	stw	fp,0(sp)
  11a1e4:	d839883a 	mov	fp,sp
}
  11a1e8:	0001883a 	nop
  11a1ec:	e037883a 	mov	sp,fp
  11a1f0:	df000017 	ldw	fp,0(sp)
  11a1f4:	dec00104 	addi	sp,sp,4
  11a1f8:	f800283a 	ret

0011a1fc <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  11a1fc:	defff804 	addi	sp,sp,-32
  11a200:	dfc00715 	stw	ra,28(sp)
  11a204:	df000615 	stw	fp,24(sp)
  11a208:	df000604 	addi	fp,sp,24
  11a20c:	e13ffc15 	stw	r4,-16(fp)
  11a210:	e17ffd15 	stw	r5,-12(fp)
  11a214:	3007883a 	mov	r3,r6
  11a218:	3805883a 	mov	r2,r7
  11a21c:	e0fffe05 	stb	r3,-8(fp)
  11a220:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  11a224:	e0bffc17 	ldw	r2,-16(fp)
  11a228:	10800283 	ldbu	r2,10(r2)
  11a22c:	10c03fcc 	andi	r3,r2,255
  11a230:	008004b4 	movhi	r2,18
  11a234:	108e5d04 	addi	r2,r2,14708
  11a238:	10c5883a 	add	r2,r2,r3
  11a23c:	10800003 	ldbu	r2,0(r2)
  11a240:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  11a244:	e0bffa03 	ldbu	r2,-24(fp)
  11a248:	e0fffc17 	ldw	r3,-16(fp)
  11a24c:	1885883a 	add	r2,r3,r2
  11a250:	108002c4 	addi	r2,r2,11
  11a254:	10800003 	ldbu	r2,0(r2)
  11a258:	10c03fcc 	andi	r3,r2,255
  11a25c:	008004b4 	movhi	r2,18
  11a260:	108e5d04 	addi	r2,r2,14708
  11a264:	10c5883a 	add	r2,r2,r3
  11a268:	10800003 	ldbu	r2,0(r2)
  11a26c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  11a270:	e0bffa03 	ldbu	r2,-24(fp)
  11a274:	100490fa 	slli	r2,r2,3
  11a278:	1007883a 	mov	r3,r2
  11a27c:	e0bffa43 	ldbu	r2,-23(fp)
  11a280:	1885883a 	add	r2,r3,r2
  11a284:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  11a288:	e0fffa83 	ldbu	r3,-22(fp)
  11a28c:	008004f4 	movhi	r2,19
  11a290:	10b94804 	addi	r2,r2,-6880
  11a294:	18c7883a 	add	r3,r3,r3
  11a298:	18c7883a 	add	r3,r3,r3
  11a29c:	10c5883a 	add	r2,r2,r3
  11a2a0:	10800017 	ldw	r2,0(r2)
  11a2a4:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  11a2a8:	e0bffb17 	ldw	r2,-20(fp)
  11a2ac:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  11a2b0:	e0bffb17 	ldw	r2,-20(fp)
  11a2b4:	e0fffd17 	ldw	r3,-12(fp)
  11a2b8:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  11a2bc:	e0bffb17 	ldw	r2,-20(fp)
  11a2c0:	10800c03 	ldbu	r2,48(r2)
  11a2c4:	1007883a 	mov	r3,r2
  11a2c8:	e0bffe03 	ldbu	r2,-8(fp)
  11a2cc:	0084303a 	nor	r2,zero,r2
  11a2d0:	1884703a 	and	r2,r3,r2
  11a2d4:	1007883a 	mov	r3,r2
  11a2d8:	e0bffb17 	ldw	r2,-20(fp)
  11a2dc:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  11a2e0:	e0bffb17 	ldw	r2,-20(fp)
  11a2e4:	e0ffff03 	ldbu	r3,-4(fp)
  11a2e8:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  11a2ec:	e0bffb17 	ldw	r2,-20(fp)
  11a2f0:	10800c03 	ldbu	r2,48(r2)
  11a2f4:	10803fcc 	andi	r2,r2,255
  11a2f8:	1080020c 	andi	r2,r2,8
  11a2fc:	1000111e 	bne	r2,zero,11a344 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  11a300:	e0bffb17 	ldw	r2,-20(fp)
  11a304:	10c00d83 	ldbu	r3,54(r2)
  11a308:	d0a74503 	ldbu	r2,-25324(gp)
  11a30c:	1884b03a 	or	r2,r3,r2
  11a310:	d0a74505 	stb	r2,-25324(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  11a314:	e0fffa03 	ldbu	r3,-24(fp)
  11a318:	e13ffa03 	ldbu	r4,-24(fp)
  11a31c:	d0a74544 	addi	r2,gp,-25323
  11a320:	2085883a 	add	r2,r4,r2
  11a324:	11000003 	ldbu	r4,0(r2)
  11a328:	e0bffb17 	ldw	r2,-20(fp)
  11a32c:	10800d43 	ldbu	r2,53(r2)
  11a330:	2084b03a 	or	r2,r4,r2
  11a334:	1009883a 	mov	r4,r2
  11a338:	d0a74544 	addi	r2,gp,-25323
  11a33c:	1885883a 	add	r2,r3,r2
  11a340:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  11a344:	e17ffc17 	ldw	r5,-16(fp)
  11a348:	e13ffb17 	ldw	r4,-20(fp)
  11a34c:	011a5f40 	call	11a5f4 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  11a350:	e0bffb17 	ldw	r2,-20(fp)
  11a354:	10800817 	ldw	r2,32(r2)
  11a358:	10000826 	beq	r2,zero,11a37c <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  11a35c:	e0bffb17 	ldw	r2,-20(fp)
  11a360:	10800817 	ldw	r2,32(r2)
  11a364:	100b883a 	mov	r5,r2
  11a368:	e13ffb17 	ldw	r4,-20(fp)
  11a36c:	011a6ac0 	call	11a6ac <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  11a370:	e0bffb17 	ldw	r2,-20(fp)
  11a374:	e0fffc17 	ldw	r3,-16(fp)
  11a378:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
  11a37c:	e0bffa83 	ldbu	r2,-22(fp)
}
  11a380:	e037883a 	mov	sp,fp
  11a384:	dfc00117 	ldw	ra,4(sp)
  11a388:	df000017 	ldw	fp,0(sp)
  11a38c:	dec00204 	addi	sp,sp,8
  11a390:	f800283a 	ret

0011a394 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  11a394:	defffd04 	addi	sp,sp,-12
  11a398:	df000215 	stw	fp,8(sp)
  11a39c:	df000204 	addi	fp,sp,8
  11a3a0:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  11a3a4:	d0a74817 	ldw	r2,-25312(gp)
  11a3a8:	e0ffff17 	ldw	r3,-4(fp)
  11a3ac:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  11a3b0:	d0a74817 	ldw	r2,-25312(gp)
  11a3b4:	10800d03 	ldbu	r2,52(r2)
  11a3b8:	10803fcc 	andi	r2,r2,255
  11a3bc:	d0e74817 	ldw	r3,-25312(gp)
  11a3c0:	18c00d03 	ldbu	r3,52(r3)
  11a3c4:	18c03fcc 	andi	r3,r3,255
  11a3c8:	e13fff17 	ldw	r4,-4(fp)
  11a3cc:	20c7883a 	add	r3,r4,r3
  11a3d0:	18c002c4 	addi	r3,r3,11
  11a3d4:	19000003 	ldbu	r4,0(r3)
  11a3d8:	d0e74817 	ldw	r3,-25312(gp)
  11a3dc:	18c00d43 	ldbu	r3,53(r3)
  11a3e0:	20c6b03a 	or	r3,r4,r3
  11a3e4:	1809883a 	mov	r4,r3
  11a3e8:	e0ffff17 	ldw	r3,-4(fp)
  11a3ec:	1885883a 	add	r2,r3,r2
  11a3f0:	108002c4 	addi	r2,r2,11
  11a3f4:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  11a3f8:	e0bfff17 	ldw	r2,-4(fp)
  11a3fc:	10c00283 	ldbu	r3,10(r2)
  11a400:	d0a74817 	ldw	r2,-25312(gp)
  11a404:	10800d83 	ldbu	r2,54(r2)
  11a408:	1884b03a 	or	r2,r3,r2
  11a40c:	1007883a 	mov	r3,r2
  11a410:	e0bfff17 	ldw	r2,-4(fp)
  11a414:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  11a418:	d0a74817 	ldw	r2,-25312(gp)
  11a41c:	10800d03 	ldbu	r2,52(r2)
  11a420:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  11a424:	e0fffe03 	ldbu	r3,-8(fp)
  11a428:	e13ffe03 	ldbu	r4,-8(fp)
  11a42c:	d0a74544 	addi	r2,gp,-25323
  11a430:	2085883a 	add	r2,r4,r2
  11a434:	10800003 	ldbu	r2,0(r2)
  11a438:	1009883a 	mov	r4,r2
  11a43c:	d0a74817 	ldw	r2,-25312(gp)
  11a440:	10800d43 	ldbu	r2,53(r2)
  11a444:	0084303a 	nor	r2,zero,r2
  11a448:	2084703a 	and	r2,r4,r2
  11a44c:	1009883a 	mov	r4,r2
  11a450:	d0a74544 	addi	r2,gp,-25323
  11a454:	1885883a 	add	r2,r3,r2
  11a458:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  11a45c:	e0fffe03 	ldbu	r3,-8(fp)
  11a460:	d0a74544 	addi	r2,gp,-25323
  11a464:	1885883a 	add	r2,r3,r2
  11a468:	10800003 	ldbu	r2,0(r2)
  11a46c:	10803fcc 	andi	r2,r2,255
  11a470:	1000071e 	bne	r2,zero,11a490 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  11a474:	d0a74817 	ldw	r2,-25312(gp)
  11a478:	10800d83 	ldbu	r2,54(r2)
  11a47c:	0084303a 	nor	r2,zero,r2
  11a480:	1007883a 	mov	r3,r2
  11a484:	d0a74503 	ldbu	r2,-25324(gp)
  11a488:	1884703a 	and	r2,r3,r2
  11a48c:	d0a74505 	stb	r2,-25324(gp)
    }
}
  11a490:	0001883a 	nop
  11a494:	e037883a 	mov	sp,fp
  11a498:	df000017 	ldw	fp,0(sp)
  11a49c:	dec00104 	addi	sp,sp,4
  11a4a0:	f800283a 	ret

0011a4a4 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  11a4a4:	defffb04 	addi	sp,sp,-20
  11a4a8:	df000415 	stw	fp,16(sp)
  11a4ac:	df000404 	addi	fp,sp,16
  11a4b0:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  11a4b4:	d0a74817 	ldw	r2,-25312(gp)
  11a4b8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  11a4bc:	d0a74817 	ldw	r2,-25312(gp)
  11a4c0:	e0ffff17 	ldw	r3,-4(fp)
  11a4c4:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
  11a4c8:	e0bfff17 	ldw	r2,-4(fp)
  11a4cc:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
  11a4d0:	e0bffc17 	ldw	r2,-16(fp)
  11a4d4:	10800017 	ldw	r2,0(r2)
  11a4d8:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  11a4dc:	00002006 	br	11a560 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  11a4e0:	d0a74817 	ldw	r2,-25312(gp)
  11a4e4:	10800d03 	ldbu	r2,52(r2)
  11a4e8:	10803fcc 	andi	r2,r2,255
  11a4ec:	d0e74817 	ldw	r3,-25312(gp)
  11a4f0:	18c00d03 	ldbu	r3,52(r3)
  11a4f4:	18c03fcc 	andi	r3,r3,255
  11a4f8:	e13ffd17 	ldw	r4,-12(fp)
  11a4fc:	20c7883a 	add	r3,r4,r3
  11a500:	18c002c4 	addi	r3,r3,11
  11a504:	19000003 	ldbu	r4,0(r3)
  11a508:	d0e74817 	ldw	r3,-25312(gp)
  11a50c:	18c00d43 	ldbu	r3,53(r3)
  11a510:	20c6b03a 	or	r3,r4,r3
  11a514:	1809883a 	mov	r4,r3
  11a518:	e0fffd17 	ldw	r3,-12(fp)
  11a51c:	1885883a 	add	r2,r3,r2
  11a520:	108002c4 	addi	r2,r2,11
  11a524:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  11a528:	e0bffd17 	ldw	r2,-12(fp)
  11a52c:	10c00283 	ldbu	r3,10(r2)
  11a530:	d0a74817 	ldw	r2,-25312(gp)
  11a534:	10800d83 	ldbu	r2,54(r2)
  11a538:	1884b03a 	or	r2,r3,r2
  11a53c:	1007883a 	mov	r3,r2
  11a540:	e0bffd17 	ldw	r2,-12(fp)
  11a544:	10c00285 	stb	r3,10(r2)
        pevents++;
  11a548:	e0bffc17 	ldw	r2,-16(fp)
  11a54c:	10800104 	addi	r2,r2,4
  11a550:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
  11a554:	e0bffc17 	ldw	r2,-16(fp)
  11a558:	10800017 	ldw	r2,0(r2)
  11a55c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  11a560:	e0bffd17 	ldw	r2,-12(fp)
  11a564:	103fde1e 	bne	r2,zero,11a4e0 <__alt_data_end+0xfffda4e0>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  11a568:	d0a74817 	ldw	r2,-25312(gp)
  11a56c:	10800d03 	ldbu	r2,52(r2)
  11a570:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  11a574:	e0fffe03 	ldbu	r3,-8(fp)
  11a578:	e13ffe03 	ldbu	r4,-8(fp)
  11a57c:	d0a74544 	addi	r2,gp,-25323
  11a580:	2085883a 	add	r2,r4,r2
  11a584:	10800003 	ldbu	r2,0(r2)
  11a588:	1009883a 	mov	r4,r2
  11a58c:	d0a74817 	ldw	r2,-25312(gp)
  11a590:	10800d43 	ldbu	r2,53(r2)
  11a594:	0084303a 	nor	r2,zero,r2
  11a598:	2084703a 	and	r2,r4,r2
  11a59c:	1009883a 	mov	r4,r2
  11a5a0:	d0a74544 	addi	r2,gp,-25323
  11a5a4:	1885883a 	add	r2,r3,r2
  11a5a8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  11a5ac:	e0fffe03 	ldbu	r3,-8(fp)
  11a5b0:	d0a74544 	addi	r2,gp,-25323
  11a5b4:	1885883a 	add	r2,r3,r2
  11a5b8:	10800003 	ldbu	r2,0(r2)
  11a5bc:	10803fcc 	andi	r2,r2,255
  11a5c0:	1000071e 	bne	r2,zero,11a5e0 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  11a5c4:	d0a74817 	ldw	r2,-25312(gp)
  11a5c8:	10800d83 	ldbu	r2,54(r2)
  11a5cc:	0084303a 	nor	r2,zero,r2
  11a5d0:	1007883a 	mov	r3,r2
  11a5d4:	d0a74503 	ldbu	r2,-25324(gp)
  11a5d8:	1884703a 	and	r2,r3,r2
  11a5dc:	d0a74505 	stb	r2,-25324(gp)
    }
}
  11a5e0:	0001883a 	nop
  11a5e4:	e037883a 	mov	sp,fp
  11a5e8:	df000017 	ldw	fp,0(sp)
  11a5ec:	dec00104 	addi	sp,sp,4
  11a5f0:	f800283a 	ret

0011a5f4 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  11a5f4:	defffc04 	addi	sp,sp,-16
  11a5f8:	df000315 	stw	fp,12(sp)
  11a5fc:	df000304 	addi	fp,sp,12
  11a600:	e13ffe15 	stw	r4,-8(fp)
  11a604:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  11a608:	e0bffe17 	ldw	r2,-8(fp)
  11a60c:	10800d03 	ldbu	r2,52(r2)
  11a610:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  11a614:	e0bffd03 	ldbu	r2,-12(fp)
  11a618:	e0fffd03 	ldbu	r3,-12(fp)
  11a61c:	e13fff17 	ldw	r4,-4(fp)
  11a620:	20c7883a 	add	r3,r4,r3
  11a624:	18c002c4 	addi	r3,r3,11
  11a628:	18c00003 	ldbu	r3,0(r3)
  11a62c:	1809883a 	mov	r4,r3
  11a630:	e0fffe17 	ldw	r3,-8(fp)
  11a634:	18c00d43 	ldbu	r3,53(r3)
  11a638:	00c6303a 	nor	r3,zero,r3
  11a63c:	20c6703a 	and	r3,r4,r3
  11a640:	1809883a 	mov	r4,r3
  11a644:	e0ffff17 	ldw	r3,-4(fp)
  11a648:	1885883a 	add	r2,r3,r2
  11a64c:	108002c4 	addi	r2,r2,11
  11a650:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
  11a654:	e0bffd03 	ldbu	r2,-12(fp)
  11a658:	e0ffff17 	ldw	r3,-4(fp)
  11a65c:	1885883a 	add	r2,r3,r2
  11a660:	108002c4 	addi	r2,r2,11
  11a664:	10800003 	ldbu	r2,0(r2)
  11a668:	10803fcc 	andi	r2,r2,255
  11a66c:	10000a1e 	bne	r2,zero,11a698 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  11a670:	e0bfff17 	ldw	r2,-4(fp)
  11a674:	10800283 	ldbu	r2,10(r2)
  11a678:	1007883a 	mov	r3,r2
  11a67c:	e0bffe17 	ldw	r2,-8(fp)
  11a680:	10800d83 	ldbu	r2,54(r2)
  11a684:	0084303a 	nor	r2,zero,r2
  11a688:	1884703a 	and	r2,r3,r2
  11a68c:	1007883a 	mov	r3,r2
  11a690:	e0bfff17 	ldw	r2,-4(fp)
  11a694:	10c00285 	stb	r3,10(r2)
    }
}
  11a698:	0001883a 	nop
  11a69c:	e037883a 	mov	sp,fp
  11a6a0:	df000017 	ldw	fp,0(sp)
  11a6a4:	dec00104 	addi	sp,sp,4
  11a6a8:	f800283a 	ret

0011a6ac <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  11a6ac:	defffa04 	addi	sp,sp,-24
  11a6b0:	df000515 	stw	fp,20(sp)
  11a6b4:	df000504 	addi	fp,sp,20
  11a6b8:	e13ffe15 	stw	r4,-8(fp)
  11a6bc:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  11a6c0:	e0bffe17 	ldw	r2,-8(fp)
  11a6c4:	10800d03 	ldbu	r2,52(r2)
  11a6c8:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
  11a6cc:	e0bffe17 	ldw	r2,-8(fp)
  11a6d0:	10800d83 	ldbu	r2,54(r2)
  11a6d4:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
  11a6d8:	e0bffe17 	ldw	r2,-8(fp)
  11a6dc:	10800d43 	ldbu	r2,53(r2)
  11a6e0:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
  11a6e4:	e0bfff17 	ldw	r2,-4(fp)
  11a6e8:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
  11a6ec:	e0bffb17 	ldw	r2,-20(fp)
  11a6f0:	10800017 	ldw	r2,0(r2)
  11a6f4:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  11a6f8:	00002506 	br	11a790 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
  11a6fc:	e0bffd03 	ldbu	r2,-12(fp)
  11a700:	e0fffd03 	ldbu	r3,-12(fp)
  11a704:	e13ffc17 	ldw	r4,-16(fp)
  11a708:	20c7883a 	add	r3,r4,r3
  11a70c:	18c002c4 	addi	r3,r3,11
  11a710:	18c00003 	ldbu	r3,0(r3)
  11a714:	1809883a 	mov	r4,r3
  11a718:	e0fffd83 	ldbu	r3,-10(fp)
  11a71c:	00c6303a 	nor	r3,zero,r3
  11a720:	20c6703a 	and	r3,r4,r3
  11a724:	1809883a 	mov	r4,r3
  11a728:	e0fffc17 	ldw	r3,-16(fp)
  11a72c:	1885883a 	add	r2,r3,r2
  11a730:	108002c4 	addi	r2,r2,11
  11a734:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
  11a738:	e0bffd03 	ldbu	r2,-12(fp)
  11a73c:	e0fffc17 	ldw	r3,-16(fp)
  11a740:	1885883a 	add	r2,r3,r2
  11a744:	108002c4 	addi	r2,r2,11
  11a748:	10800003 	ldbu	r2,0(r2)
  11a74c:	10803fcc 	andi	r2,r2,255
  11a750:	1000091e 	bne	r2,zero,11a778 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
  11a754:	e0bffc17 	ldw	r2,-16(fp)
  11a758:	10800283 	ldbu	r2,10(r2)
  11a75c:	1007883a 	mov	r3,r2
  11a760:	e0bffd43 	ldbu	r2,-11(fp)
  11a764:	0084303a 	nor	r2,zero,r2
  11a768:	1884703a 	and	r2,r3,r2
  11a76c:	1007883a 	mov	r3,r2
  11a770:	e0bffc17 	ldw	r2,-16(fp)
  11a774:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  11a778:	e0bffb17 	ldw	r2,-20(fp)
  11a77c:	10800104 	addi	r2,r2,4
  11a780:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
  11a784:	e0bffb17 	ldw	r2,-20(fp)
  11a788:	10800017 	ldw	r2,0(r2)
  11a78c:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  11a790:	e0bffc17 	ldw	r2,-16(fp)
  11a794:	103fd91e 	bne	r2,zero,11a6fc <__alt_data_end+0xfffda6fc>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  11a798:	0001883a 	nop
  11a79c:	e037883a 	mov	sp,fp
  11a7a0:	df000017 	ldw	fp,0(sp)
  11a7a4:	dec00104 	addi	sp,sp,4
  11a7a8:	f800283a 	ret

0011a7ac <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  11a7ac:	defffc04 	addi	sp,sp,-16
  11a7b0:	df000315 	stw	fp,12(sp)
  11a7b4:	df000304 	addi	fp,sp,12
  11a7b8:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  11a7bc:	e0bfff17 	ldw	r2,-4(fp)
  11a7c0:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  11a7c4:	e0bfff17 	ldw	r2,-4(fp)
  11a7c8:	108002c4 	addi	r2,r2,11
  11a7cc:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  11a7d0:	e03ffe05 	stb	zero,-8(fp)
  11a7d4:	00000706 	br	11a7f4 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
  11a7d8:	e0bffd17 	ldw	r2,-12(fp)
  11a7dc:	10c00044 	addi	r3,r2,1
  11a7e0:	e0fffd15 	stw	r3,-12(fp)
  11a7e4:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  11a7e8:	e0bffe03 	ldbu	r2,-8(fp)
  11a7ec:	10800044 	addi	r2,r2,1
  11a7f0:	e0bffe05 	stb	r2,-8(fp)
  11a7f4:	e0bffe03 	ldbu	r2,-8(fp)
  11a7f8:	108000f0 	cmpltui	r2,r2,3
  11a7fc:	103ff61e 	bne	r2,zero,11a7d8 <__alt_data_end+0xfffda7d8>
        *ptbl++ = 0;
    }
}
  11a800:	0001883a 	nop
  11a804:	e037883a 	mov	sp,fp
  11a808:	df000017 	ldw	fp,0(sp)
  11a80c:	dec00104 	addi	sp,sp,4
  11a810:	f800283a 	ret

0011a814 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  11a814:	defffb04 	addi	sp,sp,-20
  11a818:	dfc00415 	stw	ra,16(sp)
  11a81c:	df000315 	stw	fp,12(sp)
  11a820:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  11a824:	0142d004 	movi	r5,2880
  11a828:	010004f4 	movhi	r4,19
  11a82c:	21353404 	addi	r4,r4,-11056
  11a830:	011ab8c0 	call	11ab8c <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  11a834:	008004f4 	movhi	r2,19
  11a838:	10b53404 	addi	r2,r2,-11056
  11a83c:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  11a840:	008004f4 	movhi	r2,19
  11a844:	10b54004 	addi	r2,r2,-11008
  11a848:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  11a84c:	e03ffd0d 	sth	zero,-12(fp)
  11a850:	00001306 	br	11a8a0 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  11a854:	e0bffe17 	ldw	r2,-8(fp)
  11a858:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  11a85c:	e0bffe17 	ldw	r2,-8(fp)
  11a860:	e0ffff17 	ldw	r3,-4(fp)
  11a864:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  11a868:	e0bffe17 	ldw	r2,-8(fp)
  11a86c:	00c00fc4 	movi	r3,63
  11a870:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  11a874:	e0bffe17 	ldw	r2,-8(fp)
  11a878:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  11a87c:	e0bffe17 	ldw	r2,-8(fp)
  11a880:	10800c04 	addi	r2,r2,48
  11a884:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  11a888:	e0bfff17 	ldw	r2,-4(fp)
  11a88c:	10800c04 	addi	r2,r2,48
  11a890:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  11a894:	e0bffd0b 	ldhu	r2,-12(fp)
  11a898:	10800044 	addi	r2,r2,1
  11a89c:	e0bffd0d 	sth	r2,-12(fp)
  11a8a0:	e0bffd0b 	ldhu	r2,-12(fp)
  11a8a4:	10800ef0 	cmpltui	r2,r2,59
  11a8a8:	103fea1e 	bne	r2,zero,11a854 <__alt_data_end+0xfffda854>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  11a8ac:	e0bffe17 	ldw	r2,-8(fp)
  11a8b0:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  11a8b4:	e0bffe17 	ldw	r2,-8(fp)
  11a8b8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  11a8bc:	e0bffe17 	ldw	r2,-8(fp)
  11a8c0:	00c00fc4 	movi	r3,63
  11a8c4:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  11a8c8:	e0bffe17 	ldw	r2,-8(fp)
  11a8cc:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  11a8d0:	008004f4 	movhi	r2,19
  11a8d4:	10b53404 	addi	r2,r2,-11056
  11a8d8:	d0a74615 	stw	r2,-25320(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  11a8dc:	0001883a 	nop
  11a8e0:	e037883a 	mov	sp,fp
  11a8e4:	dfc00117 	ldw	ra,4(sp)
  11a8e8:	df000017 	ldw	fp,0(sp)
  11a8ec:	dec00204 	addi	sp,sp,8
  11a8f0:	f800283a 	ret

0011a8f4 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  11a8f4:	deffff04 	addi	sp,sp,-4
  11a8f8:	df000015 	stw	fp,0(sp)
  11a8fc:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  11a900:	d0274915 	stw	zero,-25308(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  11a904:	d0274705 	stb	zero,-25316(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  11a908:	d0273905 	stb	zero,-25372(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  11a90c:	d0274145 	stb	zero,-25339(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  11a910:	d0273945 	stb	zero,-25371(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  11a914:	d0273e15 	stw	zero,-25352(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  11a918:	d0273a15 	stw	zero,-25368(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  11a91c:	d0274c15 	stw	zero,-25296(gp)
    OSIdleCtrMax  = 0L;
  11a920:	d0273f15 	stw	zero,-25348(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  11a924:	d0274b05 	stb	zero,-25300(gp)
#endif
}
  11a928:	0001883a 	nop
  11a92c:	e037883a 	mov	sp,fp
  11a930:	df000017 	ldw	fp,0(sp)
  11a934:	dec00104 	addi	sp,sp,4
  11a938:	f800283a 	ret

0011a93c <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  11a93c:	defffd04 	addi	sp,sp,-12
  11a940:	df000215 	stw	fp,8(sp)
  11a944:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  11a948:	d0274505 	stb	zero,-25324(gp)
    prdytbl       = &OSRdyTbl[0];
  11a94c:	d0a74544 	addi	r2,gp,-25323
  11a950:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  11a954:	e03ffe05 	stb	zero,-8(fp)
  11a958:	00000706 	br	11a978 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
  11a95c:	e0bfff17 	ldw	r2,-4(fp)
  11a960:	10c00044 	addi	r3,r2,1
  11a964:	e0ffff15 	stw	r3,-4(fp)
  11a968:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  11a96c:	e0bffe03 	ldbu	r2,-8(fp)
  11a970:	10800044 	addi	r2,r2,1
  11a974:	e0bffe05 	stb	r2,-8(fp)
  11a978:	e0bffe03 	ldbu	r2,-8(fp)
  11a97c:	108000f0 	cmpltui	r2,r2,3
  11a980:	103ff61e 	bne	r2,zero,11a95c <__alt_data_end+0xfffda95c>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  11a984:	d0273b45 	stb	zero,-25363(gp)
    OSPrioHighRdy = 0;
  11a988:	d0273b05 	stb	zero,-25364(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  11a98c:	d0274315 	stw	zero,-25332(gp)
    OSTCBCur      = (OS_TCB *)0;
  11a990:	d0274815 	stw	zero,-25312(gp)
}
  11a994:	0001883a 	nop
  11a998:	e037883a 	mov	sp,fp
  11a99c:	df000017 	ldw	fp,0(sp)
  11a9a0:	dec00104 	addi	sp,sp,4
  11a9a4:	f800283a 	ret

0011a9a8 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  11a9a8:	defff804 	addi	sp,sp,-32
  11a9ac:	dfc00715 	stw	ra,28(sp)
  11a9b0:	df000615 	stw	fp,24(sp)
  11a9b4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  11a9b8:	008000c4 	movi	r2,3
  11a9bc:	d8800415 	stw	r2,16(sp)
  11a9c0:	d8000315 	stw	zero,12(sp)
  11a9c4:	00808004 	movi	r2,512
  11a9c8:	d8800215 	stw	r2,8(sp)
  11a9cc:	008004f4 	movhi	r2,19
  11a9d0:	10b33404 	addi	r2,r2,-13104
  11a9d4:	d8800115 	stw	r2,4(sp)
  11a9d8:	00bfffd4 	movui	r2,65535
  11a9dc:	d8800015 	stw	r2,0(sp)
  11a9e0:	01c00504 	movi	r7,20
  11a9e4:	018004f4 	movhi	r6,19
  11a9e8:	31b53304 	addi	r6,r6,-11060
  11a9ec:	000b883a 	mov	r5,zero
  11a9f0:	010004b4 	movhi	r4,18
  11a9f4:	212b9504 	addi	r4,r4,-20908
  11a9f8:	011f5200 	call	11f520 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  11a9fc:	e1bfff04 	addi	r6,fp,-4
  11aa00:	014004b4 	movhi	r5,18
  11aa04:	294e9d04 	addi	r5,r5,14964
  11aa08:	01000504 	movi	r4,20
  11aa0c:	011fd300 	call	11fd30 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  11aa10:	0001883a 	nop
  11aa14:	e037883a 	mov	sp,fp
  11aa18:	dfc00117 	ldw	ra,4(sp)
  11aa1c:	df000017 	ldw	fp,0(sp)
  11aa20:	dec00204 	addi	sp,sp,8
  11aa24:	f800283a 	ret

0011aa28 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  11aa28:	defff804 	addi	sp,sp,-32
  11aa2c:	dfc00715 	stw	ra,28(sp)
  11aa30:	df000615 	stw	fp,24(sp)
  11aa34:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  11aa38:	008000c4 	movi	r2,3
  11aa3c:	d8800415 	stw	r2,16(sp)
  11aa40:	d8000315 	stw	zero,12(sp)
  11aa44:	00808004 	movi	r2,512
  11aa48:	d8800215 	stw	r2,8(sp)
  11aa4c:	008004f4 	movhi	r2,19
  11aa50:	10b0bc04 	addi	r2,r2,-15632
  11aa54:	d8800115 	stw	r2,4(sp)
  11aa58:	00bfff94 	movui	r2,65534
  11aa5c:	d8800015 	stw	r2,0(sp)
  11aa60:	01c004c4 	movi	r7,19
  11aa64:	018004f4 	movhi	r6,19
  11aa68:	31b2bb04 	addi	r6,r6,-13588
  11aa6c:	000b883a 	mov	r5,zero
  11aa70:	010004b4 	movhi	r4,18
  11aa74:	212bac04 	addi	r4,r4,-20816
  11aa78:	011f5200 	call	11f520 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  11aa7c:	e1bfff04 	addi	r6,fp,-4
  11aa80:	014004b4 	movhi	r5,18
  11aa84:	294ea104 	addi	r5,r5,14980
  11aa88:	010004c4 	movi	r4,19
  11aa8c:	011fd300 	call	11fd30 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  11aa90:	0001883a 	nop
  11aa94:	e037883a 	mov	sp,fp
  11aa98:	dfc00117 	ldw	ra,4(sp)
  11aa9c:	df000017 	ldw	fp,0(sp)
  11aaa0:	dec00204 	addi	sp,sp,8
  11aaa4:	f800283a 	ret

0011aaa8 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  11aaa8:	defffb04 	addi	sp,sp,-20
  11aaac:	dfc00415 	stw	ra,16(sp)
  11aab0:	df000315 	stw	fp,12(sp)
  11aab4:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  11aab8:	01414404 	movi	r5,1296
  11aabc:	010004f4 	movhi	r4,19
  11aac0:	21380404 	addi	r4,r4,-8176
  11aac4:	011ab8c0 	call	11ab8c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  11aac8:	01401504 	movi	r5,84
  11aacc:	010004f4 	movhi	r4,19
  11aad0:	21394804 	addi	r4,r4,-6880
  11aad4:	011ab8c0 	call	11ab8c <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  11aad8:	008004f4 	movhi	r2,19
  11aadc:	10b80404 	addi	r2,r2,-8176
  11aae0:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  11aae4:	008004f4 	movhi	r2,19
  11aae8:	10b81f04 	addi	r2,r2,-8068
  11aaec:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  11aaf0:	e03ffd05 	stb	zero,-12(fp)
  11aaf4:	00001106 	br	11ab3c <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  11aaf8:	e0bffe17 	ldw	r2,-8(fp)
  11aafc:	e0ffff17 	ldw	r3,-4(fp)
  11ab00:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  11ab04:	e0bffe17 	ldw	r2,-8(fp)
  11ab08:	00c00fc4 	movi	r3,63
  11ab0c:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  11ab10:	e0bffe17 	ldw	r2,-8(fp)
  11ab14:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  11ab18:	e0bffe17 	ldw	r2,-8(fp)
  11ab1c:	10801b04 	addi	r2,r2,108
  11ab20:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  11ab24:	e0bfff17 	ldw	r2,-4(fp)
  11ab28:	10801b04 	addi	r2,r2,108
  11ab2c:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  11ab30:	e0bffd03 	ldbu	r2,-12(fp)
  11ab34:	10800044 	addi	r2,r2,1
  11ab38:	e0bffd05 	stb	r2,-12(fp)
  11ab3c:	e0bffd03 	ldbu	r2,-12(fp)
  11ab40:	108002f0 	cmpltui	r2,r2,11
  11ab44:	103fec1e 	bne	r2,zero,11aaf8 <__alt_data_end+0xfffdaaf8>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  11ab48:	e0bffe17 	ldw	r2,-8(fp)
  11ab4c:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  11ab50:	e0bffe17 	ldw	r2,-8(fp)
  11ab54:	00c00fc4 	movi	r3,63
  11ab58:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  11ab5c:	e0bffe17 	ldw	r2,-8(fp)
  11ab60:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  11ab64:	d0273c15 	stw	zero,-25360(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  11ab68:	008004f4 	movhi	r2,19
  11ab6c:	10b80404 	addi	r2,r2,-8176
  11ab70:	d0a74015 	stw	r2,-25344(gp)
}
  11ab74:	0001883a 	nop
  11ab78:	e037883a 	mov	sp,fp
  11ab7c:	dfc00117 	ldw	ra,4(sp)
  11ab80:	df000017 	ldw	fp,0(sp)
  11ab84:	dec00204 	addi	sp,sp,8
  11ab88:	f800283a 	ret

0011ab8c <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  11ab8c:	defffd04 	addi	sp,sp,-12
  11ab90:	df000215 	stw	fp,8(sp)
  11ab94:	df000204 	addi	fp,sp,8
  11ab98:	e13ffe15 	stw	r4,-8(fp)
  11ab9c:	2805883a 	mov	r2,r5
  11aba0:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
  11aba4:	00000706 	br	11abc4 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  11aba8:	e0bffe17 	ldw	r2,-8(fp)
  11abac:	10c00044 	addi	r3,r2,1
  11abb0:	e0fffe15 	stw	r3,-8(fp)
  11abb4:	10000005 	stb	zero,0(r2)
        size--;
  11abb8:	e0bfff0b 	ldhu	r2,-4(fp)
  11abbc:	10bfffc4 	addi	r2,r2,-1
  11abc0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  11abc4:	e0bfff0b 	ldhu	r2,-4(fp)
  11abc8:	103ff71e 	bne	r2,zero,11aba8 <__alt_data_end+0xfffdaba8>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  11abcc:	0001883a 	nop
  11abd0:	e037883a 	mov	sp,fp
  11abd4:	df000017 	ldw	fp,0(sp)
  11abd8:	dec00104 	addi	sp,sp,4
  11abdc:	f800283a 	ret

0011abe0 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  11abe0:	defffc04 	addi	sp,sp,-16
  11abe4:	df000315 	stw	fp,12(sp)
  11abe8:	df000304 	addi	fp,sp,12
  11abec:	e13ffd15 	stw	r4,-12(fp)
  11abf0:	e17ffe15 	stw	r5,-8(fp)
  11abf4:	3005883a 	mov	r2,r6
  11abf8:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
  11abfc:	00000b06 	br	11ac2c <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
  11ac00:	e0bffd17 	ldw	r2,-12(fp)
  11ac04:	10c00044 	addi	r3,r2,1
  11ac08:	e0fffd15 	stw	r3,-12(fp)
  11ac0c:	e0fffe17 	ldw	r3,-8(fp)
  11ac10:	19000044 	addi	r4,r3,1
  11ac14:	e13ffe15 	stw	r4,-8(fp)
  11ac18:	18c00003 	ldbu	r3,0(r3)
  11ac1c:	10c00005 	stb	r3,0(r2)
        size--;
  11ac20:	e0bfff0b 	ldhu	r2,-4(fp)
  11ac24:	10bfffc4 	addi	r2,r2,-1
  11ac28:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  11ac2c:	e0bfff0b 	ldhu	r2,-4(fp)
  11ac30:	103ff31e 	bne	r2,zero,11ac00 <__alt_data_end+0xfffdac00>
        *pdest++ = *psrc++;
        size--;
    }
}
  11ac34:	0001883a 	nop
  11ac38:	e037883a 	mov	sp,fp
  11ac3c:	df000017 	ldw	fp,0(sp)
  11ac40:	dec00104 	addi	sp,sp,4
  11ac44:	f800283a 	ret

0011ac48 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  11ac48:	defffb04 	addi	sp,sp,-20
  11ac4c:	dfc00415 	stw	ra,16(sp)
  11ac50:	df000315 	stw	fp,12(sp)
  11ac54:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  11ac58:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11ac5c:	0005303a 	rdctl	r2,status
  11ac60:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11ac64:	e0ffff17 	ldw	r3,-4(fp)
  11ac68:	00bfff84 	movi	r2,-2
  11ac6c:	1884703a 	and	r2,r3,r2
  11ac70:	1001703a 	wrctl	status,r2
  
  return context;
  11ac74:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
  11ac78:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  11ac7c:	d0a74703 	ldbu	r2,-25316(gp)
  11ac80:	10803fcc 	andi	r2,r2,255
  11ac84:	10001a1e 	bne	r2,zero,11acf0 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  11ac88:	d0a73903 	ldbu	r2,-25372(gp)
  11ac8c:	10803fcc 	andi	r2,r2,255
  11ac90:	1000171e 	bne	r2,zero,11acf0 <OS_Sched+0xa8>
            OS_SchedNew();
  11ac94:	011ad180 	call	11ad18 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  11ac98:	d0e73b03 	ldbu	r3,-25364(gp)
  11ac9c:	d0a73b43 	ldbu	r2,-25363(gp)
  11aca0:	18c03fcc 	andi	r3,r3,255
  11aca4:	10803fcc 	andi	r2,r2,255
  11aca8:	18801126 	beq	r3,r2,11acf0 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  11acac:	d0a73b03 	ldbu	r2,-25364(gp)
  11acb0:	10c03fcc 	andi	r3,r2,255
  11acb4:	008004f4 	movhi	r2,19
  11acb8:	10b94804 	addi	r2,r2,-6880
  11acbc:	18c7883a 	add	r3,r3,r3
  11acc0:	18c7883a 	add	r3,r3,r3
  11acc4:	10c5883a 	add	r2,r2,r3
  11acc8:	10800017 	ldw	r2,0(r2)
  11accc:	d0a74315 	stw	r2,-25332(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  11acd0:	d0a74317 	ldw	r2,-25332(gp)
  11acd4:	10c00e17 	ldw	r3,56(r2)
  11acd8:	18c00044 	addi	r3,r3,1
  11acdc:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  11ace0:	d0a73e17 	ldw	r2,-25352(gp)
  11ace4:	10800044 	addi	r2,r2,1
  11ace8:	d0a73e15 	stw	r2,-25352(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  11acec:	01225400 	call	122540 <OSCtxSw>
  11acf0:	e0bffd17 	ldw	r2,-12(fp)
  11acf4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11acf8:	e0bffe17 	ldw	r2,-8(fp)
  11acfc:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  11ad00:	0001883a 	nop
  11ad04:	e037883a 	mov	sp,fp
  11ad08:	dfc00117 	ldw	ra,4(sp)
  11ad0c:	df000017 	ldw	fp,0(sp)
  11ad10:	dec00204 	addi	sp,sp,8
  11ad14:	f800283a 	ret

0011ad18 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  11ad18:	defffe04 	addi	sp,sp,-8
  11ad1c:	df000115 	stw	fp,4(sp)
  11ad20:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  11ad24:	d0a74503 	ldbu	r2,-25324(gp)
  11ad28:	10c03fcc 	andi	r3,r2,255
  11ad2c:	008004b4 	movhi	r2,18
  11ad30:	108e5d04 	addi	r2,r2,14708
  11ad34:	10c5883a 	add	r2,r2,r3
  11ad38:	10800003 	ldbu	r2,0(r2)
  11ad3c:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  11ad40:	e0bfff03 	ldbu	r2,-4(fp)
  11ad44:	100490fa 	slli	r2,r2,3
  11ad48:	1009883a 	mov	r4,r2
  11ad4c:	e0ffff03 	ldbu	r3,-4(fp)
  11ad50:	d0a74544 	addi	r2,gp,-25323
  11ad54:	1885883a 	add	r2,r3,r2
  11ad58:	10800003 	ldbu	r2,0(r2)
  11ad5c:	10c03fcc 	andi	r3,r2,255
  11ad60:	008004b4 	movhi	r2,18
  11ad64:	108e5d04 	addi	r2,r2,14708
  11ad68:	10c5883a 	add	r2,r2,r3
  11ad6c:	10800003 	ldbu	r2,0(r2)
  11ad70:	2085883a 	add	r2,r4,r2
  11ad74:	d0a73b05 	stb	r2,-25364(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  11ad78:	0001883a 	nop
  11ad7c:	e037883a 	mov	sp,fp
  11ad80:	df000017 	ldw	fp,0(sp)
  11ad84:	dec00104 	addi	sp,sp,4
  11ad88:	f800283a 	ret

0011ad8c <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  11ad8c:	defffc04 	addi	sp,sp,-16
  11ad90:	df000315 	stw	fp,12(sp)
  11ad94:	df000304 	addi	fp,sp,12
  11ad98:	e13ffe15 	stw	r4,-8(fp)
  11ad9c:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  11ada0:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  11ada4:	00000b06 	br	11add4 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
  11ada8:	e0bffe17 	ldw	r2,-8(fp)
  11adac:	10c00044 	addi	r3,r2,1
  11adb0:	e0fffe15 	stw	r3,-8(fp)
  11adb4:	e0ffff17 	ldw	r3,-4(fp)
  11adb8:	19000044 	addi	r4,r3,1
  11adbc:	e13fff15 	stw	r4,-4(fp)
  11adc0:	18c00003 	ldbu	r3,0(r3)
  11adc4:	10c00005 	stb	r3,0(r2)
        len++;
  11adc8:	e0bffd03 	ldbu	r2,-12(fp)
  11adcc:	10800044 	addi	r2,r2,1
  11add0:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  11add4:	e0bfff17 	ldw	r2,-4(fp)
  11add8:	10800003 	ldbu	r2,0(r2)
  11addc:	10803fcc 	andi	r2,r2,255
  11ade0:	103ff11e 	bne	r2,zero,11ada8 <__alt_data_end+0xfffdada8>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  11ade4:	e0bffe17 	ldw	r2,-8(fp)
  11ade8:	10000005 	stb	zero,0(r2)
    return (len);
  11adec:	e0bffd03 	ldbu	r2,-12(fp)
}
  11adf0:	e037883a 	mov	sp,fp
  11adf4:	df000017 	ldw	fp,0(sp)
  11adf8:	dec00104 	addi	sp,sp,4
  11adfc:	f800283a 	ret

0011ae00 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  11ae00:	defffd04 	addi	sp,sp,-12
  11ae04:	df000215 	stw	fp,8(sp)
  11ae08:	df000204 	addi	fp,sp,8
  11ae0c:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  11ae10:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  11ae14:	00000606 	br	11ae30 <OS_StrLen+0x30>
        psrc++;
  11ae18:	e0bfff17 	ldw	r2,-4(fp)
  11ae1c:	10800044 	addi	r2,r2,1
  11ae20:	e0bfff15 	stw	r2,-4(fp)
        len++;
  11ae24:	e0bffe03 	ldbu	r2,-8(fp)
  11ae28:	10800044 	addi	r2,r2,1
  11ae2c:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  11ae30:	e0bfff17 	ldw	r2,-4(fp)
  11ae34:	10800003 	ldbu	r2,0(r2)
  11ae38:	10803fcc 	andi	r2,r2,255
  11ae3c:	103ff61e 	bne	r2,zero,11ae18 <__alt_data_end+0xfffdae18>
        psrc++;
        len++;
    }
    return (len);
  11ae40:	e0bffe03 	ldbu	r2,-8(fp)
}
  11ae44:	e037883a 	mov	sp,fp
  11ae48:	df000017 	ldw	fp,0(sp)
  11ae4c:	dec00104 	addi	sp,sp,4
  11ae50:	f800283a 	ret

0011ae54 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  11ae54:	defffa04 	addi	sp,sp,-24
  11ae58:	dfc00515 	stw	ra,20(sp)
  11ae5c:	df000415 	stw	fp,16(sp)
  11ae60:	df000404 	addi	fp,sp,16
  11ae64:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  11ae68:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11ae6c:	0005303a 	rdctl	r2,status
  11ae70:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11ae74:	e0fffd17 	ldw	r3,-12(fp)
  11ae78:	00bfff84 	movi	r2,-2
  11ae7c:	1884703a 	and	r2,r3,r2
  11ae80:	1001703a 	wrctl	status,r2
  
  return context;
  11ae84:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  11ae88:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
  11ae8c:	d0a73a17 	ldw	r2,-25368(gp)
  11ae90:	10800044 	addi	r2,r2,1
  11ae94:	d0a73a15 	stw	r2,-25368(gp)
  11ae98:	e0bffc17 	ldw	r2,-16(fp)
  11ae9c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11aea0:	e0bffe17 	ldw	r2,-8(fp)
  11aea4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  11aea8:	01228540 	call	122854 <OSTaskIdleHook>
    }
  11aeac:	003fef06 	br	11ae6c <__alt_data_end+0xfffdae6c>

0011aeb0 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  11aeb0:	defffa04 	addi	sp,sp,-24
  11aeb4:	dfc00515 	stw	ra,20(sp)
  11aeb8:	df000415 	stw	fp,16(sp)
  11aebc:	df000404 	addi	fp,sp,16
  11aec0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  11aec4:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  11aec8:	00000206 	br	11aed4 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  11aecc:	01003204 	movi	r4,200
  11aed0:	01205f00 	call	1205f0 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  11aed4:	d0a74b03 	ldbu	r2,-25300(gp)
  11aed8:	10803fcc 	andi	r2,r2,255
  11aedc:	103ffb26 	beq	r2,zero,11aecc <__alt_data_end+0xfffdaecc>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  11aee0:	d0a73f17 	ldw	r2,-25348(gp)
  11aee4:	01401904 	movi	r5,100
  11aee8:	1009883a 	mov	r4,r2
  11aeec:	01159400 	call	115940 <__udivsi3>
  11aef0:	d0a73f15 	stw	r2,-25348(gp)
    if (OSIdleCtrMax == 0L) {
  11aef4:	d0a73f17 	ldw	r2,-25348(gp)
  11aef8:	1000031e 	bne	r2,zero,11af08 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
  11aefc:	d0274105 	stb	zero,-25340(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  11af00:	01003fc4 	movi	r4,255
  11af04:	01202780 	call	120278 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11af08:	0005303a 	rdctl	r2,status
  11af0c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11af10:	e0fffd17 	ldw	r3,-12(fp)
  11af14:	00bfff84 	movi	r2,-2
  11af18:	1884703a 	and	r2,r3,r2
  11af1c:	1001703a 	wrctl	status,r2
  
  return context;
  11af20:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  11af24:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  11af28:	d0a73a17 	ldw	r2,-25368(gp)
  11af2c:	d0a74c15 	stw	r2,-25296(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  11af30:	d0273a15 	stw	zero,-25368(gp)
  11af34:	e0bffc17 	ldw	r2,-16(fp)
  11af38:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11af3c:	e0bffe17 	ldw	r2,-8(fp)
  11af40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  11af44:	d0a74c17 	ldw	r2,-25296(gp)
  11af48:	d0e73f17 	ldw	r3,-25348(gp)
  11af4c:	180b883a 	mov	r5,r3
  11af50:	1009883a 	mov	r4,r2
  11af54:	01159400 	call	115940 <__udivsi3>
  11af58:	1007883a 	mov	r3,r2
  11af5c:	00801904 	movi	r2,100
  11af60:	10c5c83a 	sub	r2,r2,r3
  11af64:	d0a74105 	stb	r2,-25340(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  11af68:	01227d40 	call	1227d4 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  11af6c:	011af7c0 	call	11af7c <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  11af70:	01001904 	movi	r4,100
  11af74:	01205f00 	call	1205f0 <OSTimeDly>
    }
  11af78:	003fe306 	br	11af08 <__alt_data_end+0xfffdaf08>

0011af7c <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  11af7c:	defffa04 	addi	sp,sp,-24
  11af80:	dfc00515 	stw	ra,20(sp)
  11af84:	df000415 	stw	fp,16(sp)
  11af88:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  11af8c:	e03ffc05 	stb	zero,-16(fp)
  11af90:	00002406 	br	11b024 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  11af94:	e0bffc03 	ldbu	r2,-16(fp)
  11af98:	e0fffe04 	addi	r3,fp,-8
  11af9c:	180b883a 	mov	r5,r3
  11afa0:	1009883a 	mov	r4,r2
  11afa4:	01200b80 	call	1200b8 <OSTaskStkChk>
  11afa8:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  11afac:	e0bffc43 	ldbu	r2,-15(fp)
  11afb0:	1000191e 	bne	r2,zero,11b018 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  11afb4:	e0fffc03 	ldbu	r3,-16(fp)
  11afb8:	008004f4 	movhi	r2,19
  11afbc:	10b94804 	addi	r2,r2,-6880
  11afc0:	18c7883a 	add	r3,r3,r3
  11afc4:	18c7883a 	add	r3,r3,r3
  11afc8:	10c5883a 	add	r2,r2,r3
  11afcc:	10800017 	ldw	r2,0(r2)
  11afd0:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  11afd4:	e0bffd17 	ldw	r2,-12(fp)
  11afd8:	10000f26 	beq	r2,zero,11b018 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  11afdc:	e0bffd17 	ldw	r2,-12(fp)
  11afe0:	10800060 	cmpeqi	r2,r2,1
  11afe4:	10000c1e 	bne	r2,zero,11b018 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  11afe8:	e0bffd17 	ldw	r2,-12(fp)
  11afec:	10c00217 	ldw	r3,8(r2)
  11aff0:	e0bffd17 	ldw	r2,-12(fp)
  11aff4:	10800317 	ldw	r2,12(r2)
  11aff8:	1085883a 	add	r2,r2,r2
  11affc:	1085883a 	add	r2,r2,r2
  11b000:	1887883a 	add	r3,r3,r2
  11b004:	e0bffd17 	ldw	r2,-12(fp)
  11b008:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  11b00c:	e0ffff17 	ldw	r3,-4(fp)
  11b010:	e0bffd17 	ldw	r2,-12(fp)
  11b014:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  11b018:	e0bffc03 	ldbu	r2,-16(fp)
  11b01c:	10800044 	addi	r2,r2,1
  11b020:	e0bffc05 	stb	r2,-16(fp)
  11b024:	e0bffc03 	ldbu	r2,-16(fp)
  11b028:	10800570 	cmpltui	r2,r2,21
  11b02c:	103fd91e 	bne	r2,zero,11af94 <__alt_data_end+0xfffdaf94>
#endif
                }
            }
        }
    }
}
  11b030:	0001883a 	nop
  11b034:	e037883a 	mov	sp,fp
  11b038:	dfc00117 	ldw	ra,4(sp)
  11b03c:	df000017 	ldw	fp,0(sp)
  11b040:	dec00204 	addi	sp,sp,8
  11b044:	f800283a 	ret

0011b048 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  11b048:	defff204 	addi	sp,sp,-56
  11b04c:	dfc00d15 	stw	ra,52(sp)
  11b050:	df000c15 	stw	fp,48(sp)
  11b054:	df000c04 	addi	fp,sp,48
  11b058:	e17ffc15 	stw	r5,-16(fp)
  11b05c:	e1bffd15 	stw	r6,-12(fp)
  11b060:	3807883a 	mov	r3,r7
  11b064:	e0800417 	ldw	r2,16(fp)
  11b068:	e13ffb05 	stb	r4,-20(fp)
  11b06c:	e0fffe0d 	sth	r3,-8(fp)
  11b070:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  11b074:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11b078:	0005303a 	rdctl	r2,status
  11b07c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11b080:	e0fffa17 	ldw	r3,-24(fp)
  11b084:	00bfff84 	movi	r2,-2
  11b088:	1884703a 	and	r2,r3,r2
  11b08c:	1001703a 	wrctl	status,r2
  
  return context;
  11b090:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
  11b094:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  11b098:	d0a74017 	ldw	r2,-25344(gp)
  11b09c:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
  11b0a0:	e0bff617 	ldw	r2,-40(fp)
  11b0a4:	10009326 	beq	r2,zero,11b2f4 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  11b0a8:	e0bff617 	ldw	r2,-40(fp)
  11b0ac:	10800517 	ldw	r2,20(r2)
  11b0b0:	d0a74015 	stw	r2,-25344(gp)
  11b0b4:	e0bff417 	ldw	r2,-48(fp)
  11b0b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11b0bc:	e0bff817 	ldw	r2,-32(fp)
  11b0c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  11b0c4:	e0bff617 	ldw	r2,-40(fp)
  11b0c8:	e0fffc17 	ldw	r3,-16(fp)
  11b0cc:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  11b0d0:	e0bff617 	ldw	r2,-40(fp)
  11b0d4:	e0fffb03 	ldbu	r3,-20(fp)
  11b0d8:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  11b0dc:	e0bff617 	ldw	r2,-40(fp)
  11b0e0:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  11b0e4:	e0bff617 	ldw	r2,-40(fp)
  11b0e8:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  11b0ec:	e0bff617 	ldw	r2,-40(fp)
  11b0f0:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  11b0f4:	e0bff617 	ldw	r2,-40(fp)
  11b0f8:	e0c00317 	ldw	r3,12(fp)
  11b0fc:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  11b100:	e0bff617 	ldw	r2,-40(fp)
  11b104:	e0c00217 	ldw	r3,8(fp)
  11b108:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  11b10c:	e0bff617 	ldw	r2,-40(fp)
  11b110:	e0fffd17 	ldw	r3,-12(fp)
  11b114:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  11b118:	e0bff617 	ldw	r2,-40(fp)
  11b11c:	e0ffff0b 	ldhu	r3,-4(fp)
  11b120:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  11b124:	e0bff617 	ldw	r2,-40(fp)
  11b128:	e0fffe0b 	ldhu	r3,-8(fp)
  11b12c:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  11b130:	e0bff617 	ldw	r2,-40(fp)
  11b134:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  11b138:	e0bffb03 	ldbu	r2,-20(fp)
  11b13c:	1004d0fa 	srli	r2,r2,3
  11b140:	1007883a 	mov	r3,r2
  11b144:	e0bff617 	ldw	r2,-40(fp)
  11b148:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  11b14c:	e0bffb03 	ldbu	r2,-20(fp)
  11b150:	108001cc 	andi	r2,r2,7
  11b154:	1007883a 	mov	r3,r2
  11b158:	e0bff617 	ldw	r2,-40(fp)
  11b15c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  11b160:	e0bff617 	ldw	r2,-40(fp)
  11b164:	10800d03 	ldbu	r2,52(r2)
  11b168:	10803fcc 	andi	r2,r2,255
  11b16c:	00c00044 	movi	r3,1
  11b170:	1884983a 	sll	r2,r3,r2
  11b174:	1007883a 	mov	r3,r2
  11b178:	e0bff617 	ldw	r2,-40(fp)
  11b17c:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  11b180:	e0bff617 	ldw	r2,-40(fp)
  11b184:	10800cc3 	ldbu	r2,51(r2)
  11b188:	10803fcc 	andi	r2,r2,255
  11b18c:	00c00044 	movi	r3,1
  11b190:	1884983a 	sll	r2,r3,r2
  11b194:	1007883a 	mov	r3,r2
  11b198:	e0bff617 	ldw	r2,-40(fp)
  11b19c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  11b1a0:	e0bff617 	ldw	r2,-40(fp)
  11b1a4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  11b1a8:	e0bff617 	ldw	r2,-40(fp)
  11b1ac:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  11b1b0:	e0bff617 	ldw	r2,-40(fp)
  11b1b4:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  11b1b8:	e0bff617 	ldw	r2,-40(fp)
  11b1bc:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  11b1c0:	e0bff617 	ldw	r2,-40(fp)
  11b1c4:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  11b1c8:	e0bff617 	ldw	r2,-40(fp)
  11b1cc:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  11b1d0:	e0bff617 	ldw	r2,-40(fp)
  11b1d4:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  11b1d8:	e0bff617 	ldw	r2,-40(fp)
  11b1dc:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  11b1e0:	e0bff617 	ldw	r2,-40(fp)
  11b1e4:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  11b1e8:	e0bff617 	ldw	r2,-40(fp)
  11b1ec:	00c00fc4 	movi	r3,63
  11b1f0:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  11b1f4:	e0bff617 	ldw	r2,-40(fp)
  11b1f8:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  11b1fc:	e13ff617 	ldw	r4,-40(fp)
  11b200:	01228740 	call	122874 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  11b204:	e13ff617 	ldw	r4,-40(fp)
  11b208:	012276c0 	call	12276c <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11b20c:	0005303a 	rdctl	r2,status
  11b210:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11b214:	e0fff517 	ldw	r3,-44(fp)
  11b218:	00bfff84 	movi	r2,-2
  11b21c:	1884703a 	and	r2,r3,r2
  11b220:	1001703a 	wrctl	status,r2
  
  return context;
  11b224:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  11b228:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
  11b22c:	e0fffb03 	ldbu	r3,-20(fp)
  11b230:	008004f4 	movhi	r2,19
  11b234:	10b94804 	addi	r2,r2,-6880
  11b238:	18c7883a 	add	r3,r3,r3
  11b23c:	18c7883a 	add	r3,r3,r3
  11b240:	10c5883a 	add	r2,r2,r3
  11b244:	e0fff617 	ldw	r3,-40(fp)
  11b248:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  11b24c:	d0e73c17 	ldw	r3,-25360(gp)
  11b250:	e0bff617 	ldw	r2,-40(fp)
  11b254:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  11b258:	e0bff617 	ldw	r2,-40(fp)
  11b25c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  11b260:	d0a73c17 	ldw	r2,-25360(gp)
  11b264:	10000326 	beq	r2,zero,11b274 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
  11b268:	d0a73c17 	ldw	r2,-25360(gp)
  11b26c:	e0fff617 	ldw	r3,-40(fp)
  11b270:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
  11b274:	e0bff617 	ldw	r2,-40(fp)
  11b278:	d0a73c15 	stw	r2,-25360(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  11b27c:	e0bff617 	ldw	r2,-40(fp)
  11b280:	10c00d83 	ldbu	r3,54(r2)
  11b284:	d0a74503 	ldbu	r2,-25324(gp)
  11b288:	1884b03a 	or	r2,r3,r2
  11b28c:	d0a74505 	stb	r2,-25324(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  11b290:	e0bff617 	ldw	r2,-40(fp)
  11b294:	10800d03 	ldbu	r2,52(r2)
  11b298:	10c03fcc 	andi	r3,r2,255
  11b29c:	e0bff617 	ldw	r2,-40(fp)
  11b2a0:	10800d03 	ldbu	r2,52(r2)
  11b2a4:	11003fcc 	andi	r4,r2,255
  11b2a8:	d0a74544 	addi	r2,gp,-25323
  11b2ac:	2085883a 	add	r2,r4,r2
  11b2b0:	11000003 	ldbu	r4,0(r2)
  11b2b4:	e0bff617 	ldw	r2,-40(fp)
  11b2b8:	10800d43 	ldbu	r2,53(r2)
  11b2bc:	2084b03a 	or	r2,r4,r2
  11b2c0:	1009883a 	mov	r4,r2
  11b2c4:	d0a74544 	addi	r2,gp,-25323
  11b2c8:	1885883a 	add	r2,r3,r2
  11b2cc:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  11b2d0:	d0a74143 	ldbu	r2,-25339(gp)
  11b2d4:	10800044 	addi	r2,r2,1
  11b2d8:	d0a74145 	stb	r2,-25339(gp)
  11b2dc:	e0bff417 	ldw	r2,-48(fp)
  11b2e0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11b2e4:	e0bff717 	ldw	r2,-36(fp)
  11b2e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  11b2ec:	0005883a 	mov	r2,zero
  11b2f0:	00000506 	br	11b308 <OS_TCBInit+0x2c0>
  11b2f4:	e0bff417 	ldw	r2,-48(fp)
  11b2f8:	e0bff915 	stw	r2,-28(fp)
  11b2fc:	e0bff917 	ldw	r2,-28(fp)
  11b300:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  11b304:	00801084 	movi	r2,66
}
  11b308:	e037883a 	mov	sp,fp
  11b30c:	dfc00117 	ldw	ra,4(sp)
  11b310:	df000017 	ldw	fp,0(sp)
  11b314:	dec00204 	addi	sp,sp,8
  11b318:	f800283a 	ret

0011b31c <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  11b31c:	defffe04 	addi	sp,sp,-8
  11b320:	df000115 	stw	fp,4(sp)
  11b324:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  11b328:	d0a01104 	addi	r2,gp,-32700
  11b32c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  11b330:	d0a01204 	addi	r2,gp,-32696
  11b334:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  11b338:	d0a01384 	addi	r2,gp,-32690
  11b33c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  11b340:	d0a01404 	addi	r2,gp,-32688
  11b344:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  11b348:	d0a01304 	addi	r2,gp,-32692
  11b34c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  11b350:	d0a01484 	addi	r2,gp,-32686
  11b354:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  11b358:	d0a01504 	addi	r2,gp,-32684
  11b35c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  11b360:	d0a01584 	addi	r2,gp,-32682
  11b364:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  11b368:	d0a01604 	addi	r2,gp,-32680
  11b36c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  11b370:	d0a01684 	addi	r2,gp,-32678
  11b374:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  11b378:	d0a01704 	addi	r2,gp,-32676
  11b37c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  11b380:	d0a01784 	addi	r2,gp,-32674
  11b384:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  11b388:	d0a01804 	addi	r2,gp,-32672
  11b38c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  11b390:	d0a01884 	addi	r2,gp,-32670
  11b394:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  11b398:	d0a01904 	addi	r2,gp,-32668
  11b39c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  11b3a0:	d0a01984 	addi	r2,gp,-32666
  11b3a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  11b3a8:	d0a01a04 	addi	r2,gp,-32664
  11b3ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  11b3b0:	d0a01a84 	addi	r2,gp,-32662
  11b3b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  11b3b8:	d0a01b04 	addi	r2,gp,-32660
  11b3bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  11b3c0:	d0a01b84 	addi	r2,gp,-32658
  11b3c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  11b3c8:	d0a01c04 	addi	r2,gp,-32656
  11b3cc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  11b3d0:	d0a01c84 	addi	r2,gp,-32654
  11b3d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  11b3d8:	d0a01d04 	addi	r2,gp,-32652
  11b3dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  11b3e0:	d0a01d84 	addi	r2,gp,-32650
  11b3e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  11b3e8:	d0a01e04 	addi	r2,gp,-32648
  11b3ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  11b3f0:	d0a01e84 	addi	r2,gp,-32646
  11b3f4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  11b3f8:	d0a01f04 	addi	r2,gp,-32644
  11b3fc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  11b400:	d0a01f84 	addi	r2,gp,-32642
  11b404:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  11b408:	d0a02004 	addi	r2,gp,-32640
  11b40c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  11b410:	d0a02084 	addi	r2,gp,-32638
  11b414:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  11b418:	d0a02104 	addi	r2,gp,-32636
  11b41c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  11b420:	d0a02184 	addi	r2,gp,-32634
  11b424:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  11b428:	d0a02204 	addi	r2,gp,-32632
  11b42c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  11b430:	d0a02284 	addi	r2,gp,-32630
  11b434:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  11b438:	d0a02304 	addi	r2,gp,-32628
  11b43c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  11b440:	d0a02384 	addi	r2,gp,-32626
  11b444:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  11b448:	d0a02404 	addi	r2,gp,-32624
  11b44c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  11b450:	d0a02484 	addi	r2,gp,-32622
  11b454:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  11b458:	d0a02504 	addi	r2,gp,-32620
  11b45c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  11b460:	d0a02584 	addi	r2,gp,-32618
  11b464:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  11b468:	d0a02604 	addi	r2,gp,-32616
  11b46c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  11b470:	d0a02684 	addi	r2,gp,-32614
  11b474:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  11b478:	d0a02704 	addi	r2,gp,-32612
  11b47c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  11b480:	d0a02784 	addi	r2,gp,-32610
  11b484:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  11b488:	d0a02804 	addi	r2,gp,-32608
  11b48c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  11b490:	d0a02d04 	addi	r2,gp,-32588
  11b494:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  11b498:	0001883a 	nop
  11b49c:	e037883a 	mov	sp,fp
  11b4a0:	df000017 	ldw	fp,0(sp)
  11b4a4:	dec00104 	addi	sp,sp,4
  11b4a8:	f800283a 	ret

0011b4ac <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  11b4ac:	defff204 	addi	sp,sp,-56
  11b4b0:	df000d15 	stw	fp,52(sp)
  11b4b4:	df000d04 	addi	fp,sp,52
  11b4b8:	e13ffc15 	stw	r4,-16(fp)
  11b4bc:	2807883a 	mov	r3,r5
  11b4c0:	3005883a 	mov	r2,r6
  11b4c4:	e1ffff15 	stw	r7,-4(fp)
  11b4c8:	e0fffd0d 	sth	r3,-12(fp)
  11b4cc:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  11b4d0:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  11b4d4:	e0bfff17 	ldw	r2,-4(fp)
  11b4d8:	1000021e 	bne	r2,zero,11b4e4 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
  11b4dc:	0005883a 	mov	r2,zero
  11b4e0:	0000b006 	br	11b7a4 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  11b4e4:	e0bffc17 	ldw	r2,-16(fp)
  11b4e8:	1000051e 	bne	r2,zero,11b500 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  11b4ec:	e0bfff17 	ldw	r2,-4(fp)
  11b4f0:	00c01b84 	movi	r3,110
  11b4f4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  11b4f8:	0005883a 	mov	r2,zero
  11b4fc:	0000a906 	br	11b7a4 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  11b500:	e0bffc17 	ldw	r2,-16(fp)
  11b504:	10800003 	ldbu	r2,0(r2)
  11b508:	10803fcc 	andi	r2,r2,255
  11b50c:	10800160 	cmpeqi	r2,r2,5
  11b510:	1000051e 	bne	r2,zero,11b528 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  11b514:	e0bfff17 	ldw	r2,-4(fp)
  11b518:	00c00044 	movi	r3,1
  11b51c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  11b520:	0005883a 	mov	r2,zero
  11b524:	00009f06 	br	11b7a4 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  11b528:	e0fffe03 	ldbu	r3,-8(fp)
  11b52c:	00bfe004 	movi	r2,-128
  11b530:	1884703a 	and	r2,r3,r2
  11b534:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  11b538:	e0bff503 	ldbu	r2,-44(fp)
  11b53c:	10000626 	beq	r2,zero,11b558 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
  11b540:	e0bffe03 	ldbu	r2,-8(fp)
  11b544:	10801fcc 	andi	r2,r2,127
  11b548:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
  11b54c:	00800044 	movi	r2,1
  11b550:	e0bff385 	stb	r2,-50(fp)
  11b554:	00000106 	br	11b55c <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
  11b558:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  11b55c:	e0bfff17 	ldw	r2,-4(fp)
  11b560:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11b564:	0005303a 	rdctl	r2,status
  11b568:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11b56c:	e0fffb17 	ldw	r3,-20(fp)
  11b570:	00bfff84 	movi	r2,-2
  11b574:	1884703a 	and	r2,r3,r2
  11b578:	1001703a 	wrctl	status,r2
  
  return context;
  11b57c:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
  11b580:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
  11b584:	e0bffe03 	ldbu	r2,-8(fp)
  11b588:	10c00060 	cmpeqi	r3,r2,1
  11b58c:	18005f1e 	bne	r3,zero,11b70c <OSFlagAccept+0x260>
  11b590:	10c00088 	cmpgei	r3,r2,2
  11b594:	1800021e 	bne	r3,zero,11b5a0 <OSFlagAccept+0xf4>
  11b598:	10003f26 	beq	r2,zero,11b698 <OSFlagAccept+0x1ec>
  11b59c:	00007706 	br	11b77c <OSFlagAccept+0x2d0>
  11b5a0:	10c000a0 	cmpeqi	r3,r2,2
  11b5a4:	1800031e 	bne	r3,zero,11b5b4 <OSFlagAccept+0x108>
  11b5a8:	108000e0 	cmpeqi	r2,r2,3
  11b5ac:	10001e1e 	bne	r2,zero,11b628 <OSFlagAccept+0x17c>
  11b5b0:	00007206 	br	11b77c <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  11b5b4:	e0bffc17 	ldw	r2,-16(fp)
  11b5b8:	10c0020b 	ldhu	r3,8(r2)
  11b5bc:	e0bffd0b 	ldhu	r2,-12(fp)
  11b5c0:	1884703a 	and	r2,r3,r2
  11b5c4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  11b5c8:	e0fff30b 	ldhu	r3,-52(fp)
  11b5cc:	e0bffd0b 	ldhu	r2,-12(fp)
  11b5d0:	18800d1e 	bne	r3,r2,11b608 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  11b5d4:	e0bff383 	ldbu	r2,-50(fp)
  11b5d8:	10800058 	cmpnei	r2,r2,1
  11b5dc:	10000d1e 	bne	r2,zero,11b614 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  11b5e0:	e0bffc17 	ldw	r2,-16(fp)
  11b5e4:	1080020b 	ldhu	r2,8(r2)
  11b5e8:	1007883a 	mov	r3,r2
  11b5ec:	e0bff30b 	ldhu	r2,-52(fp)
  11b5f0:	0084303a 	nor	r2,zero,r2
  11b5f4:	1884703a 	and	r2,r3,r2
  11b5f8:	1007883a 	mov	r3,r2
  11b5fc:	e0bffc17 	ldw	r2,-16(fp)
  11b600:	10c0020d 	sth	r3,8(r2)
  11b604:	00000306 	br	11b614 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  11b608:	e0bfff17 	ldw	r2,-4(fp)
  11b60c:	00c01c04 	movi	r3,112
  11b610:	10c00005 	stb	r3,0(r2)
  11b614:	e0bff417 	ldw	r2,-48(fp)
  11b618:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11b61c:	e0bff617 	ldw	r2,-40(fp)
  11b620:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  11b624:	00005e06 	br	11b7a0 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  11b628:	e0bffc17 	ldw	r2,-16(fp)
  11b62c:	10c0020b 	ldhu	r3,8(r2)
  11b630:	e0bffd0b 	ldhu	r2,-12(fp)
  11b634:	1884703a 	and	r2,r3,r2
  11b638:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  11b63c:	e0bff30b 	ldhu	r2,-52(fp)
  11b640:	10000d26 	beq	r2,zero,11b678 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  11b644:	e0bff383 	ldbu	r2,-50(fp)
  11b648:	10800058 	cmpnei	r2,r2,1
  11b64c:	10000d1e 	bne	r2,zero,11b684 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  11b650:	e0bffc17 	ldw	r2,-16(fp)
  11b654:	1080020b 	ldhu	r2,8(r2)
  11b658:	1007883a 	mov	r3,r2
  11b65c:	e0bff30b 	ldhu	r2,-52(fp)
  11b660:	0084303a 	nor	r2,zero,r2
  11b664:	1884703a 	and	r2,r3,r2
  11b668:	1007883a 	mov	r3,r2
  11b66c:	e0bffc17 	ldw	r2,-16(fp)
  11b670:	10c0020d 	sth	r3,8(r2)
  11b674:	00000306 	br	11b684 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  11b678:	e0bfff17 	ldw	r2,-4(fp)
  11b67c:	00c01c04 	movi	r3,112
  11b680:	10c00005 	stb	r3,0(r2)
  11b684:	e0bff417 	ldw	r2,-48(fp)
  11b688:	e0bff715 	stw	r2,-36(fp)
  11b68c:	e0bff717 	ldw	r2,-36(fp)
  11b690:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  11b694:	00004206 	br	11b7a0 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  11b698:	e0bffc17 	ldw	r2,-16(fp)
  11b69c:	1080020b 	ldhu	r2,8(r2)
  11b6a0:	0084303a 	nor	r2,zero,r2
  11b6a4:	1007883a 	mov	r3,r2
  11b6a8:	e0bffd0b 	ldhu	r2,-12(fp)
  11b6ac:	1884703a 	and	r2,r3,r2
  11b6b0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  11b6b4:	e0fff30b 	ldhu	r3,-52(fp)
  11b6b8:	e0bffd0b 	ldhu	r2,-12(fp)
  11b6bc:	18800b1e 	bne	r3,r2,11b6ec <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  11b6c0:	e0bff383 	ldbu	r2,-50(fp)
  11b6c4:	10800058 	cmpnei	r2,r2,1
  11b6c8:	10000b1e 	bne	r2,zero,11b6f8 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  11b6cc:	e0bffc17 	ldw	r2,-16(fp)
  11b6d0:	10c0020b 	ldhu	r3,8(r2)
  11b6d4:	e0bff30b 	ldhu	r2,-52(fp)
  11b6d8:	1884b03a 	or	r2,r3,r2
  11b6dc:	1007883a 	mov	r3,r2
  11b6e0:	e0bffc17 	ldw	r2,-16(fp)
  11b6e4:	10c0020d 	sth	r3,8(r2)
  11b6e8:	00000306 	br	11b6f8 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  11b6ec:	e0bfff17 	ldw	r2,-4(fp)
  11b6f0:	00c01c04 	movi	r3,112
  11b6f4:	10c00005 	stb	r3,0(r2)
  11b6f8:	e0bff417 	ldw	r2,-48(fp)
  11b6fc:	e0bff815 	stw	r2,-32(fp)
  11b700:	e0bff817 	ldw	r2,-32(fp)
  11b704:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  11b708:	00002506 	br	11b7a0 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  11b70c:	e0bffc17 	ldw	r2,-16(fp)
  11b710:	1080020b 	ldhu	r2,8(r2)
  11b714:	0084303a 	nor	r2,zero,r2
  11b718:	1007883a 	mov	r3,r2
  11b71c:	e0bffd0b 	ldhu	r2,-12(fp)
  11b720:	1884703a 	and	r2,r3,r2
  11b724:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  11b728:	e0bff30b 	ldhu	r2,-52(fp)
  11b72c:	10000b26 	beq	r2,zero,11b75c <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  11b730:	e0bff383 	ldbu	r2,-50(fp)
  11b734:	10800058 	cmpnei	r2,r2,1
  11b738:	10000b1e 	bne	r2,zero,11b768 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  11b73c:	e0bffc17 	ldw	r2,-16(fp)
  11b740:	10c0020b 	ldhu	r3,8(r2)
  11b744:	e0bff30b 	ldhu	r2,-52(fp)
  11b748:	1884b03a 	or	r2,r3,r2
  11b74c:	1007883a 	mov	r3,r2
  11b750:	e0bffc17 	ldw	r2,-16(fp)
  11b754:	10c0020d 	sth	r3,8(r2)
  11b758:	00000306 	br	11b768 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  11b75c:	e0bfff17 	ldw	r2,-4(fp)
  11b760:	00c01c04 	movi	r3,112
  11b764:	10c00005 	stb	r3,0(r2)
  11b768:	e0bff417 	ldw	r2,-48(fp)
  11b76c:	e0bff915 	stw	r2,-28(fp)
  11b770:	e0bff917 	ldw	r2,-28(fp)
  11b774:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  11b778:	00000906 	br	11b7a0 <OSFlagAccept+0x2f4>
  11b77c:	e0bff417 	ldw	r2,-48(fp)
  11b780:	e0bffa15 	stw	r2,-24(fp)
  11b784:	e0bffa17 	ldw	r2,-24(fp)
  11b788:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  11b78c:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  11b790:	e0bfff17 	ldw	r2,-4(fp)
  11b794:	00c01bc4 	movi	r3,111
  11b798:	10c00005 	stb	r3,0(r2)
             break;
  11b79c:	0001883a 	nop
    }
    return (flags_rdy);
  11b7a0:	e0bff30b 	ldhu	r2,-52(fp)
}
  11b7a4:	e037883a 	mov	sp,fp
  11b7a8:	df000017 	ldw	fp,0(sp)
  11b7ac:	dec00104 	addi	sp,sp,4
  11b7b0:	f800283a 	ret

0011b7b4 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  11b7b4:	defff804 	addi	sp,sp,-32
  11b7b8:	df000715 	stw	fp,28(sp)
  11b7bc:	df000704 	addi	fp,sp,28
  11b7c0:	2005883a 	mov	r2,r4
  11b7c4:	e17fff15 	stw	r5,-4(fp)
  11b7c8:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  11b7cc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  11b7d0:	e0bfff17 	ldw	r2,-4(fp)
  11b7d4:	1000021e 	bne	r2,zero,11b7e0 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  11b7d8:	0005883a 	mov	r2,zero
  11b7dc:	00003306 	br	11b8ac <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  11b7e0:	d0a74703 	ldbu	r2,-25316(gp)
  11b7e4:	10803fcc 	andi	r2,r2,255
  11b7e8:	10000526 	beq	r2,zero,11b800 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  11b7ec:	e0bfff17 	ldw	r2,-4(fp)
  11b7f0:	00c00404 	movi	r3,16
  11b7f4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
  11b7f8:	0005883a 	mov	r2,zero
  11b7fc:	00002b06 	br	11b8ac <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11b800:	0005303a 	rdctl	r2,status
  11b804:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11b808:	e0fffd17 	ldw	r3,-12(fp)
  11b80c:	00bfff84 	movi	r2,-2
  11b810:	1884703a 	and	r2,r3,r2
  11b814:	1001703a 	wrctl	status,r2
  
  return context;
  11b818:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  11b81c:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  11b820:	d0a74a17 	ldw	r2,-25304(gp)
  11b824:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  11b828:	e0bffb17 	ldw	r2,-20(fp)
  11b82c:	10001726 	beq	r2,zero,11b88c <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  11b830:	d0a74a17 	ldw	r2,-25304(gp)
  11b834:	10800117 	ldw	r2,4(r2)
  11b838:	d0a74a15 	stw	r2,-25304(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  11b83c:	e0bffb17 	ldw	r2,-20(fp)
  11b840:	00c00144 	movi	r3,5
  11b844:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  11b848:	e0bffb17 	ldw	r2,-20(fp)
  11b84c:	e0fffe0b 	ldhu	r3,-8(fp)
  11b850:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  11b854:	e0bffb17 	ldw	r2,-20(fp)
  11b858:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  11b85c:	e0bffb17 	ldw	r2,-20(fp)
  11b860:	00c00fc4 	movi	r3,63
  11b864:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  11b868:	e0bffb17 	ldw	r2,-20(fp)
  11b86c:	100002c5 	stb	zero,11(r2)
  11b870:	e0bff917 	ldw	r2,-28(fp)
  11b874:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11b878:	e0bffa17 	ldw	r2,-24(fp)
  11b87c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  11b880:	e0bfff17 	ldw	r2,-4(fp)
  11b884:	10000005 	stb	zero,0(r2)
  11b888:	00000706 	br	11b8a8 <OSFlagCreate+0xf4>
  11b88c:	e0bff917 	ldw	r2,-28(fp)
  11b890:	e0bffc15 	stw	r2,-16(fp)
  11b894:	e0bffc17 	ldw	r2,-16(fp)
  11b898:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  11b89c:	e0bfff17 	ldw	r2,-4(fp)
  11b8a0:	00c01c84 	movi	r3,114
  11b8a4:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  11b8a8:	e0bffb17 	ldw	r2,-20(fp)
}
  11b8ac:	e037883a 	mov	sp,fp
  11b8b0:	df000017 	ldw	fp,0(sp)
  11b8b4:	dec00104 	addi	sp,sp,4
  11b8b8:	f800283a 	ret

0011b8bc <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  11b8bc:	defff204 	addi	sp,sp,-56
  11b8c0:	dfc00d15 	stw	ra,52(sp)
  11b8c4:	df000c15 	stw	fp,48(sp)
  11b8c8:	df000c04 	addi	fp,sp,48
  11b8cc:	e13ffd15 	stw	r4,-12(fp)
  11b8d0:	2805883a 	mov	r2,r5
  11b8d4:	e1bfff15 	stw	r6,-4(fp)
  11b8d8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  11b8dc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  11b8e0:	e0bfff17 	ldw	r2,-4(fp)
  11b8e4:	1000021e 	bne	r2,zero,11b8f0 <OSFlagDel+0x34>
        return (pgrp);
  11b8e8:	e0bffd17 	ldw	r2,-12(fp)
  11b8ec:	00008006 	br	11baf0 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  11b8f0:	e0bffd17 	ldw	r2,-12(fp)
  11b8f4:	1000051e 	bne	r2,zero,11b90c <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  11b8f8:	e0bfff17 	ldw	r2,-4(fp)
  11b8fc:	00c01b84 	movi	r3,110
  11b900:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  11b904:	e0bffd17 	ldw	r2,-12(fp)
  11b908:	00007906 	br	11baf0 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  11b90c:	d0a74703 	ldbu	r2,-25316(gp)
  11b910:	10803fcc 	andi	r2,r2,255
  11b914:	10000526 	beq	r2,zero,11b92c <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  11b918:	e0bfff17 	ldw	r2,-4(fp)
  11b91c:	00c003c4 	movi	r3,15
  11b920:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  11b924:	e0bffd17 	ldw	r2,-12(fp)
  11b928:	00007106 	br	11baf0 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  11b92c:	e0bffd17 	ldw	r2,-12(fp)
  11b930:	10800003 	ldbu	r2,0(r2)
  11b934:	10803fcc 	andi	r2,r2,255
  11b938:	10800160 	cmpeqi	r2,r2,5
  11b93c:	1000051e 	bne	r2,zero,11b954 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
  11b940:	e0bfff17 	ldw	r2,-4(fp)
  11b944:	00c00044 	movi	r3,1
  11b948:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  11b94c:	e0bffd17 	ldw	r2,-12(fp)
  11b950:	00006706 	br	11baf0 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11b954:	0005303a 	rdctl	r2,status
  11b958:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11b95c:	e0fffc17 	ldw	r3,-16(fp)
  11b960:	00bfff84 	movi	r2,-2
  11b964:	1884703a 	and	r2,r3,r2
  11b968:	1001703a 	wrctl	status,r2
  
  return context;
  11b96c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  11b970:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  11b974:	e0bffd17 	ldw	r2,-12(fp)
  11b978:	10800117 	ldw	r2,4(r2)
  11b97c:	10000326 	beq	r2,zero,11b98c <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  11b980:	00800044 	movi	r2,1
  11b984:	e0bff405 	stb	r2,-48(fp)
  11b988:	00000106 	br	11b990 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  11b98c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
  11b990:	e0bffe03 	ldbu	r2,-8(fp)
  11b994:	10000326 	beq	r2,zero,11b9a4 <OSFlagDel+0xe8>
  11b998:	10800060 	cmpeqi	r2,r2,1
  11b99c:	1000231e 	bne	r2,zero,11ba2c <OSFlagDel+0x170>
  11b9a0:	00004806 	br	11bac4 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  11b9a4:	e0bff403 	ldbu	r2,-48(fp)
  11b9a8:	1000161e 	bne	r2,zero,11ba04 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  11b9ac:	e0bffd17 	ldw	r2,-12(fp)
  11b9b0:	00c00fc4 	movi	r3,63
  11b9b4:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  11b9b8:	e0bffd17 	ldw	r2,-12(fp)
  11b9bc:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  11b9c0:	e0bffd17 	ldw	r2,-12(fp)
  11b9c4:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  11b9c8:	d0e74a17 	ldw	r3,-25304(gp)
  11b9cc:	e0bffd17 	ldw	r2,-12(fp)
  11b9d0:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  11b9d4:	e0bffd17 	ldw	r2,-12(fp)
  11b9d8:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  11b9dc:	e0bffd17 	ldw	r2,-12(fp)
  11b9e0:	d0a74a15 	stw	r2,-25304(gp)
  11b9e4:	e0bff717 	ldw	r2,-36(fp)
  11b9e8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11b9ec:	e0bff817 	ldw	r2,-32(fp)
  11b9f0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  11b9f4:	e0bfff17 	ldw	r2,-4(fp)
  11b9f8:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  11b9fc:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
  11ba00:	00003a06 	br	11baec <OSFlagDel+0x230>
  11ba04:	e0bff717 	ldw	r2,-36(fp)
  11ba08:	e0bff915 	stw	r2,-28(fp)
  11ba0c:	e0bff917 	ldw	r2,-28(fp)
  11ba10:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  11ba14:	e0bfff17 	ldw	r2,-4(fp)
  11ba18:	00c01244 	movi	r3,73
  11ba1c:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
  11ba20:	e0bffd17 	ldw	r2,-12(fp)
  11ba24:	e0bff615 	stw	r2,-40(fp)
             }
             break;
  11ba28:	00003006 	br	11baec <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  11ba2c:	e0bffd17 	ldw	r2,-12(fp)
  11ba30:	10800117 	ldw	r2,4(r2)
  11ba34:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  11ba38:	00000606 	br	11ba54 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  11ba3c:	000b883a 	mov	r5,zero
  11ba40:	e13ff517 	ldw	r4,-44(fp)
  11ba44:	011ca280 	call	11ca28 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  11ba48:	e0bff517 	ldw	r2,-44(fp)
  11ba4c:	10800017 	ldw	r2,0(r2)
  11ba50:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  11ba54:	e0bff517 	ldw	r2,-44(fp)
  11ba58:	103ff81e 	bne	r2,zero,11ba3c <__alt_data_end+0xfffdba3c>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  11ba5c:	e0bffd17 	ldw	r2,-12(fp)
  11ba60:	00c00fc4 	movi	r3,63
  11ba64:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  11ba68:	e0bffd17 	ldw	r2,-12(fp)
  11ba6c:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  11ba70:	e0bffd17 	ldw	r2,-12(fp)
  11ba74:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  11ba78:	d0e74a17 	ldw	r3,-25304(gp)
  11ba7c:	e0bffd17 	ldw	r2,-12(fp)
  11ba80:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  11ba84:	e0bffd17 	ldw	r2,-12(fp)
  11ba88:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  11ba8c:	e0bffd17 	ldw	r2,-12(fp)
  11ba90:	d0a74a15 	stw	r2,-25304(gp)
  11ba94:	e0bff717 	ldw	r2,-36(fp)
  11ba98:	e0bffa15 	stw	r2,-24(fp)
  11ba9c:	e0bffa17 	ldw	r2,-24(fp)
  11baa0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  11baa4:	e0bff403 	ldbu	r2,-48(fp)
  11baa8:	10800058 	cmpnei	r2,r2,1
  11baac:	1000011e 	bne	r2,zero,11bab4 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  11bab0:	011ac480 	call	11ac48 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  11bab4:	e0bfff17 	ldw	r2,-4(fp)
  11bab8:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  11babc:	e03ff615 	stw	zero,-40(fp)
             break;
  11bac0:	00000a06 	br	11baec <OSFlagDel+0x230>
  11bac4:	e0bff717 	ldw	r2,-36(fp)
  11bac8:	e0bffb15 	stw	r2,-20(fp)
  11bacc:	e0bffb17 	ldw	r2,-20(fp)
  11bad0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  11bad4:	e0bfff17 	ldw	r2,-4(fp)
  11bad8:	00c001c4 	movi	r3,7
  11badc:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
  11bae0:	e0bffd17 	ldw	r2,-12(fp)
  11bae4:	e0bff615 	stw	r2,-40(fp)
             break;
  11bae8:	0001883a 	nop
    }
    return (pgrp_return);
  11baec:	e0bff617 	ldw	r2,-40(fp)
}
  11baf0:	e037883a 	mov	sp,fp
  11baf4:	dfc00117 	ldw	ra,4(sp)
  11baf8:	df000017 	ldw	fp,0(sp)
  11bafc:	dec00204 	addi	sp,sp,8
  11bb00:	f800283a 	ret

0011bb04 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  11bb04:	defff604 	addi	sp,sp,-40
  11bb08:	dfc00915 	stw	ra,36(sp)
  11bb0c:	df000815 	stw	fp,32(sp)
  11bb10:	df000804 	addi	fp,sp,32
  11bb14:	e13ffd15 	stw	r4,-12(fp)
  11bb18:	e17ffe15 	stw	r5,-8(fp)
  11bb1c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  11bb20:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  11bb24:	e0bfff17 	ldw	r2,-4(fp)
  11bb28:	1000021e 	bne	r2,zero,11bb34 <OSFlagNameGet+0x30>
        return (0);
  11bb2c:	0005883a 	mov	r2,zero
  11bb30:	00003906 	br	11bc18 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  11bb34:	e0bffd17 	ldw	r2,-12(fp)
  11bb38:	1000051e 	bne	r2,zero,11bb50 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  11bb3c:	e0bfff17 	ldw	r2,-4(fp)
  11bb40:	00c01b84 	movi	r3,110
  11bb44:	10c00005 	stb	r3,0(r2)
        return (0);
  11bb48:	0005883a 	mov	r2,zero
  11bb4c:	00003206 	br	11bc18 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  11bb50:	e0bffe17 	ldw	r2,-8(fp)
  11bb54:	1000051e 	bne	r2,zero,11bb6c <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  11bb58:	e0bfff17 	ldw	r2,-4(fp)
  11bb5c:	00c00304 	movi	r3,12
  11bb60:	10c00005 	stb	r3,0(r2)
        return (0);
  11bb64:	0005883a 	mov	r2,zero
  11bb68:	00002b06 	br	11bc18 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  11bb6c:	d0a74703 	ldbu	r2,-25316(gp)
  11bb70:	10803fcc 	andi	r2,r2,255
  11bb74:	10000526 	beq	r2,zero,11bb8c <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
  11bb78:	e0bfff17 	ldw	r2,-4(fp)
  11bb7c:	00c00444 	movi	r3,17
  11bb80:	10c00005 	stb	r3,0(r2)
        return (0);
  11bb84:	0005883a 	mov	r2,zero
  11bb88:	00002306 	br	11bc18 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11bb8c:	0005303a 	rdctl	r2,status
  11bb90:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11bb94:	e0fffc17 	ldw	r3,-16(fp)
  11bb98:	00bfff84 	movi	r2,-2
  11bb9c:	1884703a 	and	r2,r3,r2
  11bba0:	1001703a 	wrctl	status,r2
  
  return context;
  11bba4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  11bba8:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  11bbac:	e0bffd17 	ldw	r2,-12(fp)
  11bbb0:	10800003 	ldbu	r2,0(r2)
  11bbb4:	10803fcc 	andi	r2,r2,255
  11bbb8:	10800160 	cmpeqi	r2,r2,5
  11bbbc:	1000091e 	bne	r2,zero,11bbe4 <OSFlagNameGet+0xe0>
  11bbc0:	e0bff817 	ldw	r2,-32(fp)
  11bbc4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11bbc8:	e0bff917 	ldw	r2,-28(fp)
  11bbcc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  11bbd0:	e0bfff17 	ldw	r2,-4(fp)
  11bbd4:	00c00044 	movi	r3,1
  11bbd8:	10c00005 	stb	r3,0(r2)
        return (0);
  11bbdc:	0005883a 	mov	r2,zero
  11bbe0:	00000d06 	br	11bc18 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  11bbe4:	e0bffd17 	ldw	r2,-12(fp)
  11bbe8:	10800284 	addi	r2,r2,10
  11bbec:	100b883a 	mov	r5,r2
  11bbf0:	e13ffe17 	ldw	r4,-8(fp)
  11bbf4:	011ad8c0 	call	11ad8c <OS_StrCopy>
  11bbf8:	e0bffb05 	stb	r2,-20(fp)
  11bbfc:	e0bff817 	ldw	r2,-32(fp)
  11bc00:	e0bffa15 	stw	r2,-24(fp)
  11bc04:	e0bffa17 	ldw	r2,-24(fp)
  11bc08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  11bc0c:	e0bfff17 	ldw	r2,-4(fp)
  11bc10:	10000005 	stb	zero,0(r2)
    return (len);
  11bc14:	e0bffb03 	ldbu	r2,-20(fp)
}
  11bc18:	e037883a 	mov	sp,fp
  11bc1c:	dfc00117 	ldw	ra,4(sp)
  11bc20:	df000017 	ldw	fp,0(sp)
  11bc24:	dec00204 	addi	sp,sp,8
  11bc28:	f800283a 	ret

0011bc2c <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  11bc2c:	defff504 	addi	sp,sp,-44
  11bc30:	dfc00a15 	stw	ra,40(sp)
  11bc34:	df000915 	stw	fp,36(sp)
  11bc38:	df000904 	addi	fp,sp,36
  11bc3c:	e13ffd15 	stw	r4,-12(fp)
  11bc40:	e17ffe15 	stw	r5,-8(fp)
  11bc44:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  11bc48:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  11bc4c:	e0bfff17 	ldw	r2,-4(fp)
  11bc50:	10004326 	beq	r2,zero,11bd60 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  11bc54:	e0bffd17 	ldw	r2,-12(fp)
  11bc58:	1000041e 	bne	r2,zero,11bc6c <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  11bc5c:	e0bfff17 	ldw	r2,-4(fp)
  11bc60:	00c01b84 	movi	r3,110
  11bc64:	10c00005 	stb	r3,0(r2)
        return;
  11bc68:	00003e06 	br	11bd64 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  11bc6c:	e0bffe17 	ldw	r2,-8(fp)
  11bc70:	1000041e 	bne	r2,zero,11bc84 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  11bc74:	e0bfff17 	ldw	r2,-4(fp)
  11bc78:	00c00304 	movi	r3,12
  11bc7c:	10c00005 	stb	r3,0(r2)
        return;
  11bc80:	00003806 	br	11bd64 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  11bc84:	d0a74703 	ldbu	r2,-25316(gp)
  11bc88:	10803fcc 	andi	r2,r2,255
  11bc8c:	10000426 	beq	r2,zero,11bca0 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  11bc90:	e0bfff17 	ldw	r2,-4(fp)
  11bc94:	00c00484 	movi	r3,18
  11bc98:	10c00005 	stb	r3,0(r2)
        return;
  11bc9c:	00003106 	br	11bd64 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11bca0:	0005303a 	rdctl	r2,status
  11bca4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11bca8:	e0fffc17 	ldw	r3,-16(fp)
  11bcac:	00bfff84 	movi	r2,-2
  11bcb0:	1884703a 	and	r2,r3,r2
  11bcb4:	1001703a 	wrctl	status,r2
  
  return context;
  11bcb8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  11bcbc:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  11bcc0:	e0bffd17 	ldw	r2,-12(fp)
  11bcc4:	10800003 	ldbu	r2,0(r2)
  11bcc8:	10803fcc 	andi	r2,r2,255
  11bccc:	10800160 	cmpeqi	r2,r2,5
  11bcd0:	1000081e 	bne	r2,zero,11bcf4 <OSFlagNameSet+0xc8>
  11bcd4:	e0bff717 	ldw	r2,-36(fp)
  11bcd8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11bcdc:	e0bff817 	ldw	r2,-32(fp)
  11bce0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  11bce4:	e0bfff17 	ldw	r2,-4(fp)
  11bce8:	00c00044 	movi	r3,1
  11bcec:	10c00005 	stb	r3,0(r2)
        return;
  11bcf0:	00001c06 	br	11bd64 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  11bcf4:	e13ffe17 	ldw	r4,-8(fp)
  11bcf8:	011ae000 	call	11ae00 <OS_StrLen>
  11bcfc:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  11bd00:	e0bffa03 	ldbu	r2,-24(fp)
  11bd04:	10800830 	cmpltui	r2,r2,32
  11bd08:	1000081e 	bne	r2,zero,11bd2c <OSFlagNameSet+0x100>
  11bd0c:	e0bff717 	ldw	r2,-36(fp)
  11bd10:	e0bff915 	stw	r2,-28(fp)
  11bd14:	e0bff917 	ldw	r2,-28(fp)
  11bd18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  11bd1c:	e0bfff17 	ldw	r2,-4(fp)
  11bd20:	00c01cc4 	movi	r3,115
  11bd24:	10c00005 	stb	r3,0(r2)
        return;
  11bd28:	00000e06 	br	11bd64 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  11bd2c:	e0bffd17 	ldw	r2,-12(fp)
  11bd30:	10800284 	addi	r2,r2,10
  11bd34:	e17ffe17 	ldw	r5,-8(fp)
  11bd38:	1009883a 	mov	r4,r2
  11bd3c:	011ad8c0 	call	11ad8c <OS_StrCopy>
  11bd40:	e0bff717 	ldw	r2,-36(fp)
  11bd44:	e0bffb15 	stw	r2,-20(fp)
  11bd48:	e0bffb17 	ldw	r2,-20(fp)
  11bd4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  11bd50:	e0bfff17 	ldw	r2,-4(fp)
  11bd54:	10000005 	stb	zero,0(r2)
    return;
  11bd58:	0001883a 	nop
  11bd5c:	00000106 	br	11bd64 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  11bd60:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
  11bd64:	e037883a 	mov	sp,fp
  11bd68:	dfc00117 	ldw	ra,4(sp)
  11bd6c:	df000017 	ldw	fp,0(sp)
  11bd70:	dec00204 	addi	sp,sp,8
  11bd74:	f800283a 	ret

0011bd78 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  11bd78:	deffe104 	addi	sp,sp,-124
  11bd7c:	dfc01e15 	stw	ra,120(sp)
  11bd80:	df001d15 	stw	fp,116(sp)
  11bd84:	df001d04 	addi	fp,sp,116
  11bd88:	e13ffc15 	stw	r4,-16(fp)
  11bd8c:	2809883a 	mov	r4,r5
  11bd90:	3007883a 	mov	r3,r6
  11bd94:	3805883a 	mov	r2,r7
  11bd98:	e13ffd0d 	sth	r4,-12(fp)
  11bd9c:	e0fffe05 	stb	r3,-8(fp)
  11bda0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  11bda4:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  11bda8:	e0800217 	ldw	r2,8(fp)
  11bdac:	1000021e 	bne	r2,zero,11bdb8 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
  11bdb0:	0005883a 	mov	r2,zero
  11bdb4:	00015906 	br	11c31c <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  11bdb8:	e0bffc17 	ldw	r2,-16(fp)
  11bdbc:	1000051e 	bne	r2,zero,11bdd4 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  11bdc0:	e0800217 	ldw	r2,8(fp)
  11bdc4:	00c01b84 	movi	r3,110
  11bdc8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  11bdcc:	0005883a 	mov	r2,zero
  11bdd0:	00015206 	br	11c31c <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  11bdd4:	d0a74703 	ldbu	r2,-25316(gp)
  11bdd8:	10803fcc 	andi	r2,r2,255
  11bddc:	10000526 	beq	r2,zero,11bdf4 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  11bde0:	e0800217 	ldw	r2,8(fp)
  11bde4:	00c00084 	movi	r3,2
  11bde8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  11bdec:	0005883a 	mov	r2,zero
  11bdf0:	00014a06 	br	11c31c <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  11bdf4:	d0a73903 	ldbu	r2,-25372(gp)
  11bdf8:	10803fcc 	andi	r2,r2,255
  11bdfc:	10000526 	beq	r2,zero,11be14 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  11be00:	e0800217 	ldw	r2,8(fp)
  11be04:	00c00344 	movi	r3,13
  11be08:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  11be0c:	0005883a 	mov	r2,zero
  11be10:	00014206 	br	11c31c <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  11be14:	e0bffc17 	ldw	r2,-16(fp)
  11be18:	10800003 	ldbu	r2,0(r2)
  11be1c:	10803fcc 	andi	r2,r2,255
  11be20:	10800160 	cmpeqi	r2,r2,5
  11be24:	1000051e 	bne	r2,zero,11be3c <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
  11be28:	e0800217 	ldw	r2,8(fp)
  11be2c:	00c00044 	movi	r3,1
  11be30:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  11be34:	0005883a 	mov	r2,zero
  11be38:	00013806 	br	11c31c <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  11be3c:	e0fffe03 	ldbu	r3,-8(fp)
  11be40:	00bfe004 	movi	r2,-128
  11be44:	1884703a 	and	r2,r3,r2
  11be48:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  11be4c:	e0bfe603 	ldbu	r2,-104(fp)
  11be50:	10000626 	beq	r2,zero,11be6c <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  11be54:	e0bffe03 	ldbu	r2,-8(fp)
  11be58:	10801fcc 	andi	r2,r2,127
  11be5c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
  11be60:	00800044 	movi	r2,1
  11be64:	e0bfe405 	stb	r2,-112(fp)
  11be68:	00000106 	br	11be70 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
  11be6c:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11be70:	0005303a 	rdctl	r2,status
  11be74:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11be78:	e0fff617 	ldw	r3,-40(fp)
  11be7c:	00bfff84 	movi	r2,-2
  11be80:	1884703a 	and	r2,r3,r2
  11be84:	1001703a 	wrctl	status,r2
  
  return context;
  11be88:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  11be8c:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
  11be90:	e0bffe03 	ldbu	r2,-8(fp)
  11be94:	10c00060 	cmpeqi	r3,r2,1
  11be98:	1800921e 	bne	r3,zero,11c0e4 <OSFlagPend+0x36c>
  11be9c:	10c00088 	cmpgei	r3,r2,2
  11bea0:	1800021e 	bne	r3,zero,11beac <OSFlagPend+0x134>
  11bea4:	10006126 	beq	r2,zero,11c02c <OSFlagPend+0x2b4>
  11bea8:	0000bb06 	br	11c198 <OSFlagPend+0x420>
  11beac:	10c000a0 	cmpeqi	r3,r2,2
  11beb0:	1800031e 	bne	r3,zero,11bec0 <OSFlagPend+0x148>
  11beb4:	108000e0 	cmpeqi	r2,r2,3
  11beb8:	10002f1e 	bne	r2,zero,11bf78 <OSFlagPend+0x200>
  11bebc:	0000b606 	br	11c198 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  11bec0:	e0bffc17 	ldw	r2,-16(fp)
  11bec4:	10c0020b 	ldhu	r3,8(r2)
  11bec8:	e0bffd0b 	ldhu	r2,-12(fp)
  11becc:	1884703a 	and	r2,r3,r2
  11bed0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  11bed4:	e0ffe80b 	ldhu	r3,-96(fp)
  11bed8:	e0bffd0b 	ldhu	r2,-12(fp)
  11bedc:	1880171e 	bne	r3,r2,11bf3c <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  11bee0:	e0bfe403 	ldbu	r2,-112(fp)
  11bee4:	10800058 	cmpnei	r2,r2,1
  11bee8:	1000091e 	bne	r2,zero,11bf10 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  11beec:	e0bffc17 	ldw	r2,-16(fp)
  11bef0:	1080020b 	ldhu	r2,8(r2)
  11bef4:	1007883a 	mov	r3,r2
  11bef8:	e0bfe80b 	ldhu	r2,-96(fp)
  11befc:	0084303a 	nor	r2,zero,r2
  11bf00:	1884703a 	and	r2,r3,r2
  11bf04:	1007883a 	mov	r3,r2
  11bf08:	e0bffc17 	ldw	r2,-16(fp)
  11bf0c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  11bf10:	d0a74817 	ldw	r2,-25312(gp)
  11bf14:	e0ffe80b 	ldhu	r3,-96(fp)
  11bf18:	10c00b0d 	sth	r3,44(r2)
  11bf1c:	e0bfe517 	ldw	r2,-108(fp)
  11bf20:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11bf24:	e0bfe717 	ldw	r2,-100(fp)
  11bf28:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  11bf2c:	e0800217 	ldw	r2,8(fp)
  11bf30:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  11bf34:	e0bfe80b 	ldhu	r2,-96(fp)
  11bf38:	0000f806 	br	11c31c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  11bf3c:	e13ffd0b 	ldhu	r4,-12(fp)
  11bf40:	e17ffe03 	ldbu	r5,-8(fp)
  11bf44:	e0bfff0b 	ldhu	r2,-4(fp)
  11bf48:	e0fff704 	addi	r3,fp,-36
  11bf4c:	d8800015 	stw	r2,0(sp)
  11bf50:	280f883a 	mov	r7,r5
  11bf54:	200d883a 	mov	r6,r4
  11bf58:	180b883a 	mov	r5,r3
  11bf5c:	e13ffc17 	ldw	r4,-16(fp)
  11bf60:	011c7e80 	call	11c7e8 <OS_FlagBlock>
  11bf64:	e0bfe517 	ldw	r2,-108(fp)
  11bf68:	e0bfe915 	stw	r2,-92(fp)
  11bf6c:	e0bfe917 	ldw	r2,-92(fp)
  11bf70:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  11bf74:	00009206 	br	11c1c0 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  11bf78:	e0bffc17 	ldw	r2,-16(fp)
  11bf7c:	10c0020b 	ldhu	r3,8(r2)
  11bf80:	e0bffd0b 	ldhu	r2,-12(fp)
  11bf84:	1884703a 	and	r2,r3,r2
  11bf88:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  11bf8c:	e0bfe80b 	ldhu	r2,-96(fp)
  11bf90:	10001726 	beq	r2,zero,11bff0 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  11bf94:	e0bfe403 	ldbu	r2,-112(fp)
  11bf98:	10800058 	cmpnei	r2,r2,1
  11bf9c:	1000091e 	bne	r2,zero,11bfc4 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  11bfa0:	e0bffc17 	ldw	r2,-16(fp)
  11bfa4:	1080020b 	ldhu	r2,8(r2)
  11bfa8:	1007883a 	mov	r3,r2
  11bfac:	e0bfe80b 	ldhu	r2,-96(fp)
  11bfb0:	0084303a 	nor	r2,zero,r2
  11bfb4:	1884703a 	and	r2,r3,r2
  11bfb8:	1007883a 	mov	r3,r2
  11bfbc:	e0bffc17 	ldw	r2,-16(fp)
  11bfc0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  11bfc4:	d0a74817 	ldw	r2,-25312(gp)
  11bfc8:	e0ffe80b 	ldhu	r3,-96(fp)
  11bfcc:	10c00b0d 	sth	r3,44(r2)
  11bfd0:	e0bfe517 	ldw	r2,-108(fp)
  11bfd4:	e0bfea15 	stw	r2,-88(fp)
  11bfd8:	e0bfea17 	ldw	r2,-88(fp)
  11bfdc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  11bfe0:	e0800217 	ldw	r2,8(fp)
  11bfe4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  11bfe8:	e0bfe80b 	ldhu	r2,-96(fp)
  11bfec:	0000cb06 	br	11c31c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  11bff0:	e13ffd0b 	ldhu	r4,-12(fp)
  11bff4:	e17ffe03 	ldbu	r5,-8(fp)
  11bff8:	e0bfff0b 	ldhu	r2,-4(fp)
  11bffc:	e0fff704 	addi	r3,fp,-36
  11c000:	d8800015 	stw	r2,0(sp)
  11c004:	280f883a 	mov	r7,r5
  11c008:	200d883a 	mov	r6,r4
  11c00c:	180b883a 	mov	r5,r3
  11c010:	e13ffc17 	ldw	r4,-16(fp)
  11c014:	011c7e80 	call	11c7e8 <OS_FlagBlock>
  11c018:	e0bfe517 	ldw	r2,-108(fp)
  11c01c:	e0bfeb15 	stw	r2,-84(fp)
  11c020:	e0bfeb17 	ldw	r2,-84(fp)
  11c024:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  11c028:	00006506 	br	11c1c0 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  11c02c:	e0bffc17 	ldw	r2,-16(fp)
  11c030:	1080020b 	ldhu	r2,8(r2)
  11c034:	0084303a 	nor	r2,zero,r2
  11c038:	1007883a 	mov	r3,r2
  11c03c:	e0bffd0b 	ldhu	r2,-12(fp)
  11c040:	1884703a 	and	r2,r3,r2
  11c044:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  11c048:	e0ffe80b 	ldhu	r3,-96(fp)
  11c04c:	e0bffd0b 	ldhu	r2,-12(fp)
  11c050:	1880151e 	bne	r3,r2,11c0a8 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  11c054:	e0bfe403 	ldbu	r2,-112(fp)
  11c058:	10800058 	cmpnei	r2,r2,1
  11c05c:	1000071e 	bne	r2,zero,11c07c <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  11c060:	e0bffc17 	ldw	r2,-16(fp)
  11c064:	10c0020b 	ldhu	r3,8(r2)
  11c068:	e0bfe80b 	ldhu	r2,-96(fp)
  11c06c:	1884b03a 	or	r2,r3,r2
  11c070:	1007883a 	mov	r3,r2
  11c074:	e0bffc17 	ldw	r2,-16(fp)
  11c078:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  11c07c:	d0a74817 	ldw	r2,-25312(gp)
  11c080:	e0ffe80b 	ldhu	r3,-96(fp)
  11c084:	10c00b0d 	sth	r3,44(r2)
  11c088:	e0bfe517 	ldw	r2,-108(fp)
  11c08c:	e0bfec15 	stw	r2,-80(fp)
  11c090:	e0bfec17 	ldw	r2,-80(fp)
  11c094:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  11c098:	e0800217 	ldw	r2,8(fp)
  11c09c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  11c0a0:	e0bfe80b 	ldhu	r2,-96(fp)
  11c0a4:	00009d06 	br	11c31c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  11c0a8:	e13ffd0b 	ldhu	r4,-12(fp)
  11c0ac:	e17ffe03 	ldbu	r5,-8(fp)
  11c0b0:	e0bfff0b 	ldhu	r2,-4(fp)
  11c0b4:	e0fff704 	addi	r3,fp,-36
  11c0b8:	d8800015 	stw	r2,0(sp)
  11c0bc:	280f883a 	mov	r7,r5
  11c0c0:	200d883a 	mov	r6,r4
  11c0c4:	180b883a 	mov	r5,r3
  11c0c8:	e13ffc17 	ldw	r4,-16(fp)
  11c0cc:	011c7e80 	call	11c7e8 <OS_FlagBlock>
  11c0d0:	e0bfe517 	ldw	r2,-108(fp)
  11c0d4:	e0bfed15 	stw	r2,-76(fp)
  11c0d8:	e0bfed17 	ldw	r2,-76(fp)
  11c0dc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  11c0e0:	00003706 	br	11c1c0 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  11c0e4:	e0bffc17 	ldw	r2,-16(fp)
  11c0e8:	1080020b 	ldhu	r2,8(r2)
  11c0ec:	0084303a 	nor	r2,zero,r2
  11c0f0:	1007883a 	mov	r3,r2
  11c0f4:	e0bffd0b 	ldhu	r2,-12(fp)
  11c0f8:	1884703a 	and	r2,r3,r2
  11c0fc:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  11c100:	e0bfe80b 	ldhu	r2,-96(fp)
  11c104:	10001526 	beq	r2,zero,11c15c <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  11c108:	e0bfe403 	ldbu	r2,-112(fp)
  11c10c:	10800058 	cmpnei	r2,r2,1
  11c110:	1000071e 	bne	r2,zero,11c130 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  11c114:	e0bffc17 	ldw	r2,-16(fp)
  11c118:	10c0020b 	ldhu	r3,8(r2)
  11c11c:	e0bfe80b 	ldhu	r2,-96(fp)
  11c120:	1884b03a 	or	r2,r3,r2
  11c124:	1007883a 	mov	r3,r2
  11c128:	e0bffc17 	ldw	r2,-16(fp)
  11c12c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  11c130:	d0a74817 	ldw	r2,-25312(gp)
  11c134:	e0ffe80b 	ldhu	r3,-96(fp)
  11c138:	10c00b0d 	sth	r3,44(r2)
  11c13c:	e0bfe517 	ldw	r2,-108(fp)
  11c140:	e0bfee15 	stw	r2,-72(fp)
  11c144:	e0bfee17 	ldw	r2,-72(fp)
  11c148:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  11c14c:	e0800217 	ldw	r2,8(fp)
  11c150:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  11c154:	e0bfe80b 	ldhu	r2,-96(fp)
  11c158:	00007006 	br	11c31c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  11c15c:	e13ffd0b 	ldhu	r4,-12(fp)
  11c160:	e17ffe03 	ldbu	r5,-8(fp)
  11c164:	e0bfff0b 	ldhu	r2,-4(fp)
  11c168:	e0fff704 	addi	r3,fp,-36
  11c16c:	d8800015 	stw	r2,0(sp)
  11c170:	280f883a 	mov	r7,r5
  11c174:	200d883a 	mov	r6,r4
  11c178:	180b883a 	mov	r5,r3
  11c17c:	e13ffc17 	ldw	r4,-16(fp)
  11c180:	011c7e80 	call	11c7e8 <OS_FlagBlock>
  11c184:	e0bfe517 	ldw	r2,-108(fp)
  11c188:	e0bfef15 	stw	r2,-68(fp)
  11c18c:	e0bfef17 	ldw	r2,-68(fp)
  11c190:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  11c194:	00000a06 	br	11c1c0 <OSFlagPend+0x448>
  11c198:	e0bfe517 	ldw	r2,-108(fp)
  11c19c:	e0bff015 	stw	r2,-64(fp)
  11c1a0:	e0bff017 	ldw	r2,-64(fp)
  11c1a4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  11c1a8:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  11c1ac:	e0800217 	ldw	r2,8(fp)
  11c1b0:	00c01bc4 	movi	r3,111
  11c1b4:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
  11c1b8:	e0bfe80b 	ldhu	r2,-96(fp)
  11c1bc:	00005706 	br	11c31c <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  11c1c0:	011ac480 	call	11ac48 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11c1c4:	0005303a 	rdctl	r2,status
  11c1c8:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11c1cc:	e0fff117 	ldw	r3,-60(fp)
  11c1d0:	00bfff84 	movi	r2,-2
  11c1d4:	1884703a 	and	r2,r3,r2
  11c1d8:	1001703a 	wrctl	status,r2
  
  return context;
  11c1dc:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
  11c1e0:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  11c1e4:	d0a74817 	ldw	r2,-25312(gp)
  11c1e8:	10800c43 	ldbu	r2,49(r2)
  11c1ec:	10803fcc 	andi	r2,r2,255
  11c1f0:	10001c26 	beq	r2,zero,11c264 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  11c1f4:	d0a74817 	ldw	r2,-25312(gp)
  11c1f8:	10800c43 	ldbu	r2,49(r2)
  11c1fc:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  11c200:	d0a74817 	ldw	r2,-25312(gp)
  11c204:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  11c208:	e0bff704 	addi	r2,fp,-36
  11c20c:	1009883a 	mov	r4,r2
  11c210:	011cb1c0 	call	11cb1c <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  11c214:	d0a74817 	ldw	r2,-25312(gp)
  11c218:	10000c05 	stb	zero,48(r2)
  11c21c:	e0bfe517 	ldw	r2,-108(fp)
  11c220:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11c224:	e0bff217 	ldw	r2,-56(fp)
  11c228:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  11c22c:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
  11c230:	e0bff303 	ldbu	r2,-52(fp)
  11c234:	108000a0 	cmpeqi	r2,r2,2
  11c238:	10000426 	beq	r2,zero,11c24c <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  11c23c:	e0800217 	ldw	r2,8(fp)
  11c240:	00c00384 	movi	r3,14
  11c244:	10c00005 	stb	r3,0(r2)
                 break;
  11c248:	00000406 	br	11c25c <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  11c24c:	e0800217 	ldw	r2,8(fp)
  11c250:	00c00284 	movi	r3,10
  11c254:	10c00005 	stb	r3,0(r2)
                 break;
  11c258:	0001883a 	nop
        }
        return (flags_rdy);
  11c25c:	e0bfe80b 	ldhu	r2,-96(fp)
  11c260:	00002e06 	br	11c31c <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  11c264:	d0a74817 	ldw	r2,-25312(gp)
  11c268:	10800b0b 	ldhu	r2,44(r2)
  11c26c:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  11c270:	e0bfe403 	ldbu	r2,-112(fp)
  11c274:	10800058 	cmpnei	r2,r2,1
  11c278:	1000211e 	bne	r2,zero,11c300 <OSFlagPend+0x588>
        switch (wait_type) {
  11c27c:	e0bffe03 	ldbu	r2,-8(fp)
  11c280:	10001616 	blt	r2,zero,11c2dc <OSFlagPend+0x564>
  11c284:	10c00090 	cmplti	r3,r2,2
  11c288:	18000c1e 	bne	r3,zero,11c2bc <OSFlagPend+0x544>
  11c28c:	10800108 	cmpgei	r2,r2,4
  11c290:	1000121e 	bne	r2,zero,11c2dc <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  11c294:	e0bffc17 	ldw	r2,-16(fp)
  11c298:	1080020b 	ldhu	r2,8(r2)
  11c29c:	1007883a 	mov	r3,r2
  11c2a0:	e0bfe80b 	ldhu	r2,-96(fp)
  11c2a4:	0084303a 	nor	r2,zero,r2
  11c2a8:	1884703a 	and	r2,r3,r2
  11c2ac:	1007883a 	mov	r3,r2
  11c2b0:	e0bffc17 	ldw	r2,-16(fp)
  11c2b4:	10c0020d 	sth	r3,8(r2)
                 break;
  11c2b8:	00001106 	br	11c300 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  11c2bc:	e0bffc17 	ldw	r2,-16(fp)
  11c2c0:	10c0020b 	ldhu	r3,8(r2)
  11c2c4:	e0bfe80b 	ldhu	r2,-96(fp)
  11c2c8:	1884b03a 	or	r2,r3,r2
  11c2cc:	1007883a 	mov	r3,r2
  11c2d0:	e0bffc17 	ldw	r2,-16(fp)
  11c2d4:	10c0020d 	sth	r3,8(r2)
                 break;
  11c2d8:	00000906 	br	11c300 <OSFlagPend+0x588>
  11c2dc:	e0bfe517 	ldw	r2,-108(fp)
  11c2e0:	e0bff415 	stw	r2,-48(fp)
  11c2e4:	e0bff417 	ldw	r2,-48(fp)
  11c2e8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  11c2ec:	e0800217 	ldw	r2,8(fp)
  11c2f0:	00c01bc4 	movi	r3,111
  11c2f4:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
  11c2f8:	0005883a 	mov	r2,zero
  11c2fc:	00000706 	br	11c31c <OSFlagPend+0x5a4>
  11c300:	e0bfe517 	ldw	r2,-108(fp)
  11c304:	e0bff515 	stw	r2,-44(fp)
  11c308:	e0bff517 	ldw	r2,-44(fp)
  11c30c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  11c310:	e0800217 	ldw	r2,8(fp)
  11c314:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  11c318:	e0bfe80b 	ldhu	r2,-96(fp)
}
  11c31c:	e037883a 	mov	sp,fp
  11c320:	dfc00117 	ldw	ra,4(sp)
  11c324:	df000017 	ldw	fp,0(sp)
  11c328:	dec00204 	addi	sp,sp,8
  11c32c:	f800283a 	ret

0011c330 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  11c330:	defffb04 	addi	sp,sp,-20
  11c334:	df000415 	stw	fp,16(sp)
  11c338:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  11c33c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11c340:	0005303a 	rdctl	r2,status
  11c344:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11c348:	e0fffe17 	ldw	r3,-8(fp)
  11c34c:	00bfff84 	movi	r2,-2
  11c350:	1884703a 	and	r2,r3,r2
  11c354:	1001703a 	wrctl	status,r2
  
  return context;
  11c358:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  11c35c:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  11c360:	d0a74817 	ldw	r2,-25312(gp)
  11c364:	10800b0b 	ldhu	r2,44(r2)
  11c368:	e0bffd0d 	sth	r2,-12(fp)
  11c36c:	e0bffc17 	ldw	r2,-16(fp)
  11c370:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11c374:	e0bfff17 	ldw	r2,-4(fp)
  11c378:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  11c37c:	e0bffd0b 	ldhu	r2,-12(fp)
}
  11c380:	e037883a 	mov	sp,fp
  11c384:	df000017 	ldw	fp,0(sp)
  11c388:	dec00104 	addi	sp,sp,4
  11c38c:	f800283a 	ret

0011c390 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  11c390:	deffef04 	addi	sp,sp,-68
  11c394:	dfc01015 	stw	ra,64(sp)
  11c398:	df000f15 	stw	fp,60(sp)
  11c39c:	df000f04 	addi	fp,sp,60
  11c3a0:	e13ffc15 	stw	r4,-16(fp)
  11c3a4:	2807883a 	mov	r3,r5
  11c3a8:	3005883a 	mov	r2,r6
  11c3ac:	e1ffff15 	stw	r7,-4(fp)
  11c3b0:	e0fffd0d 	sth	r3,-12(fp)
  11c3b4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  11c3b8:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  11c3bc:	e0bfff17 	ldw	r2,-4(fp)
  11c3c0:	1000021e 	bne	r2,zero,11c3cc <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
  11c3c4:	0005883a 	mov	r2,zero
  11c3c8:	0000d106 	br	11c710 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  11c3cc:	e0bffc17 	ldw	r2,-16(fp)
  11c3d0:	1000051e 	bne	r2,zero,11c3e8 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  11c3d4:	e0bfff17 	ldw	r2,-4(fp)
  11c3d8:	00c01b84 	movi	r3,110
  11c3dc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  11c3e0:	0005883a 	mov	r2,zero
  11c3e4:	0000ca06 	br	11c710 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  11c3e8:	e0bffc17 	ldw	r2,-16(fp)
  11c3ec:	10800003 	ldbu	r2,0(r2)
  11c3f0:	10803fcc 	andi	r2,r2,255
  11c3f4:	10800160 	cmpeqi	r2,r2,5
  11c3f8:	1000051e 	bne	r2,zero,11c410 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  11c3fc:	e0bfff17 	ldw	r2,-4(fp)
  11c400:	00c00044 	movi	r3,1
  11c404:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  11c408:	0005883a 	mov	r2,zero
  11c40c:	0000c006 	br	11c710 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11c410:	0005303a 	rdctl	r2,status
  11c414:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11c418:	e0fffb17 	ldw	r3,-20(fp)
  11c41c:	00bfff84 	movi	r2,-2
  11c420:	1884703a 	and	r2,r3,r2
  11c424:	1001703a 	wrctl	status,r2
  
  return context;
  11c428:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  11c42c:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
  11c430:	e0bffe03 	ldbu	r2,-8(fp)
  11c434:	10000326 	beq	r2,zero,11c444 <OSFlagPost+0xb4>
  11c438:	10800060 	cmpeqi	r2,r2,1
  11c43c:	10000b1e 	bne	r2,zero,11c46c <OSFlagPost+0xdc>
  11c440:	00001206 	br	11c48c <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  11c444:	e0bffc17 	ldw	r2,-16(fp)
  11c448:	1080020b 	ldhu	r2,8(r2)
  11c44c:	1007883a 	mov	r3,r2
  11c450:	e0bffd0b 	ldhu	r2,-12(fp)
  11c454:	0084303a 	nor	r2,zero,r2
  11c458:	1884703a 	and	r2,r3,r2
  11c45c:	1007883a 	mov	r3,r2
  11c460:	e0bffc17 	ldw	r2,-16(fp)
  11c464:	10c0020d 	sth	r3,8(r2)
             break;
  11c468:	00001106 	br	11c4b0 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  11c46c:	e0bffc17 	ldw	r2,-16(fp)
  11c470:	10c0020b 	ldhu	r3,8(r2)
  11c474:	e0bffd0b 	ldhu	r2,-12(fp)
  11c478:	1884b03a 	or	r2,r3,r2
  11c47c:	1007883a 	mov	r3,r2
  11c480:	e0bffc17 	ldw	r2,-16(fp)
  11c484:	10c0020d 	sth	r3,8(r2)
             break;
  11c488:	00000906 	br	11c4b0 <OSFlagPost+0x120>
  11c48c:	e0bff317 	ldw	r2,-52(fp)
  11c490:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11c494:	e0bff417 	ldw	r2,-48(fp)
  11c498:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  11c49c:	e0bfff17 	ldw	r2,-4(fp)
  11c4a0:	00c01c44 	movi	r3,113
  11c4a4:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
  11c4a8:	0005883a 	mov	r2,zero
  11c4ac:	00009806 	br	11c710 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  11c4b0:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  11c4b4:	e0bffc17 	ldw	r2,-16(fp)
  11c4b8:	10800117 	ldw	r2,4(r2)
  11c4bc:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  11c4c0:	00007706 	br	11c6a0 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
  11c4c4:	e0bff117 	ldw	r2,-60(fp)
  11c4c8:	10800483 	ldbu	r2,18(r2)
  11c4cc:	10803fcc 	andi	r2,r2,255
  11c4d0:	10c00060 	cmpeqi	r3,r2,1
  11c4d4:	18004a1e 	bne	r3,zero,11c600 <OSFlagPost+0x270>
  11c4d8:	10c00088 	cmpgei	r3,r2,2
  11c4dc:	1800021e 	bne	r3,zero,11c4e8 <OSFlagPost+0x158>
  11c4e0:	10002f26 	beq	r2,zero,11c5a0 <OSFlagPost+0x210>
  11c4e4:	00005b06 	br	11c654 <OSFlagPost+0x2c4>
  11c4e8:	10c000a0 	cmpeqi	r3,r2,2
  11c4ec:	1800031e 	bne	r3,zero,11c4fc <OSFlagPost+0x16c>
  11c4f0:	108000e0 	cmpeqi	r2,r2,3
  11c4f4:	1000171e 	bne	r2,zero,11c554 <OSFlagPost+0x1c4>
  11c4f8:	00005606 	br	11c654 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  11c4fc:	e0bffc17 	ldw	r2,-16(fp)
  11c500:	10c0020b 	ldhu	r3,8(r2)
  11c504:	e0bff117 	ldw	r2,-60(fp)
  11c508:	1080040b 	ldhu	r2,16(r2)
  11c50c:	1884703a 	and	r2,r3,r2
  11c510:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  11c514:	e0bff117 	ldw	r2,-60(fp)
  11c518:	1080040b 	ldhu	r2,16(r2)
  11c51c:	10ffffcc 	andi	r3,r2,65535
  11c520:	e0bff60b 	ldhu	r2,-40(fp)
  11c524:	1880541e 	bne	r3,r2,11c678 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  11c528:	e0bff60b 	ldhu	r2,-40(fp)
  11c52c:	100b883a 	mov	r5,r2
  11c530:	e13ff117 	ldw	r4,-60(fp)
  11c534:	011ca280 	call	11ca28 <OS_FlagTaskRdy>
  11c538:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  11c53c:	e0bff683 	ldbu	r2,-38(fp)
  11c540:	10800058 	cmpnei	r2,r2,1
  11c544:	10004c1e 	bne	r2,zero,11c678 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  11c548:	00800044 	movi	r2,1
  11c54c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  11c550:	00004906 	br	11c678 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  11c554:	e0bffc17 	ldw	r2,-16(fp)
  11c558:	10c0020b 	ldhu	r3,8(r2)
  11c55c:	e0bff117 	ldw	r2,-60(fp)
  11c560:	1080040b 	ldhu	r2,16(r2)
  11c564:	1884703a 	and	r2,r3,r2
  11c568:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  11c56c:	e0bff60b 	ldhu	r2,-40(fp)
  11c570:	10004326 	beq	r2,zero,11c680 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  11c574:	e0bff60b 	ldhu	r2,-40(fp)
  11c578:	100b883a 	mov	r5,r2
  11c57c:	e13ff117 	ldw	r4,-60(fp)
  11c580:	011ca280 	call	11ca28 <OS_FlagTaskRdy>
  11c584:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  11c588:	e0bff683 	ldbu	r2,-38(fp)
  11c58c:	10800058 	cmpnei	r2,r2,1
  11c590:	10003b1e 	bne	r2,zero,11c680 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  11c594:	00800044 	movi	r2,1
  11c598:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  11c59c:	00003806 	br	11c680 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  11c5a0:	e0bffc17 	ldw	r2,-16(fp)
  11c5a4:	1080020b 	ldhu	r2,8(r2)
  11c5a8:	0084303a 	nor	r2,zero,r2
  11c5ac:	1007883a 	mov	r3,r2
  11c5b0:	e0bff117 	ldw	r2,-60(fp)
  11c5b4:	1080040b 	ldhu	r2,16(r2)
  11c5b8:	1884703a 	and	r2,r3,r2
  11c5bc:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  11c5c0:	e0bff117 	ldw	r2,-60(fp)
  11c5c4:	1080040b 	ldhu	r2,16(r2)
  11c5c8:	10ffffcc 	andi	r3,r2,65535
  11c5cc:	e0bff60b 	ldhu	r2,-40(fp)
  11c5d0:	18802d1e 	bne	r3,r2,11c688 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  11c5d4:	e0bff60b 	ldhu	r2,-40(fp)
  11c5d8:	100b883a 	mov	r5,r2
  11c5dc:	e13ff117 	ldw	r4,-60(fp)
  11c5e0:	011ca280 	call	11ca28 <OS_FlagTaskRdy>
  11c5e4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  11c5e8:	e0bff683 	ldbu	r2,-38(fp)
  11c5ec:	10800058 	cmpnei	r2,r2,1
  11c5f0:	1000251e 	bne	r2,zero,11c688 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  11c5f4:	00800044 	movi	r2,1
  11c5f8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  11c5fc:	00002206 	br	11c688 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  11c600:	e0bffc17 	ldw	r2,-16(fp)
  11c604:	1080020b 	ldhu	r2,8(r2)
  11c608:	0084303a 	nor	r2,zero,r2
  11c60c:	1007883a 	mov	r3,r2
  11c610:	e0bff117 	ldw	r2,-60(fp)
  11c614:	1080040b 	ldhu	r2,16(r2)
  11c618:	1884703a 	and	r2,r3,r2
  11c61c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  11c620:	e0bff60b 	ldhu	r2,-40(fp)
  11c624:	10001a26 	beq	r2,zero,11c690 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  11c628:	e0bff60b 	ldhu	r2,-40(fp)
  11c62c:	100b883a 	mov	r5,r2
  11c630:	e13ff117 	ldw	r4,-60(fp)
  11c634:	011ca280 	call	11ca28 <OS_FlagTaskRdy>
  11c638:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  11c63c:	e0bff683 	ldbu	r2,-38(fp)
  11c640:	10800058 	cmpnei	r2,r2,1
  11c644:	1000121e 	bne	r2,zero,11c690 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  11c648:	00800044 	movi	r2,1
  11c64c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  11c650:	00000f06 	br	11c690 <OSFlagPost+0x300>
  11c654:	e0bff317 	ldw	r2,-52(fp)
  11c658:	e0bff515 	stw	r2,-44(fp)
  11c65c:	e0bff517 	ldw	r2,-44(fp)
  11c660:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  11c664:	e0bfff17 	ldw	r2,-4(fp)
  11c668:	00c01bc4 	movi	r3,111
  11c66c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
  11c670:	0005883a 	mov	r2,zero
  11c674:	00002606 	br	11c710 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  11c678:	0001883a 	nop
  11c67c:	00000506 	br	11c694 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  11c680:	0001883a 	nop
  11c684:	00000306 	br	11c694 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  11c688:	0001883a 	nop
  11c68c:	00000106 	br	11c694 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  11c690:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  11c694:	e0bff117 	ldw	r2,-60(fp)
  11c698:	10800017 	ldw	r2,0(r2)
  11c69c:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  11c6a0:	e0bff117 	ldw	r2,-60(fp)
  11c6a4:	103f871e 	bne	r2,zero,11c4c4 <__alt_data_end+0xfffdc4c4>
  11c6a8:	e0bff317 	ldw	r2,-52(fp)
  11c6ac:	e0bff715 	stw	r2,-36(fp)
  11c6b0:	e0bff717 	ldw	r2,-36(fp)
  11c6b4:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  11c6b8:	e0bff203 	ldbu	r2,-56(fp)
  11c6bc:	10800058 	cmpnei	r2,r2,1
  11c6c0:	1000011e 	bne	r2,zero,11c6c8 <OSFlagPost+0x338>
        OS_Sched();
  11c6c4:	011ac480 	call	11ac48 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11c6c8:	0005303a 	rdctl	r2,status
  11c6cc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11c6d0:	e0fffa17 	ldw	r3,-24(fp)
  11c6d4:	00bfff84 	movi	r2,-2
  11c6d8:	1884703a 	and	r2,r3,r2
  11c6dc:	1001703a 	wrctl	status,r2
  
  return context;
  11c6e0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  11c6e4:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
  11c6e8:	e0bffc17 	ldw	r2,-16(fp)
  11c6ec:	1080020b 	ldhu	r2,8(r2)
  11c6f0:	e0bff90d 	sth	r2,-28(fp)
  11c6f4:	e0bff317 	ldw	r2,-52(fp)
  11c6f8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11c6fc:	e0bff817 	ldw	r2,-32(fp)
  11c700:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  11c704:	e0bfff17 	ldw	r2,-4(fp)
  11c708:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  11c70c:	e0bff90b 	ldhu	r2,-28(fp)
}
  11c710:	e037883a 	mov	sp,fp
  11c714:	dfc00117 	ldw	ra,4(sp)
  11c718:	df000017 	ldw	fp,0(sp)
  11c71c:	dec00204 	addi	sp,sp,8
  11c720:	f800283a 	ret

0011c724 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  11c724:	defff904 	addi	sp,sp,-28
  11c728:	df000615 	stw	fp,24(sp)
  11c72c:	df000604 	addi	fp,sp,24
  11c730:	e13ffe15 	stw	r4,-8(fp)
  11c734:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  11c738:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  11c73c:	e0bfff17 	ldw	r2,-4(fp)
  11c740:	1000021e 	bne	r2,zero,11c74c <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
  11c744:	0005883a 	mov	r2,zero
  11c748:	00002306 	br	11c7d8 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  11c74c:	e0bffe17 	ldw	r2,-8(fp)
  11c750:	1000051e 	bne	r2,zero,11c768 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  11c754:	e0bfff17 	ldw	r2,-4(fp)
  11c758:	00c01b84 	movi	r3,110
  11c75c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  11c760:	0005883a 	mov	r2,zero
  11c764:	00001c06 	br	11c7d8 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  11c768:	e0bffe17 	ldw	r2,-8(fp)
  11c76c:	10800003 	ldbu	r2,0(r2)
  11c770:	10803fcc 	andi	r2,r2,255
  11c774:	10800160 	cmpeqi	r2,r2,5
  11c778:	1000051e 	bne	r2,zero,11c790 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  11c77c:	e0bfff17 	ldw	r2,-4(fp)
  11c780:	00c00044 	movi	r3,1
  11c784:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  11c788:	0005883a 	mov	r2,zero
  11c78c:	00001206 	br	11c7d8 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11c790:	0005303a 	rdctl	r2,status
  11c794:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11c798:	e0fffc17 	ldw	r3,-16(fp)
  11c79c:	00bfff84 	movi	r2,-2
  11c7a0:	1884703a 	and	r2,r3,r2
  11c7a4:	1001703a 	wrctl	status,r2
  
  return context;
  11c7a8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  11c7ac:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
  11c7b0:	e0bffe17 	ldw	r2,-8(fp)
  11c7b4:	1080020b 	ldhu	r2,8(r2)
  11c7b8:	e0bffb0d 	sth	r2,-20(fp)
  11c7bc:	e0bffa17 	ldw	r2,-24(fp)
  11c7c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11c7c4:	e0bffd17 	ldw	r2,-12(fp)
  11c7c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  11c7cc:	e0bfff17 	ldw	r2,-4(fp)
  11c7d0:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  11c7d4:	e0bffb0b 	ldhu	r2,-20(fp)
}
  11c7d8:	e037883a 	mov	sp,fp
  11c7dc:	df000017 	ldw	fp,0(sp)
  11c7e0:	dec00104 	addi	sp,sp,4
  11c7e4:	f800283a 	ret

0011c7e8 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  11c7e8:	defff804 	addi	sp,sp,-32
  11c7ec:	df000715 	stw	fp,28(sp)
  11c7f0:	df000704 	addi	fp,sp,28
  11c7f4:	e13ffb15 	stw	r4,-20(fp)
  11c7f8:	e17ffc15 	stw	r5,-16(fp)
  11c7fc:	3009883a 	mov	r4,r6
  11c800:	3807883a 	mov	r3,r7
  11c804:	e0800117 	ldw	r2,4(fp)
  11c808:	e13ffd0d 	sth	r4,-12(fp)
  11c80c:	e0fffe05 	stb	r3,-8(fp)
  11c810:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  11c814:	d0a74817 	ldw	r2,-25312(gp)
  11c818:	d0e74817 	ldw	r3,-25312(gp)
  11c81c:	18c00c03 	ldbu	r3,48(r3)
  11c820:	18c00814 	ori	r3,r3,32
  11c824:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  11c828:	d0a74817 	ldw	r2,-25312(gp)
  11c82c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  11c830:	d0a74817 	ldw	r2,-25312(gp)
  11c834:	e0ffff0b 	ldhu	r3,-4(fp)
  11c838:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  11c83c:	d0a74817 	ldw	r2,-25312(gp)
  11c840:	e0fffc17 	ldw	r3,-16(fp)
  11c844:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  11c848:	e0bffc17 	ldw	r2,-16(fp)
  11c84c:	e0fffd0b 	ldhu	r3,-12(fp)
  11c850:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  11c854:	e0bffc17 	ldw	r2,-16(fp)
  11c858:	e0fffe03 	ldbu	r3,-8(fp)
  11c85c:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  11c860:	d0e74817 	ldw	r3,-25312(gp)
  11c864:	e0bffc17 	ldw	r2,-16(fp)
  11c868:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  11c86c:	e0bffb17 	ldw	r2,-20(fp)
  11c870:	10c00117 	ldw	r3,4(r2)
  11c874:	e0bffc17 	ldw	r2,-16(fp)
  11c878:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  11c87c:	e0bffc17 	ldw	r2,-16(fp)
  11c880:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  11c884:	e0bffc17 	ldw	r2,-16(fp)
  11c888:	e0fffb17 	ldw	r3,-20(fp)
  11c88c:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  11c890:	e0bffb17 	ldw	r2,-20(fp)
  11c894:	10800117 	ldw	r2,4(r2)
  11c898:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  11c89c:	e0bff917 	ldw	r2,-28(fp)
  11c8a0:	10000326 	beq	r2,zero,11c8b0 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  11c8a4:	e0bff917 	ldw	r2,-28(fp)
  11c8a8:	e0fffc17 	ldw	r3,-16(fp)
  11c8ac:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  11c8b0:	e0bffb17 	ldw	r2,-20(fp)
  11c8b4:	e0fffc17 	ldw	r3,-16(fp)
  11c8b8:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  11c8bc:	d0a74817 	ldw	r2,-25312(gp)
  11c8c0:	10800d03 	ldbu	r2,52(r2)
  11c8c4:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  11c8c8:	e0fffa03 	ldbu	r3,-24(fp)
  11c8cc:	e13ffa03 	ldbu	r4,-24(fp)
  11c8d0:	d0a74544 	addi	r2,gp,-25323
  11c8d4:	2085883a 	add	r2,r4,r2
  11c8d8:	10800003 	ldbu	r2,0(r2)
  11c8dc:	1009883a 	mov	r4,r2
  11c8e0:	d0a74817 	ldw	r2,-25312(gp)
  11c8e4:	10800d43 	ldbu	r2,53(r2)
  11c8e8:	0084303a 	nor	r2,zero,r2
  11c8ec:	2084703a 	and	r2,r4,r2
  11c8f0:	1009883a 	mov	r4,r2
  11c8f4:	d0a74544 	addi	r2,gp,-25323
  11c8f8:	1885883a 	add	r2,r3,r2
  11c8fc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  11c900:	e0fffa03 	ldbu	r3,-24(fp)
  11c904:	d0a74544 	addi	r2,gp,-25323
  11c908:	1885883a 	add	r2,r3,r2
  11c90c:	10800003 	ldbu	r2,0(r2)
  11c910:	10803fcc 	andi	r2,r2,255
  11c914:	1000071e 	bne	r2,zero,11c934 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  11c918:	d0a74817 	ldw	r2,-25312(gp)
  11c91c:	10800d83 	ldbu	r2,54(r2)
  11c920:	0084303a 	nor	r2,zero,r2
  11c924:	1007883a 	mov	r3,r2
  11c928:	d0a74503 	ldbu	r2,-25324(gp)
  11c92c:	1884703a 	and	r2,r3,r2
  11c930:	d0a74505 	stb	r2,-25324(gp)
    }
}
  11c934:	0001883a 	nop
  11c938:	e037883a 	mov	sp,fp
  11c93c:	df000017 	ldw	fp,0(sp)
  11c940:	dec00104 	addi	sp,sp,4
  11c944:	f800283a 	ret

0011c948 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  11c948:	defffb04 	addi	sp,sp,-20
  11c94c:	dfc00415 	stw	ra,16(sp)
  11c950:	df000315 	stw	fp,12(sp)
  11c954:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  11c958:	0140dc04 	movi	r5,880
  11c95c:	010004f4 	movhi	r4,19
  11c960:	212cd404 	addi	r4,r4,-19632
  11c964:	011ab8c0 	call	11ab8c <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  11c968:	008004f4 	movhi	r2,19
  11c96c:	10acd404 	addi	r2,r2,-19632
  11c970:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  11c974:	008004f4 	movhi	r2,19
  11c978:	10acdf04 	addi	r2,r2,-19588
  11c97c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  11c980:	e03ffd0d 	sth	zero,-12(fp)
  11c984:	00001306 	br	11c9d4 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  11c988:	e0bffe17 	ldw	r2,-8(fp)
  11c98c:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  11c990:	e0bffe17 	ldw	r2,-8(fp)
  11c994:	e0ffff17 	ldw	r3,-4(fp)
  11c998:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  11c99c:	e0bffe17 	ldw	r2,-8(fp)
  11c9a0:	00c00fc4 	movi	r3,63
  11c9a4:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  11c9a8:	e0bffe17 	ldw	r2,-8(fp)
  11c9ac:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  11c9b0:	e0bffe17 	ldw	r2,-8(fp)
  11c9b4:	10800b04 	addi	r2,r2,44
  11c9b8:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  11c9bc:	e0bfff17 	ldw	r2,-4(fp)
  11c9c0:	10800b04 	addi	r2,r2,44
  11c9c4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  11c9c8:	e0bffd0b 	ldhu	r2,-12(fp)
  11c9cc:	10800044 	addi	r2,r2,1
  11c9d0:	e0bffd0d 	sth	r2,-12(fp)
  11c9d4:	e0bffd0b 	ldhu	r2,-12(fp)
  11c9d8:	108004f0 	cmpltui	r2,r2,19
  11c9dc:	103fea1e 	bne	r2,zero,11c988 <__alt_data_end+0xfffdc988>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  11c9e0:	e0bffe17 	ldw	r2,-8(fp)
  11c9e4:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  11c9e8:	e0bffe17 	ldw	r2,-8(fp)
  11c9ec:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  11c9f0:	e0bffe17 	ldw	r2,-8(fp)
  11c9f4:	00c00fc4 	movi	r3,63
  11c9f8:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  11c9fc:	e0bffe17 	ldw	r2,-8(fp)
  11ca00:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  11ca04:	008004f4 	movhi	r2,19
  11ca08:	10acd404 	addi	r2,r2,-19632
  11ca0c:	d0a74a15 	stw	r2,-25304(gp)
#endif
}
  11ca10:	0001883a 	nop
  11ca14:	e037883a 	mov	sp,fp
  11ca18:	dfc00117 	ldw	ra,4(sp)
  11ca1c:	df000017 	ldw	fp,0(sp)
  11ca20:	dec00204 	addi	sp,sp,8
  11ca24:	f800283a 	ret

0011ca28 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  11ca28:	defffa04 	addi	sp,sp,-24
  11ca2c:	dfc00515 	stw	ra,20(sp)
  11ca30:	df000415 	stw	fp,16(sp)
  11ca34:	df000404 	addi	fp,sp,16
  11ca38:	e13ffe15 	stw	r4,-8(fp)
  11ca3c:	2805883a 	mov	r2,r5
  11ca40:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  11ca44:	e0bffe17 	ldw	r2,-8(fp)
  11ca48:	10800217 	ldw	r2,8(r2)
  11ca4c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  11ca50:	e0bffd17 	ldw	r2,-12(fp)
  11ca54:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  11ca58:	e0bffd17 	ldw	r2,-12(fp)
  11ca5c:	e0ffff0b 	ldhu	r3,-4(fp)
  11ca60:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  11ca64:	e0bffd17 	ldw	r2,-12(fp)
  11ca68:	10c00c03 	ldbu	r3,48(r2)
  11ca6c:	00bff7c4 	movi	r2,-33
  11ca70:	1884703a 	and	r2,r3,r2
  11ca74:	1007883a 	mov	r3,r2
  11ca78:	e0bffd17 	ldw	r2,-12(fp)
  11ca7c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  11ca80:	e0bffd17 	ldw	r2,-12(fp)
  11ca84:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  11ca88:	e0bffd17 	ldw	r2,-12(fp)
  11ca8c:	10800c03 	ldbu	r2,48(r2)
  11ca90:	10803fcc 	andi	r2,r2,255
  11ca94:	1000181e 	bne	r2,zero,11caf8 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  11ca98:	e0bffd17 	ldw	r2,-12(fp)
  11ca9c:	10c00d83 	ldbu	r3,54(r2)
  11caa0:	d0a74503 	ldbu	r2,-25324(gp)
  11caa4:	1884b03a 	or	r2,r3,r2
  11caa8:	d0a74505 	stb	r2,-25324(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  11caac:	e0bffd17 	ldw	r2,-12(fp)
  11cab0:	10800d03 	ldbu	r2,52(r2)
  11cab4:	10c03fcc 	andi	r3,r2,255
  11cab8:	e0bffd17 	ldw	r2,-12(fp)
  11cabc:	10800d03 	ldbu	r2,52(r2)
  11cac0:	11003fcc 	andi	r4,r2,255
  11cac4:	d0a74544 	addi	r2,gp,-25323
  11cac8:	2085883a 	add	r2,r4,r2
  11cacc:	11000003 	ldbu	r4,0(r2)
  11cad0:	e0bffd17 	ldw	r2,-12(fp)
  11cad4:	10800d43 	ldbu	r2,53(r2)
  11cad8:	2084b03a 	or	r2,r4,r2
  11cadc:	1009883a 	mov	r4,r2
  11cae0:	d0a74544 	addi	r2,gp,-25323
  11cae4:	1885883a 	add	r2,r3,r2
  11cae8:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
  11caec:	00800044 	movi	r2,1
  11caf0:	e0bffc05 	stb	r2,-16(fp)
  11caf4:	00000106 	br	11cafc <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
  11caf8:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  11cafc:	e13ffe17 	ldw	r4,-8(fp)
  11cb00:	011cb1c0 	call	11cb1c <OS_FlagUnlink>
    return (sched);
  11cb04:	e0bffc03 	ldbu	r2,-16(fp)
}
  11cb08:	e037883a 	mov	sp,fp
  11cb0c:	dfc00117 	ldw	ra,4(sp)
  11cb10:	df000017 	ldw	fp,0(sp)
  11cb14:	dec00204 	addi	sp,sp,8
  11cb18:	f800283a 	ret

0011cb1c <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  11cb1c:	defffa04 	addi	sp,sp,-24
  11cb20:	df000515 	stw	fp,20(sp)
  11cb24:	df000504 	addi	fp,sp,20
  11cb28:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  11cb2c:	e0bfff17 	ldw	r2,-4(fp)
  11cb30:	10800117 	ldw	r2,4(r2)
  11cb34:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  11cb38:	e0bfff17 	ldw	r2,-4(fp)
  11cb3c:	10800017 	ldw	r2,0(r2)
  11cb40:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  11cb44:	e0bffb17 	ldw	r2,-20(fp)
  11cb48:	10000b1e 	bne	r2,zero,11cb78 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  11cb4c:	e0bfff17 	ldw	r2,-4(fp)
  11cb50:	10800317 	ldw	r2,12(r2)
  11cb54:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  11cb58:	e0bffd17 	ldw	r2,-12(fp)
  11cb5c:	e0fffc17 	ldw	r3,-16(fp)
  11cb60:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  11cb64:	e0bffc17 	ldw	r2,-16(fp)
  11cb68:	10000b26 	beq	r2,zero,11cb98 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  11cb6c:	e0bffc17 	ldw	r2,-16(fp)
  11cb70:	10000115 	stw	zero,4(r2)
  11cb74:	00000806 	br	11cb98 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  11cb78:	e0bffb17 	ldw	r2,-20(fp)
  11cb7c:	e0fffc17 	ldw	r3,-16(fp)
  11cb80:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  11cb84:	e0bffc17 	ldw	r2,-16(fp)
  11cb88:	10000326 	beq	r2,zero,11cb98 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  11cb8c:	e0bffc17 	ldw	r2,-16(fp)
  11cb90:	e0fffb17 	ldw	r3,-20(fp)
  11cb94:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  11cb98:	e0bfff17 	ldw	r2,-4(fp)
  11cb9c:	10800217 	ldw	r2,8(r2)
  11cba0:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  11cba4:	e0bffe17 	ldw	r2,-8(fp)
  11cba8:	10000a15 	stw	zero,40(r2)
#endif
}
  11cbac:	0001883a 	nop
  11cbb0:	e037883a 	mov	sp,fp
  11cbb4:	df000017 	ldw	fp,0(sp)
  11cbb8:	dec00104 	addi	sp,sp,4
  11cbbc:	f800283a 	ret

0011cbc0 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  11cbc0:	defff404 	addi	sp,sp,-48
  11cbc4:	df000b15 	stw	fp,44(sp)
  11cbc8:	df000b04 	addi	fp,sp,44
  11cbcc:	e13ffc15 	stw	r4,-16(fp)
  11cbd0:	e17ffd15 	stw	r5,-12(fp)
  11cbd4:	e1bffe15 	stw	r6,-8(fp)
  11cbd8:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  11cbdc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  11cbe0:	e0bfff17 	ldw	r2,-4(fp)
  11cbe4:	1000021e 	bne	r2,zero,11cbf0 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
  11cbe8:	0005883a 	mov	r2,zero
  11cbec:	00006506 	br	11cd84 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  11cbf0:	e0bffc17 	ldw	r2,-16(fp)
  11cbf4:	1000051e 	bne	r2,zero,11cc0c <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  11cbf8:	e0bfff17 	ldw	r2,-4(fp)
  11cbfc:	00c01884 	movi	r3,98
  11cc00:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  11cc04:	0005883a 	mov	r2,zero
  11cc08:	00005e06 	br	11cd84 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  11cc0c:	e0bffc17 	ldw	r2,-16(fp)
  11cc10:	108000cc 	andi	r2,r2,3
  11cc14:	10000526 	beq	r2,zero,11cc2c <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  11cc18:	e0bfff17 	ldw	r2,-4(fp)
  11cc1c:	00c01884 	movi	r3,98
  11cc20:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  11cc24:	0005883a 	mov	r2,zero
  11cc28:	00005606 	br	11cd84 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  11cc2c:	e0bffd17 	ldw	r2,-12(fp)
  11cc30:	108000a8 	cmpgeui	r2,r2,2
  11cc34:	1000051e 	bne	r2,zero,11cc4c <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  11cc38:	e0bfff17 	ldw	r2,-4(fp)
  11cc3c:	00c016c4 	movi	r3,91
  11cc40:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  11cc44:	0005883a 	mov	r2,zero
  11cc48:	00004e06 	br	11cd84 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  11cc4c:	e0bffe17 	ldw	r2,-8(fp)
  11cc50:	10800128 	cmpgeui	r2,r2,4
  11cc54:	1000051e 	bne	r2,zero,11cc6c <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  11cc58:	e0bfff17 	ldw	r2,-4(fp)
  11cc5c:	00c01704 	movi	r3,92
  11cc60:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  11cc64:	0005883a 	mov	r2,zero
  11cc68:	00004606 	br	11cd84 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11cc6c:	0005303a 	rdctl	r2,status
  11cc70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11cc74:	e0fffb17 	ldw	r3,-20(fp)
  11cc78:	00bfff84 	movi	r2,-2
  11cc7c:	1884703a 	and	r2,r3,r2
  11cc80:	1001703a 	wrctl	status,r2
  
  return context;
  11cc84:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  11cc88:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  11cc8c:	d0a74217 	ldw	r2,-25336(gp)
  11cc90:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  11cc94:	d0a74217 	ldw	r2,-25336(gp)
  11cc98:	10000326 	beq	r2,zero,11cca8 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  11cc9c:	d0a74217 	ldw	r2,-25336(gp)
  11cca0:	10800117 	ldw	r2,4(r2)
  11cca4:	d0a74215 	stw	r2,-25336(gp)
  11cca8:	e0bff817 	ldw	r2,-32(fp)
  11ccac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11ccb0:	e0bff917 	ldw	r2,-28(fp)
  11ccb4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  11ccb8:	e0bffa17 	ldw	r2,-24(fp)
  11ccbc:	1000051e 	bne	r2,zero,11ccd4 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
  11ccc0:	e0bfff17 	ldw	r2,-4(fp)
  11ccc4:	00c01684 	movi	r3,90
  11ccc8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  11cccc:	0005883a 	mov	r2,zero
  11ccd0:	00002c06 	br	11cd84 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  11ccd4:	e0bffc17 	ldw	r2,-16(fp)
  11ccd8:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  11ccdc:	e0fffc17 	ldw	r3,-16(fp)
  11cce0:	e0bffe17 	ldw	r2,-8(fp)
  11cce4:	1885883a 	add	r2,r3,r2
  11cce8:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
  11ccec:	e03ff715 	stw	zero,-36(fp)
  11ccf0:	00000c06 	br	11cd24 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  11ccf4:	e0bff617 	ldw	r2,-40(fp)
  11ccf8:	e0fff517 	ldw	r3,-44(fp)
  11ccfc:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  11cd00:	e0bff517 	ldw	r2,-44(fp)
  11cd04:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  11cd08:	e0fff517 	ldw	r3,-44(fp)
  11cd0c:	e0bffe17 	ldw	r2,-8(fp)
  11cd10:	1885883a 	add	r2,r3,r2
  11cd14:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  11cd18:	e0bff717 	ldw	r2,-36(fp)
  11cd1c:	10800044 	addi	r2,r2,1
  11cd20:	e0bff715 	stw	r2,-36(fp)
  11cd24:	e0bffd17 	ldw	r2,-12(fp)
  11cd28:	10bfffc4 	addi	r2,r2,-1
  11cd2c:	e0fff717 	ldw	r3,-36(fp)
  11cd30:	18bff036 	bltu	r3,r2,11ccf4 <__alt_data_end+0xfffdccf4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  11cd34:	e0bff617 	ldw	r2,-40(fp)
  11cd38:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  11cd3c:	e0bffa17 	ldw	r2,-24(fp)
  11cd40:	e0fffc17 	ldw	r3,-16(fp)
  11cd44:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  11cd48:	e0bffa17 	ldw	r2,-24(fp)
  11cd4c:	e0fffc17 	ldw	r3,-16(fp)
  11cd50:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  11cd54:	e0bffa17 	ldw	r2,-24(fp)
  11cd58:	e0fffd17 	ldw	r3,-12(fp)
  11cd5c:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
  11cd60:	e0bffa17 	ldw	r2,-24(fp)
  11cd64:	e0fffd17 	ldw	r3,-12(fp)
  11cd68:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  11cd6c:	e0bffa17 	ldw	r2,-24(fp)
  11cd70:	e0fffe17 	ldw	r3,-8(fp)
  11cd74:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
  11cd78:	e0bfff17 	ldw	r2,-4(fp)
  11cd7c:	10000005 	stb	zero,0(r2)
    return (pmem);
  11cd80:	e0bffa17 	ldw	r2,-24(fp)
}
  11cd84:	e037883a 	mov	sp,fp
  11cd88:	df000017 	ldw	fp,0(sp)
  11cd8c:	dec00104 	addi	sp,sp,4
  11cd90:	f800283a 	ret

0011cd94 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  11cd94:	defff804 	addi	sp,sp,-32
  11cd98:	df000715 	stw	fp,28(sp)
  11cd9c:	df000704 	addi	fp,sp,28
  11cda0:	e13ffe15 	stw	r4,-8(fp)
  11cda4:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  11cda8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  11cdac:	e0bfff17 	ldw	r2,-4(fp)
  11cdb0:	1000021e 	bne	r2,zero,11cdbc <OSMemGet+0x28>
        return ((void *)0);
  11cdb4:	0005883a 	mov	r2,zero
  11cdb8:	00002e06 	br	11ce74 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  11cdbc:	e0bffe17 	ldw	r2,-8(fp)
  11cdc0:	1000051e 	bne	r2,zero,11cdd8 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  11cdc4:	e0bfff17 	ldw	r2,-4(fp)
  11cdc8:	00c01804 	movi	r3,96
  11cdcc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  11cdd0:	0005883a 	mov	r2,zero
  11cdd4:	00002706 	br	11ce74 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11cdd8:	0005303a 	rdctl	r2,status
  11cddc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11cde0:	e0fffd17 	ldw	r3,-12(fp)
  11cde4:	00bfff84 	movi	r2,-2
  11cde8:	1884703a 	and	r2,r3,r2
  11cdec:	1001703a 	wrctl	status,r2
  
  return context;
  11cdf0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  11cdf4:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  11cdf8:	e0bffe17 	ldw	r2,-8(fp)
  11cdfc:	10800417 	ldw	r2,16(r2)
  11ce00:	10001426 	beq	r2,zero,11ce54 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  11ce04:	e0bffe17 	ldw	r2,-8(fp)
  11ce08:	10800117 	ldw	r2,4(r2)
  11ce0c:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  11ce10:	e0bffb17 	ldw	r2,-20(fp)
  11ce14:	10c00017 	ldw	r3,0(r2)
  11ce18:	e0bffe17 	ldw	r2,-8(fp)
  11ce1c:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  11ce20:	e0bffe17 	ldw	r2,-8(fp)
  11ce24:	10800417 	ldw	r2,16(r2)
  11ce28:	10ffffc4 	addi	r3,r2,-1
  11ce2c:	e0bffe17 	ldw	r2,-8(fp)
  11ce30:	10c00415 	stw	r3,16(r2)
  11ce34:	e0bff917 	ldw	r2,-28(fp)
  11ce38:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11ce3c:	e0bffa17 	ldw	r2,-24(fp)
  11ce40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  11ce44:	e0bfff17 	ldw	r2,-4(fp)
  11ce48:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  11ce4c:	e0bffb17 	ldw	r2,-20(fp)
  11ce50:	00000806 	br	11ce74 <OSMemGet+0xe0>
  11ce54:	e0bff917 	ldw	r2,-28(fp)
  11ce58:	e0bffc15 	stw	r2,-16(fp)
  11ce5c:	e0bffc17 	ldw	r2,-16(fp)
  11ce60:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  11ce64:	e0bfff17 	ldw	r2,-4(fp)
  11ce68:	00c01744 	movi	r3,93
  11ce6c:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  11ce70:	0005883a 	mov	r2,zero
}
  11ce74:	e037883a 	mov	sp,fp
  11ce78:	df000017 	ldw	fp,0(sp)
  11ce7c:	dec00104 	addi	sp,sp,4
  11ce80:	f800283a 	ret

0011ce84 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  11ce84:	defff704 	addi	sp,sp,-36
  11ce88:	dfc00815 	stw	ra,32(sp)
  11ce8c:	df000715 	stw	fp,28(sp)
  11ce90:	df000704 	addi	fp,sp,28
  11ce94:	e13ffd15 	stw	r4,-12(fp)
  11ce98:	e17ffe15 	stw	r5,-8(fp)
  11ce9c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  11cea0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  11cea4:	e0bfff17 	ldw	r2,-4(fp)
  11cea8:	1000021e 	bne	r2,zero,11ceb4 <OSMemNameGet+0x30>
        return (0);
  11ceac:	0005883a 	mov	r2,zero
  11ceb0:	00002b06 	br	11cf60 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  11ceb4:	e0bffd17 	ldw	r2,-12(fp)
  11ceb8:	1000051e 	bne	r2,zero,11ced0 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  11cebc:	e0bfff17 	ldw	r2,-4(fp)
  11cec0:	00c01804 	movi	r3,96
  11cec4:	10c00005 	stb	r3,0(r2)
        return (0);
  11cec8:	0005883a 	mov	r2,zero
  11cecc:	00002406 	br	11cf60 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  11ced0:	e0bffe17 	ldw	r2,-8(fp)
  11ced4:	1000051e 	bne	r2,zero,11ceec <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  11ced8:	e0bfff17 	ldw	r2,-4(fp)
  11cedc:	00c00304 	movi	r3,12
  11cee0:	10c00005 	stb	r3,0(r2)
        return (0);
  11cee4:	0005883a 	mov	r2,zero
  11cee8:	00001d06 	br	11cf60 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  11ceec:	d0a74703 	ldbu	r2,-25316(gp)
  11cef0:	10803fcc 	andi	r2,r2,255
  11cef4:	10000526 	beq	r2,zero,11cf0c <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
  11cef8:	e0bfff17 	ldw	r2,-4(fp)
  11cefc:	00c00444 	movi	r3,17
  11cf00:	10c00005 	stb	r3,0(r2)
        return (0);
  11cf04:	0005883a 	mov	r2,zero
  11cf08:	00001506 	br	11cf60 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11cf0c:	0005303a 	rdctl	r2,status
  11cf10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11cf14:	e0fffb17 	ldw	r3,-20(fp)
  11cf18:	00bfff84 	movi	r2,-2
  11cf1c:	1884703a 	and	r2,r3,r2
  11cf20:	1001703a 	wrctl	status,r2
  
  return context;
  11cf24:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  11cf28:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  11cf2c:	e0bffd17 	ldw	r2,-12(fp)
  11cf30:	10800504 	addi	r2,r2,20
  11cf34:	100b883a 	mov	r5,r2
  11cf38:	e13ffe17 	ldw	r4,-8(fp)
  11cf3c:	011ad8c0 	call	11ad8c <OS_StrCopy>
  11cf40:	e0bffa05 	stb	r2,-24(fp)
  11cf44:	e0bff917 	ldw	r2,-28(fp)
  11cf48:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11cf4c:	e0bffc17 	ldw	r2,-16(fp)
  11cf50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  11cf54:	e0bfff17 	ldw	r2,-4(fp)
  11cf58:	10000005 	stb	zero,0(r2)
    return (len);
  11cf5c:	e0bffa03 	ldbu	r2,-24(fp)
}
  11cf60:	e037883a 	mov	sp,fp
  11cf64:	dfc00117 	ldw	ra,4(sp)
  11cf68:	df000017 	ldw	fp,0(sp)
  11cf6c:	dec00204 	addi	sp,sp,8
  11cf70:	f800283a 	ret

0011cf74 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  11cf74:	defff604 	addi	sp,sp,-40
  11cf78:	dfc00915 	stw	ra,36(sp)
  11cf7c:	df000815 	stw	fp,32(sp)
  11cf80:	df000804 	addi	fp,sp,32
  11cf84:	e13ffd15 	stw	r4,-12(fp)
  11cf88:	e17ffe15 	stw	r5,-8(fp)
  11cf8c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  11cf90:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  11cf94:	e0bfff17 	ldw	r2,-4(fp)
  11cf98:	10003526 	beq	r2,zero,11d070 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  11cf9c:	e0bffd17 	ldw	r2,-12(fp)
  11cfa0:	1000041e 	bne	r2,zero,11cfb4 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  11cfa4:	e0bfff17 	ldw	r2,-4(fp)
  11cfa8:	00c01804 	movi	r3,96
  11cfac:	10c00005 	stb	r3,0(r2)
        return;
  11cfb0:	00003006 	br	11d074 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  11cfb4:	e0bffe17 	ldw	r2,-8(fp)
  11cfb8:	1000041e 	bne	r2,zero,11cfcc <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  11cfbc:	e0bfff17 	ldw	r2,-4(fp)
  11cfc0:	00c00304 	movi	r3,12
  11cfc4:	10c00005 	stb	r3,0(r2)
        return;
  11cfc8:	00002a06 	br	11d074 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  11cfcc:	d0a74703 	ldbu	r2,-25316(gp)
  11cfd0:	10803fcc 	andi	r2,r2,255
  11cfd4:	10000426 	beq	r2,zero,11cfe8 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  11cfd8:	e0bfff17 	ldw	r2,-4(fp)
  11cfdc:	00c00484 	movi	r3,18
  11cfe0:	10c00005 	stb	r3,0(r2)
        return;
  11cfe4:	00002306 	br	11d074 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11cfe8:	0005303a 	rdctl	r2,status
  11cfec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11cff0:	e0fffc17 	ldw	r3,-16(fp)
  11cff4:	00bfff84 	movi	r2,-2
  11cff8:	1884703a 	and	r2,r3,r2
  11cffc:	1001703a 	wrctl	status,r2
  
  return context;
  11d000:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  11d004:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  11d008:	e13ffe17 	ldw	r4,-8(fp)
  11d00c:	011ae000 	call	11ae00 <OS_StrLen>
  11d010:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  11d014:	e0bffa03 	ldbu	r2,-24(fp)
  11d018:	10800830 	cmpltui	r2,r2,32
  11d01c:	1000081e 	bne	r2,zero,11d040 <OSMemNameSet+0xcc>
  11d020:	e0bff817 	ldw	r2,-32(fp)
  11d024:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11d028:	e0bff917 	ldw	r2,-28(fp)
  11d02c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  11d030:	e0bfff17 	ldw	r2,-4(fp)
  11d034:	00c018c4 	movi	r3,99
  11d038:	10c00005 	stb	r3,0(r2)
        return;
  11d03c:	00000d06 	br	11d074 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  11d040:	e0bffd17 	ldw	r2,-12(fp)
  11d044:	10800504 	addi	r2,r2,20
  11d048:	e17ffe17 	ldw	r5,-8(fp)
  11d04c:	1009883a 	mov	r4,r2
  11d050:	011ad8c0 	call	11ad8c <OS_StrCopy>
  11d054:	e0bff817 	ldw	r2,-32(fp)
  11d058:	e0bffb15 	stw	r2,-20(fp)
  11d05c:	e0bffb17 	ldw	r2,-20(fp)
  11d060:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  11d064:	e0bfff17 	ldw	r2,-4(fp)
  11d068:	10000005 	stb	zero,0(r2)
  11d06c:	00000106 	br	11d074 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  11d070:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  11d074:	e037883a 	mov	sp,fp
  11d078:	dfc00117 	ldw	ra,4(sp)
  11d07c:	df000017 	ldw	fp,0(sp)
  11d080:	dec00204 	addi	sp,sp,8
  11d084:	f800283a 	ret

0011d088 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  11d088:	defff904 	addi	sp,sp,-28
  11d08c:	df000615 	stw	fp,24(sp)
  11d090:	df000604 	addi	fp,sp,24
  11d094:	e13ffe15 	stw	r4,-8(fp)
  11d098:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  11d09c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  11d0a0:	e0bffe17 	ldw	r2,-8(fp)
  11d0a4:	1000021e 	bne	r2,zero,11d0b0 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
  11d0a8:	00801804 	movi	r2,96
  11d0ac:	00002806 	br	11d150 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  11d0b0:	e0bfff17 	ldw	r2,-4(fp)
  11d0b4:	1000021e 	bne	r2,zero,11d0c0 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
  11d0b8:	008017c4 	movi	r2,95
  11d0bc:	00002406 	br	11d150 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11d0c0:	0005303a 	rdctl	r2,status
  11d0c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11d0c8:	e0fffd17 	ldw	r3,-12(fp)
  11d0cc:	00bfff84 	movi	r2,-2
  11d0d0:	1884703a 	and	r2,r3,r2
  11d0d4:	1001703a 	wrctl	status,r2
  
  return context;
  11d0d8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  11d0dc:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  11d0e0:	e0bffe17 	ldw	r2,-8(fp)
  11d0e4:	10c00417 	ldw	r3,16(r2)
  11d0e8:	e0bffe17 	ldw	r2,-8(fp)
  11d0ec:	10800317 	ldw	r2,12(r2)
  11d0f0:	18800636 	bltu	r3,r2,11d10c <OSMemPut+0x84>
  11d0f4:	e0bffa17 	ldw	r2,-24(fp)
  11d0f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11d0fc:	e0bffb17 	ldw	r2,-20(fp)
  11d100:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  11d104:	00801784 	movi	r2,94
  11d108:	00001106 	br	11d150 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  11d10c:	e0bffe17 	ldw	r2,-8(fp)
  11d110:	10c00117 	ldw	r3,4(r2)
  11d114:	e0bfff17 	ldw	r2,-4(fp)
  11d118:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
  11d11c:	e0bffe17 	ldw	r2,-8(fp)
  11d120:	e0ffff17 	ldw	r3,-4(fp)
  11d124:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  11d128:	e0bffe17 	ldw	r2,-8(fp)
  11d12c:	10800417 	ldw	r2,16(r2)
  11d130:	10c00044 	addi	r3,r2,1
  11d134:	e0bffe17 	ldw	r2,-8(fp)
  11d138:	10c00415 	stw	r3,16(r2)
  11d13c:	e0bffa17 	ldw	r2,-24(fp)
  11d140:	e0bffc15 	stw	r2,-16(fp)
  11d144:	e0bffc17 	ldw	r2,-16(fp)
  11d148:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  11d14c:	0005883a 	mov	r2,zero
}
  11d150:	e037883a 	mov	sp,fp
  11d154:	df000017 	ldw	fp,0(sp)
  11d158:	dec00104 	addi	sp,sp,4
  11d15c:	f800283a 	ret

0011d160 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  11d160:	defffa04 	addi	sp,sp,-24
  11d164:	df000515 	stw	fp,20(sp)
  11d168:	df000504 	addi	fp,sp,20
  11d16c:	e13ffe15 	stw	r4,-8(fp)
  11d170:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  11d174:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  11d178:	e0bffe17 	ldw	r2,-8(fp)
  11d17c:	1000021e 	bne	r2,zero,11d188 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
  11d180:	00801804 	movi	r2,96
  11d184:	00002c06 	br	11d238 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  11d188:	e0bfff17 	ldw	r2,-4(fp)
  11d18c:	1000021e 	bne	r2,zero,11d198 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
  11d190:	00801844 	movi	r2,97
  11d194:	00002806 	br	11d238 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11d198:	0005303a 	rdctl	r2,status
  11d19c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11d1a0:	e0fffc17 	ldw	r3,-16(fp)
  11d1a4:	00bfff84 	movi	r2,-2
  11d1a8:	1884703a 	and	r2,r3,r2
  11d1ac:	1001703a 	wrctl	status,r2
  
  return context;
  11d1b0:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  11d1b4:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  11d1b8:	e0bffe17 	ldw	r2,-8(fp)
  11d1bc:	10c00017 	ldw	r3,0(r2)
  11d1c0:	e0bfff17 	ldw	r2,-4(fp)
  11d1c4:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  11d1c8:	e0bffe17 	ldw	r2,-8(fp)
  11d1cc:	10c00117 	ldw	r3,4(r2)
  11d1d0:	e0bfff17 	ldw	r2,-4(fp)
  11d1d4:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  11d1d8:	e0bffe17 	ldw	r2,-8(fp)
  11d1dc:	10c00217 	ldw	r3,8(r2)
  11d1e0:	e0bfff17 	ldw	r2,-4(fp)
  11d1e4:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  11d1e8:	e0bffe17 	ldw	r2,-8(fp)
  11d1ec:	10c00317 	ldw	r3,12(r2)
  11d1f0:	e0bfff17 	ldw	r2,-4(fp)
  11d1f4:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  11d1f8:	e0bffe17 	ldw	r2,-8(fp)
  11d1fc:	10c00417 	ldw	r3,16(r2)
  11d200:	e0bfff17 	ldw	r2,-4(fp)
  11d204:	10c00415 	stw	r3,16(r2)
  11d208:	e0bffb17 	ldw	r2,-20(fp)
  11d20c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11d210:	e0bffd17 	ldw	r2,-12(fp)
  11d214:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  11d218:	e0bfff17 	ldw	r2,-4(fp)
  11d21c:	10c00317 	ldw	r3,12(r2)
  11d220:	e0bfff17 	ldw	r2,-4(fp)
  11d224:	10800417 	ldw	r2,16(r2)
  11d228:	1887c83a 	sub	r3,r3,r2
  11d22c:	e0bfff17 	ldw	r2,-4(fp)
  11d230:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  11d234:	0005883a 	mov	r2,zero
}
  11d238:	e037883a 	mov	sp,fp
  11d23c:	df000017 	ldw	fp,0(sp)
  11d240:	dec00104 	addi	sp,sp,4
  11d244:	f800283a 	ret

0011d248 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  11d248:	defffc04 	addi	sp,sp,-16
  11d24c:	dfc00315 	stw	ra,12(sp)
  11d250:	df000215 	stw	fp,8(sp)
  11d254:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  11d258:	01430c04 	movi	r5,3120
  11d25c:	010004f4 	movhi	r4,19
  11d260:	212db004 	addi	r4,r4,-18752
  11d264:	011ab8c0 	call	11ab8c <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  11d268:	008004f4 	movhi	r2,19
  11d26c:	10adb004 	addi	r2,r2,-18752
  11d270:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  11d274:	e03fff0d 	sth	zero,-4(fp)
  11d278:	00001606 	br	11d2d4 <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  11d27c:	e0bfff0b 	ldhu	r2,-4(fp)
  11d280:	10800044 	addi	r2,r2,1
  11d284:	01400d04 	movi	r5,52
  11d288:	1009883a 	mov	r4,r2
  11d28c:	01159fc0 	call	1159fc <__mulsi3>
  11d290:	1007883a 	mov	r3,r2
  11d294:	008004f4 	movhi	r2,19
  11d298:	10adb004 	addi	r2,r2,-18752
  11d29c:	1887883a 	add	r3,r3,r2
  11d2a0:	e0bffe17 	ldw	r2,-8(fp)
  11d2a4:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  11d2a8:	e0bffe17 	ldw	r2,-8(fp)
  11d2ac:	00c00fc4 	movi	r3,63
  11d2b0:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  11d2b4:	e0bffe17 	ldw	r2,-8(fp)
  11d2b8:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  11d2bc:	e0bffe17 	ldw	r2,-8(fp)
  11d2c0:	10800d04 	addi	r2,r2,52
  11d2c4:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  11d2c8:	e0bfff0b 	ldhu	r2,-4(fp)
  11d2cc:	10800044 	addi	r2,r2,1
  11d2d0:	e0bfff0d 	sth	r2,-4(fp)
  11d2d4:	e0bfff0b 	ldhu	r2,-4(fp)
  11d2d8:	10800ef0 	cmpltui	r2,r2,59
  11d2dc:	103fe71e 	bne	r2,zero,11d27c <__alt_data_end+0xfffdd27c>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  11d2e0:	e0bffe17 	ldw	r2,-8(fp)
  11d2e4:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  11d2e8:	e0bffe17 	ldw	r2,-8(fp)
  11d2ec:	00c00fc4 	movi	r3,63
  11d2f0:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  11d2f4:	e0bffe17 	ldw	r2,-8(fp)
  11d2f8:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  11d2fc:	008004f4 	movhi	r2,19
  11d300:	10adb004 	addi	r2,r2,-18752
  11d304:	d0a74215 	stw	r2,-25336(gp)
#endif
}
  11d308:	0001883a 	nop
  11d30c:	e037883a 	mov	sp,fp
  11d310:	dfc00117 	ldw	ra,4(sp)
  11d314:	df000017 	ldw	fp,0(sp)
  11d318:	dec00204 	addi	sp,sp,8
  11d31c:	f800283a 	ret

0011d320 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  11d320:	defff804 	addi	sp,sp,-32
  11d324:	df000715 	stw	fp,28(sp)
  11d328:	df000704 	addi	fp,sp,28
  11d32c:	e13ffe15 	stw	r4,-8(fp)
  11d330:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  11d334:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  11d338:	e0bfff17 	ldw	r2,-4(fp)
  11d33c:	1000021e 	bne	r2,zero,11d348 <OSQAccept+0x28>
        return ((void *)0);
  11d340:	0005883a 	mov	r2,zero
  11d344:	00004206 	br	11d450 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  11d348:	e0bffe17 	ldw	r2,-8(fp)
  11d34c:	1000051e 	bne	r2,zero,11d364 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  11d350:	e0bfff17 	ldw	r2,-4(fp)
  11d354:	00c00104 	movi	r3,4
  11d358:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  11d35c:	0005883a 	mov	r2,zero
  11d360:	00003b06 	br	11d450 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  11d364:	e0bffe17 	ldw	r2,-8(fp)
  11d368:	10800003 	ldbu	r2,0(r2)
  11d36c:	10803fcc 	andi	r2,r2,255
  11d370:	108000a0 	cmpeqi	r2,r2,2
  11d374:	1000051e 	bne	r2,zero,11d38c <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  11d378:	e0bfff17 	ldw	r2,-4(fp)
  11d37c:	00c00044 	movi	r3,1
  11d380:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  11d384:	0005883a 	mov	r2,zero
  11d388:	00003106 	br	11d450 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11d38c:	0005303a 	rdctl	r2,status
  11d390:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11d394:	e0fffd17 	ldw	r3,-12(fp)
  11d398:	00bfff84 	movi	r2,-2
  11d39c:	1884703a 	and	r2,r3,r2
  11d3a0:	1001703a 	wrctl	status,r2
  
  return context;
  11d3a4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  11d3a8:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  11d3ac:	e0bffe17 	ldw	r2,-8(fp)
  11d3b0:	10800117 	ldw	r2,4(r2)
  11d3b4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  11d3b8:	e0bffc17 	ldw	r2,-16(fp)
  11d3bc:	1080058b 	ldhu	r2,22(r2)
  11d3c0:	10bfffcc 	andi	r2,r2,65535
  11d3c4:	10001926 	beq	r2,zero,11d42c <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  11d3c8:	e0bffc17 	ldw	r2,-16(fp)
  11d3cc:	10800417 	ldw	r2,16(r2)
  11d3d0:	11000104 	addi	r4,r2,4
  11d3d4:	e0fffc17 	ldw	r3,-16(fp)
  11d3d8:	19000415 	stw	r4,16(r3)
  11d3dc:	10800017 	ldw	r2,0(r2)
  11d3e0:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  11d3e4:	e0bffc17 	ldw	r2,-16(fp)
  11d3e8:	1080058b 	ldhu	r2,22(r2)
  11d3ec:	10bfffc4 	addi	r2,r2,-1
  11d3f0:	1007883a 	mov	r3,r2
  11d3f4:	e0bffc17 	ldw	r2,-16(fp)
  11d3f8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  11d3fc:	e0bffc17 	ldw	r2,-16(fp)
  11d400:	10c00417 	ldw	r3,16(r2)
  11d404:	e0bffc17 	ldw	r2,-16(fp)
  11d408:	10800217 	ldw	r2,8(r2)
  11d40c:	1880041e 	bne	r3,r2,11d420 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
  11d410:	e0bffc17 	ldw	r2,-16(fp)
  11d414:	10c00117 	ldw	r3,4(r2)
  11d418:	e0bffc17 	ldw	r2,-16(fp)
  11d41c:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  11d420:	e0bfff17 	ldw	r2,-4(fp)
  11d424:	10000005 	stb	zero,0(r2)
  11d428:	00000406 	br	11d43c <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  11d42c:	e0bfff17 	ldw	r2,-4(fp)
  11d430:	00c007c4 	movi	r3,31
  11d434:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  11d438:	e03ff915 	stw	zero,-28(fp)
  11d43c:	e0bffa17 	ldw	r2,-24(fp)
  11d440:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11d444:	e0bffb17 	ldw	r2,-20(fp)
  11d448:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  11d44c:	e0bff917 	ldw	r2,-28(fp)
}
  11d450:	e037883a 	mov	sp,fp
  11d454:	df000017 	ldw	fp,0(sp)
  11d458:	dec00104 	addi	sp,sp,4
  11d45c:	f800283a 	ret

0011d460 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  11d460:	defff404 	addi	sp,sp,-48
  11d464:	dfc00b15 	stw	ra,44(sp)
  11d468:	df000a15 	stw	fp,40(sp)
  11d46c:	df000a04 	addi	fp,sp,40
  11d470:	e13ffe15 	stw	r4,-8(fp)
  11d474:	2805883a 	mov	r2,r5
  11d478:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  11d47c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  11d480:	d0a74703 	ldbu	r2,-25316(gp)
  11d484:	10803fcc 	andi	r2,r2,255
  11d488:	10000226 	beq	r2,zero,11d494 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  11d48c:	0005883a 	mov	r2,zero
  11d490:	00005906 	br	11d5f8 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11d494:	0005303a 	rdctl	r2,status
  11d498:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11d49c:	e0fffd17 	ldw	r3,-12(fp)
  11d4a0:	00bfff84 	movi	r2,-2
  11d4a4:	1884703a 	and	r2,r3,r2
  11d4a8:	1001703a 	wrctl	status,r2
  
  return context;
  11d4ac:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  11d4b0:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  11d4b4:	d0a74617 	ldw	r2,-25320(gp)
  11d4b8:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  11d4bc:	d0a74617 	ldw	r2,-25320(gp)
  11d4c0:	10000326 	beq	r2,zero,11d4d0 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  11d4c4:	d0a74617 	ldw	r2,-25320(gp)
  11d4c8:	10800117 	ldw	r2,4(r2)
  11d4cc:	d0a74615 	stw	r2,-25320(gp)
  11d4d0:	e0bff717 	ldw	r2,-36(fp)
  11d4d4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11d4d8:	e0bff817 	ldw	r2,-32(fp)
  11d4dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  11d4e0:	e0bff617 	ldw	r2,-40(fp)
  11d4e4:	10004326 	beq	r2,zero,11d5f4 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11d4e8:	0005303a 	rdctl	r2,status
  11d4ec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11d4f0:	e0fff917 	ldw	r3,-28(fp)
  11d4f4:	00bfff84 	movi	r2,-2
  11d4f8:	1884703a 	and	r2,r3,r2
  11d4fc:	1001703a 	wrctl	status,r2
  
  return context;
  11d500:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
  11d504:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  11d508:	d0a74417 	ldw	r2,-25328(gp)
  11d50c:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  11d510:	e0bffb17 	ldw	r2,-20(fp)
  11d514:	10002d26 	beq	r2,zero,11d5cc <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  11d518:	d0a74417 	ldw	r2,-25328(gp)
  11d51c:	10800017 	ldw	r2,0(r2)
  11d520:	d0a74415 	stw	r2,-25328(gp)
  11d524:	e0bff717 	ldw	r2,-36(fp)
  11d528:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11d52c:	e0bffa17 	ldw	r2,-24(fp)
  11d530:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  11d534:	e0bffb17 	ldw	r2,-20(fp)
  11d538:	e0fffe17 	ldw	r3,-8(fp)
  11d53c:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
  11d540:	e0bfff0b 	ldhu	r2,-4(fp)
  11d544:	1085883a 	add	r2,r2,r2
  11d548:	1085883a 	add	r2,r2,r2
  11d54c:	1007883a 	mov	r3,r2
  11d550:	e0bffe17 	ldw	r2,-8(fp)
  11d554:	10c7883a 	add	r3,r2,r3
  11d558:	e0bffb17 	ldw	r2,-20(fp)
  11d55c:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  11d560:	e0bffb17 	ldw	r2,-20(fp)
  11d564:	e0fffe17 	ldw	r3,-8(fp)
  11d568:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
  11d56c:	e0bffb17 	ldw	r2,-20(fp)
  11d570:	e0fffe17 	ldw	r3,-8(fp)
  11d574:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
  11d578:	e0bffb17 	ldw	r2,-20(fp)
  11d57c:	e0ffff0b 	ldhu	r3,-4(fp)
  11d580:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
  11d584:	e0bffb17 	ldw	r2,-20(fp)
  11d588:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  11d58c:	e0bff617 	ldw	r2,-40(fp)
  11d590:	00c00084 	movi	r3,2
  11d594:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
  11d598:	e0bff617 	ldw	r2,-40(fp)
  11d59c:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  11d5a0:	e0bff617 	ldw	r2,-40(fp)
  11d5a4:	e0fffb17 	ldw	r3,-20(fp)
  11d5a8:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  11d5ac:	e0bff617 	ldw	r2,-40(fp)
  11d5b0:	00c00fc4 	movi	r3,63
  11d5b4:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  11d5b8:	e0bff617 	ldw	r2,-40(fp)
  11d5bc:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  11d5c0:	e13ff617 	ldw	r4,-40(fp)
  11d5c4:	011a7ac0 	call	11a7ac <OS_EventWaitListInit>
  11d5c8:	00000a06 	br	11d5f4 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  11d5cc:	d0e74617 	ldw	r3,-25320(gp)
  11d5d0:	e0bff617 	ldw	r2,-40(fp)
  11d5d4:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  11d5d8:	e0bff617 	ldw	r2,-40(fp)
  11d5dc:	d0a74615 	stw	r2,-25320(gp)
  11d5e0:	e0bff717 	ldw	r2,-36(fp)
  11d5e4:	e0bffc15 	stw	r2,-16(fp)
  11d5e8:	e0bffc17 	ldw	r2,-16(fp)
  11d5ec:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  11d5f0:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
  11d5f4:	e0bff617 	ldw	r2,-40(fp)
}
  11d5f8:	e037883a 	mov	sp,fp
  11d5fc:	dfc00117 	ldw	ra,4(sp)
  11d600:	df000017 	ldw	fp,0(sp)
  11d604:	dec00204 	addi	sp,sp,8
  11d608:	f800283a 	ret

0011d60c <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  11d60c:	defff204 	addi	sp,sp,-56
  11d610:	dfc00d15 	stw	ra,52(sp)
  11d614:	df000c15 	stw	fp,48(sp)
  11d618:	df000c04 	addi	fp,sp,48
  11d61c:	e13ffd15 	stw	r4,-12(fp)
  11d620:	2805883a 	mov	r2,r5
  11d624:	e1bfff15 	stw	r6,-4(fp)
  11d628:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  11d62c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  11d630:	e0bfff17 	ldw	r2,-4(fp)
  11d634:	1000021e 	bne	r2,zero,11d640 <OSQDel+0x34>
        return (pevent);
  11d638:	e0bffd17 	ldw	r2,-12(fp)
  11d63c:	00008e06 	br	11d878 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  11d640:	e0bffd17 	ldw	r2,-12(fp)
  11d644:	1000051e 	bne	r2,zero,11d65c <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  11d648:	e0bfff17 	ldw	r2,-4(fp)
  11d64c:	00c00104 	movi	r3,4
  11d650:	10c00005 	stb	r3,0(r2)
        return (pevent);
  11d654:	e0bffd17 	ldw	r2,-12(fp)
  11d658:	00008706 	br	11d878 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  11d65c:	e0bffd17 	ldw	r2,-12(fp)
  11d660:	10800003 	ldbu	r2,0(r2)
  11d664:	10803fcc 	andi	r2,r2,255
  11d668:	108000a0 	cmpeqi	r2,r2,2
  11d66c:	1000051e 	bne	r2,zero,11d684 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  11d670:	e0bfff17 	ldw	r2,-4(fp)
  11d674:	00c00044 	movi	r3,1
  11d678:	10c00005 	stb	r3,0(r2)
        return (pevent);
  11d67c:	e0bffd17 	ldw	r2,-12(fp)
  11d680:	00007d06 	br	11d878 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  11d684:	d0a74703 	ldbu	r2,-25316(gp)
  11d688:	10803fcc 	andi	r2,r2,255
  11d68c:	10000526 	beq	r2,zero,11d6a4 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  11d690:	e0bfff17 	ldw	r2,-4(fp)
  11d694:	00c003c4 	movi	r3,15
  11d698:	10c00005 	stb	r3,0(r2)
        return (pevent);
  11d69c:	e0bffd17 	ldw	r2,-12(fp)
  11d6a0:	00007506 	br	11d878 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11d6a4:	0005303a 	rdctl	r2,status
  11d6a8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11d6ac:	e0fffc17 	ldw	r3,-16(fp)
  11d6b0:	00bfff84 	movi	r2,-2
  11d6b4:	1884703a 	and	r2,r3,r2
  11d6b8:	1001703a 	wrctl	status,r2
  
  return context;
  11d6bc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  11d6c0:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  11d6c4:	e0bffd17 	ldw	r2,-12(fp)
  11d6c8:	10800283 	ldbu	r2,10(r2)
  11d6cc:	10803fcc 	andi	r2,r2,255
  11d6d0:	10000326 	beq	r2,zero,11d6e0 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  11d6d4:	00800044 	movi	r2,1
  11d6d8:	e0bff405 	stb	r2,-48(fp)
  11d6dc:	00000106 	br	11d6e4 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  11d6e0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
  11d6e4:	e0bffe03 	ldbu	r2,-8(fp)
  11d6e8:	10000326 	beq	r2,zero,11d6f8 <OSQDel+0xec>
  11d6ec:	10800060 	cmpeqi	r2,r2,1
  11d6f0:	1000301e 	bne	r2,zero,11d7b4 <OSQDel+0x1a8>
  11d6f4:	00005506 	br	11d84c <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  11d6f8:	e0bff403 	ldbu	r2,-48(fp)
  11d6fc:	10001e1e 	bne	r2,zero,11d778 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  11d700:	e0bffd17 	ldw	r2,-12(fp)
  11d704:	00c00fc4 	movi	r3,63
  11d708:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  11d70c:	e0bffd17 	ldw	r2,-12(fp)
  11d710:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  11d714:	e0bffd17 	ldw	r2,-12(fp)
  11d718:	10800117 	ldw	r2,4(r2)
  11d71c:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  11d720:	d0e74417 	ldw	r3,-25328(gp)
  11d724:	e0bff817 	ldw	r2,-32(fp)
  11d728:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  11d72c:	e0bff817 	ldw	r2,-32(fp)
  11d730:	d0a74415 	stw	r2,-25328(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  11d734:	e0bffd17 	ldw	r2,-12(fp)
  11d738:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  11d73c:	d0e74617 	ldw	r3,-25320(gp)
  11d740:	e0bffd17 	ldw	r2,-12(fp)
  11d744:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  11d748:	e0bffd17 	ldw	r2,-12(fp)
  11d74c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  11d750:	e0bffd17 	ldw	r2,-12(fp)
  11d754:	d0a74615 	stw	r2,-25320(gp)
  11d758:	e0bff617 	ldw	r2,-40(fp)
  11d75c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11d760:	e0bff717 	ldw	r2,-36(fp)
  11d764:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  11d768:	e0bfff17 	ldw	r2,-4(fp)
  11d76c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  11d770:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
  11d774:	00003f06 	br	11d874 <OSQDel+0x268>
  11d778:	e0bff617 	ldw	r2,-40(fp)
  11d77c:	e0bff915 	stw	r2,-28(fp)
  11d780:	e0bff917 	ldw	r2,-28(fp)
  11d784:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  11d788:	e0bfff17 	ldw	r2,-4(fp)
  11d78c:	00c01244 	movi	r3,73
  11d790:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
  11d794:	e0bffd17 	ldw	r2,-12(fp)
  11d798:	e0bff515 	stw	r2,-44(fp)
             }
             break;
  11d79c:	00003506 	br	11d874 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  11d7a0:	000f883a 	mov	r7,zero
  11d7a4:	01800104 	movi	r6,4
  11d7a8:	000b883a 	mov	r5,zero
  11d7ac:	e13ffd17 	ldw	r4,-12(fp)
  11d7b0:	011a1fc0 	call	11a1fc <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  11d7b4:	e0bffd17 	ldw	r2,-12(fp)
  11d7b8:	10800283 	ldbu	r2,10(r2)
  11d7bc:	10803fcc 	andi	r2,r2,255
  11d7c0:	103ff71e 	bne	r2,zero,11d7a0 <__alt_data_end+0xfffdd7a0>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  11d7c4:	e0bffd17 	ldw	r2,-12(fp)
  11d7c8:	00c00fc4 	movi	r3,63
  11d7cc:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  11d7d0:	e0bffd17 	ldw	r2,-12(fp)
  11d7d4:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  11d7d8:	e0bffd17 	ldw	r2,-12(fp)
  11d7dc:	10800117 	ldw	r2,4(r2)
  11d7e0:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  11d7e4:	d0e74417 	ldw	r3,-25328(gp)
  11d7e8:	e0bff817 	ldw	r2,-32(fp)
  11d7ec:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  11d7f0:	e0bff817 	ldw	r2,-32(fp)
  11d7f4:	d0a74415 	stw	r2,-25328(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  11d7f8:	e0bffd17 	ldw	r2,-12(fp)
  11d7fc:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  11d800:	d0e74617 	ldw	r3,-25320(gp)
  11d804:	e0bffd17 	ldw	r2,-12(fp)
  11d808:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  11d80c:	e0bffd17 	ldw	r2,-12(fp)
  11d810:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  11d814:	e0bffd17 	ldw	r2,-12(fp)
  11d818:	d0a74615 	stw	r2,-25320(gp)
  11d81c:	e0bff617 	ldw	r2,-40(fp)
  11d820:	e0bffa15 	stw	r2,-24(fp)
  11d824:	e0bffa17 	ldw	r2,-24(fp)
  11d828:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  11d82c:	e0bff403 	ldbu	r2,-48(fp)
  11d830:	10800058 	cmpnei	r2,r2,1
  11d834:	1000011e 	bne	r2,zero,11d83c <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  11d838:	011ac480 	call	11ac48 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  11d83c:	e0bfff17 	ldw	r2,-4(fp)
  11d840:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  11d844:	e03ff515 	stw	zero,-44(fp)
             break;
  11d848:	00000a06 	br	11d874 <OSQDel+0x268>
  11d84c:	e0bff617 	ldw	r2,-40(fp)
  11d850:	e0bffb15 	stw	r2,-20(fp)
  11d854:	e0bffb17 	ldw	r2,-20(fp)
  11d858:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  11d85c:	e0bfff17 	ldw	r2,-4(fp)
  11d860:	00c001c4 	movi	r3,7
  11d864:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
  11d868:	e0bffd17 	ldw	r2,-12(fp)
  11d86c:	e0bff515 	stw	r2,-44(fp)
             break;
  11d870:	0001883a 	nop
    }
    return (pevent_return);
  11d874:	e0bff517 	ldw	r2,-44(fp)
}
  11d878:	e037883a 	mov	sp,fp
  11d87c:	dfc00117 	ldw	ra,4(sp)
  11d880:	df000017 	ldw	fp,0(sp)
  11d884:	dec00204 	addi	sp,sp,8
  11d888:	f800283a 	ret

0011d88c <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  11d88c:	defffa04 	addi	sp,sp,-24
  11d890:	df000515 	stw	fp,20(sp)
  11d894:	df000504 	addi	fp,sp,20
  11d898:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  11d89c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  11d8a0:	e0bfff17 	ldw	r2,-4(fp)
  11d8a4:	1000021e 	bne	r2,zero,11d8b0 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
  11d8a8:	00800104 	movi	r2,4
  11d8ac:	00002106 	br	11d934 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  11d8b0:	e0bfff17 	ldw	r2,-4(fp)
  11d8b4:	10800003 	ldbu	r2,0(r2)
  11d8b8:	10803fcc 	andi	r2,r2,255
  11d8bc:	108000a0 	cmpeqi	r2,r2,2
  11d8c0:	1000021e 	bne	r2,zero,11d8cc <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
  11d8c4:	00800044 	movi	r2,1
  11d8c8:	00001a06 	br	11d934 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11d8cc:	0005303a 	rdctl	r2,status
  11d8d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11d8d4:	e0fffd17 	ldw	r3,-12(fp)
  11d8d8:	00bfff84 	movi	r2,-2
  11d8dc:	1884703a 	and	r2,r3,r2
  11d8e0:	1001703a 	wrctl	status,r2
  
  return context;
  11d8e4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  11d8e8:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  11d8ec:	e0bfff17 	ldw	r2,-4(fp)
  11d8f0:	10800117 	ldw	r2,4(r2)
  11d8f4:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
  11d8f8:	e0bffc17 	ldw	r2,-16(fp)
  11d8fc:	10c00117 	ldw	r3,4(r2)
  11d900:	e0bffc17 	ldw	r2,-16(fp)
  11d904:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  11d908:	e0bffc17 	ldw	r2,-16(fp)
  11d90c:	10c00117 	ldw	r3,4(r2)
  11d910:	e0bffc17 	ldw	r2,-16(fp)
  11d914:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  11d918:	e0bffc17 	ldw	r2,-16(fp)
  11d91c:	1000058d 	sth	zero,22(r2)
  11d920:	e0bffb17 	ldw	r2,-20(fp)
  11d924:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11d928:	e0bffe17 	ldw	r2,-8(fp)
  11d92c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  11d930:	0005883a 	mov	r2,zero
}
  11d934:	e037883a 	mov	sp,fp
  11d938:	df000017 	ldw	fp,0(sp)
  11d93c:	dec00104 	addi	sp,sp,4
  11d940:	f800283a 	ret

0011d944 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  11d944:	defff304 	addi	sp,sp,-52
  11d948:	dfc00c15 	stw	ra,48(sp)
  11d94c:	df000b15 	stw	fp,44(sp)
  11d950:	df000b04 	addi	fp,sp,44
  11d954:	e13ffd15 	stw	r4,-12(fp)
  11d958:	2805883a 	mov	r2,r5
  11d95c:	e1bfff15 	stw	r6,-4(fp)
  11d960:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  11d964:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  11d968:	e0bfff17 	ldw	r2,-4(fp)
  11d96c:	1000021e 	bne	r2,zero,11d978 <OSQPend+0x34>
        return ((void *)0);
  11d970:	0005883a 	mov	r2,zero
  11d974:	00009106 	br	11dbbc <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  11d978:	e0bffd17 	ldw	r2,-12(fp)
  11d97c:	1000051e 	bne	r2,zero,11d994 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  11d980:	e0bfff17 	ldw	r2,-4(fp)
  11d984:	00c00104 	movi	r3,4
  11d988:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  11d98c:	0005883a 	mov	r2,zero
  11d990:	00008a06 	br	11dbbc <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  11d994:	e0bffd17 	ldw	r2,-12(fp)
  11d998:	10800003 	ldbu	r2,0(r2)
  11d99c:	10803fcc 	andi	r2,r2,255
  11d9a0:	108000a0 	cmpeqi	r2,r2,2
  11d9a4:	1000051e 	bne	r2,zero,11d9bc <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  11d9a8:	e0bfff17 	ldw	r2,-4(fp)
  11d9ac:	00c00044 	movi	r3,1
  11d9b0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  11d9b4:	0005883a 	mov	r2,zero
  11d9b8:	00008006 	br	11dbbc <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  11d9bc:	d0a74703 	ldbu	r2,-25316(gp)
  11d9c0:	10803fcc 	andi	r2,r2,255
  11d9c4:	10000526 	beq	r2,zero,11d9dc <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  11d9c8:	e0bfff17 	ldw	r2,-4(fp)
  11d9cc:	00c00084 	movi	r3,2
  11d9d0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  11d9d4:	0005883a 	mov	r2,zero
  11d9d8:	00007806 	br	11dbbc <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  11d9dc:	d0a73903 	ldbu	r2,-25372(gp)
  11d9e0:	10803fcc 	andi	r2,r2,255
  11d9e4:	10000526 	beq	r2,zero,11d9fc <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  11d9e8:	e0bfff17 	ldw	r2,-4(fp)
  11d9ec:	00c00344 	movi	r3,13
  11d9f0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  11d9f4:	0005883a 	mov	r2,zero
  11d9f8:	00007006 	br	11dbbc <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11d9fc:	0005303a 	rdctl	r2,status
  11da00:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11da04:	e0fffc17 	ldw	r3,-16(fp)
  11da08:	00bfff84 	movi	r2,-2
  11da0c:	1884703a 	and	r2,r3,r2
  11da10:	1001703a 	wrctl	status,r2
  
  return context;
  11da14:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  11da18:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  11da1c:	e0bffd17 	ldw	r2,-12(fp)
  11da20:	10800117 	ldw	r2,4(r2)
  11da24:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  11da28:	e0bff817 	ldw	r2,-32(fp)
  11da2c:	1080058b 	ldhu	r2,22(r2)
  11da30:	10bfffcc 	andi	r2,r2,65535
  11da34:	10001e26 	beq	r2,zero,11dab0 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  11da38:	e0bff817 	ldw	r2,-32(fp)
  11da3c:	10800417 	ldw	r2,16(r2)
  11da40:	11000104 	addi	r4,r2,4
  11da44:	e0fff817 	ldw	r3,-32(fp)
  11da48:	19000415 	stw	r4,16(r3)
  11da4c:	10800017 	ldw	r2,0(r2)
  11da50:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  11da54:	e0bff817 	ldw	r2,-32(fp)
  11da58:	1080058b 	ldhu	r2,22(r2)
  11da5c:	10bfffc4 	addi	r2,r2,-1
  11da60:	1007883a 	mov	r3,r2
  11da64:	e0bff817 	ldw	r2,-32(fp)
  11da68:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  11da6c:	e0bff817 	ldw	r2,-32(fp)
  11da70:	10c00417 	ldw	r3,16(r2)
  11da74:	e0bff817 	ldw	r2,-32(fp)
  11da78:	10800217 	ldw	r2,8(r2)
  11da7c:	1880041e 	bne	r3,r2,11da90 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
  11da80:	e0bff817 	ldw	r2,-32(fp)
  11da84:	10c00117 	ldw	r3,4(r2)
  11da88:	e0bff817 	ldw	r2,-32(fp)
  11da8c:	10c00415 	stw	r3,16(r2)
  11da90:	e0bff617 	ldw	r2,-40(fp)
  11da94:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11da98:	e0bff717 	ldw	r2,-36(fp)
  11da9c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  11daa0:	e0bfff17 	ldw	r2,-4(fp)
  11daa4:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  11daa8:	e0bff517 	ldw	r2,-44(fp)
  11daac:	00004306 	br	11dbbc <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  11dab0:	d0a74817 	ldw	r2,-25312(gp)
  11dab4:	d0e74817 	ldw	r3,-25312(gp)
  11dab8:	18c00c03 	ldbu	r3,48(r3)
  11dabc:	18c00114 	ori	r3,r3,4
  11dac0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  11dac4:	d0a74817 	ldw	r2,-25312(gp)
  11dac8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  11dacc:	d0a74817 	ldw	r2,-25312(gp)
  11dad0:	e0fffe0b 	ldhu	r3,-8(fp)
  11dad4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  11dad8:	e13ffd17 	ldw	r4,-12(fp)
  11dadc:	011a3940 	call	11a394 <OS_EventTaskWait>
  11dae0:	e0bff617 	ldw	r2,-40(fp)
  11dae4:	e0bffb15 	stw	r2,-20(fp)
  11dae8:	e0bffb17 	ldw	r2,-20(fp)
  11daec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  11daf0:	011ac480 	call	11ac48 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11daf4:	0005303a 	rdctl	r2,status
  11daf8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11dafc:	e0fff917 	ldw	r3,-28(fp)
  11db00:	00bfff84 	movi	r2,-2
  11db04:	1884703a 	and	r2,r3,r2
  11db08:	1001703a 	wrctl	status,r2
  
  return context;
  11db0c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
  11db10:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  11db14:	d0a74817 	ldw	r2,-25312(gp)
  11db18:	10800c43 	ldbu	r2,49(r2)
  11db1c:	10803fcc 	andi	r2,r2,255
  11db20:	10000326 	beq	r2,zero,11db30 <OSQPend+0x1ec>
  11db24:	108000a0 	cmpeqi	r2,r2,2
  11db28:	1000071e 	bne	r2,zero,11db48 <OSQPend+0x204>
  11db2c:	00000b06 	br	11db5c <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  11db30:	d0a74817 	ldw	r2,-25312(gp)
  11db34:	10800917 	ldw	r2,36(r2)
  11db38:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
  11db3c:	e0bfff17 	ldw	r2,-4(fp)
  11db40:	10000005 	stb	zero,0(r2)
             break;
  11db44:	00000e06 	br	11db80 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  11db48:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  11db4c:	e0bfff17 	ldw	r2,-4(fp)
  11db50:	00c00384 	movi	r3,14
  11db54:	10c00005 	stb	r3,0(r2)
             break;
  11db58:	00000906 	br	11db80 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  11db5c:	d0a74817 	ldw	r2,-25312(gp)
  11db60:	e17ffd17 	ldw	r5,-12(fp)
  11db64:	1009883a 	mov	r4,r2
  11db68:	011a5f40 	call	11a5f4 <OS_EventTaskRemove>
             pmsg = (void *)0;
  11db6c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  11db70:	e0bfff17 	ldw	r2,-4(fp)
  11db74:	00c00284 	movi	r3,10
  11db78:	10c00005 	stb	r3,0(r2)
             break;
  11db7c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  11db80:	d0a74817 	ldw	r2,-25312(gp)
  11db84:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  11db88:	d0a74817 	ldw	r2,-25312(gp)
  11db8c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  11db90:	d0a74817 	ldw	r2,-25312(gp)
  11db94:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  11db98:	d0a74817 	ldw	r2,-25312(gp)
  11db9c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  11dba0:	d0a74817 	ldw	r2,-25312(gp)
  11dba4:	10000915 	stw	zero,36(r2)
  11dba8:	e0bff617 	ldw	r2,-40(fp)
  11dbac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11dbb0:	e0bffa17 	ldw	r2,-24(fp)
  11dbb4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  11dbb8:	e0bff517 	ldw	r2,-44(fp)
}
  11dbbc:	e037883a 	mov	sp,fp
  11dbc0:	dfc00117 	ldw	ra,4(sp)
  11dbc4:	df000017 	ldw	fp,0(sp)
  11dbc8:	dec00204 	addi	sp,sp,8
  11dbcc:	f800283a 	ret

0011dbd0 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  11dbd0:	defff604 	addi	sp,sp,-40
  11dbd4:	dfc00915 	stw	ra,36(sp)
  11dbd8:	df000815 	stw	fp,32(sp)
  11dbdc:	df000804 	addi	fp,sp,32
  11dbe0:	e13ffd15 	stw	r4,-12(fp)
  11dbe4:	2805883a 	mov	r2,r5
  11dbe8:	e1bfff15 	stw	r6,-4(fp)
  11dbec:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  11dbf0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  11dbf4:	e0bfff17 	ldw	r2,-4(fp)
  11dbf8:	1000021e 	bne	r2,zero,11dc04 <OSQPendAbort+0x34>
        return (0);
  11dbfc:	0005883a 	mov	r2,zero
  11dc00:	00004906 	br	11dd28 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  11dc04:	e0bffd17 	ldw	r2,-12(fp)
  11dc08:	1000051e 	bne	r2,zero,11dc20 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  11dc0c:	e0bfff17 	ldw	r2,-4(fp)
  11dc10:	00c00104 	movi	r3,4
  11dc14:	10c00005 	stb	r3,0(r2)
        return (0);
  11dc18:	0005883a 	mov	r2,zero
  11dc1c:	00004206 	br	11dd28 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  11dc20:	e0bffd17 	ldw	r2,-12(fp)
  11dc24:	10800003 	ldbu	r2,0(r2)
  11dc28:	10803fcc 	andi	r2,r2,255
  11dc2c:	108000a0 	cmpeqi	r2,r2,2
  11dc30:	1000051e 	bne	r2,zero,11dc48 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  11dc34:	e0bfff17 	ldw	r2,-4(fp)
  11dc38:	00c00044 	movi	r3,1
  11dc3c:	10c00005 	stb	r3,0(r2)
        return (0);
  11dc40:	0005883a 	mov	r2,zero
  11dc44:	00003806 	br	11dd28 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11dc48:	0005303a 	rdctl	r2,status
  11dc4c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11dc50:	e0fffc17 	ldw	r3,-16(fp)
  11dc54:	00bfff84 	movi	r2,-2
  11dc58:	1884703a 	and	r2,r3,r2
  11dc5c:	1001703a 	wrctl	status,r2
  
  return context;
  11dc60:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  11dc64:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  11dc68:	e0bffd17 	ldw	r2,-12(fp)
  11dc6c:	10800283 	ldbu	r2,10(r2)
  11dc70:	10803fcc 	andi	r2,r2,255
  11dc74:	10002526 	beq	r2,zero,11dd0c <OSQPendAbort+0x13c>
        nbr_tasks = 0;
  11dc78:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
  11dc7c:	e0bffe03 	ldbu	r2,-8(fp)
  11dc80:	10800060 	cmpeqi	r2,r2,1
  11dc84:	10000e26 	beq	r2,zero,11dcc0 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  11dc88:	00000806 	br	11dcac <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  11dc8c:	01c00084 	movi	r7,2
  11dc90:	01800104 	movi	r6,4
  11dc94:	000b883a 	mov	r5,zero
  11dc98:	e13ffd17 	ldw	r4,-12(fp)
  11dc9c:	011a1fc0 	call	11a1fc <OS_EventTaskRdy>
                     nbr_tasks++;
  11dca0:	e0bff803 	ldbu	r2,-32(fp)
  11dca4:	10800044 	addi	r2,r2,1
  11dca8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  11dcac:	e0bffd17 	ldw	r2,-12(fp)
  11dcb0:	10800283 	ldbu	r2,10(r2)
  11dcb4:	10803fcc 	andi	r2,r2,255
  11dcb8:	103ff41e 	bne	r2,zero,11dc8c <__alt_data_end+0xfffddc8c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  11dcbc:	00000906 	br	11dce4 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  11dcc0:	01c00084 	movi	r7,2
  11dcc4:	01800104 	movi	r6,4
  11dcc8:	000b883a 	mov	r5,zero
  11dccc:	e13ffd17 	ldw	r4,-12(fp)
  11dcd0:	011a1fc0 	call	11a1fc <OS_EventTaskRdy>
                 nbr_tasks++;
  11dcd4:	e0bff803 	ldbu	r2,-32(fp)
  11dcd8:	10800044 	addi	r2,r2,1
  11dcdc:	e0bff805 	stb	r2,-32(fp)
                 break;
  11dce0:	0001883a 	nop
  11dce4:	e0bff917 	ldw	r2,-28(fp)
  11dce8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11dcec:	e0bffa17 	ldw	r2,-24(fp)
  11dcf0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  11dcf4:	011ac480 	call	11ac48 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  11dcf8:	e0bfff17 	ldw	r2,-4(fp)
  11dcfc:	00c00384 	movi	r3,14
  11dd00:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
  11dd04:	e0bff803 	ldbu	r2,-32(fp)
  11dd08:	00000706 	br	11dd28 <OSQPendAbort+0x158>
  11dd0c:	e0bff917 	ldw	r2,-28(fp)
  11dd10:	e0bffb15 	stw	r2,-20(fp)
  11dd14:	e0bffb17 	ldw	r2,-20(fp)
  11dd18:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  11dd1c:	e0bfff17 	ldw	r2,-4(fp)
  11dd20:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  11dd24:	0005883a 	mov	r2,zero
}
  11dd28:	e037883a 	mov	sp,fp
  11dd2c:	dfc00117 	ldw	ra,4(sp)
  11dd30:	df000017 	ldw	fp,0(sp)
  11dd34:	dec00204 	addi	sp,sp,8
  11dd38:	f800283a 	ret

0011dd3c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  11dd3c:	defff604 	addi	sp,sp,-40
  11dd40:	dfc00915 	stw	ra,36(sp)
  11dd44:	df000815 	stw	fp,32(sp)
  11dd48:	df000804 	addi	fp,sp,32
  11dd4c:	e13ffe15 	stw	r4,-8(fp)
  11dd50:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  11dd54:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  11dd58:	e0bffe17 	ldw	r2,-8(fp)
  11dd5c:	1000021e 	bne	r2,zero,11dd68 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
  11dd60:	00800104 	movi	r2,4
  11dd64:	00004a06 	br	11de90 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  11dd68:	e0bffe17 	ldw	r2,-8(fp)
  11dd6c:	10800003 	ldbu	r2,0(r2)
  11dd70:	10803fcc 	andi	r2,r2,255
  11dd74:	108000a0 	cmpeqi	r2,r2,2
  11dd78:	1000021e 	bne	r2,zero,11dd84 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
  11dd7c:	00800044 	movi	r2,1
  11dd80:	00004306 	br	11de90 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11dd84:	0005303a 	rdctl	r2,status
  11dd88:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11dd8c:	e0fffd17 	ldw	r3,-12(fp)
  11dd90:	00bfff84 	movi	r2,-2
  11dd94:	1884703a 	and	r2,r3,r2
  11dd98:	1001703a 	wrctl	status,r2
  
  return context;
  11dd9c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  11dda0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  11dda4:	e0bffe17 	ldw	r2,-8(fp)
  11dda8:	10800283 	ldbu	r2,10(r2)
  11ddac:	10803fcc 	andi	r2,r2,255
  11ddb0:	10000c26 	beq	r2,zero,11dde4 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  11ddb4:	000f883a 	mov	r7,zero
  11ddb8:	01800104 	movi	r6,4
  11ddbc:	e17fff17 	ldw	r5,-4(fp)
  11ddc0:	e13ffe17 	ldw	r4,-8(fp)
  11ddc4:	011a1fc0 	call	11a1fc <OS_EventTaskRdy>
  11ddc8:	e0bff817 	ldw	r2,-32(fp)
  11ddcc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11ddd0:	e0bff917 	ldw	r2,-28(fp)
  11ddd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  11ddd8:	011ac480 	call	11ac48 <OS_Sched>
        return (OS_ERR_NONE);
  11dddc:	0005883a 	mov	r2,zero
  11dde0:	00002b06 	br	11de90 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  11dde4:	e0bffe17 	ldw	r2,-8(fp)
  11dde8:	10800117 	ldw	r2,4(r2)
  11ddec:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  11ddf0:	e0bffb17 	ldw	r2,-20(fp)
  11ddf4:	10c0058b 	ldhu	r3,22(r2)
  11ddf8:	e0bffb17 	ldw	r2,-20(fp)
  11ddfc:	1080050b 	ldhu	r2,20(r2)
  11de00:	18ffffcc 	andi	r3,r3,65535
  11de04:	10bfffcc 	andi	r2,r2,65535
  11de08:	18800636 	bltu	r3,r2,11de24 <OSQPost+0xe8>
  11de0c:	e0bff817 	ldw	r2,-32(fp)
  11de10:	e0bffa15 	stw	r2,-24(fp)
  11de14:	e0bffa17 	ldw	r2,-24(fp)
  11de18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  11de1c:	00800784 	movi	r2,30
  11de20:	00001b06 	br	11de90 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  11de24:	e0bffb17 	ldw	r2,-20(fp)
  11de28:	10800317 	ldw	r2,12(r2)
  11de2c:	11000104 	addi	r4,r2,4
  11de30:	e0fffb17 	ldw	r3,-20(fp)
  11de34:	19000315 	stw	r4,12(r3)
  11de38:	e0ffff17 	ldw	r3,-4(fp)
  11de3c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  11de40:	e0bffb17 	ldw	r2,-20(fp)
  11de44:	1080058b 	ldhu	r2,22(r2)
  11de48:	10800044 	addi	r2,r2,1
  11de4c:	1007883a 	mov	r3,r2
  11de50:	e0bffb17 	ldw	r2,-20(fp)
  11de54:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  11de58:	e0bffb17 	ldw	r2,-20(fp)
  11de5c:	10c00317 	ldw	r3,12(r2)
  11de60:	e0bffb17 	ldw	r2,-20(fp)
  11de64:	10800217 	ldw	r2,8(r2)
  11de68:	1880041e 	bne	r3,r2,11de7c <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
  11de6c:	e0bffb17 	ldw	r2,-20(fp)
  11de70:	10c00117 	ldw	r3,4(r2)
  11de74:	e0bffb17 	ldw	r2,-20(fp)
  11de78:	10c00315 	stw	r3,12(r2)
  11de7c:	e0bff817 	ldw	r2,-32(fp)
  11de80:	e0bffc15 	stw	r2,-16(fp)
  11de84:	e0bffc17 	ldw	r2,-16(fp)
  11de88:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  11de8c:	0005883a 	mov	r2,zero
}
  11de90:	e037883a 	mov	sp,fp
  11de94:	dfc00117 	ldw	ra,4(sp)
  11de98:	df000017 	ldw	fp,0(sp)
  11de9c:	dec00204 	addi	sp,sp,8
  11dea0:	f800283a 	ret

0011dea4 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  11dea4:	defff604 	addi	sp,sp,-40
  11dea8:	dfc00915 	stw	ra,36(sp)
  11deac:	df000815 	stw	fp,32(sp)
  11deb0:	df000804 	addi	fp,sp,32
  11deb4:	e13ffe15 	stw	r4,-8(fp)
  11deb8:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  11debc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  11dec0:	e0bffe17 	ldw	r2,-8(fp)
  11dec4:	1000021e 	bne	r2,zero,11ded0 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
  11dec8:	00800104 	movi	r2,4
  11decc:	00004c06 	br	11e000 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  11ded0:	e0bffe17 	ldw	r2,-8(fp)
  11ded4:	10800003 	ldbu	r2,0(r2)
  11ded8:	10803fcc 	andi	r2,r2,255
  11dedc:	108000a0 	cmpeqi	r2,r2,2
  11dee0:	1000021e 	bne	r2,zero,11deec <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
  11dee4:	00800044 	movi	r2,1
  11dee8:	00004506 	br	11e000 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11deec:	0005303a 	rdctl	r2,status
  11def0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11def4:	e0fffd17 	ldw	r3,-12(fp)
  11def8:	00bfff84 	movi	r2,-2
  11defc:	1884703a 	and	r2,r3,r2
  11df00:	1001703a 	wrctl	status,r2
  
  return context;
  11df04:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  11df08:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  11df0c:	e0bffe17 	ldw	r2,-8(fp)
  11df10:	10800283 	ldbu	r2,10(r2)
  11df14:	10803fcc 	andi	r2,r2,255
  11df18:	10000c26 	beq	r2,zero,11df4c <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  11df1c:	000f883a 	mov	r7,zero
  11df20:	01800104 	movi	r6,4
  11df24:	e17fff17 	ldw	r5,-4(fp)
  11df28:	e13ffe17 	ldw	r4,-8(fp)
  11df2c:	011a1fc0 	call	11a1fc <OS_EventTaskRdy>
  11df30:	e0bff817 	ldw	r2,-32(fp)
  11df34:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11df38:	e0bff917 	ldw	r2,-28(fp)
  11df3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  11df40:	011ac480 	call	11ac48 <OS_Sched>
        return (OS_ERR_NONE);
  11df44:	0005883a 	mov	r2,zero
  11df48:	00002d06 	br	11e000 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  11df4c:	e0bffe17 	ldw	r2,-8(fp)
  11df50:	10800117 	ldw	r2,4(r2)
  11df54:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  11df58:	e0bffb17 	ldw	r2,-20(fp)
  11df5c:	10c0058b 	ldhu	r3,22(r2)
  11df60:	e0bffb17 	ldw	r2,-20(fp)
  11df64:	1080050b 	ldhu	r2,20(r2)
  11df68:	18ffffcc 	andi	r3,r3,65535
  11df6c:	10bfffcc 	andi	r2,r2,65535
  11df70:	18800636 	bltu	r3,r2,11df8c <OSQPostFront+0xe8>
  11df74:	e0bff817 	ldw	r2,-32(fp)
  11df78:	e0bffa15 	stw	r2,-24(fp)
  11df7c:	e0bffa17 	ldw	r2,-24(fp)
  11df80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  11df84:	00800784 	movi	r2,30
  11df88:	00001d06 	br	11e000 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  11df8c:	e0bffb17 	ldw	r2,-20(fp)
  11df90:	10c00417 	ldw	r3,16(r2)
  11df94:	e0bffb17 	ldw	r2,-20(fp)
  11df98:	10800117 	ldw	r2,4(r2)
  11df9c:	1880041e 	bne	r3,r2,11dfb0 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
  11dfa0:	e0bffb17 	ldw	r2,-20(fp)
  11dfa4:	10c00217 	ldw	r3,8(r2)
  11dfa8:	e0bffb17 	ldw	r2,-20(fp)
  11dfac:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  11dfb0:	e0bffb17 	ldw	r2,-20(fp)
  11dfb4:	10800417 	ldw	r2,16(r2)
  11dfb8:	10ffff04 	addi	r3,r2,-4
  11dfbc:	e0bffb17 	ldw	r2,-20(fp)
  11dfc0:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  11dfc4:	e0bffb17 	ldw	r2,-20(fp)
  11dfc8:	10800417 	ldw	r2,16(r2)
  11dfcc:	e0ffff17 	ldw	r3,-4(fp)
  11dfd0:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  11dfd4:	e0bffb17 	ldw	r2,-20(fp)
  11dfd8:	1080058b 	ldhu	r2,22(r2)
  11dfdc:	10800044 	addi	r2,r2,1
  11dfe0:	1007883a 	mov	r3,r2
  11dfe4:	e0bffb17 	ldw	r2,-20(fp)
  11dfe8:	10c0058d 	sth	r3,22(r2)
  11dfec:	e0bff817 	ldw	r2,-32(fp)
  11dff0:	e0bffc15 	stw	r2,-16(fp)
  11dff4:	e0bffc17 	ldw	r2,-16(fp)
  11dff8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  11dffc:	0005883a 	mov	r2,zero
}
  11e000:	e037883a 	mov	sp,fp
  11e004:	dfc00117 	ldw	ra,4(sp)
  11e008:	df000017 	ldw	fp,0(sp)
  11e00c:	dec00204 	addi	sp,sp,8
  11e010:	f800283a 	ret

0011e014 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  11e014:	defff504 	addi	sp,sp,-44
  11e018:	dfc00a15 	stw	ra,40(sp)
  11e01c:	df000915 	stw	fp,36(sp)
  11e020:	df000904 	addi	fp,sp,36
  11e024:	e13ffd15 	stw	r4,-12(fp)
  11e028:	e17ffe15 	stw	r5,-8(fp)
  11e02c:	3005883a 	mov	r2,r6
  11e030:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  11e034:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  11e038:	e0bffd17 	ldw	r2,-12(fp)
  11e03c:	1000021e 	bne	r2,zero,11e048 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
  11e040:	00800104 	movi	r2,4
  11e044:	00007106 	br	11e20c <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  11e048:	e0bffd17 	ldw	r2,-12(fp)
  11e04c:	10800003 	ldbu	r2,0(r2)
  11e050:	10803fcc 	andi	r2,r2,255
  11e054:	108000a0 	cmpeqi	r2,r2,2
  11e058:	1000021e 	bne	r2,zero,11e064 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
  11e05c:	00800044 	movi	r2,1
  11e060:	00006a06 	br	11e20c <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11e064:	0005303a 	rdctl	r2,status
  11e068:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11e06c:	e0fffc17 	ldw	r3,-16(fp)
  11e070:	00bfff84 	movi	r2,-2
  11e074:	1884703a 	and	r2,r3,r2
  11e078:	1001703a 	wrctl	status,r2
  
  return context;
  11e07c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  11e080:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  11e084:	e0bffd17 	ldw	r2,-12(fp)
  11e088:	10800283 	ldbu	r2,10(r2)
  11e08c:	10803fcc 	andi	r2,r2,255
  11e090:	10001d26 	beq	r2,zero,11e108 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  11e094:	e0bfff03 	ldbu	r2,-4(fp)
  11e098:	1080004c 	andi	r2,r2,1
  11e09c:	10000b26 	beq	r2,zero,11e0cc <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  11e0a0:	00000506 	br	11e0b8 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  11e0a4:	000f883a 	mov	r7,zero
  11e0a8:	01800104 	movi	r6,4
  11e0ac:	e17ffe17 	ldw	r5,-8(fp)
  11e0b0:	e13ffd17 	ldw	r4,-12(fp)
  11e0b4:	011a1fc0 	call	11a1fc <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  11e0b8:	e0bffd17 	ldw	r2,-12(fp)
  11e0bc:	10800283 	ldbu	r2,10(r2)
  11e0c0:	10803fcc 	andi	r2,r2,255
  11e0c4:	103ff71e 	bne	r2,zero,11e0a4 <__alt_data_end+0xfffde0a4>
  11e0c8:	00000506 	br	11e0e0 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  11e0cc:	000f883a 	mov	r7,zero
  11e0d0:	01800104 	movi	r6,4
  11e0d4:	e17ffe17 	ldw	r5,-8(fp)
  11e0d8:	e13ffd17 	ldw	r4,-12(fp)
  11e0dc:	011a1fc0 	call	11a1fc <OS_EventTaskRdy>
  11e0e0:	e0bff717 	ldw	r2,-36(fp)
  11e0e4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11e0e8:	e0bff817 	ldw	r2,-32(fp)
  11e0ec:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  11e0f0:	e0bfff03 	ldbu	r2,-4(fp)
  11e0f4:	1080010c 	andi	r2,r2,4
  11e0f8:	1000011e 	bne	r2,zero,11e100 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
  11e0fc:	011ac480 	call	11ac48 <OS_Sched>
        }
        return (OS_ERR_NONE);
  11e100:	0005883a 	mov	r2,zero
  11e104:	00004106 	br	11e20c <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  11e108:	e0bffd17 	ldw	r2,-12(fp)
  11e10c:	10800117 	ldw	r2,4(r2)
  11e110:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  11e114:	e0bffa17 	ldw	r2,-24(fp)
  11e118:	10c0058b 	ldhu	r3,22(r2)
  11e11c:	e0bffa17 	ldw	r2,-24(fp)
  11e120:	1080050b 	ldhu	r2,20(r2)
  11e124:	18ffffcc 	andi	r3,r3,65535
  11e128:	10bfffcc 	andi	r2,r2,65535
  11e12c:	18800636 	bltu	r3,r2,11e148 <OSQPostOpt+0x134>
  11e130:	e0bff717 	ldw	r2,-36(fp)
  11e134:	e0bff915 	stw	r2,-28(fp)
  11e138:	e0bff917 	ldw	r2,-28(fp)
  11e13c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  11e140:	00800784 	movi	r2,30
  11e144:	00003106 	br	11e20c <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  11e148:	e0bfff03 	ldbu	r2,-4(fp)
  11e14c:	1080008c 	andi	r2,r2,2
  11e150:	10001326 	beq	r2,zero,11e1a0 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  11e154:	e0bffa17 	ldw	r2,-24(fp)
  11e158:	10c00417 	ldw	r3,16(r2)
  11e15c:	e0bffa17 	ldw	r2,-24(fp)
  11e160:	10800117 	ldw	r2,4(r2)
  11e164:	1880041e 	bne	r3,r2,11e178 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  11e168:	e0bffa17 	ldw	r2,-24(fp)
  11e16c:	10c00217 	ldw	r3,8(r2)
  11e170:	e0bffa17 	ldw	r2,-24(fp)
  11e174:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  11e178:	e0bffa17 	ldw	r2,-24(fp)
  11e17c:	10800417 	ldw	r2,16(r2)
  11e180:	10ffff04 	addi	r3,r2,-4
  11e184:	e0bffa17 	ldw	r2,-24(fp)
  11e188:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  11e18c:	e0bffa17 	ldw	r2,-24(fp)
  11e190:	10800417 	ldw	r2,16(r2)
  11e194:	e0fffe17 	ldw	r3,-8(fp)
  11e198:	10c00015 	stw	r3,0(r2)
  11e19c:	00001006 	br	11e1e0 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  11e1a0:	e0bffa17 	ldw	r2,-24(fp)
  11e1a4:	10800317 	ldw	r2,12(r2)
  11e1a8:	11000104 	addi	r4,r2,4
  11e1ac:	e0fffa17 	ldw	r3,-24(fp)
  11e1b0:	19000315 	stw	r4,12(r3)
  11e1b4:	e0fffe17 	ldw	r3,-8(fp)
  11e1b8:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  11e1bc:	e0bffa17 	ldw	r2,-24(fp)
  11e1c0:	10c00317 	ldw	r3,12(r2)
  11e1c4:	e0bffa17 	ldw	r2,-24(fp)
  11e1c8:	10800217 	ldw	r2,8(r2)
  11e1cc:	1880041e 	bne	r3,r2,11e1e0 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
  11e1d0:	e0bffa17 	ldw	r2,-24(fp)
  11e1d4:	10c00117 	ldw	r3,4(r2)
  11e1d8:	e0bffa17 	ldw	r2,-24(fp)
  11e1dc:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  11e1e0:	e0bffa17 	ldw	r2,-24(fp)
  11e1e4:	1080058b 	ldhu	r2,22(r2)
  11e1e8:	10800044 	addi	r2,r2,1
  11e1ec:	1007883a 	mov	r3,r2
  11e1f0:	e0bffa17 	ldw	r2,-24(fp)
  11e1f4:	10c0058d 	sth	r3,22(r2)
  11e1f8:	e0bff717 	ldw	r2,-36(fp)
  11e1fc:	e0bffb15 	stw	r2,-20(fp)
  11e200:	e0bffb17 	ldw	r2,-20(fp)
  11e204:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  11e208:	0005883a 	mov	r2,zero
}
  11e20c:	e037883a 	mov	sp,fp
  11e210:	dfc00117 	ldw	ra,4(sp)
  11e214:	df000017 	ldw	fp,0(sp)
  11e218:	dec00204 	addi	sp,sp,8
  11e21c:	f800283a 	ret

0011e220 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  11e220:	defff604 	addi	sp,sp,-40
  11e224:	df000915 	stw	fp,36(sp)
  11e228:	df000904 	addi	fp,sp,36
  11e22c:	e13ffe15 	stw	r4,-8(fp)
  11e230:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  11e234:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  11e238:	e0bffe17 	ldw	r2,-8(fp)
  11e23c:	1000021e 	bne	r2,zero,11e248 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
  11e240:	00800104 	movi	r2,4
  11e244:	00004906 	br	11e36c <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  11e248:	e0bfff17 	ldw	r2,-4(fp)
  11e24c:	1000021e 	bne	r2,zero,11e258 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
  11e250:	00800244 	movi	r2,9
  11e254:	00004506 	br	11e36c <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  11e258:	e0bffe17 	ldw	r2,-8(fp)
  11e25c:	10800003 	ldbu	r2,0(r2)
  11e260:	10803fcc 	andi	r2,r2,255
  11e264:	108000a0 	cmpeqi	r2,r2,2
  11e268:	1000021e 	bne	r2,zero,11e274 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
  11e26c:	00800044 	movi	r2,1
  11e270:	00003e06 	br	11e36c <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11e274:	0005303a 	rdctl	r2,status
  11e278:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11e27c:	e0fffd17 	ldw	r3,-12(fp)
  11e280:	00bfff84 	movi	r2,-2
  11e284:	1884703a 	and	r2,r3,r2
  11e288:	1001703a 	wrctl	status,r2
  
  return context;
  11e28c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  11e290:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  11e294:	e0bffe17 	ldw	r2,-8(fp)
  11e298:	10c00283 	ldbu	r3,10(r2)
  11e29c:	e0bfff17 	ldw	r2,-4(fp)
  11e2a0:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  11e2a4:	e0bffe17 	ldw	r2,-8(fp)
  11e2a8:	108002c4 	addi	r2,r2,11
  11e2ac:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  11e2b0:	e0bfff17 	ldw	r2,-4(fp)
  11e2b4:	10800204 	addi	r2,r2,8
  11e2b8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  11e2bc:	e03ff705 	stb	zero,-36(fp)
  11e2c0:	00000b06 	br	11e2f0 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
  11e2c4:	e0bff917 	ldw	r2,-28(fp)
  11e2c8:	10c00044 	addi	r3,r2,1
  11e2cc:	e0fff915 	stw	r3,-28(fp)
  11e2d0:	e0fff817 	ldw	r3,-32(fp)
  11e2d4:	19000044 	addi	r4,r3,1
  11e2d8:	e13ff815 	stw	r4,-32(fp)
  11e2dc:	18c00003 	ldbu	r3,0(r3)
  11e2e0:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  11e2e4:	e0bff703 	ldbu	r2,-36(fp)
  11e2e8:	10800044 	addi	r2,r2,1
  11e2ec:	e0bff705 	stb	r2,-36(fp)
  11e2f0:	e0bff703 	ldbu	r2,-36(fp)
  11e2f4:	108000f0 	cmpltui	r2,r2,3
  11e2f8:	103ff21e 	bne	r2,zero,11e2c4 <__alt_data_end+0xfffde2c4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  11e2fc:	e0bffe17 	ldw	r2,-8(fp)
  11e300:	10800117 	ldw	r2,4(r2)
  11e304:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  11e308:	e0bffc17 	ldw	r2,-16(fp)
  11e30c:	1080058b 	ldhu	r2,22(r2)
  11e310:	10bfffcc 	andi	r2,r2,65535
  11e314:	10000626 	beq	r2,zero,11e330 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  11e318:	e0bffc17 	ldw	r2,-16(fp)
  11e31c:	10800417 	ldw	r2,16(r2)
  11e320:	10c00017 	ldw	r3,0(r2)
  11e324:	e0bfff17 	ldw	r2,-4(fp)
  11e328:	10c00015 	stw	r3,0(r2)
  11e32c:	00000206 	br	11e338 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
  11e330:	e0bfff17 	ldw	r2,-4(fp)
  11e334:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  11e338:	e0bffc17 	ldw	r2,-16(fp)
  11e33c:	10c0058b 	ldhu	r3,22(r2)
  11e340:	e0bfff17 	ldw	r2,-4(fp)
  11e344:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  11e348:	e0bffc17 	ldw	r2,-16(fp)
  11e34c:	10c0050b 	ldhu	r3,20(r2)
  11e350:	e0bfff17 	ldw	r2,-4(fp)
  11e354:	10c0018d 	sth	r3,6(r2)
  11e358:	e0bffa17 	ldw	r2,-24(fp)
  11e35c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11e360:	e0bffb17 	ldw	r2,-20(fp)
  11e364:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  11e368:	0005883a 	mov	r2,zero
}
  11e36c:	e037883a 	mov	sp,fp
  11e370:	df000017 	ldw	fp,0(sp)
  11e374:	dec00104 	addi	sp,sp,4
  11e378:	f800283a 	ret

0011e37c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  11e37c:	defffb04 	addi	sp,sp,-20
  11e380:	dfc00415 	stw	ra,16(sp)
  11e384:	df000315 	stw	fp,12(sp)
  11e388:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  11e38c:	01407804 	movi	r5,480
  11e390:	010004f4 	movhi	r4,19
  11e394:	2132bc04 	addi	r4,r4,-13584
  11e398:	011ab8c0 	call	11ab8c <OS_MemClr>
    pq1 = &OSQTbl[0];
  11e39c:	008004f4 	movhi	r2,19
  11e3a0:	10b2bc04 	addi	r2,r2,-13584
  11e3a4:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  11e3a8:	008004f4 	movhi	r2,19
  11e3ac:	10b2c204 	addi	r2,r2,-13560
  11e3b0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  11e3b4:	e03ffd0d 	sth	zero,-12(fp)
  11e3b8:	00000c06 	br	11e3ec <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  11e3bc:	e0bffe17 	ldw	r2,-8(fp)
  11e3c0:	e0ffff17 	ldw	r3,-4(fp)
  11e3c4:	10c00015 	stw	r3,0(r2)
        pq1++;
  11e3c8:	e0bffe17 	ldw	r2,-8(fp)
  11e3cc:	10800604 	addi	r2,r2,24
  11e3d0:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  11e3d4:	e0bfff17 	ldw	r2,-4(fp)
  11e3d8:	10800604 	addi	r2,r2,24
  11e3dc:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  11e3e0:	e0bffd0b 	ldhu	r2,-12(fp)
  11e3e4:	10800044 	addi	r2,r2,1
  11e3e8:	e0bffd0d 	sth	r2,-12(fp)
  11e3ec:	e0bffd0b 	ldhu	r2,-12(fp)
  11e3f0:	108004f0 	cmpltui	r2,r2,19
  11e3f4:	103ff11e 	bne	r2,zero,11e3bc <__alt_data_end+0xfffde3bc>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  11e3f8:	e0bffe17 	ldw	r2,-8(fp)
  11e3fc:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  11e400:	008004f4 	movhi	r2,19
  11e404:	10b2bc04 	addi	r2,r2,-13584
  11e408:	d0a74415 	stw	r2,-25328(gp)
#endif
}
  11e40c:	0001883a 	nop
  11e410:	e037883a 	mov	sp,fp
  11e414:	dfc00117 	ldw	ra,4(sp)
  11e418:	df000017 	ldw	fp,0(sp)
  11e41c:	dec00204 	addi	sp,sp,8
  11e420:	f800283a 	ret

0011e424 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  11e424:	defffa04 	addi	sp,sp,-24
  11e428:	df000515 	stw	fp,20(sp)
  11e42c:	df000504 	addi	fp,sp,20
  11e430:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  11e434:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  11e438:	e0bfff17 	ldw	r2,-4(fp)
  11e43c:	1000021e 	bne	r2,zero,11e448 <OSSemAccept+0x24>
        return (0);
  11e440:	0005883a 	mov	r2,zero
  11e444:	00001f06 	br	11e4c4 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  11e448:	e0bfff17 	ldw	r2,-4(fp)
  11e44c:	10800003 	ldbu	r2,0(r2)
  11e450:	10803fcc 	andi	r2,r2,255
  11e454:	108000e0 	cmpeqi	r2,r2,3
  11e458:	1000021e 	bne	r2,zero,11e464 <OSSemAccept+0x40>
        return (0);
  11e45c:	0005883a 	mov	r2,zero
  11e460:	00001806 	br	11e4c4 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11e464:	0005303a 	rdctl	r2,status
  11e468:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11e46c:	e0fffe17 	ldw	r3,-8(fp)
  11e470:	00bfff84 	movi	r2,-2
  11e474:	1884703a 	and	r2,r3,r2
  11e478:	1001703a 	wrctl	status,r2
  
  return context;
  11e47c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  11e480:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
  11e484:	e0bfff17 	ldw	r2,-4(fp)
  11e488:	1080020b 	ldhu	r2,8(r2)
  11e48c:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  11e490:	e0bffd0b 	ldhu	r2,-12(fp)
  11e494:	10000626 	beq	r2,zero,11e4b0 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  11e498:	e0bfff17 	ldw	r2,-4(fp)
  11e49c:	1080020b 	ldhu	r2,8(r2)
  11e4a0:	10bfffc4 	addi	r2,r2,-1
  11e4a4:	1007883a 	mov	r3,r2
  11e4a8:	e0bfff17 	ldw	r2,-4(fp)
  11e4ac:	10c0020d 	sth	r3,8(r2)
  11e4b0:	e0bffb17 	ldw	r2,-20(fp)
  11e4b4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11e4b8:	e0bffc17 	ldw	r2,-16(fp)
  11e4bc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  11e4c0:	e0bffd0b 	ldhu	r2,-12(fp)
}
  11e4c4:	e037883a 	mov	sp,fp
  11e4c8:	df000017 	ldw	fp,0(sp)
  11e4cc:	dec00104 	addi	sp,sp,4
  11e4d0:	f800283a 	ret

0011e4d4 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  11e4d4:	defff904 	addi	sp,sp,-28
  11e4d8:	dfc00615 	stw	ra,24(sp)
  11e4dc:	df000515 	stw	fp,20(sp)
  11e4e0:	df000504 	addi	fp,sp,20
  11e4e4:	2005883a 	mov	r2,r4
  11e4e8:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  11e4ec:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  11e4f0:	d0a74703 	ldbu	r2,-25316(gp)
  11e4f4:	10803fcc 	andi	r2,r2,255
  11e4f8:	10000226 	beq	r2,zero,11e504 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  11e4fc:	0005883a 	mov	r2,zero
  11e500:	00002506 	br	11e598 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11e504:	0005303a 	rdctl	r2,status
  11e508:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11e50c:	e0fffe17 	ldw	r3,-8(fp)
  11e510:	00bfff84 	movi	r2,-2
  11e514:	1884703a 	and	r2,r3,r2
  11e518:	1001703a 	wrctl	status,r2
  
  return context;
  11e51c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  11e520:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  11e524:	d0a74617 	ldw	r2,-25320(gp)
  11e528:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  11e52c:	d0a74617 	ldw	r2,-25320(gp)
  11e530:	10000326 	beq	r2,zero,11e540 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  11e534:	d0a74617 	ldw	r2,-25320(gp)
  11e538:	10800117 	ldw	r2,4(r2)
  11e53c:	d0a74615 	stw	r2,-25320(gp)
  11e540:	e0bffb17 	ldw	r2,-20(fp)
  11e544:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11e548:	e0bffc17 	ldw	r2,-16(fp)
  11e54c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  11e550:	e0bffd17 	ldw	r2,-12(fp)
  11e554:	10000f26 	beq	r2,zero,11e594 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  11e558:	e0bffd17 	ldw	r2,-12(fp)
  11e55c:	00c000c4 	movi	r3,3
  11e560:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  11e564:	e0bffd17 	ldw	r2,-12(fp)
  11e568:	e0ffff0b 	ldhu	r3,-4(fp)
  11e56c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  11e570:	e0bffd17 	ldw	r2,-12(fp)
  11e574:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  11e578:	e0bffd17 	ldw	r2,-12(fp)
  11e57c:	00c00fc4 	movi	r3,63
  11e580:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  11e584:	e0bffd17 	ldw	r2,-12(fp)
  11e588:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  11e58c:	e13ffd17 	ldw	r4,-12(fp)
  11e590:	011a7ac0 	call	11a7ac <OS_EventWaitListInit>
    }
    return (pevent);
  11e594:	e0bffd17 	ldw	r2,-12(fp)
}
  11e598:	e037883a 	mov	sp,fp
  11e59c:	dfc00117 	ldw	ra,4(sp)
  11e5a0:	df000017 	ldw	fp,0(sp)
  11e5a4:	dec00204 	addi	sp,sp,8
  11e5a8:	f800283a 	ret

0011e5ac <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  11e5ac:	defff304 	addi	sp,sp,-52
  11e5b0:	dfc00c15 	stw	ra,48(sp)
  11e5b4:	df000b15 	stw	fp,44(sp)
  11e5b8:	df000b04 	addi	fp,sp,44
  11e5bc:	e13ffd15 	stw	r4,-12(fp)
  11e5c0:	2805883a 	mov	r2,r5
  11e5c4:	e1bfff15 	stw	r6,-4(fp)
  11e5c8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  11e5cc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  11e5d0:	e0bfff17 	ldw	r2,-4(fp)
  11e5d4:	1000021e 	bne	r2,zero,11e5e0 <OSSemDel+0x34>
        return (pevent);
  11e5d8:	e0bffd17 	ldw	r2,-12(fp)
  11e5dc:	00007e06 	br	11e7d8 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  11e5e0:	e0bffd17 	ldw	r2,-12(fp)
  11e5e4:	1000051e 	bne	r2,zero,11e5fc <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  11e5e8:	e0bfff17 	ldw	r2,-4(fp)
  11e5ec:	00c00104 	movi	r3,4
  11e5f0:	10c00005 	stb	r3,0(r2)
        return (pevent);
  11e5f4:	e0bffd17 	ldw	r2,-12(fp)
  11e5f8:	00007706 	br	11e7d8 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  11e5fc:	e0bffd17 	ldw	r2,-12(fp)
  11e600:	10800003 	ldbu	r2,0(r2)
  11e604:	10803fcc 	andi	r2,r2,255
  11e608:	108000e0 	cmpeqi	r2,r2,3
  11e60c:	1000051e 	bne	r2,zero,11e624 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  11e610:	e0bfff17 	ldw	r2,-4(fp)
  11e614:	00c00044 	movi	r3,1
  11e618:	10c00005 	stb	r3,0(r2)
        return (pevent);
  11e61c:	e0bffd17 	ldw	r2,-12(fp)
  11e620:	00006d06 	br	11e7d8 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  11e624:	d0a74703 	ldbu	r2,-25316(gp)
  11e628:	10803fcc 	andi	r2,r2,255
  11e62c:	10000526 	beq	r2,zero,11e644 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  11e630:	e0bfff17 	ldw	r2,-4(fp)
  11e634:	00c003c4 	movi	r3,15
  11e638:	10c00005 	stb	r3,0(r2)
        return (pevent);
  11e63c:	e0bffd17 	ldw	r2,-12(fp)
  11e640:	00006506 	br	11e7d8 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11e644:	0005303a 	rdctl	r2,status
  11e648:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11e64c:	e0fffc17 	ldw	r3,-16(fp)
  11e650:	00bfff84 	movi	r2,-2
  11e654:	1884703a 	and	r2,r3,r2
  11e658:	1001703a 	wrctl	status,r2
  
  return context;
  11e65c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  11e660:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  11e664:	e0bffd17 	ldw	r2,-12(fp)
  11e668:	10800283 	ldbu	r2,10(r2)
  11e66c:	10803fcc 	andi	r2,r2,255
  11e670:	10000326 	beq	r2,zero,11e680 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  11e674:	00800044 	movi	r2,1
  11e678:	e0bff505 	stb	r2,-44(fp)
  11e67c:	00000106 	br	11e684 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  11e680:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
  11e684:	e0bffe03 	ldbu	r2,-8(fp)
  11e688:	10000326 	beq	r2,zero,11e698 <OSSemDel+0xec>
  11e68c:	10800060 	cmpeqi	r2,r2,1
  11e690:	1000281e 	bne	r2,zero,11e734 <OSSemDel+0x188>
  11e694:	00004506 	br	11e7ac <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  11e698:	e0bff503 	ldbu	r2,-44(fp)
  11e69c:	1000161e 	bne	r2,zero,11e6f8 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  11e6a0:	e0bffd17 	ldw	r2,-12(fp)
  11e6a4:	00c00fc4 	movi	r3,63
  11e6a8:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  11e6ac:	e0bffd17 	ldw	r2,-12(fp)
  11e6b0:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  11e6b4:	e0bffd17 	ldw	r2,-12(fp)
  11e6b8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  11e6bc:	d0e74617 	ldw	r3,-25320(gp)
  11e6c0:	e0bffd17 	ldw	r2,-12(fp)
  11e6c4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  11e6c8:	e0bffd17 	ldw	r2,-12(fp)
  11e6cc:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  11e6d0:	e0bffd17 	ldw	r2,-12(fp)
  11e6d4:	d0a74615 	stw	r2,-25320(gp)
  11e6d8:	e0bff717 	ldw	r2,-36(fp)
  11e6dc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11e6e0:	e0bff817 	ldw	r2,-32(fp)
  11e6e4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  11e6e8:	e0bfff17 	ldw	r2,-4(fp)
  11e6ec:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  11e6f0:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
  11e6f4:	00003706 	br	11e7d4 <OSSemDel+0x228>
  11e6f8:	e0bff717 	ldw	r2,-36(fp)
  11e6fc:	e0bff915 	stw	r2,-28(fp)
  11e700:	e0bff917 	ldw	r2,-28(fp)
  11e704:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  11e708:	e0bfff17 	ldw	r2,-4(fp)
  11e70c:	00c01244 	movi	r3,73
  11e710:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
  11e714:	e0bffd17 	ldw	r2,-12(fp)
  11e718:	e0bff615 	stw	r2,-40(fp)
             }
             break;
  11e71c:	00002d06 	br	11e7d4 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  11e720:	000f883a 	mov	r7,zero
  11e724:	01800044 	movi	r6,1
  11e728:	000b883a 	mov	r5,zero
  11e72c:	e13ffd17 	ldw	r4,-12(fp)
  11e730:	011a1fc0 	call	11a1fc <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  11e734:	e0bffd17 	ldw	r2,-12(fp)
  11e738:	10800283 	ldbu	r2,10(r2)
  11e73c:	10803fcc 	andi	r2,r2,255
  11e740:	103ff71e 	bne	r2,zero,11e720 <__alt_data_end+0xfffde720>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  11e744:	e0bffd17 	ldw	r2,-12(fp)
  11e748:	00c00fc4 	movi	r3,63
  11e74c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  11e750:	e0bffd17 	ldw	r2,-12(fp)
  11e754:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  11e758:	e0bffd17 	ldw	r2,-12(fp)
  11e75c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  11e760:	d0e74617 	ldw	r3,-25320(gp)
  11e764:	e0bffd17 	ldw	r2,-12(fp)
  11e768:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  11e76c:	e0bffd17 	ldw	r2,-12(fp)
  11e770:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  11e774:	e0bffd17 	ldw	r2,-12(fp)
  11e778:	d0a74615 	stw	r2,-25320(gp)
  11e77c:	e0bff717 	ldw	r2,-36(fp)
  11e780:	e0bffa15 	stw	r2,-24(fp)
  11e784:	e0bffa17 	ldw	r2,-24(fp)
  11e788:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  11e78c:	e0bff503 	ldbu	r2,-44(fp)
  11e790:	10800058 	cmpnei	r2,r2,1
  11e794:	1000011e 	bne	r2,zero,11e79c <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  11e798:	011ac480 	call	11ac48 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  11e79c:	e0bfff17 	ldw	r2,-4(fp)
  11e7a0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  11e7a4:	e03ff615 	stw	zero,-40(fp)
             break;
  11e7a8:	00000a06 	br	11e7d4 <OSSemDel+0x228>
  11e7ac:	e0bff717 	ldw	r2,-36(fp)
  11e7b0:	e0bffb15 	stw	r2,-20(fp)
  11e7b4:	e0bffb17 	ldw	r2,-20(fp)
  11e7b8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  11e7bc:	e0bfff17 	ldw	r2,-4(fp)
  11e7c0:	00c001c4 	movi	r3,7
  11e7c4:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
  11e7c8:	e0bffd17 	ldw	r2,-12(fp)
  11e7cc:	e0bff615 	stw	r2,-40(fp)
             break;
  11e7d0:	0001883a 	nop
    }
    return (pevent_return);
  11e7d4:	e0bff617 	ldw	r2,-40(fp)
}
  11e7d8:	e037883a 	mov	sp,fp
  11e7dc:	dfc00117 	ldw	ra,4(sp)
  11e7e0:	df000017 	ldw	fp,0(sp)
  11e7e4:	dec00204 	addi	sp,sp,8
  11e7e8:	f800283a 	ret

0011e7ec <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  11e7ec:	defff504 	addi	sp,sp,-44
  11e7f0:	dfc00a15 	stw	ra,40(sp)
  11e7f4:	df000915 	stw	fp,36(sp)
  11e7f8:	df000904 	addi	fp,sp,36
  11e7fc:	e13ffd15 	stw	r4,-12(fp)
  11e800:	2805883a 	mov	r2,r5
  11e804:	e1bfff15 	stw	r6,-4(fp)
  11e808:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  11e80c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  11e810:	e0bfff17 	ldw	r2,-4(fp)
  11e814:	10007226 	beq	r2,zero,11e9e0 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  11e818:	e0bffd17 	ldw	r2,-12(fp)
  11e81c:	1000041e 	bne	r2,zero,11e830 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  11e820:	e0bfff17 	ldw	r2,-4(fp)
  11e824:	00c00104 	movi	r3,4
  11e828:	10c00005 	stb	r3,0(r2)
        return;
  11e82c:	00006d06 	br	11e9e4 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  11e830:	e0bffd17 	ldw	r2,-12(fp)
  11e834:	10800003 	ldbu	r2,0(r2)
  11e838:	10803fcc 	andi	r2,r2,255
  11e83c:	108000e0 	cmpeqi	r2,r2,3
  11e840:	1000041e 	bne	r2,zero,11e854 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  11e844:	e0bfff17 	ldw	r2,-4(fp)
  11e848:	00c00044 	movi	r3,1
  11e84c:	10c00005 	stb	r3,0(r2)
        return;
  11e850:	00006406 	br	11e9e4 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  11e854:	d0a74703 	ldbu	r2,-25316(gp)
  11e858:	10803fcc 	andi	r2,r2,255
  11e85c:	10000426 	beq	r2,zero,11e870 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  11e860:	e0bfff17 	ldw	r2,-4(fp)
  11e864:	00c00084 	movi	r3,2
  11e868:	10c00005 	stb	r3,0(r2)
        return;
  11e86c:	00005d06 	br	11e9e4 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  11e870:	d0a73903 	ldbu	r2,-25372(gp)
  11e874:	10803fcc 	andi	r2,r2,255
  11e878:	10000426 	beq	r2,zero,11e88c <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  11e87c:	e0bfff17 	ldw	r2,-4(fp)
  11e880:	00c00344 	movi	r3,13
  11e884:	10c00005 	stb	r3,0(r2)
        return;
  11e888:	00005606 	br	11e9e4 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11e88c:	0005303a 	rdctl	r2,status
  11e890:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11e894:	e0fffc17 	ldw	r3,-16(fp)
  11e898:	00bfff84 	movi	r2,-2
  11e89c:	1884703a 	and	r2,r3,r2
  11e8a0:	1001703a 	wrctl	status,r2
  
  return context;
  11e8a4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  11e8a8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  11e8ac:	e0bffd17 	ldw	r2,-12(fp)
  11e8b0:	1080020b 	ldhu	r2,8(r2)
  11e8b4:	10bfffcc 	andi	r2,r2,65535
  11e8b8:	10000d26 	beq	r2,zero,11e8f0 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  11e8bc:	e0bffd17 	ldw	r2,-12(fp)
  11e8c0:	1080020b 	ldhu	r2,8(r2)
  11e8c4:	10bfffc4 	addi	r2,r2,-1
  11e8c8:	1007883a 	mov	r3,r2
  11e8cc:	e0bffd17 	ldw	r2,-12(fp)
  11e8d0:	10c0020d 	sth	r3,8(r2)
  11e8d4:	e0bff717 	ldw	r2,-36(fp)
  11e8d8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11e8dc:	e0bff817 	ldw	r2,-32(fp)
  11e8e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  11e8e4:	e0bfff17 	ldw	r2,-4(fp)
  11e8e8:	10000005 	stb	zero,0(r2)
        return;
  11e8ec:	00003d06 	br	11e9e4 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  11e8f0:	d0a74817 	ldw	r2,-25312(gp)
  11e8f4:	d0e74817 	ldw	r3,-25312(gp)
  11e8f8:	18c00c03 	ldbu	r3,48(r3)
  11e8fc:	18c00054 	ori	r3,r3,1
  11e900:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  11e904:	d0a74817 	ldw	r2,-25312(gp)
  11e908:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  11e90c:	d0a74817 	ldw	r2,-25312(gp)
  11e910:	e0fffe0b 	ldhu	r3,-8(fp)
  11e914:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  11e918:	e13ffd17 	ldw	r4,-12(fp)
  11e91c:	011a3940 	call	11a394 <OS_EventTaskWait>
  11e920:	e0bff717 	ldw	r2,-36(fp)
  11e924:	e0bffb15 	stw	r2,-20(fp)
  11e928:	e0bffb17 	ldw	r2,-20(fp)
  11e92c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  11e930:	011ac480 	call	11ac48 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11e934:	0005303a 	rdctl	r2,status
  11e938:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11e93c:	e0fff917 	ldw	r3,-28(fp)
  11e940:	00bfff84 	movi	r2,-2
  11e944:	1884703a 	and	r2,r3,r2
  11e948:	1001703a 	wrctl	status,r2
  
  return context;
  11e94c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
  11e950:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  11e954:	d0a74817 	ldw	r2,-25312(gp)
  11e958:	10800c43 	ldbu	r2,49(r2)
  11e95c:	10803fcc 	andi	r2,r2,255
  11e960:	10000326 	beq	r2,zero,11e970 <OSSemPend+0x184>
  11e964:	108000a0 	cmpeqi	r2,r2,2
  11e968:	1000041e 	bne	r2,zero,11e97c <OSSemPend+0x190>
  11e96c:	00000706 	br	11e98c <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  11e970:	e0bfff17 	ldw	r2,-4(fp)
  11e974:	10000005 	stb	zero,0(r2)
             break;
  11e978:	00000c06 	br	11e9ac <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  11e97c:	e0bfff17 	ldw	r2,-4(fp)
  11e980:	00c00384 	movi	r3,14
  11e984:	10c00005 	stb	r3,0(r2)
             break;
  11e988:	00000806 	br	11e9ac <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  11e98c:	d0a74817 	ldw	r2,-25312(gp)
  11e990:	e17ffd17 	ldw	r5,-12(fp)
  11e994:	1009883a 	mov	r4,r2
  11e998:	011a5f40 	call	11a5f4 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  11e99c:	e0bfff17 	ldw	r2,-4(fp)
  11e9a0:	00c00284 	movi	r3,10
  11e9a4:	10c00005 	stb	r3,0(r2)
             break;
  11e9a8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  11e9ac:	d0a74817 	ldw	r2,-25312(gp)
  11e9b0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  11e9b4:	d0a74817 	ldw	r2,-25312(gp)
  11e9b8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  11e9bc:	d0a74817 	ldw	r2,-25312(gp)
  11e9c0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  11e9c4:	d0a74817 	ldw	r2,-25312(gp)
  11e9c8:	10000815 	stw	zero,32(r2)
  11e9cc:	e0bff717 	ldw	r2,-36(fp)
  11e9d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11e9d4:	e0bffa17 	ldw	r2,-24(fp)
  11e9d8:	1001703a 	wrctl	status,r2
  11e9dc:	00000106 	br	11e9e4 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
  11e9e0:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
  11e9e4:	e037883a 	mov	sp,fp
  11e9e8:	dfc00117 	ldw	ra,4(sp)
  11e9ec:	df000017 	ldw	fp,0(sp)
  11e9f0:	dec00204 	addi	sp,sp,8
  11e9f4:	f800283a 	ret

0011e9f8 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  11e9f8:	defff604 	addi	sp,sp,-40
  11e9fc:	dfc00915 	stw	ra,36(sp)
  11ea00:	df000815 	stw	fp,32(sp)
  11ea04:	df000804 	addi	fp,sp,32
  11ea08:	e13ffd15 	stw	r4,-12(fp)
  11ea0c:	2805883a 	mov	r2,r5
  11ea10:	e1bfff15 	stw	r6,-4(fp)
  11ea14:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  11ea18:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  11ea1c:	e0bfff17 	ldw	r2,-4(fp)
  11ea20:	1000021e 	bne	r2,zero,11ea2c <OSSemPendAbort+0x34>
        return (0);
  11ea24:	0005883a 	mov	r2,zero
  11ea28:	00004906 	br	11eb50 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  11ea2c:	e0bffd17 	ldw	r2,-12(fp)
  11ea30:	1000051e 	bne	r2,zero,11ea48 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  11ea34:	e0bfff17 	ldw	r2,-4(fp)
  11ea38:	00c00104 	movi	r3,4
  11ea3c:	10c00005 	stb	r3,0(r2)
        return (0);
  11ea40:	0005883a 	mov	r2,zero
  11ea44:	00004206 	br	11eb50 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  11ea48:	e0bffd17 	ldw	r2,-12(fp)
  11ea4c:	10800003 	ldbu	r2,0(r2)
  11ea50:	10803fcc 	andi	r2,r2,255
  11ea54:	108000e0 	cmpeqi	r2,r2,3
  11ea58:	1000051e 	bne	r2,zero,11ea70 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  11ea5c:	e0bfff17 	ldw	r2,-4(fp)
  11ea60:	00c00044 	movi	r3,1
  11ea64:	10c00005 	stb	r3,0(r2)
        return (0);
  11ea68:	0005883a 	mov	r2,zero
  11ea6c:	00003806 	br	11eb50 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11ea70:	0005303a 	rdctl	r2,status
  11ea74:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11ea78:	e0fffc17 	ldw	r3,-16(fp)
  11ea7c:	00bfff84 	movi	r2,-2
  11ea80:	1884703a 	and	r2,r3,r2
  11ea84:	1001703a 	wrctl	status,r2
  
  return context;
  11ea88:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  11ea8c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  11ea90:	e0bffd17 	ldw	r2,-12(fp)
  11ea94:	10800283 	ldbu	r2,10(r2)
  11ea98:	10803fcc 	andi	r2,r2,255
  11ea9c:	10002526 	beq	r2,zero,11eb34 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
  11eaa0:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
  11eaa4:	e0bffe03 	ldbu	r2,-8(fp)
  11eaa8:	10800060 	cmpeqi	r2,r2,1
  11eaac:	10000e26 	beq	r2,zero,11eae8 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  11eab0:	00000806 	br	11ead4 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  11eab4:	01c00084 	movi	r7,2
  11eab8:	01800044 	movi	r6,1
  11eabc:	000b883a 	mov	r5,zero
  11eac0:	e13ffd17 	ldw	r4,-12(fp)
  11eac4:	011a1fc0 	call	11a1fc <OS_EventTaskRdy>
                     nbr_tasks++;
  11eac8:	e0bff803 	ldbu	r2,-32(fp)
  11eacc:	10800044 	addi	r2,r2,1
  11ead0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  11ead4:	e0bffd17 	ldw	r2,-12(fp)
  11ead8:	10800283 	ldbu	r2,10(r2)
  11eadc:	10803fcc 	andi	r2,r2,255
  11eae0:	103ff41e 	bne	r2,zero,11eab4 <__alt_data_end+0xfffdeab4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  11eae4:	00000906 	br	11eb0c <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  11eae8:	01c00084 	movi	r7,2
  11eaec:	01800044 	movi	r6,1
  11eaf0:	000b883a 	mov	r5,zero
  11eaf4:	e13ffd17 	ldw	r4,-12(fp)
  11eaf8:	011a1fc0 	call	11a1fc <OS_EventTaskRdy>
                 nbr_tasks++;
  11eafc:	e0bff803 	ldbu	r2,-32(fp)
  11eb00:	10800044 	addi	r2,r2,1
  11eb04:	e0bff805 	stb	r2,-32(fp)
                 break;
  11eb08:	0001883a 	nop
  11eb0c:	e0bff917 	ldw	r2,-28(fp)
  11eb10:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11eb14:	e0bffa17 	ldw	r2,-24(fp)
  11eb18:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  11eb1c:	011ac480 	call	11ac48 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  11eb20:	e0bfff17 	ldw	r2,-4(fp)
  11eb24:	00c00384 	movi	r3,14
  11eb28:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
  11eb2c:	e0bff803 	ldbu	r2,-32(fp)
  11eb30:	00000706 	br	11eb50 <OSSemPendAbort+0x158>
  11eb34:	e0bff917 	ldw	r2,-28(fp)
  11eb38:	e0bffb15 	stw	r2,-20(fp)
  11eb3c:	e0bffb17 	ldw	r2,-20(fp)
  11eb40:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  11eb44:	e0bfff17 	ldw	r2,-4(fp)
  11eb48:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  11eb4c:	0005883a 	mov	r2,zero
}
  11eb50:	e037883a 	mov	sp,fp
  11eb54:	dfc00117 	ldw	ra,4(sp)
  11eb58:	df000017 	ldw	fp,0(sp)
  11eb5c:	dec00204 	addi	sp,sp,8
  11eb60:	f800283a 	ret

0011eb64 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  11eb64:	defff804 	addi	sp,sp,-32
  11eb68:	dfc00715 	stw	ra,28(sp)
  11eb6c:	df000615 	stw	fp,24(sp)
  11eb70:	df000604 	addi	fp,sp,24
  11eb74:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  11eb78:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  11eb7c:	e0bfff17 	ldw	r2,-4(fp)
  11eb80:	1000021e 	bne	r2,zero,11eb8c <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
  11eb84:	00800104 	movi	r2,4
  11eb88:	00003506 	br	11ec60 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  11eb8c:	e0bfff17 	ldw	r2,-4(fp)
  11eb90:	10800003 	ldbu	r2,0(r2)
  11eb94:	10803fcc 	andi	r2,r2,255
  11eb98:	108000e0 	cmpeqi	r2,r2,3
  11eb9c:	1000021e 	bne	r2,zero,11eba8 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
  11eba0:	00800044 	movi	r2,1
  11eba4:	00002e06 	br	11ec60 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11eba8:	0005303a 	rdctl	r2,status
  11ebac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11ebb0:	e0fffe17 	ldw	r3,-8(fp)
  11ebb4:	00bfff84 	movi	r2,-2
  11ebb8:	1884703a 	and	r2,r3,r2
  11ebbc:	1001703a 	wrctl	status,r2
  
  return context;
  11ebc0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  11ebc4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  11ebc8:	e0bfff17 	ldw	r2,-4(fp)
  11ebcc:	10800283 	ldbu	r2,10(r2)
  11ebd0:	10803fcc 	andi	r2,r2,255
  11ebd4:	10000c26 	beq	r2,zero,11ec08 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  11ebd8:	000f883a 	mov	r7,zero
  11ebdc:	01800044 	movi	r6,1
  11ebe0:	000b883a 	mov	r5,zero
  11ebe4:	e13fff17 	ldw	r4,-4(fp)
  11ebe8:	011a1fc0 	call	11a1fc <OS_EventTaskRdy>
  11ebec:	e0bffa17 	ldw	r2,-24(fp)
  11ebf0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11ebf4:	e0bffb17 	ldw	r2,-20(fp)
  11ebf8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  11ebfc:	011ac480 	call	11ac48 <OS_Sched>
        return (OS_ERR_NONE);
  11ec00:	0005883a 	mov	r2,zero
  11ec04:	00001606 	br	11ec60 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  11ec08:	e0bfff17 	ldw	r2,-4(fp)
  11ec0c:	1080020b 	ldhu	r2,8(r2)
  11ec10:	10ffffcc 	andi	r3,r2,65535
  11ec14:	00bfffd4 	movui	r2,65535
  11ec18:	18800c26 	beq	r3,r2,11ec4c <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  11ec1c:	e0bfff17 	ldw	r2,-4(fp)
  11ec20:	1080020b 	ldhu	r2,8(r2)
  11ec24:	10800044 	addi	r2,r2,1
  11ec28:	1007883a 	mov	r3,r2
  11ec2c:	e0bfff17 	ldw	r2,-4(fp)
  11ec30:	10c0020d 	sth	r3,8(r2)
  11ec34:	e0bffa17 	ldw	r2,-24(fp)
  11ec38:	e0bffc15 	stw	r2,-16(fp)
  11ec3c:	e0bffc17 	ldw	r2,-16(fp)
  11ec40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  11ec44:	0005883a 	mov	r2,zero
  11ec48:	00000506 	br	11ec60 <OSSemPost+0xfc>
  11ec4c:	e0bffa17 	ldw	r2,-24(fp)
  11ec50:	e0bffd15 	stw	r2,-12(fp)
  11ec54:	e0bffd17 	ldw	r2,-12(fp)
  11ec58:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  11ec5c:	00800c84 	movi	r2,50
}
  11ec60:	e037883a 	mov	sp,fp
  11ec64:	dfc00117 	ldw	ra,4(sp)
  11ec68:	df000017 	ldw	fp,0(sp)
  11ec6c:	dec00204 	addi	sp,sp,8
  11ec70:	f800283a 	ret

0011ec74 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  11ec74:	defff704 	addi	sp,sp,-36
  11ec78:	df000815 	stw	fp,32(sp)
  11ec7c:	df000804 	addi	fp,sp,32
  11ec80:	e13ffe15 	stw	r4,-8(fp)
  11ec84:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  11ec88:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  11ec8c:	e0bffe17 	ldw	r2,-8(fp)
  11ec90:	1000021e 	bne	r2,zero,11ec9c <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
  11ec94:	00800104 	movi	r2,4
  11ec98:	00003606 	br	11ed74 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  11ec9c:	e0bfff17 	ldw	r2,-4(fp)
  11eca0:	1000021e 	bne	r2,zero,11ecac <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
  11eca4:	00800244 	movi	r2,9
  11eca8:	00003206 	br	11ed74 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  11ecac:	e0bffe17 	ldw	r2,-8(fp)
  11ecb0:	10800003 	ldbu	r2,0(r2)
  11ecb4:	10803fcc 	andi	r2,r2,255
  11ecb8:	108000e0 	cmpeqi	r2,r2,3
  11ecbc:	1000021e 	bne	r2,zero,11ecc8 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
  11ecc0:	00800044 	movi	r2,1
  11ecc4:	00002b06 	br	11ed74 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11ecc8:	0005303a 	rdctl	r2,status
  11eccc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11ecd0:	e0fffd17 	ldw	r3,-12(fp)
  11ecd4:	00bfff84 	movi	r2,-2
  11ecd8:	1884703a 	and	r2,r3,r2
  11ecdc:	1001703a 	wrctl	status,r2
  
  return context;
  11ece0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  11ece4:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  11ece8:	e0bffe17 	ldw	r2,-8(fp)
  11ecec:	10c00283 	ldbu	r3,10(r2)
  11ecf0:	e0bfff17 	ldw	r2,-4(fp)
  11ecf4:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  11ecf8:	e0bffe17 	ldw	r2,-8(fp)
  11ecfc:	108002c4 	addi	r2,r2,11
  11ed00:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  11ed04:	e0bfff17 	ldw	r2,-4(fp)
  11ed08:	10800084 	addi	r2,r2,2
  11ed0c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  11ed10:	e03ffa05 	stb	zero,-24(fp)
  11ed14:	00000b06 	br	11ed44 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
  11ed18:	e0bff917 	ldw	r2,-28(fp)
  11ed1c:	10c00044 	addi	r3,r2,1
  11ed20:	e0fff915 	stw	r3,-28(fp)
  11ed24:	e0fff817 	ldw	r3,-32(fp)
  11ed28:	19000044 	addi	r4,r3,1
  11ed2c:	e13ff815 	stw	r4,-32(fp)
  11ed30:	18c00003 	ldbu	r3,0(r3)
  11ed34:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  11ed38:	e0bffa03 	ldbu	r2,-24(fp)
  11ed3c:	10800044 	addi	r2,r2,1
  11ed40:	e0bffa05 	stb	r2,-24(fp)
  11ed44:	e0bffa03 	ldbu	r2,-24(fp)
  11ed48:	108000f0 	cmpltui	r2,r2,3
  11ed4c:	103ff21e 	bne	r2,zero,11ed18 <__alt_data_end+0xfffded18>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  11ed50:	e0bffe17 	ldw	r2,-8(fp)
  11ed54:	10c0020b 	ldhu	r3,8(r2)
  11ed58:	e0bfff17 	ldw	r2,-4(fp)
  11ed5c:	10c0000d 	sth	r3,0(r2)
  11ed60:	e0bffb17 	ldw	r2,-20(fp)
  11ed64:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11ed68:	e0bffc17 	ldw	r2,-16(fp)
  11ed6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  11ed70:	0005883a 	mov	r2,zero
}
  11ed74:	e037883a 	mov	sp,fp
  11ed78:	df000017 	ldw	fp,0(sp)
  11ed7c:	dec00104 	addi	sp,sp,4
  11ed80:	f800283a 	ret

0011ed84 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  11ed84:	defff904 	addi	sp,sp,-28
  11ed88:	df000615 	stw	fp,24(sp)
  11ed8c:	df000604 	addi	fp,sp,24
  11ed90:	e13ffd15 	stw	r4,-12(fp)
  11ed94:	2805883a 	mov	r2,r5
  11ed98:	e1bfff15 	stw	r6,-4(fp)
  11ed9c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  11eda0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  11eda4:	e0bfff17 	ldw	r2,-4(fp)
  11eda8:	10003126 	beq	r2,zero,11ee70 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  11edac:	e0bffd17 	ldw	r2,-12(fp)
  11edb0:	1000041e 	bne	r2,zero,11edc4 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
  11edb4:	e0bfff17 	ldw	r2,-4(fp)
  11edb8:	00c00104 	movi	r3,4
  11edbc:	10c00005 	stb	r3,0(r2)
        return;
  11edc0:	00002c06 	br	11ee74 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  11edc4:	e0bffd17 	ldw	r2,-12(fp)
  11edc8:	10800003 	ldbu	r2,0(r2)
  11edcc:	10803fcc 	andi	r2,r2,255
  11edd0:	108000e0 	cmpeqi	r2,r2,3
  11edd4:	1000041e 	bne	r2,zero,11ede8 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
  11edd8:	e0bfff17 	ldw	r2,-4(fp)
  11eddc:	00c00044 	movi	r3,1
  11ede0:	10c00005 	stb	r3,0(r2)
        return;
  11ede4:	00002306 	br	11ee74 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11ede8:	0005303a 	rdctl	r2,status
  11edec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11edf0:	e0fffc17 	ldw	r3,-16(fp)
  11edf4:	00bfff84 	movi	r2,-2
  11edf8:	1884703a 	and	r2,r3,r2
  11edfc:	1001703a 	wrctl	status,r2
  
  return context;
  11ee00:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  11ee04:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
  11ee08:	e0bfff17 	ldw	r2,-4(fp)
  11ee0c:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  11ee10:	e0bffd17 	ldw	r2,-12(fp)
  11ee14:	1080020b 	ldhu	r2,8(r2)
  11ee18:	10bfffcc 	andi	r2,r2,65535
  11ee1c:	10000426 	beq	r2,zero,11ee30 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  11ee20:	e0bffd17 	ldw	r2,-12(fp)
  11ee24:	e0fffe0b 	ldhu	r3,-8(fp)
  11ee28:	10c0020d 	sth	r3,8(r2)
  11ee2c:	00000b06 	br	11ee5c <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  11ee30:	e0bffd17 	ldw	r2,-12(fp)
  11ee34:	10800283 	ldbu	r2,10(r2)
  11ee38:	10803fcc 	andi	r2,r2,255
  11ee3c:	1000041e 	bne	r2,zero,11ee50 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  11ee40:	e0bffd17 	ldw	r2,-12(fp)
  11ee44:	e0fffe0b 	ldhu	r3,-8(fp)
  11ee48:	10c0020d 	sth	r3,8(r2)
  11ee4c:	00000306 	br	11ee5c <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  11ee50:	e0bfff17 	ldw	r2,-4(fp)
  11ee54:	00c01244 	movi	r3,73
  11ee58:	10c00005 	stb	r3,0(r2)
  11ee5c:	e0bffa17 	ldw	r2,-24(fp)
  11ee60:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11ee64:	e0bffb17 	ldw	r2,-20(fp)
  11ee68:	1001703a 	wrctl	status,r2
  11ee6c:	00000106 	br	11ee74 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
  11ee70:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
  11ee74:	e037883a 	mov	sp,fp
  11ee78:	df000017 	ldw	fp,0(sp)
  11ee7c:	dec00104 	addi	sp,sp,4
  11ee80:	f800283a 	ret

0011ee84 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  11ee84:	defff104 	addi	sp,sp,-60
  11ee88:	dfc00e15 	stw	ra,56(sp)
  11ee8c:	df000d15 	stw	fp,52(sp)
  11ee90:	df000d04 	addi	fp,sp,52
  11ee94:	2007883a 	mov	r3,r4
  11ee98:	2805883a 	mov	r2,r5
  11ee9c:	e0fffe05 	stb	r3,-8(fp)
  11eea0:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  11eea4:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  11eea8:	e0bffe03 	ldbu	r2,-8(fp)
  11eeac:	10800530 	cmpltui	r2,r2,20
  11eeb0:	1000051e 	bne	r2,zero,11eec8 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
  11eeb4:	e0bffe03 	ldbu	r2,-8(fp)
  11eeb8:	10803fe0 	cmpeqi	r2,r2,255
  11eebc:	1000021e 	bne	r2,zero,11eec8 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
  11eec0:	00800a84 	movi	r2,42
  11eec4:	00012606 	br	11f360 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  11eec8:	e0bfff03 	ldbu	r2,-4(fp)
  11eecc:	10800530 	cmpltui	r2,r2,20
  11eed0:	1000021e 	bne	r2,zero,11eedc <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  11eed4:	00800a84 	movi	r2,42
  11eed8:	00012106 	br	11f360 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11eedc:	0005303a 	rdctl	r2,status
  11eee0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11eee4:	e0fffd17 	ldw	r3,-12(fp)
  11eee8:	00bfff84 	movi	r2,-2
  11eeec:	1884703a 	and	r2,r3,r2
  11eef0:	1001703a 	wrctl	status,r2
  
  return context;
  11eef4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  11eef8:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  11eefc:	e0ffff03 	ldbu	r3,-4(fp)
  11ef00:	008004f4 	movhi	r2,19
  11ef04:	10b94804 	addi	r2,r2,-6880
  11ef08:	18c7883a 	add	r3,r3,r3
  11ef0c:	18c7883a 	add	r3,r3,r3
  11ef10:	10c5883a 	add	r2,r2,r3
  11ef14:	10800017 	ldw	r2,0(r2)
  11ef18:	10000626 	beq	r2,zero,11ef34 <OSTaskChangePrio+0xb0>
  11ef1c:	e0bff517 	ldw	r2,-44(fp)
  11ef20:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11ef24:	e0bff617 	ldw	r2,-40(fp)
  11ef28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  11ef2c:	00800a04 	movi	r2,40
  11ef30:	00010b06 	br	11f360 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  11ef34:	e0bffe03 	ldbu	r2,-8(fp)
  11ef38:	10803fd8 	cmpnei	r2,r2,255
  11ef3c:	1000031e 	bne	r2,zero,11ef4c <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  11ef40:	d0a74817 	ldw	r2,-25312(gp)
  11ef44:	10800c83 	ldbu	r2,50(r2)
  11ef48:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  11ef4c:	e0fffe03 	ldbu	r3,-8(fp)
  11ef50:	008004f4 	movhi	r2,19
  11ef54:	10b94804 	addi	r2,r2,-6880
  11ef58:	18c7883a 	add	r3,r3,r3
  11ef5c:	18c7883a 	add	r3,r3,r3
  11ef60:	10c5883a 	add	r2,r2,r3
  11ef64:	10800017 	ldw	r2,0(r2)
  11ef68:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  11ef6c:	e0bff817 	ldw	r2,-32(fp)
  11ef70:	1000061e 	bne	r2,zero,11ef8c <OSTaskChangePrio+0x108>
  11ef74:	e0bff517 	ldw	r2,-44(fp)
  11ef78:	e0bff715 	stw	r2,-36(fp)
  11ef7c:	e0bff717 	ldw	r2,-36(fp)
  11ef80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  11ef84:	00800a44 	movi	r2,41
  11ef88:	0000f506 	br	11f360 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  11ef8c:	e0bff817 	ldw	r2,-32(fp)
  11ef90:	10800058 	cmpnei	r2,r2,1
  11ef94:	1000061e 	bne	r2,zero,11efb0 <OSTaskChangePrio+0x12c>
  11ef98:	e0bff517 	ldw	r2,-44(fp)
  11ef9c:	e0bff915 	stw	r2,-28(fp)
  11efa0:	e0bff917 	ldw	r2,-28(fp)
  11efa4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  11efa8:	008010c4 	movi	r2,67
  11efac:	0000ec06 	br	11f360 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  11efb0:	e0bfff03 	ldbu	r2,-4(fp)
  11efb4:	1004d0fa 	srli	r2,r2,3
  11efb8:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  11efbc:	e0bfff03 	ldbu	r2,-4(fp)
  11efc0:	108001cc 	andi	r2,r2,7
  11efc4:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
  11efc8:	e0bffb03 	ldbu	r2,-20(fp)
  11efcc:	00c00044 	movi	r3,1
  11efd0:	1884983a 	sll	r2,r3,r2
  11efd4:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
  11efd8:	e0bffb43 	ldbu	r2,-19(fp)
  11efdc:	00c00044 	movi	r3,1
  11efe0:	1884983a 	sll	r2,r3,r2
  11efe4:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  11efe8:	e0fffe03 	ldbu	r3,-8(fp)
  11efec:	008004f4 	movhi	r2,19
  11eff0:	10b94804 	addi	r2,r2,-6880
  11eff4:	18c7883a 	add	r3,r3,r3
  11eff8:	18c7883a 	add	r3,r3,r3
  11effc:	10c5883a 	add	r2,r2,r3
  11f000:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  11f004:	e0ffff03 	ldbu	r3,-4(fp)
  11f008:	008004f4 	movhi	r2,19
  11f00c:	10b94804 	addi	r2,r2,-6880
  11f010:	18c7883a 	add	r3,r3,r3
  11f014:	18c7883a 	add	r3,r3,r3
  11f018:	10c5883a 	add	r2,r2,r3
  11f01c:	e0fff817 	ldw	r3,-32(fp)
  11f020:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
  11f024:	e0bff817 	ldw	r2,-32(fp)
  11f028:	10800d03 	ldbu	r2,52(r2)
  11f02c:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
  11f030:	e0bff817 	ldw	r2,-32(fp)
  11f034:	10800d83 	ldbu	r2,54(r2)
  11f038:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  11f03c:	e0bff817 	ldw	r2,-32(fp)
  11f040:	10800d43 	ldbu	r2,53(r2)
  11f044:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  11f048:	e0fffc03 	ldbu	r3,-16(fp)
  11f04c:	d0a74544 	addi	r2,gp,-25323
  11f050:	1885883a 	add	r2,r3,r2
  11f054:	10c00003 	ldbu	r3,0(r2)
  11f058:	e0bffc83 	ldbu	r2,-14(fp)
  11f05c:	1884703a 	and	r2,r3,r2
  11f060:	10803fcc 	andi	r2,r2,255
  11f064:	10002826 	beq	r2,zero,11f108 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
  11f068:	e0fffc03 	ldbu	r3,-16(fp)
  11f06c:	e13ffc03 	ldbu	r4,-16(fp)
  11f070:	d0a74544 	addi	r2,gp,-25323
  11f074:	2085883a 	add	r2,r4,r2
  11f078:	10800003 	ldbu	r2,0(r2)
  11f07c:	1009883a 	mov	r4,r2
  11f080:	e0bffc83 	ldbu	r2,-14(fp)
  11f084:	0084303a 	nor	r2,zero,r2
  11f088:	2084703a 	and	r2,r4,r2
  11f08c:	1009883a 	mov	r4,r2
  11f090:	d0a74544 	addi	r2,gp,-25323
  11f094:	1885883a 	add	r2,r3,r2
  11f098:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  11f09c:	e0fffc03 	ldbu	r3,-16(fp)
  11f0a0:	d0a74544 	addi	r2,gp,-25323
  11f0a4:	1885883a 	add	r2,r3,r2
  11f0a8:	10800003 	ldbu	r2,0(r2)
  11f0ac:	10803fcc 	andi	r2,r2,255
  11f0b0:	1000061e 	bne	r2,zero,11f0cc <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
  11f0b4:	e0bffc43 	ldbu	r2,-15(fp)
  11f0b8:	0084303a 	nor	r2,zero,r2
  11f0bc:	1007883a 	mov	r3,r2
  11f0c0:	d0a74503 	ldbu	r2,-25324(gp)
  11f0c4:	1884703a 	and	r2,r3,r2
  11f0c8:	d0a74505 	stb	r2,-25324(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  11f0cc:	d0e74503 	ldbu	r3,-25324(gp)
  11f0d0:	e0bffb83 	ldbu	r2,-18(fp)
  11f0d4:	1884b03a 	or	r2,r3,r2
  11f0d8:	d0a74505 	stb	r2,-25324(gp)
         OSRdyTbl[y_new] |= bitx_new;
  11f0dc:	e0fffb03 	ldbu	r3,-20(fp)
  11f0e0:	e13ffb03 	ldbu	r4,-20(fp)
  11f0e4:	d0a74544 	addi	r2,gp,-25323
  11f0e8:	2085883a 	add	r2,r4,r2
  11f0ec:	11000003 	ldbu	r4,0(r2)
  11f0f0:	e0bffbc3 	ldbu	r2,-17(fp)
  11f0f4:	2084b03a 	or	r2,r4,r2
  11f0f8:	1009883a 	mov	r4,r2
  11f0fc:	d0a74544 	addi	r2,gp,-25323
  11f100:	1885883a 	add	r2,r3,r2
  11f104:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  11f108:	e0bff817 	ldw	r2,-32(fp)
  11f10c:	10800717 	ldw	r2,28(r2)
  11f110:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
  11f114:	e0bff317 	ldw	r2,-52(fp)
  11f118:	10003326 	beq	r2,zero,11f1e8 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  11f11c:	e0bffc03 	ldbu	r2,-16(fp)
  11f120:	e0fffc03 	ldbu	r3,-16(fp)
  11f124:	e13ff317 	ldw	r4,-52(fp)
  11f128:	20c7883a 	add	r3,r4,r3
  11f12c:	18c002c4 	addi	r3,r3,11
  11f130:	18c00003 	ldbu	r3,0(r3)
  11f134:	1809883a 	mov	r4,r3
  11f138:	e0fffc83 	ldbu	r3,-14(fp)
  11f13c:	00c6303a 	nor	r3,zero,r3
  11f140:	20c6703a 	and	r3,r4,r3
  11f144:	1809883a 	mov	r4,r3
  11f148:	e0fff317 	ldw	r3,-52(fp)
  11f14c:	1885883a 	add	r2,r3,r2
  11f150:	108002c4 	addi	r2,r2,11
  11f154:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  11f158:	e0bffc03 	ldbu	r2,-16(fp)
  11f15c:	e0fff317 	ldw	r3,-52(fp)
  11f160:	1885883a 	add	r2,r3,r2
  11f164:	108002c4 	addi	r2,r2,11
  11f168:	10800003 	ldbu	r2,0(r2)
  11f16c:	10803fcc 	andi	r2,r2,255
  11f170:	1000091e 	bne	r2,zero,11f198 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
  11f174:	e0bff317 	ldw	r2,-52(fp)
  11f178:	10800283 	ldbu	r2,10(r2)
  11f17c:	1007883a 	mov	r3,r2
  11f180:	e0bffc43 	ldbu	r2,-15(fp)
  11f184:	0084303a 	nor	r2,zero,r2
  11f188:	1884703a 	and	r2,r3,r2
  11f18c:	1007883a 	mov	r3,r2
  11f190:	e0bff317 	ldw	r2,-52(fp)
  11f194:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  11f198:	e0bff317 	ldw	r2,-52(fp)
  11f19c:	10c00283 	ldbu	r3,10(r2)
  11f1a0:	e0bffb83 	ldbu	r2,-18(fp)
  11f1a4:	1884b03a 	or	r2,r3,r2
  11f1a8:	1007883a 	mov	r3,r2
  11f1ac:	e0bff317 	ldw	r2,-52(fp)
  11f1b0:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  11f1b4:	e0bffb03 	ldbu	r2,-20(fp)
  11f1b8:	e0fffb03 	ldbu	r3,-20(fp)
  11f1bc:	e13ff317 	ldw	r4,-52(fp)
  11f1c0:	20c7883a 	add	r3,r4,r3
  11f1c4:	18c002c4 	addi	r3,r3,11
  11f1c8:	19000003 	ldbu	r4,0(r3)
  11f1cc:	e0fffbc3 	ldbu	r3,-17(fp)
  11f1d0:	20c6b03a 	or	r3,r4,r3
  11f1d4:	1809883a 	mov	r4,r3
  11f1d8:	e0fff317 	ldw	r3,-52(fp)
  11f1dc:	1885883a 	add	r2,r3,r2
  11f1e0:	108002c4 	addi	r2,r2,11
  11f1e4:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  11f1e8:	e0bff817 	ldw	r2,-32(fp)
  11f1ec:	10800817 	ldw	r2,32(r2)
  11f1f0:	10004226 	beq	r2,zero,11f2fc <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
  11f1f4:	e0bff817 	ldw	r2,-32(fp)
  11f1f8:	10800817 	ldw	r2,32(r2)
  11f1fc:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
  11f200:	e0bff417 	ldw	r2,-48(fp)
  11f204:	10800017 	ldw	r2,0(r2)
  11f208:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
  11f20c:	00003906 	br	11f2f4 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  11f210:	e0bffc03 	ldbu	r2,-16(fp)
  11f214:	e0fffc03 	ldbu	r3,-16(fp)
  11f218:	e13ff317 	ldw	r4,-52(fp)
  11f21c:	20c7883a 	add	r3,r4,r3
  11f220:	18c002c4 	addi	r3,r3,11
  11f224:	18c00003 	ldbu	r3,0(r3)
  11f228:	1809883a 	mov	r4,r3
  11f22c:	e0fffc83 	ldbu	r3,-14(fp)
  11f230:	00c6303a 	nor	r3,zero,r3
  11f234:	20c6703a 	and	r3,r4,r3
  11f238:	1809883a 	mov	r4,r3
  11f23c:	e0fff317 	ldw	r3,-52(fp)
  11f240:	1885883a 	add	r2,r3,r2
  11f244:	108002c4 	addi	r2,r2,11
  11f248:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  11f24c:	e0bffc03 	ldbu	r2,-16(fp)
  11f250:	e0fff317 	ldw	r3,-52(fp)
  11f254:	1885883a 	add	r2,r3,r2
  11f258:	108002c4 	addi	r2,r2,11
  11f25c:	10800003 	ldbu	r2,0(r2)
  11f260:	10803fcc 	andi	r2,r2,255
  11f264:	1000091e 	bne	r2,zero,11f28c <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
  11f268:	e0bff317 	ldw	r2,-52(fp)
  11f26c:	10800283 	ldbu	r2,10(r2)
  11f270:	1007883a 	mov	r3,r2
  11f274:	e0bffc43 	ldbu	r2,-15(fp)
  11f278:	0084303a 	nor	r2,zero,r2
  11f27c:	1884703a 	and	r2,r3,r2
  11f280:	1007883a 	mov	r3,r2
  11f284:	e0bff317 	ldw	r2,-52(fp)
  11f288:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  11f28c:	e0bff317 	ldw	r2,-52(fp)
  11f290:	10c00283 	ldbu	r3,10(r2)
  11f294:	e0bffb83 	ldbu	r2,-18(fp)
  11f298:	1884b03a 	or	r2,r3,r2
  11f29c:	1007883a 	mov	r3,r2
  11f2a0:	e0bff317 	ldw	r2,-52(fp)
  11f2a4:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  11f2a8:	e0bffb03 	ldbu	r2,-20(fp)
  11f2ac:	e0fffb03 	ldbu	r3,-20(fp)
  11f2b0:	e13ff317 	ldw	r4,-52(fp)
  11f2b4:	20c7883a 	add	r3,r4,r3
  11f2b8:	18c002c4 	addi	r3,r3,11
  11f2bc:	19000003 	ldbu	r4,0(r3)
  11f2c0:	e0fffbc3 	ldbu	r3,-17(fp)
  11f2c4:	20c6b03a 	or	r3,r4,r3
  11f2c8:	1809883a 	mov	r4,r3
  11f2cc:	e0fff317 	ldw	r3,-52(fp)
  11f2d0:	1885883a 	add	r2,r3,r2
  11f2d4:	108002c4 	addi	r2,r2,11
  11f2d8:	11000005 	stb	r4,0(r2)
            pevents++;
  11f2dc:	e0bff417 	ldw	r2,-48(fp)
  11f2e0:	10800104 	addi	r2,r2,4
  11f2e4:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
  11f2e8:	e0bff417 	ldw	r2,-48(fp)
  11f2ec:	10800017 	ldw	r2,0(r2)
  11f2f0:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  11f2f4:	e0bff317 	ldw	r2,-52(fp)
  11f2f8:	103fc51e 	bne	r2,zero,11f210 <__alt_data_end+0xfffdf210>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  11f2fc:	e0bff817 	ldw	r2,-32(fp)
  11f300:	e0ffff03 	ldbu	r3,-4(fp)
  11f304:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
  11f308:	e0bff817 	ldw	r2,-32(fp)
  11f30c:	e0fffb03 	ldbu	r3,-20(fp)
  11f310:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
  11f314:	e0bff817 	ldw	r2,-32(fp)
  11f318:	e0fffb43 	ldbu	r3,-19(fp)
  11f31c:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
  11f320:	e0bff817 	ldw	r2,-32(fp)
  11f324:	e0fffb83 	ldbu	r3,-18(fp)
  11f328:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
  11f32c:	e0bff817 	ldw	r2,-32(fp)
  11f330:	e0fffbc3 	ldbu	r3,-17(fp)
  11f334:	10c00d45 	stb	r3,53(r2)
  11f338:	e0bff517 	ldw	r2,-44(fp)
  11f33c:	e0bffa15 	stw	r2,-24(fp)
  11f340:	e0bffa17 	ldw	r2,-24(fp)
  11f344:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  11f348:	d0a73943 	ldbu	r2,-25371(gp)
  11f34c:	10803fcc 	andi	r2,r2,255
  11f350:	10800058 	cmpnei	r2,r2,1
  11f354:	1000011e 	bne	r2,zero,11f35c <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
  11f358:	011ac480 	call	11ac48 <OS_Sched>
    }
    return (OS_ERR_NONE);
  11f35c:	0005883a 	mov	r2,zero
}
  11f360:	e037883a 	mov	sp,fp
  11f364:	dfc00117 	ldw	ra,4(sp)
  11f368:	df000017 	ldw	fp,0(sp)
  11f36c:	dec00204 	addi	sp,sp,8
  11f370:	f800283a 	ret

0011f374 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  11f374:	deffee04 	addi	sp,sp,-72
  11f378:	dfc01115 	stw	ra,68(sp)
  11f37c:	df001015 	stw	fp,64(sp)
  11f380:	df001004 	addi	fp,sp,64
  11f384:	e13ffc15 	stw	r4,-16(fp)
  11f388:	e17ffd15 	stw	r5,-12(fp)
  11f38c:	e1bffe15 	stw	r6,-8(fp)
  11f390:	3805883a 	mov	r2,r7
  11f394:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  11f398:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  11f39c:	e0bfff03 	ldbu	r2,-4(fp)
  11f3a0:	10800570 	cmpltui	r2,r2,21
  11f3a4:	1000021e 	bne	r2,zero,11f3b0 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  11f3a8:	00800a84 	movi	r2,42
  11f3ac:	00005706 	br	11f50c <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11f3b0:	0005303a 	rdctl	r2,status
  11f3b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11f3b8:	e0fffb17 	ldw	r3,-20(fp)
  11f3bc:	00bfff84 	movi	r2,-2
  11f3c0:	1884703a 	and	r2,r3,r2
  11f3c4:	1001703a 	wrctl	status,r2
  
  return context;
  11f3c8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  11f3cc:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  11f3d0:	d0a74703 	ldbu	r2,-25316(gp)
  11f3d4:	10803fcc 	andi	r2,r2,255
  11f3d8:	10000626 	beq	r2,zero,11f3f4 <OSTaskCreate+0x80>
  11f3dc:	e0bff317 	ldw	r2,-52(fp)
  11f3e0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11f3e4:	e0bff417 	ldw	r2,-48(fp)
  11f3e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  11f3ec:	00800f04 	movi	r2,60
  11f3f0:	00004606 	br	11f50c <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  11f3f4:	e0ffff03 	ldbu	r3,-4(fp)
  11f3f8:	008004f4 	movhi	r2,19
  11f3fc:	10b94804 	addi	r2,r2,-6880
  11f400:	18c7883a 	add	r3,r3,r3
  11f404:	18c7883a 	add	r3,r3,r3
  11f408:	10c5883a 	add	r2,r2,r3
  11f40c:	10800017 	ldw	r2,0(r2)
  11f410:	1000391e 	bne	r2,zero,11f4f8 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  11f414:	e0ffff03 	ldbu	r3,-4(fp)
  11f418:	008004f4 	movhi	r2,19
  11f41c:	10b94804 	addi	r2,r2,-6880
  11f420:	18c7883a 	add	r3,r3,r3
  11f424:	18c7883a 	add	r3,r3,r3
  11f428:	10c5883a 	add	r2,r2,r3
  11f42c:	00c00044 	movi	r3,1
  11f430:	10c00015 	stw	r3,0(r2)
  11f434:	e0bff317 	ldw	r2,-52(fp)
  11f438:	e0bff515 	stw	r2,-44(fp)
  11f43c:	e0bff517 	ldw	r2,-44(fp)
  11f440:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  11f444:	000f883a 	mov	r7,zero
  11f448:	e1bffe17 	ldw	r6,-8(fp)
  11f44c:	e17ffd17 	ldw	r5,-12(fp)
  11f450:	e13ffc17 	ldw	r4,-16(fp)
  11f454:	01226100 	call	122610 <OSTaskStkInit>
  11f458:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  11f45c:	e0bfff03 	ldbu	r2,-4(fp)
  11f460:	d8000215 	stw	zero,8(sp)
  11f464:	d8000115 	stw	zero,4(sp)
  11f468:	d8000015 	stw	zero,0(sp)
  11f46c:	000f883a 	mov	r7,zero
  11f470:	000d883a 	mov	r6,zero
  11f474:	e17ff717 	ldw	r5,-36(fp)
  11f478:	1009883a 	mov	r4,r2
  11f47c:	011b0480 	call	11b048 <OS_TCBInit>
  11f480:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
  11f484:	e0bff803 	ldbu	r2,-32(fp)
  11f488:	1000061e 	bne	r2,zero,11f4a4 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  11f48c:	d0a73943 	ldbu	r2,-25371(gp)
  11f490:	10803fcc 	andi	r2,r2,255
  11f494:	10800058 	cmpnei	r2,r2,1
  11f498:	1000151e 	bne	r2,zero,11f4f0 <OSTaskCreate+0x17c>
                OS_Sched();
  11f49c:	011ac480 	call	11ac48 <OS_Sched>
  11f4a0:	00001306 	br	11f4f0 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11f4a4:	0005303a 	rdctl	r2,status
  11f4a8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11f4ac:	e0fffa17 	ldw	r3,-24(fp)
  11f4b0:	00bfff84 	movi	r2,-2
  11f4b4:	1884703a 	and	r2,r3,r2
  11f4b8:	1001703a 	wrctl	status,r2
  
  return context;
  11f4bc:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  11f4c0:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  11f4c4:	e0ffff03 	ldbu	r3,-4(fp)
  11f4c8:	008004f4 	movhi	r2,19
  11f4cc:	10b94804 	addi	r2,r2,-6880
  11f4d0:	18c7883a 	add	r3,r3,r3
  11f4d4:	18c7883a 	add	r3,r3,r3
  11f4d8:	10c5883a 	add	r2,r2,r3
  11f4dc:	10000015 	stw	zero,0(r2)
  11f4e0:	e0bff317 	ldw	r2,-52(fp)
  11f4e4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11f4e8:	e0bff617 	ldw	r2,-40(fp)
  11f4ec:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  11f4f0:	e0bff803 	ldbu	r2,-32(fp)
  11f4f4:	00000506 	br	11f50c <OSTaskCreate+0x198>
  11f4f8:	e0bff317 	ldw	r2,-52(fp)
  11f4fc:	e0bff915 	stw	r2,-28(fp)
  11f500:	e0bff917 	ldw	r2,-28(fp)
  11f504:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  11f508:	00800a04 	movi	r2,40
}
  11f50c:	e037883a 	mov	sp,fp
  11f510:	dfc00117 	ldw	ra,4(sp)
  11f514:	df000017 	ldw	fp,0(sp)
  11f518:	dec00204 	addi	sp,sp,8
  11f51c:	f800283a 	ret

0011f520 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  11f520:	deffec04 	addi	sp,sp,-80
  11f524:	dfc01315 	stw	ra,76(sp)
  11f528:	df001215 	stw	fp,72(sp)
  11f52c:	df001204 	addi	fp,sp,72
  11f530:	e13ffa15 	stw	r4,-24(fp)
  11f534:	e17ffb15 	stw	r5,-20(fp)
  11f538:	e1bffc15 	stw	r6,-16(fp)
  11f53c:	3809883a 	mov	r4,r7
  11f540:	e0c00217 	ldw	r3,8(fp)
  11f544:	e0800617 	ldw	r2,24(fp)
  11f548:	e13ffd05 	stb	r4,-12(fp)
  11f54c:	e0fffe0d 	sth	r3,-8(fp)
  11f550:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  11f554:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  11f558:	e0bffd03 	ldbu	r2,-12(fp)
  11f55c:	10800570 	cmpltui	r2,r2,21
  11f560:	1000021e 	bne	r2,zero,11f56c <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  11f564:	00800a84 	movi	r2,42
  11f568:	00006106 	br	11f6f0 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11f56c:	0005303a 	rdctl	r2,status
  11f570:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11f574:	e0fff917 	ldw	r3,-28(fp)
  11f578:	00bfff84 	movi	r2,-2
  11f57c:	1884703a 	and	r2,r3,r2
  11f580:	1001703a 	wrctl	status,r2
  
  return context;
  11f584:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  11f588:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  11f58c:	d0a74703 	ldbu	r2,-25316(gp)
  11f590:	10803fcc 	andi	r2,r2,255
  11f594:	10000626 	beq	r2,zero,11f5b0 <OSTaskCreateExt+0x90>
  11f598:	e0bff117 	ldw	r2,-60(fp)
  11f59c:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11f5a0:	e0bff217 	ldw	r2,-56(fp)
  11f5a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  11f5a8:	00800f04 	movi	r2,60
  11f5ac:	00005006 	br	11f6f0 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  11f5b0:	e0fffd03 	ldbu	r3,-12(fp)
  11f5b4:	008004f4 	movhi	r2,19
  11f5b8:	10b94804 	addi	r2,r2,-6880
  11f5bc:	18c7883a 	add	r3,r3,r3
  11f5c0:	18c7883a 	add	r3,r3,r3
  11f5c4:	10c5883a 	add	r2,r2,r3
  11f5c8:	10800017 	ldw	r2,0(r2)
  11f5cc:	1000431e 	bne	r2,zero,11f6dc <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  11f5d0:	e0fffd03 	ldbu	r3,-12(fp)
  11f5d4:	008004f4 	movhi	r2,19
  11f5d8:	10b94804 	addi	r2,r2,-6880
  11f5dc:	18c7883a 	add	r3,r3,r3
  11f5e0:	18c7883a 	add	r3,r3,r3
  11f5e4:	10c5883a 	add	r2,r2,r3
  11f5e8:	00c00044 	movi	r3,1
  11f5ec:	10c00015 	stw	r3,0(r2)
  11f5f0:	e0bff117 	ldw	r2,-60(fp)
  11f5f4:	e0bff315 	stw	r2,-52(fp)
  11f5f8:	e0bff317 	ldw	r2,-52(fp)
  11f5fc:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  11f600:	e0bfff0b 	ldhu	r2,-4(fp)
  11f604:	100d883a 	mov	r6,r2
  11f608:	e1400417 	ldw	r5,16(fp)
  11f60c:	e1000317 	ldw	r4,12(fp)
  11f610:	01205800 	call	120580 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  11f614:	e0bfff0b 	ldhu	r2,-4(fp)
  11f618:	100f883a 	mov	r7,r2
  11f61c:	e1bffc17 	ldw	r6,-16(fp)
  11f620:	e17ffb17 	ldw	r5,-20(fp)
  11f624:	e13ffa17 	ldw	r4,-24(fp)
  11f628:	01226100 	call	122610 <OSTaskStkInit>
  11f62c:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  11f630:	e0fffd03 	ldbu	r3,-12(fp)
  11f634:	e13ffe0b 	ldhu	r4,-8(fp)
  11f638:	e0bfff0b 	ldhu	r2,-4(fp)
  11f63c:	d8800215 	stw	r2,8(sp)
  11f640:	e0800517 	ldw	r2,20(fp)
  11f644:	d8800115 	stw	r2,4(sp)
  11f648:	e0800417 	ldw	r2,16(fp)
  11f64c:	d8800015 	stw	r2,0(sp)
  11f650:	200f883a 	mov	r7,r4
  11f654:	e1800317 	ldw	r6,12(fp)
  11f658:	e17ff517 	ldw	r5,-44(fp)
  11f65c:	1809883a 	mov	r4,r3
  11f660:	011b0480 	call	11b048 <OS_TCBInit>
  11f664:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
  11f668:	e0bff603 	ldbu	r2,-40(fp)
  11f66c:	1000061e 	bne	r2,zero,11f688 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  11f670:	d0a73943 	ldbu	r2,-25371(gp)
  11f674:	10803fcc 	andi	r2,r2,255
  11f678:	10800058 	cmpnei	r2,r2,1
  11f67c:	1000151e 	bne	r2,zero,11f6d4 <OSTaskCreateExt+0x1b4>
                OS_Sched();
  11f680:	011ac480 	call	11ac48 <OS_Sched>
  11f684:	00001306 	br	11f6d4 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11f688:	0005303a 	rdctl	r2,status
  11f68c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11f690:	e0fff817 	ldw	r3,-32(fp)
  11f694:	00bfff84 	movi	r2,-2
  11f698:	1884703a 	and	r2,r3,r2
  11f69c:	1001703a 	wrctl	status,r2
  
  return context;
  11f6a0:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  11f6a4:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  11f6a8:	e0fffd03 	ldbu	r3,-12(fp)
  11f6ac:	008004f4 	movhi	r2,19
  11f6b0:	10b94804 	addi	r2,r2,-6880
  11f6b4:	18c7883a 	add	r3,r3,r3
  11f6b8:	18c7883a 	add	r3,r3,r3
  11f6bc:	10c5883a 	add	r2,r2,r3
  11f6c0:	10000015 	stw	zero,0(r2)
  11f6c4:	e0bff117 	ldw	r2,-60(fp)
  11f6c8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11f6cc:	e0bff417 	ldw	r2,-48(fp)
  11f6d0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  11f6d4:	e0bff603 	ldbu	r2,-40(fp)
  11f6d8:	00000506 	br	11f6f0 <OSTaskCreateExt+0x1d0>
  11f6dc:	e0bff117 	ldw	r2,-60(fp)
  11f6e0:	e0bff715 	stw	r2,-36(fp)
  11f6e4:	e0bff717 	ldw	r2,-36(fp)
  11f6e8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  11f6ec:	00800a04 	movi	r2,40
}
  11f6f0:	e037883a 	mov	sp,fp
  11f6f4:	dfc00117 	ldw	ra,4(sp)
  11f6f8:	df000017 	ldw	fp,0(sp)
  11f6fc:	dec00204 	addi	sp,sp,8
  11f700:	f800283a 	ret

0011f704 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  11f704:	defff404 	addi	sp,sp,-48
  11f708:	dfc00b15 	stw	ra,44(sp)
  11f70c:	df000a15 	stw	fp,40(sp)
  11f710:	df000a04 	addi	fp,sp,40
  11f714:	2005883a 	mov	r2,r4
  11f718:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  11f71c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  11f720:	d0a74703 	ldbu	r2,-25316(gp)
  11f724:	10803fcc 	andi	r2,r2,255
  11f728:	10000226 	beq	r2,zero,11f734 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
  11f72c:	00801004 	movi	r2,64
  11f730:	0000c006 	br	11fa34 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  11f734:	e0bfff03 	ldbu	r2,-4(fp)
  11f738:	10800518 	cmpnei	r2,r2,20
  11f73c:	1000021e 	bne	r2,zero,11f748 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
  11f740:	00800f84 	movi	r2,62
  11f744:	0000bb06 	br	11fa34 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  11f748:	e0bfff03 	ldbu	r2,-4(fp)
  11f74c:	10800530 	cmpltui	r2,r2,20
  11f750:	1000051e 	bne	r2,zero,11f768 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
  11f754:	e0bfff03 	ldbu	r2,-4(fp)
  11f758:	10803fe0 	cmpeqi	r2,r2,255
  11f75c:	1000021e 	bne	r2,zero,11f768 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
  11f760:	00800a84 	movi	r2,42
  11f764:	0000b306 	br	11fa34 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11f768:	0005303a 	rdctl	r2,status
  11f76c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11f770:	e0fffe17 	ldw	r3,-8(fp)
  11f774:	00bfff84 	movi	r2,-2
  11f778:	1884703a 	and	r2,r3,r2
  11f77c:	1001703a 	wrctl	status,r2
  
  return context;
  11f780:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  11f784:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  11f788:	e0bfff03 	ldbu	r2,-4(fp)
  11f78c:	10803fd8 	cmpnei	r2,r2,255
  11f790:	1000031e 	bne	r2,zero,11f7a0 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  11f794:	d0a74817 	ldw	r2,-25312(gp)
  11f798:	10800c83 	ldbu	r2,50(r2)
  11f79c:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  11f7a0:	e0ffff03 	ldbu	r3,-4(fp)
  11f7a4:	008004f4 	movhi	r2,19
  11f7a8:	10b94804 	addi	r2,r2,-6880
  11f7ac:	18c7883a 	add	r3,r3,r3
  11f7b0:	18c7883a 	add	r3,r3,r3
  11f7b4:	10c5883a 	add	r2,r2,r3
  11f7b8:	10800017 	ldw	r2,0(r2)
  11f7bc:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  11f7c0:	e0bff817 	ldw	r2,-32(fp)
  11f7c4:	1000061e 	bne	r2,zero,11f7e0 <OSTaskDel+0xdc>
  11f7c8:	e0bff617 	ldw	r2,-40(fp)
  11f7cc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11f7d0:	e0bff717 	ldw	r2,-36(fp)
  11f7d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  11f7d8:	008010c4 	movi	r2,67
  11f7dc:	00009506 	br	11fa34 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  11f7e0:	e0bff817 	ldw	r2,-32(fp)
  11f7e4:	10800058 	cmpnei	r2,r2,1
  11f7e8:	1000061e 	bne	r2,zero,11f804 <OSTaskDel+0x100>
  11f7ec:	e0bff617 	ldw	r2,-40(fp)
  11f7f0:	e0bff915 	stw	r2,-28(fp)
  11f7f4:	e0bff917 	ldw	r2,-28(fp)
  11f7f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  11f7fc:	00800f44 	movi	r2,61
  11f800:	00008c06 	br	11fa34 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  11f804:	e0bff817 	ldw	r2,-32(fp)
  11f808:	10800d03 	ldbu	r2,52(r2)
  11f80c:	10c03fcc 	andi	r3,r2,255
  11f810:	e0bff817 	ldw	r2,-32(fp)
  11f814:	10800d03 	ldbu	r2,52(r2)
  11f818:	11003fcc 	andi	r4,r2,255
  11f81c:	d0a74544 	addi	r2,gp,-25323
  11f820:	2085883a 	add	r2,r4,r2
  11f824:	10800003 	ldbu	r2,0(r2)
  11f828:	1009883a 	mov	r4,r2
  11f82c:	e0bff817 	ldw	r2,-32(fp)
  11f830:	10800d43 	ldbu	r2,53(r2)
  11f834:	0084303a 	nor	r2,zero,r2
  11f838:	2084703a 	and	r2,r4,r2
  11f83c:	1009883a 	mov	r4,r2
  11f840:	d0a74544 	addi	r2,gp,-25323
  11f844:	1885883a 	add	r2,r3,r2
  11f848:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  11f84c:	e0bff817 	ldw	r2,-32(fp)
  11f850:	10800d03 	ldbu	r2,52(r2)
  11f854:	10c03fcc 	andi	r3,r2,255
  11f858:	d0a74544 	addi	r2,gp,-25323
  11f85c:	1885883a 	add	r2,r3,r2
  11f860:	10800003 	ldbu	r2,0(r2)
  11f864:	10803fcc 	andi	r2,r2,255
  11f868:	1000071e 	bne	r2,zero,11f888 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  11f86c:	e0bff817 	ldw	r2,-32(fp)
  11f870:	10800d83 	ldbu	r2,54(r2)
  11f874:	0084303a 	nor	r2,zero,r2
  11f878:	1007883a 	mov	r3,r2
  11f87c:	d0a74503 	ldbu	r2,-25324(gp)
  11f880:	1884703a 	and	r2,r3,r2
  11f884:	d0a74505 	stb	r2,-25324(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  11f888:	e0bff817 	ldw	r2,-32(fp)
  11f88c:	10800717 	ldw	r2,28(r2)
  11f890:	10000526 	beq	r2,zero,11f8a8 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  11f894:	e0bff817 	ldw	r2,-32(fp)
  11f898:	10800717 	ldw	r2,28(r2)
  11f89c:	100b883a 	mov	r5,r2
  11f8a0:	e13ff817 	ldw	r4,-32(fp)
  11f8a4:	011a5f40 	call	11a5f4 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  11f8a8:	e0bff817 	ldw	r2,-32(fp)
  11f8ac:	10800817 	ldw	r2,32(r2)
  11f8b0:	10000526 	beq	r2,zero,11f8c8 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  11f8b4:	e0bff817 	ldw	r2,-32(fp)
  11f8b8:	10800817 	ldw	r2,32(r2)
  11f8bc:	100b883a 	mov	r5,r2
  11f8c0:	e13ff817 	ldw	r4,-32(fp)
  11f8c4:	011a6ac0 	call	11a6ac <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  11f8c8:	e0bff817 	ldw	r2,-32(fp)
  11f8cc:	10800a17 	ldw	r2,40(r2)
  11f8d0:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  11f8d4:	e0bffb17 	ldw	r2,-20(fp)
  11f8d8:	10000226 	beq	r2,zero,11f8e4 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  11f8dc:	e13ffb17 	ldw	r4,-20(fp)
  11f8e0:	011cb1c0 	call	11cb1c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  11f8e4:	e0bff817 	ldw	r2,-32(fp)
  11f8e8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  11f8ec:	e0bff817 	ldw	r2,-32(fp)
  11f8f0:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  11f8f4:	e0bff817 	ldw	r2,-32(fp)
  11f8f8:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  11f8fc:	d0a73903 	ldbu	r2,-25372(gp)
  11f900:	10803fcc 	andi	r2,r2,255
  11f904:	10803fe0 	cmpeqi	r2,r2,255
  11f908:	1000031e 	bne	r2,zero,11f918 <OSTaskDel+0x214>
        OSLockNesting++;
  11f90c:	d0a73903 	ldbu	r2,-25372(gp)
  11f910:	10800044 	addi	r2,r2,1
  11f914:	d0a73905 	stb	r2,-25372(gp)
  11f918:	e0bff617 	ldw	r2,-40(fp)
  11f91c:	e0bffd15 	stw	r2,-12(fp)
  11f920:	e0bffd17 	ldw	r2,-12(fp)
  11f924:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  11f928:	011a1dc0 	call	11a1dc <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11f92c:	0005303a 	rdctl	r2,status
  11f930:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11f934:	e0fffa17 	ldw	r3,-24(fp)
  11f938:	00bfff84 	movi	r2,-2
  11f93c:	1884703a 	and	r2,r3,r2
  11f940:	1001703a 	wrctl	status,r2
  
  return context;
  11f944:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  11f948:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  11f94c:	d0a73903 	ldbu	r2,-25372(gp)
  11f950:	10803fcc 	andi	r2,r2,255
  11f954:	10000326 	beq	r2,zero,11f964 <OSTaskDel+0x260>
        OSLockNesting--;
  11f958:	d0a73903 	ldbu	r2,-25372(gp)
  11f95c:	10bfffc4 	addi	r2,r2,-1
  11f960:	d0a73905 	stb	r2,-25372(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  11f964:	e13ff817 	ldw	r4,-32(fp)
  11f968:	01227900 	call	122790 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  11f96c:	d0a74143 	ldbu	r2,-25339(gp)
  11f970:	10bfffc4 	addi	r2,r2,-1
  11f974:	d0a74145 	stb	r2,-25339(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  11f978:	e0ffff03 	ldbu	r3,-4(fp)
  11f97c:	008004f4 	movhi	r2,19
  11f980:	10b94804 	addi	r2,r2,-6880
  11f984:	18c7883a 	add	r3,r3,r3
  11f988:	18c7883a 	add	r3,r3,r3
  11f98c:	10c5883a 	add	r2,r2,r3
  11f990:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  11f994:	e0bff817 	ldw	r2,-32(fp)
  11f998:	10800617 	ldw	r2,24(r2)
  11f99c:	1000071e 	bne	r2,zero,11f9bc <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  11f9a0:	e0bff817 	ldw	r2,-32(fp)
  11f9a4:	10800517 	ldw	r2,20(r2)
  11f9a8:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  11f9ac:	e0bff817 	ldw	r2,-32(fp)
  11f9b0:	10800517 	ldw	r2,20(r2)
  11f9b4:	d0a73c15 	stw	r2,-25360(gp)
  11f9b8:	00000a06 	br	11f9e4 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  11f9bc:	e0bff817 	ldw	r2,-32(fp)
  11f9c0:	10800617 	ldw	r2,24(r2)
  11f9c4:	e0fff817 	ldw	r3,-32(fp)
  11f9c8:	18c00517 	ldw	r3,20(r3)
  11f9cc:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  11f9d0:	e0bff817 	ldw	r2,-32(fp)
  11f9d4:	10800517 	ldw	r2,20(r2)
  11f9d8:	e0fff817 	ldw	r3,-32(fp)
  11f9dc:	18c00617 	ldw	r3,24(r3)
  11f9e0:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  11f9e4:	d0e74017 	ldw	r3,-25344(gp)
  11f9e8:	e0bff817 	ldw	r2,-32(fp)
  11f9ec:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  11f9f0:	e0bff817 	ldw	r2,-32(fp)
  11f9f4:	d0a74015 	stw	r2,-25344(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  11f9f8:	e0bff817 	ldw	r2,-32(fp)
  11f9fc:	00c00fc4 	movi	r3,63
  11fa00:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  11fa04:	e0bff817 	ldw	r2,-32(fp)
  11fa08:	10001345 	stb	zero,77(r2)
  11fa0c:	e0bff617 	ldw	r2,-40(fp)
  11fa10:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11fa14:	e0bffc17 	ldw	r2,-16(fp)
  11fa18:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  11fa1c:	d0a73943 	ldbu	r2,-25371(gp)
  11fa20:	10803fcc 	andi	r2,r2,255
  11fa24:	10800058 	cmpnei	r2,r2,1
  11fa28:	1000011e 	bne	r2,zero,11fa30 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
  11fa2c:	011ac480 	call	11ac48 <OS_Sched>
    }
    return (OS_ERR_NONE);
  11fa30:	0005883a 	mov	r2,zero
}
  11fa34:	e037883a 	mov	sp,fp
  11fa38:	dfc00117 	ldw	ra,4(sp)
  11fa3c:	df000017 	ldw	fp,0(sp)
  11fa40:	dec00204 	addi	sp,sp,8
  11fa44:	f800283a 	ret

0011fa48 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  11fa48:	defff504 	addi	sp,sp,-44
  11fa4c:	df000a15 	stw	fp,40(sp)
  11fa50:	df000a04 	addi	fp,sp,40
  11fa54:	2005883a 	mov	r2,r4
  11fa58:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  11fa5c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  11fa60:	e0bfff03 	ldbu	r2,-4(fp)
  11fa64:	10800518 	cmpnei	r2,r2,20
  11fa68:	1000021e 	bne	r2,zero,11fa74 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  11fa6c:	00800f84 	movi	r2,62
  11fa70:	00004506 	br	11fb88 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  11fa74:	e0bfff03 	ldbu	r2,-4(fp)
  11fa78:	10800530 	cmpltui	r2,r2,20
  11fa7c:	1000051e 	bne	r2,zero,11fa94 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
  11fa80:	e0bfff03 	ldbu	r2,-4(fp)
  11fa84:	10803fe0 	cmpeqi	r2,r2,255
  11fa88:	1000021e 	bne	r2,zero,11fa94 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
  11fa8c:	00800a84 	movi	r2,42
  11fa90:	00003d06 	br	11fb88 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  11fa94:	e0bfff03 	ldbu	r2,-4(fp)
  11fa98:	10803fd8 	cmpnei	r2,r2,255
  11fa9c:	1000111e 	bne	r2,zero,11fae4 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11faa0:	0005303a 	rdctl	r2,status
  11faa4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11faa8:	e0fff917 	ldw	r3,-28(fp)
  11faac:	00bfff84 	movi	r2,-2
  11fab0:	1884703a 	and	r2,r3,r2
  11fab4:	1001703a 	wrctl	status,r2
  
  return context;
  11fab8:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  11fabc:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  11fac0:	d0a74817 	ldw	r2,-25312(gp)
  11fac4:	10800dc3 	ldbu	r2,55(r2)
  11fac8:	e0bff805 	stb	r2,-32(fp)
  11facc:	e0bff617 	ldw	r2,-40(fp)
  11fad0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11fad4:	e0bffe17 	ldw	r2,-8(fp)
  11fad8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  11fadc:	e0bff803 	ldbu	r2,-32(fp)
  11fae0:	00002906 	br	11fb88 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11fae4:	0005303a 	rdctl	r2,status
  11fae8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11faec:	e0fff717 	ldw	r3,-36(fp)
  11faf0:	00bfff84 	movi	r2,-2
  11faf4:	1884703a 	and	r2,r3,r2
  11faf8:	1001703a 	wrctl	status,r2
  
  return context;
  11fafc:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  11fb00:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
  11fb04:	e0ffff03 	ldbu	r3,-4(fp)
  11fb08:	008004f4 	movhi	r2,19
  11fb0c:	10b94804 	addi	r2,r2,-6880
  11fb10:	18c7883a 	add	r3,r3,r3
  11fb14:	18c7883a 	add	r3,r3,r3
  11fb18:	10c5883a 	add	r2,r2,r3
  11fb1c:	10800017 	ldw	r2,0(r2)
  11fb20:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  11fb24:	e0bffb17 	ldw	r2,-20(fp)
  11fb28:	1000061e 	bne	r2,zero,11fb44 <OSTaskDelReq+0xfc>
  11fb2c:	e0bff617 	ldw	r2,-40(fp)
  11fb30:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11fb34:	e0bffa17 	ldw	r2,-24(fp)
  11fb38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  11fb3c:	008010c4 	movi	r2,67
  11fb40:	00001106 	br	11fb88 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  11fb44:	e0bffb17 	ldw	r2,-20(fp)
  11fb48:	10800058 	cmpnei	r2,r2,1
  11fb4c:	1000061e 	bne	r2,zero,11fb68 <OSTaskDelReq+0x120>
  11fb50:	e0bff617 	ldw	r2,-40(fp)
  11fb54:	e0bffc15 	stw	r2,-16(fp)
  11fb58:	e0bffc17 	ldw	r2,-16(fp)
  11fb5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  11fb60:	00800f44 	movi	r2,61
  11fb64:	00000806 	br	11fb88 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  11fb68:	e0bffb17 	ldw	r2,-20(fp)
  11fb6c:	00c00fc4 	movi	r3,63
  11fb70:	10c00dc5 	stb	r3,55(r2)
  11fb74:	e0bff617 	ldw	r2,-40(fp)
  11fb78:	e0bffd15 	stw	r2,-12(fp)
  11fb7c:	e0bffd17 	ldw	r2,-12(fp)
  11fb80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  11fb84:	0005883a 	mov	r2,zero
}
  11fb88:	e037883a 	mov	sp,fp
  11fb8c:	df000017 	ldw	fp,0(sp)
  11fb90:	dec00104 	addi	sp,sp,4
  11fb94:	f800283a 	ret

0011fb98 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  11fb98:	defff404 	addi	sp,sp,-48
  11fb9c:	dfc00b15 	stw	ra,44(sp)
  11fba0:	df000a15 	stw	fp,40(sp)
  11fba4:	df000a04 	addi	fp,sp,40
  11fba8:	2005883a 	mov	r2,r4
  11fbac:	e17ffe15 	stw	r5,-8(fp)
  11fbb0:	e1bfff15 	stw	r6,-4(fp)
  11fbb4:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  11fbb8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  11fbbc:	e0bfff17 	ldw	r2,-4(fp)
  11fbc0:	1000021e 	bne	r2,zero,11fbcc <OSTaskNameGet+0x34>
        return (0);
  11fbc4:	0005883a 	mov	r2,zero
  11fbc8:	00005406 	br	11fd1c <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  11fbcc:	e0bffd03 	ldbu	r2,-12(fp)
  11fbd0:	10800570 	cmpltui	r2,r2,21
  11fbd4:	1000081e 	bne	r2,zero,11fbf8 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  11fbd8:	e0bffd03 	ldbu	r2,-12(fp)
  11fbdc:	10803fe0 	cmpeqi	r2,r2,255
  11fbe0:	1000051e 	bne	r2,zero,11fbf8 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  11fbe4:	e0bfff17 	ldw	r2,-4(fp)
  11fbe8:	00c00a84 	movi	r3,42
  11fbec:	10c00005 	stb	r3,0(r2)
            return (0);
  11fbf0:	0005883a 	mov	r2,zero
  11fbf4:	00004906 	br	11fd1c <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  11fbf8:	e0bffe17 	ldw	r2,-8(fp)
  11fbfc:	1000051e 	bne	r2,zero,11fc14 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  11fc00:	e0bfff17 	ldw	r2,-4(fp)
  11fc04:	00c00304 	movi	r3,12
  11fc08:	10c00005 	stb	r3,0(r2)
        return (0);
  11fc0c:	0005883a 	mov	r2,zero
  11fc10:	00004206 	br	11fd1c <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  11fc14:	d0a74703 	ldbu	r2,-25316(gp)
  11fc18:	10803fcc 	andi	r2,r2,255
  11fc1c:	10000526 	beq	r2,zero,11fc34 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
  11fc20:	e0bfff17 	ldw	r2,-4(fp)
  11fc24:	00c00444 	movi	r3,17
  11fc28:	10c00005 	stb	r3,0(r2)
        return (0);
  11fc2c:	0005883a 	mov	r2,zero
  11fc30:	00003a06 	br	11fd1c <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11fc34:	0005303a 	rdctl	r2,status
  11fc38:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11fc3c:	e0fffc17 	ldw	r3,-16(fp)
  11fc40:	00bfff84 	movi	r2,-2
  11fc44:	1884703a 	and	r2,r3,r2
  11fc48:	1001703a 	wrctl	status,r2
  
  return context;
  11fc4c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  11fc50:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  11fc54:	e0bffd03 	ldbu	r2,-12(fp)
  11fc58:	10803fd8 	cmpnei	r2,r2,255
  11fc5c:	1000031e 	bne	r2,zero,11fc6c <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
  11fc60:	d0a74817 	ldw	r2,-25312(gp)
  11fc64:	10800c83 	ldbu	r2,50(r2)
  11fc68:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  11fc6c:	e0fffd03 	ldbu	r3,-12(fp)
  11fc70:	008004f4 	movhi	r2,19
  11fc74:	10b94804 	addi	r2,r2,-6880
  11fc78:	18c7883a 	add	r3,r3,r3
  11fc7c:	18c7883a 	add	r3,r3,r3
  11fc80:	10c5883a 	add	r2,r2,r3
  11fc84:	10800017 	ldw	r2,0(r2)
  11fc88:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  11fc8c:	e0bff817 	ldw	r2,-32(fp)
  11fc90:	1000091e 	bne	r2,zero,11fcb8 <OSTaskNameGet+0x120>
  11fc94:	e0bff617 	ldw	r2,-40(fp)
  11fc98:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11fc9c:	e0bff717 	ldw	r2,-36(fp)
  11fca0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  11fca4:	e0bfff17 	ldw	r2,-4(fp)
  11fca8:	00c010c4 	movi	r3,67
  11fcac:	10c00005 	stb	r3,0(r2)
        return (0);
  11fcb0:	0005883a 	mov	r2,zero
  11fcb4:	00001906 	br	11fd1c <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  11fcb8:	e0bff817 	ldw	r2,-32(fp)
  11fcbc:	10800058 	cmpnei	r2,r2,1
  11fcc0:	1000091e 	bne	r2,zero,11fce8 <OSTaskNameGet+0x150>
  11fcc4:	e0bff617 	ldw	r2,-40(fp)
  11fcc8:	e0bff915 	stw	r2,-28(fp)
  11fccc:	e0bff917 	ldw	r2,-28(fp)
  11fcd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  11fcd4:	e0bfff17 	ldw	r2,-4(fp)
  11fcd8:	00c010c4 	movi	r3,67
  11fcdc:	10c00005 	stb	r3,0(r2)
        return (0);
  11fce0:	0005883a 	mov	r2,zero
  11fce4:	00000d06 	br	11fd1c <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  11fce8:	e0bff817 	ldw	r2,-32(fp)
  11fcec:	10801304 	addi	r2,r2,76
  11fcf0:	100b883a 	mov	r5,r2
  11fcf4:	e13ffe17 	ldw	r4,-8(fp)
  11fcf8:	011ad8c0 	call	11ad8c <OS_StrCopy>
  11fcfc:	e0bffb05 	stb	r2,-20(fp)
  11fd00:	e0bff617 	ldw	r2,-40(fp)
  11fd04:	e0bffa15 	stw	r2,-24(fp)
  11fd08:	e0bffa17 	ldw	r2,-24(fp)
  11fd0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  11fd10:	e0bfff17 	ldw	r2,-4(fp)
  11fd14:	10000005 	stb	zero,0(r2)
    return (len);
  11fd18:	e0bffb03 	ldbu	r2,-20(fp)
}
  11fd1c:	e037883a 	mov	sp,fp
  11fd20:	dfc00117 	ldw	ra,4(sp)
  11fd24:	df000017 	ldw	fp,0(sp)
  11fd28:	dec00204 	addi	sp,sp,8
  11fd2c:	f800283a 	ret

0011fd30 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  11fd30:	defff304 	addi	sp,sp,-52
  11fd34:	dfc00c15 	stw	ra,48(sp)
  11fd38:	df000b15 	stw	fp,44(sp)
  11fd3c:	df000b04 	addi	fp,sp,44
  11fd40:	2005883a 	mov	r2,r4
  11fd44:	e17ffe15 	stw	r5,-8(fp)
  11fd48:	e1bfff15 	stw	r6,-4(fp)
  11fd4c:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  11fd50:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  11fd54:	e0bfff17 	ldw	r2,-4(fp)
  11fd58:	10005c26 	beq	r2,zero,11fecc <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  11fd5c:	e0bffd03 	ldbu	r2,-12(fp)
  11fd60:	10800570 	cmpltui	r2,r2,21
  11fd64:	1000071e 	bne	r2,zero,11fd84 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  11fd68:	e0bffd03 	ldbu	r2,-12(fp)
  11fd6c:	10803fe0 	cmpeqi	r2,r2,255
  11fd70:	1000041e 	bne	r2,zero,11fd84 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  11fd74:	e0bfff17 	ldw	r2,-4(fp)
  11fd78:	00c00a84 	movi	r3,42
  11fd7c:	10c00005 	stb	r3,0(r2)
            return;
  11fd80:	00005306 	br	11fed0 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  11fd84:	e0bffe17 	ldw	r2,-8(fp)
  11fd88:	1000041e 	bne	r2,zero,11fd9c <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  11fd8c:	e0bfff17 	ldw	r2,-4(fp)
  11fd90:	00c00304 	movi	r3,12
  11fd94:	10c00005 	stb	r3,0(r2)
        return;
  11fd98:	00004d06 	br	11fed0 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  11fd9c:	d0a74703 	ldbu	r2,-25316(gp)
  11fda0:	10803fcc 	andi	r2,r2,255
  11fda4:	10000426 	beq	r2,zero,11fdb8 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
  11fda8:	e0bfff17 	ldw	r2,-4(fp)
  11fdac:	00c00484 	movi	r3,18
  11fdb0:	10c00005 	stb	r3,0(r2)
        return;
  11fdb4:	00004606 	br	11fed0 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11fdb8:	0005303a 	rdctl	r2,status
  11fdbc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11fdc0:	e0fffc17 	ldw	r3,-16(fp)
  11fdc4:	00bfff84 	movi	r2,-2
  11fdc8:	1884703a 	and	r2,r3,r2
  11fdcc:	1001703a 	wrctl	status,r2
  
  return context;
  11fdd0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  11fdd4:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  11fdd8:	e0bffd03 	ldbu	r2,-12(fp)
  11fddc:	10803fd8 	cmpnei	r2,r2,255
  11fde0:	1000031e 	bne	r2,zero,11fdf0 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
  11fde4:	d0a74817 	ldw	r2,-25312(gp)
  11fde8:	10800c83 	ldbu	r2,50(r2)
  11fdec:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  11fdf0:	e0fffd03 	ldbu	r3,-12(fp)
  11fdf4:	008004f4 	movhi	r2,19
  11fdf8:	10b94804 	addi	r2,r2,-6880
  11fdfc:	18c7883a 	add	r3,r3,r3
  11fe00:	18c7883a 	add	r3,r3,r3
  11fe04:	10c5883a 	add	r2,r2,r3
  11fe08:	10800017 	ldw	r2,0(r2)
  11fe0c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  11fe10:	e0bff717 	ldw	r2,-36(fp)
  11fe14:	1000081e 	bne	r2,zero,11fe38 <OSTaskNameSet+0x108>
  11fe18:	e0bff517 	ldw	r2,-44(fp)
  11fe1c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11fe20:	e0bff617 	ldw	r2,-40(fp)
  11fe24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  11fe28:	e0bfff17 	ldw	r2,-4(fp)
  11fe2c:	00c010c4 	movi	r3,67
  11fe30:	10c00005 	stb	r3,0(r2)
        return;
  11fe34:	00002606 	br	11fed0 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  11fe38:	e0bff717 	ldw	r2,-36(fp)
  11fe3c:	10800058 	cmpnei	r2,r2,1
  11fe40:	1000081e 	bne	r2,zero,11fe64 <OSTaskNameSet+0x134>
  11fe44:	e0bff517 	ldw	r2,-44(fp)
  11fe48:	e0bff815 	stw	r2,-32(fp)
  11fe4c:	e0bff817 	ldw	r2,-32(fp)
  11fe50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  11fe54:	e0bfff17 	ldw	r2,-4(fp)
  11fe58:	00c010c4 	movi	r3,67
  11fe5c:	10c00005 	stb	r3,0(r2)
        return;
  11fe60:	00001b06 	br	11fed0 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  11fe64:	e13ffe17 	ldw	r4,-8(fp)
  11fe68:	011ae000 	call	11ae00 <OS_StrLen>
  11fe6c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  11fe70:	e0bffa03 	ldbu	r2,-24(fp)
  11fe74:	10800830 	cmpltui	r2,r2,32
  11fe78:	1000081e 	bne	r2,zero,11fe9c <OSTaskNameSet+0x16c>
  11fe7c:	e0bff517 	ldw	r2,-44(fp)
  11fe80:	e0bff915 	stw	r2,-28(fp)
  11fe84:	e0bff917 	ldw	r2,-28(fp)
  11fe88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  11fe8c:	e0bfff17 	ldw	r2,-4(fp)
  11fe90:	00c01044 	movi	r3,65
  11fe94:	10c00005 	stb	r3,0(r2)
        return;
  11fe98:	00000d06 	br	11fed0 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  11fe9c:	e0bff717 	ldw	r2,-36(fp)
  11fea0:	10801304 	addi	r2,r2,76
  11fea4:	e17ffe17 	ldw	r5,-8(fp)
  11fea8:	1009883a 	mov	r4,r2
  11feac:	011ad8c0 	call	11ad8c <OS_StrCopy>
  11feb0:	e0bff517 	ldw	r2,-44(fp)
  11feb4:	e0bffb15 	stw	r2,-20(fp)
  11feb8:	e0bffb17 	ldw	r2,-20(fp)
  11febc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  11fec0:	e0bfff17 	ldw	r2,-4(fp)
  11fec4:	10000005 	stb	zero,0(r2)
  11fec8:	00000106 	br	11fed0 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
  11fecc:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  11fed0:	e037883a 	mov	sp,fp
  11fed4:	dfc00117 	ldw	ra,4(sp)
  11fed8:	df000017 	ldw	fp,0(sp)
  11fedc:	dec00204 	addi	sp,sp,8
  11fee0:	f800283a 	ret

0011fee4 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  11fee4:	defff404 	addi	sp,sp,-48
  11fee8:	dfc00b15 	stw	ra,44(sp)
  11feec:	df000a15 	stw	fp,40(sp)
  11fef0:	df000a04 	addi	fp,sp,40
  11fef4:	2005883a 	mov	r2,r4
  11fef8:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  11fefc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  11ff00:	e0bfff03 	ldbu	r2,-4(fp)
  11ff04:	10800530 	cmpltui	r2,r2,20
  11ff08:	1000021e 	bne	r2,zero,11ff14 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  11ff0c:	00800a84 	movi	r2,42
  11ff10:	00006406 	br	1200a4 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11ff14:	0005303a 	rdctl	r2,status
  11ff18:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11ff1c:	e0fffe17 	ldw	r3,-8(fp)
  11ff20:	00bfff84 	movi	r2,-2
  11ff24:	1884703a 	and	r2,r3,r2
  11ff28:	1001703a 	wrctl	status,r2
  
  return context;
  11ff2c:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  11ff30:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
  11ff34:	e0ffff03 	ldbu	r3,-4(fp)
  11ff38:	008004f4 	movhi	r2,19
  11ff3c:	10b94804 	addi	r2,r2,-6880
  11ff40:	18c7883a 	add	r3,r3,r3
  11ff44:	18c7883a 	add	r3,r3,r3
  11ff48:	10c5883a 	add	r2,r2,r3
  11ff4c:	10800017 	ldw	r2,0(r2)
  11ff50:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  11ff54:	e0bff817 	ldw	r2,-32(fp)
  11ff58:	1000061e 	bne	r2,zero,11ff74 <OSTaskResume+0x90>
  11ff5c:	e0bff617 	ldw	r2,-40(fp)
  11ff60:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  11ff64:	e0bff717 	ldw	r2,-36(fp)
  11ff68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  11ff6c:	00801184 	movi	r2,70
  11ff70:	00004c06 	br	1200a4 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  11ff74:	e0bff817 	ldw	r2,-32(fp)
  11ff78:	10800058 	cmpnei	r2,r2,1
  11ff7c:	1000061e 	bne	r2,zero,11ff98 <OSTaskResume+0xb4>
  11ff80:	e0bff617 	ldw	r2,-40(fp)
  11ff84:	e0bff915 	stw	r2,-28(fp)
  11ff88:	e0bff917 	ldw	r2,-28(fp)
  11ff8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  11ff90:	008010c4 	movi	r2,67
  11ff94:	00004306 	br	1200a4 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  11ff98:	e0bff817 	ldw	r2,-32(fp)
  11ff9c:	10800c03 	ldbu	r2,48(r2)
  11ffa0:	10803fcc 	andi	r2,r2,255
  11ffa4:	1080020c 	andi	r2,r2,8
  11ffa8:	10003926 	beq	r2,zero,120090 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  11ffac:	e0bff817 	ldw	r2,-32(fp)
  11ffb0:	10c00c03 	ldbu	r3,48(r2)
  11ffb4:	00bffdc4 	movi	r2,-9
  11ffb8:	1884703a 	and	r2,r3,r2
  11ffbc:	1007883a 	mov	r3,r2
  11ffc0:	e0bff817 	ldw	r2,-32(fp)
  11ffc4:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  11ffc8:	e0bff817 	ldw	r2,-32(fp)
  11ffcc:	10800c03 	ldbu	r2,48(r2)
  11ffd0:	10803fcc 	andi	r2,r2,255
  11ffd4:	1000281e 	bne	r2,zero,120078 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
  11ffd8:	e0bff817 	ldw	r2,-32(fp)
  11ffdc:	10800b8b 	ldhu	r2,46(r2)
  11ffe0:	10bfffcc 	andi	r2,r2,65535
  11ffe4:	10001f1e 	bne	r2,zero,120064 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  11ffe8:	e0bff817 	ldw	r2,-32(fp)
  11ffec:	10c00d83 	ldbu	r3,54(r2)
  11fff0:	d0a74503 	ldbu	r2,-25324(gp)
  11fff4:	1884b03a 	or	r2,r3,r2
  11fff8:	d0a74505 	stb	r2,-25324(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  11fffc:	e0bff817 	ldw	r2,-32(fp)
  120000:	10800d03 	ldbu	r2,52(r2)
  120004:	10c03fcc 	andi	r3,r2,255
  120008:	e0bff817 	ldw	r2,-32(fp)
  12000c:	10800d03 	ldbu	r2,52(r2)
  120010:	11003fcc 	andi	r4,r2,255
  120014:	d0a74544 	addi	r2,gp,-25323
  120018:	2085883a 	add	r2,r4,r2
  12001c:	11000003 	ldbu	r4,0(r2)
  120020:	e0bff817 	ldw	r2,-32(fp)
  120024:	10800d43 	ldbu	r2,53(r2)
  120028:	2084b03a 	or	r2,r4,r2
  12002c:	1009883a 	mov	r4,r2
  120030:	d0a74544 	addi	r2,gp,-25323
  120034:	1885883a 	add	r2,r3,r2
  120038:	11000005 	stb	r4,0(r2)
  12003c:	e0bff617 	ldw	r2,-40(fp)
  120040:	e0bffa15 	stw	r2,-24(fp)
  120044:	e0bffa17 	ldw	r2,-24(fp)
  120048:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  12004c:	d0a73943 	ldbu	r2,-25371(gp)
  120050:	10803fcc 	andi	r2,r2,255
  120054:	10800058 	cmpnei	r2,r2,1
  120058:	10000b1e 	bne	r2,zero,120088 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
  12005c:	011ac480 	call	11ac48 <OS_Sched>
  120060:	00000906 	br	120088 <OSTaskResume+0x1a4>
  120064:	e0bff617 	ldw	r2,-40(fp)
  120068:	e0bffb15 	stw	r2,-20(fp)
  12006c:	e0bffb17 	ldw	r2,-20(fp)
  120070:	1001703a 	wrctl	status,r2
  120074:	00000406 	br	120088 <OSTaskResume+0x1a4>
  120078:	e0bff617 	ldw	r2,-40(fp)
  12007c:	e0bffc15 	stw	r2,-16(fp)
  120080:	e0bffc17 	ldw	r2,-16(fp)
  120084:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  120088:	0005883a 	mov	r2,zero
  12008c:	00000506 	br	1200a4 <OSTaskResume+0x1c0>
  120090:	e0bff617 	ldw	r2,-40(fp)
  120094:	e0bffd15 	stw	r2,-12(fp)
  120098:	e0bffd17 	ldw	r2,-12(fp)
  12009c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  1200a0:	00801104 	movi	r2,68
}
  1200a4:	e037883a 	mov	sp,fp
  1200a8:	dfc00117 	ldw	ra,4(sp)
  1200ac:	df000017 	ldw	fp,0(sp)
  1200b0:	dec00204 	addi	sp,sp,8
  1200b4:	f800283a 	ret

001200b8 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  1200b8:	defff304 	addi	sp,sp,-52
  1200bc:	df000c15 	stw	fp,48(sp)
  1200c0:	df000c04 	addi	fp,sp,48
  1200c4:	2005883a 	mov	r2,r4
  1200c8:	e17fff15 	stw	r5,-4(fp)
  1200cc:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  1200d0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  1200d4:	e0bffe03 	ldbu	r2,-8(fp)
  1200d8:	10800570 	cmpltui	r2,r2,21
  1200dc:	1000051e 	bne	r2,zero,1200f4 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  1200e0:	e0bffe03 	ldbu	r2,-8(fp)
  1200e4:	10803fe0 	cmpeqi	r2,r2,255
  1200e8:	1000021e 	bne	r2,zero,1200f4 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  1200ec:	00800a84 	movi	r2,42
  1200f0:	00005d06 	br	120268 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  1200f4:	e0bfff17 	ldw	r2,-4(fp)
  1200f8:	1000021e 	bne	r2,zero,120104 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
  1200fc:	00800244 	movi	r2,9
  120100:	00005906 	br	120268 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  120104:	e0bfff17 	ldw	r2,-4(fp)
  120108:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  12010c:	e0bfff17 	ldw	r2,-4(fp)
  120110:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  120114:	0005303a 	rdctl	r2,status
  120118:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  12011c:	e0fffd17 	ldw	r3,-12(fp)
  120120:	00bfff84 	movi	r2,-2
  120124:	1884703a 	and	r2,r3,r2
  120128:	1001703a 	wrctl	status,r2
  
  return context;
  12012c:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
  120130:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  120134:	e0bffe03 	ldbu	r2,-8(fp)
  120138:	10803fd8 	cmpnei	r2,r2,255
  12013c:	1000031e 	bne	r2,zero,12014c <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
  120140:	d0a74817 	ldw	r2,-25312(gp)
  120144:	10800c83 	ldbu	r2,50(r2)
  120148:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  12014c:	e0fffe03 	ldbu	r3,-8(fp)
  120150:	008004f4 	movhi	r2,19
  120154:	10b94804 	addi	r2,r2,-6880
  120158:	18c7883a 	add	r3,r3,r3
  12015c:	18c7883a 	add	r3,r3,r3
  120160:	10c5883a 	add	r2,r2,r3
  120164:	10800017 	ldw	r2,0(r2)
  120168:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  12016c:	e0bff817 	ldw	r2,-32(fp)
  120170:	1000061e 	bne	r2,zero,12018c <OSTaskStkChk+0xd4>
  120174:	e0bff617 	ldw	r2,-40(fp)
  120178:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  12017c:	e0bff717 	ldw	r2,-36(fp)
  120180:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  120184:	008010c4 	movi	r2,67
  120188:	00003706 	br	120268 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
  12018c:	e0bff817 	ldw	r2,-32(fp)
  120190:	10800058 	cmpnei	r2,r2,1
  120194:	1000061e 	bne	r2,zero,1201b0 <OSTaskStkChk+0xf8>
  120198:	e0bff617 	ldw	r2,-40(fp)
  12019c:	e0bff915 	stw	r2,-28(fp)
  1201a0:	e0bff917 	ldw	r2,-28(fp)
  1201a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  1201a8:	008010c4 	movi	r2,67
  1201ac:	00002e06 	br	120268 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  1201b0:	e0bff817 	ldw	r2,-32(fp)
  1201b4:	1080040b 	ldhu	r2,16(r2)
  1201b8:	10bfffcc 	andi	r2,r2,65535
  1201bc:	1080004c 	andi	r2,r2,1
  1201c0:	1000061e 	bne	r2,zero,1201dc <OSTaskStkChk+0x124>
  1201c4:	e0bff617 	ldw	r2,-40(fp)
  1201c8:	e0bffa15 	stw	r2,-24(fp)
  1201cc:	e0bffa17 	ldw	r2,-24(fp)
  1201d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  1201d4:	00801144 	movi	r2,69
  1201d8:	00002306 	br	120268 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
  1201dc:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
  1201e0:	e0bff817 	ldw	r2,-32(fp)
  1201e4:	10800317 	ldw	r2,12(r2)
  1201e8:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
  1201ec:	e0bff817 	ldw	r2,-32(fp)
  1201f0:	10800217 	ldw	r2,8(r2)
  1201f4:	e0bff415 	stw	r2,-48(fp)
  1201f8:	e0bff617 	ldw	r2,-40(fp)
  1201fc:	e0bffb15 	stw	r2,-20(fp)
  120200:	e0bffb17 	ldw	r2,-20(fp)
  120204:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  120208:	00000306 	br	120218 <OSTaskStkChk+0x160>
        nfree++;
  12020c:	e0bff517 	ldw	r2,-44(fp)
  120210:	10800044 	addi	r2,r2,1
  120214:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  120218:	e0bff417 	ldw	r2,-48(fp)
  12021c:	10c00104 	addi	r3,r2,4
  120220:	e0fff415 	stw	r3,-48(fp)
  120224:	10800017 	ldw	r2,0(r2)
  120228:	103ff826 	beq	r2,zero,12020c <__alt_data_end+0xfffe020c>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  12022c:	e0bff517 	ldw	r2,-44(fp)
  120230:	1085883a 	add	r2,r2,r2
  120234:	1085883a 	add	r2,r2,r2
  120238:	1007883a 	mov	r3,r2
  12023c:	e0bfff17 	ldw	r2,-4(fp)
  120240:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  120244:	e0fffc17 	ldw	r3,-16(fp)
  120248:	e0bff517 	ldw	r2,-44(fp)
  12024c:	1885c83a 	sub	r2,r3,r2
  120250:	1085883a 	add	r2,r2,r2
  120254:	1085883a 	add	r2,r2,r2
  120258:	1007883a 	mov	r3,r2
  12025c:	e0bfff17 	ldw	r2,-4(fp)
  120260:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  120264:	0005883a 	mov	r2,zero
}
  120268:	e037883a 	mov	sp,fp
  12026c:	df000017 	ldw	fp,0(sp)
  120270:	dec00104 	addi	sp,sp,4
  120274:	f800283a 	ret

00120278 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  120278:	defff504 	addi	sp,sp,-44
  12027c:	dfc00a15 	stw	ra,40(sp)
  120280:	df000915 	stw	fp,36(sp)
  120284:	df000904 	addi	fp,sp,36
  120288:	2005883a 	mov	r2,r4
  12028c:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  120290:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  120294:	e0bfff03 	ldbu	r2,-4(fp)
  120298:	10800518 	cmpnei	r2,r2,20
  12029c:	1000021e 	bne	r2,zero,1202a8 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  1202a0:	008011c4 	movi	r2,71
  1202a4:	00006806 	br	120448 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  1202a8:	e0bfff03 	ldbu	r2,-4(fp)
  1202ac:	10800530 	cmpltui	r2,r2,20
  1202b0:	1000051e 	bne	r2,zero,1202c8 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
  1202b4:	e0bfff03 	ldbu	r2,-4(fp)
  1202b8:	10803fe0 	cmpeqi	r2,r2,255
  1202bc:	1000021e 	bne	r2,zero,1202c8 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
  1202c0:	00800a84 	movi	r2,42
  1202c4:	00006006 	br	120448 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  1202c8:	0005303a 	rdctl	r2,status
  1202cc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1202d0:	e0fffe17 	ldw	r3,-8(fp)
  1202d4:	00bfff84 	movi	r2,-2
  1202d8:	1884703a 	and	r2,r3,r2
  1202dc:	1001703a 	wrctl	status,r2
  
  return context;
  1202e0:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  1202e4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  1202e8:	e0bfff03 	ldbu	r2,-4(fp)
  1202ec:	10803fd8 	cmpnei	r2,r2,255
  1202f0:	1000061e 	bne	r2,zero,12030c <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
  1202f4:	d0a74817 	ldw	r2,-25312(gp)
  1202f8:	10800c83 	ldbu	r2,50(r2)
  1202fc:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
  120300:	00800044 	movi	r2,1
  120304:	e0bff705 	stb	r2,-36(fp)
  120308:	00000906 	br	120330 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  12030c:	d0a74817 	ldw	r2,-25312(gp)
  120310:	10800c83 	ldbu	r2,50(r2)
  120314:	10c03fcc 	andi	r3,r2,255
  120318:	e0bfff03 	ldbu	r2,-4(fp)
  12031c:	1880031e 	bne	r3,r2,12032c <OSTaskSuspend+0xb4>
        self = OS_TRUE;
  120320:	00800044 	movi	r2,1
  120324:	e0bff705 	stb	r2,-36(fp)
  120328:	00000106 	br	120330 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  12032c:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  120330:	e0ffff03 	ldbu	r3,-4(fp)
  120334:	008004f4 	movhi	r2,19
  120338:	10b94804 	addi	r2,r2,-6880
  12033c:	18c7883a 	add	r3,r3,r3
  120340:	18c7883a 	add	r3,r3,r3
  120344:	10c5883a 	add	r2,r2,r3
  120348:	10800017 	ldw	r2,0(r2)
  12034c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  120350:	e0bffa17 	ldw	r2,-24(fp)
  120354:	1000061e 	bne	r2,zero,120370 <OSTaskSuspend+0xf8>
  120358:	e0bff817 	ldw	r2,-32(fp)
  12035c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  120360:	e0bff917 	ldw	r2,-28(fp)
  120364:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  120368:	00801204 	movi	r2,72
  12036c:	00003606 	br	120448 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  120370:	e0bffa17 	ldw	r2,-24(fp)
  120374:	10800058 	cmpnei	r2,r2,1
  120378:	1000061e 	bne	r2,zero,120394 <OSTaskSuspend+0x11c>
  12037c:	e0bff817 	ldw	r2,-32(fp)
  120380:	e0bffb15 	stw	r2,-20(fp)
  120384:	e0bffb17 	ldw	r2,-20(fp)
  120388:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  12038c:	008010c4 	movi	r2,67
  120390:	00002d06 	br	120448 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
  120394:	e0bffa17 	ldw	r2,-24(fp)
  120398:	10800d03 	ldbu	r2,52(r2)
  12039c:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  1203a0:	e0fffd03 	ldbu	r3,-12(fp)
  1203a4:	e13ffd03 	ldbu	r4,-12(fp)
  1203a8:	d0a74544 	addi	r2,gp,-25323
  1203ac:	2085883a 	add	r2,r4,r2
  1203b0:	10800003 	ldbu	r2,0(r2)
  1203b4:	1009883a 	mov	r4,r2
  1203b8:	e0bffa17 	ldw	r2,-24(fp)
  1203bc:	10800d43 	ldbu	r2,53(r2)
  1203c0:	0084303a 	nor	r2,zero,r2
  1203c4:	2084703a 	and	r2,r4,r2
  1203c8:	1009883a 	mov	r4,r2
  1203cc:	d0a74544 	addi	r2,gp,-25323
  1203d0:	1885883a 	add	r2,r3,r2
  1203d4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  1203d8:	e0fffd03 	ldbu	r3,-12(fp)
  1203dc:	d0a74544 	addi	r2,gp,-25323
  1203e0:	1885883a 	add	r2,r3,r2
  1203e4:	10800003 	ldbu	r2,0(r2)
  1203e8:	10803fcc 	andi	r2,r2,255
  1203ec:	1000071e 	bne	r2,zero,12040c <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  1203f0:	e0bffa17 	ldw	r2,-24(fp)
  1203f4:	10800d83 	ldbu	r2,54(r2)
  1203f8:	0084303a 	nor	r2,zero,r2
  1203fc:	1007883a 	mov	r3,r2
  120400:	d0a74503 	ldbu	r2,-25324(gp)
  120404:	1884703a 	and	r2,r3,r2
  120408:	d0a74505 	stb	r2,-25324(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  12040c:	e0bffa17 	ldw	r2,-24(fp)
  120410:	10800c03 	ldbu	r2,48(r2)
  120414:	10800214 	ori	r2,r2,8
  120418:	1007883a 	mov	r3,r2
  12041c:	e0bffa17 	ldw	r2,-24(fp)
  120420:	10c00c05 	stb	r3,48(r2)
  120424:	e0bff817 	ldw	r2,-32(fp)
  120428:	e0bffc15 	stw	r2,-16(fp)
  12042c:	e0bffc17 	ldw	r2,-16(fp)
  120430:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  120434:	e0bff703 	ldbu	r2,-36(fp)
  120438:	10800058 	cmpnei	r2,r2,1
  12043c:	1000011e 	bne	r2,zero,120444 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
  120440:	011ac480 	call	11ac48 <OS_Sched>
    }
    return (OS_ERR_NONE);
  120444:	0005883a 	mov	r2,zero
}
  120448:	e037883a 	mov	sp,fp
  12044c:	dfc00117 	ldw	ra,4(sp)
  120450:	df000017 	ldw	fp,0(sp)
  120454:	dec00204 	addi	sp,sp,8
  120458:	f800283a 	ret

0012045c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  12045c:	defff604 	addi	sp,sp,-40
  120460:	dfc00915 	stw	ra,36(sp)
  120464:	df000815 	stw	fp,32(sp)
  120468:	df000804 	addi	fp,sp,32
  12046c:	2005883a 	mov	r2,r4
  120470:	e17fff15 	stw	r5,-4(fp)
  120474:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  120478:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  12047c:	e0bffe03 	ldbu	r2,-8(fp)
  120480:	10800570 	cmpltui	r2,r2,21
  120484:	1000051e 	bne	r2,zero,12049c <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  120488:	e0bffe03 	ldbu	r2,-8(fp)
  12048c:	10803fe0 	cmpeqi	r2,r2,255
  120490:	1000021e 	bne	r2,zero,12049c <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  120494:	00800a84 	movi	r2,42
  120498:	00003406 	br	12056c <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  12049c:	e0bfff17 	ldw	r2,-4(fp)
  1204a0:	1000021e 	bne	r2,zero,1204ac <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
  1204a4:	00800244 	movi	r2,9
  1204a8:	00003006 	br	12056c <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  1204ac:	0005303a 	rdctl	r2,status
  1204b0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1204b4:	e0fffd17 	ldw	r3,-12(fp)
  1204b8:	00bfff84 	movi	r2,-2
  1204bc:	1884703a 	and	r2,r3,r2
  1204c0:	1001703a 	wrctl	status,r2
  
  return context;
  1204c4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  1204c8:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  1204cc:	e0bffe03 	ldbu	r2,-8(fp)
  1204d0:	10803fd8 	cmpnei	r2,r2,255
  1204d4:	1000031e 	bne	r2,zero,1204e4 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
  1204d8:	d0a74817 	ldw	r2,-25312(gp)
  1204dc:	10800c83 	ldbu	r2,50(r2)
  1204e0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  1204e4:	e0fffe03 	ldbu	r3,-8(fp)
  1204e8:	008004f4 	movhi	r2,19
  1204ec:	10b94804 	addi	r2,r2,-6880
  1204f0:	18c7883a 	add	r3,r3,r3
  1204f4:	18c7883a 	add	r3,r3,r3
  1204f8:	10c5883a 	add	r2,r2,r3
  1204fc:	10800017 	ldw	r2,0(r2)
  120500:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  120504:	e0bffa17 	ldw	r2,-24(fp)
  120508:	1000061e 	bne	r2,zero,120524 <OSTaskQuery+0xc8>
  12050c:	e0bff817 	ldw	r2,-32(fp)
  120510:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  120514:	e0bff917 	ldw	r2,-28(fp)
  120518:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  12051c:	00800a44 	movi	r2,41
  120520:	00001206 	br	12056c <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  120524:	e0bffa17 	ldw	r2,-24(fp)
  120528:	10800058 	cmpnei	r2,r2,1
  12052c:	1000061e 	bne	r2,zero,120548 <OSTaskQuery+0xec>
  120530:	e0bff817 	ldw	r2,-32(fp)
  120534:	e0bffb15 	stw	r2,-20(fp)
  120538:	e0bffb17 	ldw	r2,-20(fp)
  12053c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  120540:	008010c4 	movi	r2,67
  120544:	00000906 	br	12056c <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  120548:	01801b04 	movi	r6,108
  12054c:	e17ffa17 	ldw	r5,-24(fp)
  120550:	e13fff17 	ldw	r4,-4(fp)
  120554:	011abe00 	call	11abe0 <OS_MemCopy>
  120558:	e0bff817 	ldw	r2,-32(fp)
  12055c:	e0bffc15 	stw	r2,-16(fp)
  120560:	e0bffc17 	ldw	r2,-16(fp)
  120564:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  120568:	0005883a 	mov	r2,zero
}
  12056c:	e037883a 	mov	sp,fp
  120570:	dfc00117 	ldw	ra,4(sp)
  120574:	df000017 	ldw	fp,0(sp)
  120578:	dec00204 	addi	sp,sp,8
  12057c:	f800283a 	ret

00120580 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  120580:	defffc04 	addi	sp,sp,-16
  120584:	df000315 	stw	fp,12(sp)
  120588:	df000304 	addi	fp,sp,12
  12058c:	e13ffd15 	stw	r4,-12(fp)
  120590:	e17ffe15 	stw	r5,-8(fp)
  120594:	3005883a 	mov	r2,r6
  120598:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  12059c:	e0bfff0b 	ldhu	r2,-4(fp)
  1205a0:	1080004c 	andi	r2,r2,1
  1205a4:	10000d26 	beq	r2,zero,1205dc <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  1205a8:	e0bfff0b 	ldhu	r2,-4(fp)
  1205ac:	1080008c 	andi	r2,r2,2
  1205b0:	10000a26 	beq	r2,zero,1205dc <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  1205b4:	00000706 	br	1205d4 <OS_TaskStkClr+0x54>
                size--;
  1205b8:	e0bffe17 	ldw	r2,-8(fp)
  1205bc:	10bfffc4 	addi	r2,r2,-1
  1205c0:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  1205c4:	e0bffd17 	ldw	r2,-12(fp)
  1205c8:	10c00104 	addi	r3,r2,4
  1205cc:	e0fffd15 	stw	r3,-12(fp)
  1205d0:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  1205d4:	e0bffe17 	ldw	r2,-8(fp)
  1205d8:	103ff71e 	bne	r2,zero,1205b8 <__alt_data_end+0xfffe05b8>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  1205dc:	0001883a 	nop
  1205e0:	e037883a 	mov	sp,fp
  1205e4:	df000017 	ldw	fp,0(sp)
  1205e8:	dec00104 	addi	sp,sp,4
  1205ec:	f800283a 	ret

001205f0 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  1205f0:	defff904 	addi	sp,sp,-28
  1205f4:	dfc00615 	stw	ra,24(sp)
  1205f8:	df000515 	stw	fp,20(sp)
  1205fc:	df000504 	addi	fp,sp,20
  120600:	2005883a 	mov	r2,r4
  120604:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  120608:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  12060c:	d0a74703 	ldbu	r2,-25316(gp)
  120610:	10803fcc 	andi	r2,r2,255
  120614:	1000311e 	bne	r2,zero,1206dc <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  120618:	e0bfff0b 	ldhu	r2,-4(fp)
  12061c:	10003026 	beq	r2,zero,1206e0 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  120620:	0005303a 	rdctl	r2,status
  120624:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  120628:	e0fffe17 	ldw	r3,-8(fp)
  12062c:	00bfff84 	movi	r2,-2
  120630:	1884703a 	and	r2,r3,r2
  120634:	1001703a 	wrctl	status,r2
  
  return context;
  120638:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  12063c:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  120640:	d0a74817 	ldw	r2,-25312(gp)
  120644:	10800d03 	ldbu	r2,52(r2)
  120648:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  12064c:	e0fffd03 	ldbu	r3,-12(fp)
  120650:	e13ffd03 	ldbu	r4,-12(fp)
  120654:	d0a74544 	addi	r2,gp,-25323
  120658:	2085883a 	add	r2,r4,r2
  12065c:	10800003 	ldbu	r2,0(r2)
  120660:	1009883a 	mov	r4,r2
  120664:	d0a74817 	ldw	r2,-25312(gp)
  120668:	10800d43 	ldbu	r2,53(r2)
  12066c:	0084303a 	nor	r2,zero,r2
  120670:	2084703a 	and	r2,r4,r2
  120674:	1009883a 	mov	r4,r2
  120678:	d0a74544 	addi	r2,gp,-25323
  12067c:	1885883a 	add	r2,r3,r2
  120680:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
  120684:	e0fffd03 	ldbu	r3,-12(fp)
  120688:	d0a74544 	addi	r2,gp,-25323
  12068c:	1885883a 	add	r2,r3,r2
  120690:	10800003 	ldbu	r2,0(r2)
  120694:	10803fcc 	andi	r2,r2,255
  120698:	1000071e 	bne	r2,zero,1206b8 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  12069c:	d0a74817 	ldw	r2,-25312(gp)
  1206a0:	10800d83 	ldbu	r2,54(r2)
  1206a4:	0084303a 	nor	r2,zero,r2
  1206a8:	1007883a 	mov	r3,r2
  1206ac:	d0a74503 	ldbu	r2,-25324(gp)
  1206b0:	1884703a 	and	r2,r3,r2
  1206b4:	d0a74505 	stb	r2,-25324(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  1206b8:	d0a74817 	ldw	r2,-25312(gp)
  1206bc:	e0ffff0b 	ldhu	r3,-4(fp)
  1206c0:	10c00b8d 	sth	r3,46(r2)
  1206c4:	e0bffb17 	ldw	r2,-20(fp)
  1206c8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1206cc:	e0bffc17 	ldw	r2,-16(fp)
  1206d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  1206d4:	011ac480 	call	11ac48 <OS_Sched>
  1206d8:	00000106 	br	1206e0 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
  1206dc:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
  1206e0:	e037883a 	mov	sp,fp
  1206e4:	dfc00117 	ldw	ra,4(sp)
  1206e8:	df000017 	ldw	fp,0(sp)
  1206ec:	dec00204 	addi	sp,sp,8
  1206f0:	f800283a 	ret

001206f4 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  1206f4:	defff704 	addi	sp,sp,-36
  1206f8:	dfc00815 	stw	ra,32(sp)
  1206fc:	df000715 	stw	fp,28(sp)
  120700:	dc000615 	stw	r16,24(sp)
  120704:	df000704 	addi	fp,sp,28
  120708:	2011883a 	mov	r8,r4
  12070c:	2809883a 	mov	r4,r5
  120710:	3007883a 	mov	r3,r6
  120714:	3805883a 	mov	r2,r7
  120718:	e23ffb05 	stb	r8,-20(fp)
  12071c:	e13ffc05 	stb	r4,-16(fp)
  120720:	e0fffd05 	stb	r3,-12(fp)
  120724:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  120728:	d0a74703 	ldbu	r2,-25316(gp)
  12072c:	10803fcc 	andi	r2,r2,255
  120730:	10000226 	beq	r2,zero,12073c <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  120734:	00801544 	movi	r2,85
  120738:	00004706 	br	120858 <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  12073c:	e0bffb03 	ldbu	r2,-20(fp)
  120740:	1000081e 	bne	r2,zero,120764 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
  120744:	e0bffc03 	ldbu	r2,-16(fp)
  120748:	1000061e 	bne	r2,zero,120764 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
  12074c:	e0bffd03 	ldbu	r2,-12(fp)
  120750:	1000041e 	bne	r2,zero,120764 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
  120754:	e0bffe0b 	ldhu	r2,-8(fp)
  120758:	1000021e 	bne	r2,zero,120764 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
  12075c:	00801504 	movi	r2,84
  120760:	00003d06 	br	120858 <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
  120764:	e0bffc03 	ldbu	r2,-16(fp)
  120768:	10800f30 	cmpltui	r2,r2,60
  12076c:	1000021e 	bne	r2,zero,120778 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  120770:	00801444 	movi	r2,81
  120774:	00003806 	br	120858 <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
  120778:	e0bffd03 	ldbu	r2,-12(fp)
  12077c:	10800f30 	cmpltui	r2,r2,60
  120780:	1000021e 	bne	r2,zero,12078c <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
  120784:	00801484 	movi	r2,82
  120788:	00003306 	br	120858 <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
  12078c:	e0bffe0b 	ldhu	r2,-8(fp)
  120790:	1080fa30 	cmpltui	r2,r2,1000
  120794:	1000021e 	bne	r2,zero,1207a0 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
  120798:	008014c4 	movi	r2,83
  12079c:	00002e06 	br	120858 <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  1207a0:	e0bffb03 	ldbu	r2,-20(fp)
  1207a4:	01438404 	movi	r5,3600
  1207a8:	1009883a 	mov	r4,r2
  1207ac:	01159fc0 	call	1159fc <__mulsi3>
  1207b0:	1021883a 	mov	r16,r2
  1207b4:	e0bffc03 	ldbu	r2,-16(fp)
  1207b8:	01400f04 	movi	r5,60
  1207bc:	1009883a 	mov	r4,r2
  1207c0:	01159fc0 	call	1159fc <__mulsi3>
  1207c4:	8087883a 	add	r3,r16,r2
  1207c8:	e0bffd03 	ldbu	r2,-12(fp)
  1207cc:	1885883a 	add	r2,r3,r2
  1207d0:	0140fa04 	movi	r5,1000
  1207d4:	1009883a 	mov	r4,r2
  1207d8:	01159fc0 	call	1159fc <__mulsi3>
  1207dc:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
  1207e0:	e0bffe0b 	ldhu	r2,-8(fp)
  1207e4:	0140fa04 	movi	r5,1000
  1207e8:	1009883a 	mov	r4,r2
  1207ec:	01159fc0 	call	1159fc <__mulsi3>
  1207f0:	0140fa04 	movi	r5,1000
  1207f4:	1009883a 	mov	r4,r2
  1207f8:	01159400 	call	115940 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  1207fc:	8085883a 	add	r2,r16,r2
  120800:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  120804:	e0bffa17 	ldw	r2,-24(fp)
  120808:	1004d43a 	srli	r2,r2,16
  12080c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  120810:	e0bffa17 	ldw	r2,-24(fp)
  120814:	10bfffcc 	andi	r2,r2,65535
  120818:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  12081c:	e0bffa17 	ldw	r2,-24(fp)
  120820:	10bfffcc 	andi	r2,r2,65535
  120824:	1009883a 	mov	r4,r2
  120828:	01205f00 	call	1205f0 <OSTimeDly>
    while (loops > 0) {
  12082c:	00000706 	br	12084c <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
  120830:	01200014 	movui	r4,32768
  120834:	01205f00 	call	1205f0 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  120838:	01200014 	movui	r4,32768
  12083c:	01205f00 	call	1205f0 <OSTimeDly>
        loops--;
  120840:	e0bff90b 	ldhu	r2,-28(fp)
  120844:	10bfffc4 	addi	r2,r2,-1
  120848:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  12084c:	e0bff90b 	ldhu	r2,-28(fp)
  120850:	103ff71e 	bne	r2,zero,120830 <__alt_data_end+0xfffe0830>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  120854:	0005883a 	mov	r2,zero
}
  120858:	e6ffff04 	addi	sp,fp,-4
  12085c:	dfc00217 	ldw	ra,8(sp)
  120860:	df000117 	ldw	fp,4(sp)
  120864:	dc000017 	ldw	r16,0(sp)
  120868:	dec00304 	addi	sp,sp,12
  12086c:	f800283a 	ret

00120870 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  120870:	defff504 	addi	sp,sp,-44
  120874:	dfc00a15 	stw	ra,40(sp)
  120878:	df000915 	stw	fp,36(sp)
  12087c:	df000904 	addi	fp,sp,36
  120880:	2005883a 	mov	r2,r4
  120884:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  120888:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  12088c:	e0bfff03 	ldbu	r2,-4(fp)
  120890:	10800530 	cmpltui	r2,r2,20
  120894:	1000021e 	bne	r2,zero,1208a0 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  120898:	00800a84 	movi	r2,42
  12089c:	00006406 	br	120a30 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  1208a0:	0005303a 	rdctl	r2,status
  1208a4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1208a8:	e0fffe17 	ldw	r3,-8(fp)
  1208ac:	00bfff84 	movi	r2,-2
  1208b0:	1884703a 	and	r2,r3,r2
  1208b4:	1001703a 	wrctl	status,r2
  
  return context;
  1208b8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  1208bc:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  1208c0:	e0ffff03 	ldbu	r3,-4(fp)
  1208c4:	008004f4 	movhi	r2,19
  1208c8:	10b94804 	addi	r2,r2,-6880
  1208cc:	18c7883a 	add	r3,r3,r3
  1208d0:	18c7883a 	add	r3,r3,r3
  1208d4:	10c5883a 	add	r2,r2,r3
  1208d8:	10800017 	ldw	r2,0(r2)
  1208dc:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
  1208e0:	e0bff917 	ldw	r2,-28(fp)
  1208e4:	1000061e 	bne	r2,zero,120900 <OSTimeDlyResume+0x90>
  1208e8:	e0bff717 	ldw	r2,-36(fp)
  1208ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1208f0:	e0bff817 	ldw	r2,-32(fp)
  1208f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  1208f8:	008010c4 	movi	r2,67
  1208fc:	00004c06 	br	120a30 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
  120900:	e0bff917 	ldw	r2,-28(fp)
  120904:	10800058 	cmpnei	r2,r2,1
  120908:	1000061e 	bne	r2,zero,120924 <OSTimeDlyResume+0xb4>
  12090c:	e0bff717 	ldw	r2,-36(fp)
  120910:	e0bffa15 	stw	r2,-24(fp)
  120914:	e0bffa17 	ldw	r2,-24(fp)
  120918:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  12091c:	008010c4 	movi	r2,67
  120920:	00004306 	br	120a30 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  120924:	e0bff917 	ldw	r2,-28(fp)
  120928:	10800b8b 	ldhu	r2,46(r2)
  12092c:	10bfffcc 	andi	r2,r2,65535
  120930:	1000061e 	bne	r2,zero,12094c <OSTimeDlyResume+0xdc>
  120934:	e0bff717 	ldw	r2,-36(fp)
  120938:	e0bffb15 	stw	r2,-20(fp)
  12093c:	e0bffb17 	ldw	r2,-20(fp)
  120940:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  120944:	00801404 	movi	r2,80
  120948:	00003906 	br	120a30 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  12094c:	e0bff917 	ldw	r2,-28(fp)
  120950:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  120954:	e0bff917 	ldw	r2,-28(fp)
  120958:	10800c03 	ldbu	r2,48(r2)
  12095c:	10803fcc 	andi	r2,r2,255
  120960:	10800dcc 	andi	r2,r2,55
  120964:	10000b26 	beq	r2,zero,120994 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  120968:	e0bff917 	ldw	r2,-28(fp)
  12096c:	10c00c03 	ldbu	r3,48(r2)
  120970:	00bff204 	movi	r2,-56
  120974:	1884703a 	and	r2,r3,r2
  120978:	1007883a 	mov	r3,r2
  12097c:	e0bff917 	ldw	r2,-28(fp)
  120980:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  120984:	e0bff917 	ldw	r2,-28(fp)
  120988:	00c00044 	movi	r3,1
  12098c:	10c00c45 	stb	r3,49(r2)
  120990:	00000206 	br	12099c <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  120994:	e0bff917 	ldw	r2,-28(fp)
  120998:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  12099c:	e0bff917 	ldw	r2,-28(fp)
  1209a0:	10800c03 	ldbu	r2,48(r2)
  1209a4:	10803fcc 	andi	r2,r2,255
  1209a8:	1080020c 	andi	r2,r2,8
  1209ac:	10001b1e 	bne	r2,zero,120a1c <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  1209b0:	e0bff917 	ldw	r2,-28(fp)
  1209b4:	10c00d83 	ldbu	r3,54(r2)
  1209b8:	d0a74503 	ldbu	r2,-25324(gp)
  1209bc:	1884b03a 	or	r2,r3,r2
  1209c0:	d0a74505 	stb	r2,-25324(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  1209c4:	e0bff917 	ldw	r2,-28(fp)
  1209c8:	10800d03 	ldbu	r2,52(r2)
  1209cc:	10c03fcc 	andi	r3,r2,255
  1209d0:	e0bff917 	ldw	r2,-28(fp)
  1209d4:	10800d03 	ldbu	r2,52(r2)
  1209d8:	11003fcc 	andi	r4,r2,255
  1209dc:	d0a74544 	addi	r2,gp,-25323
  1209e0:	2085883a 	add	r2,r4,r2
  1209e4:	11000003 	ldbu	r4,0(r2)
  1209e8:	e0bff917 	ldw	r2,-28(fp)
  1209ec:	10800d43 	ldbu	r2,53(r2)
  1209f0:	2084b03a 	or	r2,r4,r2
  1209f4:	1009883a 	mov	r4,r2
  1209f8:	d0a74544 	addi	r2,gp,-25323
  1209fc:	1885883a 	add	r2,r3,r2
  120a00:	11000005 	stb	r4,0(r2)
  120a04:	e0bff717 	ldw	r2,-36(fp)
  120a08:	e0bffc15 	stw	r2,-16(fp)
  120a0c:	e0bffc17 	ldw	r2,-16(fp)
  120a10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  120a14:	011ac480 	call	11ac48 <OS_Sched>
  120a18:	00000406 	br	120a2c <OSTimeDlyResume+0x1bc>
  120a1c:	e0bff717 	ldw	r2,-36(fp)
  120a20:	e0bffd15 	stw	r2,-12(fp)
  120a24:	e0bffd17 	ldw	r2,-12(fp)
  120a28:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  120a2c:	0005883a 	mov	r2,zero
}
  120a30:	e037883a 	mov	sp,fp
  120a34:	dfc00117 	ldw	ra,4(sp)
  120a38:	df000017 	ldw	fp,0(sp)
  120a3c:	dec00204 	addi	sp,sp,8
  120a40:	f800283a 	ret

00120a44 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  120a44:	defffb04 	addi	sp,sp,-20
  120a48:	df000415 	stw	fp,16(sp)
  120a4c:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  120a50:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  120a54:	0005303a 	rdctl	r2,status
  120a58:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  120a5c:	e0fffe17 	ldw	r3,-8(fp)
  120a60:	00bfff84 	movi	r2,-2
  120a64:	1884703a 	and	r2,r3,r2
  120a68:	1001703a 	wrctl	status,r2
  
  return context;
  120a6c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  120a70:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
  120a74:	d0a74917 	ldw	r2,-25308(gp)
  120a78:	e0bffd15 	stw	r2,-12(fp)
  120a7c:	e0bffc17 	ldw	r2,-16(fp)
  120a80:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  120a84:	e0bfff17 	ldw	r2,-4(fp)
  120a88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  120a8c:	e0bffd17 	ldw	r2,-12(fp)
}
  120a90:	e037883a 	mov	sp,fp
  120a94:	df000017 	ldw	fp,0(sp)
  120a98:	dec00104 	addi	sp,sp,4
  120a9c:	f800283a 	ret

00120aa0 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  120aa0:	defffb04 	addi	sp,sp,-20
  120aa4:	df000415 	stw	fp,16(sp)
  120aa8:	df000404 	addi	fp,sp,16
  120aac:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  120ab0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  120ab4:	0005303a 	rdctl	r2,status
  120ab8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  120abc:	e0fffd17 	ldw	r3,-12(fp)
  120ac0:	00bfff84 	movi	r2,-2
  120ac4:	1884703a 	and	r2,r3,r2
  120ac8:	1001703a 	wrctl	status,r2
  
  return context;
  120acc:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  120ad0:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
  120ad4:	e0bfff17 	ldw	r2,-4(fp)
  120ad8:	d0a74915 	stw	r2,-25308(gp)
  120adc:	e0bffc17 	ldw	r2,-16(fp)
  120ae0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  120ae4:	e0bffe17 	ldw	r2,-8(fp)
  120ae8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  120aec:	0001883a 	nop
  120af0:	e037883a 	mov	sp,fp
  120af4:	df000017 	ldw	fp,0(sp)
  120af8:	dec00104 	addi	sp,sp,4
  120afc:	f800283a 	ret

00120b00 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  120b00:	defffd04 	addi	sp,sp,-12
  120b04:	dfc00215 	stw	ra,8(sp)
  120b08:	df000115 	stw	fp,4(sp)
  120b0c:	df000104 	addi	fp,sp,4
  120b10:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  120b14:	d1600a04 	addi	r5,gp,-32728
  120b18:	e13fff17 	ldw	r4,-4(fp)
  120b1c:	0121b700 	call	121b70 <alt_dev_llist_insert>
}
  120b20:	e037883a 	mov	sp,fp
  120b24:	dfc00117 	ldw	ra,4(sp)
  120b28:	df000017 	ldw	fp,0(sp)
  120b2c:	dec00204 	addi	sp,sp,8
  120b30:	f800283a 	ret

00120b34 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  120b34:	defffd04 	addi	sp,sp,-12
  120b38:	dfc00215 	stw	ra,8(sp)
  120b3c:	df000115 	stw	fp,4(sp)
  120b40:	df000104 	addi	fp,sp,4
  120b44:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  120b48:	012251c0 	call	12251c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  120b4c:	00800044 	movi	r2,1
  120b50:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  120b54:	0001883a 	nop
  120b58:	e037883a 	mov	sp,fp
  120b5c:	dfc00117 	ldw	ra,4(sp)
  120b60:	df000017 	ldw	fp,0(sp)
  120b64:	dec00204 	addi	sp,sp,8
  120b68:	f800283a 	ret

00120b6c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  120b6c:	defffe04 	addi	sp,sp,-8
  120b70:	dfc00115 	stw	ra,4(sp)
  120b74:	df000015 	stw	fp,0(sp)
  120b78:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  120b7c:	01c0fa04 	movi	r7,1000
  120b80:	01800044 	movi	r6,1
  120b84:	000b883a 	mov	r5,zero
  120b88:	0009883a 	mov	r4,zero
  120b8c:	012196c0 	call	12196c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  120b90:	000d883a 	mov	r6,zero
  120b94:	000b883a 	mov	r5,zero
  120b98:	010004b4 	movhi	r4,18
  120b9c:	21116104 	addi	r4,r4,17796
  120ba0:	0120d2c0 	call	120d2c <altera_avalon_jtag_uart_init>
  120ba4:	010004b4 	movhi	r4,18
  120ba8:	21115704 	addi	r4,r4,17756
  120bac:	0120b000 	call	120b00 <alt_dev_reg>
}
  120bb0:	0001883a 	nop
  120bb4:	e037883a 	mov	sp,fp
  120bb8:	dfc00117 	ldw	ra,4(sp)
  120bbc:	df000017 	ldw	fp,0(sp)
  120bc0:	dec00204 	addi	sp,sp,8
  120bc4:	f800283a 	ret

00120bc8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  120bc8:	defffa04 	addi	sp,sp,-24
  120bcc:	dfc00515 	stw	ra,20(sp)
  120bd0:	df000415 	stw	fp,16(sp)
  120bd4:	df000404 	addi	fp,sp,16
  120bd8:	e13ffd15 	stw	r4,-12(fp)
  120bdc:	e17ffe15 	stw	r5,-8(fp)
  120be0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  120be4:	e0bffd17 	ldw	r2,-12(fp)
  120be8:	10800017 	ldw	r2,0(r2)
  120bec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  120bf0:	e0bffc17 	ldw	r2,-16(fp)
  120bf4:	10c00a04 	addi	r3,r2,40
  120bf8:	e0bffd17 	ldw	r2,-12(fp)
  120bfc:	10800217 	ldw	r2,8(r2)
  120c00:	100f883a 	mov	r7,r2
  120c04:	e1bfff17 	ldw	r6,-4(fp)
  120c08:	e17ffe17 	ldw	r5,-8(fp)
  120c0c:	1809883a 	mov	r4,r3
  120c10:	01213740 	call	121374 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  120c14:	e037883a 	mov	sp,fp
  120c18:	dfc00117 	ldw	ra,4(sp)
  120c1c:	df000017 	ldw	fp,0(sp)
  120c20:	dec00204 	addi	sp,sp,8
  120c24:	f800283a 	ret

00120c28 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  120c28:	defffa04 	addi	sp,sp,-24
  120c2c:	dfc00515 	stw	ra,20(sp)
  120c30:	df000415 	stw	fp,16(sp)
  120c34:	df000404 	addi	fp,sp,16
  120c38:	e13ffd15 	stw	r4,-12(fp)
  120c3c:	e17ffe15 	stw	r5,-8(fp)
  120c40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  120c44:	e0bffd17 	ldw	r2,-12(fp)
  120c48:	10800017 	ldw	r2,0(r2)
  120c4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  120c50:	e0bffc17 	ldw	r2,-16(fp)
  120c54:	10c00a04 	addi	r3,r2,40
  120c58:	e0bffd17 	ldw	r2,-12(fp)
  120c5c:	10800217 	ldw	r2,8(r2)
  120c60:	100f883a 	mov	r7,r2
  120c64:	e1bfff17 	ldw	r6,-4(fp)
  120c68:	e17ffe17 	ldw	r5,-8(fp)
  120c6c:	1809883a 	mov	r4,r3
  120c70:	01216300 	call	121630 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  120c74:	e037883a 	mov	sp,fp
  120c78:	dfc00117 	ldw	ra,4(sp)
  120c7c:	df000017 	ldw	fp,0(sp)
  120c80:	dec00204 	addi	sp,sp,8
  120c84:	f800283a 	ret

00120c88 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  120c88:	defffc04 	addi	sp,sp,-16
  120c8c:	dfc00315 	stw	ra,12(sp)
  120c90:	df000215 	stw	fp,8(sp)
  120c94:	df000204 	addi	fp,sp,8
  120c98:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  120c9c:	e0bfff17 	ldw	r2,-4(fp)
  120ca0:	10800017 	ldw	r2,0(r2)
  120ca4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  120ca8:	e0bffe17 	ldw	r2,-8(fp)
  120cac:	10c00a04 	addi	r3,r2,40
  120cb0:	e0bfff17 	ldw	r2,-4(fp)
  120cb4:	10800217 	ldw	r2,8(r2)
  120cb8:	100b883a 	mov	r5,r2
  120cbc:	1809883a 	mov	r4,r3
  120cc0:	012121c0 	call	12121c <altera_avalon_jtag_uart_close>
}
  120cc4:	e037883a 	mov	sp,fp
  120cc8:	dfc00117 	ldw	ra,4(sp)
  120ccc:	df000017 	ldw	fp,0(sp)
  120cd0:	dec00204 	addi	sp,sp,8
  120cd4:	f800283a 	ret

00120cd8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  120cd8:	defffa04 	addi	sp,sp,-24
  120cdc:	dfc00515 	stw	ra,20(sp)
  120ce0:	df000415 	stw	fp,16(sp)
  120ce4:	df000404 	addi	fp,sp,16
  120ce8:	e13ffd15 	stw	r4,-12(fp)
  120cec:	e17ffe15 	stw	r5,-8(fp)
  120cf0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  120cf4:	e0bffd17 	ldw	r2,-12(fp)
  120cf8:	10800017 	ldw	r2,0(r2)
  120cfc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  120d00:	e0bffc17 	ldw	r2,-16(fp)
  120d04:	10800a04 	addi	r2,r2,40
  120d08:	e1bfff17 	ldw	r6,-4(fp)
  120d0c:	e17ffe17 	ldw	r5,-8(fp)
  120d10:	1009883a 	mov	r4,r2
  120d14:	01212840 	call	121284 <altera_avalon_jtag_uart_ioctl>
}
  120d18:	e037883a 	mov	sp,fp
  120d1c:	dfc00117 	ldw	ra,4(sp)
  120d20:	df000017 	ldw	fp,0(sp)
  120d24:	dec00204 	addi	sp,sp,8
  120d28:	f800283a 	ret

00120d2c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  120d2c:	defff104 	addi	sp,sp,-60
  120d30:	dfc00e15 	stw	ra,56(sp)
  120d34:	df000d15 	stw	fp,52(sp)
  120d38:	df000d04 	addi	fp,sp,52
  120d3c:	e13ff915 	stw	r4,-28(fp)
  120d40:	e17ffa15 	stw	r5,-24(fp)
  120d44:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  120d48:	e0bff917 	ldw	r2,-28(fp)
  120d4c:	10800c04 	addi	r2,r2,48
  120d50:	e0bff415 	stw	r2,-48(fp)
  120d54:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  120d58:	e0bff80b 	ldhu	r2,-32(fp)
  120d5c:	e0fff884 	addi	r3,fp,-30
  120d60:	180b883a 	mov	r5,r3
  120d64:	1009883a 	mov	r4,r2
  120d68:	011b7b40 	call	11b7b4 <OSFlagCreate>
  120d6c:	1007883a 	mov	r3,r2
  120d70:	e0bff417 	ldw	r2,-48(fp)
  120d74:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  120d78:	e0bff917 	ldw	r2,-28(fp)
  120d7c:	10800a04 	addi	r2,r2,40
  120d80:	e0bff515 	stw	r2,-44(fp)
  120d84:	00800044 	movi	r2,1
  120d88:	e0bff78d 	sth	r2,-34(fp)
  120d8c:	e0bff78b 	ldhu	r2,-34(fp)
  120d90:	1009883a 	mov	r4,r2
  120d94:	011e4d40 	call	11e4d4 <OSSemCreate>
  120d98:	1007883a 	mov	r3,r2
  120d9c:	e0bff517 	ldw	r2,-44(fp)
  120da0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  120da4:	e0bff917 	ldw	r2,-28(fp)
  120da8:	10800b04 	addi	r2,r2,44
  120dac:	e0bff615 	stw	r2,-40(fp)
  120db0:	00800044 	movi	r2,1
  120db4:	e0bff70d 	sth	r2,-36(fp)
  120db8:	e0bff70b 	ldhu	r2,-36(fp)
  120dbc:	1009883a 	mov	r4,r2
  120dc0:	011e4d40 	call	11e4d4 <OSSemCreate>
  120dc4:	1007883a 	mov	r3,r2
  120dc8:	e0bff617 	ldw	r2,-40(fp)
  120dcc:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  120dd0:	e0bff917 	ldw	r2,-28(fp)
  120dd4:	00c00044 	movi	r3,1
  120dd8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  120ddc:	e0bff917 	ldw	r2,-28(fp)
  120de0:	10800017 	ldw	r2,0(r2)
  120de4:	10800104 	addi	r2,r2,4
  120de8:	1007883a 	mov	r3,r2
  120dec:	e0bff917 	ldw	r2,-28(fp)
  120df0:	10800817 	ldw	r2,32(r2)
  120df4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  120df8:	e0bffa17 	ldw	r2,-24(fp)
  120dfc:	e0fffb17 	ldw	r3,-20(fp)
  120e00:	d8000015 	stw	zero,0(sp)
  120e04:	e1fff917 	ldw	r7,-28(fp)
  120e08:	018004b4 	movhi	r6,18
  120e0c:	31839d04 	addi	r6,r6,3700
  120e10:	180b883a 	mov	r5,r3
  120e14:	1009883a 	mov	r4,r2
  120e18:	0121cf40 	call	121cf4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  120e1c:	e0bff917 	ldw	r2,-28(fp)
  120e20:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  120e24:	e0bff917 	ldw	r2,-28(fp)
  120e28:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  120e2c:	d0e74e17 	ldw	r3,-25288(gp)
  120e30:	e1fff917 	ldw	r7,-28(fp)
  120e34:	018004b4 	movhi	r6,18
  120e38:	31844604 	addi	r6,r6,4376
  120e3c:	180b883a 	mov	r5,r3
  120e40:	1009883a 	mov	r4,r2
  120e44:	01219e80 	call	1219e8 <alt_alarm_start>
  120e48:	1000040e 	bge	r2,zero,120e5c <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  120e4c:	e0fff917 	ldw	r3,-28(fp)
  120e50:	00a00034 	movhi	r2,32768
  120e54:	10bfffc4 	addi	r2,r2,-1
  120e58:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  120e5c:	0001883a 	nop
  120e60:	e037883a 	mov	sp,fp
  120e64:	dfc00117 	ldw	ra,4(sp)
  120e68:	df000017 	ldw	fp,0(sp)
  120e6c:	dec00204 	addi	sp,sp,8
  120e70:	f800283a 	ret

00120e74 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  120e74:	defff204 	addi	sp,sp,-56
  120e78:	dfc00d15 	stw	ra,52(sp)
  120e7c:	df000c15 	stw	fp,48(sp)
  120e80:	df000c04 	addi	fp,sp,48
  120e84:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  120e88:	e0bfff17 	ldw	r2,-4(fp)
  120e8c:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
  120e90:	e0bff617 	ldw	r2,-40(fp)
  120e94:	10800017 	ldw	r2,0(r2)
  120e98:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  120e9c:	e0bff717 	ldw	r2,-36(fp)
  120ea0:	10800104 	addi	r2,r2,4
  120ea4:	10800037 	ldwio	r2,0(r2)
  120ea8:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  120eac:	e0bff817 	ldw	r2,-32(fp)
  120eb0:	1080c00c 	andi	r2,r2,768
  120eb4:	10009126 	beq	r2,zero,1210fc <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  120eb8:	e0bff817 	ldw	r2,-32(fp)
  120ebc:	1080400c 	andi	r2,r2,256
  120ec0:	10004726 	beq	r2,zero,120fe0 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  120ec4:	00800074 	movhi	r2,1
  120ec8:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  120ecc:	e0bff617 	ldw	r2,-40(fp)
  120ed0:	10800d17 	ldw	r2,52(r2)
  120ed4:	10800044 	addi	r2,r2,1
  120ed8:	1081ffcc 	andi	r2,r2,2047
  120edc:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  120ee0:	e0bff617 	ldw	r2,-40(fp)
  120ee4:	10c00e17 	ldw	r3,56(r2)
  120ee8:	e0bff917 	ldw	r2,-28(fp)
  120eec:	18802726 	beq	r3,r2,120f8c <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  120ef0:	e0bff717 	ldw	r2,-36(fp)
  120ef4:	10800037 	ldwio	r2,0(r2)
  120ef8:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  120efc:	e0bff417 	ldw	r2,-48(fp)
  120f00:	10a0000c 	andi	r2,r2,32768
  120f04:	10002326 	beq	r2,zero,120f94 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  120f08:	e0bff617 	ldw	r2,-40(fp)
  120f0c:	10800d17 	ldw	r2,52(r2)
  120f10:	e0fff417 	ldw	r3,-48(fp)
  120f14:	1809883a 	mov	r4,r3
  120f18:	e0fff617 	ldw	r3,-40(fp)
  120f1c:	1885883a 	add	r2,r3,r2
  120f20:	10801104 	addi	r2,r2,68
  120f24:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  120f28:	e0bff617 	ldw	r2,-40(fp)
  120f2c:	10800d17 	ldw	r2,52(r2)
  120f30:	10800044 	addi	r2,r2,1
  120f34:	10c1ffcc 	andi	r3,r2,2047
  120f38:	e0bff617 	ldw	r2,-40(fp)
  120f3c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  120f40:	e0bff617 	ldw	r2,-40(fp)
  120f44:	10800c17 	ldw	r2,48(r2)
  120f48:	e0bffb15 	stw	r2,-20(fp)
  120f4c:	00800044 	movi	r2,1
  120f50:	e0bffc0d 	sth	r2,-16(fp)
  120f54:	00800044 	movi	r2,1
  120f58:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  120f5c:	d0a73943 	ldbu	r2,-25371(gp)
  120f60:	10803fcc 	andi	r2,r2,255
  120f64:	103fd926 	beq	r2,zero,120ecc <__alt_data_end+0xfffe0ecc>
  {
    OSFlagPost (group, flags, opt, &err);
  120f68:	e0bffc0b 	ldhu	r2,-16(fp)
  120f6c:	e0fffc83 	ldbu	r3,-14(fp)
  120f70:	e13ffdc4 	addi	r4,fp,-9
  120f74:	200f883a 	mov	r7,r4
  120f78:	180d883a 	mov	r6,r3
  120f7c:	100b883a 	mov	r5,r2
  120f80:	e13ffb17 	ldw	r4,-20(fp)
  120f84:	011c3900 	call	11c390 <OSFlagPost>
      }
  120f88:	003fd006 	br	120ecc <__alt_data_end+0xfffe0ecc>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  120f8c:	0001883a 	nop
  120f90:	00000106 	br	120f98 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  120f94:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  120f98:	e0bff417 	ldw	r2,-48(fp)
  120f9c:	10bfffec 	andhi	r2,r2,65535
  120fa0:	10000f26 	beq	r2,zero,120fe0 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  120fa4:	e0bff617 	ldw	r2,-40(fp)
  120fa8:	10c00817 	ldw	r3,32(r2)
  120fac:	00bfff84 	movi	r2,-2
  120fb0:	1886703a 	and	r3,r3,r2
  120fb4:	e0bff617 	ldw	r2,-40(fp)
  120fb8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  120fbc:	e0bff717 	ldw	r2,-36(fp)
  120fc0:	10800104 	addi	r2,r2,4
  120fc4:	1007883a 	mov	r3,r2
  120fc8:	e0bff617 	ldw	r2,-40(fp)
  120fcc:	10800817 	ldw	r2,32(r2)
  120fd0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  120fd4:	e0bff717 	ldw	r2,-36(fp)
  120fd8:	10800104 	addi	r2,r2,4
  120fdc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  120fe0:	e0bff817 	ldw	r2,-32(fp)
  120fe4:	1080800c 	andi	r2,r2,512
  120fe8:	103fac26 	beq	r2,zero,120e9c <__alt_data_end+0xfffe0e9c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  120fec:	e0bff817 	ldw	r2,-32(fp)
  120ff0:	1004d43a 	srli	r2,r2,16
  120ff4:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  120ff8:	00002606 	br	121094 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  120ffc:	e0bff717 	ldw	r2,-36(fp)
  121000:	e0fff617 	ldw	r3,-40(fp)
  121004:	18c01017 	ldw	r3,64(r3)
  121008:	e13ff617 	ldw	r4,-40(fp)
  12100c:	20c7883a 	add	r3,r4,r3
  121010:	18c21104 	addi	r3,r3,2116
  121014:	18c00003 	ldbu	r3,0(r3)
  121018:	18c03fcc 	andi	r3,r3,255
  12101c:	18c0201c 	xori	r3,r3,128
  121020:	18ffe004 	addi	r3,r3,-128
  121024:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  121028:	e0bff617 	ldw	r2,-40(fp)
  12102c:	10801017 	ldw	r2,64(r2)
  121030:	10800044 	addi	r2,r2,1
  121034:	10c1ffcc 	andi	r3,r2,2047
  121038:	e0bff617 	ldw	r2,-40(fp)
  12103c:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  121040:	e0bff617 	ldw	r2,-40(fp)
  121044:	10800c17 	ldw	r2,48(r2)
  121048:	e0bffa15 	stw	r2,-24(fp)
  12104c:	00800084 	movi	r2,2
  121050:	e0bffd0d 	sth	r2,-12(fp)
  121054:	00800044 	movi	r2,1
  121058:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  12105c:	d0a73943 	ldbu	r2,-25371(gp)
  121060:	10803fcc 	andi	r2,r2,255
  121064:	10000826 	beq	r2,zero,121088 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
  121068:	e0bffd0b 	ldhu	r2,-12(fp)
  12106c:	e0fffd83 	ldbu	r3,-10(fp)
  121070:	e13ffe04 	addi	r4,fp,-8
  121074:	200f883a 	mov	r7,r4
  121078:	180d883a 	mov	r6,r3
  12107c:	100b883a 	mov	r5,r2
  121080:	e13ffa17 	ldw	r4,-24(fp)
  121084:	011c3900 	call	11c390 <OSFlagPost>

        space--;
  121088:	e0bff517 	ldw	r2,-44(fp)
  12108c:	10bfffc4 	addi	r2,r2,-1
  121090:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  121094:	e0bff517 	ldw	r2,-44(fp)
  121098:	10000526 	beq	r2,zero,1210b0 <altera_avalon_jtag_uart_irq+0x23c>
  12109c:	e0bff617 	ldw	r2,-40(fp)
  1210a0:	10c01017 	ldw	r3,64(r2)
  1210a4:	e0bff617 	ldw	r2,-40(fp)
  1210a8:	10800f17 	ldw	r2,60(r2)
  1210ac:	18bfd31e 	bne	r3,r2,120ffc <__alt_data_end+0xfffe0ffc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  1210b0:	e0bff517 	ldw	r2,-44(fp)
  1210b4:	103f7926 	beq	r2,zero,120e9c <__alt_data_end+0xfffe0e9c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  1210b8:	e0bff617 	ldw	r2,-40(fp)
  1210bc:	10c00817 	ldw	r3,32(r2)
  1210c0:	00bfff44 	movi	r2,-3
  1210c4:	1886703a 	and	r3,r3,r2
  1210c8:	e0bff617 	ldw	r2,-40(fp)
  1210cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  1210d0:	e0bff617 	ldw	r2,-40(fp)
  1210d4:	10800017 	ldw	r2,0(r2)
  1210d8:	10800104 	addi	r2,r2,4
  1210dc:	1007883a 	mov	r3,r2
  1210e0:	e0bff617 	ldw	r2,-40(fp)
  1210e4:	10800817 	ldw	r2,32(r2)
  1210e8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  1210ec:	e0bff717 	ldw	r2,-36(fp)
  1210f0:	10800104 	addi	r2,r2,4
  1210f4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  1210f8:	003f6806 	br	120e9c <__alt_data_end+0xfffe0e9c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  1210fc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  121100:	0001883a 	nop
  121104:	e037883a 	mov	sp,fp
  121108:	dfc00117 	ldw	ra,4(sp)
  12110c:	df000017 	ldw	fp,0(sp)
  121110:	dec00204 	addi	sp,sp,8
  121114:	f800283a 	ret

00121118 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  121118:	defff904 	addi	sp,sp,-28
  12111c:	dfc00615 	stw	ra,24(sp)
  121120:	df000515 	stw	fp,20(sp)
  121124:	df000504 	addi	fp,sp,20
  121128:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  12112c:	e0bfff17 	ldw	r2,-4(fp)
  121130:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  121134:	e0bffb17 	ldw	r2,-20(fp)
  121138:	10800017 	ldw	r2,0(r2)
  12113c:	10800104 	addi	r2,r2,4
  121140:	10800037 	ldwio	r2,0(r2)
  121144:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  121148:	e0bffc17 	ldw	r2,-16(fp)
  12114c:	1081000c 	andi	r2,r2,1024
  121150:	10000b26 	beq	r2,zero,121180 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  121154:	e0bffb17 	ldw	r2,-20(fp)
  121158:	10800017 	ldw	r2,0(r2)
  12115c:	10800104 	addi	r2,r2,4
  121160:	1007883a 	mov	r3,r2
  121164:	e0bffb17 	ldw	r2,-20(fp)
  121168:	10800817 	ldw	r2,32(r2)
  12116c:	10810014 	ori	r2,r2,1024
  121170:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  121174:	e0bffb17 	ldw	r2,-20(fp)
  121178:	10000915 	stw	zero,36(r2)
  12117c:	00002106 	br	121204 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  121180:	e0bffb17 	ldw	r2,-20(fp)
  121184:	10c00917 	ldw	r3,36(r2)
  121188:	00a00034 	movhi	r2,32768
  12118c:	10bfff04 	addi	r2,r2,-4
  121190:	10c01c36 	bltu	r2,r3,121204 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
  121194:	e0bffb17 	ldw	r2,-20(fp)
  121198:	10800917 	ldw	r2,36(r2)
  12119c:	10c00044 	addi	r3,r2,1
  1211a0:	e0bffb17 	ldw	r2,-20(fp)
  1211a4:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  1211a8:	e0bffb17 	ldw	r2,-20(fp)
  1211ac:	10c00917 	ldw	r3,36(r2)
  1211b0:	e0bffb17 	ldw	r2,-20(fp)
  1211b4:	10800117 	ldw	r2,4(r2)
  1211b8:	18801236 	bltu	r3,r2,121204 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  1211bc:	e0bffb17 	ldw	r2,-20(fp)
  1211c0:	10800c17 	ldw	r2,48(r2)
  1211c4:	e0bffd15 	stw	r2,-12(fp)
  1211c8:	00800104 	movi	r2,4
  1211cc:	e0bffe0d 	sth	r2,-8(fp)
  1211d0:	00800044 	movi	r2,1
  1211d4:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  1211d8:	d0a73943 	ldbu	r2,-25371(gp)
  1211dc:	10803fcc 	andi	r2,r2,255
  1211e0:	10000826 	beq	r2,zero,121204 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
  1211e4:	e0bffe0b 	ldhu	r2,-8(fp)
  1211e8:	e0fffe83 	ldbu	r3,-6(fp)
  1211ec:	e13ffec4 	addi	r4,fp,-5
  1211f0:	200f883a 	mov	r7,r4
  1211f4:	180d883a 	mov	r6,r3
  1211f8:	100b883a 	mov	r5,r2
  1211fc:	e13ffd17 	ldw	r4,-12(fp)
  121200:	011c3900 	call	11c390 <OSFlagPost>
  121204:	d0a74e17 	ldw	r2,-25288(gp)
    }
  }

  return alt_ticks_per_second();
}
  121208:	e037883a 	mov	sp,fp
  12120c:	dfc00117 	ldw	ra,4(sp)
  121210:	df000017 	ldw	fp,0(sp)
  121214:	dec00204 	addi	sp,sp,8
  121218:	f800283a 	ret

0012121c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  12121c:	defffd04 	addi	sp,sp,-12
  121220:	df000215 	stw	fp,8(sp)
  121224:	df000204 	addi	fp,sp,8
  121228:	e13ffe15 	stw	r4,-8(fp)
  12122c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  121230:	00000506 	br	121248 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  121234:	e0bfff17 	ldw	r2,-4(fp)
  121238:	1090000c 	andi	r2,r2,16384
  12123c:	10000226 	beq	r2,zero,121248 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  121240:	00bffd44 	movi	r2,-11
  121244:	00000b06 	br	121274 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  121248:	e0bffe17 	ldw	r2,-8(fp)
  12124c:	10c01017 	ldw	r3,64(r2)
  121250:	e0bffe17 	ldw	r2,-8(fp)
  121254:	10800f17 	ldw	r2,60(r2)
  121258:	18800526 	beq	r3,r2,121270 <altera_avalon_jtag_uart_close+0x54>
  12125c:	e0bffe17 	ldw	r2,-8(fp)
  121260:	10c00917 	ldw	r3,36(r2)
  121264:	e0bffe17 	ldw	r2,-8(fp)
  121268:	10800117 	ldw	r2,4(r2)
  12126c:	18bff136 	bltu	r3,r2,121234 <__alt_data_end+0xfffe1234>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  121270:	0005883a 	mov	r2,zero
}
  121274:	e037883a 	mov	sp,fp
  121278:	df000017 	ldw	fp,0(sp)
  12127c:	dec00104 	addi	sp,sp,4
  121280:	f800283a 	ret

00121284 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  121284:	defffa04 	addi	sp,sp,-24
  121288:	df000515 	stw	fp,20(sp)
  12128c:	df000504 	addi	fp,sp,20
  121290:	e13ffd15 	stw	r4,-12(fp)
  121294:	e17ffe15 	stw	r5,-8(fp)
  121298:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  12129c:	00bff9c4 	movi	r2,-25
  1212a0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  1212a4:	e0bffe17 	ldw	r2,-8(fp)
  1212a8:	10da8060 	cmpeqi	r3,r2,27137
  1212ac:	1800031e 	bne	r3,zero,1212bc <altera_avalon_jtag_uart_ioctl+0x38>
  1212b0:	109a80a0 	cmpeqi	r2,r2,27138
  1212b4:	1000181e 	bne	r2,zero,121318 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  1212b8:	00002906 	br	121360 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  1212bc:	e0bffd17 	ldw	r2,-12(fp)
  1212c0:	10c00117 	ldw	r3,4(r2)
  1212c4:	00a00034 	movhi	r2,32768
  1212c8:	10bfffc4 	addi	r2,r2,-1
  1212cc:	18802126 	beq	r3,r2,121354 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  1212d0:	e0bfff17 	ldw	r2,-4(fp)
  1212d4:	10800017 	ldw	r2,0(r2)
  1212d8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  1212dc:	e0bffc17 	ldw	r2,-16(fp)
  1212e0:	10800090 	cmplti	r2,r2,2
  1212e4:	1000061e 	bne	r2,zero,121300 <altera_avalon_jtag_uart_ioctl+0x7c>
  1212e8:	e0fffc17 	ldw	r3,-16(fp)
  1212ec:	00a00034 	movhi	r2,32768
  1212f0:	10bfffc4 	addi	r2,r2,-1
  1212f4:	18800226 	beq	r3,r2,121300 <altera_avalon_jtag_uart_ioctl+0x7c>
  1212f8:	e0bffc17 	ldw	r2,-16(fp)
  1212fc:	00000206 	br	121308 <altera_avalon_jtag_uart_ioctl+0x84>
  121300:	00a00034 	movhi	r2,32768
  121304:	10bfff84 	addi	r2,r2,-2
  121308:	e0fffd17 	ldw	r3,-12(fp)
  12130c:	18800115 	stw	r2,4(r3)
      rc = 0;
  121310:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  121314:	00000f06 	br	121354 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  121318:	e0bffd17 	ldw	r2,-12(fp)
  12131c:	10c00117 	ldw	r3,4(r2)
  121320:	00a00034 	movhi	r2,32768
  121324:	10bfffc4 	addi	r2,r2,-1
  121328:	18800c26 	beq	r3,r2,12135c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  12132c:	e0bffd17 	ldw	r2,-12(fp)
  121330:	10c00917 	ldw	r3,36(r2)
  121334:	e0bffd17 	ldw	r2,-12(fp)
  121338:	10800117 	ldw	r2,4(r2)
  12133c:	1885803a 	cmpltu	r2,r3,r2
  121340:	10c03fcc 	andi	r3,r2,255
  121344:	e0bfff17 	ldw	r2,-4(fp)
  121348:	10c00015 	stw	r3,0(r2)
      rc = 0;
  12134c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  121350:	00000206 	br	12135c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  121354:	0001883a 	nop
  121358:	00000106 	br	121360 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  12135c:	0001883a 	nop

  default:
    break;
  }

  return rc;
  121360:	e0bffb17 	ldw	r2,-20(fp)
}
  121364:	e037883a 	mov	sp,fp
  121368:	df000017 	ldw	fp,0(sp)
  12136c:	dec00104 	addi	sp,sp,4
  121370:	f800283a 	ret

00121374 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  121374:	deffed04 	addi	sp,sp,-76
  121378:	dfc01215 	stw	ra,72(sp)
  12137c:	df001115 	stw	fp,68(sp)
  121380:	df001104 	addi	fp,sp,68
  121384:	e13ffc15 	stw	r4,-16(fp)
  121388:	e17ffd15 	stw	r5,-12(fp)
  12138c:	e1bffe15 	stw	r6,-8(fp)
  121390:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  121394:	e0bffd17 	ldw	r2,-12(fp)
  121398:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  12139c:	e0bffc17 	ldw	r2,-16(fp)
  1213a0:	10800a17 	ldw	r2,40(r2)
  1213a4:	e0bff815 	stw	r2,-32(fp)
  1213a8:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  1213ac:	e0bff90b 	ldhu	r2,-28(fp)
  1213b0:	e0fffb04 	addi	r3,fp,-20
  1213b4:	180d883a 	mov	r6,r3
  1213b8:	100b883a 	mov	r5,r2
  1213bc:	e13ff817 	ldw	r4,-32(fp)
  1213c0:	011e7ec0 	call	11e7ec <OSSemPend>

  while (space > 0)
  1213c4:	00006106 	br	12154c <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  1213c8:	e0bffc17 	ldw	r2,-16(fp)
  1213cc:	10800d17 	ldw	r2,52(r2)
  1213d0:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
  1213d4:	e0bffc17 	ldw	r2,-16(fp)
  1213d8:	10800e17 	ldw	r2,56(r2)
  1213dc:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
  1213e0:	e0fff317 	ldw	r3,-52(fp)
  1213e4:	e0bff417 	ldw	r2,-48(fp)
  1213e8:	18800536 	bltu	r3,r2,121400 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
  1213ec:	e0fff317 	ldw	r3,-52(fp)
  1213f0:	e0bff417 	ldw	r2,-48(fp)
  1213f4:	1885c83a 	sub	r2,r3,r2
  1213f8:	e0bff115 	stw	r2,-60(fp)
  1213fc:	00000406 	br	121410 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  121400:	00c20004 	movi	r3,2048
  121404:	e0bff417 	ldw	r2,-48(fp)
  121408:	1885c83a 	sub	r2,r3,r2
  12140c:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
  121410:	e0bff117 	ldw	r2,-60(fp)
  121414:	10001e26 	beq	r2,zero,121490 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  121418:	e0fffe17 	ldw	r3,-8(fp)
  12141c:	e0bff117 	ldw	r2,-60(fp)
  121420:	1880022e 	bgeu	r3,r2,12142c <altera_avalon_jtag_uart_read+0xb8>
        n = space;
  121424:	e0bffe17 	ldw	r2,-8(fp)
  121428:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  12142c:	e0bffc17 	ldw	r2,-16(fp)
  121430:	10c01104 	addi	r3,r2,68
  121434:	e0bff417 	ldw	r2,-48(fp)
  121438:	1885883a 	add	r2,r3,r2
  12143c:	e1bff117 	ldw	r6,-60(fp)
  121440:	100b883a 	mov	r5,r2
  121444:	e13ff017 	ldw	r4,-64(fp)
  121448:	010157c0 	call	10157c <memcpy>
      ptr   += n;
  12144c:	e0fff017 	ldw	r3,-64(fp)
  121450:	e0bff117 	ldw	r2,-60(fp)
  121454:	1885883a 	add	r2,r3,r2
  121458:	e0bff015 	stw	r2,-64(fp)
      space -= n;
  12145c:	e0fffe17 	ldw	r3,-8(fp)
  121460:	e0bff117 	ldw	r2,-60(fp)
  121464:	1885c83a 	sub	r2,r3,r2
  121468:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  12146c:	e0fff417 	ldw	r3,-48(fp)
  121470:	e0bff117 	ldw	r2,-60(fp)
  121474:	1885883a 	add	r2,r3,r2
  121478:	10c1ffcc 	andi	r3,r2,2047
  12147c:	e0bffc17 	ldw	r2,-16(fp)
  121480:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  121484:	e0bffe17 	ldw	r2,-8(fp)
  121488:	00bfcf16 	blt	zero,r2,1213c8 <__alt_data_end+0xfffe13c8>
  12148c:	00000106 	br	121494 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  121490:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  121494:	e0fff017 	ldw	r3,-64(fp)
  121498:	e0bffd17 	ldw	r2,-12(fp)
  12149c:	18802e1e 	bne	r3,r2,121558 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  1214a0:	e0bfff17 	ldw	r2,-4(fp)
  1214a4:	1090000c 	andi	r2,r2,16384
  1214a8:	10002d1e 	bne	r2,zero,121560 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  1214ac:	d0a73943 	ldbu	r2,-25371(gp)
  1214b0:	10803fcc 	andi	r2,r2,255
  1214b4:	10800058 	cmpnei	r2,r2,1
  1214b8:	1000161e 	bne	r2,zero,121514 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  1214bc:	e0bffc17 	ldw	r2,-16(fp)
  1214c0:	10800c17 	ldw	r2,48(r2)
  1214c4:	e0bff215 	stw	r2,-56(fp)
  1214c8:	00800144 	movi	r2,5
  1214cc:	e0bff98d 	sth	r2,-26(fp)
  1214d0:	00bfe0c4 	movi	r2,-125
  1214d4:	e0bffa05 	stb	r2,-24(fp)
  1214d8:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  1214dc:	d0a73943 	ldbu	r2,-25371(gp)
  1214e0:	10803fcc 	andi	r2,r2,255
  1214e4:	10001526 	beq	r2,zero,12153c <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  1214e8:	e0fff98b 	ldhu	r3,-26(fp)
  1214ec:	e13ffa03 	ldbu	r4,-24(fp)
  1214f0:	e17ffa8b 	ldhu	r5,-22(fp)
  1214f4:	e0bffb44 	addi	r2,fp,-19
  1214f8:	d8800015 	stw	r2,0(sp)
  1214fc:	280f883a 	mov	r7,r5
  121500:	200d883a 	mov	r6,r4
  121504:	180b883a 	mov	r5,r3
  121508:	e13ff217 	ldw	r4,-56(fp)
  12150c:	011bd780 	call	11bd78 <OSFlagPend>
  121510:	00000a06 	br	12153c <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  121514:	0001883a 	nop
  121518:	e0bffc17 	ldw	r2,-16(fp)
  12151c:	10c00d17 	ldw	r3,52(r2)
  121520:	e0bff317 	ldw	r2,-52(fp)
  121524:	1880051e 	bne	r3,r2,12153c <altera_avalon_jtag_uart_read+0x1c8>
  121528:	e0bffc17 	ldw	r2,-16(fp)
  12152c:	10c00917 	ldw	r3,36(r2)
  121530:	e0bffc17 	ldw	r2,-16(fp)
  121534:	10800117 	ldw	r2,4(r2)
  121538:	18bff736 	bltu	r3,r2,121518 <__alt_data_end+0xfffe1518>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  12153c:	e0bffc17 	ldw	r2,-16(fp)
  121540:	10c00d17 	ldw	r3,52(r2)
  121544:	e0bff317 	ldw	r2,-52(fp)
  121548:	18800726 	beq	r3,r2,121568 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  12154c:	e0bffe17 	ldw	r2,-8(fp)
  121550:	00bf9d16 	blt	zero,r2,1213c8 <__alt_data_end+0xfffe13c8>
  121554:	00000506 	br	12156c <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  121558:	0001883a 	nop
  12155c:	00000306 	br	12156c <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  121560:	0001883a 	nop
  121564:	00000106 	br	12156c <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  121568:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  12156c:	e0bffc17 	ldw	r2,-16(fp)
  121570:	10800a17 	ldw	r2,40(r2)
  121574:	1009883a 	mov	r4,r2
  121578:	011eb640 	call	11eb64 <OSSemPost>

  if (ptr != buffer)
  12157c:	e0fff017 	ldw	r3,-64(fp)
  121580:	e0bffd17 	ldw	r2,-12(fp)
  121584:	18801826 	beq	r3,r2,1215e8 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  121588:	0005303a 	rdctl	r2,status
  12158c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  121590:	e0fff717 	ldw	r3,-36(fp)
  121594:	00bfff84 	movi	r2,-2
  121598:	1884703a 	and	r2,r3,r2
  12159c:	1001703a 	wrctl	status,r2
  
  return context;
  1215a0:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  1215a4:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  1215a8:	e0bffc17 	ldw	r2,-16(fp)
  1215ac:	10800817 	ldw	r2,32(r2)
  1215b0:	10c00054 	ori	r3,r2,1
  1215b4:	e0bffc17 	ldw	r2,-16(fp)
  1215b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  1215bc:	e0bffc17 	ldw	r2,-16(fp)
  1215c0:	10800017 	ldw	r2,0(r2)
  1215c4:	10800104 	addi	r2,r2,4
  1215c8:	1007883a 	mov	r3,r2
  1215cc:	e0bffc17 	ldw	r2,-16(fp)
  1215d0:	10800817 	ldw	r2,32(r2)
  1215d4:	18800035 	stwio	r2,0(r3)
  1215d8:	e0bff617 	ldw	r2,-40(fp)
  1215dc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1215e0:	e0bff517 	ldw	r2,-44(fp)
  1215e4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  1215e8:	e0fff017 	ldw	r3,-64(fp)
  1215ec:	e0bffd17 	ldw	r2,-12(fp)
  1215f0:	18800426 	beq	r3,r2,121604 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
  1215f4:	e0fff017 	ldw	r3,-64(fp)
  1215f8:	e0bffd17 	ldw	r2,-12(fp)
  1215fc:	1885c83a 	sub	r2,r3,r2
  121600:	00000606 	br	12161c <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  121604:	e0bfff17 	ldw	r2,-4(fp)
  121608:	1090000c 	andi	r2,r2,16384
  12160c:	10000226 	beq	r2,zero,121618 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
  121610:	00bffd44 	movi	r2,-11
  121614:	00000106 	br	12161c <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  121618:	00bffec4 	movi	r2,-5
}
  12161c:	e037883a 	mov	sp,fp
  121620:	dfc00117 	ldw	ra,4(sp)
  121624:	df000017 	ldw	fp,0(sp)
  121628:	dec00204 	addi	sp,sp,8
  12162c:	f800283a 	ret

00121630 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  121630:	deffed04 	addi	sp,sp,-76
  121634:	dfc01215 	stw	ra,72(sp)
  121638:	df001115 	stw	fp,68(sp)
  12163c:	df001104 	addi	fp,sp,68
  121640:	e13ffc15 	stw	r4,-16(fp)
  121644:	e17ffd15 	stw	r5,-12(fp)
  121648:	e1bffe15 	stw	r6,-8(fp)
  12164c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  121650:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  121654:	e0bffd17 	ldw	r2,-12(fp)
  121658:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  12165c:	e0bffc17 	ldw	r2,-16(fp)
  121660:	10800b17 	ldw	r2,44(r2)
  121664:	e0bff815 	stw	r2,-32(fp)
  121668:	e03ff90d 	sth	zero,-28(fp)
  12166c:	e0bff90b 	ldhu	r2,-28(fp)
  121670:	e0fffb44 	addi	r3,fp,-19
  121674:	180d883a 	mov	r6,r3
  121678:	100b883a 	mov	r5,r2
  12167c:	e13ff817 	ldw	r4,-32(fp)
  121680:	011e7ec0 	call	11e7ec <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  121684:	00003706 	br	121764 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  121688:	e0bffc17 	ldw	r2,-16(fp)
  12168c:	10800f17 	ldw	r2,60(r2)
  121690:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
  121694:	e0bffc17 	ldw	r2,-16(fp)
  121698:	10801017 	ldw	r2,64(r2)
  12169c:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
  1216a0:	e0fff417 	ldw	r3,-48(fp)
  1216a4:	e0bff017 	ldw	r2,-64(fp)
  1216a8:	1880062e 	bgeu	r3,r2,1216c4 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
  1216ac:	e0fff017 	ldw	r3,-64(fp)
  1216b0:	e0bff417 	ldw	r2,-48(fp)
  1216b4:	1885c83a 	sub	r2,r3,r2
  1216b8:	10bfffc4 	addi	r2,r2,-1
  1216bc:	e0bff115 	stw	r2,-60(fp)
  1216c0:	00000b06 	br	1216f0 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
  1216c4:	e0bff017 	ldw	r2,-64(fp)
  1216c8:	10000526 	beq	r2,zero,1216e0 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  1216cc:	00c20004 	movi	r3,2048
  1216d0:	e0bff417 	ldw	r2,-48(fp)
  1216d4:	1885c83a 	sub	r2,r3,r2
  1216d8:	e0bff115 	stw	r2,-60(fp)
  1216dc:	00000406 	br	1216f0 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  1216e0:	00c1ffc4 	movi	r3,2047
  1216e4:	e0bff417 	ldw	r2,-48(fp)
  1216e8:	1885c83a 	sub	r2,r3,r2
  1216ec:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
  1216f0:	e0bff117 	ldw	r2,-60(fp)
  1216f4:	10001e26 	beq	r2,zero,121770 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
  1216f8:	e0fffe17 	ldw	r3,-8(fp)
  1216fc:	e0bff117 	ldw	r2,-60(fp)
  121700:	1880022e 	bgeu	r3,r2,12170c <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  121704:	e0bffe17 	ldw	r2,-8(fp)
  121708:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  12170c:	e0bffc17 	ldw	r2,-16(fp)
  121710:	10c21104 	addi	r3,r2,2116
  121714:	e0bff417 	ldw	r2,-48(fp)
  121718:	1885883a 	add	r2,r3,r2
  12171c:	e1bff117 	ldw	r6,-60(fp)
  121720:	e17ffd17 	ldw	r5,-12(fp)
  121724:	1009883a 	mov	r4,r2
  121728:	010157c0 	call	10157c <memcpy>
      ptr   += n;
  12172c:	e0fffd17 	ldw	r3,-12(fp)
  121730:	e0bff117 	ldw	r2,-60(fp)
  121734:	1885883a 	add	r2,r3,r2
  121738:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  12173c:	e0fffe17 	ldw	r3,-8(fp)
  121740:	e0bff117 	ldw	r2,-60(fp)
  121744:	1885c83a 	sub	r2,r3,r2
  121748:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  12174c:	e0fff417 	ldw	r3,-48(fp)
  121750:	e0bff117 	ldw	r2,-60(fp)
  121754:	1885883a 	add	r2,r3,r2
  121758:	10c1ffcc 	andi	r3,r2,2047
  12175c:	e0bffc17 	ldw	r2,-16(fp)
  121760:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  121764:	e0bffe17 	ldw	r2,-8(fp)
  121768:	00bfc716 	blt	zero,r2,121688 <__alt_data_end+0xfffe1688>
  12176c:	00000106 	br	121774 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  121770:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  121774:	0005303a 	rdctl	r2,status
  121778:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  12177c:	e0fff717 	ldw	r3,-36(fp)
  121780:	00bfff84 	movi	r2,-2
  121784:	1884703a 	and	r2,r3,r2
  121788:	1001703a 	wrctl	status,r2
  
  return context;
  12178c:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  121790:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  121794:	e0bffc17 	ldw	r2,-16(fp)
  121798:	10800817 	ldw	r2,32(r2)
  12179c:	10c00094 	ori	r3,r2,2
  1217a0:	e0bffc17 	ldw	r2,-16(fp)
  1217a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  1217a8:	e0bffc17 	ldw	r2,-16(fp)
  1217ac:	10800017 	ldw	r2,0(r2)
  1217b0:	10800104 	addi	r2,r2,4
  1217b4:	1007883a 	mov	r3,r2
  1217b8:	e0bffc17 	ldw	r2,-16(fp)
  1217bc:	10800817 	ldw	r2,32(r2)
  1217c0:	18800035 	stwio	r2,0(r3)
  1217c4:	e0bff617 	ldw	r2,-40(fp)
  1217c8:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1217cc:	e0bff317 	ldw	r2,-52(fp)
  1217d0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  1217d4:	e0bffe17 	ldw	r2,-8(fp)
  1217d8:	00802a0e 	bge	zero,r2,121884 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
  1217dc:	e0bfff17 	ldw	r2,-4(fp)
  1217e0:	1090000c 	andi	r2,r2,16384
  1217e4:	10002a1e 	bne	r2,zero,121890 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  1217e8:	d0a73943 	ldbu	r2,-25371(gp)
  1217ec:	10803fcc 	andi	r2,r2,255
  1217f0:	10800058 	cmpnei	r2,r2,1
  1217f4:	1000161e 	bne	r2,zero,121850 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
  1217f8:	e0bffc17 	ldw	r2,-16(fp)
  1217fc:	10800c17 	ldw	r2,48(r2)
  121800:	e0bff515 	stw	r2,-44(fp)
  121804:	00800184 	movi	r2,6
  121808:	e0bff98d 	sth	r2,-26(fp)
  12180c:	00bfe0c4 	movi	r2,-125
  121810:	e0bffa05 	stb	r2,-24(fp)
  121814:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  121818:	d0a73943 	ldbu	r2,-25371(gp)
  12181c:	10803fcc 	andi	r2,r2,255
  121820:	10001526 	beq	r2,zero,121878 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  121824:	e0fff98b 	ldhu	r3,-26(fp)
  121828:	e13ffa03 	ldbu	r4,-24(fp)
  12182c:	e17ffa8b 	ldhu	r5,-22(fp)
  121830:	e0bffb04 	addi	r2,fp,-20
  121834:	d8800015 	stw	r2,0(sp)
  121838:	280f883a 	mov	r7,r5
  12183c:	200d883a 	mov	r6,r4
  121840:	180b883a 	mov	r5,r3
  121844:	e13ff517 	ldw	r4,-44(fp)
  121848:	011bd780 	call	11bd78 <OSFlagPend>
  12184c:	00000a06 	br	121878 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  121850:	0001883a 	nop
  121854:	e0bffc17 	ldw	r2,-16(fp)
  121858:	10c01017 	ldw	r3,64(r2)
  12185c:	e0bff017 	ldw	r2,-64(fp)
  121860:	1880051e 	bne	r3,r2,121878 <altera_avalon_jtag_uart_write+0x248>
  121864:	e0bffc17 	ldw	r2,-16(fp)
  121868:	10c00917 	ldw	r3,36(r2)
  12186c:	e0bffc17 	ldw	r2,-16(fp)
  121870:	10800117 	ldw	r2,4(r2)
  121874:	18bff736 	bltu	r3,r2,121854 <__alt_data_end+0xfffe1854>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  121878:	e0bffc17 	ldw	r2,-16(fp)
  12187c:	10800917 	ldw	r2,36(r2)
  121880:	1000051e 	bne	r2,zero,121898 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
  121884:	e0bffe17 	ldw	r2,-8(fp)
  121888:	00bfb616 	blt	zero,r2,121764 <__alt_data_end+0xfffe1764>
  12188c:	00000306 	br	12189c <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  121890:	0001883a 	nop
  121894:	00000106 	br	12189c <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  121898:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  12189c:	e0bffc17 	ldw	r2,-16(fp)
  1218a0:	10800b17 	ldw	r2,44(r2)
  1218a4:	1009883a 	mov	r4,r2
  1218a8:	011eb640 	call	11eb64 <OSSemPost>

  if (ptr != start)
  1218ac:	e0fffd17 	ldw	r3,-12(fp)
  1218b0:	e0bff217 	ldw	r2,-56(fp)
  1218b4:	18800426 	beq	r3,r2,1218c8 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
  1218b8:	e0fffd17 	ldw	r3,-12(fp)
  1218bc:	e0bff217 	ldw	r2,-56(fp)
  1218c0:	1885c83a 	sub	r2,r3,r2
  1218c4:	00000606 	br	1218e0 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
  1218c8:	e0bfff17 	ldw	r2,-4(fp)
  1218cc:	1090000c 	andi	r2,r2,16384
  1218d0:	10000226 	beq	r2,zero,1218dc <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
  1218d4:	00bffd44 	movi	r2,-11
  1218d8:	00000106 	br	1218e0 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  1218dc:	00bffec4 	movi	r2,-5
}
  1218e0:	e037883a 	mov	sp,fp
  1218e4:	dfc00117 	ldw	ra,4(sp)
  1218e8:	df000017 	ldw	fp,0(sp)
  1218ec:	dec00204 	addi	sp,sp,8
  1218f0:	f800283a 	ret

001218f4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  1218f4:	defffa04 	addi	sp,sp,-24
  1218f8:	dfc00515 	stw	ra,20(sp)
  1218fc:	df000415 	stw	fp,16(sp)
  121900:	df000404 	addi	fp,sp,16
  121904:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  121908:	0007883a 	mov	r3,zero
  12190c:	e0bfff17 	ldw	r2,-4(fp)
  121910:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  121914:	e0bfff17 	ldw	r2,-4(fp)
  121918:	10800104 	addi	r2,r2,4
  12191c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  121920:	0005303a 	rdctl	r2,status
  121924:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  121928:	e0fffd17 	ldw	r3,-12(fp)
  12192c:	00bfff84 	movi	r2,-2
  121930:	1884703a 	and	r2,r3,r2
  121934:	1001703a 	wrctl	status,r2
  
  return context;
  121938:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  12193c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  121940:	01224140 	call	122414 <alt_tick>
  121944:	e0bffc17 	ldw	r2,-16(fp)
  121948:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  12194c:	e0bffe17 	ldw	r2,-8(fp)
  121950:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  121954:	0001883a 	nop
  121958:	e037883a 	mov	sp,fp
  12195c:	dfc00117 	ldw	ra,4(sp)
  121960:	df000017 	ldw	fp,0(sp)
  121964:	dec00204 	addi	sp,sp,8
  121968:	f800283a 	ret

0012196c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  12196c:	defff804 	addi	sp,sp,-32
  121970:	dfc00715 	stw	ra,28(sp)
  121974:	df000615 	stw	fp,24(sp)
  121978:	df000604 	addi	fp,sp,24
  12197c:	e13ffc15 	stw	r4,-16(fp)
  121980:	e17ffd15 	stw	r5,-12(fp)
  121984:	e1bffe15 	stw	r6,-8(fp)
  121988:	e1ffff15 	stw	r7,-4(fp)
  12198c:	e0bfff17 	ldw	r2,-4(fp)
  121990:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  121994:	d0a74e17 	ldw	r2,-25288(gp)
  121998:	1000021e 	bne	r2,zero,1219a4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  12199c:	e0bffb17 	ldw	r2,-20(fp)
  1219a0:	d0a74e15 	stw	r2,-25288(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  1219a4:	e0bffc17 	ldw	r2,-16(fp)
  1219a8:	10800104 	addi	r2,r2,4
  1219ac:	00c001c4 	movi	r3,7
  1219b0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  1219b4:	d8000015 	stw	zero,0(sp)
  1219b8:	e1fffc17 	ldw	r7,-16(fp)
  1219bc:	018004b4 	movhi	r6,18
  1219c0:	31863d04 	addi	r6,r6,6388
  1219c4:	e17ffe17 	ldw	r5,-8(fp)
  1219c8:	e13ffd17 	ldw	r4,-12(fp)
  1219cc:	0121cf40 	call	121cf4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  1219d0:	0001883a 	nop
  1219d4:	e037883a 	mov	sp,fp
  1219d8:	dfc00117 	ldw	ra,4(sp)
  1219dc:	df000017 	ldw	fp,0(sp)
  1219e0:	dec00204 	addi	sp,sp,8
  1219e4:	f800283a 	ret

001219e8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  1219e8:	defff504 	addi	sp,sp,-44
  1219ec:	df000a15 	stw	fp,40(sp)
  1219f0:	df000a04 	addi	fp,sp,40
  1219f4:	e13ffc15 	stw	r4,-16(fp)
  1219f8:	e17ffd15 	stw	r5,-12(fp)
  1219fc:	e1bffe15 	stw	r6,-8(fp)
  121a00:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  121a04:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  121a08:	d0a74e17 	ldw	r2,-25288(gp)
  
  if (alt_ticks_per_second ())
  121a0c:	10003c26 	beq	r2,zero,121b00 <alt_alarm_start+0x118>
  {
    if (alarm)
  121a10:	e0bffc17 	ldw	r2,-16(fp)
  121a14:	10003826 	beq	r2,zero,121af8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  121a18:	e0bffc17 	ldw	r2,-16(fp)
  121a1c:	e0fffe17 	ldw	r3,-8(fp)
  121a20:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  121a24:	e0bffc17 	ldw	r2,-16(fp)
  121a28:	e0ffff17 	ldw	r3,-4(fp)
  121a2c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  121a30:	0005303a 	rdctl	r2,status
  121a34:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  121a38:	e0fff917 	ldw	r3,-28(fp)
  121a3c:	00bfff84 	movi	r2,-2
  121a40:	1884703a 	and	r2,r3,r2
  121a44:	1001703a 	wrctl	status,r2
  
  return context;
  121a48:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  121a4c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  121a50:	d0a74f17 	ldw	r2,-25284(gp)
      
      current_nticks = alt_nticks();
  121a54:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  121a58:	e0fffd17 	ldw	r3,-12(fp)
  121a5c:	e0bff617 	ldw	r2,-40(fp)
  121a60:	1885883a 	add	r2,r3,r2
  121a64:	10c00044 	addi	r3,r2,1
  121a68:	e0bffc17 	ldw	r2,-16(fp)
  121a6c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  121a70:	e0bffc17 	ldw	r2,-16(fp)
  121a74:	10c00217 	ldw	r3,8(r2)
  121a78:	e0bff617 	ldw	r2,-40(fp)
  121a7c:	1880042e 	bgeu	r3,r2,121a90 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  121a80:	e0bffc17 	ldw	r2,-16(fp)
  121a84:	00c00044 	movi	r3,1
  121a88:	10c00405 	stb	r3,16(r2)
  121a8c:	00000206 	br	121a98 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  121a90:	e0bffc17 	ldw	r2,-16(fp)
  121a94:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  121a98:	e0bffc17 	ldw	r2,-16(fp)
  121a9c:	d0e02f04 	addi	r3,gp,-32580
  121aa0:	e0fffa15 	stw	r3,-24(fp)
  121aa4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  121aa8:	e0bffb17 	ldw	r2,-20(fp)
  121aac:	e0fffa17 	ldw	r3,-24(fp)
  121ab0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  121ab4:	e0bffa17 	ldw	r2,-24(fp)
  121ab8:	10c00017 	ldw	r3,0(r2)
  121abc:	e0bffb17 	ldw	r2,-20(fp)
  121ac0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  121ac4:	e0bffa17 	ldw	r2,-24(fp)
  121ac8:	10800017 	ldw	r2,0(r2)
  121acc:	e0fffb17 	ldw	r3,-20(fp)
  121ad0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  121ad4:	e0bffa17 	ldw	r2,-24(fp)
  121ad8:	e0fffb17 	ldw	r3,-20(fp)
  121adc:	10c00015 	stw	r3,0(r2)
  121ae0:	e0bff817 	ldw	r2,-32(fp)
  121ae4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  121ae8:	e0bff717 	ldw	r2,-36(fp)
  121aec:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  121af0:	0005883a 	mov	r2,zero
  121af4:	00000306 	br	121b04 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  121af8:	00bffa84 	movi	r2,-22
  121afc:	00000106 	br	121b04 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  121b00:	00bfde84 	movi	r2,-134
  }
}
  121b04:	e037883a 	mov	sp,fp
  121b08:	df000017 	ldw	fp,0(sp)
  121b0c:	dec00104 	addi	sp,sp,4
  121b10:	f800283a 	ret

00121b14 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  121b14:	deffff04 	addi	sp,sp,-4
  121b18:	df000015 	stw	fp,0(sp)
  121b1c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  121b20:	0001883a 	nop
  121b24:	e037883a 	mov	sp,fp
  121b28:	df000017 	ldw	fp,0(sp)
  121b2c:	dec00104 	addi	sp,sp,4
  121b30:	f800283a 	ret

00121b34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  121b34:	defffe04 	addi	sp,sp,-8
  121b38:	dfc00115 	stw	ra,4(sp)
  121b3c:	df000015 	stw	fp,0(sp)
  121b40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  121b44:	d0a00d17 	ldw	r2,-32716(gp)
  121b48:	10000326 	beq	r2,zero,121b58 <alt_get_errno+0x24>
  121b4c:	d0a00d17 	ldw	r2,-32716(gp)
  121b50:	103ee83a 	callr	r2
  121b54:	00000106 	br	121b5c <alt_get_errno+0x28>
  121b58:	d0a72a04 	addi	r2,gp,-25432
}
  121b5c:	e037883a 	mov	sp,fp
  121b60:	dfc00117 	ldw	ra,4(sp)
  121b64:	df000017 	ldw	fp,0(sp)
  121b68:	dec00204 	addi	sp,sp,8
  121b6c:	f800283a 	ret

00121b70 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  121b70:	defffa04 	addi	sp,sp,-24
  121b74:	dfc00515 	stw	ra,20(sp)
  121b78:	df000415 	stw	fp,16(sp)
  121b7c:	df000404 	addi	fp,sp,16
  121b80:	e13ffe15 	stw	r4,-8(fp)
  121b84:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  121b88:	e0bffe17 	ldw	r2,-8(fp)
  121b8c:	10000326 	beq	r2,zero,121b9c <alt_dev_llist_insert+0x2c>
  121b90:	e0bffe17 	ldw	r2,-8(fp)
  121b94:	10800217 	ldw	r2,8(r2)
  121b98:	1000061e 	bne	r2,zero,121bb4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  121b9c:	0121b340 	call	121b34 <alt_get_errno>
  121ba0:	1007883a 	mov	r3,r2
  121ba4:	00800584 	movi	r2,22
  121ba8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  121bac:	00bffa84 	movi	r2,-22
  121bb0:	00001306 	br	121c00 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  121bb4:	e0bffe17 	ldw	r2,-8(fp)
  121bb8:	e0ffff17 	ldw	r3,-4(fp)
  121bbc:	e0fffc15 	stw	r3,-16(fp)
  121bc0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  121bc4:	e0bffd17 	ldw	r2,-12(fp)
  121bc8:	e0fffc17 	ldw	r3,-16(fp)
  121bcc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  121bd0:	e0bffc17 	ldw	r2,-16(fp)
  121bd4:	10c00017 	ldw	r3,0(r2)
  121bd8:	e0bffd17 	ldw	r2,-12(fp)
  121bdc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  121be0:	e0bffc17 	ldw	r2,-16(fp)
  121be4:	10800017 	ldw	r2,0(r2)
  121be8:	e0fffd17 	ldw	r3,-12(fp)
  121bec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  121bf0:	e0bffc17 	ldw	r2,-16(fp)
  121bf4:	e0fffd17 	ldw	r3,-12(fp)
  121bf8:	10c00015 	stw	r3,0(r2)

  return 0;  
  121bfc:	0005883a 	mov	r2,zero
}
  121c00:	e037883a 	mov	sp,fp
  121c04:	dfc00117 	ldw	ra,4(sp)
  121c08:	df000017 	ldw	fp,0(sp)
  121c0c:	dec00204 	addi	sp,sp,8
  121c10:	f800283a 	ret

00121c14 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  121c14:	defffd04 	addi	sp,sp,-12
  121c18:	dfc00215 	stw	ra,8(sp)
  121c1c:	df000115 	stw	fp,4(sp)
  121c20:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  121c24:	008004b4 	movhi	r2,18
  121c28:	108bad04 	addi	r2,r2,11956
  121c2c:	e0bfff15 	stw	r2,-4(fp)
  121c30:	00000606 	br	121c4c <_do_ctors+0x38>
        (*ctor) (); 
  121c34:	e0bfff17 	ldw	r2,-4(fp)
  121c38:	10800017 	ldw	r2,0(r2)
  121c3c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  121c40:	e0bfff17 	ldw	r2,-4(fp)
  121c44:	10bfff04 	addi	r2,r2,-4
  121c48:	e0bfff15 	stw	r2,-4(fp)
  121c4c:	e0ffff17 	ldw	r3,-4(fp)
  121c50:	008004b4 	movhi	r2,18
  121c54:	108bae04 	addi	r2,r2,11960
  121c58:	18bff62e 	bgeu	r3,r2,121c34 <__alt_data_end+0xfffe1c34>
        (*ctor) (); 
}
  121c5c:	0001883a 	nop
  121c60:	e037883a 	mov	sp,fp
  121c64:	dfc00117 	ldw	ra,4(sp)
  121c68:	df000017 	ldw	fp,0(sp)
  121c6c:	dec00204 	addi	sp,sp,8
  121c70:	f800283a 	ret

00121c74 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  121c74:	defffd04 	addi	sp,sp,-12
  121c78:	dfc00215 	stw	ra,8(sp)
  121c7c:	df000115 	stw	fp,4(sp)
  121c80:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  121c84:	008004b4 	movhi	r2,18
  121c88:	108bad04 	addi	r2,r2,11956
  121c8c:	e0bfff15 	stw	r2,-4(fp)
  121c90:	00000606 	br	121cac <_do_dtors+0x38>
        (*dtor) (); 
  121c94:	e0bfff17 	ldw	r2,-4(fp)
  121c98:	10800017 	ldw	r2,0(r2)
  121c9c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  121ca0:	e0bfff17 	ldw	r2,-4(fp)
  121ca4:	10bfff04 	addi	r2,r2,-4
  121ca8:	e0bfff15 	stw	r2,-4(fp)
  121cac:	e0ffff17 	ldw	r3,-4(fp)
  121cb0:	008004b4 	movhi	r2,18
  121cb4:	108bae04 	addi	r2,r2,11960
  121cb8:	18bff62e 	bgeu	r3,r2,121c94 <__alt_data_end+0xfffe1c94>
        (*dtor) (); 
}
  121cbc:	0001883a 	nop
  121cc0:	e037883a 	mov	sp,fp
  121cc4:	dfc00117 	ldw	ra,4(sp)
  121cc8:	df000017 	ldw	fp,0(sp)
  121ccc:	dec00204 	addi	sp,sp,8
  121cd0:	f800283a 	ret

00121cd4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  121cd4:	deffff04 	addi	sp,sp,-4
  121cd8:	df000015 	stw	fp,0(sp)
  121cdc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  121ce0:	0001883a 	nop
  121ce4:	e037883a 	mov	sp,fp
  121ce8:	df000017 	ldw	fp,0(sp)
  121cec:	dec00104 	addi	sp,sp,4
  121cf0:	f800283a 	ret

00121cf4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  121cf4:	defff904 	addi	sp,sp,-28
  121cf8:	dfc00615 	stw	ra,24(sp)
  121cfc:	df000515 	stw	fp,20(sp)
  121d00:	df000504 	addi	fp,sp,20
  121d04:	e13ffc15 	stw	r4,-16(fp)
  121d08:	e17ffd15 	stw	r5,-12(fp)
  121d0c:	e1bffe15 	stw	r6,-8(fp)
  121d10:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  121d14:	e0800217 	ldw	r2,8(fp)
  121d18:	d8800015 	stw	r2,0(sp)
  121d1c:	e1ffff17 	ldw	r7,-4(fp)
  121d20:	e1bffe17 	ldw	r6,-8(fp)
  121d24:	e17ffd17 	ldw	r5,-12(fp)
  121d28:	e13ffc17 	ldw	r4,-16(fp)
  121d2c:	0121ea40 	call	121ea4 <alt_iic_isr_register>
}  
  121d30:	e037883a 	mov	sp,fp
  121d34:	dfc00117 	ldw	ra,4(sp)
  121d38:	df000017 	ldw	fp,0(sp)
  121d3c:	dec00204 	addi	sp,sp,8
  121d40:	f800283a 	ret

00121d44 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  121d44:	defff904 	addi	sp,sp,-28
  121d48:	df000615 	stw	fp,24(sp)
  121d4c:	df000604 	addi	fp,sp,24
  121d50:	e13ffe15 	stw	r4,-8(fp)
  121d54:	e17fff15 	stw	r5,-4(fp)
  121d58:	e0bfff17 	ldw	r2,-4(fp)
  121d5c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  121d60:	0005303a 	rdctl	r2,status
  121d64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  121d68:	e0fffb17 	ldw	r3,-20(fp)
  121d6c:	00bfff84 	movi	r2,-2
  121d70:	1884703a 	and	r2,r3,r2
  121d74:	1001703a 	wrctl	status,r2
  
  return context;
  121d78:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  121d7c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  121d80:	00c00044 	movi	r3,1
  121d84:	e0bffa17 	ldw	r2,-24(fp)
  121d88:	1884983a 	sll	r2,r3,r2
  121d8c:	1007883a 	mov	r3,r2
  121d90:	d0a74d17 	ldw	r2,-25292(gp)
  121d94:	1884b03a 	or	r2,r3,r2
  121d98:	d0a74d15 	stw	r2,-25292(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  121d9c:	d0a74d17 	ldw	r2,-25292(gp)
  121da0:	100170fa 	wrctl	ienable,r2
  121da4:	e0bffc17 	ldw	r2,-16(fp)
  121da8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  121dac:	e0bffd17 	ldw	r2,-12(fp)
  121db0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  121db4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  121db8:	0001883a 	nop
}
  121dbc:	e037883a 	mov	sp,fp
  121dc0:	df000017 	ldw	fp,0(sp)
  121dc4:	dec00104 	addi	sp,sp,4
  121dc8:	f800283a 	ret

00121dcc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  121dcc:	defff904 	addi	sp,sp,-28
  121dd0:	df000615 	stw	fp,24(sp)
  121dd4:	df000604 	addi	fp,sp,24
  121dd8:	e13ffe15 	stw	r4,-8(fp)
  121ddc:	e17fff15 	stw	r5,-4(fp)
  121de0:	e0bfff17 	ldw	r2,-4(fp)
  121de4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  121de8:	0005303a 	rdctl	r2,status
  121dec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  121df0:	e0fffb17 	ldw	r3,-20(fp)
  121df4:	00bfff84 	movi	r2,-2
  121df8:	1884703a 	and	r2,r3,r2
  121dfc:	1001703a 	wrctl	status,r2
  
  return context;
  121e00:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  121e04:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  121e08:	00c00044 	movi	r3,1
  121e0c:	e0bffa17 	ldw	r2,-24(fp)
  121e10:	1884983a 	sll	r2,r3,r2
  121e14:	0084303a 	nor	r2,zero,r2
  121e18:	1007883a 	mov	r3,r2
  121e1c:	d0a74d17 	ldw	r2,-25292(gp)
  121e20:	1884703a 	and	r2,r3,r2
  121e24:	d0a74d15 	stw	r2,-25292(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  121e28:	d0a74d17 	ldw	r2,-25292(gp)
  121e2c:	100170fa 	wrctl	ienable,r2
  121e30:	e0bffc17 	ldw	r2,-16(fp)
  121e34:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  121e38:	e0bffd17 	ldw	r2,-12(fp)
  121e3c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  121e40:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  121e44:	0001883a 	nop
}
  121e48:	e037883a 	mov	sp,fp
  121e4c:	df000017 	ldw	fp,0(sp)
  121e50:	dec00104 	addi	sp,sp,4
  121e54:	f800283a 	ret

00121e58 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  121e58:	defffc04 	addi	sp,sp,-16
  121e5c:	df000315 	stw	fp,12(sp)
  121e60:	df000304 	addi	fp,sp,12
  121e64:	e13ffe15 	stw	r4,-8(fp)
  121e68:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  121e6c:	000530fa 	rdctl	r2,ienable
  121e70:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  121e74:	00c00044 	movi	r3,1
  121e78:	e0bfff17 	ldw	r2,-4(fp)
  121e7c:	1884983a 	sll	r2,r3,r2
  121e80:	1007883a 	mov	r3,r2
  121e84:	e0bffd17 	ldw	r2,-12(fp)
  121e88:	1884703a 	and	r2,r3,r2
  121e8c:	1004c03a 	cmpne	r2,r2,zero
  121e90:	10803fcc 	andi	r2,r2,255
}
  121e94:	e037883a 	mov	sp,fp
  121e98:	df000017 	ldw	fp,0(sp)
  121e9c:	dec00104 	addi	sp,sp,4
  121ea0:	f800283a 	ret

00121ea4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  121ea4:	defff504 	addi	sp,sp,-44
  121ea8:	dfc00a15 	stw	ra,40(sp)
  121eac:	df000915 	stw	fp,36(sp)
  121eb0:	df000904 	addi	fp,sp,36
  121eb4:	e13ffc15 	stw	r4,-16(fp)
  121eb8:	e17ffd15 	stw	r5,-12(fp)
  121ebc:	e1bffe15 	stw	r6,-8(fp)
  121ec0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  121ec4:	00bffa84 	movi	r2,-22
  121ec8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  121ecc:	e0bffd17 	ldw	r2,-12(fp)
  121ed0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  121ed4:	e0bff817 	ldw	r2,-32(fp)
  121ed8:	10800808 	cmpgei	r2,r2,32
  121edc:	1000271e 	bne	r2,zero,121f7c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  121ee0:	0005303a 	rdctl	r2,status
  121ee4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  121ee8:	e0fffb17 	ldw	r3,-20(fp)
  121eec:	00bfff84 	movi	r2,-2
  121ef0:	1884703a 	and	r2,r3,r2
  121ef4:	1001703a 	wrctl	status,r2
  
  return context;
  121ef8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  121efc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  121f00:	008004f4 	movhi	r2,19
  121f04:	10b95d04 	addi	r2,r2,-6796
  121f08:	e0fff817 	ldw	r3,-32(fp)
  121f0c:	180690fa 	slli	r3,r3,3
  121f10:	10c5883a 	add	r2,r2,r3
  121f14:	e0fffe17 	ldw	r3,-8(fp)
  121f18:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  121f1c:	008004f4 	movhi	r2,19
  121f20:	10b95d04 	addi	r2,r2,-6796
  121f24:	e0fff817 	ldw	r3,-32(fp)
  121f28:	180690fa 	slli	r3,r3,3
  121f2c:	10c5883a 	add	r2,r2,r3
  121f30:	10800104 	addi	r2,r2,4
  121f34:	e0ffff17 	ldw	r3,-4(fp)
  121f38:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  121f3c:	e0bffe17 	ldw	r2,-8(fp)
  121f40:	10000526 	beq	r2,zero,121f58 <alt_iic_isr_register+0xb4>
  121f44:	e0bff817 	ldw	r2,-32(fp)
  121f48:	100b883a 	mov	r5,r2
  121f4c:	e13ffc17 	ldw	r4,-16(fp)
  121f50:	0121d440 	call	121d44 <alt_ic_irq_enable>
  121f54:	00000406 	br	121f68 <alt_iic_isr_register+0xc4>
  121f58:	e0bff817 	ldw	r2,-32(fp)
  121f5c:	100b883a 	mov	r5,r2
  121f60:	e13ffc17 	ldw	r4,-16(fp)
  121f64:	0121dcc0 	call	121dcc <alt_ic_irq_disable>
  121f68:	e0bff715 	stw	r2,-36(fp)
  121f6c:	e0bffa17 	ldw	r2,-24(fp)
  121f70:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  121f74:	e0bff917 	ldw	r2,-28(fp)
  121f78:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  121f7c:	e0bff717 	ldw	r2,-36(fp)
}
  121f80:	e037883a 	mov	sp,fp
  121f84:	dfc00117 	ldw	ra,4(sp)
  121f88:	df000017 	ldw	fp,0(sp)
  121f8c:	dec00204 	addi	sp,sp,8
  121f90:	f800283a 	ret

00121f94 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  121f94:	defff804 	addi	sp,sp,-32
  121f98:	dfc00715 	stw	ra,28(sp)
  121f9c:	df000615 	stw	fp,24(sp)
  121fa0:	dc000515 	stw	r16,20(sp)
  121fa4:	df000604 	addi	fp,sp,24
  121fa8:	e13ffb15 	stw	r4,-20(fp)
  121fac:	e17ffc15 	stw	r5,-16(fp)
  121fb0:	e1bffd15 	stw	r6,-12(fp)
  121fb4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
  121fb8:	e1bffe17 	ldw	r6,-8(fp)
  121fbc:	e17ffd17 	ldw	r5,-12(fp)
  121fc0:	e13ffc17 	ldw	r4,-16(fp)
  121fc4:	012221c0 	call	12221c <open>
  121fc8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
  121fcc:	e0bffa17 	ldw	r2,-24(fp)
  121fd0:	10002216 	blt	r2,zero,12205c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  121fd4:	040004b4 	movhi	r16,18
  121fd8:	8410f704 	addi	r16,r16,17372
  121fdc:	e0bffa17 	ldw	r2,-24(fp)
  121fe0:	01400304 	movi	r5,12
  121fe4:	1009883a 	mov	r4,r2
  121fe8:	01159fc0 	call	1159fc <__mulsi3>
  121fec:	8085883a 	add	r2,r16,r2
  121ff0:	10c00017 	ldw	r3,0(r2)
  121ff4:	e0bffb17 	ldw	r2,-20(fp)
  121ff8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  121ffc:	040004b4 	movhi	r16,18
  122000:	8410f704 	addi	r16,r16,17372
  122004:	e0bffa17 	ldw	r2,-24(fp)
  122008:	01400304 	movi	r5,12
  12200c:	1009883a 	mov	r4,r2
  122010:	01159fc0 	call	1159fc <__mulsi3>
  122014:	8085883a 	add	r2,r16,r2
  122018:	10800104 	addi	r2,r2,4
  12201c:	10c00017 	ldw	r3,0(r2)
  122020:	e0bffb17 	ldw	r2,-20(fp)
  122024:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  122028:	040004b4 	movhi	r16,18
  12202c:	8410f704 	addi	r16,r16,17372
  122030:	e0bffa17 	ldw	r2,-24(fp)
  122034:	01400304 	movi	r5,12
  122038:	1009883a 	mov	r4,r2
  12203c:	01159fc0 	call	1159fc <__mulsi3>
  122040:	8085883a 	add	r2,r16,r2
  122044:	10800204 	addi	r2,r2,8
  122048:	10c00017 	ldw	r3,0(r2)
  12204c:	e0bffb17 	ldw	r2,-20(fp)
  122050:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  122054:	e13ffa17 	ldw	r4,-24(fp)
  122058:	0118d880 	call	118d88 <alt_release_fd>
  }
} 
  12205c:	0001883a 	nop
  122060:	e6ffff04 	addi	sp,fp,-4
  122064:	dfc00217 	ldw	ra,8(sp)
  122068:	df000117 	ldw	fp,4(sp)
  12206c:	dc000017 	ldw	r16,0(sp)
  122070:	dec00304 	addi	sp,sp,12
  122074:	f800283a 	ret

00122078 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  122078:	defffb04 	addi	sp,sp,-20
  12207c:	dfc00415 	stw	ra,16(sp)
  122080:	df000315 	stw	fp,12(sp)
  122084:	df000304 	addi	fp,sp,12
  122088:	e13ffd15 	stw	r4,-12(fp)
  12208c:	e17ffe15 	stw	r5,-8(fp)
  122090:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  122094:	01c07fc4 	movi	r7,511
  122098:	01800044 	movi	r6,1
  12209c:	e17ffd17 	ldw	r5,-12(fp)
  1220a0:	010004b4 	movhi	r4,18
  1220a4:	2110fa04 	addi	r4,r4,17384
  1220a8:	0121f940 	call	121f94 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  1220ac:	01c07fc4 	movi	r7,511
  1220b0:	000d883a 	mov	r6,zero
  1220b4:	e17ffe17 	ldw	r5,-8(fp)
  1220b8:	010004b4 	movhi	r4,18
  1220bc:	2110f704 	addi	r4,r4,17372
  1220c0:	0121f940 	call	121f94 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  1220c4:	01c07fc4 	movi	r7,511
  1220c8:	01800044 	movi	r6,1
  1220cc:	e17fff17 	ldw	r5,-4(fp)
  1220d0:	010004b4 	movhi	r4,18
  1220d4:	2110fd04 	addi	r4,r4,17396
  1220d8:	0121f940 	call	121f94 <alt_open_fd>
}  
  1220dc:	0001883a 	nop
  1220e0:	e037883a 	mov	sp,fp
  1220e4:	dfc00117 	ldw	ra,4(sp)
  1220e8:	df000017 	ldw	fp,0(sp)
  1220ec:	dec00204 	addi	sp,sp,8
  1220f0:	f800283a 	ret

001220f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  1220f4:	defffe04 	addi	sp,sp,-8
  1220f8:	dfc00115 	stw	ra,4(sp)
  1220fc:	df000015 	stw	fp,0(sp)
  122100:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  122104:	d0a00d17 	ldw	r2,-32716(gp)
  122108:	10000326 	beq	r2,zero,122118 <alt_get_errno+0x24>
  12210c:	d0a00d17 	ldw	r2,-32716(gp)
  122110:	103ee83a 	callr	r2
  122114:	00000106 	br	12211c <alt_get_errno+0x28>
  122118:	d0a72a04 	addi	r2,gp,-25432
}
  12211c:	e037883a 	mov	sp,fp
  122120:	dfc00117 	ldw	ra,4(sp)
  122124:	df000017 	ldw	fp,0(sp)
  122128:	dec00204 	addi	sp,sp,8
  12212c:	f800283a 	ret

00122130 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  122130:	defffb04 	addi	sp,sp,-20
  122134:	dfc00415 	stw	ra,16(sp)
  122138:	df000315 	stw	fp,12(sp)
  12213c:	dc000215 	stw	r16,8(sp)
  122140:	df000304 	addi	fp,sp,12
  122144:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  122148:	e0bffe17 	ldw	r2,-8(fp)
  12214c:	10800217 	ldw	r2,8(r2)
  122150:	10d00034 	orhi	r3,r2,16384
  122154:	e0bffe17 	ldw	r2,-8(fp)
  122158:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  12215c:	e03ffd15 	stw	zero,-12(fp)
  122160:	00002306 	br	1221f0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  122164:	040004b4 	movhi	r16,18
  122168:	8410f704 	addi	r16,r16,17372
  12216c:	e0bffd17 	ldw	r2,-12(fp)
  122170:	01400304 	movi	r5,12
  122174:	1009883a 	mov	r4,r2
  122178:	01159fc0 	call	1159fc <__mulsi3>
  12217c:	8085883a 	add	r2,r16,r2
  122180:	10c00017 	ldw	r3,0(r2)
  122184:	e0bffe17 	ldw	r2,-8(fp)
  122188:	10800017 	ldw	r2,0(r2)
  12218c:	1880151e 	bne	r3,r2,1221e4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  122190:	040004b4 	movhi	r16,18
  122194:	8410f704 	addi	r16,r16,17372
  122198:	e0bffd17 	ldw	r2,-12(fp)
  12219c:	01400304 	movi	r5,12
  1221a0:	1009883a 	mov	r4,r2
  1221a4:	01159fc0 	call	1159fc <__mulsi3>
  1221a8:	8085883a 	add	r2,r16,r2
  1221ac:	10800204 	addi	r2,r2,8
  1221b0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  1221b4:	10000b0e 	bge	r2,zero,1221e4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  1221b8:	01400304 	movi	r5,12
  1221bc:	e13ffd17 	ldw	r4,-12(fp)
  1221c0:	01159fc0 	call	1159fc <__mulsi3>
  1221c4:	1007883a 	mov	r3,r2
  1221c8:	008004b4 	movhi	r2,18
  1221cc:	1090f704 	addi	r2,r2,17372
  1221d0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  1221d4:	e0bffe17 	ldw	r2,-8(fp)
  1221d8:	18800226 	beq	r3,r2,1221e4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  1221dc:	00bffcc4 	movi	r2,-13
  1221e0:	00000806 	br	122204 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  1221e4:	e0bffd17 	ldw	r2,-12(fp)
  1221e8:	10800044 	addi	r2,r2,1
  1221ec:	e0bffd15 	stw	r2,-12(fp)
  1221f0:	d0a00c17 	ldw	r2,-32720(gp)
  1221f4:	1007883a 	mov	r3,r2
  1221f8:	e0bffd17 	ldw	r2,-12(fp)
  1221fc:	18bfd92e 	bgeu	r3,r2,122164 <__alt_data_end+0xfffe2164>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  122200:	0005883a 	mov	r2,zero
}
  122204:	e6ffff04 	addi	sp,fp,-4
  122208:	dfc00217 	ldw	ra,8(sp)
  12220c:	df000117 	ldw	fp,4(sp)
  122210:	dc000017 	ldw	r16,0(sp)
  122214:	dec00304 	addi	sp,sp,12
  122218:	f800283a 	ret

0012221c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  12221c:	defff604 	addi	sp,sp,-40
  122220:	dfc00915 	stw	ra,36(sp)
  122224:	df000815 	stw	fp,32(sp)
  122228:	df000804 	addi	fp,sp,32
  12222c:	e13ffd15 	stw	r4,-12(fp)
  122230:	e17ffe15 	stw	r5,-8(fp)
  122234:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  122238:	00bfffc4 	movi	r2,-1
  12223c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  122240:	00bffb44 	movi	r2,-19
  122244:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  122248:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  12224c:	d1600a04 	addi	r5,gp,-32728
  122250:	e13ffd17 	ldw	r4,-12(fp)
  122254:	01228980 	call	122898 <alt_find_dev>
  122258:	e0bff815 	stw	r2,-32(fp)
  12225c:	e0bff817 	ldw	r2,-32(fp)
  122260:	1000051e 	bne	r2,zero,122278 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  122264:	e13ffd17 	ldw	r4,-12(fp)
  122268:	01229280 	call	122928 <alt_find_file>
  12226c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  122270:	00800044 	movi	r2,1
  122274:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  122278:	e0bff817 	ldw	r2,-32(fp)
  12227c:	10002b26 	beq	r2,zero,12232c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
  122280:	e13ff817 	ldw	r4,-32(fp)
  122284:	0122a300 	call	122a30 <alt_get_fd>
  122288:	e0bff915 	stw	r2,-28(fp)
  12228c:	e0bff917 	ldw	r2,-28(fp)
  122290:	1000030e 	bge	r2,zero,1222a0 <open+0x84>
    {
      status = index;
  122294:	e0bff917 	ldw	r2,-28(fp)
  122298:	e0bffa15 	stw	r2,-24(fp)
  12229c:	00002506 	br	122334 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
  1222a0:	01400304 	movi	r5,12
  1222a4:	e13ff917 	ldw	r4,-28(fp)
  1222a8:	01159fc0 	call	1159fc <__mulsi3>
  1222ac:	1007883a 	mov	r3,r2
  1222b0:	008004b4 	movhi	r2,18
  1222b4:	1090f704 	addi	r2,r2,17372
  1222b8:	1885883a 	add	r2,r3,r2
  1222bc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  1222c0:	e0fffe17 	ldw	r3,-8(fp)
  1222c4:	00900034 	movhi	r2,16384
  1222c8:	10bfffc4 	addi	r2,r2,-1
  1222cc:	1886703a 	and	r3,r3,r2
  1222d0:	e0bffc17 	ldw	r2,-16(fp)
  1222d4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  1222d8:	e0bffb17 	ldw	r2,-20(fp)
  1222dc:	1000051e 	bne	r2,zero,1222f4 <open+0xd8>
  1222e0:	e13ffc17 	ldw	r4,-16(fp)
  1222e4:	01221300 	call	122130 <alt_file_locked>
  1222e8:	e0bffa15 	stw	r2,-24(fp)
  1222ec:	e0bffa17 	ldw	r2,-24(fp)
  1222f0:	10001016 	blt	r2,zero,122334 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  1222f4:	e0bff817 	ldw	r2,-32(fp)
  1222f8:	10800317 	ldw	r2,12(r2)
  1222fc:	10000826 	beq	r2,zero,122320 <open+0x104>
  122300:	e0bff817 	ldw	r2,-32(fp)
  122304:	10800317 	ldw	r2,12(r2)
  122308:	e1ffff17 	ldw	r7,-4(fp)
  12230c:	e1bffe17 	ldw	r6,-8(fp)
  122310:	e17ffd17 	ldw	r5,-12(fp)
  122314:	e13ffc17 	ldw	r4,-16(fp)
  122318:	103ee83a 	callr	r2
  12231c:	00000106 	br	122324 <open+0x108>
  122320:	0005883a 	mov	r2,zero
  122324:	e0bffa15 	stw	r2,-24(fp)
  122328:	00000206 	br	122334 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
  12232c:	00bffb44 	movi	r2,-19
  122330:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  122334:	e0bffa17 	ldw	r2,-24(fp)
  122338:	1000090e 	bge	r2,zero,122360 <open+0x144>
  {
    alt_release_fd (index);  
  12233c:	e13ff917 	ldw	r4,-28(fp)
  122340:	0118d880 	call	118d88 <alt_release_fd>
    ALT_ERRNO = -status;
  122344:	01220f40 	call	1220f4 <alt_get_errno>
  122348:	1007883a 	mov	r3,r2
  12234c:	e0bffa17 	ldw	r2,-24(fp)
  122350:	0085c83a 	sub	r2,zero,r2
  122354:	18800015 	stw	r2,0(r3)
    return -1;
  122358:	00bfffc4 	movi	r2,-1
  12235c:	00000106 	br	122364 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
  122360:	e0bff917 	ldw	r2,-28(fp)
}
  122364:	e037883a 	mov	sp,fp
  122368:	dfc00117 	ldw	ra,4(sp)
  12236c:	df000017 	ldw	fp,0(sp)
  122370:	dec00204 	addi	sp,sp,8
  122374:	f800283a 	ret

00122378 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  122378:	defffa04 	addi	sp,sp,-24
  12237c:	df000515 	stw	fp,20(sp)
  122380:	df000504 	addi	fp,sp,20
  122384:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  122388:	0005303a 	rdctl	r2,status
  12238c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  122390:	e0fffc17 	ldw	r3,-16(fp)
  122394:	00bfff84 	movi	r2,-2
  122398:	1884703a 	and	r2,r3,r2
  12239c:	1001703a 	wrctl	status,r2
  
  return context;
  1223a0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  1223a4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  1223a8:	e0bfff17 	ldw	r2,-4(fp)
  1223ac:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  1223b0:	e0bffd17 	ldw	r2,-12(fp)
  1223b4:	10800017 	ldw	r2,0(r2)
  1223b8:	e0fffd17 	ldw	r3,-12(fp)
  1223bc:	18c00117 	ldw	r3,4(r3)
  1223c0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  1223c4:	e0bffd17 	ldw	r2,-12(fp)
  1223c8:	10800117 	ldw	r2,4(r2)
  1223cc:	e0fffd17 	ldw	r3,-12(fp)
  1223d0:	18c00017 	ldw	r3,0(r3)
  1223d4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  1223d8:	e0bffd17 	ldw	r2,-12(fp)
  1223dc:	e0fffd17 	ldw	r3,-12(fp)
  1223e0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  1223e4:	e0bffd17 	ldw	r2,-12(fp)
  1223e8:	e0fffd17 	ldw	r3,-12(fp)
  1223ec:	10c00015 	stw	r3,0(r2)
  1223f0:	e0bffb17 	ldw	r2,-20(fp)
  1223f4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1223f8:	e0bffe17 	ldw	r2,-8(fp)
  1223fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  122400:	0001883a 	nop
  122404:	e037883a 	mov	sp,fp
  122408:	df000017 	ldw	fp,0(sp)
  12240c:	dec00104 	addi	sp,sp,4
  122410:	f800283a 	ret

00122414 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  122414:	defffb04 	addi	sp,sp,-20
  122418:	dfc00415 	stw	ra,16(sp)
  12241c:	df000315 	stw	fp,12(sp)
  122420:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  122424:	d0a02f17 	ldw	r2,-32580(gp)
  122428:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  12242c:	d0a74f17 	ldw	r2,-25284(gp)
  122430:	10800044 	addi	r2,r2,1
  122434:	d0a74f15 	stw	r2,-25284(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  122438:	00002e06 	br	1224f4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  12243c:	e0bffd17 	ldw	r2,-12(fp)
  122440:	10800017 	ldw	r2,0(r2)
  122444:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  122448:	e0bffd17 	ldw	r2,-12(fp)
  12244c:	10800403 	ldbu	r2,16(r2)
  122450:	10803fcc 	andi	r2,r2,255
  122454:	10000426 	beq	r2,zero,122468 <alt_tick+0x54>
  122458:	d0a74f17 	ldw	r2,-25284(gp)
  12245c:	1000021e 	bne	r2,zero,122468 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  122460:	e0bffd17 	ldw	r2,-12(fp)
  122464:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  122468:	e0bffd17 	ldw	r2,-12(fp)
  12246c:	10800217 	ldw	r2,8(r2)
  122470:	d0e74f17 	ldw	r3,-25284(gp)
  122474:	18801d36 	bltu	r3,r2,1224ec <alt_tick+0xd8>
  122478:	e0bffd17 	ldw	r2,-12(fp)
  12247c:	10800403 	ldbu	r2,16(r2)
  122480:	10803fcc 	andi	r2,r2,255
  122484:	1000191e 	bne	r2,zero,1224ec <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  122488:	e0bffd17 	ldw	r2,-12(fp)
  12248c:	10800317 	ldw	r2,12(r2)
  122490:	e0fffd17 	ldw	r3,-12(fp)
  122494:	18c00517 	ldw	r3,20(r3)
  122498:	1809883a 	mov	r4,r3
  12249c:	103ee83a 	callr	r2
  1224a0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  1224a4:	e0bfff17 	ldw	r2,-4(fp)
  1224a8:	1000031e 	bne	r2,zero,1224b8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  1224ac:	e13ffd17 	ldw	r4,-12(fp)
  1224b0:	01223780 	call	122378 <alt_alarm_stop>
  1224b4:	00000d06 	br	1224ec <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  1224b8:	e0bffd17 	ldw	r2,-12(fp)
  1224bc:	10c00217 	ldw	r3,8(r2)
  1224c0:	e0bfff17 	ldw	r2,-4(fp)
  1224c4:	1887883a 	add	r3,r3,r2
  1224c8:	e0bffd17 	ldw	r2,-12(fp)
  1224cc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  1224d0:	e0bffd17 	ldw	r2,-12(fp)
  1224d4:	10c00217 	ldw	r3,8(r2)
  1224d8:	d0a74f17 	ldw	r2,-25284(gp)
  1224dc:	1880032e 	bgeu	r3,r2,1224ec <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  1224e0:	e0bffd17 	ldw	r2,-12(fp)
  1224e4:	00c00044 	movi	r3,1
  1224e8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  1224ec:	e0bffe17 	ldw	r2,-8(fp)
  1224f0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  1224f4:	e0fffd17 	ldw	r3,-12(fp)
  1224f8:	d0a02f04 	addi	r2,gp,-32580
  1224fc:	18bfcf1e 	bne	r3,r2,12243c <__alt_data_end+0xfffe243c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  122500:	0119f9c0 	call	119f9c <OSTimeTick>
}
  122504:	0001883a 	nop
  122508:	e037883a 	mov	sp,fp
  12250c:	dfc00117 	ldw	ra,4(sp)
  122510:	df000017 	ldw	fp,0(sp)
  122514:	dec00204 	addi	sp,sp,8
  122518:	f800283a 	ret

0012251c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  12251c:	deffff04 	addi	sp,sp,-4
  122520:	df000015 	stw	fp,0(sp)
  122524:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  122528:	000170fa 	wrctl	ienable,zero
}
  12252c:	0001883a 	nop
  122530:	e037883a 	mov	sp,fp
  122534:	df000017 	ldw	fp,0(sp)
  122538:	dec00104 	addi	sp,sp,4
  12253c:	f800283a 	ret

00122540 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  122540:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  122544:	d0e00217 	ldw	r3,-32760(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  122548:	d1274817 	ldw	r4,-25312(gp)

      stw ra,  0(sp)
  12254c:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  122550:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  122554:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  122558:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  12255c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  122560:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  122564:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  122568:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  12256c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  122570:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  122574:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  122578:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  12257c:	01227b40 	call	1227b4 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  122580:	d1274317 	ldw	r4,-25332(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  122584:	d1673b07 	ldb	r5,-25364(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  122588:	d1274815 	stw	r4,-25312(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  12258c:	d1673b45 	stb	r5,-25363(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  122590:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  122594:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  122598:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  12259c:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  1225a0:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  1225a4:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  1225a8:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  1225ac:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  1225b0:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  1225b4:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  1225b8:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  1225bc:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  1225c0:	d0e00215 	stw	r3,-32760(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  1225c4:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  1225c8:	f800283a 	ret

001225cc <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  1225cc:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  1225d0:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  1225d4:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  1225d8:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  1225dc:	01227b40 	call	1227b4 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  1225e0:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  1225e4:	d4a73945 	stb	r18,-25371(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  1225e8:	003fe506 	br	122580 <__alt_data_end+0xfffe2580>

001225ec <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  1225ec:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  1225f0:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  1225f4:	10800054 	ori	r2,r2,1
      wrctl status, r2
  1225f8:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  1225fc:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  122600:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  122604:	dec00204 	addi	sp,sp,8

      callr r2
  122608:	103ee83a 	callr	r2

      nop
  12260c:	0001883a 	nop

00122610 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  122610:	defff704 	addi	sp,sp,-36
  122614:	dfc00815 	stw	ra,32(sp)
  122618:	df000715 	stw	fp,28(sp)
  12261c:	df000704 	addi	fp,sp,28
  122620:	e13ffc15 	stw	r4,-16(fp)
  122624:	e17ffd15 	stw	r5,-12(fp)
  122628:	e1bffe15 	stw	r6,-8(fp)
  12262c:	3805883a 	mov	r2,r7
  122630:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  122634:	e0fffe17 	ldw	r3,-8(fp)
  122638:	00bfff04 	movi	r2,-4
  12263c:	1884703a 	and	r2,r3,r2
  122640:	10bef704 	addi	r2,r2,-1060
  122644:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  122648:	01810904 	movi	r6,1060
  12264c:	000b883a 	mov	r5,zero
  122650:	e13ff917 	ldw	r4,-28(fp)
  122654:	01016c40 	call	1016c4 <memset>
  122658:	e0bff917 	ldw	r2,-28(fp)
  12265c:	10c0bb04 	addi	r3,r2,748
  122660:	e0bff917 	ldw	r2,-28(fp)
  122664:	10c00115 	stw	r3,4(r2)
  122668:	e0bff917 	ldw	r2,-28(fp)
  12266c:	10c0d504 	addi	r3,r2,852
  122670:	e0bff917 	ldw	r2,-28(fp)
  122674:	10c00215 	stw	r3,8(r2)
  122678:	e0bff917 	ldw	r2,-28(fp)
  12267c:	10c0ef04 	addi	r3,r2,956
  122680:	e0bff917 	ldw	r2,-28(fp)
  122684:	10c00315 	stw	r3,12(r2)
  122688:	e0fff917 	ldw	r3,-28(fp)
  12268c:	008004b4 	movhi	r2,18
  122690:	108eaa04 	addi	r2,r2,15016
  122694:	18800d15 	stw	r2,52(r3)
  122698:	e0bff917 	ldw	r2,-28(fp)
  12269c:	00c00044 	movi	r3,1
  1226a0:	10c02915 	stw	r3,164(r2)
  1226a4:	10002a15 	stw	zero,168(r2)
  1226a8:	e0bff917 	ldw	r2,-28(fp)
  1226ac:	00ccc384 	movi	r3,13070
  1226b0:	10c02b0d 	sth	r3,172(r2)
  1226b4:	e0bff917 	ldw	r2,-28(fp)
  1226b8:	00eaf344 	movi	r3,-21555
  1226bc:	10c02b8d 	sth	r3,174(r2)
  1226c0:	e0bff917 	ldw	r2,-28(fp)
  1226c4:	00c48d04 	movi	r3,4660
  1226c8:	10c02c0d 	sth	r3,176(r2)
  1226cc:	e0bff917 	ldw	r2,-28(fp)
  1226d0:	00f99b44 	movi	r3,-6547
  1226d4:	10c02c8d 	sth	r3,178(r2)
  1226d8:	e0bff917 	ldw	r2,-28(fp)
  1226dc:	00f7bb04 	movi	r3,-8468
  1226e0:	10c02d0d 	sth	r3,180(r2)
  1226e4:	e0bff917 	ldw	r2,-28(fp)
  1226e8:	00c00144 	movi	r3,5
  1226ec:	10c02d8d 	sth	r3,182(r2)
  1226f0:	e0bff917 	ldw	r2,-28(fp)
  1226f4:	00c002c4 	movi	r3,11
  1226f8:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  1226fc:	e0bff917 	ldw	r2,-28(fp)
  122700:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  122704:	e0bffa17 	ldw	r2,-24(fp)
  122708:	10bff304 	addi	r2,r2,-52
  12270c:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  122710:	e0bffb17 	ldw	r2,-20(fp)
  122714:	10800c04 	addi	r2,r2,48
  122718:	e0fffc17 	ldw	r3,-16(fp)
  12271c:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  122720:	e0bffb17 	ldw	r2,-20(fp)
  122724:	10800b04 	addi	r2,r2,44
  122728:	e0fffd17 	ldw	r3,-12(fp)
  12272c:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  122730:	e0bffb17 	ldw	r2,-20(fp)
  122734:	10800a04 	addi	r2,r2,40
  122738:	e0fff917 	ldw	r3,-28(fp)
  12273c:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  122740:	008004b4 	movhi	r2,18
  122744:	10897b04 	addi	r2,r2,9708
  122748:	10c00104 	addi	r3,r2,4
  12274c:	e0bffb17 	ldw	r2,-20(fp)
  122750:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  122754:	e0bffb17 	ldw	r2,-20(fp)
}
  122758:	e037883a 	mov	sp,fp
  12275c:	dfc00117 	ldw	ra,4(sp)
  122760:	df000017 	ldw	fp,0(sp)
  122764:	dec00204 	addi	sp,sp,8
  122768:	f800283a 	ret

0012276c <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  12276c:	defffe04 	addi	sp,sp,-8
  122770:	df000115 	stw	fp,4(sp)
  122774:	df000104 	addi	fp,sp,4
  122778:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  12277c:	0001883a 	nop
  122780:	e037883a 	mov	sp,fp
  122784:	df000017 	ldw	fp,0(sp)
  122788:	dec00104 	addi	sp,sp,4
  12278c:	f800283a 	ret

00122790 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  122790:	defffe04 	addi	sp,sp,-8
  122794:	df000115 	stw	fp,4(sp)
  122798:	df000104 	addi	fp,sp,4
  12279c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  1227a0:	0001883a 	nop
  1227a4:	e037883a 	mov	sp,fp
  1227a8:	df000017 	ldw	fp,0(sp)
  1227ac:	dec00104 	addi	sp,sp,4
  1227b0:	f800283a 	ret

001227b4 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  1227b4:	deffff04 	addi	sp,sp,-4
  1227b8:	df000015 	stw	fp,0(sp)
  1227bc:	d839883a 	mov	fp,sp
}
  1227c0:	0001883a 	nop
  1227c4:	e037883a 	mov	sp,fp
  1227c8:	df000017 	ldw	fp,0(sp)
  1227cc:	dec00104 	addi	sp,sp,4
  1227d0:	f800283a 	ret

001227d4 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  1227d4:	deffff04 	addi	sp,sp,-4
  1227d8:	df000015 	stw	fp,0(sp)
  1227dc:	d839883a 	mov	fp,sp
}
  1227e0:	0001883a 	nop
  1227e4:	e037883a 	mov	sp,fp
  1227e8:	df000017 	ldw	fp,0(sp)
  1227ec:	dec00104 	addi	sp,sp,4
  1227f0:	f800283a 	ret

001227f4 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  1227f4:	deffff04 	addi	sp,sp,-4
  1227f8:	df000015 	stw	fp,0(sp)
  1227fc:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  122800:	0001883a 	nop
  122804:	e037883a 	mov	sp,fp
  122808:	df000017 	ldw	fp,0(sp)
  12280c:	dec00104 	addi	sp,sp,4
  122810:	f800283a 	ret

00122814 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  122814:	deffff04 	addi	sp,sp,-4
  122818:	df000015 	stw	fp,0(sp)
  12281c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  122820:	0001883a 	nop
  122824:	e037883a 	mov	sp,fp
  122828:	df000017 	ldw	fp,0(sp)
  12282c:	dec00104 	addi	sp,sp,4
  122830:	f800283a 	ret

00122834 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  122834:	deffff04 	addi	sp,sp,-4
  122838:	df000015 	stw	fp,0(sp)
  12283c:	d839883a 	mov	fp,sp
}
  122840:	0001883a 	nop
  122844:	e037883a 	mov	sp,fp
  122848:	df000017 	ldw	fp,0(sp)
  12284c:	dec00104 	addi	sp,sp,4
  122850:	f800283a 	ret

00122854 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  122854:	deffff04 	addi	sp,sp,-4
  122858:	df000015 	stw	fp,0(sp)
  12285c:	d839883a 	mov	fp,sp
}
  122860:	0001883a 	nop
  122864:	e037883a 	mov	sp,fp
  122868:	df000017 	ldw	fp,0(sp)
  12286c:	dec00104 	addi	sp,sp,4
  122870:	f800283a 	ret

00122874 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  122874:	defffe04 	addi	sp,sp,-8
  122878:	df000115 	stw	fp,4(sp)
  12287c:	df000104 	addi	fp,sp,4
  122880:	e13fff15 	stw	r4,-4(fp)
}
  122884:	0001883a 	nop
  122888:	e037883a 	mov	sp,fp
  12288c:	df000017 	ldw	fp,0(sp)
  122890:	dec00104 	addi	sp,sp,4
  122894:	f800283a 	ret

00122898 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  122898:	defffa04 	addi	sp,sp,-24
  12289c:	dfc00515 	stw	ra,20(sp)
  1228a0:	df000415 	stw	fp,16(sp)
  1228a4:	df000404 	addi	fp,sp,16
  1228a8:	e13ffe15 	stw	r4,-8(fp)
  1228ac:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  1228b0:	e0bfff17 	ldw	r2,-4(fp)
  1228b4:	10800017 	ldw	r2,0(r2)
  1228b8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  1228bc:	e13ffe17 	ldw	r4,-8(fp)
  1228c0:	0101cfc0 	call	101cfc <strlen>
  1228c4:	10800044 	addi	r2,r2,1
  1228c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  1228cc:	00000d06 	br	122904 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  1228d0:	e0bffc17 	ldw	r2,-16(fp)
  1228d4:	10800217 	ldw	r2,8(r2)
  1228d8:	e0fffd17 	ldw	r3,-12(fp)
  1228dc:	180d883a 	mov	r6,r3
  1228e0:	e17ffe17 	ldw	r5,-8(fp)
  1228e4:	1009883a 	mov	r4,r2
  1228e8:	0122b700 	call	122b70 <memcmp>
  1228ec:	1000021e 	bne	r2,zero,1228f8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  1228f0:	e0bffc17 	ldw	r2,-16(fp)
  1228f4:	00000706 	br	122914 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  1228f8:	e0bffc17 	ldw	r2,-16(fp)
  1228fc:	10800017 	ldw	r2,0(r2)
  122900:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  122904:	e0fffc17 	ldw	r3,-16(fp)
  122908:	e0bfff17 	ldw	r2,-4(fp)
  12290c:	18bff01e 	bne	r3,r2,1228d0 <__alt_data_end+0xfffe28d0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  122910:	0005883a 	mov	r2,zero
}
  122914:	e037883a 	mov	sp,fp
  122918:	dfc00117 	ldw	ra,4(sp)
  12291c:	df000017 	ldw	fp,0(sp)
  122920:	dec00204 	addi	sp,sp,8
  122924:	f800283a 	ret

00122928 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  122928:	defffb04 	addi	sp,sp,-20
  12292c:	dfc00415 	stw	ra,16(sp)
  122930:	df000315 	stw	fp,12(sp)
  122934:	df000304 	addi	fp,sp,12
  122938:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  12293c:	d0a00817 	ldw	r2,-32736(gp)
  122940:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  122944:	00003106 	br	122a0c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  122948:	e0bffd17 	ldw	r2,-12(fp)
  12294c:	10800217 	ldw	r2,8(r2)
  122950:	1009883a 	mov	r4,r2
  122954:	0101cfc0 	call	101cfc <strlen>
  122958:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  12295c:	e0bffd17 	ldw	r2,-12(fp)
  122960:	10c00217 	ldw	r3,8(r2)
  122964:	e0bffe17 	ldw	r2,-8(fp)
  122968:	10bfffc4 	addi	r2,r2,-1
  12296c:	1885883a 	add	r2,r3,r2
  122970:	10800003 	ldbu	r2,0(r2)
  122974:	10803fcc 	andi	r2,r2,255
  122978:	1080201c 	xori	r2,r2,128
  12297c:	10bfe004 	addi	r2,r2,-128
  122980:	10800bd8 	cmpnei	r2,r2,47
  122984:	1000031e 	bne	r2,zero,122994 <alt_find_file+0x6c>
    {
      len -= 1;
  122988:	e0bffe17 	ldw	r2,-8(fp)
  12298c:	10bfffc4 	addi	r2,r2,-1
  122990:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  122994:	e0bffe17 	ldw	r2,-8(fp)
  122998:	e0ffff17 	ldw	r3,-4(fp)
  12299c:	1885883a 	add	r2,r3,r2
  1229a0:	10800003 	ldbu	r2,0(r2)
  1229a4:	10803fcc 	andi	r2,r2,255
  1229a8:	1080201c 	xori	r2,r2,128
  1229ac:	10bfe004 	addi	r2,r2,-128
  1229b0:	10800be0 	cmpeqi	r2,r2,47
  1229b4:	1000081e 	bne	r2,zero,1229d8 <alt_find_file+0xb0>
  1229b8:	e0bffe17 	ldw	r2,-8(fp)
  1229bc:	e0ffff17 	ldw	r3,-4(fp)
  1229c0:	1885883a 	add	r2,r3,r2
  1229c4:	10800003 	ldbu	r2,0(r2)
  1229c8:	10803fcc 	andi	r2,r2,255
  1229cc:	1080201c 	xori	r2,r2,128
  1229d0:	10bfe004 	addi	r2,r2,-128
  1229d4:	10000a1e 	bne	r2,zero,122a00 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  1229d8:	e0bffd17 	ldw	r2,-12(fp)
  1229dc:	10800217 	ldw	r2,8(r2)
  1229e0:	e0fffe17 	ldw	r3,-8(fp)
  1229e4:	180d883a 	mov	r6,r3
  1229e8:	e17fff17 	ldw	r5,-4(fp)
  1229ec:	1009883a 	mov	r4,r2
  1229f0:	0122b700 	call	122b70 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  1229f4:	1000021e 	bne	r2,zero,122a00 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  1229f8:	e0bffd17 	ldw	r2,-12(fp)
  1229fc:	00000706 	br	122a1c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  122a00:	e0bffd17 	ldw	r2,-12(fp)
  122a04:	10800017 	ldw	r2,0(r2)
  122a08:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  122a0c:	e0fffd17 	ldw	r3,-12(fp)
  122a10:	d0a00804 	addi	r2,gp,-32736
  122a14:	18bfcc1e 	bne	r3,r2,122948 <__alt_data_end+0xfffe2948>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  122a18:	0005883a 	mov	r2,zero
}
  122a1c:	e037883a 	mov	sp,fp
  122a20:	dfc00117 	ldw	ra,4(sp)
  122a24:	df000017 	ldw	fp,0(sp)
  122a28:	dec00204 	addi	sp,sp,8
  122a2c:	f800283a 	ret

00122a30 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  122a30:	defff804 	addi	sp,sp,-32
  122a34:	dfc00715 	stw	ra,28(sp)
  122a38:	df000615 	stw	fp,24(sp)
  122a3c:	dc000515 	stw	r16,20(sp)
  122a40:	df000604 	addi	fp,sp,24
  122a44:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
  122a48:	00bffa04 	movi	r2,-24
  122a4c:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  122a50:	d0a73117 	ldw	r2,-25404(gp)
  122a54:	e0bffc15 	stw	r2,-16(fp)
  122a58:	e03ffd0d 	sth	zero,-12(fp)
  122a5c:	e0bffd0b 	ldhu	r2,-12(fp)
  122a60:	e0fffd84 	addi	r3,fp,-10
  122a64:	180d883a 	mov	r6,r3
  122a68:	100b883a 	mov	r5,r2
  122a6c:	e13ffc17 	ldw	r4,-16(fp)
  122a70:	011e7ec0 	call	11e7ec <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  122a74:	e03ffa15 	stw	zero,-24(fp)
  122a78:	00001d06 	br	122af0 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
  122a7c:	040004b4 	movhi	r16,18
  122a80:	8410f704 	addi	r16,r16,17372
  122a84:	e0bffa17 	ldw	r2,-24(fp)
  122a88:	01400304 	movi	r5,12
  122a8c:	1009883a 	mov	r4,r2
  122a90:	01159fc0 	call	1159fc <__mulsi3>
  122a94:	8085883a 	add	r2,r16,r2
  122a98:	10800017 	ldw	r2,0(r2)
  122a9c:	1000111e 	bne	r2,zero,122ae4 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
  122aa0:	040004b4 	movhi	r16,18
  122aa4:	8410f704 	addi	r16,r16,17372
  122aa8:	e0bffa17 	ldw	r2,-24(fp)
  122aac:	01400304 	movi	r5,12
  122ab0:	1009883a 	mov	r4,r2
  122ab4:	01159fc0 	call	1159fc <__mulsi3>
  122ab8:	8085883a 	add	r2,r16,r2
  122abc:	e0fffe17 	ldw	r3,-8(fp)
  122ac0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  122ac4:	d0e00c17 	ldw	r3,-32720(gp)
  122ac8:	e0bffa17 	ldw	r2,-24(fp)
  122acc:	1880020e 	bge	r3,r2,122ad8 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
  122ad0:	e0bffa17 	ldw	r2,-24(fp)
  122ad4:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
  122ad8:	e0bffa17 	ldw	r2,-24(fp)
  122adc:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
  122ae0:	00000606 	br	122afc <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  122ae4:	e0bffa17 	ldw	r2,-24(fp)
  122ae8:	10800044 	addi	r2,r2,1
  122aec:	e0bffa15 	stw	r2,-24(fp)
  122af0:	e0bffa17 	ldw	r2,-24(fp)
  122af4:	10800810 	cmplti	r2,r2,32
  122af8:	103fe01e 	bne	r2,zero,122a7c <__alt_data_end+0xfffe2a7c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  122afc:	d0a73117 	ldw	r2,-25404(gp)
  122b00:	1009883a 	mov	r4,r2
  122b04:	011eb640 	call	11eb64 <OSSemPost>

  return rc;
  122b08:	e0bffb17 	ldw	r2,-20(fp)
}
  122b0c:	e6ffff04 	addi	sp,fp,-4
  122b10:	dfc00217 	ldw	ra,8(sp)
  122b14:	df000117 	ldw	fp,4(sp)
  122b18:	dc000017 	ldw	r16,0(sp)
  122b1c:	dec00304 	addi	sp,sp,12
  122b20:	f800283a 	ret

00122b24 <atexit>:
  122b24:	200b883a 	mov	r5,r4
  122b28:	000f883a 	mov	r7,zero
  122b2c:	000d883a 	mov	r6,zero
  122b30:	0009883a 	mov	r4,zero
  122b34:	0122bec1 	jmpi	122bec <__register_exitproc>

00122b38 <exit>:
  122b38:	defffe04 	addi	sp,sp,-8
  122b3c:	000b883a 	mov	r5,zero
  122b40:	dc000015 	stw	r16,0(sp)
  122b44:	dfc00115 	stw	ra,4(sp)
  122b48:	2021883a 	mov	r16,r4
  122b4c:	0122d040 	call	122d04 <__call_exitprocs>
  122b50:	008004b4 	movhi	r2,18
  122b54:	10957304 	addi	r2,r2,21964
  122b58:	11000017 	ldw	r4,0(r2)
  122b5c:	20800f17 	ldw	r2,60(r4)
  122b60:	10000126 	beq	r2,zero,122b68 <exit+0x30>
  122b64:	103ee83a 	callr	r2
  122b68:	8009883a 	mov	r4,r16
  122b6c:	0122e840 	call	122e84 <_exit>

00122b70 <memcmp>:
  122b70:	01c000c4 	movi	r7,3
  122b74:	3980192e 	bgeu	r7,r6,122bdc <memcmp+0x6c>
  122b78:	2144b03a 	or	r2,r4,r5
  122b7c:	11c4703a 	and	r2,r2,r7
  122b80:	10000f26 	beq	r2,zero,122bc0 <memcmp+0x50>
  122b84:	20800003 	ldbu	r2,0(r4)
  122b88:	28c00003 	ldbu	r3,0(r5)
  122b8c:	10c0151e 	bne	r2,r3,122be4 <memcmp+0x74>
  122b90:	31bfff84 	addi	r6,r6,-2
  122b94:	01ffffc4 	movi	r7,-1
  122b98:	00000406 	br	122bac <memcmp+0x3c>
  122b9c:	20800003 	ldbu	r2,0(r4)
  122ba0:	28c00003 	ldbu	r3,0(r5)
  122ba4:	31bfffc4 	addi	r6,r6,-1
  122ba8:	10c00e1e 	bne	r2,r3,122be4 <memcmp+0x74>
  122bac:	21000044 	addi	r4,r4,1
  122bb0:	29400044 	addi	r5,r5,1
  122bb4:	31fff91e 	bne	r6,r7,122b9c <__alt_data_end+0xfffe2b9c>
  122bb8:	0005883a 	mov	r2,zero
  122bbc:	f800283a 	ret
  122bc0:	20c00017 	ldw	r3,0(r4)
  122bc4:	28800017 	ldw	r2,0(r5)
  122bc8:	18bfee1e 	bne	r3,r2,122b84 <__alt_data_end+0xfffe2b84>
  122bcc:	31bfff04 	addi	r6,r6,-4
  122bd0:	21000104 	addi	r4,r4,4
  122bd4:	29400104 	addi	r5,r5,4
  122bd8:	39bff936 	bltu	r7,r6,122bc0 <__alt_data_end+0xfffe2bc0>
  122bdc:	303fe91e 	bne	r6,zero,122b84 <__alt_data_end+0xfffe2b84>
  122be0:	003ff506 	br	122bb8 <__alt_data_end+0xfffe2bb8>
  122be4:	10c5c83a 	sub	r2,r2,r3
  122be8:	f800283a 	ret

00122bec <__register_exitproc>:
  122bec:	defffa04 	addi	sp,sp,-24
  122bf0:	dc000315 	stw	r16,12(sp)
  122bf4:	040004b4 	movhi	r16,18
  122bf8:	84157304 	addi	r16,r16,21964
  122bfc:	80c00017 	ldw	r3,0(r16)
  122c00:	dc400415 	stw	r17,16(sp)
  122c04:	dfc00515 	stw	ra,20(sp)
  122c08:	18805217 	ldw	r2,328(r3)
  122c0c:	2023883a 	mov	r17,r4
  122c10:	10003726 	beq	r2,zero,122cf0 <__register_exitproc+0x104>
  122c14:	10c00117 	ldw	r3,4(r2)
  122c18:	010007c4 	movi	r4,31
  122c1c:	20c00e16 	blt	r4,r3,122c58 <__register_exitproc+0x6c>
  122c20:	1a000044 	addi	r8,r3,1
  122c24:	8800221e 	bne	r17,zero,122cb0 <__register_exitproc+0xc4>
  122c28:	18c00084 	addi	r3,r3,2
  122c2c:	18c7883a 	add	r3,r3,r3
  122c30:	18c7883a 	add	r3,r3,r3
  122c34:	12000115 	stw	r8,4(r2)
  122c38:	10c7883a 	add	r3,r2,r3
  122c3c:	19400015 	stw	r5,0(r3)
  122c40:	0005883a 	mov	r2,zero
  122c44:	dfc00517 	ldw	ra,20(sp)
  122c48:	dc400417 	ldw	r17,16(sp)
  122c4c:	dc000317 	ldw	r16,12(sp)
  122c50:	dec00604 	addi	sp,sp,24
  122c54:	f800283a 	ret
  122c58:	00800034 	movhi	r2,0
  122c5c:	10800004 	addi	r2,r2,0
  122c60:	10002626 	beq	r2,zero,122cfc <__register_exitproc+0x110>
  122c64:	01006404 	movi	r4,400
  122c68:	d9400015 	stw	r5,0(sp)
  122c6c:	d9800115 	stw	r6,4(sp)
  122c70:	d9c00215 	stw	r7,8(sp)
  122c74:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  122c78:	d9400017 	ldw	r5,0(sp)
  122c7c:	d9800117 	ldw	r6,4(sp)
  122c80:	d9c00217 	ldw	r7,8(sp)
  122c84:	10001d26 	beq	r2,zero,122cfc <__register_exitproc+0x110>
  122c88:	81000017 	ldw	r4,0(r16)
  122c8c:	10000115 	stw	zero,4(r2)
  122c90:	02000044 	movi	r8,1
  122c94:	22405217 	ldw	r9,328(r4)
  122c98:	0007883a 	mov	r3,zero
  122c9c:	12400015 	stw	r9,0(r2)
  122ca0:	20805215 	stw	r2,328(r4)
  122ca4:	10006215 	stw	zero,392(r2)
  122ca8:	10006315 	stw	zero,396(r2)
  122cac:	883fde26 	beq	r17,zero,122c28 <__alt_data_end+0xfffe2c28>
  122cb0:	18c9883a 	add	r4,r3,r3
  122cb4:	2109883a 	add	r4,r4,r4
  122cb8:	1109883a 	add	r4,r2,r4
  122cbc:	21802215 	stw	r6,136(r4)
  122cc0:	01800044 	movi	r6,1
  122cc4:	12406217 	ldw	r9,392(r2)
  122cc8:	30cc983a 	sll	r6,r6,r3
  122ccc:	4992b03a 	or	r9,r9,r6
  122cd0:	12406215 	stw	r9,392(r2)
  122cd4:	21c04215 	stw	r7,264(r4)
  122cd8:	01000084 	movi	r4,2
  122cdc:	893fd21e 	bne	r17,r4,122c28 <__alt_data_end+0xfffe2c28>
  122ce0:	11006317 	ldw	r4,396(r2)
  122ce4:	218cb03a 	or	r6,r4,r6
  122ce8:	11806315 	stw	r6,396(r2)
  122cec:	003fce06 	br	122c28 <__alt_data_end+0xfffe2c28>
  122cf0:	18805304 	addi	r2,r3,332
  122cf4:	18805215 	stw	r2,328(r3)
  122cf8:	003fc606 	br	122c14 <__alt_data_end+0xfffe2c14>
  122cfc:	00bfffc4 	movi	r2,-1
  122d00:	003fd006 	br	122c44 <__alt_data_end+0xfffe2c44>

00122d04 <__call_exitprocs>:
  122d04:	defff504 	addi	sp,sp,-44
  122d08:	df000915 	stw	fp,36(sp)
  122d0c:	dd400615 	stw	r21,24(sp)
  122d10:	dc800315 	stw	r18,12(sp)
  122d14:	dfc00a15 	stw	ra,40(sp)
  122d18:	ddc00815 	stw	r23,32(sp)
  122d1c:	dd800715 	stw	r22,28(sp)
  122d20:	dd000515 	stw	r20,20(sp)
  122d24:	dcc00415 	stw	r19,16(sp)
  122d28:	dc400215 	stw	r17,8(sp)
  122d2c:	dc000115 	stw	r16,4(sp)
  122d30:	d9000015 	stw	r4,0(sp)
  122d34:	2839883a 	mov	fp,r5
  122d38:	04800044 	movi	r18,1
  122d3c:	057fffc4 	movi	r21,-1
  122d40:	008004b4 	movhi	r2,18
  122d44:	10957304 	addi	r2,r2,21964
  122d48:	12000017 	ldw	r8,0(r2)
  122d4c:	45005217 	ldw	r20,328(r8)
  122d50:	44c05204 	addi	r19,r8,328
  122d54:	a0001c26 	beq	r20,zero,122dc8 <__call_exitprocs+0xc4>
  122d58:	a0800117 	ldw	r2,4(r20)
  122d5c:	15ffffc4 	addi	r23,r2,-1
  122d60:	b8000d16 	blt	r23,zero,122d98 <__call_exitprocs+0x94>
  122d64:	14000044 	addi	r16,r2,1
  122d68:	8421883a 	add	r16,r16,r16
  122d6c:	8421883a 	add	r16,r16,r16
  122d70:	84402004 	addi	r17,r16,128
  122d74:	a463883a 	add	r17,r20,r17
  122d78:	a421883a 	add	r16,r20,r16
  122d7c:	e0001e26 	beq	fp,zero,122df8 <__call_exitprocs+0xf4>
  122d80:	80804017 	ldw	r2,256(r16)
  122d84:	e0801c26 	beq	fp,r2,122df8 <__call_exitprocs+0xf4>
  122d88:	bdffffc4 	addi	r23,r23,-1
  122d8c:	843fff04 	addi	r16,r16,-4
  122d90:	8c7fff04 	addi	r17,r17,-4
  122d94:	bd7ff91e 	bne	r23,r21,122d7c <__alt_data_end+0xfffe2d7c>
  122d98:	00800034 	movhi	r2,0
  122d9c:	10800004 	addi	r2,r2,0
  122da0:	10000926 	beq	r2,zero,122dc8 <__call_exitprocs+0xc4>
  122da4:	a0800117 	ldw	r2,4(r20)
  122da8:	1000301e 	bne	r2,zero,122e6c <__call_exitprocs+0x168>
  122dac:	a0800017 	ldw	r2,0(r20)
  122db0:	10003226 	beq	r2,zero,122e7c <__call_exitprocs+0x178>
  122db4:	a009883a 	mov	r4,r20
  122db8:	98800015 	stw	r2,0(r19)
  122dbc:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  122dc0:	9d000017 	ldw	r20,0(r19)
  122dc4:	a03fe41e 	bne	r20,zero,122d58 <__alt_data_end+0xfffe2d58>
  122dc8:	dfc00a17 	ldw	ra,40(sp)
  122dcc:	df000917 	ldw	fp,36(sp)
  122dd0:	ddc00817 	ldw	r23,32(sp)
  122dd4:	dd800717 	ldw	r22,28(sp)
  122dd8:	dd400617 	ldw	r21,24(sp)
  122ddc:	dd000517 	ldw	r20,20(sp)
  122de0:	dcc00417 	ldw	r19,16(sp)
  122de4:	dc800317 	ldw	r18,12(sp)
  122de8:	dc400217 	ldw	r17,8(sp)
  122dec:	dc000117 	ldw	r16,4(sp)
  122df0:	dec00b04 	addi	sp,sp,44
  122df4:	f800283a 	ret
  122df8:	a0800117 	ldw	r2,4(r20)
  122dfc:	80c00017 	ldw	r3,0(r16)
  122e00:	10bfffc4 	addi	r2,r2,-1
  122e04:	15c01426 	beq	r2,r23,122e58 <__call_exitprocs+0x154>
  122e08:	80000015 	stw	zero,0(r16)
  122e0c:	183fde26 	beq	r3,zero,122d88 <__alt_data_end+0xfffe2d88>
  122e10:	95c8983a 	sll	r4,r18,r23
  122e14:	a0806217 	ldw	r2,392(r20)
  122e18:	a5800117 	ldw	r22,4(r20)
  122e1c:	2084703a 	and	r2,r4,r2
  122e20:	10000b26 	beq	r2,zero,122e50 <__call_exitprocs+0x14c>
  122e24:	a0806317 	ldw	r2,396(r20)
  122e28:	2088703a 	and	r4,r4,r2
  122e2c:	20000c1e 	bne	r4,zero,122e60 <__call_exitprocs+0x15c>
  122e30:	89400017 	ldw	r5,0(r17)
  122e34:	d9000017 	ldw	r4,0(sp)
  122e38:	183ee83a 	callr	r3
  122e3c:	a0800117 	ldw	r2,4(r20)
  122e40:	15bfbf1e 	bne	r2,r22,122d40 <__alt_data_end+0xfffe2d40>
  122e44:	98800017 	ldw	r2,0(r19)
  122e48:	153fcf26 	beq	r2,r20,122d88 <__alt_data_end+0xfffe2d88>
  122e4c:	003fbc06 	br	122d40 <__alt_data_end+0xfffe2d40>
  122e50:	183ee83a 	callr	r3
  122e54:	003ff906 	br	122e3c <__alt_data_end+0xfffe2e3c>
  122e58:	a5c00115 	stw	r23,4(r20)
  122e5c:	003feb06 	br	122e0c <__alt_data_end+0xfffe2e0c>
  122e60:	89000017 	ldw	r4,0(r17)
  122e64:	183ee83a 	callr	r3
  122e68:	003ff406 	br	122e3c <__alt_data_end+0xfffe2e3c>
  122e6c:	a0800017 	ldw	r2,0(r20)
  122e70:	a027883a 	mov	r19,r20
  122e74:	1029883a 	mov	r20,r2
  122e78:	003fb606 	br	122d54 <__alt_data_end+0xfffe2d54>
  122e7c:	0005883a 	mov	r2,zero
  122e80:	003ffb06 	br	122e70 <__alt_data_end+0xfffe2e70>

00122e84 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  122e84:	defffd04 	addi	sp,sp,-12
  122e88:	df000215 	stw	fp,8(sp)
  122e8c:	df000204 	addi	fp,sp,8
  122e90:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  122e94:	d0273945 	stb	zero,-25371(gp)
  122e98:	e0bfff17 	ldw	r2,-4(fp)
  122e9c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  122ea0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  122ea4:	10000226 	beq	r2,zero,122eb0 <_exit+0x2c>
    ALT_SIM_FAIL();
  122ea8:	002af070 	cmpltui	zero,zero,43969
  122eac:	00000106 	br	122eb4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  122eb0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  122eb4:	003fff06 	br	122eb4 <__alt_data_end+0xfffe2eb4>
